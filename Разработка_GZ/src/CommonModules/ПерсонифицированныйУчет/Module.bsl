
#Область ПрограммныйИнтерфейс

// Процедура возвращает структуру с табличными документами разделов 2.5 и 6 формы РСВ-1.
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на сохраненный документ "РегламентированныйОтчет".
//  СтруктураРазделов     - Структура - структура с полями:
//    * Раздел25 - Массив - массив структур см. РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1;
//    * Раздел6  - Массив - массив структур см. РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1.
//
Процедура ЗаполнитьПечатныеФормыРазделовРСВ1(СсылкаНаСохрРеглОтчет, СтруктураРазделов, НумероватьСтраницы, НомерПервойСтраницыРаздела25, НомерПоследнейСтраницыРаздела25, НомерПервойСтраницыРаздела6, ОбщееКоличествоСтраницРаздела6) Экспорт
	Ссылка = Справочники.КомплектыОтчетностиПерсУчета.КомплектСодержащийРСВ_1(СсылкаНаСохрРеглОтчет);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ПараметрыФормирования = Справочники.КомплектыОтчетностиПерсУчета.ПараметрыФормированияПечатныхФормКомплекта();
		
		Если СтруктураРазделов.Свойство("Раздел25") Тогда
			ПараметрыФормирования.ФормироватьПечатныеФормыРаздел25 = СтруктураРазделов.Раздел25.ПолучатьТабличныеДокументыРаздела;
			ПараметрыФормирования.ФормироватьСтруктуруРаздел25 = СтруктураРазделов.Раздел25.ПолучатьСтруктуруРаздела;
		КонецЕсли;	
		
		Если СтруктураРазделов.Свойство("Раздел6") Тогда
			Если СтруктураРазделов.Раздел6.ПолучатьСтруктуруРаздела Тогда
				ПараметрыФормирования.ФормироватьСтруктуруРаздел6 = Истина;
			Иначе
				
				ПараметрыФормирования.ФормироватьСтруктуруРаздел6 = Ложь;
				ПечатаемыеДокументы = Новый Массив;
				
				Для Каждого ОписаниеСтраницыРаздела6 Из СтруктураРазделов.Раздел6.СтраницыРаздела Цикл
					ПечатаемыеДокументы.Добавить(ОписаниеСтраницыРаздела6.Идентификатор);	
				КонецЦикла;	
				
				ПараметрыФормирования.ПечатаемыеДокументы = ПечатаемыеДокументы;
			КонецЕсли;	
			
			ПараметрыФормирования.ФормироватьПечатныеФормыРаздел6 = СтруктураРазделов.Раздел6.ПолучатьТабличныеДокументыРаздела;	
		КонецЕсли;	
			
		
		ПечатныеФормыКомплекта2014Года = Справочники.КомплектыОтчетностиПерсУчета.ПечатныеФормыКомплекта2014Года(
												Ссылка, 
												ПараметрыФормирования,
												НумероватьСтраницы,
												НомерПервойСтраницыРаздела25,
												НомерПоследнейСтраницыРаздела25,
												НомерПервойСтраницыРаздела6,
												ОбщееКоличествоСтраницРаздела6);
												
		Если СтруктураРазделов.Свойство("Раздел25") Тогда 
			СтруктураРазделов.Раздел25.СтраницыРаздела = ПечатныеФормыКомплекта2014Года.Раздел25;
		КонецЕсли;	
							
		Если СтруктураРазделов.Свойство("Раздел6") Тогда
			СтруктураРазделов.Раздел6.СтраницыРаздела =  ПечатныеФормыКомплекта2014Года.Раздел6 ;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СсылкаНаСохрРеглОтчет) Тогда
		ДанныеРСВ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаСохрРеглОтчет, "ДатаНачала, Организация, ДатаПодписи");
		ОписаниеРаздела25 = РегламентированнаяОтчетность.ПустаяСтруктураДляРазделовФормыРСВ_1();
		ОписаниеРаздела25.Описание = "Раздел 2.5";
		ОписаниеРаздела25.ТабличныйДокумент = Справочники.КомплектыОтчетностиПерсУчета.ПустойРаздел25РасчетаРСВ1(
												ДанныеРСВ.Организация, 
												ДанныеРСВ.ДатаПодписи,
												НумероватьСтраницы, 
												НомерПервойСтраницыРаздела25,
												НачалоКвартала(ДанныеРСВ.ДатаНачала));
												
		СтруктураРазделов.Раздел25.СтраницыРаздела.Добавить(ОписаниеРаздела25);	
	КонецЕсли;		

КонецПроцедуры

// Процедура заполняет данные для выгрузки раздела 2.5 формы РСВ-1
//
// Параметры:
//  СсылкаНаСохрРеглОтчет - ссылка на регламентированный отчет;
//  ДанныеРаздела25       - структура с ключами "Таблица_2_5_1" и "Таблица_2_5_2":
//    "Таблица_2_5_1"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.1 по колонкам 2 - 5:
//      "П000251000102"   - Число (15, 2);
//      "П000251000103"   - Число (15, 2);
//      "П000251000104"   - Число ( 3, 0);
//      "П000251000105"   - Строка  (100);
//    "Таблица_2_5_2"     - таблица значений - заполняется данными многострочной
//                          части подраздела 2.5.2 по колонкам 2 - 8:
//      "П000252000102"   - Число ( 1, 0);
//      "П000252000103"   - Число ( 4, 0);
//      "П000252000104"   - Число (15, 2);
//      "П000252000105"   - Число (15, 2);
//      "П000252000106"   - Число (15, 2);
//      "П000252000107"   - Число ( 3, 0);
//      "П000252000108"   - Строка  (100).
//
Процедура ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25) Экспорт
	Справочники.КомплектыОтчетностиПерсУчета.ЗаполнитьДанныеДляВыгрузкиРаздела25РСВ_1(СсылкаНаСохрРеглОтчет, ДанныеРаздела25);	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	ТипыДокументовПерсУчета = ПерсонифицированныйУчетКлиентСервер.ТипыОтправляемыхДокументовПерсУчета();
	
	ТипыАнкетПерУчета = Новый Массив;
	ТипыАнкетПерУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_1"));
	ТипыАнкетПерУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_2"));
	ТипыАнкетПерУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_3"));
	ТипыАнкетПерУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_К"));
	
	СоответствиеСсылокСвойствам = Новый Соответствие;
	ДокументыПерсУчета = Новый Массив;
	АнкетыПерУчета = Новый Массив;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипыДокументовПерсУчета.Найти(ТипЗнч(ЗапрашиваемыеДанные.Ссылка)) <> Неопределено Тогда
			Если ТипыАнкетПерУчета.Найти(ТипЗнч(ЗапрашиваемыеДанные.Ссылка)) <> Неопределено Тогда
				АнкетыПерУчета.Добавить(ЗапрашиваемыеДанные.Ссылка);	
			Иначе	
				ДокументыПерсУчета.Добавить(ЗапрашиваемыеДанные.Ссылка);
			КонецЕсли;	
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		КонецЕсли;	
	КонецЦикла;		
	
		
	Запрос = Новый Запрос;
	
	Если ДокументыПерсУчета.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ДокументыПерсУчета", ДокументыПерсУчета);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВедомостьУплатыАДВ_11.Ссылка КАК Ссылка,
		|	ВедомостьУплатыАДВ_11.Дата КАК ДатаСоздания,
		|	ВедомостьУплатыАДВ_11.Организация КАК Организация,
		|	ВедомостьУплатыАДВ_11.Организация.КодОрганаПФР КАК КодКонтролирующегоОргана,
		|	ВедомостьУплатыАДВ_11.ПометкаУдаления КАК ПометкаУдаления,
		|	НАЧАЛОПЕРИОДА(ВедомостьУплатыАДВ_11.ОкончаниеОтчетногоПериода, ГОД) КАК ДатаНачала,
		|	ВедомостьУплатыАДВ_11.ОкончаниеОтчетногоПериода КАК ДатаОкончания,
		|	ВедомостьУплатыАДВ_11.Комментарий КАК Комментарий,
		|	""-"" КАК ВариантОтчета
		|ИЗ
		|	Документ.ВедомостьУплатыАДВ_11 КАК ВедомостьУплатыАДВ_11
		|ГДЕ
		|	ВедомостьУплатыАДВ_11.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПачкаДокументовДСВ_1.Ссылка,
		|	ПачкаДокументовДСВ_1.Дата,
		|	ПачкаДокументовДСВ_1.Организация,
		|	ПачкаДокументовДСВ_1.Организация.КодОрганаПФР,
		|	ПачкаДокументовДСВ_1.ПометкаУдаления,
		|	НАЧАЛОПЕРИОДА(ПачкаДокументовДСВ_1.Дата, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ПачкаДокументовДСВ_1.Дата, ДЕНЬ),
		|	ПачкаДокументовДСВ_1.Комментарий,
		|	""-""
		|ИЗ
		|	Документ.ПачкаДокументовДСВ_1 КАК ПачкаДокументовДСВ_1
		|ГДЕ
		|	ПачкаДокументовДСВ_1.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПачкаДокументовСПВ_1.Ссылка,
		|	ПачкаДокументовСПВ_1.Дата,
		|	ПачкаДокументовСПВ_1.Организация,
		|	ПачкаДокументовСПВ_1.Организация.КодОрганаПФР,
		|	ПачкаДокументовСПВ_1.ПометкаУдаления,
		|	ПачкаДокументовСПВ_1.ОтчетныйПериод,
		|	ПачкаДокументовСПВ_1.ОкончаниеОтчетногоПериода,
		|	ПачкаДокументовСПВ_1.Комментарий,
		|	ВЫБОР
		|		КОГДА ПачкаДокументовСПВ_1.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
		|			ТОГДА ""П""
		|		ИНАЧЕ ""К""
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПачкаДокументовСПВ_1 КАК ПачкаДокументовСПВ_1
		|ГДЕ
		|	ПачкаДокументовСПВ_1.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПачкаДокументовСПВ_2.Ссылка,
		|	ПачкаДокументовСПВ_2.Дата,
		|	ПачкаДокументовСПВ_2.Организация,
		|	ПачкаДокументовСПВ_2.Организация.КодОрганаПФР,
		|	ПачкаДокументовСПВ_2.ПометкаУдаления,
		|	ПачкаДокументовСПВ_2.ОтчетныйПериод,
		|	ПачкаДокументовСПВ_2.ОкончаниеОтчетногоПериода,
		|	ПачкаДокументовСПВ_2.Комментарий,
		|	ВЫБОР
		|		КОГДА ПачкаДокументовСПВ_2.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
		|			ТОГДА ""П""
		|		ИНАЧЕ ""К""
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПачкаДокументовСПВ_2 КАК ПачкаДокументовСПВ_2
		|ГДЕ
		|	ПачкаДокументовСПВ_2.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Дата,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация.КодОрганаПФР,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.ПометкаУдаления,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.ОкончаниеОтчетногоПериода,
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Комментарий,
		|	ВЫБОР
		|		КОГДА СведенияОЗастрахованныхЛицахСЗВ_М.ТипФормы = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_М.Исходная)
		|			ТОГДА ""П""
		|		ИНАЧЕ ""К""
		|	КОНЕЦ
		|ИЗ
		|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
		|ГДЕ
		|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Дата,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Организация.КодОрганаПФР,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ПометкаУдаления,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОтчетныйПериод,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ОкончаниеОтчетногоПериода,
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Комментарий,
		|	ВЫБОР
		|		КОГДА СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ТипСведений = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ_СТАЖ.Исходная)
		|			ТОГДА ""П""
		|		ИНАЧЕ ""К""
		|	КОНЕЦ
		|ИЗ
		|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ
		|ГДЕ
		|	СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Ссылка,
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Дата,
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация,
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Организация.КодОрганаПФР,
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ПометкаУдаления,
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ОтчетныйПериод,
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ОкончаниеОтчетногоПериода,
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Комментарий,
		|	""К""
		|ИЗ
		|	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР
		|ГДЕ
		|	ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Ссылка,
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Дата,
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация,
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Организация.КодОрганаПФР,
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ПометкаУдаления,
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ОтчетныйПериод,
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ОкончаниеОтчетногоПериода,
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Комментарий,
		|	""П""
		|ИЗ
		|	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ КАК СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ
		|ГДЕ
		|	СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОписьОДВ_1.Ссылка,
		|	ОписьОДВ_1.Дата,
		|	ОписьОДВ_1.Организация,
		|	ОписьОДВ_1.Организация.КодОрганаПФР,
		|	ОписьОДВ_1.ПометкаУдаления,
		|	ОписьОДВ_1.ОтчетныйПериод,
		|	ОписьОДВ_1.ОкончаниеОтчетногоПериода,
		|	ОписьОДВ_1.Комментарий,
		|	""К""
		|ИЗ
		|	Документ.ОписьОДВ_1 КАК ОписьОДВ_1
		|ГДЕ
		|	ОписьОДВ_1.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеестрДСВ_3.Ссылка,
		|	РеестрДСВ_3.Дата,
		|	РеестрДСВ_3.Организация,
		|	РеестрДСВ_3.Организация.КодОрганаПФР,
		|	РеестрДСВ_3.ПометкаУдаления,
		|	РеестрДСВ_3.ОтчетныйПериод,
		|	РеестрДСВ_3.ОкончаниеОтчетногоПериода,
		|	РеестрДСВ_3.Комментарий,
		|	""П""
		|ИЗ
		|	Документ.РеестрДСВ_3 КАК РеестрДСВ_3
		|ГДЕ
		|	РеестрДСВ_3.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КомплектыОтчетностиПерсУчета.Ссылка,
		|	ВЫБОР
		|		КОГДА НЕ КомплектыОтчетностиПерсУчета.РСВ_1 = ЗНАЧЕНИЕ(Документ.РегламентированныйОтчет.ПустаяСсылка)
		|			ТОГДА КомплектыОтчетностиПерсУчета.РСВ_1.ДатаПодписи
		|		КОГДА НЕ КомплектыОтчетностиПерсУчета.ОписьПачекСЗВ = ЗНАЧЕНИЕ(Документ.ОписьПачекСЗВ_6.ПустаяСсылка)
		|			ТОГДА КомплектыОтчетностиПерсУчета.ОписьПачекСЗВ.Дата
		|		ИНАЧЕ КомплектыОтчетностиПерсУчета.ПериодФормирования
		|	КОНЕЦ,
		|	КомплектыОтчетностиПерсУчета.Организация,
		|	КомплектыОтчетностиПерсУчета.Организация.КодОрганаПФР,
		|	КомплектыОтчетностиПерсУчета.ПометкаУдаления,
		|	КомплектыОтчетностиПерсУчета.ОтчетныйПериод,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	"""",
		|	""П""
		|ИЗ
		|	Справочник.КомплектыОтчетностиПерсУчета КАК КомплектыОтчетностиПерсУчета
		|ГДЕ
		|	КомплектыОтчетностиПерсУчета.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Дата,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Организация,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Организация.КодОрганаПФР,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ПометкаУдаления,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ОтчетныйПериод,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ОкончаниеОтчетногоПериода,
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Комментарий,
		|	""П""
		|ИЗ
		|	Документ.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД КАК СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД
		|ГДЕ
		|	СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.Ссылка В(&ДокументыПерсУчета)";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
			
			ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
			
			Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета") Тогда
				ЗапрашиваемыеДанные.ДатаОкончания = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ЗапрашиваемыеДанные.ДатаНачала);
				ЗапрашиваемыеДанные.Наименование = НСтр("ru = 'Комплект форм квартальной отчетности в ПФР'");
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	Если АнкетыПерУчета.Количество() > 0 Тогда 
		Запрос.УстановитьПараметр("ДокументыПерсУчета", АнкетыПерУчета);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПачкаДокументовАДВ_1.Ссылка,
		|	ПачкаДокументовАДВ_1.Дата КАК ДатаСоздания,
		|	ПачкаДокументовАДВ_1.Организация,
		|	ПачкаДокументовАДВ_1.Организация.КодОрганаПФР КАК КодКонтролирующегоОргана,
		|	ПачкаДокументовАДВ_1.ПометкаУдаления,
		|	НАЧАЛОПЕРИОДА(ПачкаДокументовАДВ_1.Дата, ДЕНЬ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(ПачкаДокументовАДВ_1.Дата, ДЕНЬ) КАК ДатаОкончания,
		|	ПачкаДокументовАДВ_1.Комментарий,
		|	""-"" КАК ВариантОтчета
		|ИЗ
		|	Документ.ПачкаДокументовАДВ_1 КАК ПачкаДокументовАДВ_1
		|ГДЕ
		|	ПачкаДокументовАДВ_1.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПачкаДокументовАДВ_2.Ссылка,
		|	ПачкаДокументовАДВ_2.Дата,
		|	ПачкаДокументовАДВ_2.Организация,
		|	ПачкаДокументовАДВ_2.Организация.КодОрганаПФР,
		|	ПачкаДокументовАДВ_2.ПометкаУдаления,
		|	НАЧАЛОПЕРИОДА(ПачкаДокументовАДВ_2.Дата, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ПачкаДокументовАДВ_2.Дата, ДЕНЬ),
		|	ПачкаДокументовАДВ_2.Комментарий,
		|	""-""
		|ИЗ
		|	Документ.ПачкаДокументовАДВ_2 КАК ПачкаДокументовАДВ_2
		|ГДЕ
		|	ПачкаДокументовАДВ_2.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПачкаДокументовАДВ_3.Ссылка,
		|	ПачкаДокументовАДВ_3.Дата,
		|	ПачкаДокументовАДВ_3.Организация,
		|	ПачкаДокументовАДВ_3.Организация.КодОрганаПФР,
		|	ПачкаДокументовАДВ_3.ПометкаУдаления,
		|	НАЧАЛОПЕРИОДА(ПачкаДокументовАДВ_3.Дата, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ПачкаДокументовАДВ_3.Дата, ДЕНЬ),
		|	ПачкаДокументовАДВ_3.Комментарий,
		|	""-""
		|ИЗ
		|	Документ.ПачкаДокументовАДВ_3 КАК ПачкаДокументовАДВ_3
		|ГДЕ
		|	ПачкаДокументовАДВ_3.Ссылка В(&ДокументыПерсУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПачкаДокументовСЗВ_К.Ссылка,
		|	ПачкаДокументовСЗВ_К.Дата,
		|	ПачкаДокументовСЗВ_К.Организация,
		|	ПачкаДокументовСЗВ_К.Организация.КодОрганаПФР,
		|	ПачкаДокументовСЗВ_К.ПометкаУдаления,
		|	НАЧАЛОПЕРИОДА(ПачкаДокументовСЗВ_К.Дата, ДЕНЬ),
		|	КОНЕЦПЕРИОДА(ПачкаДокументовСЗВ_К.Дата, ДЕНЬ),
		|	ПачкаДокументовСЗВ_К.Комментарий,
		|	ВЫБОР
		|		КОГДА ПачкаДокументовСЗВ_К.ТипСведений = ""ИСХД""
		|			ТОГДА ""П""
		|		ИНАЧЕ ""К""
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПачкаДокументовСЗВ_К КАК ПачкаДокументовСЗВ_К
		|ГДЕ
		|	ПачкаДокументовСЗВ_К.Ссылка В(&ДокументыПерсУчета)";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
			
			ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//		
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ВедомостьУплатыАДВ_11");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность в фонды";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаАДВ_11";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ВедомостьУплатыАДВ11;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ПачкаДокументовАДВ_1");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаАДВ_1,ФормаАДВ_6_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.АнкетаЗастрахованногоЛица;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ПачкаДокументовАДВ_2");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаАДВ_2,ФормаАДВ_6_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ПачкаДокументовАДВ2;

	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ПачкаДокументовАДВ_3");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаАДВ_3,ФормаАДВ_6_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ПачкаДокументовАДВ3;

	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ПачкаДокументовДСВ_1");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ЗаявлениеДСВ1;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ПачкаДокументовСЗВ_К");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаСЗВ_К,ФормаАДВ_6_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ПачкаДокументовСПВ_1");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаСПВ_1,ФормаАДВ_6_3";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОВзносахИСтраховомСтажеСПВ1;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ПачкаДокументовСПВ_2");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаСПВ_2,ФормаАДВ_6_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияСПВ2;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ФормаСВЗ_М";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОЗастрахованныхЛицахСЗВ_М;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ПФ_MXL_ФормаСЗВ_СТАЖ,ПФ_MXL_ФормаОДВ_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ПФ_MXL_ФормаСЗВ_КОРР,ПФ_MXL_ФормаОДВ_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ПФ_MXL_ФормаСЗВ_ИСХ,ПФ_MXL_ФормаОДВ_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.ОписьОДВ_1");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность в фонды";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "ПФ_MXL_ФормаОДВ_1";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.ОписьОДВ_1;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрДСВ_3");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = "Реестр";
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрДСВ3;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность в фонды";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Ложь;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.КомплектыОтчетностиПерсУчета;
	ОписаниеДокументаОтчетности.Наименование = НСтр("ru = 'Комплект квартальной отчетности в ПФР (до 2014 г.)'");
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ПФР;
	ОписаниеДокументаОтчетности.ГруппаВДереве = "Отчетность по физлицам";
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД;
	
КонецПроцедуры

// Процедура переопределяет обработчик подписки на событие "ЗаписьОбъектовРегламентированнойОтчетности*".
//
// Параметры: - (см. РегламентированнаяОтчетностьПереопределяемый.ЗаписьОбъектовРегламентированнойОтчетности).
//
Процедура ЗаписьОбъектовРегламентированнойОтчетности(Ссылка, Отказ, СтандартнаяОбработка) Экспорт
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета") Тогда
		ОтчетныйПериод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОтчетныйПериод");
		
		
		Если ОтчетныйПериод >= '20140101' Тогда
			СтандартнаяОбработка = Ложь;
			РСВ_1 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РСВ_1");
			Если ЗначениеЗаполнено(РСВ_1) Тогда
				ПараметрыОтчета = РегламентированнаяОтчетность.СвойстваРегламентированногоОтчета(РСВ_1);
				РегламентированнаяОтчетностьВызовСервера.ОтразитьВЖурналеОтчетов(ПараметрыОтчета);
			КонецЕсли;	
		КонецЕсли; 
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfe7-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ВедомостьУплатыАДВ_11);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4d2-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbefe-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОписьОДВ_1);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4e9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ОписьПачекСЗВ_6);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4f9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовАДВ_1);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4df-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовАДВ_2);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf7d-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовАДВ_3);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbffb-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовДСВ_1);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf3a-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовСЗВ_6_1);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4ca-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовСЗВ_6_3);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf8c-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовСЗВ_6_4);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf17-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовСЗВ_К);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4cf-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовСПВ_1);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfed-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаДокументовСПВ_2);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf7b-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf09-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РеестрДСВ_3);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfc9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.РеестрСЗВ_6_2);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbf12-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfcd-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.СведенияОЗастрахованныхЛицахСЗВ_М);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "d42dbfb1-9802-11e9-80cd-4cedfb43b11a", Метаданные.Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "154c1fe2-cca3-4ba6-932b-e9eef906ede3", Метаданные.Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.КомплектыОтчетностиПерсУчета, Истина);
	Списки.Вставить(Метаданные.Справочники.ОписьПачекСЗВ_6ПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ВедомостьУплатыАДВ_11ПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРРПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СведенияОЗастрахованныхЛицахСЗВ_МПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Справочники.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ВедомостьУплатыАДВ_11, Истина);
	Списки.Вставить(Метаданные.Документы.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР, Истина);
	Списки.Вставить(Метаданные.Документы.ОписьОДВ_1, Истина);
	Списки.Вставить(Метаданные.Документы.ОписьПачекСЗВ_6, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовАДВ_1, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовАДВ_2, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовАДВ_3, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовДСВ_1, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_6_3, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_К, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовСПВ_1, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаДокументовСПВ_2, Истина);
	Списки.Вставить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1, Истина);
	Списки.Вставить(Метаданные.Документы.РеестрДСВ_3, Истина);
	Списки.Вставить(Метаданные.Документы.РеестрСЗВ_6_2, Истина);
	Списки.Вставить(Метаданные.Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ, Истина);
	Списки.Вставить(Метаданные.Документы.СведенияОЗастрахованныхЛицахСЗВ_М, Истина);
	Списки.Вставить(Метаданные.Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ, Истина);
	Списки.Вставить(Метаданные.Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.АнкетыПерсонифицированногоУчета, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ДобровольноеПенсионноеСтрахованиеПФР, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ПерсонифицированныйУчет, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ИсторияРегистрацийВОрганеПФР, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПодразделенияЗаПределамиРФ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОВзносахВПФР, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.СтраховыеВзносыПереданныеВПФР, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПолучитьДатыПериодаДокумента
Функция ПолучитьДатыПериодаДокумента(Ссылка) Экспорт
	ТипДокумента = ТипЗнч(Ссылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ВедомостьУплатыАДВ_11")
		Или ТипДокумента = Тип("ДокументСсылка.ОписьПачекСЗВ_6")
		Или ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")
		Или ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3")
		Или ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСПВ_1")
		Или ТипДокумента = Тип("ДокументСсылка.РеестрДСВ_3")
		Или ТипДокумента = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М")
		Или ТипДокумента = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ")
		Или ТипДокумента = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР")
		Или ТипДокумента = Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ")
		Или ТипДокумента = Тип("ДокументСсылка.ОписьОДВ_1")
		Или ТипДокумента = Тип("ДокументСсылка.РеестрСЗВ_6_2") 
		Или ТипДокумента = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета")
		Или ТипДокумента = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД") Тогда

		Отчетность2017 = ТипДокумента = Тип("ДокументСсылка.ОписьОДВ_1")
			Или ТипДокумента = Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ")
			Или ТипДокумента = Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР") 
			Или ТипДокумента = Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ")
			Или ТипДокумента = Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД");
		
		Реквизиты = ?(Отчетность2017, "ОтчетныйПериод,ОкончаниеОтчетногоПериода,Организация", "ОтчетныйПериод,Организация");
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
		
		Если ТипДокумента = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") 
			Или ТипДокумента = Тип("ДокументСсылка.ВедомостьУплатыАДВ_11") Тогда
			ДатаНачала = Дата(ДанныеДокумента.ОтчетныйПериод, 1, 1);
			ДатаОкончания = Дата(ДанныеДокумента.ОтчетныйПериод, 12, 31, 23, 59, 59);
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеестрДСВ_3")
			Или ТипДокумента = Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М") Тогда
			ДатаНачала = ДанныеДокумента.ОтчетныйПериод;
			ДатаОкончания = КонецМесяца(ДатаНачала);
		ИначеЕсли Отчетность2017 Тогда
			ДатаНачала = ДанныеДокумента.ОтчетныйПериод;
			ДатаОкончания = КонецДня(ДанныеДокумента.ОкончаниеОтчетногоПериода);	
		Иначе	
			ДатаНачала = ДанныеДокумента.ОтчетныйПериод;
			ДатаОкончания = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ДатаНачала);
		КонецЕсли;
		
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, Организация", ДатаНачала, ДатаОкончания, ДанныеДокумента.Организация);
		
	Иначе
		
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Дата,Организация");
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, Организация", ДанныеДокумента.Дата, ДанныеДокумента.Дата, ДанныеДокумента.Организация);
		
	КонецЕсли;
	
КонецФункции	

// См. ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ВыгрузитьДокумент
Функция ВыгрузитьДокументы(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
		
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета") Тогда
		МассивОписанийФайловВыгрузки = Новый Массив;

		КомплектОбъект = Ссылка.ПолучитьОбъект();
		КомплектОбъект.ПоместитьОписанияФайловКомплектаВМассив(МассивОписанийФайловВыгрузки, УникальныйИдентификатор);
		
		Возврат МассивОписанийФайловВыгрузки;		
	Иначе	
		СоответствиеТиповСсылокТипамФайловВыгрузки = СоответствиеТиповСсылокТипамФайловВыгрузки();
		
		ДанныеФайлаДокумента = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Ссылка",  Ссылка);
		ОписаниеФайла.Вставить("АдресФайлаВыгрузки",  ДанныеФайлаДокумента.СсылкаНаДвоичныеДанныеФайла);
		ОписаниеФайла.Вставить("ИмяФайлаВыгрузки",  ДанныеФайлаДокумента.ИмяФайла);
		ТипФайлаВыгрузки = СоответствиеТиповСсылокТипамФайловВыгрузки.Получить(ТипЗнч(Ссылка));
		ОписаниеФайла.Вставить("ТипФайлаВыгрузки",  ?(ТипФайлаВыгрузки = Неопределено, "", ТипФайлаВыгрузки));
		ОписаниеФайла.Вставить("КодировкаФайлаВыгрузки",  КодировкаТекста.ANSI);

		Возврат ОписаниеФайла;
	КонецЕсли;		
		
КонецФункции

#КонецОбласти

#Область СведенияОбОрганизациях

Функция ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях() Экспорт
	Описание = Новый Структура;
	Описание.Вставить("ИмяТаблицы");
	Описание.Вставить("ИмяПоляОрганизация");
	Описание.Вставить("ИмяПоляПериод");
	Описание.Вставить("СписокСсылок");
	
	Возврат Описание;
КонецФункции	
	
Процедура СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(МенеджерВременныхТаблиц, ОписаниеИсточникаДанных) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокСсылок", ОписаниеИсточникаДанных.СписокСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникДанных.Организация КАК Организация,
	|	ИсточникДанных.Период КАК Период
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	#ИсточникДанных КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка В(&СписокСсылок)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Организация", "." + ОписаниеИсточникаДанных.ИмяПоляОрганизация); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ".Период", "." + ОписаниеИсточникаДанных.ИмяПоляПериод); 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ОписаниеИсточникаДанных.ИмяТаблицы); 

	Запрос.Выполнить();
	
	СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(МенеджерВременныхТаблиц);	

	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТОрганизации";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура ПроверитьДанныеОрганизации(Объект, Организация, Отказ, ДатаАктуальности = Неопределено, Ошибки = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если ДатаАктуальности = Неопределено Тогда
			ДатаПроверкиСведений = Объект.ОкончаниеОтчетногоПериода;
		Иначе
			ДатаПроверкиСведений = ДатаАктуальности;
		КонецЕсли;	
		
		ДанныеОрганизации = СведенияОбОрганизации(Организация, ДатаПроверкиСведений);
				
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеПолное) Тогда
			ТекстСообщения = НСтр("ru = 'У организации не заполнено полное наименование.'");
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, Организация, "НаименованиеПолное", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.НаименованиеСокращенное) Тогда
			ТекстСообщения = НСтр("ru = 'У организации не заполнено сокращенное наименование.'");
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, Организация, "НаименованиеСокращенное", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.РегистрационныйНомерПФР) Тогда
			ТекстСообщения = НСтр("ru = 'У организации не заполнен регистрационный номер ПФР.'");
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, Организация, "РегистрационныйНомерПФР", , Отказ);
		ИначеЕсли Не ПроверитьРегистрационныйНомерПФР(ДанныеОрганизации.РегистрационныйНомерПФР) Тогда
			ТекстСообщения = НСтр("ru = 'У организации неверно заполнен регистрационный номер ПФР.'");
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, Организация, "РегистрационныйНомерПФР", , Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.КодОрганаПФР) Тогда
			ТекстСообщения = НСтр("ru = 'У организации не заполнен код органа ПФР.'");
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, Организация, "КодОрганаПФР", , Отказ);
		КонецЕсли;
		
		Если ДанныеОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Если Не ЗначениеЗаполнено(ДанныеОрганизации.РегистрацияВНалоговомОргане) Тогда
				ШаблонСообщения = НСтр("ru = 'Для организации не указана регистрация в ИФНС, действующая на %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									Формат(ДатаПроверкиСведений, "ДЛФ=DD"));
				
				ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, Организация, , , Отказ);			
			ИначеЕсли Не ЗначениеЗаполнено(ДанныеОрганизации.КПП) Тогда
				ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, НСтр("ru = 'У организации не заполнен код по КПП'"), Организация, "КПП", , Отказ);
			ИначеЕсли Не РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(ДанныеОрганизации.КПП, "") Или СтрЗаменить(ДанныеОрганизации.КПП, "0", "") = "" Тогда
				ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, НСтр("ru = 'У организации неверно указан код по КПП'"), Организация, "КПП", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеОрганизации.ИНН) Тогда
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, НСтр("ru = 'У организации не заполнен ИНН'"), Организация, "ИНН", , Отказ);
		ИначеЕсли Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДанныеОрганизации.ИНН, ЗарплатаКадры.ЭтоЮридическоеЛицо(Организация), "") Или СтрЗаменить(ДанныеОрганизации.ИНН, "0", "") = "" Тогда
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, НСтр("ru = 'У организации неверно указан ИНН'"), Организация, "ИНН", , Отказ);
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


// Формирует ВТ "ВТСоответствиеТарифаИВидаЗЛКатегории" содержащую соответствие тарифов страховых взносов
// категориям застрахованных лиц.
//
// Параметры
//  МенеджерВременныхТаблиц - менеджер временных таблиц, куда будет помещена, сформированная таблица
//  Год - отчетный год.
//
Процедура СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(МенеджерВременныхТаблиц, Год = 0) Экспорт
	СформироватьВТСоответствиеТарифаКатегории(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыЗастрахованныхЛицПоПенсионномуСтрахованию", УчетСтраховыхВзносов.ВидыЗастрахованныхЛицПоПенсионномуСтрахованию());
	Запрос.УстановитьПараметр("ПризнанныхБеженцамиСчитатьВЖхх", Год >= 2016);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР) КАК ИсходнаяКатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ) КАК ВидЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТСоответствиеВидаЗастрахованныхКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖНР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖНР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПНР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖНР)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПНР)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПНР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСХ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСХ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСХ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСХ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСХ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСХ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЕН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЕН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЕН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЕН)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЕН)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЕН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖМН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖМН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПМН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖМН)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПМН)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПМН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПОИ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПОИ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПОИ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖХО),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖХО),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПХО),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖХО)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПХО)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПХО),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖТЗ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖТЗ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПТЗ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖТЗ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПТЗ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПТЗ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖИТ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖИТ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПИТ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖИТ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПИТ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПИТ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭК),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭК),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭК),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭК),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭК),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖАН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖАН),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПАН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖАН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПАН),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖМС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖМС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПМС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖМС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПМС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКВ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКВ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПКВ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКВ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПКВ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКЛ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКЛ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПКЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПКЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСИ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСИ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСИ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСИ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСИ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭД),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭД),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭД),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭД)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭД)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭД),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЦС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЦС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЦС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЦС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЦС)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЦС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСБ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСБ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСБ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖСБ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСБ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПСБ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖЭС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭС)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПЭС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖИЖ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖИЖ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПИЖ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖИЖ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПИЖ)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПИЖ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКС),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПКС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖКС)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПКС)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПКС),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖТР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖТР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПТР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ВЫБОР
	|		КОГДА &ПризнанныхБеженцамиСчитатьВЖхх
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖТР)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПТР)
	|	КОНЕЦ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПТР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖВЛ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖВЛ),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПВЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖВЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПВЛ),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыПостоянноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖАР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВысококвалифицированныеСпециалистыВременноПроживающие),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖАР),
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыСДолгосрочнымиДоговорами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПАР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцыПризнанныеБеженцами),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВЖАР),
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ВПАР),
	|	3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПустаяСсылка) КАК ВидЗастрахованногоЛица
	|ПОМЕСТИТЬ ВТВидыЗастрахованныхЛиц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыЗастрахованныхЛицОбязательногоСтрахования.Ссылка
	|ИЗ
	|	Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования КАК ВидыЗастрахованныхЛицОбязательногоСтрахования
	|ГДЕ
	|	ВидыЗастрахованныхЛицОбязательногоСтрахования.Ссылка В(&ВидыЗастрахованныхЛицПоПенсионномуСтрахованию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СоответствиеТарифаКатегории.Порядок КАК Порядок,
	|	СоответствиеТарифаКатегории.ГодС КАК ГодС,
	|	2011 КАК ГодПо,
	|	ВидыЗастрахованныхЛиц.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
	|	СоответствиеТарифаКатегории.Порядок КАК ДополнительныйПорядок,
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК ИсходнаяКатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТСоответствиеТарифаИВидаЗЛКатегории
	|ИЗ
	|	ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыЗастрахованныхЛиц КАК ВидыЗастрахованныхЛиц
	|		ПО (СоответствиеТарифаКатегории.ГодС < 2012)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов,
	|	СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц,
	|	СоответствиеВидаЗастрахованныхКатегории.Порядок,
	|	ВЫБОР
	|		КОГДА СоответствиеТарифаКатегории.ГодС > 2012
	|			ТОГДА СоответствиеТарифаКатегории.ГодС
	|		ИНАЧЕ 2012
	|	КОНЕЦ,
	|	СоответствиеТарифаКатегории.ГодПо,
	|	СоответствиеВидаЗастрахованныхКатегории.ВидЗастрахованныхЛиц,
	|	СоответствиеВидаЗастрахованныхКатегории.Порядок,
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц
	|ИЗ
	|	ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеВидаЗастрахованныхКатегории КАК СоответствиеВидаЗастрахованныхКатегории
	|		ПО (СоответствиеТарифаКатегории.ГодПо >= 2012)
	|			И СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц = СоответствиеВидаЗастрахованныхКатегории.ИсходнаяКатегорияЗастрахованныхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоответствиеТарифаКатегории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоответствиеВидаЗастрахованныхКатегории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВидыЗастрахованныхЛиц";
	Запрос.Выполнить();

КонецПроцедуры	

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПризнакСпециальногоРСВ2015Года(ОтчетныйПериод, ТипСведенийСЗВ) Экспорт
	Если ОтчетныйПериод = '20150101' Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Процедура СоздатьВТИнтервалыПоТаблицеДат(МенеджерВременныхТаблиц, ИмяВТТаблицаДат = "ВТДаты", Периодичность = "ДЕНЬ", ПоляГруппировки = "", ИмяВТРезультат = "ВТИнтервалы") Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетГраницИнтервалов._ПоляГруппировки_,
	|	РасчетГраницИнтервалов.Период,
	|	СУММА(РасчетГраницИнтервалов.ПризнакДатыНачалаИнтервала) КАК ПризнакДатыНачалаИнтервала,
	|	СУММА(РасчетГраницИнтервалов.ПризнакДатыОкончанияИнтервала) КАК ПризнакДатыОкончанияИнтервала
	|ПОМЕСТИТЬ ВТГраницыИнтервалов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДат._ПоляГруппировки_ КАК _ПоляГруппировки_,
	|		ТаблицаДат.Период КАК Период,
	|		1 КАК ПризнакДатыНачалаИнтервала,
	|		1 КАК ПризнакДатыОкончанияИнтервала
	|	ИЗ
	|		ВТТаблицаДат КАК ТаблицаДат
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДат._ПоляГруппировки_,
	|		ДОБАВИТЬКДАТЕ(ТаблицаДат.Период, ДЕНЬ, 1),
	|		-1,
	|		0
	|	ИЗ
	|		ВТТаблицаДат КАК ТаблицаДат
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДат._ПоляГруппировки_,
	|		ДОБАВИТЬКДАТЕ(ТаблицаДат.Период, ДЕНЬ, -1),
	|		0,
	|		-1
	|	ИЗ
	|		ВТТаблицаДат КАК ТаблицаДат) КАК РасчетГраницИнтервалов
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетГраницИнтервалов._ПоляГруппировки_,
	|	РасчетГраницИнтервалов.Период
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасчетГраницИнтервалов.ПризнакДатыНачалаИнтервала) > 0
	|		ИЛИ СУММА(РасчетГраницИнтервалов.ПризнакДатыОкончанияИнтервала) > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыНачалаИнтервалов._ПоляГруппировки_,
	|	ДатыНачалаИнтервалов.Период КАК ДатаНачалаИнтервала,
	|	МИНИМУМ(КОНЕЦПЕРИОДА(ДатыОкончанияИнтервалов.Период, ДЕНЬ)) КАК ДатаОкончанияИнтервала
	|ПОМЕСТИТЬ ВТИнтервалы
	|ИЗ
	|	ВТГраницыИнтервалов КАК ДатыНачалаИнтервалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГраницыИнтервалов КАК ДатыОкончанияИнтервалов
	|		ПО (ДатыНачалаИнтервалов.ПризнакДатыНачалаИнтервала > 0)
	|			И (ДатыОкончанияИнтервалов.ПризнакДатыОкончанияИнтервала > 0)
	|			И ДатыНачалаИнтервалов.Период <= ДатыОкончанияИнтервалов.Период
	|			И (&УсловиеСвязиПоПоляГруппировки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыНачалаИнтервалов._ПоляГруппировки_,
	|	ДатыНачалаИнтервалов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТГраницыИнтервалов";	
	
	МассивПолейГруппировки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляГруппировки, ",");
	
	ПоляГруппировкиЗапросаТекст = "";
	ПоляГруппировкиВнешнегоЗапросаТекст = "";
	ПоляГруппировкиИтоговогоЗапросаТекст = "";
	ТекстУсловияСвязиПоПоляГруппировки = "";
	
	Если МассивПолейГруппировки.Количество() > 0 Тогда
		Для Каждого ПолеГруппировки Из МассивПолейГруппировки Цикл
			ПолеГруппировкиТекст = СокрЛП(ПолеГруппировки);
			
			ПоляГруппировкиЗапросаТекст = ПоляГруппировкиЗапросаТекст + "ТаблицаДат." + ПолеГруппировкиТекст + ",";
			ПоляГруппировкиВнешнегоЗапросаТекст = ПоляГруппировкиВнешнегоЗапросаТекст + "РасчетГраницИнтервалов." + ПолеГруппировкиТекст + ",";
			ПоляГруппировкиИтоговогоЗапросаТекст = ПоляГруппировкиИтоговогоЗапросаТекст + "ДатыНачалаИнтервалов." + ПолеГруппировкиТекст + ",";
			ТекстУсловияСвязиПоПоляГруппировки = ТекстУсловияСвязиПоПоляГруппировки + " И ДатыНачалаИнтервалов." + ПолеГруппировкиТекст + " = ДатыОкончанияИнтервалов." + ПолеГруппировкиТекст;
		КонецЦикла;
	Иначе
		ТекстУсловияСвязиПоПоляГруппировки = "ИСТИНА";	
	КонецЕсли;	
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДат._ПоляГруппировки_ КАК _ПоляГруппировки_,", ПоляГруппировкиЗапросаТекст);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаДат._ПоляГруппировки_,", ПоляГруппировкиЗапросаТекст);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетГраницИнтервалов._ПоляГруппировки_,", ПоляГруппировкиВнешнегоЗапросаТекст);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДатыНачалаИнтервалов._ПоляГруппировки_,", ПоляГруппировкиИтоговогоЗапросаТекст);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (&УсловиеСвязиПоПоляГруппировки)", ТекстУсловияСвязиПоПоляГруппировки);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДЕНЬ", Периодичность);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТТаблицаДат", ИмяВТТаблицаДат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИнтервалы", ИмяВТРезультат);

	Запрос.Выполнить();
	
КонецПроцедуры	

Функция ПериодыССуществующейОтчетностью() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КомплектыОтчетностиПерсУчета.Организация,
	|	КомплектыОтчетностиПерсУчета.ОтчетныйПериод
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсУчета КАК КомплектыОтчетностиПерсУчета
	|ГДЕ
	|	НЕ КомплектыОтчетностиПерсУчета.СодержитТолькоКорректирующиеФормы
	|	И НЕ КомплектыОтчетностиПерсУчета.НулевойКомплект
	|	И КомплектыОтчетностиПерсУчета.СостояниеКомплекта В (ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены), ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы), ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияСформированы))";
	
	ТаблицаПериодов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПериодов;
КонецФункции	

Функция НаименованиеИАдресноеСокращение(Название, АдресноеСокращение) Экспорт 
	
	Буфер = СокрП(Название);
	ПозицияПослПробела = СтрНайти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат Название;
	КонецЕсли;
	
	Пока СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = СтрНайти(Буфер, " ");
	КонецЦикла;
	
	Сокращения = АдресныеСокращения();
	Если Сокращения.Найти(НРег(Сред(Название, ПозицияПослПробела + 1))) = Неопределено Тогда
		Возврат Название;
	КонецЕсли;
	
	Если ПустаяСтрока(СокрЛП(Лев(Название, ПозицияПослПробела - 1))) Тогда
		Возврат Название;
	Иначе
		АдресноеСокращение = Сред(Название, ПозицияПослПробела + 1);
		Возврат Лев(Название, ПозицияПослПробела - 1);
	КонецЕсли;
	
КонецФункции

Функция АдресныеСокращения()
	
	АдресныеСокращения = Новый Массив;
	АдресныеСокращения.Добавить("а.обл.");
	АдресныеСокращения.Добавить("а.окр.");
	АдресныеСокращения.Добавить("а/я");
	АдресныеСокращения.Добавить("аал");
	АдресныеСокращения.Добавить("автодорога");
	АдресныеСокращения.Добавить("ал.");
	АдресныеСокращения.Добавить("аллея");
	АдресныеСокращения.Добавить("ао");
	АдресныеСокращения.Добавить("аобл");
	АдресныеСокращения.Добавить("арбан");
	АдресныеСокращения.Добавить("аул");
	АдресныеСокращения.Добавить("балка");
	АдресныеСокращения.Добавить("б-г");
	АдресныеСокращения.Добавить("берег");
	АдресныеСокращения.Добавить("б-р");
	АдресныеСокращения.Добавить("бугор");
	АдресныеСокращения.Добавить("вал");
	АдресныеСокращения.Добавить("взв.");
	АдресныеСокращения.Добавить("взд.");
	АдресныеСокращения.Добавить("влд.");
	АдресныеСокращения.Добавить("вн.р-н");
	АдресныеСокращения.Добавить("вн.тер. г.");
	АдресныеСокращения.Добавить("волость");
	АдресныеСокращения.Добавить("въезд");
	АдресныеСокращения.Добавить("высел");
	АдресныеСокращения.Добавить("г");
	АдресныеСокращения.Добавить("г.");
	АдресныеСокращения.Добавить("г. п.");
	АдресныеСокращения.Добавить("г.о.");
	АдресныеСокращения.Добавить("г.ф.з.");
	АдресныеСокращения.Добавить("г-ж");
	АдресныеСокращения.Добавить("г-к");
	АдресныеСокращения.Добавить("городок");
	АдресныеСокращения.Добавить("гп");
	АдресныеСокращения.Добавить("гск");
	АдресныеСокращения.Добавить("д");
	АдресныеСокращения.Добавить("д.");
	АдресныеСокращения.Добавить("двлд.");
	АдресныеСокращения.Добавить("днп");
	АдресныеСокращения.Добавить("дом");
	АдресныеСокращения.Добавить("дор");
	АдресныеСокращения.Добавить("дор.");
	АдресныеСокращения.Добавить("дп");
	АдресныеСокращения.Добавить("ж/д б-ка");
	АдресныеСокращения.Добавить("ж/д к-ма");
	АдресныеСокращения.Добавить("ж/д пл-ма");
	АдресныеСокращения.Добавить("ж/д рзд.");
	АдресныеСокращения.Добавить("ж/д ст.");
	АдресныеСокращения.Добавить("ж/д_будка");
	АдресныеСокращения.Добавить("ж/д_казарм");
	АдресныеСокращения.Добавить("ж/д_оп");
	АдресныеСокращения.Добавить("ж/д_платф");
	АдресныеСокращения.Добавить("ж/д_пост");
	АдресныеСокращения.Добавить("ж/д_рзд");
	АдресныеСокращения.Добавить("ж/д_ст");
	АдресныеСокращения.Добавить("ж/р");
	АдресныеСокращения.Добавить("жилзона");
	АдресныеСокращения.Добавить("жилрайон");
	АдресныеСокращения.Добавить("жт");
	АдресныеСокращения.Добавить("з/у");
	АдресныеСокращения.Добавить("заезд");
	АдресныеСокращения.Добавить("заимка");
	АдресныеСокращения.Добавить("зд.");
	АдресныеСокращения.Добавить("ззд.");
	АдресныеСокращения.Добавить("зона");
	АдресныеСокращения.Добавить("к.");
	АдресныеСокращения.Добавить("казарма");
	АдресныеСокращения.Добавить("кв.");
	АдресныеСокращения.Добавить("кв-л");
	АдресныеСокращения.Добавить("км");
	АдресныеСокращения.Добавить("кольцо");
	АдресныеСокращения.Добавить("ком.");
	АдресныеСокращения.Добавить("кордон");
	АдресныеСокращения.Добавить("коса");
	АдресныеСокращения.Добавить("кот.");
	АдресныеСокращения.Добавить("кп");
	АдресныеСокращения.Добавить("край");
	АдресныеСокращения.Добавить("к-цо");
	АдресныеСокращения.Добавить("линия");
	АдресныеСокращения.Добавить("лн.");
	АдресныеСокращения.Добавить("лпх");
	АдресныеСокращения.Добавить("м");
	АдресныеСокращения.Добавить("м.р-н");
	АдресныеСокращения.Добавить("массив");
	АдресныеСокращения.Добавить("маяк");
	АдресныеСокращения.Добавить("мгстр.");
	АдресныеСокращения.Добавить("местность");
	АдресныеСокращения.Добавить("месторожд.");
	АдресныеСокращения.Добавить("м-ко");
	АдресныеСокращения.Добавить("мкр");
	АдресныеСокращения.Добавить("мкр.");
	АдресныеСокращения.Добавить("мост");
	АдресныеСокращения.Добавить("н/п");
	АдресныеСокращения.Добавить("наб");
	АдресныеСокращения.Добавить("наб.");
	АдресныеСокращения.Добавить("нп");
	АдресныеСокращения.Добавить("обл");
	АдресныеСокращения.Добавить("обл.");
	АдресныеСокращения.Добавить("округ");
	АдресныеСокращения.Добавить("онс");
	АдресныеСокращения.Добавить("ост-в");
	АдресныеСокращения.Добавить("остров");
	АдресныеСокращения.Добавить("офис");
	АдресныеСокращения.Добавить("п");
	АдресныеСокращения.Добавить("п.");
	АдресныеСокращения.Добавить("п/о");
	АдресныеСокращения.Добавить("п/р");
	АдресныеСокращения.Добавить("п/ст");
	АдресныеСокращения.Добавить("пав.");
	АдресныеСокращения.Добавить("парк");
	АдресныеСокращения.Добавить("п-б");
	АдресныеСокращения.Добавить("пгт");
	АдресныеСокращения.Добавить("пгт.");
	АдресныеСокращения.Добавить("пер");
	АдресныеСокращения.Добавить("пер.");
	АдресныеСокращения.Добавить("пер-д");
	АдресныеСокращения.Добавить("переезд");
	АдресныеСокращения.Добавить("п-к");
	АдресныеСокращения.Добавить("пл");
	АдресныеСокращения.Добавить("пл.");
	АдресныеСокращения.Добавить("платф");
	АдресныеСокращения.Добавить("платф.");
	АдресныеСокращения.Добавить("пл-ка");
	АдресныеСокращения.Добавить("погост");
	АдресныеСокращения.Добавить("подв.");
	АдресныеСокращения.Добавить("полустанок");
	АдресныеСокращения.Добавить("помещ.");
	АдресныеСокращения.Добавить("порт");
	АдресныеСокращения.Добавить("пос.");
	АдресныеСокращения.Добавить("починок");
	АдресныеСокращения.Добавить("пр-д");
	АдресныеСокращения.Добавить("пр-к");
	АдресныеСокращения.Добавить("пр-ка");
	АдресныеСокращения.Добавить("пр-кт");
	АдресныеСокращения.Добавить("пр-лок");
	АдресныеСокращения.Добавить("проезд");
	АдресныеСокращения.Добавить("промзона");
	АдресныеСокращения.Добавить("просек");
	АдресныеСокращения.Добавить("просека");
	АдресныеСокращения.Добавить("проселок");
	АдресныеСокращения.Добавить("проул.");
	АдресныеСокращения.Добавить("проулок");
	АдресныеСокращения.Добавить("раб.уч.");
	АдресныеСокращения.Добавить("респ");
	АдресныеСокращения.Добавить("респ.");
	АдресныеСокращения.Добавить("рзд");
	АдресныеСокращения.Добавить("рзд.");
	АдресныеСокращения.Добавить("р-н");
	АдресныеСокращения.Добавить("рп");
	АдресныеСокращения.Добавить("ряд");
	АдресныеСокращения.Добавить("ряды");
	АдресныеСокращения.Добавить("с");
	АдресныеСокращения.Добавить("с.");
	АдресныеСокращения.Добавить("с.п.");
	АдресныеСокращения.Добавить("с/а");
	АдресныеСокращения.Добавить("с/мо");
	АдресныеСокращения.Добавить("с/о");
	АдресныеСокращения.Добавить("с/п");
	АдресныеСокращения.Добавить("с/с");
	АдресныеСокращения.Добавить("с/т");
	АдресныеСокращения.Добавить("сад");
	АдресныеСокращения.Добавить("сзд.");
	АдресныеСокращения.Добавить("с-к");
	АдресныеСокращения.Добавить("сквер");
	АдресныеСокращения.Добавить("скл.");
	АдресныеСокращения.Добавить("сл");
	АдресныеСокращения.Добавить("сл.");
	АдресныеСокращения.Добавить("снт");
	АдресныеСокращения.Добавить("соор.");
	АдресныеСокращения.Добавить("спуск");
	АдресныеСокращения.Добавить("с-р");
	АдресныеСокращения.Добавить("ст");
	АдресныеСокращения.Добавить("ст.");
	АдресныеСокращения.Добавить("стр");
	АдресныеСокращения.Добавить("стр.");
	АдресныеСокращения.Добавить("ст-ца");
	АдресныеСокращения.Добавить("тер");
	АдресныеСокращения.Добавить("тер.");
	АдресныеСокращения.Добавить("тер. гск");
	АдресныеСокращения.Добавить("тер. дно");
	АдресныеСокращения.Добавить("тер. днп");
	АдресныеСокращения.Добавить("тер. днт");
	АдресныеСокращения.Добавить("тер. дпк");
	АдресныеСокращения.Добавить("тер. оно");
	АдресныеСокращения.Добавить("тер. онп");
	АдресныеСокращения.Добавить("тер. онт");
	АдресныеСокращения.Добавить("тер. опк");
	АдресныеСокращения.Добавить("тер. сно");
	АдресныеСокращения.Добавить("тер. снп");
	АдресныеСокращения.Добавить("тер. снт");
	АдресныеСокращения.Добавить("тер. спк");
	АдресныеСокращения.Добавить("тер. тсн");
	АдресныеСокращения.Добавить("тер.ф.х.");
	АдресныеСокращения.Добавить("торг. зал");
	АдресныеСокращения.Добавить("тракт");
	АдресныеСокращения.Добавить("туп");
	АдресныеСокращения.Добавить("туп.");
	АдресныеСокращения.Добавить("у");
	АдресныеСокращения.Добавить("у.");
	АдресныеСокращения.Добавить("ул");
	АдресныеСокращения.Добавить("ул.");
	АдресныеСокращения.Добавить("ус.");
	АдресныеСокращения.Добавить("уч-к");
	АдресныеСокращения.Добавить("ф/х");
	АдресныеСокращения.Добавить("ферма");
	АдресныеСокращения.Добавить("х");
	АдресныеСокращения.Добавить("х.");
	АдресныеСокращения.Добавить("цех");
	АдресныеСокращения.Добавить("ш");
	АдресныеСокращения.Добавить("ш.");
	АдресныеСокращения.Добавить("ю.");
	
	Возврат АдресныеСокращения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// получение данных об организации

Процедура СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(МенеджерВременныхТаблиц) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.Период,
	|	Организации.Организация КАК СтруктурнаяЕдиница
	|ПОМЕСТИТЬ ВТОрганизацииДляСреза
	|ИЗ
	|	ВТОрганизации КАК Организации";
	
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ИсторияРегистрацийВОрганеПФР",
		МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииДляСреза",
			"Организация"));
			
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТОрганизацииДляСреза", "СтруктурнаяЕдиница");
			
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ИсторияРегистрацийВНалоговомОргане",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Организация,
	|	Организации.Период,
	|	ДанныеОрганизации.ИНН,
	|	ДанныеОрганизации.КодОрганаПФР,
	|	ДанныеОрганизации.КодОрганаФСГС,
	|	ДанныеОрганизации.КодПодчиненностиФСС,
	|	ДанныеОрганизации.КодПоОКПО,
	|	ДанныеОрганизации.НаименованиеПолное,
	|	ДанныеОрганизации.НаименованиеСокращенное,
	|	ДанныеОрганизации.Наименование,
	|	ДанныеОрганизации.ОГРН,
	|	ДанныеОрганизации.КодОКОПФ,
	|	ДанныеОрганизации.НаименованиеОКОПФ,
	|	ДанныеОрганизации.КодОКФС,
	|	ДанныеОрганизации.НаименованиеОКФС,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Ссылка, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.КПП, """") КАК КПП,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.НаименованиеИФНС, """") КАК НаименованиеИФНС,
	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.КодПоОКАТО, """") КАК ОКАТО,
	|	ЕСТЬNULL(ТерриториальныеУсловияПФРСрезПоследних.ТерриториальныеУсловияПФР, ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка)) КАК ТерриториальныеУсловияПФР,
	|	ЕСТЬNULL(ИсторияРегистрацийВОрганеПФРСрезПоследних.РегистрационныйНомерПФР, """") КАК РегистрационныйНомерПФР,
	|	ДанныеОрганизации.ЮридическоеФизическоеЛицо,
	|	ДанныеОрганизации.РайонныйКоэффициент,
	|	ДанныеОрганизации.ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТСведенияОбОрганизациях
	|ИЗ
	|	ВТОрганизации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсторияРегистрацийВОрганеПФРСрезПоследних КАК ИсторияРегистрацийВОрганеПФРСрезПоследних
	|		ПО Организации.Организация = ИсторияРегистрацийВОрганеПФРСрезПоследних.Организация
	|			И Организации.Период = ИсторияРегистрацийВОрганеПФРСрезПоследних.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсторияРегистрацийВНалоговомОрганеСрезПоследних КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|			ПО ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане = РегистрацииВНалоговомОргане.Ссылка
	|		ПО Организации.Организация = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.СтруктурнаяЕдиница
	|			И Организации.Период = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловияПФРСрезПоследних
	|		ПО Организации.Организация = ТерриториальныеУсловияПФРСрезПоследних.СтруктурнаяЕдиница
	|			И Организации.Период = ТерриториальныеУсловияПФРСрезПоследних.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ДанныеОрганизации
	|		ПО Организации.Организация = ДанныеОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОрганизацииДляСреза
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИсторияРегистрацийВОрганеПФРСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТТерриториальныеУсловияПФРСрезПоследних";
		
	Запрос.Выполнить();	
	
КонецПроцедуры

Функция СведенияОбОрганизации(Организация, Период) Экспорт
	ТаблицаОрганизации = Новый ТаблицаЗначений;
	ТаблицаОрганизации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизации.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицы = ТаблицаОрганизации.Добавить();
	СтрокаТаблицы.Организация = Организация;
	СтрокаТаблицы.Период = Период;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОрганизации", ТаблицаОрганизации);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОрганизации.Организация,
	|	ТаблицаОрганизации.Период
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	&ТаблицаОрганизации КАК ТаблицаОрганизации";
	
	Запрос.Выполнить();
	
	СоздатьВТСведенияОбОрганизацияхПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбОрганизациях.Организация,
	|	СведенияОбОрганизациях.Период,
	|	СведенияОбОрганизациях.ИНН,
	|	СведенияОбОрганизациях.КодОрганаПФР,
	|	СведенияОбОрганизациях.КодОрганаФСГС,
	|	СведенияОбОрганизациях.КодПодчиненностиФСС,
	|	СведенияОбОрганизациях.КодПоОКПО,
	|	СведенияОбОрганизациях.НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное,
	|	СведенияОбОрганизациях.Наименование,
	|	СведенияОбОрганизациях.ОГРН,
	|	СведенияОбОрганизациях.КодОКОПФ,
	|	СведенияОбОрганизациях.НаименованиеОКОПФ,
	|	СведенияОбОрганизациях.КодОКФС,
	|	СведенияОбОрганизациях.НаименованиеОКФС,
	|	СведенияОбОрганизациях.РегистрацияВНалоговомОргане,
	|	СведенияОбОрганизациях.КПП,
	|	СведенияОбОрганизациях.НаименованиеИФНС,
	|	СведенияОбОрганизациях.ОКАТО,
	|	СведенияОбОрганизациях.ТерриториальныеУсловияПФР,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо,
	|	СведенияОбОрганизациях.РайонныйКоэффициент,
	|	СведенияОбОрганизациях.ГоловнаяОрганизация
	|ИЗ
	|	ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Регистрация сведений о взносах переданных в ПФР

Процедура ЗарегистрироватьПереданныеВПФРВзносы(Движения, Организация, ОтчетныйПериод, ПереданныеВзносы) Экспорт	
	КатегорииЧленовЭкипажаМорскихСудов = КатегорииЧленовЭкипажаМорскихСудов();
	
	Для Каждого СтрокаДанных Из ПереданныеВзносы Цикл
		СтрокаДвижений = Движения.СтраховыеВзносыПереданныеВПФР.Добавить();
		СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Приход;
		СтрокаДвижений.Период = ОтчетныйПериод;
		СтрокаДвижений.Организация = Организация;
		СтрокаДвижений.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		СтрокаДвижений.КатегорияЗастрахованныхЛиц = СтрокаДанных.КатегорияЗастрахованныхЛиц;
		СтрокаДвижений.ТипДоговора = СтрокаДанных.ТипДоговора;		
		
		Если КатегорииЧленовЭкипажаМорскихСудов.Найти(СтрокаДанных.КатегорияЗастрахованныхЛиц) = Неопределено Тогда
			СтрокаДвижений.Страховая = СтрокаДанных.НачисленоСтраховая;
			СтрокаДвижений.Накопительная = СтрокаДанных.НачисленоНакопительная;

			СтрокаДвижений = Движения.СтраховыеВзносыПереданныеВПФР.Добавить();
			СтрокаДвижений.ВидДвижения = ВидДвиженияНакопления.Расход;
			СтрокаДвижений.Период = ОтчетныйПериод;
			СтрокаДвижений.Организация = Организация;
			СтрокаДвижений.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
			СтрокаДвижений.КатегорияЗастрахованныхЛиц = СтрокаДанных.КатегорияЗастрахованныхЛиц;
			СтрокаДвижений.ТипДоговора = СтрокаДанных.ТипДоговора;
			
			СтрокаДвижений.Страховая = СтрокаДанных.УплаченоСтраховая;
			СтрокаДвижений.Накопительная = СтрокаДанных.УплаченоНакопительная;
		Иначе	
			СтрокаДвижений.СтраховаяЧленамЭкипажейМорскихСудов = СтрокаДанных.НачисленоСтраховая;
			СтрокаДвижений.НакопительнаяЧленамЭкипажейМорскихСудов = СтрокаДанных.НачисленоНакопительная;	
		КонецЕсли;	
	КонецЦикла;		
	Движения.СтраховыеВзносыПереданныеВПФР.Записывать = Истина;
КонецПроцедуры	

Функция ТаблицаСведенияОВзносах() Экспорт
	СведенияОВзносах = Новый ТаблицаЗначений;
	СведенияОВзносах.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	СведенияОВзносах.Колонки.Добавить("НачисленоСтраховая", Новый ОписаниеТипов("Число"));
	СведенияОВзносах.Колонки.Добавить("НачисленоНакопительная", Новый ОписаниеТипов("Число"));
	СведенияОВзносах.Колонки.Добавить("УплаченоСтраховая", Новый ОписаниеТипов("Число"));
	СведенияОВзносах.Колонки.Добавить("УплаченоНакопительная", Новый ОписаниеТипов("Число"));
	СведенияОВзносах.Колонки.Добавить("ЗадолженностьСтраховая", Новый ОписаниеТипов("Число"));
	СведенияОВзносах.Колонки.Добавить("ЗадолженностьНакопительная", Новый ОписаниеТипов("Число"));
	
	Возврат СведенияОВзносах;	
КонецФункции	

Процедура ЗафиксироватьВзносыНаНачалоПериода(Организация, ОтчетныйПериод, СведенияОВзносах) Экспорт
	ПрошлыйПериод = ПерсонифицированныйУчетКлиентСервер.ПредшествующийОтчетныйПериодПерсУчета(ОтчетныйПериод);
	
	НаборЗаписей = РегистрыСведений.СведенияОВзносахВПФР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Период.Установить(ПрошлыйПериод);
	
	Для Каждого СтрокаСведений Из СведенияОВзносах Цикл
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Период = ПрошлыйПериод;
		СтрокаНабора.Организация = Организация;
		ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаСведений);
		
		Если СтрокаНабора.ЗадолженностьСтраховая <> 0
			И СтрокаНабора.НачисленоСтраховая = 0
			И СтрокаНабора.УплаченоСтраховая = 0 Тогда
			
			СтрокаНабора.НачисленоСтраховая = СтрокаНабора.ЗадолженностьСтраховая;
		КонецЕсли;	
		
		Если СтрокаНабора.ЗадолженностьНакопительная <> 0
			И СтрокаНабора.НачисленоНакопительная = 0
			И СтрокаНабора.УплаченоНакопительная = 0 Тогда
			
			СтрокаНабора.НачисленоНакопительная = СтрокаНабора.ЗадолженностьНакопительная;
		КонецЕсли;	
	КонецЦикла;		
	
	НаборЗаписей.Записать();
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования сведений квартальной отчетности

Функция ВариантыИсточниковДанныхСтажа() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеКорректируемыхДокументов", "ДанныеУчетаИФиксированныеДанныеКорректируемыхДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");

	Возврат Варианты;
	
КонецФункции	

Функция ВариантыИсточниковДанныхНачисленныхВзносов() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеДокументов", "ДанныеДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");

	Возврат Варианты;
	
КонецФункции

Функция ВариантыИсточниковДанныхУплаченныхВзносов() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеДокументов", "ДанныеДокументов");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");

	Возврат Варианты;
	
КонецФункции

Функция ВариантыИсточниковДанныхСведенийОЗаработке() Экспорт 
	Варианты = Новый Структура;
	Варианты.Вставить("ДанныеУчета", "ДанныеУчета");
	Варианты.Вставить("ДанныеУчетаИФиксированныеДанныеДокументов", "ДанныеУчетаИФиксированныеДанныеДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументов", "ДанныеКорректируемыхДокументов");
	Варианты.Вставить("ДанныеКорректируемыхДокументовОтменяемые", "ДанныеКорректируемыхДокументовОтменяемые");
	Варианты.Вставить("ДанныеУчетаОтменяемые", "ДанныеУчетаОтменяемые");

	Возврат Варианты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования документов квартальной отчетности

Функция ПараметрыФормированияДокументовКвартальнойОтчетности() Экспорт
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
    СтруктураПараметров.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа.ДанныеУчета);
	СтруктураПараметров.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	СтруктураПараметров.Вставить("КорректируемыйПериод");
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("ОбновляемыеДокументы");
	СтруктураПараметров.Вставить("ЗамещаемыеДокументы");
	СтруктураПараметров.Вставить("СпециальныйДокумент2015года", Ложь);

	Возврат СтруктураПараметров;

КонецФункции

Функция ИсточникиДанныхКвартальнойОтчетностиПоВариантуФормирования(ВариантФормирования, КорректируемыеДокументы, УчитыватьИсправления = Ложь) Экспорт
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	ИсточникиДанных = Новый Структура;	
	
	Если КорректируемыеДокументы.Количество() = 0 Тогда
		ИсточникиДанных.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа.ДанныеУчета);
		ИсточникиДанных.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета);
		ИсточникиДанных.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета);
		ИсточникиДанных.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
		
		Возврат ИсточникиДанных;
	КонецЕсли;	
		
	ИсточникиДанных.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа.ДанныеКорректируемыхДокументов);
	ИсточникиДанных.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеКорректируемыхДокументов);
	ИсточникиДанных.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеКорректируемыхДокументов);
	ИсточникиДанных.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеКорректируемыхДокументов);
	
	Если ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаСтажа Тогда
		Если УчитыватьИсправления Тогда
			ИсточникиДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе
			ИсточникиДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
		КонецЕсли;
	ИначеЕсли ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаНачисленныхВзносов Тогда
		Если УчитыватьИсправления Тогда
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
		КонецЕсли;	
	ИначеЕсли ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаНачисленныхУплаченныхВзносов Тогда	
		Если УчитыватьИсправления Тогда
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета;
		КонецЕсли;	
	ИначеЕсли ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаСтажаИНачисленныхВзносов Тогда
		Если УчитыватьИсправления Тогда
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхОСтаже  = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхОСтаже  = ВариантыИсточниковДанныхСтажа.ДанныеУчета;
		КонецЕсли;		
	ИначеЕсли ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаСтажаИНачисленныхУплаченныхВзносов Тогда
		Если УчитыватьИсправления Тогда
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхОСтаже  = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхОСтаже  = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;
		КонецЕсли;		
	ИначеЕсли ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаКатегорииПоЗастрахованномуЛицу
		Или ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаКатегорииПоОрганизации Тогда	
		
		Если УчитыватьИсправления Тогда
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхОСтаже  = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;	
		КонецЕсли;		
	ИначеЕсли ВариантФормирования = Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.РучнойВводДокументов Тогда
		Если УчитыватьИсправления Тогда
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
			ИсточникиДанных.ИсточникДанныхОСтаже 			 = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов;
		Иначе	
			ИсточникиДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхУплаченныхВзносов  = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета;
			ИсточникиДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ИсточникиДанных;
КонецФункции	

Функция ИсточникиДанныхОтменяющихСведенийКвартальнойОтчетности() Экспорт
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	ИсточникиДанных = Новый Структура;	
	
	ИсточникиДанных.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа.ДанныеУчета);
	ИсточникиДанных.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеДокументов);
	ИсточникиДанных.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета);
	ИсточникиДанных.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
		
	Возврат ИсточникиДанных;
КонецФункции	

Функция СтруктураОтбораДанныхДляКвартальнойОтчетности() Экспорт
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("КатегорияЗастрахованныхЛиц");
	СтруктураПараметров.Вставить("ТипДоговора");
	СтруктураПараметров.Вставить("СписокФизическихЛиц");
	СтруктураПараметров.Вставить("СписокФизическихЛицДляАвтоКорректировки", Новый Массив);
	
	Возврат СтруктураПараметров; 
КонецФункции	

Функция СоздатьДокументыКвартальнойОтчетности(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов, ПараметрыОтбора = Неопределено) Экспорт
	ПериодРасчета = ?(ПараметрыФормированияДокументов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,
						ОтчетныйПериод,
						ПараметрыФормированияДокументов.КорректируемыйПериод);
						
	Если ПериодРасчета >= '20140101' Тогда
		Возврат СоздатьДокументыКвартальнойОтчетности2014(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов, ПараметрыОтбора);									
	Иначе
		Возврат СоздатьДокументыКвартальнойОтчетности2013(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов, ПараметрыОтбора);	
	КонецЕсли;	
КонецФункции	

Функция СоздатьДокументыКвартальнойОтчетности2014(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов, ПараметрыОтбора = Неопределено) 
		
	НомерПачки = ПолучитьСледующийНомерПачки(Организация, ОтчетныйПериод);	
	
	ПериодРасчета = ?(ПараметрыФормированияДокументов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,
						ОтчетныйПериод,
						ПараметрыФормированияДокументов.КорректируемыйПериод);
	
	СозданныеДокументы = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
	ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ = ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ();
	ЗаполнитьЗначенияСвойств(ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ, ПараметрыФормированияДокументов);
	
	ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ.ОтчетныйПериодИсходныхСведений = ОтчетныйПериод;
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = СтруктураОтбораДанныхДляКвартальнойОтчетности();
	КонецЕсли;	
	
	Если ПараметрыФормированияДокументов.ЗамещаемыеДокументы = Неопределено Тогда
		ПачкиРазделов6 = Новый Массив;
	Иначе
		ПачкиРазделов6 = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияДокументов.ЗамещаемыеДокументы);
	КонецЕсли;	
	
	СоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ2014(
		МенеджерВременныхТаблиц, 
		Организация,
		ПериодРасчета,
		ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ, 
		ПараметрыОтбора);									
		
	ВидыСтажаГПХ = Новый Массив;
	
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);	
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыСтажаГПХ", ВидыСтажаГПХ);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФизическоеЛицо КАК Сотрудник,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Наименование,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Фамилия,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Имя,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Отчество,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.СтраховойНомерПФР,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.СотрудникУволен,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.НачисленоСтраховая,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДоНачисленоСтраховая,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФиксНачисленныеВзносы,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФиксЗаработок,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФиксСтаж,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ЛьготыПоУсловиямТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ЛьготыПоВыслуге,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.МаксимальныйКодТеррУсловий,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ИмяТаблицы,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДатаНачалаПериода,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДатаОкончанияПериода,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОсобыеУсловияТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КодПозицииСписка,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОснованиеИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПервыйПараметрИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ВторойПараметрИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ТретийПараметрИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОснованиеВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПервыйПараметрВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ВторойПараметрВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ТретийПараметрВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ТерриториальныеУсловия,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПараметрТерриториальныхУсловий,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Месяц,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Заработок,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КлассУсловийТруда КАК КлассУсловийТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КорректируемыйПериод,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДоначисленоНаОПС,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДоначисленоНакопительная,
	|	ВЫБОР
	|		КОГДА СведенияОВзносахЗаработкеСтажеЗЛ.ТретийПараметрИсчисляемогоСтажа В (&ВидыСтажаГПХ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСтажГПХ
	|ИЗ
	|	ВТСведенияОВзносахЗаработкеСтажеЗЛ КАК СведенияОВзносахЗаработкеСтажеЗЛ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СведенияОВзносахЗаработкеСтажеЗЛ.МаксимальныйКодТеррУсловий,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ЛьготыПоУсловиямТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ЛьготыПоВыслуге,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Наименование,
	|	Сотрудник,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ИмяТаблицы,
	|	ЭтоСтажГПХ УБЫВ,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДатаНачалаПериода,
	|	КатегорияЗастрахованныхЛиц,
	|	КлассУсловийТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Месяц";
	
	ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
	
	РегНомерПФРВКоррПериод = "";
	Если ПараметрыФормированияДокументов.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		
		РегНомерПФРВКоррПериод = РегНомерПФРВКорректируемыйПериод(Организация, ОтчетныйПериод, ПериодРасчета);
	КонецЕсли;	
		
	
	Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("МаксимальныйКодТеррУсловий") Цикл 
		Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("ЛьготыПоУсловиямТруда") Цикл
			Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("ЛьготыПоВыслуге") Цикл
				СчСотрудников = 0;
				
				ПачкаРазделов6 = ПачкаРазделов6(ПачкиРазделов6, Организация, ОтчетныйПериод, НомерПачки, ПараметрыФормированияДокументов, РегНомерПФРВКоррПериод, ПараметрыФормированияДокументов.СпециальныйДокумент2015года);
					
				НомерПачки = НомерПачки + 1;		

				Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("Сотрудник") Цикл				
					СтрокиСтажаПоСотруднику = Новый Массив;
					
					ПериодыСтажаПредставление = "";
					Если СчСотрудников = 200 Тогда
						ПачкаРазделов6.Записать(РежимЗаписиДокумента.Запись);
						
						СозданныеДокументы.Добавить(ПачкаРазделов6.Ссылка);
						
						ПачкаРазделов6 = ПачкаРазделов6(ПачкиРазделов6, Организация, ОтчетныйПериод, НомерПачки, ПараметрыФормированияДокументов, РегНомерПФРВКоррПериод, ПараметрыФормированияДокументов.СпециальныйДокумент2015года);
                     						
						НомерПачки = НомерПачки + 1;	
						СчСотрудников = 0;
					КонецЕсли;
					
					СчСотрудников = СчСотрудников + 1;
					
					Пока ВыборкаСотрудников.Следующий() Цикл
						Если ПачкаРазделов6.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ
							И ВыборкаСотрудников.ИмяТаблицы <> "Сотрудники"
							И ВыборкаСотрудников.ИмяТаблицы <> "СведенияОЗаработке" Тогда 
							
							Продолжить;
						КонецЕсли;	
						
						ТаблицаДокумента = ПачкаРазделов6[ВыборкаСотрудников.ИмяТаблицы];
					
						СтрокаТаблицы = ТаблицаДокумента.Добавить();
						
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаСотрудников);
						
						Если ВыборкаСотрудников.ИмяТаблицы = "ЗаписиОСтаже" Тогда
							СтрокиСтажаПоСотруднику.Добавить(СтрокаТаблицы);
						КонецЕсли;	
					КонецЦикла;	
					
					ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
				
				КонецЦикла;
				
				ПачкаРазделов6.Записать(РежимЗаписиДокумента.Запись);
						
				СозданныеДокументы.Добавить(ПачкаРазделов6.Ссылка);	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
	Для Каждого ПустаяПачка Из ПачкиРазделов6 Цикл
		ДокументОбъект = ПустаяПачка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
		
	Возврат СозданныеДокументы;
	
КонецФункции	

Функция СоздатьДокументыКвартальнойОтчетности2013(Организация, ОтчетныйПериод, ПараметрыФормированияДокументов, ПараметрыОтбора = Неопределено) 
		
	НомерПачки = ПолучитьСледующийНомерПачки(Организация, ОтчетныйПериод);	
	
	ПериодРасчета = ?(ПараметрыФормированияДокументов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,
						ОтчетныйПериод,
						ПараметрыФормированияДокументов.КорректируемыйПериод);
	
	СозданныеДокументы = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	ПачкиСЗВ6_1 = Новый Массив;
	ПачкиСЗВ6_2 = Новый Массив;
	ПачкиСЗВ6_4 = Новый Массив;

	Если ПараметрыФормированияДокументов.ЗамещаемыеДокументы <> Неопределено Тогда	
		ЗаполнитьЗамещаемыеДокументыПоТипам(
			ПараметрыФормированияДокументов.ЗамещаемыеДокументы, 
			ПачкиСЗВ6_1, 
			ПачкиСЗВ6_2, 
			ПачкиСЗВ6_4);
	КонецЕсли;	
	
	ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ = ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ();
	ЗаполнитьЗначенияСвойств(ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ, ПараметрыФормированияДокументов);
	
	Если ПараметрыОтбора = Неопределено Тогда
		ПараметрыОтбора = СтруктураОтбораДанныхДляКвартальнойОтчетности();
	КонецЕсли;	
	
	СоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ2013(
		МенеджерВременныхТаблиц, 
		Организация,
		ПериодРасчета,
		ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ, 
		ПараметрыОтбора);									
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияКвартальнойОтчетности.ФизическоеЛицо КАК Сотрудник,
	|	СведенияКвартальнойОтчетности.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СведенияКвартальнойОтчетности.ТипДоговора КАК ТипДоговора,
	|	СведенияКвартальнойОтчетности.Наименование КАК Наименование,
	|	СведенияКвартальнойОтчетности.Фамилия,
	|	СведенияКвартальнойОтчетности.Имя,
	|	СведенияКвартальнойОтчетности.Отчество,
	|	СведенияКвартальнойОтчетности.СтраховойНомерПФР,
	|	СведенияКвартальнойОтчетности.НачисленоНакопительная,
	|	СведенияКвартальнойОтчетности.НачисленоСтраховая,
	|	СведенияКвартальнойОтчетности.УплаченоНакопительная,
	|	СведенияКвартальнойОтчетности.УплаченоСтраховая,
	|	СведенияКвартальнойОтчетности.ДоНачисленоСтраховая,
	|	СведенияКвартальнойОтчетности.ДоНачисленоНакопительная,
	|	СведенияКвартальнойОтчетности.ДоУплаченоСтраховая,
	|	СведенияКвартальнойОтчетности.ДоУплаченоНакопительная,
	|	СведенияКвартальнойОтчетности.ФиксНачисленныеВзносы,
	|	СведенияКвартальнойОтчетности.ФиксУплаченныеВзносы,
	|	СведенияКвартальнойОтчетности.ФиксЗаработок,
	|	СведенияКвартальнойОтчетности.ФиксСтаж,
	|	СведенияКвартальнойОтчетности.СложныйСтаж КАК СложныйСтаж,
	|	СведенияКвартальнойОтчетности.ЛьготыПоУсловиямТруда КАК ЛьготыПоУсловиямТруда,
	|	СведенияКвартальнойОтчетности.ЛьготыПоВыслуге КАК ЛьготыПоВыслуге,
	|	СведенияКвартальнойОтчетности.МаксимальныйКодТеррУсловий КАК МаксимальныйКодТеррУсловий,
	|	СведенияКвартальнойОтчетности.ИмяТаблицы КАК ИмяТаблицы,
	|	СведенияКвартальнойОтчетности.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	СведенияКвартальнойОтчетности.ДатаОкончанияПериода,
	|	СведенияКвартальнойОтчетности.ОсобыеУсловияТруда,
	|	СведенияКвартальнойОтчетности.КодПозицииСписка,
	|	СведенияКвартальнойОтчетности.ОснованиеИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ПервыйПараметрИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ВторойПараметрИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ТретийПараметрИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ОснованиеВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ПервыйПараметрВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ВторойПараметрВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ТретийПараметрВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ТерриториальныеУсловия,
	|	СведенияКвартальнойОтчетности.ПараметрТерриториальныхУсловий,
	|	СведенияКвартальнойОтчетности.Месяц КАК Месяц,
	|	СведенияКвартальнойОтчетности.Заработок,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносами,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	|ИЗ
	|	ВТСведенияОВзносахЗаработкеСтажеЗЛ КАК СведенияКвартальнойОтчетности
	|ГДЕ
	|	СведенияКвартальнойОтчетности.КатегорияЗастрахованныхЛиц <> ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СложныйСтаж,
	|	КатегорияЗастрахованныхЛиц,
	|	ТипДоговора,
	|	МаксимальныйКодТеррУсловий,
	|	ЛьготыПоУсловиямТруда,
	|	ЛьготыПоВыслуге,
	|	Наименование,
	|	Сотрудник,
	|	ДатаНачалаПериода,
	|	Месяц,
	|	ИмяТаблицы";
	
	ВыборкаСотрудников = Запрос.Выполнить().Выбрать();
	
	РегНомерПФРВКоррПериод = "";
	Если ПараметрыФормированияДокументов.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ
		И ОтчетныйПериод >= '20130101' Тогда
		
		РегНомерПФРВКоррПериод = РегНомерПФРВКорректируемыйПериод(Организация, ОтчетныйПериод, ПериодРасчета);
	КонецЕсли;	
		
	
	Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("СложныйСтаж") Цикл 
		Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("КатегорияЗастрахованныхЛиц") Цикл 
			Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("ТипДоговора") Цикл
				Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("МаксимальныйКодТеррУсловий") Цикл 
					Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("ЛьготыПоУсловиямТруда") Цикл
						Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("ЛьготыПоВыслуге") Цикл
							СчСотрудников = 0;
							
							ДокументСЗВ = ПолучитьПачкуСЗВ(ВыборкаСотрудников.СложныйСтаж, ПериодРасчета, ПачкиСЗВ6_1, ПачкиСЗВ6_2, ПачкиСЗВ6_4);
							ЗаполнитьСвойстваДокумента(
								ДокументСЗВ, 
								Организация, 
								ОтчетныйПериод, 
								НомерПачки, 
								ВыборкаСотрудников.КатегорияЗастрахованныхЛиц, 
								ВыборкаСотрудников.ТипДоговора, 
								ПараметрыФормированияДокументов.ТипСведенийСЗВ, 
								ПараметрыФормированияДокументов.КорректируемыйПериод,
								РегНомерПФРВКоррПериод);
								
							НомерПачки = НомерПачки + 1;		

							Пока ВыборкаСотрудников.СледующийПоЗначениюПоля("Сотрудник") Цикл				
								СтрокиСтажаПоСотруднику = Новый Массив;
								
								ПериодыСтажаПредставление = "";
								Если СчСотрудников = 200 Тогда
									ДокументСЗВ.Записать(РежимЗаписиДокумента.Запись);
									
									СозданныеДокументы.Добавить(ДокументСЗВ.Ссылка);
									
									ДокументСЗВ = ПолучитьПачкуСЗВ(ВыборкаСотрудников.СложныйСтаж, ПериодРасчета, ПачкиСЗВ6_1, ПачкиСЗВ6_2, ПачкиСЗВ6_4);
		                           	ЗаполнитьСвойстваДокумента(
										ДокументСЗВ, 
										Организация, 
										ОтчетныйПериод, 
										НомерПачки, 
										ВыборкаСотрудников.КатегорияЗастрахованныхЛиц, 
										ВыборкаСотрудников.ТипДоговора, 
										ПараметрыФормированияДокументов.ТипСведенийСЗВ, 
										ПараметрыФормированияДокументов.КорректируемыйПериод,
										РегНомерПФРВКоррПериод);
									
									НомерПачки = НомерПачки + 1;	
									СчСотрудников = 0;
								КонецЕсли;
								
								СчСотрудников = СчСотрудников + 1;
								
								Пока ВыборкаСотрудников.Следующий() Цикл
									Если ДокументСЗВ.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ
										И ВыборкаСотрудников.ИмяТаблицы <> "Сотрудники" Тогда
										
										Продолжить;
									КонецЕсли;	
									
									ТаблицаДокумента = ДокументСЗВ[ВыборкаСотрудников.ИмяТаблицы];
								
									СтрокаТаблицы = ТаблицаДокумента.Добавить();
									
									ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаСотрудников);
									
									Если ВыборкаСотрудников.ИмяТаблицы = "ЗаписиОСтаже" Тогда
										СтрокиСтажаПоСотруднику.Добавить(СтрокаТаблицы);
									КонецЕсли;	
								КонецЦикла;	
								
								Если ТипЗнч(ДокументСЗВ) <> Тип("ДокументОбъект.РеестрСЗВ_6_2") Тогда
									ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
								КонецЕсли;	
							КонецЦикла;
							
							ДокументСЗВ.Записать(РежимЗаписиДокумента.Запись);
									
							СозданныеДокументы.Добавить(ДокументСЗВ.Ссылка);	
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	Для Каждого ПустаяПачка Из ПачкиСЗВ6_1 Цикл
		ДокументОбъект = ПустаяПачка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;	
	
	Для Каждого ПустаяПачка Из ПачкиСЗВ6_2 Цикл
		ДокументОбъект = ПустаяПачка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	Для Каждого ПустаяПачка Из ПачкиСЗВ6_4 Цикл
		ДокументОбъект = ПустаяПачка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	Возврат СозданныеДокументы;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования данных о взносах стаже и заработке

Функция ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ() Экспорт
	СтруктураПараметров = Новый Структура;
	
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
    СтруктураПараметров.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа.ДанныеУчета);
	СтруктураПараметров.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("ОбновляемыеДокументы");
	СтруктураПараметров.Вставить("ОтчетныйПериодИсходныхСведений");
	СтруктураПараметров.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());     
	СтруктураПараметров.Вставить("СпециальныйДокумент2015года", Ложь);
	
	Возврат СтруктураПараметров;
КонецФункции	

Процедура СоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора) Экспорт												
	ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СложныйСтажПоУмолчанию", ?(Год(ОтчетныйПериод) >= 2013, Истина, Ложь));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияВзносов = ПараметрыДляСоздатьВТВзносыВПФР();
		
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияВзносов, ПараметрыПолученияДанных);
	
	СоздатьВТВзносыВПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора);
	
	ПараметрыПолученияСтажа = ПараметрыДляСоздатьВТДанныеСтажаПФР();
	ПараметрыПолученияСтажа.ВыделятьСтажПоДоговорамГПХ = Истина;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияСтажа, ПараметрыПолученияДанных);
	
	СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияСтажа, ПараметрыОтбора);
	
	СоздатьВТПараметрыСтажаЗастрахованныхЛиц(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.ТипСведенийСЗВ);
	
	ПараметрыПолученияЗаработка = ПараметрыДляСоздатьВТСведенияОЗаработке();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияЗаработка, ПараметрыПолученияДанных);
	
	СоздатьВТСведенияОЗаработке2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);
		
	СоздатьВТКадровыеДанныеФизическихЛицДляПачекСЗВ2014(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);
	
	СоздатьВТСостояниеУволенных(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод);

	СоздатьВТДанныеРаздела66(МенеджерВременныхТаблиц, Организация, ПараметрыПолученияДанных.ОтчетныйПериодИсходныхСведений, ОтчетныйПериод, ПараметрыПолученияДанных.ТипСведенийСЗВ);
	
	СоздатьВТНулевыеИтоговыеСведенияОЗаработке(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, "ВТКадровыеДанныеФизическихЛиц");
	
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	СведенияОЗаработке.ФиксЗаработок
	|ПОМЕСТИТЬ ВТФиксЗаработокФизическихЛиц
	|ИЗ
	|	ВТСведенияОЗаработке КАК СведенияОЗаработке
	|ГДЕ
	|	СведенияОЗаработке.ФиксЗаработок = ИСТИНА
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФиксЗаработок
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|ГДЕ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФиксЗаработок = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Фамилия,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Имя,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Отчество,
	|	ЗастрахованныеЛицаДляПачекСЗВ.СтраховойНомерПФР,
	|	ЕСТЬNULL(СостояниеУволенных.СотрудникУволен, ЛОЖЬ) КАК СотрудникУволен,
	|	ЕСТЬNULL(ВзносыВПФР.НачисленоСтраховая, 0) КАК НачисленоСтраховая,
	|	ЕСТЬNULL(ВзносыВПФР.ДоНачисленоСтраховая, 0) КАК ДоНачисленоСтраховая,
	|	ЕСТЬNULL(ВзносыВПФР.ФиксНачисленныеВзносы, ЛОЖЬ) КАК ФиксНачисленныеВзносы,
	|	ЕСТЬNULL(ФиксЗаработокФизическихЛиц.ФиксЗаработок, ЛОЖЬ) КАК ФиксЗаработок,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ФиксСтаж, ЛОЖЬ) КАК ФиксСтаж,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ) КАК ЛьготыПоУсловиямТруда,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ) КАК ЛьготыПоВыслуге,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """") КАК МаксимальныйКодТеррУсловий,
	|	""Сотрудники"" КАК ИмяТаблицы,
	|	NULL КАК ДатаНачалаПериода,
	|	NULL КАК ДатаОкончанияПериода,
	|	NULL КАК ОсобыеУсловияТруда,
	|	NULL КАК КодПозицииСписка,
	|	NULL КАК ОснованиеИсчисляемогоСтажа,
	|	NULL КАК ПервыйПараметрИсчисляемогоСтажа,
	|	NULL КАК ВторойПараметрИсчисляемогоСтажа,
	|	NULL КАК ТретийПараметрИсчисляемогоСтажа,
	|	NULL КАК ОснованиеВыслугиЛет,
	|	NULL КАК ПервыйПараметрВыслугиЛет,
	|	NULL КАК ВторойПараметрВыслугиЛет,
	|	NULL КАК ТретийПараметрВыслугиЛет,
	|	NULL КАК ТерриториальныеУсловия,
	|	NULL КАК ПараметрТерриториальныхУсловий,
	|	NULL КАК Месяц,
	|	ВзносыВПФР.КатегорияЗастрахованныхЛиц,
	|	NULL КАК Заработок,
	|	NULL КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	NULL КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	NULL КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	NULL КАК КлассУсловийТруда,
	|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	NULL КАК КорректируемыйПериод,
	|	NULL КАК ДоначисленоНакопительная,
	|	NULL КАК ДоначисленоНаОПС
	|ПОМЕСТИТЬ ВТСведенияОВзносахЗаработкеСтажеЗЛ
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеУволенных КАК СостояниеУволенных
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = СостояниеУволенных.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыВПФР КАК ВзносыВПФР
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ВзносыВПФР.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксЗаработокФизическихЛиц КАК ФиксЗаработокФизическихЛиц
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ФиксЗаработокФизическихЛиц.ФизическоеЛицо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСтажаПФР.ФизическоеЛицо,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """"),
	|	""ЗаписиОСтаже"",
	|	ДанныеСтажаПФР.ДатаНачалаПериода,
	|	ДанныеСтажаПФР.ДатаОкончанияПериода,
	|	ДанныеСтажаПФР.ОсобыеУсловияТруда,
	|	ДанныеСтажаПФР.КодПозицииСписка,
	|	ДанныеСтажаПФР.ОснованиеИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ПервыйПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ВторойПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ОснованиеВыслугиЛет,
	|	ДанныеСтажаПФР.ПервыйПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ВторойПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ТретийПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ТерриториальныеУсловия,
	|	ДанныеСтажаПФР.ПараметрТерриториальныхУсловий,
	|	NULL,
	|	ДанныеСтажаПФР.КатегорияЗастрахованныхЛиц,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСтажаПФР КАК ДанныеСтажаПФР
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ДанныеСтажаПФР.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО (ДанныеСтажаПФР.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """"),
	|	""СведенияОЗаработке"",
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СведенияОЗаработке.Месяц,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = СведенияОЗаработке.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО (СведенияОЗаработке.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """"),
	|	""СведенияОЗаработке"",
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СведенияОЗаработке.Месяц,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНулевыеИтоговыеСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = СведенияОЗаработке.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО (СведенияОЗаработке.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """"),
	|	""СведенияОЗаработкеНаВредныхИТяжелыхРаботах"",
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Месяц,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО (СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРаздела66.ФизическоеЛицо,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеРаздела66.ДоначисленоСтраховая,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """"),
	|	""КорректирующиеСведения"",
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ДанныеРаздела66.КорректируемыйПериод,
	|	ДанныеРаздела66.ДоначисленоНакопительная,
	|	ДанныеРаздела66.ДоначисленоНаОПС
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеРаздела66 КАК ДанныеРаздела66
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ДанныеРаздела66.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО (ДанныеРаздела66.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо)";

	Запрос.Выполнить()
	
КонецПроцедуры	

Процедура СоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора) Экспорт												
	ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СложныйСтажПоУмолчанию", ?(Год(ОтчетныйПериод) >= 2013, Истина, Ложь));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияВзносов = ПараметрыДляСоздатьВТВзносыВПФР();
		
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияВзносов, ПараметрыПолученияДанных);
	
	СоздатьВТВзносыВПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора);
	
	ПараметрыПолученияСтажа = ПараметрыДляСоздатьВТДанныеСтажаПФР();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияСтажа, ПараметрыПолученияДанных);
	
	СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияСтажа, ПараметрыОтбора);
	
	СоздатьВТПараметрыСтажаЗастрахованныхЛиц(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.ТипСведенийСЗВ);
	
	ПараметрыПолученияЗаработка = ПараметрыДляСоздатьВТСведенияОЗаработке();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияЗаработка, ПараметрыПолученияДанных);
	
	СоздатьВТСведенияОЗаработке2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);
		
	СоздатьВТЗастрахованныеЛицаДляПачекСЗВ2013(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);
			
	Запрос.Текст =  
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.ТипДоговора,
	|	СведенияОЗаработке.ФиксЗаработок
	|ПОМЕСТИТЬ ВТФиксЗаработокФизическихЛиц
	|ИЗ
	|	ВТСведенияОЗаработке КАК СведенияОЗаработке
	|ГДЕ
	|	СведенияОЗаработке.ФиксЗаработок = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо,
	|	ЗастрахованныеЛицаДляПачекСЗВ.КатегорияЗастрахованныхЛиц,
	|	ЗастрахованныеЛицаДляПачекСЗВ.ТипДоговора,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Фамилия,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Имя,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Отчество,
	|	ЗастрахованныеЛицаДляПачекСЗВ.СтраховойНомерПФР,
	|	ЕСТЬNULL(ВзносыВПФР.НачисленоНакопительная, 0) КАК НачисленоНакопительная,
	|	ЕСТЬNULL(ВзносыВПФР.НачисленоСтраховая, 0) КАК НачисленоСтраховая,
	|	ЕСТЬNULL(ВзносыВПФР.УплаченоНакопительная, 0) КАК УплаченоНакопительная,
	|	ЕСТЬNULL(ВзносыВПФР.УплаченоСтраховая, 0) КАК УплаченоСтраховая,
	|	ЕСТЬNULL(ВзносыВПФР.ДоНачисленоСтраховая, 0) КАК ДоНачисленоСтраховая,
	|	ЕСТЬNULL(ВзносыВПФР.ДоНачисленоНакопительная, 0) КАК ДоНачисленоНакопительная,
	|	ЕСТЬNULL(ВзносыВПФР.ДоУплаченоСтраховая, 0) КАК ДоУплаченоСтраховая,
	|	ЕСТЬNULL(ВзносыВПФР.ДоУплаченоНакопительная, 0) КАК ДоУплаченоНакопительная,
	|	ЕСТЬNULL(ВзносыВПФР.ФиксНачисленныеВзносы, ЛОЖЬ) КАК ФиксНачисленныеВзносы,
	|	ЕСТЬNULL(ВзносыВПФР.ФиксУплаченныеВзносы, ЛОЖЬ) КАК ФиксУплаченныеВзносы,
	|	ЕСТЬNULL(ФиксЗаработокФизическихЛиц.ФиксЗаработок, ЛОЖЬ) КАК ФиксЗаработок,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ФиксСтаж, ЛОЖЬ) КАК ФиксСтаж,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.СложныйСтаж, &СложныйСтажПоУмолчанию) КАК СложныйСтаж,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ) КАК ЛьготыПоУсловиямТруда,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ) КАК ЛьготыПоВыслуге,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """") КАК МаксимальныйКодТеррУсловий,
	|	""Сотрудники"" КАК ИмяТаблицы,
	|	NULL КАК ДатаНачалаПериода,
	|	NULL КАК ДатаОкончанияПериода,
	|	NULL КАК ОсобыеУсловияТруда,
	|	NULL КАК КодПозицииСписка,
	|	NULL КАК ОснованиеИсчисляемогоСтажа,
	|	NULL КАК ПервыйПараметрИсчисляемогоСтажа,
	|	NULL КАК ВторойПараметрИсчисляемогоСтажа,
	|	NULL КАК ТретийПараметрИсчисляемогоСтажа,
	|	NULL КАК ОснованиеВыслугиЛет,
	|	NULL КАК ПервыйПараметрВыслугиЛет,
	|	NULL КАК ВторойПараметрВыслугиЛет,
	|	NULL КАК ТретийПараметрВыслугиЛет,
	|	NULL КАК ТерриториальныеУсловия,
	|	NULL КАК ПараметрТерриториальныхУсловий,
	|	NULL КАК Месяц,
	|	NULL КАК Заработок,
	|	NULL КАК ОблагаетсяВзносами,
	|	NULL КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	NULL КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	|ПОМЕСТИТЬ ВТСведенияОВзносахЗаработкеСтажеЗЛ
	|ИЗ
	|	ВТЗастрахованныеЛицаДляПачекСЗВ КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыВПФР КАК ВзносыВПФР
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ВзносыВПФР.ФизическоеЛицо
	|			И ЗастрахованныеЛицаДляПачекСЗВ.КатегорияЗастрахованныхЛиц = ВзносыВПФР.КатегорияЗастрахованныхЛиц
	|			И ЗастрахованныеЛицаДляПачекСЗВ.ТипДоговора = ВзносыВПФР.ТипДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо
	|			И ЗастрахованныеЛицаДляПачекСЗВ.КатегорияЗастрахованныхЛиц = ПараметрыСтажаЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц
	|			И ЗастрахованныеЛицаДляПачекСЗВ.ТипДоговора = ПараметрыСтажаЗастрахованныхЛиц.ТипДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксЗаработокФизическихЛиц КАК ФиксЗаработокФизическихЛиц
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ФиксЗаработокФизическихЛиц.ФизическоеЛицо
	|			И ЗастрахованныеЛицаДляПачекСЗВ.КатегорияЗастрахованныхЛиц = ФиксЗаработокФизическихЛиц.КатегорияЗастрахованныхЛиц
	|			И ЗастрахованныеЛицаДляПачекСЗВ.ТипДоговора = ФиксЗаработокФизическихЛиц.ТипДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеСтажаПФР.ФизическоеЛицо,
	|	ДанныеСтажаПФР.КатегорияЗастрахованныхЛиц,
	|	ДанныеСтажаПФР.ТипДоговора,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.СложныйСтаж, &СложныйСтажПоУмолчанию),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """"),
	|	""ЗаписиОСтаже"",
	|	ДанныеСтажаПФР.ДатаНачалаПериода,
	|	ДанныеСтажаПФР.ДатаОкончанияПериода,
	|	ДанныеСтажаПФР.ОсобыеУсловияТруда,
	|	ДанныеСтажаПФР.КодПозицииСписка,
	|	ДанныеСтажаПФР.ОснованиеИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ПервыйПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ВторойПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ОснованиеВыслугиЛет,
	|	ДанныеСтажаПФР.ПервыйПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ВторойПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ТретийПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ТерриториальныеУсловия,
	|	ДанныеСтажаПФР.ПараметрТерриториальныхУсловий,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	ВТЗастрахованныеЛицаДляПачекСЗВ КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСтажаПФР КАК ДанныеСтажаПФР
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ДанныеСтажаПФР.ФизическоеЛицо
	|			И ЗастрахованныеЛицаДляПачекСЗВ.КатегорияЗастрахованныхЛиц = ДанныеСтажаПФР.КатегорияЗастрахованныхЛиц
	|			И ЗастрахованныеЛицаДляПачекСЗВ.ТипДоговора = ДанныеСтажаПФР.ТипДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО (ДанныеСтажаПФР.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо)
	|			И (ДанныеСтажаПФР.КатегорияЗастрахованныхЛиц = ПараметрыСтажаЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц)
	|			И (ДанныеСтажаПФР.ТипДоговора = ПараметрыСтажаЗастрахованныхЛиц.ТипДоговора)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.ТипДоговора,
	|	ЗастрахованныеЛицаДляПачекСЗВ.Наименование,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.СложныйСтаж, &СложныйСтажПоУмолчанию),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоУсловиямТруда, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.ЛьготыПоВыслуге, ЛОЖЬ),
	|	ЕСТЬNULL(ПараметрыСтажаЗастрахованныхЛиц.МаксимальныйКодТеррУсловий, """"),
	|	""СведенияОЗаработке"",
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СведенияОЗаработке.Месяц,
	|	СведенияОЗаработке.Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносами,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	|ИЗ
	|	ВТЗастрахованныеЛицаДляПачекСЗВ КАК ЗастрахованныеЛицаДляПачекСЗВ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = СведенияОЗаработке.ФизическоеЛицо
	|			И ЗастрахованныеЛицаДляПачекСЗВ.КатегорияЗастрахованныхЛиц = СведенияОЗаработке.КатегорияЗастрахованныхЛиц
	|			И ЗастрахованныеЛицаДляПачекСЗВ.ТипДоговора = СведенияОЗаработке.ТипДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыСтажаЗастрахованныхЛиц КАК ПараметрыСтажаЗастрахованныхЛиц
	|		ПО (СведенияОЗаработке.ФизическоеЛицо = ПараметрыСтажаЗастрахованныхЛиц.ФизическоеЛицо)
	|			И (СведенияОЗаработке.КатегорияЗастрахованныхЛиц = ПараметрыСтажаЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц)
	|			И (СведенияОЗаработке.ТипДоговора = ПараметрыСтажаЗастрахованныхЛиц.ТипДоговора)";

	Запрос.Выполнить()
КонецПроцедуры	

Процедура СоздатьВТПараметрыСтажаЗастрахованныхЛиц(МенеджерВременныхТаблиц, ТипСведенийСЗВ) 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтменяющиеСведения", ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСтажа.ФизическоеЛицо,
	|	ТаблицаСтажа.КатегорияЗастрахованныхЛиц,
	|	ТаблицаСтажа.ТипДоговора,
	|	МАКСИМУМ(ТаблицаСтажа.СложныйСтаж) КАК СложныйСтаж,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ОтменяющиеСведения
	|				ТОГДА ЛОЖЬ
	|			КОГДА ТаблицаСтажа.ОсобыеУсловияТруда <> ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЛьготыПоУсловиямТруда,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ОтменяющиеСведения
	|				ТОГДА ЛОЖЬ
	|			КОГДА ТаблицаСтажа.ОсобыеУсловияТруда = ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка)
	|					И (ТаблицаСтажа.ОснованиеВыслугиЛет <> ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка)
	|						ИЛИ ТаблицаСтажа.ОснованиеИсчисляемогоСтажа <> ЗНАЧЕНИЕ(Справочник.ОснованияИсчисляемогоСтраховогоСтажа.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЛьготыПоВыслуге,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ОтменяющиеСведения
	|				ТОГДА """"
	|			ИНАЧЕ ЕСТЬNULL(ТаблицаСтажа.ТерриториальныеУсловия.Код, """")
	|		КОНЕЦ) КАК МаксимальныйКодТеррУсловий,
	|	МАКСИМУМ(ТаблицаСтажа.ФиксСтаж) КАК ФиксСтаж
	|ПОМЕСТИТЬ ВТПараметрыСтажаЗастрахованныхЛиц
	|ИЗ
	|	ВТДанныеСтажаПФР КАК ТаблицаСтажа
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСтажа.ФизическоеЛицо,
	|	ТаблицаСтажа.КатегорияЗастрахованныхЛиц,
	|	ТаблицаСтажа.ТипДоговора";
	
	Запрос.Выполнить()
КонецПроцедуры	

Процедура СоздатьВТКадровыеДанныеФизическихЛицДляПачекСЗВ2014(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПараметрыПолученияДанных.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		ТекстУсловияЗаработок = "ИСТИНА";
	Иначе
		ТекстУсловияЗаработок = 
		"СведенияОЗаработке.Месяц > 0
		|   И (СведенияОЗаработке.Заработок <> 0
		|	ИЛИ СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины <> 0
		|	ИЛИ СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины <> 0
		|	ИЛИ СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины <> 0)";	
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОСтажеПоКатегориям.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаИзДанныхУчета
	|ИЗ
	|	ВТДанныеСтажаПФР КАК ДанныеОСтажеПоКатегориям
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеОВзносахВПФР.ФизическоеЛицо
	|ИЗ
	|	ВТВзносыВПФР КАК ДанныеОВзносахВПФР
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗаработке.ФизическоеЛицо
	|ИЗ
	|	ВТСведенияОЗаработке КАК СведенияОЗаработке
	|ГДЕ
	|	&УсловияЗаработок
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗаработке.ФизическоеЛицо
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработке
	|ГДЕ
	|	СведенияОЗаработке.Месяц > 0
	|	И (СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах <> 0
	|			ИЛИ СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах <> 0)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЗаработок", ТекстУсловияЗаработок);
	
	Запрос.Выполнить();
	
	
	МассивНеобходимыхКадровыхДанных = Новый Массив();
	МассивНеобходимыхКадровыхДанных.Добавить("Наименование");
	МассивНеобходимыхКадровыхДанных.Добавить("Фамилия");
	МассивНеобходимыхКадровыхДанных.Добавить("Имя");
	МассивНеобходимыхКадровыхДанных.Добавить("Отчество"); 
    МассивНеобходимыхКадровыхДанных.Добавить("СтраховойНомерПФР");
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		Запрос.УстановитьПараметр("Период", ПараметрыПолученияДанных.ДатаАктуальности);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗастрахованныеЛица.ФизическоеЛицо,
		|	&Период КАК Период
		|ПОМЕСТИТЬ ВТЗастрахованныеЛица
		|ИЗ
		|	ВТФизическиеЛицаИзДанныхУчета КАК ЗастрахованныеЛица
		|";			
		Запрос.Выполнить();			
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
									МенеджерВременныхТаблиц,
									"ВТЗастрахованныеЛица");
			
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, МассивНеобходимыхКадровыхДанных);
	Иначе
		КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(
			МенеджерВременныхТаблиц, 
			Истина, 
			ПараметрыОтбора.СписокФизическихЛиц,
			МассивНеобходимыхКадровыхДанных, 
			ПараметрыПолученияДанных.ДатаАктуальности);
	КонецЕсли;		
КонецПроцедуры	

Процедура СоздатьВТКадровыеДанныеФизическихЛицДоНачалаЭксплуатации(МенеджерВременныхТаблиц, Организация, НачалоПериода, ОкончаниеПериода) Экспорт
	ПерсонифицированныйУчетВнутренний.СоздатьВТКадровыеДанныеФизическихЛицДоНачалаЭксплуатации(МенеджерВременныхТаблиц, Организация, НачалоПериода, ОкончаниеПериода);
КонецПроцедуры

Процедура СоздатьВТСостояниеУволенных(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Год(ОтчетныйПериод) < 2015 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЛОЖЬ КАК СотрудникУволен,
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСостояниеУволенных
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК Сотрудники";
		
	Иначе
		
		Параметры = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
		Параметры.Организация = Организация;
		Параметры.ИмяВТФизическиеЛица = "ВТКадровыеДанныеФизическихЛиц";
		Параметры.НачалоПериода = НачалоМесяца(ОтчетныйПериод);
		Параметры.ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
		Параметры.КадровыеДанные = "ДатаУвольнения";
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Ложь, Параметры);
		
		Запрос.УстановитьПараметр("ОкончаниеПериода", Параметры.ОкончаниеПериода);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА МИНИМУМ(Сотрудники.ДатаУвольнения) ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		КОГДА МИНИМУМ(Сотрудники.ДатаУвольнения) = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЛОЖЬ
		|		КОГДА МИНИМУМ(Сотрудники.ДатаУвольнения) > &ОкончаниеПериода
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СотрудникУволен,
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСостояниеУволенных
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры	
	
Процедура СоздатьВТЗастрахованныеЛицаДляПачекСЗВ2013(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СоздатьВТКатегорииТипыДоговоровЗЛ(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);
	
	МассивНеобходимыхКадровыхДанных = Новый Массив();
	МассивНеобходимыхКадровыхДанных.Добавить("Наименование");
	МассивНеобходимыхКадровыхДанных.Добавить("Фамилия");
	МассивНеобходимыхКадровыхДанных.Добавить("Имя");
	МассивНеобходимыхКадровыхДанных.Добавить("Отчество"); 
    МассивНеобходимыхКадровыхДанных.Добавить("СтраховойНомерПФР");
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		Запрос.УстановитьПараметр("Период", ПараметрыПолученияДанных.ДатаАктуальности);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗастрахованныеЛица.ФизическоеЛицо,
		|	&Период КАК Период
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	ВТКатегорииТипыДоговоровЗЛ КАК ЗастрахованныеЛица
		|";			
		Запрос.Выполнить();			
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
									МенеджерВременныхТаблиц,
									"ВТФизическиеЛица");
			
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, МассивНеобходимыхКадровыхДанных);
	Иначе
		КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(
			МенеджерВременныхТаблиц, 
			Истина, 
			ПараметрыОтбора.СписокФизическихЛиц,
			МассивНеобходимыхКадровыхДанных, 
			ПараметрыПолученияДанных.ДатаАктуальности);
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КадровыеДанныеФизическихЛиц.ФизическоеЛицо,
	|	КадровыеДанныеФизическихЛиц.Наименование,
	|	КадровыеДанныеФизическихЛиц.Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество,
	|	КадровыеДанныеФизическихЛиц.СтраховойНомерПФР,
	|	ЕСТЬNULL(КатегорииТипыДоговоровЗЛДляПачекСЗВ.КатегорияЗастрахованныхЛиц, ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка)) КАК КатегорияЗастрахованныхЛиц,
	|	ЕСТЬNULL(КатегорииТипыДоговоровЗЛДляПачекСЗВ.ТипДоговора, ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)) КАК ТипДоговора
	|ПОМЕСТИТЬ ВТЗастрахованныеЛицаДляПачекСЗВ
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговоровЗЛ КАК КатегорииТипыДоговоровЗЛДляПачекСЗВ
	|		ПО КадровыеДанныеФизическихЛиц.ФизическоеЛицо = КатегорииТипыДоговоровЗЛДляПачекСЗВ.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТКатегорииТипыДоговоровЗЛ(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ЗначениеЗаполнено(ПараметрыОтбора.КатегорияЗастрахованныхЛиц)
		И ПараметрыОтбора.ТипДоговора <> Неопределено Тогда
		
		СоздатьВТКатегорииТипыДоговоровЗЛИзДанныхУчета(МенеджерВременныхТаблиц);
	ИначеЕсли (ПараметрыПолученияДанных.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ
		Или ПараметрыПолученияДанных.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ
		Или  ПараметрыПолученияДанных.НулевыеСведения)
		И ПараметрыПолученияДанных.ОбновляемыеДокументы <> Неопределено Тогда
		
		// Если мы обновляем корректирующие (отменяющие) или "нулевые" сведения
		// комплекте отчетности уже есть документы за этот период, то данные будем создавать только
		// по тем физическим лицам, категориям, типам договоров, которые есть в обновляемых документах.
		
		СоздатьВТКатегорииТипыДоговоровЗЛИзОбновляемыхДокументов(
			МенеджерВременныхТаблиц, 
			ОтчетныйПериод, 
			ПараметрыПолученияДанных.ОбновляемыеДокументы, 
			ПараметрыОтбора);
			
	ИначеЕсли ПараметрыПолученияДанных.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ 
			И ПараметрыПолученияДанных.КорректируемыеДокументы.Количество() > 0 Тогда		
		
		// Если мы создаем корректирующие (отменяющие) сведения
		// и в комплекте нет корректирующих документов за этот период, то данные будем создавать только
		// по тем физическим лицам, категориям, типам договоров, которые есть в корректируемых документах.

		СоздатьВТКатегорииТипыДоговоровЗЛИзКорректируемыхДокументов(
			МенеджерВременныхТаблиц, 
			ОтчетныйПериод, 
			ПараметрыПолученияДанных.КорректируемыеДокументы, 
			ПараметрыОтбора);
			
	ИначеЕсли ПараметрыПолученияДанных.НулевыеСведения Тогда
			
		// Если мы создаем "нулевые сведения" сведения
		// и в комплекте нет документов за этот период, то данные будем создавать только
		// по тем физическим лицам, категориям, типам договоров, которые есть в учетных данных,
		// но нет в корректируемых.
		
		СоздатьВТКатегорииТипыДоговоровЗЛДляНулевыхСведений(
			МенеджерВременныхТаблиц, 
			ОтчетныйПериод, 
			ПараметрыПолученияДанных.КорректируемыеДокументы, 
			ПараметрыОтбора);
			
	ИначеЕсли ПараметрыПолученияДанных.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		
		// Если мы создаем отменяющие" сведения
		// и в комплекте нет документов за этот период, то данные будем создавать только
		// по тем физическим лицам, категориям, типам договоров, которые есть в корректируемых документах,
		// и по которым в учетных данных нет сведений.
		СоздатьВТКатегорииТипыДоговоровЗЛДляОтменяющихСведений(
			МенеджерВременныхТаблиц, 
			ОтчетныйПериод, 
			ПараметрыПолученияДанных.КорректируемыеДокументы, 
			ПараметрыОтбора);		
	Иначе	
		СоздатьВТКатегорииТипыДоговоровЗЛИзДанныхУчета(МенеджерВременныхТаблиц);
	КонецЕсли;		
КонецПроцедуры	

Процедура СоздатьВТКатегорииТипыДоговоровЗЛИзОбновляемыхДокументов(МенеджерВременныхТаблиц, ОтчетныйПериод, ОбновляемыеДокументы, ПараметрыОтбора)	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОбновляемыеДокументы",  ОбновляемыеДокументы);
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	
	СоздатьВТКатегорииТипыДоговоровЗЛИзДанныхУчета(МенеджерВременныхТаблиц, "ВТКатегорииТипыДоговоровЗЛИзДанныхУчета");	
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	Сотрудники.Ссылка.ТипДоговора КАК ТипДоговора
	|ПОМЕСТИТЬ ВТКатегорииТипыДоговоровЗЛ
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&ОбновляемыеДокументы)
	|	И &УсловиеКатегория
	|	И &УсловиеТипДоговора
	|	И &УсловиеСотрудники
	|	И ВЫБОР
	|			КОГДА Сотрудники.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА Сотрудники.Ссылка.ОтчетныйПериод
	|			ИНАЧЕ Сотрудники.Ссылка.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&ОбновляемыеДокументы)
	|	И &УсловиеКатегория
	|	И &УсловиеСотрудники
	|	И ВЫБОР
	|			КОГДА Сотрудники.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА Сотрудники.Ссылка.ОтчетныйПериод
	|			ИНАЧЕ Сотрудники.Ссылка.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&ОбновляемыеДокументы)
	|	И &УсловиеКатегория
	|	И &УсловиеСотрудники
	|	И ВЫБОР
	|			КОГДА Сотрудники.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА Сотрудники.Ссылка.ОтчетныйПериод
	|			ИНАЧЕ Сотрудники.Ссылка.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.ФизическоеЛицо,
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.КатегорияЗастрахованныхЛиц,
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.ТипДоговора
	|ИЗ
	|	ВТКатегорииТипыДоговоровЗЛИзДанныхУчета КАК КатегорииТипыДоговоровЗЛИзДанныхУчета
	|ГДЕ
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.ФизическоеЛицо В (&СписокФизическихЛицДляАвтоОбновления)";
	
	Запрос.УстановитьПараметр("СписокФизическихЛицДляАвтоОбновления", ПараметрыОтбора.СписокФизическихЛицДляАвтоКорректировки);
		
	Если ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено Тогда
		ТекстУсловиеКатегория = "ИСТИНА";
	Иначе	
		ТекстУсловиеКатегория = "Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКатегория", ТекстУсловиеКатегория);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеТипДоговора = "ИСТИНА";
	Иначе	
		ТекстУсловиеТипДоговора = "Сотрудники.Ссылка.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипДоговора", ТекстУсловиеТипДоговора);
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		ТекстУсловиеСотрудники = "ИСТИНА";
	Иначе	
		ТекстУсловиеСотрудники = "Сотрудники.Сотрудник В (&СписокФизическихЛиц)";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудники", ТекстУсловиеСотрудники);

	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТКатегорииТипыДоговоровЗЛИзКорректируемыхДокументов(МенеджерВременныхТаблиц, ОтчетныйПериод, КорректируемыеДокументы, ПараметрыОтбора, ИмяВТРезультат = "ВТКатегорииТипыДоговоровЗЛ")	
	СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, КорректируемыеДокументы, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо,
	|	КорректируемыеДокументыПоЗастрахованнымЛицам.КатегорияЗастрахованныхЛиц,
	|	КорректируемыеДокументыПоЗастрахованнымЛицам.ТипДоговора
	|ПОМЕСТИТЬ ВТКатегорииТипыДоговоровЗЛ
	|ИЗ
	|	ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|ГДЕ
	|	КорректируемыеДокументыПоЗастрахованнымЛицам.ОтчетныйПериод = &ОтчетныйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКатегорииТипыДоговоровЗЛ", ИмяВТРезультат);
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТКатегорииТипыДоговоровЗЛИзДанныхУчета(МенеджерВременныхТаблиц, ИмяВТРезультат = "ВТКатегорииТипыДоговоровЗЛ")
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеОСтажеПоКатегориям.ФизическоеЛицо,
	|	ДанныеОСтажеПоКатегориям.КатегорияЗастрахованныхЛиц,
	|	ДанныеОСтажеПоКатегориям.ТипДоговора КАК ТипДоговора
	|ПОМЕСТИТЬ ВТКатегорииТипыДоговоровЗЛ
	|ИЗ
	|	ВТДанныеСтажаПФР КАК ДанныеОСтажеПоКатегориям
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДанныеОВзносахВПФР.ФизическоеЛицо,
	|	ДанныеОВзносахВПФР.КатегорияЗастрахованныхЛиц,
	|	ДанныеОВзносахВПФР.ТипДоговора
	|ИЗ
	|	ВТВзносыВПФР КАК ДанныеОВзносахВПФР
	|ГДЕ
	|	НЕ ДанныеОВзносахВПФР.ОтменяемыеСведения
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.ТипДоговора
	|ИЗ
	|	ВТСведенияОЗаработке КАК СведенияОЗаработке";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКатегорииТипыДоговоровЗЛ", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТКатегорииТипыДоговоровЗЛДляНулевыхСведений(МенеджерВременныхТаблиц, ОтчетныйПериод, КорректируемыеДокументы, ПараметрыОтбора)
	СоздатьВТКатегорииТипыДоговоровЗЛИзКорректируемыхДокументов(
		МенеджерВременныхТаблиц, 
		ОтчетныйПериод, 
		КорректируемыеДокументы, 
		ПараметрыОтбора, 
		"ВТКатегорииТипыДоговоровЗЛИзКорректируемыхПачек");	
		
	СоздатьВТКатегорииТипыДоговоровЗЛИзДанныхУчета(МенеджерВременныхТаблиц, "ВТКатегорииТипыДоговоровЗЛИзДанныхУчета");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.ФизическоеЛицо,
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.КатегорияЗастрахованныхЛиц,
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.ТипДоговора
	|ПОМЕСТИТЬ ВТКатегорииТипыДоговоровЗЛ
	|ИЗ
	|	ВТКатегорииТипыДоговоровЗЛИзДанныхУчета КАК КатегорииТипыДоговоровЗЛИзДанныхУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговоровЗЛИзКорректируемыхПачек КАК КатегорииТипыДоговоровЗЛИзКорректируемыхПачек
	|		ПО КатегорииТипыДоговоровЗЛИзДанныхУчета.ФизическоеЛицо = КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.ФизическоеЛицо
	|			И КатегорииТипыДоговоровЗЛИзДанныхУчета.КатегорияЗастрахованныхЛиц = КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.КатегорияЗастрахованныхЛиц
	|			И КатегорииТипыДоговоровЗЛИзДанныхУчета.ТипДоговора = КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.ТипДоговора
	|ГДЕ
	|	КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.ФизическоеЛицо ЕСТЬ NULL ";
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТКатегорииТипыДоговоровЗЛДляОтменяющихСведений(МенеджерВременныхТаблиц, ОтчетныйПериод, КорректируемыеДокументы, ПараметрыОтбора)
	СоздатьВТКатегорииТипыДоговоровЗЛИзКорректируемыхДокументов(
		МенеджерВременныхТаблиц, 
		ОтчетныйПериод, 
		КорректируемыеДокументы, 
		ПараметрыОтбора, 
		"ВТКатегорииТипыДоговоровЗЛИзКорректируемыхПачек");	
		
	СоздатьВТКатегорииТипыДоговоровЗЛИзДанныхУчета(МенеджерВременныхТаблиц, "ВТКатегорииТипыДоговоровЗЛИзДанныхУчета");	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.ФизическоеЛицо,
	|	КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.КатегорияЗастрахованныхЛиц,
	|	КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.ТипДоговора
	|ПОМЕСТИТЬ ВТКатегорииТипыДоговоровЗЛ
	|ИЗ
	|	ВТКатегорииТипыДоговоровЗЛИзКорректируемыхПачек КАК КатегорииТипыДоговоровЗЛИзКорректируемыхПачек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговоровЗЛИзДанныхУчета КАК КатегорииТипыДоговоровЗЛИзДанныхУчета
	|		ПО КатегорииТипыДоговоровЗЛИзДанныхУчета.ФизическоеЛицо = КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.ФизическоеЛицо
	|			И КатегорииТипыДоговоровЗЛИзДанныхУчета.КатегорияЗастрахованныхЛиц = КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.КатегорияЗастрахованныхЛиц
	|			И КатегорииТипыДоговоровЗЛИзДанныхУчета.ТипДоговора = КатегорииТипыДоговоровЗЛИзКорректируемыхПачек.ТипДоговора
	|			
	|ГДЕ
	|	КатегорииТипыДоговоровЗЛИзДанныхУчета.ФизическоеЛицо ЕСТЬ NULL ";
	
	Запрос.Выполнить();
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// Получение данных о стаже сотрудников для перс. учета

Функция ПараметрыДляСоздатьВТДанныеСтажаПФР() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИсточникДанныхОСтаже", ВариантыИсточниковДанныхСтажа().ДанныеУчета);
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("ВыделятьСтажПоДоговорамГПХ", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции	

Процедура СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода = Неопределено) Экспорт 
	Если ОтчетныйПериод >= '20140101' Тогда
		СоздатьВТДанныеСтажаПФР2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода);	
	Иначе
		СоздатьВТДанныеСтажаПФР2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода);	
	КонецЕсли;	
КонецПроцедуры

Процедура СоздатьВТДанныеСтажаПФР2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода = Неопределено)
	
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	
	ВыполнятьДопОбработкуЗаписейСтажа = Истина;

	Если ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета Тогда
		СоздатьВТЗаписиСтажаПоДаннымУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода);
		ИмяВТЗаписиСтажа = "ВТЗаписиСтажаПоДаннымУчетаТолькоЗастрахованные";	
	ИначеЕсли ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов Тогда 	
		СоздатьВТЗаписиСтажаПоДаннымУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода);
		СоздатьВТФиксированныеЗаписиСтажаИзДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);	
		СоздатьВТЗаписиСтажаСУчетомФиксДанныхДокументов(МенеджерВременныхТаблиц, "ВТЗаписиСтажаПоДаннымУчетаТолькоЗастрахованные");
		ИмяВТЗаписиСтажа = "ВТЗаписиСтажаСУчетомФиксДанныхДокументов";	
	ИначеЕсли ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеКорректируемыхДокументов Тогда
		СоздатьВТДанныеСтажаПФРИзДанныхКорректируемыхДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);	
		ВыполнятьДопОбработкуЗаписейСтажа = Ложь;
	ИначеЕсли ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеКорректируемыхДокументов Тогда 
		СоздатьВТЗаписиСтажаПоДаннымУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода);
		СоздатьВТФиксированныеЗаписиСтажаИзКорректируемыхДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);	
		СоздатьВТЗаписиСтажаСУчетомФиксДанныхДокументов(МенеджерВременныхТаблиц, "ВТЗаписиСтажаПоДаннымУчетаТолькоЗастрахованные");
		ИмяВТЗаписиСтажа = "ВТЗаписиСтажаСУчетомФиксДанныхДокументов";	
	Иначе
		ТекстИсключения = НСтр("ru = 'Не указан источник данных о стаже.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	Если ВыполнятьДопОбработкуЗаписейСтажа Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ЗаписиСтажа.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиСтажа.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка) КАК КатегорияЗастрахованныхЛиц,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
		|	ЗаписиСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиСтажа.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиСтажа.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиСтажа.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
		|	ЗаписиСтажа.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиСтажа.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиСтажа.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиСтажа.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиСтажа.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиСтажа.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиСтажа.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
		|	ЗаписиСтажа.ТерриториальныеУсловияДополнительные КАК ТерриториальныеУсловияДополнительные,
		|	ЗаписиСтажа.ФиксСтаж КАК ФиксСтаж,
		|	ЗаписиСтажа.ПрерываниеСтажа КАК ПрерываниеСтажа,
		|	ИСТИНА КАК СложныйСтаж
		|ПОМЕСТИТЬ ВТДанныеСтажаПФР
		|ИЗ
		|	#ВТЗаписиСтажа КАК ЗаписиСтажа";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТЗаписиСтажа", ИмяВТЗаписиСтажа);		
		
		Если ОтчетныйПериод < '20170101' Тогда 
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаписиСтажа.ЗамещениеГосударственныхМуниципальныхДолжностей", "ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка)");
		КонецЕсли;
		
		Запрос.Выполнить();
	КонецЕсли;	
		
КонецПроцедуры	

Процедура СоздатьВТДанныеСтажаПФР2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеОтчетногоПериода = Неопределено)
	
	Если ОкончаниеОтчетногоПериода = Неопределено Тогда
		ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ОтчетныйПериод);
	КонецЕсли;
	
	ВариантыИсточниковДанныхСтажа = ВариантыИсточниковДанныхСтажа();
	
	ВыполнятьДопОбработкуЗаписейСтажа = Истина;
	
	Если ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчета Тогда
		ПерсонифицированныйУчетВнутренний.СоздатьВТЗаписиСтажаПоДаннымУчета(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода, ПараметрыПолученияДанных, ПараметрыОтбора);
		ИмяВТЗаписиСтажа = "ВТЗаписиСтажаПоДаннымУчета";	
	ИначеЕсли ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеДокументов Тогда 	
		ПерсонифицированныйУчетВнутренний.СоздатьВТЗаписиСтажаПоДаннымУчета(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода, ПараметрыПолученияДанных, ПараметрыОтбора);
		СоздатьВТФиксированныеЗаписиСтажаИзДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);	
		СоздатьВТЗаписиСтажаСУчетомФиксДанныхДокументов(МенеджерВременныхТаблиц);
		ИмяВТЗаписиСтажа = "ВТЗаписиСтажаСУчетомФиксДанныхДокументов";	
	ИначеЕсли ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеКорректируемыхДокументов Тогда
		СоздатьВТДанныеСтажаПФРИзДанныхКорректируемыхДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);	
		ВыполнятьДопОбработкуЗаписейСтажа = Ложь;
	ИначеЕсли ПараметрыПолученияДанных.ИсточникДанныхОСтаже = ВариантыИсточниковДанныхСтажа.ДанныеУчетаИФиксированныеДанныеКорректируемыхДокументов Тогда 
		ПерсонифицированныйУчетВнутренний.СоздатьВТЗаписиСтажаПоДаннымУчета(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода, ПараметрыПолученияДанных, ПараметрыОтбора);
		СоздатьВТФиксированныеЗаписиСтажаИзКорректируемыхДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);	
		СоздатьВТЗаписиСтажаСУчетомФиксДанныхДокументов(МенеджерВременныхТаблиц);
		ИмяВТЗаписиСтажа = "ВТЗаписиСтажаСУчетомФиксДанныхДокументов";	
	Иначе
		ТекстИсключения = НСтр("ru = 'Не указан источник данных о стаже.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	Если ВыполнятьДопОбработкуЗаписейСтажа Тогда
		СоздатьВТДанныеСтажаПФРИзВТЗаписиСтажа(
			МенеджерВременныхТаблиц, 
			Организация, 
			ОтчетныйПериод,
			ОкончаниеОтчетногоПериода, 
			ИмяВТЗаписиСтажа, 
			ПараметрыОтбора);
			
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьВТЗаписиСтажаПоДаннымУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ОкончаниеПериода = Неопределено)
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ОтчетныйПериод);
	КонецЕсли;
	
	ПерсонифицированныйУчетВнутренний.СоздатьВТЗаписиСтажаПоДаннымУчета(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеПериода, ПараметрыПолученияДанных, ПараметрыОтбора);
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, ОтчетныйПериод, ОкончаниеПериода, "МЕСЯЦ"); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЗаписиСтажаПоДаннымУчета.ФизическоеЛицо,
	|	Периоды.Период
	|ПОМЕСТИТЬ ВТПериодыФизЛицОрганизаций
	|ИЗ
	|	ВТЗаписиСтажаПоДаннымУчета КАК ЗаписиСтажаПоДаннымУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (НАЧАЛОПЕРИОДА(ЗаписиСтажаПоДаннымУчета.ДатаНачалаПериода, МЕСЯЦ) <= Периоды.Период)
	|			И (КОНЕЦПЕРИОДА(ЗаписиСтажаПоДаннымУчета.ДатаОкончанияПериода, МЕСЯЦ) >= Периоды.Период)";
	
	Запрос.Выполнить();
	
	УчетСтраховыхВзносов.СформироватьВТДанныеОПравахНаСтрахование(МенеджерВременныхТаблиц, "ВТПериодыФизЛицОрганизаций", Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОПравахНаСтрахование.ГоловнаяОрганизация,
	|	ДанныеОПравахНаСтрахование.ФизическоеЛицо,
	|	ДанныеОПравахНаСтрахование.Период
	|ПОМЕСТИТЬ ВТМесяцыВключаемыеВСтаж
	|ИЗ
	|	ВТДанныеОПравахНаСтрахование КАК ДанныеОПравахНаСтрахование
	|ГДЕ
	|	ДанныеОПравахНаСтрахование.ЗастрахованПФР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериодыФизЛицОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОПравахНаСтрахование";
	
	Запрос.Выполнить();
	
	СоздатьВТИнтервалыПоТаблицеДат(МенеджерВременныхТаблиц, "ВТМесяцыВключаемыеВСтаж", "Месяц", "ФизическоеЛицо, ГоловнаяОрганизация", "ВТПериодыВключаемыеСтаж");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеСтажаПФР.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеСтажаПФР.ДатаНачалаПериода < ПериодыВключаемыеСтаж.ДатаНачалаИнтервала
	|			ТОГДА ПериодыВключаемыеСтаж.ДатаНачалаИнтервала
	|		ИНАЧЕ ДанныеСтажаПФР.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДанныеСтажаПФР.ДатаОкончанияПериода > ПериодыВключаемыеСтаж.ДатаОкончанияИнтервала
	|			ТОГДА ПериодыВключаемыеСтаж.ДатаОкончанияИнтервала
	|		ИНАЧЕ ДанныеСтажаПФР.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	ДанныеСтажаПФР.ТипДоговора,
	|	ДанныеСтажаПФР.ОсобыеУсловияТруда,
	|	ДанныеСтажаПФР.КодПозицииСписка,
	|	ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ОснованиеВыслугиЛет,
	|	ДанныеСтажаПФР.ТерриториальныеУсловия,
	|	ДанныеСтажаПФР.ПараметрТерриториальныхУсловий,
	|	ДанныеСтажаПФР.ТретийПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ОснованиеИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ПервыйПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ВторойПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ПервыйПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ВторойПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ВЫБОР
	|		КОГДА ДанныеСтажаПФР.ДатаНачалаПериода < ДАТАВРЕМЯ(2019, 1, 1)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка)
	|		ИНАЧЕ ДанныеСтажаПФР.ТерриториальныеУсловияДополнительные
	|	КОНЕЦ КАК ТерриториальныеУсловияДополнительные,
	|	ДанныеСтажаПФР.ФиксСтаж,
	|	ДанныеСтажаПФР.ПрерываниеСтажа,
	|	ДанныеСтажаПФР.СложныйСтаж
	|ПОМЕСТИТЬ ВТЗаписиСтажаПоДаннымУчетаТолькоЗастрахованные
	|ИЗ
	|	ВТЗаписиСтажаПоДаннымУчета КАК ДанныеСтажаПФР
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыВключаемыеСтаж КАК ПериодыВключаемыеСтаж
	|		ПО (ДанныеСтажаПФР.ФизическоеЛицо = ПериодыВключаемыеСтаж.ФизическоеЛицо
	|					И ПериодыВключаемыеСтаж.ДатаНачалаИнтервала <= ДанныеСтажаПФР.ДатаНачалаПериода
	|					И ПериодыВключаемыеСтаж.ДатаОкончанияИнтервала >= ДанныеСтажаПФР.ДатаНачалаПериода
	|				ИЛИ ДанныеСтажаПФР.ФизическоеЛицо = ПериодыВключаемыеСтаж.ФизическоеЛицо
	|					И ПериодыВключаемыеСтаж.ДатаНачалаИнтервала <= ДанныеСтажаПФР.ДатаОкончанияПериода
	|					И ПериодыВключаемыеСтаж.ДатаОкончанияИнтервала >= ДанныеСтажаПФР.ДатаОкончанияПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТМесяцыВключаемыеВСтаж
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериодыВключаемыеСтаж";

	Запрос.Выполнить();	
КонецПроцедуры	

Процедура СоздатьВТДанныеСтажаПФРИзДанныхКорректируемыхДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора)
	
	СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.КорректируемыеДокументы, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияДанных.КорректируемыеДокументы);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник КАК ФизическоеЛицо,
	|	ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка) КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ИСТИНА КАК СложныйСтаж,
	|	СотрудникиДокумента.ФиксСтаж КАК ФиксСтаж
	|ПОМЕСТИТЬ ВТДанныеСтажаПФР
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_1.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ОснованияИсчисляемогоСтраховогоСтажа.ПустаяСсылка),
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка),
	|	0,
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка),
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка),
	|	ЛОЖЬ,
	|	СотрудникиДокумента.ФиксСтаж
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСЗВ_6_2.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗаписиОСтаже.Ссылка.ТипДоговора,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка),
	|	ИСТИНА,
	|	СотрудникиДокумента.ФиксСтаж
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка),
	|	ИСТИНА,
	|	СотрудникиДокумента.ФиксСтаж
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам";
		
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТФиксированныеЗаписиСтажаИзДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияДанных.УчитываемыеДокументы);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТИсправленныеДокументыСтажаПоСотрудникам
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&УчитываемыеДокументы)
	|	И СотрудникиДокумента.ФиксСтаж
	|	И &УсловиеОтбораФизическихЛиц
	|	И ВЫБОР
	|			КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|				ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|			ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.Ссылка
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&УчитываемыеДокументы)
	|	И СотрудникиДокумента.ФиксСтаж
	|	И &УсловиеОтбораФизическихЛиц
	|	И ВЫБОР
	|			КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|				ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|			ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.Ссылка
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&УчитываемыеДокументы)
	|	И СотрудникиДокумента.ФиксСтаж
	|	И &УсловиеОтбораФизическихЛиц
	|	И ВЫБОР
	|			КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|				ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|			ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.Ссылка
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&УчитываемыеДокументы)
	|	И СотрудникиДокумента.ФиксСтаж
	|	И &УсловиеОтбораФизическихЛиц
	|	И ВЫБОР
	|			КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|				ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|			ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник КАК ФизическоеЛицо,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка) КАК ЗамещениеГосударственныхМуниципальныхДолжностей
	|ПОМЕСТИТЬ ВТФиксированныеЗаписиСтажаИзДокументов
	|ИЗ
	|	ВТИсправленныеДокументыСтажаПоСотрудникам КАК ИсправленныеДокументыСтажаПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_1.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО ИсправленныеДокументыСтажаПоСотрудникам.Ссылка = ЗаписиОСтаже.Ссылка
	|			И ИсправленныеДокументыСтажаПоСотрудникам.Сотрудник = ЗаписиОСтаже.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ОснованияИсчисляемогоСтраховогоСтажа.ПустаяСсылка),
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка),
	|	0,
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка),
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка)
	|ИЗ
	|	ВТИсправленныеДокументыСтажаПоСотрудникам КАК ИсправленныеДокументыСтажаПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСЗВ_6_2.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО ИсправленныеДокументыСтажаПоСотрудникам.Ссылка = ЗаписиОСтаже.Ссылка
	|			И ИсправленныеДокументыСтажаПоСотрудникам.Сотрудник = ЗаписиОСтаже.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ЗаписиОСтаже.Ссылка.ТипДоговора,
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка)
	|ИЗ
	|	ВТИсправленныеДокументыСтажаПоСотрудникам КАК ИсправленныеДокументыСтажаПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО ИсправленныеДокументыСтажаПоСотрудникам.Ссылка = ЗаписиОСтаже.Ссылка
	|			И ИсправленныеДокументыСтажаПоСотрудникам.Сотрудник = ЗаписиОСтаже.Сотрудник
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка)
	|ИЗ
	|	ВТИсправленныеДокументыСтажаПоСотрудникам КАК ИсправленныеДокументыСтажаПоСотрудникам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО ИсправленныеДокументыСтажаПоСотрудникам.Ссылка = ЗаписиОСтаже.Ссылка
	|			И ИсправленныеДокументыСтажаПоСотрудникам.Сотрудник = ЗаписиОСтаже.Сотрудник";
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		ТекстУсловияОтбора = "ИСТИНА";
	Иначе
		ТекстУсловияОтбора = "СотрудникиДокумента.Сотрудник В (&СписокФизическихЛиц)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораФизическихЛиц", ТекстУсловияОтбора);	
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТФиксированныеЗаписиСтажаИзКорректируемыхДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора)
	
	СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.КорректируемыеДокументы, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияДанных.КорректируемыеДокументы);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаСФиксСтажем
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиДокумента.Сотрудник
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник КАК ФизическоеЛицо,
	|	ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ИСТИНА КАК СложныйСтаж,
	|	ИСТИНА КАК ФиксСтаж
	|ПОМЕСТИТЬ ВТДанныеСтажаПФР
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСФиксСтажем КАК ФизическиеЛицаСФиксСтажем
	|		ПО СотрудникиДокумента.Сотрудник = ФизическиеЛицаСФиксСтажем.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_1.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТрудаПФР.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ОснованияИсчисляемогоСтраховогоСтажа.ПустаяСсылка),
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка),
	|	0,
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка),
	|	0,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСФиксСтажем КАК ФизическиеЛицаСФиксСтажем
	|		ПО СотрудникиДокумента.Сотрудник = ФизическиеЛицаСФиксСтажем.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСЗВ_6_2.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗаписиОСтаже.Ссылка.ТипДоговора,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ИСТИНА,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСФиксСтажем КАК ФизическиеЛицаСФиксСтажем
	|		ПО СотрудникиДокумента.Сотрудник = ФизическиеЛицаСФиксСтажем.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиОСтаже.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ИСТИНА,
	|	ИСТИНА
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСФиксСтажем КАК ФизическиеЛицаСФиксСтажем
	|		ПО СотрудникиДокумента.Сотрудник = ФизическиеЛицаСФиксСтажем.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
	|		ПО СотрудникиДокумента.Ссылка = КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
	|			И СотрудникиДокумента.Сотрудник = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
	|			И (СотрудникиДокумента.ФиксСтаж)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ЗаписиОСтаже
	|		ПО СотрудникиДокумента.Ссылка = ЗаписиОСтаже.Ссылка
	|			И СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
	|			И (ВЫБОР
	|				КОГДА ЗаписиОСтаже.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ЗаписиОСтаже.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ЗаписиОСтаже.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам";
		
	Запрос.Выполнить();

КонецПроцедуры

Процедура СоздатьВТЗаписиСтажаСУчетомФиксДанныхДокументов(МенеджерВременныхТаблиц, ИмяВТЗаписиСтажа = "ВТЗаписиСтажаПоДаннымУчета")
	
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФиксированныеЗаписиСтажаИзДокументов.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаСФиксСтажем
	|ИЗ
	|	ВТФиксированныеЗаписиСтажаИзДокументов КАК ФиксированныеЗаписиСтажаИзДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗаписиСтажа.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиСтажа.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиСтажа.ТипДоговора КАК ТипДоговора,
	|	ЗаписиСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиСтажа.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ЗаписиСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиСтажа.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
	|	ЗаписиСтажа.ТерриториальныеУсловияДополнительные КАК ТерриториальныеУсловияДополнительные,
	|	ЗаписиСтажа.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
	|	ЗаписиСтажа.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиСтажа.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиСтажа.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиСтажа.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ЗаписиСтажа.ПрерываниеСтажа КАК ПрерываниеСтажа,
	|	ЛОЖЬ КАК ФиксСтаж
	|ПОМЕСТИТЬ ВТЗаписиСтажаСУчетомФиксДанныхДокументов
	|ИЗ
	|	ВТЗаписиСтажаПоДаннымУчета КАК ЗаписиСтажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛицаСФиксСтажем КАК ФизическиеЛицаСФиксСтажем
	|		ПО ЗаписиСтажа.ФизическоеЛицо = ФизическиеЛицаСФиксСтажем.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛицаСФиксСтажем.ФизическоеЛицо ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФиксированныеЗаписиСтажаИзДокументов.ФизическоеЛицо,
	|	ФиксированныеЗаписиСтажаИзДокументов.ДатаНачалаПериода,
	|	ФиксированныеЗаписиСтажаИзДокументов.ДатаОкончанияПериода,
	|	ФиксированныеЗаписиСтажаИзДокументов.ТипДоговора,
	|	ФиксированныеЗаписиСтажаИзДокументов.ОсобыеУсловияТруда,
	|	ФиксированныеЗаписиСтажаИзДокументов.КодПозицииСписка,
	|	ФиксированныеЗаписиСтажаИзДокументов.ТретийПараметрИсчисляемогоСтажа,
	|	ФиксированныеЗаписиСтажаИзДокументов.ОснованиеВыслугиЛет,
	|	ФиксированныеЗаписиСтажаИзДокументов.ТерриториальныеУсловия,
	|	ФиксированныеЗаписиСтажаИзДокументов.ПараметрТерриториальныхУсловий,
	|	ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловияПФР.ПустаяСсылка),
	|	ФиксированныеЗаписиСтажаИзДокументов.ТретийПараметрВыслугиЛет,
	|	ФиксированныеЗаписиСтажаИзДокументов.ОснованиеИсчисляемогоСтажа,
	|	ФиксированныеЗаписиСтажаИзДокументов.ПервыйПараметрИсчисляемогоСтажа,
	|	ФиксированныеЗаписиСтажаИзДокументов.ВторойПараметрИсчисляемогоСтажа,
	|	ФиксированныеЗаписиСтажаИзДокументов.ПервыйПараметрВыслугиЛет,
	|	ФиксированныеЗаписиСтажаИзДокументов.ВторойПараметрВыслугиЛет,
	|	ФиксированныеЗаписиСтажаИзДокументов.ЗамещениеГосударственныхМуниципальныхДолжностей,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	ВТФиксированныеЗаписиСтажаИзДокументов КАК ФиксированныеЗаписиСтажаИзДокументов";
	 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТЗаписиСтажаПоДаннымУчета", ИмяВТЗаписиСтажа);

	Запрос.Выполнить();
	
КонецПроцедуры	

Функция СоздатьВТДанныеСтажаПФРИзВТЗаписиСтажа(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ОкончаниеПериода, ИмяВТИсточникаДанных, ПараметрыОтбора)
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(МенеджерВременныхТаблиц, ОтчетныйПериод, ОкончаниеПериода);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	
	СоздатьВТКатегорииЗастрахованныхЛиц(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ИмяВТИсточникаДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСтажа.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ТаблицаСтажа.ДатаНачалаПериода < НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|			ТОГДА НАЧАЛОПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|		ИНАЧЕ ТаблицаСтажа.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ТаблицаСтажа.ДатаОкончанияПериода < КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ)
	|			ТОГДА ТаблицаСтажа.ДатаОкончанияПериода
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Периоды.Период, МЕСЯЦ), ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	Периоды.Период КАК МесяцОтчетногоПериода,
	|	ВЫБОР
	|		КОГДА Периоды.Период < ДАТАВРЕМЯ(2013, 1, 1)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаСтажа.ТипДоговора
	|	КОНЕЦ КАК ТипДоговора,
	|	ТаблицаСтажа.ОсобыеУсловияТруда,
	|	ТаблицаСтажа.КодПозицииСписка,
	|	ТаблицаСтажа.ОснованиеИсчисляемогоСтажа,
	|	ТаблицаСтажа.ПервыйПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ВторойПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ОснованиеВыслугиЛет,
	|	ТаблицаСтажа.ПервыйПараметрВыслугиЛет,
	|	ТаблицаСтажа.ВторойПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТретийПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТерриториальныеУсловия,
	|	ТаблицаСтажа.ПараметрТерриториальныхУсловий,
	|	ТаблицаСтажа.ФиксСтаж,
	|	Периоды.Период
	|ПОМЕСТИТЬ ВТСтажПоМесяцам
	|ИЗ
	|	#ДанныеОСтаже КАК ТаблицаСтажа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериоды КАК Периоды
	|		ПО (Периоды.Период МЕЖДУ НАЧАЛОПЕРИОДА(ТаблицаСтажа.ДатаНачалаПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(ТаблицаСтажа.ДатаОкончанияПериода, МЕСЯЦ))
	|			И (&УсловиеТипДоговора)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	МесяцОтчетногоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтажПоМесяцам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СтажПоМесяцам.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	СтажПоМесяцам.ДатаОкончанияПериода,
	|	СтажПоМесяцам.МесяцОтчетногоПериода,
	|	СтажПоМесяцам.ОсобыеУсловияТруда,
	|	СтажПоМесяцам.КодПозицииСписка,
	|	СтажПоМесяцам.ОснованиеИсчисляемогоСтажа,
	|	СтажПоМесяцам.ПервыйПараметрИсчисляемогоСтажа,
	|	СтажПоМесяцам.ВторойПараметрИсчисляемогоСтажа,
	|	СтажПоМесяцам.ТретийПараметрИсчисляемогоСтажа,
	|	СтажПоМесяцам.ОснованиеВыслугиЛет,
	|	СтажПоМесяцам.ПервыйПараметрВыслугиЛет,
	|	СтажПоМесяцам.ВторойПараметрВыслугиЛет,
	|	СтажПоМесяцам.ТретийПараметрВыслугиЛет,
	|	СтажПоМесяцам.ТерриториальныеУсловия,
	|	СтажПоМесяцам.ПараметрТерриториальныхУсловий,
	|	СтажПоМесяцам.ФиксСтаж,
	|	СтажПоМесяцам.Период,
	|	КатегорииЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СтажПоМесяцам.ТипДоговора
	|ИЗ
	|	ВТСтажПоМесяцам КАК СтажПоМесяцам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииЗастрахованныхЛиц КАК КатегорииЗастрахованныхЛиц
	|		ПО СтажПоМесяцам.ФизическоеЛицо = КатегорииЗастрахованныхЛиц.ФизическоеЛицо
	|			И СтажПоМесяцам.МесяцОтчетногоПериода = КатегорииЗастрахованныхЛиц.Период
	|			И (&УсловиеКатегория)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	КатегорияЗастрахованныхЛиц,
	|	СтажПоМесяцам.ТипДоговора,
	|	ДатаНачалаПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоответствиеТарифаИВидаЗЛКатегории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКатегорииЗастрахованныхЛиц";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ДанныеОСтаже", ИмяВТИсточникаДанных);
	
	Если ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено Тогда
		ТекстУсловияКатегория = "ИСТИНА";
	Иначе
		ТекстУсловияКатегория = "КатегорииЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКатегория", ТекстУсловияКатегория);	
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловияТипДоговора = "ИСТИНА";
	Иначе
		ТекстУсловияТипДоговора = "ТаблицаСтажа.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипДоговора", ТекстУсловияТипДоговора);	
	
	Результаты = Запрос.ВыполнитьПакет();
	
	КоличествоРезультатов = Результаты.Количество();
	
	ТаблицаСтажа = Результаты[КоличествоРезультатов - 3].Выгрузить();
	
	ТаблицаСтажа.Колонки.Добавить("СложныйСтаж", Новый ОписаниеТипов("Булево"));
	
	Сч = ТаблицаСтажа.Количество() - 1;
	Пока Сч > 0 Цикл
		
		ТекущаяЗапись = ТаблицаСтажа[Сч];
		ПредшествующаяЗапись = ТаблицаСтажа[Сч - 1];
		
		Если ТекущаяЗапись.ФизическоеЛицо = ПредшествующаяЗапись.ФизическоеЛицо // если совпадает физлицо
			И ТекущаяЗапись.КатегорияЗастрахованныхЛиц = ПредшествующаяЗапись.КатегорияЗастрахованныхЛиц
			И ТекущаяЗапись.ТипДоговора = ПредшествующаяЗапись.ТипДоговора
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И ТекущаяЗапись.КодПозицииСписка = ПредшествующаяЗапись.КодПозицииСписка
			И ТекущаяЗапись.ОснованиеИсчисляемогоСтажа = ПредшествующаяЗапись.ОснованиеИсчисляемогоСтажа
			И ТекущаяЗапись.ПервыйПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ПервыйПараметрИсчисляемогоСтажа
            И ТекущаяЗапись.ВторойПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ВторойПараметрИсчисляемогоСтажа
            И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ПервыйПараметрВыслугиЛет = ПредшествующаяЗапись.ПервыйПараметрВыслугиЛет
            И ТекущаяЗапись.ВторойПараметрВыслугиЛет = ПредшествующаяЗапись.ВторойПараметрВыслугиЛет
            И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий Тогда
			
			Если ТекущаяЗапись.ДатаНачалаПериода = ПредшествующаяЗапись.ДатаОкончанияПериода + 86400
				ИЛИ ТекущаяЗапись.ДатаНачалаПериода = ПредшествующаяЗапись.ДатаОкончанияПериода Тогда 
			
				ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
				Если ТекущаяЗапись.ФиксСтаж Тогда
					ПредшествующаяЗапись.ФиксСтаж = Истина;
				КонецЕсли;	
				ТаблицаСтажа.Удалить(ТекущаяЗапись);
				ОбрабатываемаяСтрока = ПредшествующаяЗапись;
			Иначе
				ОбрабатываемаяСтрока = ТекущаяЗапись;
			КонецЕсли;
				
		Иначе
			ОбрабатываемаяСтрока = ТекущаяЗапись;
		КонецЕсли;
		
		ОбрабатываемаяСтрока.СложныйСтаж = ЗаписьСодержитСложныйСтаж(ОбрабатываемаяСтрока);	

		Сч = Сч - 1;
	КонецЦикла;
	
	Если ТаблицаСтажа.Количество() > 0 Тогда
		ТаблицаСтажа[0].СложныйСтаж = ЗаписьСодержитСложныйСтаж(ТаблицаСтажа[0]);
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ТаблицаСтажа", ТаблицаСтажа);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*	
	|ПОМЕСТИТЬ ВТДанныеСтажаПФР
	|ИЗ
	|	&ТаблицаСтажа КАК ТаблицаСтажа";
	
	Запрос.Выполнить();
	
КонецФункции		

Процедура СоздатьВТДосрочноеНазначениеПенсииДляСЗВ_СТАЖ(МенеджерВременныхТаблиц, Организация, Год, ЗаписиОСтаже) Экспорт 
	
	ПерсонифицированныйУчетВнутренний.СоздатьВТДосрочноеНазначениеПенсииДляСЗВ_СТАЖ(МенеджерВременныхТаблиц, Организация, Год, ЗаписиОСтаже);	
	
КонецПроцедуры

Процедура СоздатьВТЗамещениеГосударственныхДолжностей(МенеджерВременныхТаблиц) Экспорт 
	
	ПерсонифицированныйУчетВнутренний.СоздатьВТЗамещениеГосударственныхДолжностей(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДосрочногоНазначенияПенсии(Объект, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода) Экспорт 
	
	ПерсонифицированныйУчетВнутренний.ЗаполнитьДанныеДосрочногоНазначенияПенсии(Объект, Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Получение данных о взносах в ПФР

Функция ПараметрыДляСоздатьВТВзносыВПФР() Экспорт
	СтруктураПараметров = Новый Структура;
	
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	
	СтруктураПараметров.Вставить("ИсточникДанныхИсчисленныхВзносов", ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("ИсточникДанныхУплаченныхВзносов", ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчета);
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("ДатаАктуальности", ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("СпециальныйДокумент2015года", Ложь);
	
	Возврат СтруктураПараметров;
КонецФункции	

Процедура СоздатьВТВзносыВПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора) Экспорт
	Если ОтчетныйПериод >= '20140101' Тогда
		СоздатьВТВзносыВПФР2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора);
	Иначе
		СоздатьВТВзносыВПФР2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора);
	КонецЕсли;	
КонецПроцедуры

Процедура СоздатьВТВзносыВПФР2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора) 
	
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВТПромежуточный = Новый МенеджерВременныхТаблиц;
	
	Если ПараметрыПолученияВзносов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчета Тогда
		
		СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчета2014(МенеджерВТПромежуточный, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора);	
		
	ИначеЕсли ПараметрыПолученияВзносов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов Тогда			
		
		СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчета2014(
				МенеджерВТПромежуточный, 
				Организация,
				ОтчетныйПериод, 
				ПараметрыПолученияВзносов, 
				ПараметрыОтбора, 
				"ВТИсчисленныеВзносыВПФРПоДаннымУчета");
				
		СоздатьВТФиксированныеВзносыИзДокументов(МенеджерВТПромежуточный, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора.СписокФизическихЛиц);
		
		СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчетаИФиксДанныхДокументов(МенеджерВТПромежуточный);		
	
	ИначеЕсли ПараметрыПолученияВзносов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеДокументов Тогда
		
		СоздатьВТИсчисленныеВзносыВПФРИзДанныхДокументов(
			МенеджерВТПромежуточный, 
			ОтчетныйПериод, 
			ПараметрыПолученияВзносов.УчитываемыеДокументы, 
			ПараметрыОтбора.СписокФизическихЛиц);
		
	ИначеЕсли ПараметрыПолученияВзносов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеКорректируемыхДокументов Тогда
			
		СоздатьВТИсчисленныеВзносыВПФРИзДанныхКорректируемыхДокументов(
		 	МенеджерВТПромежуточный, 
			ОтчетныйПериод, 
			ПараметрыПолученияВзносов,
			ПараметрыОтбора.СписокФизическихЛиц);	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТПромежуточный;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсчисленныеВзносыВПФР.ФизическоеЛицо,
	|	ИсчисленныеВзносыВПФР.НачисленоСтраховая,
	|	ИсчисленныеВзносыВПФР.КатегорияЗастрахованныхЛиц,
	|	ИсчисленныеВзносыВПФР.ТипДоговора,
	|	ИсчисленныеВзносыВПФР.ФиксНачисленныеВзносы,
	|	ИсчисленныеВзносыВПФР.ФиксДоНачисленныеВзносы,
	|	ИсчисленныеВзносыВПФР.ДоначисленоСтраховая
	|ИЗ
	|	ВТИсчисленныеВзносыВПФР КАК ИсчисленныеВзносыВПФР";
	
	ТаблицаВзносов = Запрос.Выполнить().Выгрузить();
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаВзносов", ТаблицаВзносов);	
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	ТаблицаВзносов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка) КАК КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|	0 КАК УплаченоНакопительная,
	|	0 КАК УплаченоСтраховая,
	|	ТаблицаВзносов.НачисленоСтраховая КАК НачисленоСтраховая,
	|	0 КАК НачисленоНакопительная,
	|	ЛОЖЬ КАК ФиксУплаченныеВзносы,
	|	ТаблицаВзносов.ФиксНачисленныеВзносы КАК ФиксНачисленныеВзносы,
	|	ЛОЖЬ КАК ФиксДоУплаченныеВзносы,
	|	ТаблицаВзносов.ФиксДоНачисленныеВзносы КАК ФиксДоНачисленныеВзносы,
	|	ТаблицаВзносов.ДоначисленоСтраховая,
	|	0 КАК ДоначисленоНакопительная,
	|	0 КАК ДоуплаченоСтраховая,
	|	0 КАК ДоуплаченоНакопительная,
	|	ЛОЖЬ КАК ОтменяемыеСведения
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	&ТаблицаВзносов КАК ТаблицаВзносов";
	
	ИмяВТРезультат = ?(ПараметрыПолученияВзносов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, "ВТВзносыВПФР", "ВТСуммыВзносов");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
	
	Запрос.Выполнить();
	
	Если ПараметрыПолученияВзносов.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		СоздатьВТВзносыВПФРДляКорректирующихСведений(
			МенеджерВременныхТаблиц, 
			Организация,  
			ОтчетныйПериод,
			ПараметрыПолученияВзносов.ТипСведенийСЗВ,
			ПараметрыОтбора);				
	КонецЕсли;		
КонецПроцедуры 

Процедура СоздатьВТВзносыВПФР2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора) 
	
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВТПромежуточный = Новый МенеджерВременныхТаблиц;
		
	Если ПараметрыПолученияВзносов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеДокументов Тогда
		// получим данные об исчисленных взносах в ПФР из документов
		
		СоздатьВТИсчисленныеВзносыВПФРИзДанныхДокументов(
			МенеджерВТПромежуточный, 
			ОтчетныйПериод, 
			ПараметрыПолученияВзносов.УчитываемыеДокументы);
		
		// Если уплаченные взносы необходимо распределять по данным ИБ, получим зафиксированные данные из документов и 
		// и задолженность по уплаченным взносам по сотрудникам из по которым есть данные в документах.
		Если ПараметрыПолученияВзносов.ИсточникДанныхУплаченныхВзносов <> ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеКорректируемыхДокументов Тогда
			СоздатьВТФиксированныеВзносыИзДокументов(МенеджерВТПромежуточный, ОтчетныйПериод, ПараметрыПолученияВзносов);
			
			СоздатьВТОстаткиРасчетовСПФРПоСотрудникамИзВременнойТаблицы(
				МенеджерВТПромежуточный, 
				Организация, 
				ОтчетныйПериод, 
				ПараметрыПолученияВзносов.УчитываемыеДокументы,
				"ВТИсчисленныеВзносыВПФР");
		КонецЕсли;	
	ИначеЕсли ПараметрыПолученияВзносов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеКорректируемыхДокументов Тогда
		 СоздатьВТИсчисленныеВзносыВПФРИзДанныхКорректируемыхДокументов(
		 	МенеджерВТПромежуточный, 
			ОтчетныйПериод, 
			ПараметрыПолученияВзносов);	
	Иначе	
		// получим данные по исчисленным взносам по данным учета
			
		Если ПараметрыПолученияВзносов.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов Тогда
			// Если необходимо учитывать фикс. данные в документах получим данные об исчисленных взносах из данных учета
			// и объединим их с зафиксированными данными по исчисленным взносам.
			
			СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчета2013(
				МенеджерВТПромежуточный, 
				Организация,
				ОтчетныйПериод, 
				ПараметрыПолученияВзносов, 
				ПараметрыОтбора, 
				"ВТИсчисленныеВзносыВПФРПоДаннымУчета");
				
			СоздатьВТФиксированныеВзносыИзДокументов(МенеджерВТПромежуточный, ОтчетныйПериод, ПараметрыПолученияВзносов);
			
			СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчетаИФиксДанныхДокументов(МенеджерВТПромежуточный);
		Иначе
			СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчета2013(МенеджерВТПромежуточный, Организация, ОтчетныйПериод, ПараметрыПолученияВзносов, ПараметрыОтбора);
			СоздатьВТФиксированныеВзносыИзДокументов(МенеджерВТПромежуточный, ОтчетныйПериод, ПараметрыПолученияВзносов);
		КонецЕсли;	
		
		СоздатьВТОстаткиРасчетовСПФР(
				МенеджерВТПромежуточный, 
				Организация, 
				ОтчетныйПериод, 
				ПараметрыПолученияВзносов.УчитываемыеДокументы);		
	КонецЕсли;	
	
	Если ПараметрыПолученияВзносов.НулевыеСведения Тогда
		ДанныеОВзносах = ВзносыДляНулевыхСведений(МенеджерВТПромежуточный);
	ИначеЕсли ПараметрыПолученияВзносов.ИсточникДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеКорректируемыхДокументов Тогда	
		ДанныеОВзносах = ВзносыПоДаннымКорректирующихДокументов(
							МенеджерВТПромежуточный,
							Организация, 
							ОтчетныйПериод, 
							ПараметрыПолученияВзносов);							
	Иначе		
		ДанныеОВзносах = ВзносыПоДаннымУчета(
							МенеджерВТПромежуточный,
							Организация, 
							ОтчетныйПериод, 
							ПараметрыПолученияВзносов);
	КонецЕсли;							
	
	ЗапросРезультат = Новый Запрос;
	ЗапросРезультат.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросРезультат.УстановитьПараметр("ДанныеОВзносах", ДанныеОВзносах);
	ЗапросРезультат.УстановитьПараметр("МассивФизлиц", ПараметрыОтбора.СписокФизическихЛиц);
	ЗапросРезультат.УстановитьПараметр("НеОтбиратьФизЛиц", ПараметрыОтбора.СписокФизическихЛиц = Неопределено);
	ЗапросРезультат.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	ЗапросРезультат.УстановитьПараметр("НеОтбиратьПоКатегориям", ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено);
	ЗапросРезультат.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	ЗапросРезультат.УстановитьПараметр("НеОтбиратьПоТипамДоговоров", ПараметрыОтбора.ТипДоговора = Неопределено);
	
	НулевыеСведения = ПараметрыПолученияВзносов.НулевыеСведения Или ПараметрыПолученияВзносов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ;
	
	ЗапросРезультат.УстановитьПараметр("НулевыеСведения", ПараметрыПолученияВзносов.НулевыеСведения);

	ЗапросРезультат.Текст = 
	"ВЫБРАТЬ
	|	РасчетСумм.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетСумм.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	РасчетСумм.ТипДоговора КАК ТипДоговора,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСумм.УплаченоНакопительная
	|	КОНЕЦ КАК УплаченоНакопительная,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСумм.УплаченоСтраховая
	|	КОНЕЦ КАК УплаченоСтраховая,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСумм.НачисленоСтраховая
	|	КОНЕЦ КАК НачисленоСтраховая,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА 0
	|		ИНАЧЕ РасчетСумм.НачисленоНакопительная
	|	КОНЕЦ КАК НачисленоНакопительная,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РасчетСумм.ФиксУплаченныеВзносы
	|	КОНЕЦ КАК ФиксУплаченныеВзносы,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РасчетСумм.ФиксНачисленныеВзносы
	|	КОНЕЦ КАК ФиксНачисленныеВзносы,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РасчетСумм.ФиксДоУплаченныеВзносы
	|	КОНЕЦ КАК ФиксДоУплаченныеВзносы,
	|	ВЫБОР
	|		КОГДА &НулевыеСведения
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ РасчетСумм.ФиксДоНачисленныеВзносы
	|	КОНЕЦ КАК ФиксДоНачисленныеВзносы,
	|	РасчетСумм.ДоначисленоСтраховая,
	|	РасчетСумм.ДоначисленоНакопительная,
	|	РасчетСумм.ДоуплаченоСтраховая,
	|	РасчетСумм.ДоуплаченоНакопительная,
	|	ЛОЖЬ КАК ОтменяемыеСведения
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	&ДанныеОВзносах КАК РасчетСумм
	|ГДЕ
	|	(&НеОтбиратьФизЛиц
	|			ИЛИ РасчетСумм.ФизическоеЛицо В (&МассивФизлиц))
	|	И (&НеОтбиратьПоКатегориям
	|			ИЛИ РасчетСумм.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц)
	|	И (&НеОтбиратьПоТипамДоговоров
	|			ИЛИ РасчетСумм.ТипДоговора = &ТипДоговора)";
	
	ИмяВТРезультат = ?(ПараметрыПолученияВзносов.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, "ВТВзносыВПФР", "ВТСуммыВзносов");
	ЗапросРезультат.Текст = СтрЗаменить(ЗапросРезультат.Текст, "ВТРезультат", ИмяВТРезультат);
	
	ЗапросРезультат.Выполнить();
	
	Если ПараметрыПолученияВзносов.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		СоздатьВТВзносыВПФРДляКорректирующихСведений(
			МенеджерВременныхТаблиц, 
			Организация,  
			ОтчетныйПериод,
			ПараметрыПолученияВзносов.ТипСведенийСЗВ,
			ПараметрыОтбора);				
	КонецЕсли;		
КонецПроцедуры 

Процедура СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ИмяВТРезультат = "ВТИсчисленныеВзносыВПФР")
	Запрос = Новый Запрос;
	
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
	
	ЭтоИсходныеСведения = (ПараметрыПолученияДанных.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);	
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		МенеджерВременныхТаблиц = УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(ОтчетныйПериод, ОкончаниеПериода, Организация, , Истина, Истина, Истина,,,,,,, ЭтоИсходныеСведения); 	
	Иначе
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ФизЛица", ПараметрыОтбора.СписокФизическихЛиц);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	&Организация КАК Организация,
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизЛица)";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(ОтчетныйПериод, ОкончаниеПериода, Организация, МенеджерВременныхТаблиц, Истина, Истина, Истина,,,,,,, ЭтоИсходныеСведения);
	КонецЕсли;		
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТФизЛицаОрганизаций";
	Запрос.Выполнить();

	Запрос.УстановитьПараметр("ОтчетныйГод", Год(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасширенныеСведенияОДоходахИВзносах.ФизическоеЛицо,
	|	СУММА(РасширенныеСведенияОДоходахИВзносах.ПФРПоСуммарномуТарифу) КАК НачисленоСтраховая,
	|	0 КАК НачисленоНакопительная,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка) КАК КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|	ЛОЖЬ КАК ФиксНачисленныеВзносы,
	|	ЛОЖЬ КАК ФиксДоНачисленныеВзносы,
	|	0 КАК ДоначисленоНакопительная,
	|	0 КАК ДоначисленоСтраховая,
	|	0 КАК ДоуплаченоСтраховая,
	|	0 КАК ДоуплаченоНакопительная
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	ВТРасширенныеСведенияОДоходахИВзносах КАК РасширенныеСведенияОДоходахИВзносах
	|ГДЕ
	|	РасширенныеСведенияОДоходахИВзносах.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	РасширенныеСведенияОДоходахИВзносах.ФизическоеЛицо
	|
	|ИМЕЮЩИЕ
	|	СУММА(РасширенныеСведенияОДоходахИВзносах.ПФРПоСуммарномуТарифу) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазмерыТарифныхСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОбИнвалидности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИспользуемыеТарифы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОписаниеТарифов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРасширенныеСведенияОДоходахИВзносах";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
		
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчета2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора, ИмяВТРезультат = "ВТИсчисленныеВзносыВПФР")
	Запрос = Новый Запрос;
	
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);

	ЭтоИсходныеСведения = (ПараметрыПолученияДанных.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	
	МенеджерВременныхТаблиц = УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(ОтчетныйПериод, ОкончаниеПериода, Организация, , Истина, Истина, Истина,,,,,,, ЭтоИсходныеСведения); 		
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ВТФизЛицаОрганизаций";
	Запрос.Выполнить();

	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(МенеджерВременныхТаблиц);
	Запрос.УстановитьПараметр("ОтчетныйГод", Год(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("ТарифМоряков", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ"));
	Запрос.УстановитьПараметр("СписокНестрахуемыхДоходов", СписокНестрахуемыхВидовДохода());
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахИВзносах.ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.НачислятьНакопительнуюЧасть,
	|	СведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходахИВзносах.ВидЗастрахованногоЛица,
	|	СведенияОДоходахИВзносах.ТипДоговора КАК ТипДоговора,
	|	СУММА(СведенияОДоходахИВзносах.ОблагаемаяБазаПФР) КАК ОблагаемаяБазаПФР
	|ПОМЕСТИТЬ ВТДоходыМоряков
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходахИВзносах.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОДоходахИВзносах.НачислятьНакопительнуюЧасть КАК НачислятьНакопительнуюЧасть,
	|		СведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходахИВзносах.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
	|		ВЫБОР
	|			КОГДА &ОтчетныйГод > 2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|		КОНЕЦ КАК ТипДоговора,
	|		СведенияОДоходахИВзносах.БазаПФРПоТрудовомуДоговору - СведенияОДоходахИВзносах.СуммаПревысившаяПределПФРПоТрудовомуДоговору КАК ОблагаемаяБазаПФР
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходахИВзносах
	|	ГДЕ
	|		СведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов = &ТарифМоряков
	|		И НЕ СведенияОДоходахИВзносах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|		И СведенияОДоходахИВзносах.БазаПФР - СведенияОДоходахИВзносах.СуммаПревысившаяПределПФР <> 0
	|		И СведенияОДоходахИВзносах.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОДоходахИВзносах.ФизическоеЛицо,
	|		СведенияОДоходахИВзносах.НачислятьНакопительнуюЧасть,
	|		СведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходахИВзносах.ВидЗастрахованногоЛица,
	|		ВЫБОР
	|			КОГДА &ОтчетныйГод > 2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|		КОНЕЦ,
	|		СведенияОДоходахИВзносах.БазаПФР - СведенияОДоходахИВзносах.БазаПФРПоТрудовомуДоговору - (СведенияОДоходахИВзносах.СуммаПревысившаяПределПФР - СведенияОДоходахИВзносах.СуммаПревысившаяПределПФРПоТрудовомуДоговору)
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходахИВзносах КАК СведенияОДоходахИВзносах
	|	ГДЕ
	|		СведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов = &ТарифМоряков
	|		И НЕ СведенияОДоходахИВзносах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|		И СведенияОДоходахИВзносах.БазаПФР - СведенияОДоходахИВзносах.СуммаПревысившаяПределПФР <> 0
	|		И СведенияОДоходахИВзносах.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода) КАК СведенияОДоходахИВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходахИВзносах.ФизическоеЛицо,
	|	СведенияОДоходахИВзносах.НачислятьНакопительнуюЧасть,
	|	СведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходахИВзносах.ВидЗастрахованногоЛица,
	|	СведенияОДоходахИВзносах.ТипДоговора
	|
	|ИМЕЮЩИЕ
	|	СУММА(СведенияОДоходахИВзносах.ОблагаемаяБазаПФР) <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасширенныеСведенияОДоходахИВзносах.ФизическоеЛицо,
	|	СУММА(РасширенныеСведенияОДоходахИВзносах.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(РасширенныеСведенияОДоходахИВзносах.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	РасширенныеСведенияОДоходахИВзносах.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	РасширенныеСведенияОДоходахИВзносах.ТипДоговора КАК ТипДоговора,
	|	ЛОЖЬ КАК ФиксНачисленныеВзносы,
	|	ЛОЖЬ КАК ФиксДоНачисленныеВзносы,
	|	0 КАК ДоначисленоСтраховая,
	|	0 КАК ДоначисленоНакопительная,
	|	0 КАК ДоуплаченоСтраховая,
	|	0 КАК ДоуплаченоНакопительная
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасширенныеСведенияОДоходахИВзносах.ФизическоеЛицо КАК ФизическоеЛицо,
	|		РасширенныеСведенияОДоходахИВзносах.ПФРСтраховаяПоТрудовомуДоговору КАК НачисленоСтраховая,
	|		РасширенныеСведенияОДоходахИВзносах.ПФРНакопительнаяПоТрудовомуДоговору КАК НачисленоНакопительная,
	|		СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		ВЫБОР
	|			КОГДА &ОтчетныйГод > 2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|		КОНЕЦ КАК ТипДоговора
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходахИВзносах КАК РасширенныеСведенияОДоходахИВзносах
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|			ПО РасширенныеСведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|				И РасширенныеСведенияОДоходахИВзносах.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	|				И (&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
	|	ГДЕ
	|		РасширенныеСведенияОДоходахИВзносах.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасширенныеСведенияОДоходахИВзносах.ФизическоеЛицо,
	|		РасширенныеСведенияОДоходахИВзносах.ПФРСтраховая - РасширенныеСведенияОДоходахИВзносах.ПФРСтраховаяПоТрудовомуДоговору,
	|		РасширенныеСведенияОДоходахИВзносах.ПФРНакопительная - РасширенныеСведенияОДоходахИВзносах.ПФРНакопительнаяПоТрудовомуДоговору,
	|		СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
	|		ВЫБОР
	|			КОГДА &ОтчетныйГод > 2012
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|		КОНЕЦ
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходахИВзносах КАК РасширенныеСведенияОДоходахИВзносах
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|			ПО РасширенныеСведенияОДоходахИВзносах.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|				И РасширенныеСведенияОДоходахИВзносах.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	|				И (&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
	|	ГДЕ
	|		РасширенныеСведенияОДоходахИВзносах.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДоходыМоряков.ФизическоеЛицо,
	|		ВЫРАЗИТЬ(ДоходыМоряков.ОблагаемаяБазаПФР * (РазмерыТарифныхСтавок.ПФР - ВЫБОР
	|				КОГДА ДоходыМоряков.НачислятьНакопительнуюЧасть
	|					ТОГДА РазмерыТарифныхСтавок.ПФРНакопительная
	|				ИНАЧЕ 0
	|			КОНЕЦ) / 100 КАК ЧИСЛО(15, 2)),
	|		ВЫРАЗИТЬ(ДоходыМоряков.ОблагаемаяБазаПФР * ВЫБОР
	|				КОГДА ДоходыМоряков.НачислятьНакопительнуюЧасть
	|					ТОГДА РазмерыТарифныхСтавок.ПФРНакопительная
	|				ИНАЧЕ 0
	|			КОНЕЦ / 100 КАК ЧИСЛО(15, 2)),
	|		СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
	|		ДоходыМоряков.ТипДоговора
	|	ИЗ
	|		ВТДоходыМоряков КАК ДоходыМоряков
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыТарифныхСтавок КАК РазмерыТарифныхСтавок
	|			ПО (РазмерыТарифныхСтавок.ВидТарифа = &ОбщийНалоговыйРежим)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ДоходыМоряков.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|			ПО ДоходыМоряков.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|				И ДоходыМоряков.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	|				И (&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)) КАК РасширенныеСведенияОДоходахИВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	РасширенныеСведенияОДоходахИВзносах.ФизическоеЛицо,
	|	РасширенныеСведенияОДоходахИВзносах.КатегорияЗастрахованныхЛиц,
	|	РасширенныеСведенияОДоходахИВзносах.ТипДоговора
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасширенныеСведенияОДоходахИВзносах.НачисленоСтраховая) <> 0
	|		ИЛИ СУММА(РасширенныеСведенияОДоходахИВзносах.НачисленоНакопительная) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоответствиеТарифаИВидаЗЛКатегории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазмерыТарифныхСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОбИнвалидности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИспользуемыеТарифы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОписаниеТарифов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРасширенныеСведенияОДоходахИВзносах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДоходыМоряков";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);
		
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТФиксированныеВзносыИзДокументов(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, СписокФизическихЛиц = Неопределено)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	ВариантыИсточниковДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов();
	
	ФиксНачисленныеВзносы = ПараметрыПолученияДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов;
	ФиксУплаченныеВзносы = ПараметрыПолученияДанных.ИсточникДанныхУплаченныхВзносов = ВариантыИсточниковДанныхУплаченныхВзносов.ДанныеУчетаИФиксированныеДанныеДокументов; 
	
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияДанных.УчитываемыеДокументы);
	Запрос.УстановитьПараметр("ФиксНачисленныеВзносы", ФиксНачисленныеВзносы);
	Запрос.УстановитьПараметр("ФиксУплаченныеВзносы", ФиксУплаченныеВзносы);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
		
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФиксированныеВзносы.ФизическоеЛицо,
	|	ФиксированныеВзносы.КатегорияЗастрахованныхЛиц,
	|	СУММА(ФиксированныеВзносы.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(ФиксированныеВзносы.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(ФиксированныеВзносы.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	СУММА(ФиксированныеВзносы.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	МАКСИМУМ(ФиксированныеВзносы.ФиксНачисленныеВзносы) КАК ФиксНачисленныеВзносы,
	|	МАКСИМУМ(ФиксированныеВзносы.ФиксУплаченныеВзносы) КАК ФиксУплаченныеВзносы,
	|	МАКСИМУМ(ФиксированныеВзносы.ФиксНачисленныеВзносы) КАК ФиксДоНачисленныеВзносы,
	|	МАКСИМУМ(ФиксированныеВзносы.ФиксУплаченныеВзносы) КАК ФиксДоУплаченныеВзносы,
	|	ФиксированныеВзносы.ТипДоговора,
	|	СУММА(ФиксированныеВзносы.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(ФиксированныеВзносы.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	СУММА(ФиксированныеВзносы.ДоУплаченоНакопительная) КАК ДоУплаченоНакопительная,
	|	СУММА(ФиксированныеВзносы.ДоУплаченоСтраховая) КАК ДоУплаченоСтраховая
	|ПОМЕСТИТЬ ВТФиксированныеВзносыИзДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеДокумента.Сотрудник КАК ФизическоеЛицо,
	|		ДанныеДокумента.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		ДанныеДокумента.НачисленоСтраховая КАК НачисленоСтраховая,
	|		ДанныеДокумента.УплаченоСтраховая КАК УплаченоСтраховая,
	|		ДанныеДокумента.НачисленоНакопительная КАК НачисленоНакопительная,
	|		ДанныеДокумента.УплаченоНакопительная КАК УплаченоНакопительная,
	|		ДанныеДокумента.ФиксНачисленныеВзносы КАК ФиксНачисленныеВзносы,
	|		ДанныеДокумента.ФиксУплаченныеВзносы КАК ФиксУплаченныеВзносы,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|		ДанныеДокумента.ДоначисленоСтраховая КАК ДоначисленоСтраховая,
	|		ДанныеДокумента.ДоначисленоНакопительная КАК ДоначисленоНакопительная,
	|		ДанныеДокумента.ДоУплаченоНакопительная КАК ДоУплаченоНакопительная,
	|		ДанныеДокумента.ДоУплаченоСтраховая КАК ДоУплаченоСтраховая
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В(&УчитываемыеДокументы)
	|		И &УсловиеСотрудник
	|		И ВЫБОР
	|				КОГДА ДанныеДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|					ТОГДА ДанныеДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|				ИНАЧЕ ДанныеДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|			КОНЕЦ
	|		И (ДанныеДокумента.ФиксНачисленныеВзносы
	|					И &ФиксНачисленныеВзносы
	|				ИЛИ ДанныеДокумента.ФиксУплаченныеВзносы
	|					И &ФиксУплаченныеВзносы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Сотрудник,
	|		ДанныеДокумента.Ссылка.КатегорияЗастрахованныхЛиц,
	|		ДанныеДокумента.НачисленоСтраховая,
	|		ДанныеДокумента.УплаченоСтраховая,
	|		ДанныеДокумента.НачисленоНакопительная,
	|		ДанныеДокумента.УплаченоНакопительная,
	|		ДанныеДокумента.ФиксНачисленныеВзносы,
	|		ДанныеДокумента.ФиксУплаченныеВзносы,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|		ДанныеДокумента.ДоначисленоСтраховая,
	|		ДанныеДокумента.ДоначисленоНакопительная,
	|		ДанныеДокумента.ДоУплаченоНакопительная,
	|		ДанныеДокумента.ДоУплаченоСтраховая
	|	ИЗ
	|		Документ.РеестрСЗВ_6_2.Сотрудники КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В(&УчитываемыеДокументы)
	|		И &УсловиеСотрудник
	|		И ВЫБОР
	|				КОГДА ДанныеДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|					ТОГДА ДанныеДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|				ИНАЧЕ ДанныеДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|			КОНЕЦ
	|		И (ДанныеДокумента.ФиксНачисленныеВзносы
	|					И &ФиксНачисленныеВзносы
	|				ИЛИ ДанныеДокумента.ФиксУплаченныеВзносы
	|					И &ФиксУплаченныеВзносы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Сотрудник,
	|		ДанныеДокумента.Ссылка.КатегорияЗастрахованныхЛиц,
	|		ДанныеДокумента.НачисленоСтраховая,
	|		ДанныеДокумента.УплаченоСтраховая,
	|		ДанныеДокумента.НачисленоНакопительная,
	|		ДанныеДокумента.УплаченоНакопительная,
	|		ДанныеДокумента.ФиксНачисленныеВзносы,
	|		ДанныеДокумента.ФиксУплаченныеВзносы,
	|		ДанныеДокумента.Ссылка.ТипДоговора,
	|		ДанныеДокумента.ДоначисленоСтраховая,
	|		ДанныеДокумента.ДоначисленоНакопительная,
	|		ДанныеДокумента.ДоУплаченоНакопительная,
	|		ДанныеДокумента.ДоУплаченоСтраховая
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В(&УчитываемыеДокументы)
	|		И &УсловиеСотрудник
	|		И ВЫБОР
	|				КОГДА ДанныеДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|					ТОГДА ДанныеДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|				ИНАЧЕ ДанныеДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|			КОНЕЦ
	|		И (ДанныеДокумента.ФиксНачисленныеВзносы
	|					И &ФиксНачисленныеВзносы
	|				ИЛИ ДанныеДокумента.ФиксУплаченныеВзносы
	|					И &ФиксУплаченныеВзносы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Сотрудник,
	|		ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|		ДанныеДокумента.НачисленоСтраховая,
	|		0,
	|		0,
	|		0,
	|		ДанныеДокумента.ФиксНачисленныеВзносы,
	|		ЛОЖЬ,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|		ДанныеДокумента.ДоначисленоСтраховая,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В(&УчитываемыеДокументы)
	|		И &УсловиеСотрудник
	|		И ВЫБОР
	|				КОГДА ДанныеДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(перечисление.ТипыСведенийСЗв.ИСХОДНАЯ)
	|					ТОГДА ДанныеДокумента.Ссылка.ОтчетныйПериод = &ОтчетныйПериод
	|				ИНАЧЕ ДанныеДокумента.Ссылка.КорректируемыйПериод = &ОтчетныйПериод
	|			КОНЕЦ
	|		И ДанныеДокумента.ФиксНачисленныеВзносы
	|		И &ФиксНачисленныеВзносы) КАК ФиксированныеВзносы
	|
	|СГРУППИРОВАТЬ ПО
	|	ФиксированныеВзносы.ФизическоеЛицо,
	|	ФиксированныеВзносы.КатегорияЗастрахованныхЛиц,
	|	ФиксированныеВзносы.ТипДоговора";
	
	Если Не ФиксНачисленныеВзносы 
		И Не ФиксУплаченныеВзносы Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 0", "ВЫБРАТЬ ПЕРВЫЕ 0");
	КонецЕсли;	
	
	Если СписокФизическихЛиц = Неопределено Тогда
		ТекстУсловияСотрудник = "ИСТИНА";
	Иначе
		ТекстУсловияСотрудник = "ДанныеДокумента.Сотрудник В (&СписокФизическихЛиц)"
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудник", ТекстУсловияСотрудник);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТИсчисленныеВзносыВПФРИзДанныхУчетаИФиксДанныхДокументов(МенеджерВременныхТаблиц)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсчисленныеВзносы.ФизическоеЛицо,
	|	ИсчисленныеВзносы.НачисленоСтраховая,
	|	ИсчисленныеВзносы.НачисленоНакопительная,
	|	ИсчисленныеВзносы.ДоНачисленоСтраховая,
	|	ИсчисленныеВзносы.ДоНачисленоНакопительная,
	|	ИсчисленныеВзносы.КатегорияЗастрахованныхЛиц,
	|	ИсчисленныеВзносы.ТипДоговора,
	|	ИсчисленныеВзносы.ФиксНачисленныеВзносы,
	|	ИсчисленныеВзносы.ФиксНачисленныеВзносы КАК ФиксДоНачисленныеВзносы
	|ПОМЕСТИТЬ ВТИсчисленныеВзносыВПФР
	|ИЗ
	|	ВТИсчисленныеВзносыВПФРПоДаннымУчета КАК ИсчисленныеВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированныеВзносыИзДокументов КАК ФиксированныеВзносыИзДокументов
	|		ПО ИсчисленныеВзносы.ФизическоеЛицо = ФиксированныеВзносыИзДокументов.ФизическоеЛицо
	|			И ИсчисленныеВзносы.КатегорияЗастрахованныхЛиц = ФиксированныеВзносыИзДокументов.КатегорияЗастрахованныхЛиц
	|			И ИсчисленныеВзносы.ТипДоговора = ФиксированныеВзносыИзДокументов.ТипДоговора
	|			И (ФиксированныеВзносыИзДокументов.ФиксНачисленныеВзносы)
	|ГДЕ
	|	ФиксированныеВзносыИзДокументов.ФизическоеЛицо ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФиксированныеВзносыИзДокументов.ФизическоеЛицо,
	|	ФиксированныеВзносыИзДокументов.НачисленоСтраховая,
	|	ФиксированныеВзносыИзДокументов.НачисленоНакопительная,
	|	ФиксированныеВзносыИзДокументов.ДоНачисленоСтраховая,
	|	ФиксированныеВзносыИзДокументов.ДоНачисленоНакопительная,
	|	ФиксированныеВзносыИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ФиксированныеВзносыИзДокументов.ТипДоговора,
	|	ФиксированныеВзносыИзДокументов.ФиксНачисленныеВзносы,
	|	ФиксированныеВзносыИзДокументов.ФиксНачисленныеВзносы
	|ИЗ
	|	ВТФиксированныеВзносыИзДокументов КАК ФиксированныеВзносыИзДокументов
	|ГДЕ
	|	ФиксированныеВзносыИзДокументов.ФиксНачисленныеВзносы";

	Запрос.Выполнить();
КонецПроцедуры
	
Процедура СоздатьВТИсчисленныеВзносыВПФРИзДанныхДокументов(МенеджерВременныхТаблиц, ОтчетныйПериод, УчитываемыеДокументы, СписокФизическихЛиц = Неопределено)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	СоздатьВТДанныеОВзносахИзДокументов(МенеджерВременныхТаблиц, УчитываемыеДокументы, ОтчетныйПериод, Ложь, Неопределено, СписокФизическихЛиц);
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо,
	|	ДанныеОНачисленныхВзносахИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеОНачисленныхВзносахИзДокументов.ТипДоговора,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	МАКСИМУМ(ДанныеОНачисленныхВзносахИзДокументов.ФиксНачисленныеВзносы) КАК ФиксНачисленныеВзносы,
	|	МАКСИМУМ(ДанныеОНачисленныхВзносахИзДокументов.ФиксНачисленныеВзносы) КАК ФиксДоНачисленныеВзносы
	|ПОМЕСТИТЬ ВТИсчисленныеВзносыВПФР
	|ИЗ
	|	ВТДанныеОВзносахИзДокументов КАК ДанныеОНачисленныхВзносахИзДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо,
	|	ДанныеОНачисленныхВзносахИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеОНачисленныхВзносахИзДокументов.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОВзносахИзДокументов";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТИсчисленныеВзносыВПФРИзДанныхКорректируемыхДокументов(МенеджерВременныхТаблиц, ОтчетныйПериод, ПараметрыПолученияДанных, СписокФизическихЛиц = Неопределено)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыОтбора = СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокФизическихЛиц;
	
	СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.КорректируемыеДокументы, ПараметрыОтбора);
	
	СоздатьВТДанныеОВзносахИзДокументов(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.КорректируемыеДокументы, ОтчетныйПериод, Ложь);
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо,
	|	ДанныеОНачисленныхВзносахИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеОНачисленныхВзносахИзДокументов.ТипДоговора,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	МАКСИМУМ(ДанныеОНачисленныхВзносахИзДокументов.ФиксНачисленныеВзносы) КАК ФиксНачисленныеВзносы,
	|	МАКСИМУМ(ДанныеОНачисленныхВзносахИзДокументов.ФиксНачисленныеВзносы) КАК ФиксДоНачисленныеВзносы
	|ПОМЕСТИТЬ ВТИсчисленныеВзносыВПФР
	|ИЗ
	|	ВТДанныеОВзносахИзДокументов КАК ДанныеОНачисленныхВзносахИзДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров
	|		ПО ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.ФизическоеЛицо
	|			И ДанныеОНачисленныхВзносахИзДокументов.Ссылка = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо,
	|	ДанныеОНачисленныхВзносахИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеОНачисленныхВзносахИзДокументов.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОВзносахИзДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТДанныеОВзносахИзДокументов(МенеджерВременныхТаблиц, СписокДокументов, РасчетныйПериод, ВключатьДанныеЗаПредыдущиеПериоды, ДополнительныйОтбор = Неопределено, СписокФизическихЛиц = Неопределено)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.УстановитьПараметр("РасчетныйПериод", РасчетныйПериод);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОВзносах.ФизическоеЛицо,
	|	ДанныеОВзносах.КатегорияЗастрахованныхЛиц,
	|	СУММА(ДанныеОВзносах.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(ДанныеОВзносах.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	СУММА(ДанныеОВзносах.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(ДанныеОВзносах.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	ДанныеОВзносах.ТипДоговора,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксУплаченныеВзносы) КАК ФиксУплаченныеВзносы,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксНачисленныеВзносы) КАК ФиксНачисленныеВзносы,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксУплаченныеВзносы) КАК ФиксДоУплаченныеВзносы,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксНачисленныеВзносы) КАК ФиксДоНачисленныеВзносы,
	|	СУММА(ДанныеОВзносах.ДоначисленоСтраховая) КАК ДоначисленоСтраховая,
	|	СУММА(ДанныеОВзносах.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
	|	СУММА(ДанныеОВзносах.ДоУплаченоНакопительная) КАК ДоУплаченоНакопительная,
	|	СУММА(ДанныеОВзносах.ДоУплаченоСтраховая) КАК ДоУплаченоСтраховая,
	|	ДанныеОВзносах.Ссылка
	|ПОМЕСТИТЬ ВТДанныеОВзносахИзДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеОВзносахДокумента.Сотрудник КАК ФизическоеЛицо,
	|		ДанныеОВзносахДокумента.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		ДанныеОВзносахДокумента.НачисленоСтраховая КАК НачисленоСтраховая,
	|		ДанныеОВзносахДокумента.НачисленоНакопительная КАК НачисленоНакопительная,
	|		ДанныеОВзносахДокумента.УплаченоСтраховая КАК УплаченоСтраховая,
	|		ДанныеОВзносахДокумента.УплаченоНакопительная КАК УплаченоНакопительная,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|		ДанныеОВзносахДокумента.ФиксУплаченныеВзносы КАК ФиксУплаченныеВзносы,
	|		ДанныеОВзносахДокумента.ФиксНачисленныеВзносы КАК ФиксНачисленныеВзносы,
	|		ДанныеОВзносахДокумента.ДоначисленоСтраховая КАК ДоначисленоСтраховая,
	|		ДанныеОВзносахДокумента.ДоначисленоНакопительная КАК ДоначисленоНакопительная,
	|		ДанныеОВзносахДокумента.ДоУплаченоНакопительная КАК ДоУплаченоНакопительная,
	|		ДанныеОВзносахДокумента.ДоУплаченоСтраховая КАК ДоУплаченоСтраховая,
	|		ДанныеОВзносахДокумента.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ДанныеОВзносахДокумента
	|	ГДЕ
	|		ДанныеОВзносахДокумента.Ссылка В(&СписокДокументов)
	|		И &УсловиеСотрудник
	|		И &УсловиеОтчетныйПериод
	|		И &УсловиеДополнительныйОтбор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОВзносахДокумента.Сотрудник,
	|		ДанныеОВзносахДокумента.Ссылка.КатегорияЗастрахованныхЛиц,
	|		ДанныеОВзносахДокумента.НачисленоСтраховая,
	|		ДанныеОВзносахДокумента.НачисленоНакопительная,
	|		ДанныеОВзносахДокумента.УплаченоСтраховая,
	|		ДанныеОВзносахДокумента.УплаченоНакопительная,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|		ДанныеОВзносахДокумента.ФиксУплаченныеВзносы,
	|		ДанныеОВзносахДокумента.ФиксНачисленныеВзносы,
	|		ДанныеОВзносахДокумента.ДоначисленоСтраховая,
	|		ДанныеОВзносахДокумента.ДоначисленоНакопительная,
	|		ДанныеОВзносахДокумента.ДоУплаченоНакопительная,
	|		ДанныеОВзносахДокумента.ДоУплаченоСтраховая,
	|		ДанныеОВзносахДокумента.Ссылка
	|	ИЗ
	|		Документ.РеестрСЗВ_6_2.Сотрудники КАК ДанныеОВзносахДокумента
	|	ГДЕ
	|		ДанныеОВзносахДокумента.Ссылка В(&СписокДокументов)
	|		И &УсловиеСотрудник
	|		И &УсловиеОтчетныйПериод
	|		И &УсловиеДополнительныйОтбор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОВзносахДокумента.Сотрудник,
	|		ДанныеОВзносахДокумента.Ссылка.КатегорияЗастрахованныхЛиц,
	|		ДанныеОВзносахДокумента.НачисленоСтраховая,
	|		ДанныеОВзносахДокумента.НачисленоНакопительная,
	|		ДанныеОВзносахДокумента.УплаченоСтраховая,
	|		ДанныеОВзносахДокумента.УплаченоНакопительная,
	|		ДанныеОВзносахДокумента.Ссылка.ТипДоговора,
	|		ДанныеОВзносахДокумента.ФиксУплаченныеВзносы,
	|		ДанныеОВзносахДокумента.ФиксНачисленныеВзносы,
	|		ДанныеОВзносахДокумента.ДоначисленоСтраховая,
	|		ДанныеОВзносахДокумента.ДоначисленоНакопительная,
	|		ДанныеОВзносахДокумента.ДоУплаченоНакопительная,
	|		ДанныеОВзносахДокумента.ДоУплаченоСтраховая,
	|		ДанныеОВзносахДокумента.Ссылка
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ДанныеОВзносахДокумента
	|	ГДЕ
	|		ДанныеОВзносахДокумента.Ссылка В(&СписокДокументов)
	|		И &УсловиеСотрудник
	|		И &УсловиеОтчетныйПериод
	|		И &УсловиеДополнительныйОтбор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеОВзносахДокумента.Сотрудник,
	|		ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|		ДанныеОВзносахДокумента.НачисленоСтраховая,
	|		0,
	|		0,
	|		0,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|		ЛОЖЬ,
	|		ДанныеОВзносахДокумента.ФиксНачисленныеВзносы,
	|		ДанныеОВзносахДокумента.ДоначисленоСтраховая,
	|		0,
	|		0,
	|		0,
	|		ДанныеОВзносахДокумента.Ссылка
	|	ИЗ
	|		Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ДанныеОВзносахДокумента
	|	ГДЕ
	|		ДанныеОВзносахДокумента.Ссылка В(&СписокДокументов)
	|		И &УсловиеСотрудник
	|		И &УсловиеОтчетныйПериод
	|		И &УсловиеДополнительныйОтбор) КАК ДанныеОВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВзносах.ФизическоеЛицо,
	|	ДанныеОВзносах.КатегорияЗастрахованныхЛиц,
	|	ДанныеОВзносах.ТипДоговора,
	|	ДанныеОВзносах.Ссылка";
		
	ВидСравненияРасчетныйПериод = ?(ВключатьДанныеЗаПредыдущиеПериоды, ">=", "=");
	
	ТекстУсловияРасчетныйПериод = "				 (&РасчетныйПериод " + ВидСравненияРасчетныйПериод + " ВЫБОР
	|	КОГДА ДанныеОВзносахДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|		ТОГДА ДанныеОВзносахДокумента.Ссылка.ОтчетныйПериод
	|	ИНАЧЕ ДанныеОВзносахДокумента.Ссылка.КорректируемыйПериод
	|	КОНЕЦ)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтчетныйПериод", ТекстУсловияРасчетныйПериод);
	
	ТекстУсловияДополнительныйОтбор = "ИСТИНА";
	Если ДополнительныйОтбор <> Неопределено Тогда
		ТекстУсловияДополнительныйОтбор = "";
		
		Для Каждого УсловиеОтбора Из ДополнительныйОтбор Цикл
			Запрос.УстановитьПараметр(УсловиеОтбора.Ключ, УсловиеОтбора.Значение);
			ТекстУсловияДополнительныйОтбор = ТекстУсловияДополнительныйОтбор + " И ДанныеОВзносахДокумента.Ссылка." + УсловиеОтбора.Ключ + " = &" + УсловиеОтбора.Ключ; 		
		КонецЦикла;	
		
		ТекстУсловияДополнительныйОтбор = Сред(ТекстУсловияДополнительныйОтбор, 3);
	КонецЕсли;	
	
	Если СписокФизическихЛиц = Неопределено Тогда
		ТекстУсловияСотрудник = "ИСТИНА";
	Иначе
		ТекстУсловияСотрудник = "ДанныеОВзносахДокумента.Сотрудник В (&СписокФизическихЛиц)"
	КонецЕсли;

	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудник", ТекстУсловияСотрудник);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеДополнительныйОтбор", ТекстУсловияДополнительныйОтбор);
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТДанныеКорректирующихПачек2013(МенеджерВременныхТаблиц, ОтчетныйПериод, УчитываемыеДокументы)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("МассивДокументов", УчитываемыеДокументы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.КорректируемыйПериод,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ДоначисленоСтраховая - ПачкаДокументовСЗВ_6_1Сотрудники.ДоУплаченоСтраховая КАК КорректировкаСтраховая,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.ДоначисленоНакопительная - ПачкаДокументовСЗВ_6_1Сотрудники.ДоУплаченоНакопительная КАК КорректировкаНакопительная
	|ПОМЕСТИТЬ ВТДанныеКорректирующихПачек
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ПачкаДокументовСЗВ_6_1Сотрудники
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка В(&МассивДокументов)
	|	И ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.КорректируемыйПериод < &ОтчетныйПериод
	|	И ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрСЗВ_6_2Сотрудники.Сотрудник,
	|	РеестрСЗВ_6_2Сотрудники.Ссылка.КорректируемыйПериод,
	|	РеестрСЗВ_6_2Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|	РеестрСЗВ_6_2Сотрудники.ДоначисленоСтраховая - РеестрСЗВ_6_2Сотрудники.ДоУплаченоСтраховая,
	|	РеестрСЗВ_6_2Сотрудники.ДоначисленоНакопительная - РеестрСЗВ_6_2Сотрудники.ДоУплаченоНакопительная
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК РеестрСЗВ_6_2Сотрудники
	|ГДЕ
	|	РеестрСЗВ_6_2Сотрудники.Ссылка В(&МассивДокументов)
	|	И РеестрСЗВ_6_2Сотрудники.Ссылка.КорректируемыйПериод < &ОтчетныйПериод
	|	И РеестрСЗВ_6_2Сотрудники.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КорректируемыйПериод,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ДоначисленоСтраховая - ПачкаДокументовСЗВ_6_4Сотрудники.ДоУплаченоСтраховая,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ДоначисленоНакопительная - ПачкаДокументовСЗВ_6_4Сотрудники.ДоУплаченоНакопительная
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ПачкаДокументовСЗВ_6_4Сотрудники
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка В(&МассивДокументов)
	|	И ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КорректируемыйПериод < &ОтчетныйПериод
	|	И ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)";		
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТОстаткиРасчетовСПФР(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, УчитываемыеДокументы)
	СоздатьВТДанныеКорректирующихПачек2013(МенеджерВременныхТаблиц, ОтчетныйПериод, УчитываемыеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КонецПрошлогоПериода", ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ПерсонифицированныйУчетКлиентСервер.ПредшествующийОтчетныйПериодПерсУчета(ОтчетныйПериод)));
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОВзносахВПФРСрезПоследних.Период,
	|	СведенияОВзносахВПФРСрезПоследних.ФизическоеЛицо,
	|	СведенияОВзносахВПФРСрезПоследних.ЗадолженностьСтраховая,
	|	СведенияОВзносахВПФРСрезПоследних.ЗадолженностьНакопительная,
	|	СведенияОВзносахВПФРСрезПоследних.Организация
	|ПОМЕСТИТЬ ВТСведенияОЗадолженностиВПФР
	|ИЗ
	|	РегистрСведений.СведенияОВзносахВПФР.СрезПоследних(&КонецПрошлогоПериода, Организация = &Организация) КАК СведенияОВзносахВПФРСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗадолженностиВПФР.ФизическоеЛицо,
	|	СУММА(СведенияОЗадолженностиВПФР.Страховая) КАК Страховая,
	|	СУММА(СведенияОЗадолженностиВПФР.Накопительная) КАК Накопительная
	|ПОМЕСТИТЬ ВТОстаткиРасчетовСПФР
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОЗадолженностиВПФР.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Страховая
	|			ИНАЧЕ -СтраховыеВзносыПереданныеВПФР.Страховая
	|		КОНЕЦ КАК Страховая,
	|		ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Накопительная
	|			ИНАЧЕ -СтраховыеВзносыПереданныеВПФР.Накопительная
	|		КОНЕЦ КАК Накопительная
	|	ИЗ
	|		ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтраховыеВзносыПереданныеВПФР КАК СтраховыеВзносыПереданныеВПФР
	|			ПО СведенияОЗадолженностиВПФР.ФизическоеЛицо = СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо
	|				И СведенияОЗадолженностиВПФР.Организация = СтраховыеВзносыПереданныеВПФР.Организация
	|				И СведенияОЗадолженностиВПФР.Период < СтраховыеВзносыПереданныеВПФР.Период
	|				И (СтраховыеВзносыПереданныеВПФР.Период <= &КонецПрошлогоПериода)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтраховыеВзносыПереданныеВПФРОстатки.ФизическоеЛицо,
	|		СтраховыеВзносыПереданныеВПФРОстатки.СтраховаяОстаток,
	|		СтраховыеВзносыПереданныеВПФРОстатки.НакопительнаяОстаток
	|	ИЗ
	|		РегистрНакопления.СтраховыеВзносыПереданныеВПФР.Остатки(
	|				&КонецПрошлогоПериода,
	|				Организация = &Организация
	|					И НЕ ФизическоеЛицо В
	|							(ВЫБРАТЬ
	|								СведенияОЗадолженностиВПФР.ФизическоеЛицо
	|							ИЗ
	|								ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР)) КАК СтраховыеВзносыПереданныеВПФРОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОЗадолженностиВПФР.ФизическоеЛицо,
	|		СведенияОЗадолженностиВПФР.ЗадолженностьСтраховая,
	|		СведенияОЗадолженностиВПФР.ЗадолженностьНакопительная
	|	ИЗ
	|		ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКорректирующихПачек.ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА СведенияОЗадолженностиВПФР.Период ЕСТЬ NULL 
	|					ИЛИ ДанныеКорректирующихПачек.КорректируемыйПериод > СведенияОЗадолженностиВПФР.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеКорректирующихПачек.КорректировкаСтраховая
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СведенияОЗадолженностиВПФР.Период ЕСТЬ NULL 
	|					ИЛИ ДанныеКорректирующихПачек.КорректируемыйПериод > СведенияОЗадолженностиВПФР.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеКорректирующихПачек.КорректировкаНакопительная
	|		КОНЕЦ
	|	ИЗ
	|		ВТДанныеКорректирующихПачек КАК ДанныеКорректирующихПачек
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР
	|			ПО ДанныеКорректирующихПачек.ФизическоеЛицо = СведенияОЗадолженностиВПФР.ФизическоеЛицо) КАК СведенияОЗадолженностиВПФР
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗадолженностиВПФР.ФизическоеЛицо";
	
	Запрос.Выполнить();

КонецПроцедуры	

Процедура СоздатьВТОстаткиРасчетовСПФРПоСотрудникамИзВременнойТаблицы(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, УчитываемыеДокументы, ИмяВТОтбора = "ВТИсчисленныеВзносыВПФР")
	СоздатьВТДанныеКорректирующихПачек2013(МенеджерВременныхТаблиц, ОтчетныйПериод, УчитываемыеДокументы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КонецПрошлогоПериода", ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ПерсонифицированныйУчетКлиентСервер.ПредшествующийОтчетныйПериодПерсУчета(ОтчетныйПериод)));
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтборФизическихЛиц.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТТаблицаФизическихЛиц
	|ИЗ
	|	#ОтборФизическихЛиц КАК ОтборФизическихЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОВзносахВПФРСрезПоследних.Период,
	|	СведенияОВзносахВПФРСрезПоследних.ФизическоеЛицо,
	|	СведенияОВзносахВПФРСрезПоследних.ЗадолженностьСтраховая,
	|	СведенияОВзносахВПФРСрезПоследних.ЗадолженностьНакопительная,
	|	СведенияОВзносахВПФРСрезПоследних.Организация
	|ПОМЕСТИТЬ ВТСведенияОЗадолженностиВПФР
	|ИЗ
	|	РегистрСведений.СведенияОВзносахВПФР.СрезПоследних(
	|			&КонецПрошлогоПериода,
	|			Организация = &Организация
	|				И ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						ТаблицаФизическихЛиц.ФизическоеЛицо
	|					ИЗ
	|						ВТТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц)) КАК СведенияОВзносахВПФРСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФизическихЛиц.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаДляПолученияОстатков
	|ИЗ
	|	ВТТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР
	|		ПО ТаблицаФизическихЛиц.ФизическоеЛицо = СведенияОЗадолженностиВПФР.ФизическоеЛицо
	|ГДЕ
	|	СведенияОЗадолженностиВПФР.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗадолженностиВПФР.ФизическоеЛицо,
	|	СУММА(СведенияОЗадолженностиВПФР.Страховая) КАК Страховая,
	|	СУММА(СведенияОЗадолженностиВПФР.Накопительная) КАК Накопительная
	|ПОМЕСТИТЬ ВТОстаткиРасчетовСПФР
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОЗадолженностиВПФР.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Страховая
	|			ИНАЧЕ -СтраховыеВзносыПереданныеВПФР.Страховая
	|		КОНЕЦ КАК Страховая,
	|		ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо ЕСТЬ NULL 
	|				ТОГДА 0
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Накопительная
	|			ИНАЧЕ -СтраховыеВзносыПереданныеВПФР.Накопительная
	|		КОНЕЦ КАК Накопительная
	|	ИЗ
	|		ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтраховыеВзносыПереданныеВПФР КАК СтраховыеВзносыПереданныеВПФР
	|			ПО СведенияОЗадолженностиВПФР.ФизическоеЛицо = СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо
	|				И СведенияОЗадолженностиВПФР.Организация = СтраховыеВзносыПереданныеВПФР.Организация
	|				И СведенияОЗадолженностиВПФР.Период < СтраховыеВзносыПереданныеВПФР.Период
	|				И (СтраховыеВзносыПереданныеВПФР.Период <= &КонецПрошлогоПериода)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтраховыеВзносыПереданныеВПФРОстатки.ФизическоеЛицо,
	|		СтраховыеВзносыПереданныеВПФРОстатки.СтраховаяОстаток,
	|		СтраховыеВзносыПереданныеВПФРОстатки.НакопительнаяОстаток
	|	ИЗ
	|		РегистрНакопления.СтраховыеВзносыПереданныеВПФР.Остатки(
	|				&КонецПрошлогоПериода,
	|				Организация = &Организация
	|					И ФизическоеЛицо В
	|						(ВЫБРАТЬ
	|							ФизическиеЛицаДляПолученияОстатков.ФизическоеЛицо
	|						ИЗ
	|							ВТФизическиеЛицаДляПолученияОстатков КАК ФизическиеЛицаДляПолученияОстатков)) КАК СтраховыеВзносыПереданныеВПФРОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОЗадолженностиВПФР.ФизическоеЛицо,
	|		СведенияОЗадолженностиВПФР.ЗадолженностьСтраховая,
	|		СведенияОЗадолженностиВПФР.ЗадолженностьНакопительная
	|	ИЗ
	|		ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКорректирующихПачек.ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА СведенияОЗадолженностиВПФР.Период ЕСТЬ NULL 
	|					ИЛИ ДанныеКорректирующихПачек.КорректируемыйПериод > СведенияОЗадолженностиВПФР.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеКорректирующихПачек.КорректировкаСтраховая
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА СведенияОЗадолженностиВПФР.Период ЕСТЬ NULL 
	|					ИЛИ ДанныеКорректирующихПачек.КорректируемыйПериод > СведенияОЗадолженностиВПФР.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеКорректирующихПачек.КорректировкаНакопительная
	|		КОНЕЦ
	|	ИЗ
	|		ВТТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеКорректирующихПачек КАК ДанныеКорректирующихПачек
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОЗадолженностиВПФР КАК СведенияОЗадолженностиВПФР
	|				ПО ДанныеКорректирующихПачек.ФизическоеЛицо = СведенияОЗадолженностиВПФР.ФизическоеЛицо
	|			ПО ТаблицаФизическихЛиц.ФизическоеЛицо = ДанныеКорректирующихПачек.ФизическоеЛицо) КАК СведенияОЗадолженностиВПФР
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗадолженностиВПФР.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ОтборФизическихЛиц", ИмяВТОтбора);
	
	Запрос.Выполнить();

		
КонецПроцедуры		

Функция ВзносыПоДаннымУчета(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОтложенноеПроведениеДокументов") Тогда 
		Модуль = ОбщегоНазначения.ОбщийМодуль("ОтражениеДокументовВУчетеСтраховыхВзносов");
		Модуль.ОтразитьДокументыВУчетеСтраховыхВзносов(Организация);
	КонецЕсли;
	
	ВариантыИсточниковДанныхНачисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОтчетныйГод", Год(ОтчетныйПериод));
	Запрос.УстановитьПараметр("КонецОтчетногоПериода", ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ДатаАктуальности", ПараметрыПолученияДанных.ДатаАктуальности);
	Запрос.УстановитьПараметр("КонецПериодаУплаты", Мин(КонецДня(ПараметрыПолученияДанных.ДатаАктуальности), ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод)));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КатегорииЧленовЭкипажаМорскихСудов", КатегорииЧленовЭкипажаМорскихСудов());
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				ТОГДА РасчетыПоСтраховымВзносамОбороты.СуммаРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРСтраховаяРасход,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыПоСтраховымВзносамОбороты.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|				ТОГДА РасчетыПоСтраховымВзносамОбороты.СуммаРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПФРНакопительнаяРасход,
	|	""Уплата"" КАК ВидСтроки
	|ПОМЕСТИТЬ ВТВсегоУплачено
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Обороты(
	|			&ОтчетныйПериод,
	|			&КонецПериодаУплаты,
	|			,
	|			(ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				ИЛИ ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная))
	|				И ГодЗадолженностиПоЕСН = 0
	|				И Организация = &Организация) КАК РасчетыПоСтраховымВзносамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыПоСтраховымВзносамОстатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|					И РасчетыПоСтраховымВзносамОстатки.СуммаОстаток < 0
	|				ТОГДА -РасчетыПоСтраховымВзносамОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыПоСтраховымВзносамОстатки.ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная)
	|					И РасчетыПоСтраховымВзносамОстатки.СуммаОстаток < 0
	|				ТОГДА -РасчетыПоСтраховымВзносамОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ),
	|	""Переплата""
	|ИЗ
	|	РегистрНакопления.РасчетыСФондамиПоСтраховымВзносам.Остатки(
	|			&ОтчетныйПериод,
	|			(ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРСтраховая)
	|				ИЛИ ВидОбязательногоСтрахованияСотрудников = ЗНАЧЕНИЕ(Перечисление.ВидыОбязательногоСтрахованияСотрудников.ПФРНакопительная))
	|				И ГодЗадолженностиПоЕСН = 0
	|				И Организация = &Организация) КАК РасчетыПоСтраховымВзносамОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(-ФиксированныеВзносыИзДокументов.УплаченоСтраховая),
	|	СУММА(-ФиксированныеВзносыИзДокументов.УплаченоНакопительная),
	|	""Уплата""
	|ИЗ
	|	ВТФиксированныеВзносыИзДокументов КАК ФиксированныеВзносыИзДокументов
	|ГДЕ
	|	ФиксированныеВзносыИзДокументов.ФиксУплаченныеВзносы
	|	И НЕ ФиксированныеВзносыИзДокументов.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсчисленныеВзносыВПФР.ФизическоеЛицо,
	|	МАКСИМУМ(ИсчисленныеВзносыВПФР.КатегорияЗастрахованныхЛиц) КАК КатегорияЗастрахованныхЛиц,
	|	МАКСИМУМ(ИсчисленныеВзносыВПФР.ТипДоговора) КАК ТипДоговора,
	|	КОЛИЧЕСТВО(ИсчисленныеВзносыВПФР.КатегорияЗастрахованныхЛиц) КАК КоличествоКатегорий
	|ПОМЕСТИТЬ ВТКатегорииЗастрахованныхЛицТекущегоПериода
	|ИЗ
	|	ВТИсчисленныеВзносыВПФР КАК ИсчисленныеВзносыВПФР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированныеВзносыИзДокументов КАК ФиксированныеВзносыИзДокументов
	|		ПО ИсчисленныеВзносыВПФР.КатегорияЗастрахованныхЛиц = ФиксированныеВзносыИзДокументов.КатегорияЗастрахованныхЛиц
	|			И ИсчисленныеВзносыВПФР.ТипДоговора = ФиксированныеВзносыИзДокументов.ТипДоговора
	|			И ИсчисленныеВзносыВПФР.ФизическоеЛицо = ФиксированныеВзносыИзДокументов.ФизическоеЛицо
	|			И (ФиксированныеВзносыИзДокументов.ФиксУплаченныеВзносы)
	|ГДЕ
	|	ФиксированныеВзносыИзДокументов.ФизическоеЛицо ЕСТЬ NULL 
	|	И НЕ ИсчисленныеВзносыВПФР.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсчисленныеВзносыВПФР.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КатегорииДляУплатыПрошлыхПериодов.ФизическоеЛицо,
	|	КатегорииДляУплатыПрошлыхПериодов.КатегорияЗастрахованныхЛиц,
	|	МАКСИМУМ(ИсчисленныеВзносыВПФР.ТипДоговора) КАК ТипДоговора
	|ПОМЕСТИТЬ ВТКатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода
	|ИЗ
	|	ВТКатегорииЗастрахованныхЛицТекущегоПериода КАК КатегорииДляУплатыПрошлыхПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсчисленныеВзносыВПФР КАК ИсчисленныеВзносыВПФР
	|		ПО КатегорииДляУплатыПрошлыхПериодов.ФизическоеЛицо = ИсчисленныеВзносыВПФР.ФизическоеЛицо
	|			И КатегорииДляУплатыПрошлыхПериодов.КатегорияЗастрахованныхЛиц = ИсчисленныеВзносыВПФР.КатегорияЗастрахованныхЛиц
	|
	|СГРУППИРОВАТЬ ПО
	|	КатегорииДляУплатыПрошлыхПериодов.ФизическоеЛицо,
	|	КатегорииДляУплатыПрошлыхПериодов.КатегорияЗастрахованныхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФиксированныеВзносыИзДокументов.ФизическоеЛицо,
	|	СУММА(ФиксированныеВзносыИзДокументов.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	СУММА(ФиксированныеВзносыИзДокументов.УплаченоСтраховая) КАК УплаченоСтраховая
	|ПОМЕСТИТЬ ВТФиксированныеУплаченныеВзносыПоФизическимЛицам
	|ИЗ
	|	ВТФиксированныеВзносыИзДокументов КАК ФиксированныеВзносыИзДокументов
	|ГДЕ
	|	ФиксированныеВзносыИзДокументов.ФиксУплаченныеВзносы
	|
	|СГРУППИРОВАТЬ ПО
	|	ФиксированныеВзносыИзДокументов.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоРасчетамПрошлыхПериодов.ФизическоеЛицо,
	|	СУММА(ОстаткиПоРасчетамПрошлыхПериодов.Страховая) КАК Страховая,
	|	СУММА(ОстаткиПоРасчетамПрошлыхПериодов.Накопительная) КАК Накопительная
	|ПОМЕСТИТЬ ВТНедоуплаченоЗаПрошлыеПериоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиПоРасчетамПрошлыхПериодов.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ОстаткиПоРасчетамПрошлыхПериодов.Страховая КАК Страховая,
	|		ОстаткиПоРасчетамПрошлыхПериодов.Накопительная КАК Накопительная
	|	ИЗ
	|		ВТОстаткиРасчетовСПФР КАК ОстаткиПоРасчетамПрошлыхПериодов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОстаткиПоРасчетамПрошлыхПериодов.ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА КатегорииДляУплатыПрошлыхПериодов.ФизическоеЛицо ЕСТЬ NULL 
	|				ТОГДА -ОстаткиПоРасчетамПрошлыхПериодов.Страховая
	|			КОГДА ОстаткиПоРасчетамПрошлыхПериодов.Страховая - ФиксированныеУплаченныеВзносыПоФизическимЛицам.УплаченоСтраховая > 0
	|				ТОГДА -(ОстаткиПоРасчетамПрошлыхПериодов.Страховая - ФиксированныеУплаченныеВзносыПоФизическимЛицам.УплаченоСтраховая)
	|			ИНАЧЕ -ОстаткиПоРасчетамПрошлыхПериодов.Страховая
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА КатегорииДляУплатыПрошлыхПериодов.ФизическоеЛицо ЕСТЬ NULL 
	|				ТОГДА -ОстаткиПоРасчетамПрошлыхПериодов.Накопительная
	|			КОГДА ОстаткиПоРасчетамПрошлыхПериодов.Накопительная - ФиксированныеУплаченныеВзносыПоФизическимЛицам.УплаченоНакопительная > 0
	|				ТОГДА -(ОстаткиПоРасчетамПрошлыхПериодов.Накопительная - ФиксированныеУплаченныеВзносыПоФизическимЛицам.УплаченоНакопительная)
	|			ИНАЧЕ -ОстаткиПоРасчетамПрошлыхПериодов.Накопительная
	|		КОНЕЦ
	|	ИЗ
	|		ВТОстаткиРасчетовСПФР КАК ОстаткиПоРасчетамПрошлыхПериодов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФиксированныеУплаченныеВзносыПоФизическимЛицам КАК ФиксированныеУплаченныеВзносыПоФизическимЛицам
	|			ПО ОстаткиПоРасчетамПрошлыхПериодов.ФизическоеЛицо = ФиксированныеУплаченныеВзносыПоФизическимЛицам.ФизическоеЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода КАК КатегорииДляУплатыПрошлыхПериодов
	|			ПО ОстаткиПоРасчетамПрошлыхПериодов.ФизическоеЛицо = КатегорииДляУплатыПрошлыхПериодов.ФизическоеЛицо) КАК ОстаткиПоРасчетамПрошлыхПериодов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоРасчетамПрошлыхПериодов.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НедоуплаченоЗаПрошлыеПериоды.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаБезКатегории
	|ИЗ
	|	ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода КАК КатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода
	|		ПО НедоуплаченоЗаПрошлыеПериоды.ФизическоеЛицо = КатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированныеУплаченныеВзносыПоФизическимЛицам КАК ФиксированныеУплаченныеВзносыПоФизическимЛицам
	|		ПО НедоуплаченоЗаПрошлыеПериоды.ФизическоеЛицо = ФиксированныеУплаченныеВзносыПоФизическимЛицам.ФизическоеЛицо
	|ГДЕ
	|	(НедоуплаченоЗаПрошлыеПериоды.Накопительная <> 0
	|			ИЛИ НедоуплаченоЗаПрошлыеПериоды.Страховая <> 0)
	|	И КатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода.ФизическоеЛицо ЕСТЬ NULL 
	|	И ФиксированныеУплаченныеВзносыПоФизическимЛицам.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФизическиеЛицаБезКатегории.ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛицаБезКатегории КАК ФизическиеЛицаБезКатегории";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой()
		Или ПараметрыПолученияДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеДокументов 
		Или ПараметрыПолученияДанных.ИсточникДанныхИсчисленныхВзносов = ВариантыИсточниковДанныхНачисленныхВзносов.ДанныеКорректируемыхДокументов Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущиеКатегорииТипыДоговоров.ФизическоеЛицо,
		|	ТекущиеКатегорииТипыДоговоров.КатегорияЗастрахованныхЛиц,
		|	ТекущиеКатегорииТипыДоговоров.ТипДоговора
		|ПОМЕСТИТЬ ВТКатегорииТипыДоговораУплатыПрошлыхПериодов
		|ИЗ
		|	ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода КАК ТекущиеКатегорииТипыДоговоров
		|		ПО НедоуплаченоЗаПрошлыеПериоды.ФизическоеЛицо = ТекущиеКатегорииТипыДоговоров.ФизическоеЛицо
		|ГДЕ
		|	(НедоуплаченоЗаПрошлыеПериоды.Накопительная <> 0
		|			ИЛИ НедоуплаченоЗаПрошлыеПериоды.Страховая <> 0)";
	Иначе		
		СоздатьВТКатегорииЗастрахованныхЛиц(Запрос.МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, "ВТФизическиеЛицаБезКатегории");
			 
		Запрос.УстановитьПараметр("ТипДоговора", ?(Год(ОтчетныйПериод) > 2012, Перечисления.ТипыДоговоровСЗВ63.Трудовой, Перечисления.ТипыДоговоровСЗВ63.ПустаяСсылка()));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КатегорииЗастрахованныхЛиц.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(КатегорииЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц) В (&КатегорииЧленовЭкипажаМорскихСудов)
		|			ТОГДА ЗНАЧЕНИЕ(перечисление.КатегорииЗастрахованныхЛицДляПФР.НР)
		|		ИНАЧЕ МАКСИМУМ(КатегорииЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц)
		|	КОНЕЦ КАК КатегорияЗастрахованныхЛиц,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой) КАК ТипДоговора
		|ПОМЕСТИТЬ ВТКатегорииТипыДоговораУплатыПрошлыхПериодов
		|ИЗ
		|	ВТКатегорииЗастрахованныхЛиц КАК КатегорииЗастрахованныхЛиц
		|
		|СГРУППИРОВАТЬ ПО
		|	КатегорииЗастрахованныхЛиц.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущиеКатегорииТипыДоговоров.ФизическоеЛицо,
		|	ТекущиеКатегорииТипыДоговоров.КатегорияЗастрахованныхЛиц,
		|	ТекущиеКатегорииТипыДоговоров.ТипДоговора
		|ИЗ
		|	ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговоровЗастрахованныхЛицТекущегоПериода КАК ТекущиеКатегорииТипыДоговоров
		|		ПО НедоуплаченоЗаПрошлыеПериоды.ФизическоеЛицо = ТекущиеКатегорииТипыДоговоров.ФизическоеЛицо
		|ГДЕ
		|	(НедоуплаченоЗаПрошлыеПериоды.Накопительная <> 0
		|			ИЛИ НедоуплаченоЗаПрошлыеПериоды.Страховая <> 0)";
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-СУММА(НачисленоЗаОтчетныйПериодФормирования.НачисленоНакопительная) КАК ПФРНакопительная,
	|	-СУММА(НачисленоЗаОтчетныйПериодФормирования.НачисленоСтраховая) КАК ПФРСтраховая
	|ПОМЕСТИТЬ ВТКорректировкиВсегоНачислено
	|ИЗ
	|	ВТФиксированныеВзносыИзДокументов КАК ИсправленияПоВзносам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсчисленныеВзносыВПФР КАК НачисленоЗаОтчетныйПериодФормирования
	|		ПО ИсправленияПоВзносам.ФизическоеЛицо = НачисленоЗаОтчетныйПериодФормирования.ФизическоеЛицо
	|			И ИсправленияПоВзносам.КатегорияЗастрахованныхЛиц = НачисленоЗаОтчетныйПериодФормирования.КатегорияЗастрахованныхЛиц
	|			И ИсправленияПоВзносам.ТипДоговора = НачисленоЗаОтчетныйПериодФормирования.ТипДоговора
	|			И (ИсправленияПоВзносам.ФиксУплаченныеВзносы)
	|			И (НЕ НачисленоЗаОтчетныйПериодФормирования.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВсегоНачисленоВзносов.ПФРСтраховаяПриход) КАК ПФРСтраховаяПриход,
	|	СУММА(ВсегоНачисленоВзносов.ПФРНакопительнаяПриход) КАК ПФРНакопительнаяПриход
	|ПОМЕСТИТЬ ВТВсегоНачислено
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыПоСтраховымВзносамОбороты.НачисленоСтраховая КАК ПФРСтраховаяПриход,
	|		РасчетыПоСтраховымВзносамОбороты.НачисленоНакопительная КАК ПФРНакопительнаяПриход
	|	ИЗ
	|		ВТИсчисленныеВзносыВПФР КАК РасчетыПоСтраховымВзносамОбороты
	|	ГДЕ
	|		НЕ РасчетыПоСтраховымВзносамОбороты.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		КорректировкиВсегоНачислено.ПФРСтраховая,
	|		КорректировкиВсегоНачислено.ПФРНакопительная
	|	ИЗ
	|		ВТКорректировкиВсегоНачислено КАК КорректировкиВсегоНачислено) КАК ВсегоНачисленоВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) КАК Накопительная,
	|	ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) КАК Страховая,
	|	ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяПриход, 0) КАК ПФРСтраховаяПриход,
	|	ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяПриход, 0) КАК ПФРНакопительнаяПриход,
	|	ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0) КАК ПФРСтраховаяРасход,
	|	ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0) КАК ПФРНакопительнаяРасход,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяПриход, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) > ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0) - ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) > ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяПриход, 0)
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0) - ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0)) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяПриход, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентТекущегоПериодаСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяПриход, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) > ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0)
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0) - ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) > ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяПриход, 0)
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ((ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0) - ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0)) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяПриход, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентТекущегоПериодаНакопительная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) < ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0)
	|				И ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) > 0
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентПрошлыхПериодовСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) = 0
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) < ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0)
	|				И ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) > 0
	|			ТОГДА 100000
	|		ИНАЧЕ ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0) * 100000 / (ВЫРАЗИТЬ(ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) КАК ЧИСЛО(25, 6))) КАК ЧИСЛО(20, 6))
	|	КОНЕЦ КАК КоэффициентПрошлыхПериодовНакопительная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) + ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяПриход, 0) > ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0)
	|			ТОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяРасход, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыСтраховая, 0) + ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРСтраховаяПриход, 0)
	|	КОНЕЦ КАК УчтеноУплатыСтраховая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) + ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяПриход, 0) > ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0)
	|			ТОГДА ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяРасход, 0)
	|		ИНАЧЕ ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.НедоуплаченоЗаПрошлыеПериодыНакопительная, 0) + ЕСТЬNULL(ДанныеДляРасчетаКоэффициентов.ПФРНакопительнаяПриход, 0)
	|	КОНЕЦ КАК УчтеноУплатыНакопительная
	|ПОМЕСТИТЬ ВТКоэффициентыУплаты
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ДанныеДляРасчетаКоэффициентовНесгруппированные.ПФРСтраховаяПриход) КАК ПФРСтраховаяПриход,
	|		СУММА(ДанныеДляРасчетаКоэффициентовНесгруппированные.ПФРНакопительнаяПриход) КАК ПФРНакопительнаяПриход,
	|		СУММА(ДанныеДляРасчетаКоэффициентовНесгруппированные.ПФРСтраховаяРасход) КАК ПФРСтраховаяРасход,
	|		СУММА(ДанныеДляРасчетаКоэффициентовНесгруппированные.ПФРНакопительнаяРасход) КАК ПФРНакопительнаяРасход,
	|		СУММА(ДанныеДляРасчетаКоэффициентовНесгруппированные.НедоуплаченоЗаПрошлыеПериодыНакопительная) КАК НедоуплаченоЗаПрошлыеПериодыНакопительная,
	|		СУММА(ДанныеДляРасчетаКоэффициентовНесгруппированные.НедоуплаченоЗаПрошлыеПериодыСтраховая) КАК НедоуплаченоЗаПрошлыеПериодыСтраховая
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВсегоНачислено.ПФРСтраховаяПриход КАК ПФРСтраховаяПриход,
	|			ВсегоНачислено.ПФРНакопительнаяПриход КАК ПФРНакопительнаяПриход,
	|			0 КАК ПФРСтраховаяРасход,
	|			0 КАК ПФРНакопительнаяРасход,
	|			0 КАК НедоуплаченоЗаПрошлыеПериодыНакопительная,
	|			0 КАК НедоуплаченоЗаПрошлыеПериодыСтраховая
	|		ИЗ
	|			ВТВсегоНачислено КАК ВсегоНачислено
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			0,
	|			ВЫБОР
	|				КОГДА СУММА(ВсегоУплачено.ПФРСтраховаяРасход) < 0
	|					ТОГДА 0
	|				ИНАЧЕ СУММА(ВсегоУплачено.ПФРСтраховаяРасход)
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА СУММА(ВсегоУплачено.ПФРНакопительнаяРасход) < 0
	|					ТОГДА 0
	|				ИНАЧЕ СУММА(ВсегоУплачено.ПФРНакопительнаяРасход)
	|			КОНЕЦ,
	|			0,
	|			0
	|		ИЗ
	|			ВТВсегоУплачено КАК ВсегоУплачено
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			0,
	|			0,
	|			0,
	|			ВЫБОР
	|				КОГДА НедоуплаченоЗаПрошлыеПериоды.Накопительная > 0
	|					ТОГДА НедоуплаченоЗаПрошлыеПериоды.Накопительная
	|				ИНАЧЕ 0
	|			КОНЕЦ,
	|			ВЫБОР
	|				КОГДА НедоуплаченоЗаПрошлыеПериоды.Страховая > 0
	|					ТОГДА НедоуплаченоЗаПрошлыеПериоды.Страховая
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИЗ
	|			ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды) КАК ДанныеДляРасчетаКоэффициентовНесгруппированные) КАК ДанныеДляРасчетаКоэффициентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетСумм.ФизическоеЛицо,
	|	РасчетСумм.КатегорияЗастрахованныхЛиц,
	|	СУММА(РасчетСумм.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	СУММА(РасчетСумм.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(РасчетСумм.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(РасчетСумм.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	МАКСИМУМ(РасчетСумм.ФиксУплаченныеВзносы) КАК ФиксУплаченныеВзносы,
	|	МАКСИМУМ(РасчетСумм.ФиксНачисленныеВзносы) КАК ФиксНачисленныеВзносы,
	|	РасчетСумм.ТипДоговора,
	|	МАКСИМУМ(РасчетСумм.ФиксДоУплаченныеВзносы) КАК ФиксДоУплаченныеВзносы,
	|	МАКСИМУМ(РасчетСумм.ФиксДоНачисленныеВзносы) КАК ФиксДоНачисленныеВзносы,
	|	СУММА(РасчетСумм.ДоНачисленоСтраховая) КАК ДоНачисленоСтраховая,
	|	СУММА(РасчетСумм.ДоНачисленоНакопительная) КАК ДоНачисленоНакопительная,
	|	СУММА(РасчетСумм.ДоУплаченоСтраховая) КАК ДоУплаченоСтраховая,
	|	СУММА(РасчетСумм.ДоУплаченоНакопительная) КАК ДоУплаченоНакопительная
	|ПОМЕСТИТЬ ВТРасчетСумм
	|ИЗ
	|	(ВЫБРАТЬ
	|		НедоуплаченоЗаПрошлыеПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
	|		КатегорииТипыДоговораУплатыПрошлыхПериодов.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		КатегорииТипыДоговораУплатыПрошлыхПериодов.ТипДоговора КАК ТипДоговора,
	|		0 КАК НачисленоСтраховая,
	|		0 КАК НачисленоНакопительная,
	|		ВЫБОР
	|			КОГДА НедоуплаченоЗаПрошлыеПериоды.Страховая < 0
	|				ТОГДА 0
	|			ИНАЧЕ НедоуплаченоЗаПрошлыеПериоды.Страховая * КоэффициентыУплаты.КоэффициентПрошлыхПериодовСтраховая / 100000
	|		КОНЕЦ КАК УплаченоСтраховая,
	|		ВЫБОР
	|			КОГДА НедоуплаченоЗаПрошлыеПериоды.Накопительная < 0
	|				ТОГДА 0
	|			ИНАЧЕ НедоуплаченоЗаПрошлыеПериоды.Накопительная * КоэффициентыУплаты.КоэффициентПрошлыхПериодовНакопительная / 100000
	|		КОНЕЦ КАК УплаченоНакопительная,
	|		ЛОЖЬ КАК ФиксУплаченныеВзносы,
	|		ЛОЖЬ КАК ФиксНачисленныеВзносы,
	|		ЛОЖЬ КАК ФиксДоУплаченныеВзносы,
	|		ЛОЖЬ КАК ФиксДоНачисленныеВзносы,
	|		0 КАК ДоНачисленоСтраховая,
	|		0 КАК ДоНачисленоНакопительная,
	|		0 КАК ДоУплаченоСтраховая,
	|		0 КАК ДоУплаченоНакопительная
	|	ИЗ
	|		ВТНедоуплаченоЗаПрошлыеПериоды КАК НедоуплаченоЗаПрошлыеПериоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыУплаты КАК КоэффициентыУплаты
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКатегорииТипыДоговораУплатыПрошлыхПериодов КАК КатегорииТипыДоговораУплатыПрошлыхПериодов
	|			ПО НедоуплаченоЗаПрошлыеПериоды.ФизическоеЛицо = КатегорииТипыДоговораУплатыПрошлыхПериодов.ФизическоеЛицо
	|	ГДЕ
	|		(НедоуплаченоЗаПрошлыеПериоды.Накопительная <> 0
	|				ИЛИ НедоуплаченоЗаПрошлыеПериоды.Страховая <> 0)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленоПоЗЛ.ФизическоеЛицо,
	|		НачисленоПоЗЛ.КатегорияЗастрахованныхЛиц,
	|		НачисленоПоЗЛ.ТипДоговора,
	|		НачисленоПоЗЛ.НачисленоСтраховая,
	|		НачисленоПоЗЛ.НачисленоНакопительная,
	|		ВЫБОР
	|			КОГДА НачисленоПоЗЛ.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|				ТОГДА 0
	|			КОГДА ЕСТЬNULL(ИсправленияПоВзносам.ФиксУплаченныеВзносы, ЛОЖЬ)
	|				ТОГДА 0
	|			ИНАЧЕ НачисленоПоЗЛ.НачисленоСтраховая * КоэффициентыУплаты.КоэффициентТекущегоПериодаСтраховая / 100000
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА НачисленоПоЗЛ.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|				ТОГДА 0
	|			КОГДА ЕСТЬNULL(ИсправленияПоВзносам.ФиксУплаченныеВзносы, ЛОЖЬ)
	|				ТОГДА 0
	|			ИНАЧЕ НачисленоПоЗЛ.НачисленоНакопительная * КоэффициентыУплаты.КоэффициентТекущегоПериодаНакопительная / 100000
	|		КОНЕЦ,
	|		ЛОЖЬ,
	|		НачисленоПоЗЛ.ФиксНачисленныеВзносы,
	|		ЛОЖЬ,
	|		НачисленоПоЗЛ.ФиксДоНачисленныеВзносы,
	|		НачисленоПоЗЛ.ДоНачисленоСтраховая,
	|		НачисленоПоЗЛ.ДоНачисленоНакопительная,
	|		0,
	|		0
	|	ИЗ
	|		ВТИсчисленныеВзносыВПФР КАК НачисленоПоЗЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыУплаты КАК КоэффициентыУплаты
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированныеВзносыИзДокументов КАК ИсправленияПоВзносам
	|			ПО НачисленоПоЗЛ.ФизическоеЛицо = ИсправленияПоВзносам.ФизическоеЛицо
	|				И НачисленоПоЗЛ.КатегорияЗастрахованныхЛиц = ИсправленияПоВзносам.КатегорияЗастрахованныхЛиц
	|				И НачисленоПоЗЛ.ТипДоговора = ИсправленияПоВзносам.ТипДоговора
	|	ГДЕ
	|		(НачисленоПоЗЛ.НачисленоНакопительная <> 0
	|				ИЛИ НачисленоПоЗЛ.НачисленоСтраховая <> 0
	|				ИЛИ НачисленоПоЗЛ.ФиксНачисленныеВзносы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсправленияПоВзносам.ФизическоеЛицо,
	|		ИсправленияПоВзносам.КатегорияЗастрахованныхЛиц,
	|		ИсправленияПоВзносам.ТипДоговора,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА ИсправленияПоВзносам.ФиксУплаченныеВзносы
	|				ТОГДА ИсправленияПоВзносам.УплаченоСтраховая
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИсправленияПоВзносам.ФиксУплаченныеВзносы
	|				ТОГДА ИсправленияПоВзносам.УплаченоНакопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ИсправленияПоВзносам.ФиксУплаченныеВзносы,
	|		ЛОЖЬ,
	|		ИсправленияПоВзносам.ФиксУплаченныеВзносы,
	|		ЛОЖЬ,
	|		0,
	|		0,
	|		ИсправленияПоВзносам.ДоУплаченоСтраховая,
	|		ИсправленияПоВзносам.ДоУплаченоНакопительная
	|	ИЗ
	|		ВТФиксированныеВзносыИзДокументов КАК ИсправленияПоВзносам) КАК РасчетСумм
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСумм.ФизическоеЛицо,
	|	РасчетСумм.КатегорияЗастрахованныхЛиц,
	|	РасчетСумм.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВсегоУплачено.Страховая) КАК Страховая,
	|	СУММА(ВсегоУплачено.Накопительная) КАК Накопительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		Уплачено.ПФРСтраховаяРасход КАК Страховая,
	|		Уплачено.ПФРНакопительнаяРасход КАК Накопительная
	|	ИЗ
	|		ВТКоэффициентыУплаты КАК Уплачено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИсправленияПоВзносам.УплаченоСтраховая,
	|		ИсправленияПоВзносам.УплаченоНакопительная
	|	ИЗ
	|		ВТФиксированныеВзносыИзДокументов КАК ИсправленияПоВзносам
	|	ГДЕ
	|		ИсправленияПоВзносам.ФиксУплаченныеВзносы) КАК ВсегоУплачено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоСтраховая КАК ЧИСЛО(15, 2))), 0) КАК Страховая,
	|	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоНакопительная КАК ЧИСЛО(15, 2))), 0) КАК Накопительная
	|ИЗ
	|	ВТРасчетСумм КАК РасчетныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
	|	РасчетныеДанные.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	РасчетныеДанные.ТипДоговора,
	|	РасчетныеДанные.УплаченоНакопительная КАК УплаченоНакопительная,
	|	РасчетныеДанные.УплаченоСтраховая КАК УплаченоСтраховая,
	|	РасчетныеДанные.НачисленоСтраховая КАК НачисленоСтраховая,
	|	РасчетныеДанные.НачисленоНакопительная КАК НачисленоНакопительная,
	|	РасчетныеДанные.ФиксУплаченныеВзносы КАК ФиксУплаченныеВзносы,
	|	РасчетныеДанные.ФиксНачисленныеВзносы КАК ФиксНачисленныеВзносы,
	|	РасчетныеДанные.ФиксДоУплаченныеВзносы КАК ФиксДоУплаченныеВзносы,
	|	РасчетныеДанные.ФиксДоНачисленныеВзносы КАК ФиксДоНачисленныеВзносы,
	|	РасчетныеДанные.ДоНачисленоСтраховая,
	|	РасчетныеДанные.ДоНачисленоНакопительная,
	|	РасчетныеДанные.ДоУплаченоСтраховая,
	|	РасчетныеДанные.ДоУплаченоНакопительная
	|ИЗ
	|	ВТРасчетСумм КАК РасчетныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетныеДанные.ФизическоеЛицо,
	|	РасчетныеДанные.КатегорияЗастрахованныхЛиц,
	|	РасчетныеДанные.ТипДоговора,
	|	РасчетныеДанные.УплаченоНакопительная,
	|	РасчетныеДанные.УплаченоСтраховая,
	|	РасчетныеДанные.НачисленоСтраховая,
	|	РасчетныеДанные.НачисленоНакопительная,
	|	РасчетныеДанные.ФиксУплаченныеВзносы,
	|	РасчетныеДанные.ФиксНачисленныеВзносы,
	|	РасчетныеДанные.ФиксДоУплаченныеВзносы,
	|	РасчетныеДанные.ФиксДоНачисленныеВзносы,
	|	РасчетныеДанные.ДоНачисленоСтраховая,
	|	РасчетныеДанные.ДоНачисленоНакопительная,
	|	РасчетныеДанные.ДоУплаченоСтраховая,
	|	РасчетныеДанные.ДоУплаченоНакопительная
	|
	|ИМЕЮЩИЕ
	|	(СУММА(РасчетныеДанные.УплаченоНакопительная) <> 0
	|		ИЛИ СУММА(РасчетныеДанные.УплаченоСтраховая) <> 0
	|		ИЛИ СУММА(РасчетныеДанные.НачисленоСтраховая) <> 0
	|		ИЛИ СУММА(РасчетныеДанные.НачисленоНакопительная) <> 0
	|		ИЛИ МАКСИМУМ(РасчетныеДанные.ФиксУплаченныеВзносы) = ИСТИНА
	|		ИЛИ МАКСИМУМ(РасчетныеДанные.ФиксНачисленныеВзносы) = ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	КатегорияЗастрахованныхЛиц";
	
	Результаты = Запрос.ВыполнитьПакет();
	ВсегоЗапросов = Результаты.Количество();
	РезультатЗапроса = Результаты[ВсегоЗапросов - 1].Выгрузить();
	Распределено = Результаты[ВсегоЗапросов - 2].Выбрать();
	Распределено.Следующий();
	Зарегистрировано = Результаты[ВсегоЗапросов - 3].Выбрать();
	Зарегистрировано.Следующий();
	
	Если Зарегистрировано.Страховая <> Распределено.Страховая Или Зарегистрировано.Накопительная <> Распределено.Накопительная Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	РасчетныеДанные.ТипДоговора КАК ТипДоговора,
		|	СУММА(РасчетныеДанные.УплаченоНакопительная) КАК УплаченоНакопительная,
		|	СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоНакопительная КАК ЧИСЛО(15, 2))) КАК Итог
		|ИЗ
		|	ВТРасчетСумм КАК РасчетныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетныеДанные.ФизическоеЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц,
		|	РасчетныеДанные.ТипДоговора
		|
		|ИМЕЮЩИЕ
		|	(СУММА(РасчетныеДанные.УплаченоНакопительная) <> 0
		|		ИЛИ СУММА(РасчетныеДанные.НачисленоНакопительная) <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетныеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	РасчетныеДанные.ТипДоговора КАК ТипДоговора,
		|	СУММА(РасчетныеДанные.УплаченоСтраховая) КАК УплаченоСтраховая,
		|	СУММА(ВЫРАЗИТЬ(РасчетныеДанные.УплаченоСтраховая КАК ЧИСЛО(15, 2))) КАК Итог
		|ИЗ
		|	ВТРасчетСумм КАК РасчетныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетныеДанные.ФизическоеЛицо,
		|	РасчетныеДанные.КатегорияЗастрахованныхЛиц,
		|	РасчетныеДанные.ТипДоговора
		|
		|ИМЕЮЩИЕ
		|	(СУММА(РасчетныеДанные.УплаченоСтраховая) <> 0
		|		ИЛИ СУММА(РасчетныеДанные.НачисленоСтраховая) <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо";
		
		Результаты = Запрос.ВыполнитьПакет();
		ВсегоЗапросов = Результаты.Количество();
		СтруктураПоиска = Новый Структура("ФизическоеЛицо,КатегорияЗастрахованныхЛиц,ТипДоговора"); 
		Если Зарегистрировано.Страховая <> Распределено.Страховая Тогда
			Расхождение = Зарегистрировано.Страховая - Распределено.Страховая;
			ВременнаяТаблица = Результаты[ВсегоЗапросов - 1].Выгрузить();
			ЗарплатаКадры.ОкруглитьСлагаемыеПоСумме(ВременнаяТаблица,"УплаченоСтраховая", ВременнаяТаблица.Итог("Итог") + Расхождение, 2, "ФизическоеЛицо,КатегорияЗастрахованныхЛиц,ТипДоговора");
			Для каждого СтрокаТЧ Из ВременнаяТаблица Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
				РезультатЗапроса.НайтиСтроки(СтруктураПоиска)[0].УплаченоСтраховая = СтрокаТЧ.УплаченоСтраховая;
			КонецЦикла;
		КонецЕсли;
		Если Зарегистрировано.Накопительная <> Распределено.Накопительная Тогда
			Расхождение = Зарегистрировано.Накопительная - Распределено.Накопительная;
			ВременнаяТаблица = Результаты[ВсегоЗапросов - 2].Выгрузить();
			ЗарплатаКадры.ОкруглитьСлагаемыеПоСумме(ВременнаяТаблица,"УплаченоНакопительная", ВременнаяТаблица.Итог("Итог") + Расхождение, 2, "ФизическоеЛицо,КатегорияЗастрахованныхЛиц,ТипДоговора");
			Для каждого СтрокаТЧ Из ВременнаяТаблица Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
				РезультатЗапроса.НайтиСтроки(СтруктураПоиска)[0].УплаченоНакопительная = СтрокаТЧ.УплаченоНакопительная;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из РезультатЗапроса Цикл
		СтрокаТЧ.УплаченоСтраховая = Макс(Окр(СтрокаТЧ.УплаченоСтраховая, 2), 0);
		СтрокаТЧ.УплаченоНакопительная = Макс(Окр(СтрокаТЧ.УплаченоНакопительная, 2), 0);
	КонецЦикла;
	
	Возврат РезультатЗапроса;
		
КонецФункции	

Функция ВзносыПоДаннымКорректирующихДокументов(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияДанных)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыОтбора = СтруктураОтбораДанныхДляКвартальнойОтчетности();
	
	СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.КорректируемыеДокументы, ПараметрыОтбора);
	
	СоздатьВТДанныеОВзносахИзДокументов(МенеджерВременныхТаблиц, ПараметрыПолученияДанных.КорректируемыеДокументы, ОтчетныйПериод, Ложь);
	
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо,
	|	ДанныеОНачисленныхВзносахИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеОНачисленныхВзносахИзДокументов.ТипДоговора,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.ДоУплаченоСтраховая) КАК ДоУплаченоСтраховая,
	|	СУММА(ДанныеОНачисленныхВзносахИзДокументов.ДоУплаченоНакопительная) КАК ДоУплаченоНакопительная,
	|	МАКСИМУМ(ДанныеОНачисленныхВзносахИзДокументов.ФиксУплаченныеВзносы) КАК ФиксУплаченныеВзносы,
	|	МАКСИМУМ(ДанныеОНачисленныхВзносахИзДокументов.ФиксДоУплаченныеВзносы) КАК ФиксДоУплаченныеВзносы
	|ПОМЕСТИТЬ ВТУплаченныеВзносыВПФР
	|ИЗ
	|	ВТДанныеОВзносахИзДокументов КАК ДанныеОНачисленныхВзносахИзДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров
	|		ПО ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.ФизическоеЛицо
	|			И ДанныеОНачисленныхВзносахИзДокументов.Ссылка = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОНачисленныхВзносахИзДокументов.ФизическоеЛицо,
	|	ДанныеОНачисленныхВзносахИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ДанныеОНачисленныхВзносахИзДокументов.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОВзносах.ФизическоеЛицо,
	|	ДанныеОВзносах.КатегорияЗастрахованныхЛиц,
	|	СУММА(ДанныеОВзносах.УплаченоСтраховая) КАК УплаченоСтраховая,
	|	СУММА(ДанныеОВзносах.УплаченоНакопительная) КАК УплаченоНакопительная,
	|	ДанныеОВзносах.ТипДоговора,
	|	СУММА(ДанныеОВзносах.НачисленоСтраховая) КАК НачисленоСтраховая,
	|	СУММА(ДанныеОВзносах.НачисленоНакопительная) КАК НачисленоНакопительная,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксНачисленныеВзносы) КАК ФиксНачисленныеВзносы,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксНачисленныеВзносы) КАК ФиксДоНачисленныеВзносы,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксУплаченныеВзносы) КАК ФиксУплаченныеВзносы,
	|	МАКСИМУМ(ДанныеОВзносах.ФиксУплаченныеВзносы) КАК ФиксДоУплаченныеВзносы,
	|	СУММА(ДанныеОВзносах.ДоНачисленоСтраховая) КАК ДоНачисленоСтраховая,
	|	СУММА(ДанныеОВзносах.ДоНачисленоНакопительная) КАК ДоНачисленоНакопительная,
	|	СУММА(ДанныеОВзносах.ДоУплаченоСтраховая) КАК ДоУплаченоСтраховая,
	|	СУММА(ДанныеОВзносах.ДоУплаченоНакопительная) КАК ДоУплаченоНакопительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		УплаченныеВзносыИзДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
	|		УплаченныеВзносыИзДокументов.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		УплаченныеВзносыИзДокументов.УплаченоСтраховая КАК УплаченоСтраховая,
	|		УплаченныеВзносыИзДокументов.УплаченоНакопительная КАК УплаченоНакопительная,
	|		УплаченныеВзносыИзДокументов.ДоУплаченоСтраховая КАК ДоУплаченоСтраховая,
	|		УплаченныеВзносыИзДокументов.ДоУплаченоНакопительная КАК ДоУплаченоНакопительная,
	|		УплаченныеВзносыИзДокументов.ТипДоговора КАК ТипДоговора,
	|		0 КАК НачисленоСтраховая,
	|		0 КАК НачисленоНакопительная,
	|		0 КАК ДоНачисленоСтраховая,
	|		0 КАК ДоНачисленоНакопительная,
	|		ЛОЖЬ КАК ФиксНачисленныеВзносы,
	|		УплаченныеВзносыИзДокументов.ФиксУплаченныеВзносы КАК ФиксУплаченныеВзносы
	|	ИЗ
	|		ВТУплаченныеВзносыВПФР КАК УплаченныеВзносыИзДокументов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачисленоЗаОтчетныйПериодФормирования.ФизическоеЛицо,
	|		НачисленоЗаОтчетныйПериодФормирования.КатегорияЗастрахованныхЛиц,
	|		0,
	|		0,
	|		0,
	|		0,
	|		НачисленоЗаОтчетныйПериодФормирования.ТипДоговора,
	|		НачисленоЗаОтчетныйПериодФормирования.НачисленоСтраховая,
	|		НачисленоЗаОтчетныйПериодФормирования.НачисленоНакопительная,
	|		НачисленоЗаОтчетныйПериодФормирования.ДоначисленоСтраховая,
	|		НачисленоЗаОтчетныйПериодФормирования.ДоначисленоНакопительная,
	|		НачисленоЗаОтчетныйПериодФормирования.ФиксНачисленныеВзносы,
	|		ЛОЖЬ
	|	ИЗ
	|		ВТИсчисленныеВзносыВПФР КАК НачисленоЗаОтчетныйПериодФормирования) КАК ДанныеОВзносах
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВзносах.ФизическоеЛицо,
	|	ДанныеОВзносах.КатегорияЗастрахованныхЛиц,
	|	ДанныеОВзносах.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОВзносахИзДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам";
	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции	

Процедура СоздатьВТВзносыВПФРДляКорректирующихСведений(МенеджерВТ, Организация, ОтчетныйПериод, ТипСведенийСЗВ, ПараметрыОтбора) 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("КонецПериода", ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ОтменяющиеСведения", ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("КатегорииЧленовЭкипажаМорскихСудов", КатегорииЧленовЭкипажаМорскихСудов());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо,
	|	СтраховыеВзносыПереданныеВПФР.КатегорияЗастрахованныхЛиц,
	|	СтраховыеВзносыПереданныеВПФР.ТипДоговора,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.СтраховаяЧленамЭкипажейМорскихСудов
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Страховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоСтраховая,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.НакопительнаяЧленамЭкипажейМорскихСудов
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Накопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленоНакопительная,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Страховая
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УплаченоСтраховая,
	|	СУММА(ВЫБОР
	|			КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.Накопительная
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УплаченоНакопительная
	|ПОМЕСТИТЬ ВТВзносыЗаКорректируемыйПериод
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПереданныеВПФР КАК СтраховыеВзносыПереданныеВПФР
	|ГДЕ
	|	СтраховыеВзносыПереданныеВПФР.Период МЕЖДУ &ОтчетныйПериод И &КонецПериода
	|	И СтраховыеВзносыПереданныеВПФР.Организация = &Организация
	|	И &УсловиеФизическиеЛица
	|	И &УсловиеКатегория
	|	И &УсловиеТипДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо,
	|	СтраховыеВзносыПереданныеВПФР.КатегорияЗастрахованныхЛиц,
	|	СтраховыеВзносыПереданныеВПФР.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыВзносов.ФизическоеЛицо,
	|	СуммыВзносов.КатегорияЗастрахованныхЛиц,
	|	СуммыВзносов.ТипДоговора,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА 0
	|		ИНАЧЕ СуммыВзносов.НачисленоНакопительная
	|	КОНЕЦ КАК НачисленоНакопительная,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА 0
	|		ИНАЧЕ СуммыВзносов.НачисленоСтраховая
	|	КОНЕЦ КАК НачисленоСтраховая,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА 0
	|		ИНАЧЕ СуммыВзносов.УплаченоНакопительная
	|	КОНЕЦ КАК УплаченоНакопительная,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА 0
	|		ИНАЧЕ СуммыВзносов.УплаченоСтраховая
	|	КОНЕЦ КАК УплаченоСтраховая,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА -ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.НачисленоСтраховая, 0)
	|		КОГДА СуммыВзносов.ФиксДоначисленныеВзносы
	|			ТОГДА СуммыВзносов.ДоНачисленоСтраховая
	|		ИНАЧЕ СуммыВзносов.НачисленоСтраховая - ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.НачисленоСтраховая, 0)
	|	КОНЕЦ КАК ДоНачисленоСтраховая,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА -ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.НачисленоНакопительная, 0)
	|		КОГДА СуммыВзносов.ФиксДоначисленныеВзносы
	|			ТОГДА СуммыВзносов.ДоНачисленоНакопительная
	|		ИНАЧЕ СуммыВзносов.НачисленоНакопительная - ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.НачисленоНакопительная, 0)
	|	КОНЕЦ КАК ДоНачисленоНакопительная,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА -ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.УплаченоСтраховая, 0)
	|		КОГДА СуммыВзносов.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|			ТОГДА 0
	|		КОГДА СуммыВзносов.ФиксДоуплаченныеВзносы
	|			ТОГДА СуммыВзносов.ДоУплаченоСтраховая
	|		ИНАЧЕ СуммыВзносов.УплаченоСтраховая - ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.УплаченоСтраховая, 0)
	|	КОНЕЦ КАК ДоУплаченоСтраховая,
	|	ВЫБОР
	|		КОГДА &ОтменяющиеСведения
	|			ТОГДА -ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.УплаченоНакопительная, 0)
	|		КОГДА СуммыВзносов.КатегорияЗастрахованныхЛиц В (&КатегорииЧленовЭкипажаМорскихСудов)
	|			ТОГДА 0
	|		КОГДА СуммыВзносов.ФиксДоуплаченныеВзносы
	|			ТОГДА СуммыВзносов.ДоУплаченоНакопительная
	|		ИНАЧЕ СуммыВзносов.УплаченоНакопительная - ЕСТЬNULL(ВзносыЗаКорректируемыйПериод.УплаченоНакопительная, 0)
	|	КОНЕЦ КАК ДоУплаченоНакопительная,
	|	СуммыВзносов.ФиксНачисленныеВзносы,
	|	СуммыВзносов.ФиксУплаченныеВзносы,
	|	ЛОЖЬ КАК ОтменяемыеСведения
	|ПОМЕСТИТЬ ВТВзносыВПФР
	|ИЗ
	|	ВТСуммыВзносов КАК СуммыВзносов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыЗаКорректируемыйПериод КАК ВзносыЗаКорректируемыйПериод
	|		ПО СуммыВзносов.ФизическоеЛицо = ВзносыЗаКорректируемыйПериод.ФизическоеЛицо
	|			И СуммыВзносов.КатегорияЗастрахованныхЛиц = ВзносыЗаКорректируемыйПериод.КатегорияЗастрахованныхЛиц
	|			И СуммыВзносов.ТипДоговора = ВзносыЗаКорректируемыйПериод.ТипДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВзносыЗаКорректируемыйПериод.ФизическоеЛицо,
	|	ВзносыЗаКорректируемыйПериод.КатегорияЗастрахованныхЛиц,
	|	ВзносыЗаКорректируемыйПериод.ТипДоговора,
	|	0,
	|	0,
	|	0,
	|	0,
	|	-СУММА(ВзносыЗаКорректируемыйПериод.НачисленоСтраховая),
	|	-СУММА(ВзносыЗаКорректируемыйПериод.НачисленоНакопительная),
	|	-СУММА(ВзносыЗаКорректируемыйПериод.УплаченоСтраховая),
	|	-СУММА(ВзносыЗаКорректируемыйПериод.УплаченоНакопительная),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	ВТВзносыЗаКорректируемыйПериод КАК ВзносыЗаКорректируемыйПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыВзносов КАК Взносы
	|		ПО ВзносыЗаКорректируемыйПериод.ФизическоеЛицо = Взносы.ФизическоеЛицо
	|			И ВзносыЗаКорректируемыйПериод.КатегорияЗастрахованныхЛиц = Взносы.КатегорияЗастрахованныхЛиц
	|			И ВзносыЗаКорректируемыйПериод.ТипДоговора = Взносы.ТипДоговора
	|ГДЕ
	|	Взносы.ФизическоеЛицо ЕСТЬ NULL 
	|	И &ОтменяющиеСведения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзносыЗаКорректируемыйПериод.ФизическоеЛицо,
	|	ВзносыЗаКорректируемыйПериод.КатегорияЗастрахованныхЛиц,
	|	ВзносыЗаКорректируемыйПериод.ТипДоговора";
	
	Если ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено Тогда
		ТекстУсловияКатегорияЗЛ = "ИСТИНА"
	Иначе
		ТекстУсловияКатегорияЗЛ = "СтраховыеВзносыПереданныеВПФР.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКатегория", ТекстУсловияКатегорияЗЛ);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловияТипДоговора = "ИСТИНА"
	Иначе
		ТекстУсловияТипДоговора = "СтраховыеВзносыПереданныеВПФР.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипДоговора", ТекстУсловияТипДоговора);
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		ТекстУсловияФизическиеЛица = "ИСТИНА"
	Иначе
		ТекстУсловияФизическиеЛица = "СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо В (&СписокФизическихЛиц)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФизическиеЛица", ТекстУсловияФизическиеЛица);
	
	Запрос.Выполнить();

КонецПроцедуры

Функция ВзносыДляНулевыхСведений(МенеджерВременныхТаблиц)	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	НачисленоЗаОтчетныйПериодФормирования.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачисленоЗаОтчетныйПериодФормирования.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	0 КАК УплаченоСтраховая,
	|	0 КАК УплаченоНакопительная,
	|	0 КАК ДоУплаченоСтраховая,
	|	0 КАК ДоУплаченоНакопительная,
	|	НачисленоЗаОтчетныйПериодФормирования.ТипДоговора КАК ТипДоговора,
	|	0 КАК НачисленоСтраховая,
	|	0 КАК НачисленоНакопительная,
	|	0 КАК ДоНачисленоСтраховая,
	|	0 КАК ДоНачисленоНакопительная,
	|	ЛОЖЬ КАК ФиксНачисленныеВзносы,
	|	ЛОЖЬ КАК ФиксУплаченныеВзносы,
	|	ЛОЖЬ КАК ФиксДоНачисленныеВзносы,
	|	ЛОЖЬ КАК ФиксДоУплаченныеВзносы
	|ИЗ
	|	ВТИсчисленныеВзносыВПФР КАК НачисленоЗаОтчетныйПериодФормирования";
	
	Возврат Запрос.Выполнить().Выгрузить();	
КонецФункции	

Процедура СоздатьВТКатегорииЗастрахованныхЛиц(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ИмяВТИсточникаДанных)
	УстановитьПривилегированныйРежим(Истина);
	
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНестрахуемыхДоходов", СписокНестрахуемыхВидовДохода());
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОтбора.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
	|ИЗ
	|	#ТаблицаОтбора КАК ТаблицаОтбора ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаОтбора", ИмяВТИсточникаДанных);
	
	Запрос.Выполнить();
	
	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(Запрос.МенеджерВременныхТаблиц, Год(ОтчетныйПериод));
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныхСведенийОДоходах(ОтчетныйПериод, ОкончаниеПериода, ОкончаниеПериода, Запрос.МенеджерВременныхТаблиц, Ложь,,,,,Истина);
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|				ТОГДА СведенияОДоходах.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъектНестрахуемых,
	|	СУММА(СведенияОДоходах.Сумма) КАК ВесьОбъект,
	|	СведенияОДоходах.Период КАК МесяцОтчетногоПериода,
	|	СведенияОДоходах.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСоставДоходов
	|ИЗ
	|	ВТСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	ЕСТЬNULL(СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц, ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка)) КАК КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТКатегорииЗастрахованныхЛиц
	|ИЗ
	|	ВТСведенияОДоходах КАК СведенияОДоходах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|		ПО СведенияОДоходах.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|			И СведенияОДоходах.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	|			И (ГОД(СведенияОДоходах.Период) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
	|			И (СведенияОДоходах.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоставДоходов КАК СоставДоходов
	|		ПО СведенияОДоходах.ФизическоеЛицо = СоставДоходов.ФизическоеЛицо
	|			И СведенияОДоходах.Период = СоставДоходов.МесяцОтчетногоПериода
	|ГДЕ
	|	(ЕСТЬNULL(СоставДоходов.ВесьОбъект, 0) = 0
	|			ИЛИ ЕСТЬNULL(СоставДоходов.ВесьОбъект, 0) <> ЕСТЬNULL(СоставДоходов.ОбъектНестрахуемых, 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТФизЛицаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазмерыТарифныхСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОбИнвалидности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИспользуемыеТарифы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОписаниеТарифов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСтавкаВзносаНаСтрахованиеОтНесчастныхСлучаевСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСведенияОДоходах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСоставДоходов";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТДанныеРаздела66(МенеджерВременныхТаблиц, Организация, ТекущийПериод, КорректируемыйПериод, ТипСведений) Экспорт 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если КорректируемыйПериод >= '20140101' 
		И ТипСведений = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
	
		АктивныйКомплектПериода = Справочники.КомплектыОтчетностиПерсУчета.ОписаниеАктивногоКомплектаПериода(Организация, КорректируемыйПериод, Ложь, Истина);
	
		Если АктивныйКомплектПериода <> Неопределено
			И АктивныйКомплектПериода.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены Тогда
		
			ТипыСведений = Новый Массив;
			ТипыСведений.Добавить(Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ);
			ТипыСведений.Добавить(Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ);
			
			КорректирующиеДокументы = Справочники.КомплектыОтчетностиПерсУчета.ДокументыСЗВ6Комплекта(АктивныйКомплектПериода.Ссылка, ТипыСведений);
		Иначе
			КорректирующиеДокументы = Новый Массив;
		КонецЕсли;	
		
		Справочники.КомплектыОтчетностиПерсУчета.СформироватьВТСДаннымиДокументовКомплекта(
			МенеджерВременныхТаблиц,
			КорректирующиеДокументы, ,
			"ВТДанныеКорректирующихДокументовПериода");
			
		КорректируемыеДокументы = Справочники.КомплектыОтчетностиПерсУчета.КорректируемыеДокументы(Организация, ТекущийПериод, КорректируемыйПериод);	
		
		ПараметрыОтбора = СтруктураОтбораДанныхДляКвартальнойОтчетности();
		СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, КорректируемыеДокументы, ПараметрыОтбора);	
			
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо,
		|	КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка
		|ПОМЕСТИТЬ ВТКорректируемыеРазделы6ПоЗастрахованнымЛицам
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыПоЗастрахованнымЛицам
		|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = КорректируемыеДокументыПоЗастрахованнымЛицам.ФизическоеЛицо
		|			И (КорректируемыеДокументыПоЗастрахованнымЛицам.Ссылка ССЫЛКА Документ.ПачкаРазделов6РасчетаРСВ_1)
		|			И (КорректируемыеДокументыПоЗастрахованнымЛицам.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Корректирующая))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеКорректирующихДокументовПериода.Сотрудник КАК ФизическоеЛицо,
		|	ДанныеКорректирующихДокументовПериода.КорректируемыйПериод,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ДанныеКорректирующихДокументовПериода.Ссылка ССЫЛКА Документ.ПачкаРазделов6РасчетаРСВ_1
		|				ТОГДА ДанныеКорректирующихДокументовПериода.ДоначисленоСтраховая
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДоначисленоСтраховая,
		|	СУММА(ДанныеКорректирующихДокументовПериода.ДоначисленоНакопительная) КАК ДоначисленоНакопительная,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеКорректирующихДокументовПериода.Ссылка ССЫЛКА Документ.ПачкаРазделов6РасчетаРСВ_1
		|				ТОГДА ДанныеКорректирующихДокументовПериода.ДоначисленоСтраховая
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ДоначисленоНаОПС
		|ПОМЕСТИТЬ ВТДанныеРаздела66
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК ЗастрахованныеЛицаДляПачекСЗВ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеКорректирующихДокументовПериода КАК ДанныеКорректирующихДокументовПериода
		|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = ДанныеКорректирующихДокументовПериода.Сотрудник
		|			И (ДанныеКорректирующихДокументовПериода.ДоначисленоСтраховая <> 0
		|				ИЛИ ДанныеКорректирующихДокументовПериода.ДоначисленоНакопительная <> 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКорректируемыеРазделы6ПоЗастрахованнымЛицам КАК КорректируемыеРазделы6ПоЗастрахованнымЛицам
		|		ПО ЗастрахованныеЛицаДляПачекСЗВ.ФизическоеЛицо = КорректируемыеРазделы6ПоЗастрахованнымЛицам.ФизическоеЛицо
		|ГДЕ
		|	КорректируемыеРазделы6ПоЗастрахованнымЛицам.Ссылка ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеКорректирующихДокументовПериода.Сотрудник,
		|	ДанныеКорректирующихДокументовПериода.КорректируемыйПериод
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректируемыеРазделы6ПоЗастрахованнымЛицам.ФизическоеЛицо,
		|	ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения.КорректируемыйПериод,
		|	СУММА(ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения.ДоначисленоСтраховая),
		|	СУММА(ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения.ДоначисленоНакопительная),
		|	СУММА(ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения.ДоначисленоНаОПС)
		|ИЗ
		|	ВТКорректируемыеРазделы6ПоЗастрахованнымЛицам КАК КорректируемыеРазделы6ПоЗастрахованнымЛицам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.КорректирующиеСведения КАК ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения
		|		ПО КорректируемыеРазделы6ПоЗастрахованнымЛицам.ФизическоеЛицо = ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения.Сотрудник
		|			И КорректируемыеРазделы6ПоЗастрахованнымЛицам.Ссылка = ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректируемыеРазделы6ПоЗастрахованнымЛицам.ФизическоеЛицо,
		|	ПачкаРазделов6РасчетаРСВ_1КорректирующиеСведения.КорректируемыйПериод";
		
	Иначе	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК КорректируемыйПериод,
		|	0 КАК ДоначисленоСтраховая,
		|	0 КАК ДоначисленоНакопительная,
		|	0 КАК ДоначисленоНаОПС
		|ПОМЕСТИТЬ ВТДанныеРаздела66";
		
	КонецЕсли;	
	
	Запрос.Выполнить();

КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// Получение данных о заработке для ПФР

Функция ПараметрыДляСоздатьВТСведенияОЗаработке() Экспорт
	СтруктураПараметров = Новый Структура;
	
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	СтруктураПараметров.Вставить("ИсточникДанныхСведенийОЗаработке", ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета);
	СтруктураПараметров.Вставить("НулевыеСведения", Ложь);
	СтруктураПараметров.Вставить("УчитываемыеДокументы");
	СтруктураПараметров.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	СтруктураПараметров.Вставить("КорректируемыеДокументы", Новый Массив);
	СтруктураПараметров.Вставить("СпециальныйДокумент2015года", Ложь);

	
	Возврат СтруктураПараметров;
КонецФункции	

Процедура СоздатьВТСведенияОЗаработке2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора) Экспорт
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();	
	
	Если ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета Тогда
			
		СоздатьВТСведенияОЗаработкеИзДанныхУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);	
		
	ИначеЕсли ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов Тогда 
		
		СоздатьВТСведенияОЗаработкеИзДанныхУчетаИФиксДанныхДокументов2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);	
		
	ИначеЕсли ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеКорректируемыхДокументов Тогда		
		
		СоздатьВТСведенияОЗаработкеИзДаннымКорректируемыхДокументов2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);
		
	Иначе
		
		СоздатьВТСведенияОЗаработкеДляОтменяющихСведений2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора)	
		
	КонецЕсли;
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработкеДляОтменяющихСведений2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора) 
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
	
	Если ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеКорректируемыхДокументовОтменяемые Тогда
		СоздатьВТСведенияОЗаработкеИзДаннымКорректируемыхДокументов2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, "Промежуточный");	
	ИначеЕсли ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаОтменяемые Тогда 
		СоздатьВТСведенияОЗаработкеИзДанныхУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, "Промежуточный");	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.Месяц,
	|	0 КАК Заработок,
	|	0 КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	0 КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	0 КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ЛОЖЬ КАК ФиксЗаработок
	|ПОМЕСТИТЬ ВТСведенияОЗаработке
	|ИЗ
	|	ВТСведенияОЗаработкеПромежуточный КАК СведенияОЗаработке
	|ГДЕ
	|	СведенияОЗаработке.Месяц = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда КАК КлассУсловийТруда,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Месяц,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФиксЗаработок КАК ФиксЗаработок
	|ПОМЕСТИТЬ ВТСведенияОЗаработкеПоКлассамУсловийТруда
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТрудаПромежуточный КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСведенияОЗаработкеПромежуточный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСведенияОЗаработкеПоКлассамУсловийТрудаПромежуточный";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработке2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора) Экспорт
	ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();	
	
	Если Год(ОтчетныйПериод) = 2013 
		И Не ПараметрыПолученияЗаработка.НулевыеСведения Тогда 
		
		Если ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчета Тогда
			
			СоздатьВТСведенияОЗаработкеИзДанныхУчета2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);	
			
		ИначеЕсли ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаИФиксированныеДанныеДокументов Тогда 
			
			СоздатьВТСведенияОЗаработкеИзДанныхУчетаИФиксДанныхДокументов2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);	
			
		ИначеЕсли ПараметрыПолученияЗаработка.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеКорректируемыхДокументов Тогда		
			
			СоздатьВТСведенияОЗаработкеИзДаннымКорректируемыхДокументов2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора);
			
		КонецЕсли;
	Иначе 
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	NULL КАК ФизическоеЛицо,
		|	NULL КАК Месяц,
		|	NULL КАК Заработок,
		|	NULL КАК ОблагаетсяВзносами,
		|	NULL КАК ОблагаетсяВзносамиДоПредельнойВеличины,
		|	NULL КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
		|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
		|	NULL КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
		|	NULL КАК КатегорияЗастрахованныхЛиц,
		|	NULL КАК ТипДоговора,
		|	NULL КАК ФиксЗаработок
		|ПОМЕСТИТЬ ВТСведенияОЗаработке
		|ГДЕ
		|	ЛОЖЬ";
		
		Запрос.Выполнить();
	КонецЕсли;	
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработкеИзДанныхУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТ = "")
	
	ТаблицыЗаработка = Новый Структура("СведенияОЗаработке, СведенияОЗаработкеПоКлассамУсловийТруда");
	
	СоздатьТаблицыСведенийОЗаработке(Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТ, ТаблицыЗаработка);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СведенияОЗаработкеПоКлассамУсловийТруда", ТаблицыЗаработка.СведенияОЗаработкеПоКлассамУсловийТруда);
	Запрос.УстановитьПараметр("СведенияОЗаработке", ТаблицыЗаработка.СведенияОЗаработке);
	ТаблицыЗаработка = Неопределено;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПараметрыПолученияЗаработка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ 
		И ПараметрыПолученияЗаработка.КорректируемыеДокументы.Количество() > 0 Тогда 
		
		СоздатьВТСведенияОЗаработкеИзДаннымКорректируемыхДокументов2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, "Корректируемый");
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо,
		|	0 КАК Месяц,
		|	0 КАК Заработок,
		|	0 КАК ОблагаетсяВзносамиДоПредельнойВеличины,
		|	0 КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
		|	0 КАК ПоДоговорамГПХДоПредельнойВеличины,
		|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка) КАК КатегорияЗастрахованныхЛиц,
		|	ЛОЖЬ КАК ФиксЗаработок
		|ПОМЕСТИТЬ ВТСведенияОЗаработкеКорректируемый
		|ГДЕ
		|	ЛОЖЬ";
		
		Запрос.Выполнить();
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОЗаработке.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОЗаработке.Месяц КАК Месяц,
	|	СведенияОЗаработке.Заработок КАК Заработок,
	|	СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработке.ФиксЗаработок КАК ФиксЗаработок
	|ПОМЕСТИТЬ ВТТаблицаСведенияОЗаработке
	|ИЗ
	|	&СведенияОЗаработке КАК СведенияОЗаработке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	СведенияОЗаработке.Месяц,
	|	СУММА(СведенияОЗаработке.Заработок) КАК Заработок,
	|	СУММА(СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СУММА(СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СУММА(СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц,
	|	МАКСИМУМ(СведенияОЗаработке.ФиксЗаработок) КАК ФиксЗаработок
	|ПОМЕСТИТЬ #ВТСведенияОЗаработке
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОЗаработке.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОЗаработке.Месяц КАК Месяц,
	|		СведенияОЗаработке.Заработок КАК Заработок,
	|		СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|		СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|		СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины КАК ПоДоговорамГПХДоПредельнойВеличины,
	|		СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		СведенияОЗаработке.ФиксЗаработок КАК ФиксЗаработок
	|	ИЗ
	|		ВТТаблицаСведенияОЗаработке КАК СведенияОЗаработке
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОЗаработкеКорректируемый.ФизическоеЛицо,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		СведенияОЗаработкеКорректируемый.КатегорияЗастрахованныхЛиц,
	|		ЛОЖЬ
	|	ИЗ
	|		ВТСведенияОЗаработкеКорректируемый КАК СведенияОЗаработкеКорректируемый
	|	ГДЕ
	|		СведенияОЗаработкеКорректируемый.Месяц <> 0) КАК СведенияОЗаработке
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗаработке.ФизическоеЛицо,
	|	СведенияОЗаработке.Месяц,
	|	СведенияОЗаработке.КатегорияЗастрахованныхЛиц";
	
	ТекстЗапросаВТСведенияОЗаработкеПоКлассамУсловийТруда = 
	"ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Месяц,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда,
	|	ЛОЖЬ КАК ФиксЗаработок
	|ПОМЕСТИТЬ ВТСведенияОЗаработкеПоКлассамУсловийТруда
	|ИЗ
	|	&СведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСведенияОЗаработке", "ВТСведенияОЗаработке" + ПостфиксВТ);
	ТекстЗапросаВТСведенияОЗаработкеПоКлассамУсловийТруда = СтрЗаменить(ТекстЗапросаВТСведенияОЗаработкеПоКлассамУсловийТруда, "ВТСведенияОЗаработкеПоКлассамУсловийТруда", "ВТСведенияОЗаработкеПоКлассамУсловийТруда" + ПостфиксВТ);

	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТСведенияОЗаработкеПоКлассамУсловийТруда);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьТаблицыСведенийОЗаработке(Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТ, ТаблицыЗаработка)
	
	Если ОтчетныйПериод < '20150401' Тогда
		СоздатьТаблицыСведенийОЗаработке2014(Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТ, ТаблицыЗаработка)
	Иначе
		СоздатьТаблицыСведенийОЗаработке2015(Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТ, ТаблицыЗаработка)
	КонецЕсли;
	
КонецПроцедуры	

Процедура СоздатьТаблицыСведенийОЗаработке2014(Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТ, ТаблицыЗаработка)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокНестрахуемыхДоходов", СписокНестрахуемыхВидовДохода());
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим"));
	Запрос.УстановитьПараметр("ЕНВД", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ЕНВД")); 
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("НачалоПериода", ОтчетныйПериод);
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ОтчетныйПериод));
	
	ЭтоИсходныеСведения = (ПараметрыПолученияЗаработка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		МенеджерВременныхТаблицПромежуточный = УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
													НачалоГода(ОтчетныйПериод), 
													ОкончаниеПериода, 
													Организация, , 
													Истина, ,
													Истина,,,,,,,
													ЭтоИсходныеСведения);
	Иначе
		МенеджерВременныхТаблицПромежуточный = Новый МенеджерВременныхТаблиц;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицПромежуточный;
		Запрос.УстановитьПараметр("ФизЛица", ПараметрыОтбора.СписокФизическихЛиц);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	&Организация КАК Организация,
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизЛица)";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
			НачалоГода(ОтчетныйПериод), 
			ОкончаниеПериода, 
			Организация, 
			МенеджерВременныхТаблицПромежуточный, 
			Истина, ,
			Истина,,,,,,,
			ЭтоИсходныеСведения); 
			
	КонецЕсли;
	
	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(МенеджерВременныхТаблицПромежуточный);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицПромежуточный;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахПоТарифам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахПоТарифам.Период КАК Период,
	|	СведенияОДоходахПоТарифам.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходахПоТарифам.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
	|	СведенияОДоходахПоТарифам.Месяц КАК Месяц,
	|	СведенияОДоходахПоТарифам.Заработок КАК Заработок,
	|	СведенияОДоходахПоТарифам.ОблагаетсяВзносамиДоПредельнойВеличины КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОДоходахПоТарифам.ПоДоговорамГПХДоПредельнойВеличины КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОДоходахПоТарифам.ОблагаетсяВзносамиСвышеПредельнойВеличины КАК ОблагаетсяВзносамиСвышеПредельнойВеличины
	|ПОМЕСТИТЬ ВТДоходыПоТарифам
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОДоходах.Период КАК Период,
	|		0 КАК Месяц,
	|		СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходах.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
	|		СведенияОДоходах.Сумма КАК Заработок,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.СуммаПревысившаяПределПФР КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.БазаПФРПоТрудовомуДоговору - (СведенияОДоходах.СуммаПревысившаяПределПФР - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|		СведенияОДоходах.СуммаПревысившаяПределПФР КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|		СведенияОДоходах.БазаТяжелыеИПрочиеРаботыПоТрудовомуДоговору КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|		СведенияОДоходах.БазаПодземныеИВредныеРаботыПоТрудовомуДоговору КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|	ГДЕ
	|		СведенияОДоходах.Организация = &Организация
	|		И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|		И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|		И СведенияОДоходах.ЗастрахованПФР
	|		И СведенияОДоходах.Период МЕЖДУ &НачалоГода И &ОкончаниеПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОДоходах.ФизическоеЛицо,
	|		СведенияОДоходах.Период,
	|		МЕСЯЦ(СведенияОДоходах.Период),
	|		СведенияОДоходах.ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходах.ВидЗастрахованногоЛица,
	|		СведенияОДоходах.Сумма,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.СуммаПревысившаяПределПФР,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.БазаПФРПоТрудовомуДоговору - (СведенияОДоходах.СуммаПревысившаяПределПФР - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору),
	|		СведенияОДоходах.СуммаПревысившаяПределПФР,
	|		СведенияОДоходах.БазаТяжелыеИПрочиеРаботыПоТрудовомуДоговору,
	|		СведенияОДоходах.БазаПодземныеИВредныеРаботыПоТрудовомуДоговору
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|	ГДЕ
	|		СведенияОДоходах.Организация = &Организация
	|		И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|		И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|		И СведенияОДоходах.ЗастрахованПФР
	|		И СведенияОДоходах.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода) КАК СведенияОДоходахПоТарифам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.Месяц КАК Месяц,
	|	СУММА(Доходы.Заработок) КАК Заработок,
	|	СУММА(Доходы.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СУММА(Доходы.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СУММА(Доходы.ПоДоговорамГПХДоПредельнойВеличины) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
	|	ЛОЖЬ КАК ФиксЗаработок
	|ИЗ
	|	ВТДоходыПоТарифам КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|		ПО Доходы.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|			И Доходы.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	|			И (ГОД(Доходы.Период) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	Доходы.Месяц,
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Доходы.Заработок) <> 0
	|		ИЛИ СУММА(Доходы.ОблагаетсяВзносамиДоПредельнойВеличины) <> 0
	|		ИЛИ СУММА(Доходы.ОблагаетсяВзносамиСвышеПредельнойВеличины) <> 0
	|		ИЛИ СУММА(Доходы.ПоДоговорамГПХДоПредельнойВеличины) <> 0)";
	
	ТаблицыЗаработка.СведенияОЗаработке = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период КАК Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботы КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботы КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка) КАК КлассУсловийТруда
	|ПОМЕСТИТЬ ВТСведенияОЗаработкеПоКлассамУсловийТруда
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыОпасный,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыОпасный,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный1,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный1,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный2,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный2,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный3,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный3,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный4,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный4,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	0 КАК Месяц,
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|ГДЕ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Период МЕЖДУ &НачалоГода И &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) <> 0
	|		ИЛИ СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	МЕСЯЦ(СведенияОЗаработкеПоКлассамУсловийТруда.Период),
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах),
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах),
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|ГДЕ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	МЕСЯЦ(СведенияОЗаработкеПоКлассамУсловийТруда.Период),
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) <> 0
	|		ИЛИ СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) <> 0)";
	
	ТаблицыЗаработка.СведенияОЗаработкеПоКлассамУсловийТруда = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Процедура СоздатьТаблицыСведенийОЗаработке2015(Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТ, ТаблицыЗаработка)
	
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокНестрахуемыхДоходов", СписокНестрахуемыхВидовДохода());
	Запрос.УстановитьПараметр("НачалоПериода", ОтчетныйПериод);
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ОтчетныйПериод));
	
	// Рассчитываем данные для заполнения строк 400 и 700 - нарастающим итогом за год, с учетом исправлений.
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		
		МенеджерВременныхТаблицПромежуточный = УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
													НачалоГода(ОтчетныйПериод), 
													ОкончаниеПериода, 
													Организация, , 
													Истина, ,
													Истина,,,,,,
													?(ПараметрыПолученияЗаработка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,ОкончаниеПериода,'00010101'),
													Ложь);
													
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицПромежуточный;
		
	Иначе

		МенеджерВременныхТаблицПромежуточный = Новый МенеджерВременныхТаблиц;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицПромежуточный;
		Запрос.УстановитьПараметр("ФизЛица", ПараметрыОтбора.СписокФизическихЛиц);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизЛица)";
		
		Запрос.Выполнить();
		
		УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
			НачалоГода(ОтчетныйПериод), 
			ОкончаниеПериода, 
			Организация, 
			МенеджерВременныхТаблицПромежуточный, 
			Истина, ,
			Истина,,,,,,
			?(ПараметрыПолученияЗаработка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ,ОкончаниеПериода,'00010101'),
			Ложь);
			
	КонецЕсли;
			
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходах.ВидЗастрахованногоЛица,
	|	СведенияОДоходах.Сумма,
	|	СведенияОДоходах.БазаПФР,
	|	СведенияОДоходах.СуммаПревысившаяПределПФР,
	|	СведенияОДоходах.БазаПФРПоТрудовомуДоговору,
	|	СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыПоТрудовомуДоговору,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыПоТрудовомуДоговору
	|ПОМЕСТИТЬ ВТДоходыСУчетомПерерасчетов
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|	И СведенияОДоходах.Период МЕЖДУ &НачалоГода И &ОкончаниеПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период КАК Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботы КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботы КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка) КАК КлассУсловийТруда
	|ПОМЕСТИТЬ ВТДоходыПоКлассамУсловийТрудаСУчетомПерерасчетов
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыОпасный,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыОпасный,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный1,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный1,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный2,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный2,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный3,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный3,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный4,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный4,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРасширенныеСведенияОДоходах
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазмерыТарифныхСтавок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТДанныеОбИнвалидности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТИспользуемыеТарифы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТОписаниеТарифов";
	Запрос.Выполнить();
	
	// Рассчитываем данные для заполнения строк 40х и 70х - за текущий квартал, для исходных форм - без учета исправлений.
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(
		НачалоГода(ОтчетныйПериод), 
		ОкончаниеПериода, 
		Организация, 
		МенеджерВременныхТаблицПромежуточный, 
		Истина, ,
		Истина,,,,,,,
		ПараметрыПолученияЗаработка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ); 
			
	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(МенеджерВременныхТаблицПромежуточный, Год(ОтчетныйПериод));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахПоТарифам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	СведенияОДоходахПоТарифам.Период КАК Период,
	|	СведенияОДоходахПоТарифам.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходахПоТарифам.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
	|	СведенияОДоходахПоТарифам.Месяц КАК Месяц,
	|	СведенияОДоходахПоТарифам.Заработок КАК Заработок,
	|	СведенияОДоходахПоТарифам.ОблагаетсяВзносамиДоПредельнойВеличины КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОДоходахПоТарифам.ПоДоговорамГПХДоПредельнойВеличины КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОДоходахПоТарифам.ОблагаетсяВзносамиСвышеПредельнойВеличины КАК ОблагаетсяВзносамиСвышеПредельнойВеличины
	|ПОМЕСТИТЬ ВТДоходыПоТарифам
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОДоходах.Период КАК Период,
	|		0 КАК Месяц,
	|		СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходах.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
	|		СведенияОДоходах.Сумма КАК Заработок,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.СуммаПревысившаяПределПФР КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.БазаПФРПоТрудовомуДоговору - (СведенияОДоходах.СуммаПревысившаяПределПФР - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|		СведенияОДоходах.СуммаПревысившаяПределПФР КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|		СведенияОДоходах.БазаТяжелыеИПрочиеРаботыПоТрудовомуДоговору КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|		СведенияОДоходах.БазаПодземныеИВредныеРаботыПоТрудовомуДоговору КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	|	ИЗ
	|		ВТДоходыСУчетомПерерасчетов КАК СведенияОДоходах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОДоходах.ФизическоеЛицо,
	|		СведенияОДоходах.Период,
	|		МЕСЯЦ(СведенияОДоходах.Период),
	|		СведенияОДоходах.ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходах.ВидЗастрахованногоЛица,
	|		СведенияОДоходах.Сумма,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.СуммаПревысившаяПределПФР,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.БазаПФРПоТрудовомуДоговору - (СведенияОДоходах.СуммаПревысившаяПределПФР - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору),
	|		СведенияОДоходах.СуммаПревысившаяПределПФР,
	|		СведенияОДоходах.БазаТяжелыеИПрочиеРаботыПоТрудовомуДоговору,
	|		СведенияОДоходах.БазаПодземныеИВредныеРаботыПоТрудовомуДоговору
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|	ГДЕ
	|		СведенияОДоходах.Организация = &Организация
	|		И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|		И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|		И СведенияОДоходах.ЗастрахованПФР
	|		И СведенияОДоходах.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода) КАК СведенияОДоходахПоТарифам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.Месяц КАК Месяц,
	|	СУММА(Доходы.Заработок) КАК Заработок,
	|	СУММА(Доходы.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СУММА(Доходы.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СУММА(Доходы.ПоДоговорамГПХДоПредельнойВеличины) КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
	|	ЛОЖЬ КАК ФиксЗаработок
	|ИЗ
	|	ВТДоходыПоТарифам КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|		ПО Доходы.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|			И Доходы.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	|			И (ГОД(Доходы.Период) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	Доходы.Месяц,
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Доходы.Заработок) <> 0
	|		ИЛИ СУММА(Доходы.ОблагаетсяВзносамиДоПредельнойВеличины) <> 0
	|		ИЛИ СУММА(Доходы.ОблагаетсяВзносамиСвышеПредельнойВеличины) <> 0
	|		ИЛИ СУММА(Доходы.ПоДоговорамГПХДоПредельнойВеличины) <> 0)";
	
	ТаблицыЗаработка.СведенияОЗаработке = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период КАК Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботы КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботы КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.ПустаяСсылка) КАК КлассУсловийТруда
	|ПОМЕСТИТЬ ВТСведенияОЗаработкеПоКлассамУсловийТруда
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыОпасный,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыОпасный,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Опасный)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный1,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный1,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный1)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный2,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный2,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный2)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный3,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный3,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный3)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.БазаПодземныеИВредныеРаботыВредный4,
	|	СведенияОДоходах.БазаТяжелыеИПрочиеРаботыВредный4,
	|	ЗНАЧЕНИЕ(Перечисление.КлассыУсловийТрудаПоРезультатамСпециальнойОценки.Вредный4)
	|ИЗ
	|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|ГДЕ
	|	СведенияОДоходах.Организация = &Организация
	|	И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|	И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|	И СведенияОДоходах.ЗастрахованПФР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	0 КАК Месяц,
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|ИЗ
	|	ВТДоходыПоКлассамУсловийТрудаСУчетомПерерасчетов КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|ГДЕ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Период МЕЖДУ &НачалоГода И &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) <> 0
	|		ИЛИ СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	МЕСЯЦ(СведенияОЗаработкеПоКлассамУсловийТруда.Период),
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах),
	|	СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах),
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТруда КАК СведенияОЗаработкеПоКлассамУсловийТруда
	|ГДЕ
	|	СведенияОЗаработкеПоКлассамУсловийТруда.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	МЕСЯЦ(СведенияОЗаработкеПоКлассамУсловийТруда.Период),
	|	СведенияОЗаработкеПоКлассамУсловийТруда.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТруда.КлассУсловийТруда
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) <> 0
	|		ИЛИ СУММА(СведенияОЗаработкеПоКлассамУсловийТруда.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) <> 0)";
	
	ТаблицыЗаработка.СведенияОЗаработкеПоКлассамУсловийТруда = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработкеИзДанныхУчета2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ИмяВТРезультат = "ВТСведенияОЗаработке")
	ГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("СписокНестрахуемыхДоходов", СписокНестрахуемыхВидовДохода());
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим")); 
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим"));
	Запрос.УстановитьПараметр("ЕНВД", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ЕНВД")); 
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("НачалоПериода", ОтчетныйПериод);
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	ЭтоИсходныеСведения = (ПараметрыПолученияЗаработка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);	
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		МенеджерВременныхТаблицПромежуточный = УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(ОтчетныйПериод, ОкончаниеПериода, Организация, , Истина, ,Истина,,,,,,, ЭтоИсходныеСведения);
	Иначе
		МенеджерВременныхТаблицПромежуточный = Новый МенеджерВременныхТаблиц;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицПромежуточный;
		Запрос.УстановитьПараметр("ФизЛица", ПараметрыОтбора.СписокФизическихЛиц);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	&Организация КАК Организация,
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизЛицаОрганизаций
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&ФизЛица)";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(ОтчетныйПериод, ОкончаниеПериода, Организация, МенеджерВременныхТаблицПромежуточный, Истина, ,Истина,,,,,,, ЭтоИсходныеСведения); // только для ПФР
	КонецЕсли;
	
	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(МенеджерВременныхТаблицПромежуточный);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблицПромежуточный;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.Месяц,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходах.ТипДоговора,
	|	СУММА(СведенияОДоходах.Заработок) КАК Заработок,
	|	СУММА(СведенияОДоходах.ОблагаетсяВзносами) КАК ОблагаетсяВзносами,
	|	СУММА(СведенияОДоходах.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СУММА(СведенияОДоходах.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СУММА(СведенияОДоходах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(СведенияОДоходах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОДоходах.ВидЗастрахованногоЛица
	|ПОМЕСТИТЬ ВТДоходыПоТарифамДоговорам
	|ИЗ
	|	(ВЫБРАТЬ
	|		СведенияОДоходах.ФизическоеЛицо КАК ФизическоеЛицо,
	|		СведенияОДоходах.Период КАК Период,
	|		МЕСЯЦ(СведенияОДоходах.Период) КАК Месяц,
	|		СведенияОДоходах.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходах.ВидЗастрахованногоЛица КАК ВидЗастрахованногоЛица,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.Трудовой) КАК ТипДоговора,
	|		СведенияОДоходах.СуммаПоТрудовомуДоговору КАК Заработок,
	|		СведенияОДоходах.БазаПФРПоТрудовомуДоговору КАК ОблагаетсяВзносами,
	|		СведенияОДоходах.БазаПФРПоТрудовомуДоговору - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|		ВЫБОР
	|			КОГДА СведенияОДоходах.ВидТарифаСтраховыхВзносов В (&ОбщийНалоговыйРежим, &УпрощенныйНалоговыйРежим, &ЕНВД)
	|				ТОГДА СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|		СведенияОДоходах.БазаТяжелыеИПрочиеРаботыПоТрудовомуДоговору КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|		СведенияОДоходах.БазаПодземныеИВредныеРаботыПоТрудовомуДоговору КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|	ГДЕ
	|		СведенияОДоходах.Организация = &Организация
	|		И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|		И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|		И СведенияОДоходах.ЗастрахованПФР
	|		И СведенияОДоходах.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОДоходах.ФизическоеЛицо,
	|		СведенияОДоходах.Период,
	|		МЕСЯЦ(СведенияОДоходах.Период),
	|		СведенияОДоходах.ВидТарифаСтраховыхВзносов,
	|		СведенияОДоходах.ВидЗастрахованногоЛица,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ГражданскоПравовой),
	|		СведенияОДоходах.Сумма - СведенияОДоходах.СуммаПоТрудовомуДоговору,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.БазаПФРПоТрудовомуДоговору,
	|		СведенияОДоходах.БазаПФР - СведенияОДоходах.БазаПФРПоТрудовомуДоговору - (СведенияОДоходах.СуммаПревысившаяПределПФР - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору),
	|		ВЫБОР
	|			КОГДА СведенияОДоходах.ВидТарифаСтраховыхВзносов В (&ОбщийНалоговыйРежим, &УпрощенныйНалоговыйРежим, &ЕНВД)
	|				ТОГДА СведенияОДоходах.СуммаПревысившаяПределПФР - СведенияОДоходах.СуммаПревысившаяПределПФРПоТрудовомуДоговору
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		СведенияОДоходах.БазаТяжелыеИПрочиеРаботы - СведенияОДоходах.БазаТяжелыеИПрочиеРаботыПоТрудовомуДоговору,
	|		СведенияОДоходах.БазаПодземныеИВредныеРаботы - СведенияОДоходах.БазаПодземныеИВредныеРаботыПоТрудовомуДоговору
	|	ИЗ
	|		ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
	|	ГДЕ
	|		СведенияОДоходах.Организация = &Организация
	|		И СведенияОДоходах.ВидДохода <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|		И НЕ СведенияОДоходах.ВидДохода В (&СписокНестрахуемыхДоходов)
	|		И СведенияОДоходах.ЗастрахованПФР
	|		И СведенияОДоходах.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода) КАК СведенияОДоходах
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОДоходах.ФизическоеЛицо,
	|	СведенияОДоходах.Период,
	|	СведенияОДоходах.Месяц,
	|	СведенияОДоходах.ВидТарифаСтраховыхВзносов,
	|	СведенияОДоходах.ТипДоговора,
	|	СведенияОДоходах.ВидЗастрахованногоЛица
	|
	|ИМЕЮЩИЕ
	|	(СУММА(СведенияОДоходах.Заработок) <> 0
	|		ИЛИ СУММА(СведенияОДоходах.ОблагаетсяВзносами) <> 0
	|		ИЛИ СУММА(СведенияОДоходах.ОблагаетсяВзносамиДоПредельнойВеличины) <> 0
	|		ИЛИ СУММА(СведенияОДоходах.ОблагаетсяВзносамиСвышеПредельнойВеличины) <> 0
	|		ИЛИ СУММА(СведенияОДоходах.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) <> 0
	|		ИЛИ СУММА(СведенияОДоходах.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Доходы.Месяц - МЕСЯЦ(&ОтчетныйПериод) + 1 КАК Месяц,
	|	СУММА(Доходы.Заработок) КАК Заработок,
	|	СУММА(Доходы.ОблагаетсяВзносами) КАК ОблагаетсяВзносами,
	|	СУММА(Доходы.ОблагаетсяВзносамиДоПредельнойВеличины) КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СУММА(Доходы.ОблагаетсяВзносамиСвышеПредельнойВеличины) КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СУММА(Доходы.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СУММА(Доходы.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах) КАК ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
	|	Доходы.ТипДоговора,
	|	ЛОЖЬ КАК ФиксЗаработок
	|ИЗ
	|	ВТДоходыПоТарифамДоговорам КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|		ПО Доходы.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|			И Доходы.ВидЗастрахованногоЛица = СоответствиеТарифаИВидаЗЛКатегории.ВидЗастрахованногоЛица
	|			И (ГОД(Доходы.Период) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
	|ГДЕ
	|	&УсловиеКатегория
	|	И &УсловиеТипДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизическоеЛицо,
	|	Доходы.Месяц,
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
	|	Доходы.ТипДоговора";
		
	Если ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено Тогда
		ТекстУсловиеКатегория = "ИСТИНА";
	Иначе	
		ТекстУсловиеКатегория = "СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКатегория", ТекстУсловиеКатегория);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеТипДоговора = "ИСТИНА";
	Иначе	
		ТекстУсловиеТипДоговора = "Доходы.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипДоговора", ТекстУсловиеТипДоговора);
	
	СведенияОЗаработке = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("СведенияОЗаработке", СведенияОЗаработке);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ВТРезультат
	|ИЗ
	|	&СведенияОЗаработке КАК СведенияОЗаработке";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРезультат", ИмяВТРезультат);

	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработкеИзДанныхУчетаИФиксДанныхДокументов2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора)
	СоздатьВТСведенияОЗаработкеИзДанныхУчета2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, "ВТСведенияОЗаработкеИзДанныхУчета");	
	
	СоздатьВТФиксированныеСведенияОЗаработкеИзДокументов2013(МенеджерВременныхТаблиц, ПараметрыПолученияЗаработка, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗаработкеИзДанныхУчета.ФизическоеЛицо,
	|	СведенияОЗаработкеИзДанныхУчета.Месяц,
	|	СведенияОЗаработкеИзДанныхУчета.Заработок,
	|	СведенияОЗаработкеИзДанныхУчета.ОблагаетсяВзносами,
	|	СведенияОЗаработкеИзДанныхУчета.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработкеИзДанныхУчета.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработкеИзДанныхУчета.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработкеИзДанныхУчета.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработкеИзДанныхУчета.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработкеИзДанныхУчета.ТипДоговора,
	|	СведенияОЗаработкеИзДанныхУчета.ФиксЗаработок
	|ПОМЕСТИТЬ ВТСведенияОЗаработке
	|ИЗ
	|	ВТСведенияОЗаработкеИзДанныхУчета КАК СведенияОЗаработкеИзДанныхУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированныеСведенияОЗаработкеИзДокументов КАК ФиксированныеСведенияОЗаработкеИзДокументов
	|		ПО СведенияОЗаработкеИзДанныхУчета.ФизическоеЛицо = ФиксированныеСведенияОЗаработкеИзДокументов.ФизическоеЛицо
	|			И СведенияОЗаработкеИзДанныхУчета.КатегорияЗастрахованныхЛиц = ФиксированныеСведенияОЗаработкеИзДокументов.КатегорияЗастрахованныхЛиц
	|			И СведенияОЗаработкеИзДанныхУчета.ТипДоговора = ФиксированныеСведенияОЗаработкеИзДокументов.ТипДоговора
	|ГДЕ
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ФизическоеЛицо ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ФизическоеЛицо,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.Месяц,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.Заработок,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиДоПредельнойВеличины + ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ТипДоговора,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ФиксЗаработок
	|ИЗ
	|	ВТФиксированныеСведенияОЗаработкеИзДокументов КАК ФиксированныеСведенияОЗаработкеИзДокументов";
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработкеИзДанныхУчетаИФиксДанныхДокументов2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора)
	СоздатьВТСведенияОЗаработкеИзДанныхУчета2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, "ИзДанныхУчета");	
	
	СоздатьВТФиксированныеСведенияОЗаработкеИзДокументов2014(МенеджерВременныхТаблиц, ПараметрыПолученияЗаработка, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗаработкеИзДанныхУчета.ФизическоеЛицо,
	|	СведенияОЗаработкеИзДанныхУчета.Месяц,
	|	СведенияОЗаработкеИзДанныхУчета.Заработок,
	|	СведенияОЗаработкеИзДанныхУчета.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОЗаработкеИзДанныхУчета.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОЗаработкеИзДанныхУчета.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОЗаработкеИзДанныхУчета.КатегорияЗастрахованныхЛиц,
	|	СведенияОЗаработкеИзДанныхУчета.ФиксЗаработок
	|ПОМЕСТИТЬ ВТСведенияОЗаработке
	|ИЗ
	|	ВТСведенияОЗаработкеИзДанныхУчета КАК СведенияОЗаработкеИзДанныхУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированныеСведенияОЗаработкеИзДокументов КАК ФиксированныеСведенияОЗаработкеИзДокументов
	|		ПО СведенияОЗаработкеИзДанныхУчета.ФизическоеЛицо = ФиксированныеСведенияОЗаработкеИзДокументов.ФизическоеЛицо
	|ГДЕ
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ФизическоеЛицо ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ФизическоеЛицо,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.Месяц,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.Заработок,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ПоДоговорамГПХДоПредельнойВеличины,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.КатегорияЗастрахованныхЛиц,
	|	ФиксированныеСведенияОЗаработкеИзДокументов.ФиксЗаработок
	|ИЗ
	|	ВТФиксированныеСведенияОЗаработкеИзДокументов КАК ФиксированныеСведенияОЗаработкеИзДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета.ФизическоеЛицо,
	|	СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета.Месяц,
	|	СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета.КлассУсловийТруда,
	|	СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета.ФиксЗаработок
	|ПОМЕСТИТЬ ВТСведенияОЗаработкеПоКлассамУсловийТруда
	|ИЗ
	|	ВТСведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета КАК СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов КАК ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов
	|		ПО СведенияОЗаработкеПоКлассамУсловийТрудаИзДанныхУчета.ФизическоеЛицо = ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.ФизическоеЛицо
	|ГДЕ
	|	ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.ФизическоеЛицо ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.ФизическоеЛицо,
	|	ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.Месяц,
	|	ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.КлассУсловийТруда,
	|	ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов.ФиксЗаработок
	|ИЗ
	|	ВТФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов КАК ФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов";
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработкеИзДаннымКорректируемыхДокументов2014(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора, ПостфиксВТат = "")
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияЗаработка.УчитываемыеДокументы);
	
	СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, ПараметрыПолученияЗаработка.КорректируемыеДокументы, ПараметрыОтбора);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Месяц,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Заработок,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ПоДоговорамГПХДоПредельнойВеличины,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок КАК ФиксЗаработок
	|ПОМЕСТИТЬ #ВТСведенияОЗаработкеОсновной
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров
	|		ПО ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.Ссылка
	|			И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработке КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах
	|		ПО ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Сотрудник
	|			И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Ссылка
	|			И (&УсловиеСотрудники)
	|			И (ВЫБОР
	|				КОГДА ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КлассУсловийТруда КАК КлассУсловийТруда,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок КАК ФиксЗаработок
	|ПОМЕСТИТЬ #ВТСведенияОЗаработкеПоКлассамУсловийТруда
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров
	|		ПО ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.Ссылка
	|			И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработкеНаВредныхИТяжелыхРаботах КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|		ПО ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Сотрудник
	|			И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|			И (&УсловиеСотрудники)
	|			И (ВЫБОР
	|				КОГДА ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам";
	
		
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеСотрудники = "ИСТИНА";
	Иначе	
		ТекстУсловиеСотрудники = "ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник В (&СписокФизическихЛиц)";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудники", ТекстУсловиеСотрудники);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСведенияОЗаработкеОсновной", "ВТСведенияОЗаработке" + ПостфиксВТат);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСведенияОЗаработкеПоКлассамУсловийТруда", "ВТСведенияОЗаработкеПоКлассамУсловийТруда" + ПостфиксВТат);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТСведенияОЗаработкеИзДаннымКорректируемыхДокументов2013(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ПараметрыПолученияЗаработка, ПараметрыОтбора)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияЗаработка.УчитываемыеДокументы);
	
	СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, ПараметрыПолученияЗаработка.КорректируемыеДокументы, ПараметрыОтбора);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипДоговора КАК ТипДоговора,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Месяц,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Заработок,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины + ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины КАК ОблагаетсяВзносами,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ФиксЗаработок КАК ФиксЗаработок
	|ПОМЕСТИТЬ ВТСведенияОЗаработке
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ПачкаДокументовСЗВ_6_4Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКорректируемыеДокументыПоЗастрахованнымЛицам КАК КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров
	|		ПО ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.Ссылка
	|			И ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник = КорректируемыеДокументыЗЛПоКатегориямТипамДоговоров.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4.СведенияОЗаработке КАК ПачкаДокументовСЗВ_6_4СведенияОЗаработке
	|		ПО ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник = ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Сотрудник
	|			И ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка = ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Ссылка
	|			И (&УсловиеКатегория)
	|			И (&УсловиеТипДоговора)
	|			И (&УсловиеСотрудники)
	|			И (ВЫБОР
	|				КОГДА ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|					ТОГДА ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ОтчетныйПериод
	|				ИНАЧЕ ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КорректируемыйПериод
	|			КОНЕЦ = &ОтчетныйПериод)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам";
	
	
	Если ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено Тогда
		ТекстУсловиеКатегория = "ИСТИНА";
	Иначе	
		ТекстУсловиеКатегория = "ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКатегория", ТекстУсловиеКатегория);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеТипДоговора = "ИСТИНА";
	Иначе	
		ТекстУсловиеТипДоговора = "ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипДоговора", ТекстУсловиеТипДоговора);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеСотрудники = "ИСТИНА";
	Иначе	
		ТекстУсловиеСотрудники = "ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник В (&СписокФизическихЛиц)";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудники", ТекстУсловиеСотрудники);
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура СоздатьВТФиксированныеСведенияОЗаработкеИзДокументов2014(МенеджерВременныхТаблиц, ПараметрыПолученияЗаработка, ПараметрыОтбора)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияЗаработка.УчитываемыеДокументы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок КАК ФиксЗаработок,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Заработок,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ПоДоговорамГПХДоПредельнойВеличины,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины
	|ПОМЕСТИТЬ ВТФиксированныеСведенияОЗаработкеИзДокументов
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработке КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|		ПО ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Сотрудник
	|			И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|			И (ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В (&УчитываемыеДокументы))
	|			И (ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка В (&УчитываемыеДокументы))
	|			И (ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок)
	|			И (&УсловиеСотрудники)
	|			И (ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.КлассУсловийТруда КАК КлассУсловийТруда,
	|	ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок КАК ФиксЗаработок,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Месяц,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ПОМЕСТИТЬ ВТФиксированныеСведенияОЗаработкеПоКлассамУсловийТрудаИзДокументов
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаРазделов6РасчетаРСВ_1.СведенияОЗаработкеНаВредныхИТяжелыхРаботах КАК ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке
	|		ПО ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Сотрудник
	|			И ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка = ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка
	|			И (ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В (&УчитываемыеДокументы))
	|			И (ПачкаРазделов6РасчетаРСВ_1СведенияОЗаработке.Ссылка В (&УчитываемыеДокументы))
	|			И (ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок)
	|			И (&УсловиеСотрудники)
	|			И (ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксЗаработок)";	
	
		
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеСотрудники = "ИСТИНА";
	Иначе	
		ТекстУсловиеСотрудники = "ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник В (&СписокФизическихЛиц)";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудники", ТекстУсловиеСотрудники);
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТФиксированныеСведенияОЗаработкеИзДокументов2013(МенеджерВременныхТаблиц, ПараметрыПолученияЗаработка, ПараметрыОтбора)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("УчитываемыеДокументы", ПараметрыПолученияЗаработка.УчитываемыеДокументы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипДоговора КАК ТипДоговора,
	|	ПачкаДокументовСЗВ_6_4Сотрудники.ФиксЗаработок КАК ФиксЗаработок,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Месяц,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Заработок,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	ПачкаДокументовСЗВ_6_4СведенияОЗаработке.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах
	|ПОМЕСТИТЬ ВТФиксированныеСведенияОЗаработкеИзДокументов
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ПачкаДокументовСЗВ_6_4Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_4.СведенияОЗаработке КАК ПачкаДокументовСЗВ_6_4СведенияОЗаработке
	|		ПО ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник = ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Сотрудник
	|			И ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка = ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Ссылка
	|			И (ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка В (&УчитываемыеДокументы))
	|			И (ПачкаДокументовСЗВ_6_4СведенияОЗаработке.Ссылка В (&УчитываемыеДокументы))
	|			И (ПачкаДокументовСЗВ_6_4Сотрудники.ФиксЗаработок)
	|			И (&УсловиеКатегория)
	|			И (&УсловиеТипДоговора)
	|			И (&УсловиеСотрудники)
	|			И (ПачкаДокументовСЗВ_6_4Сотрудники.ФиксЗаработок)";	
	
	Если ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено Тогда
		ТекстУсловиеКатегория = "ИСТИНА";
	Иначе	
		ТекстУсловиеКатегория = "ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКатегория", ТекстУсловиеКатегория);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеТипДоговора = "ИСТИНА";
	Иначе	
		ТекстУсловиеТипДоговора = "ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипДоговора", ТекстУсловиеТипДоговора);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеСотрудники = "ИСТИНА";
	Иначе	
		ТекстУсловиеСотрудники = "ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник В (&СписокФизическихЛиц)";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСотрудники", ТекстУсловиеСотрудники);
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура СоздатьВТНулевыеИтоговыеСведенияОЗаработке(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, ИмяВТСотрудники = "ВТСотрудники") Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтсутствуютДанныеСтажа
	|ПОМЕСТИТЬ ВТНеоплаченныеЗаписиСтажа
	|ИЗ
	|	#ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеСтажаПФР КАК ЗаписиОСтаже
	|		ПО Сотрудники.ФизическоеЛицо = ЗаписиОСтаже.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОЗаработке КАК СведенияОЗаработке
	|		ПО Сотрудники.ФизическоеЛицо = СведенияОЗаработке.ФизическоеЛицо
	|ГДЕ
	|	СведенияОЗаработке.ФизическоеЛицо ЕСТЬ NULL ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВТСотрудники", ИмяВТСотрудники);
	
	Запрос.Выполнить();
	
	СоздатьВТКатегорииЗастрахованныхЛиц(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, "ВТНеоплаченныеЗаписиСтажа");
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КатегорииЗастрахованныхЛиц.ФизическоеЛицо,
	|	КатегорииЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц,
	|	0 КАК Месяц,
	|	0 КАК Заработок,
	|	0 КАК ОблагаетсяВзносамиДоПредельнойВеличины,
	|	0 КАК ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	0 КАК ПоДоговорамГПХДоПредельнойВеличины,
	|	ЛОЖЬ КАК ФиксЗаработок
	|ПОМЕСТИТЬ ВТНулевыеИтоговыеСведенияОЗаработке
	|ИЗ
	|	ВТНеоплаченныеЗаписиСтажа КАК НеоплаченныеЗаписиСтажа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииЗастрахованныхЛиц КАК КатегорииЗастрахованныхЛиц
	|		ПО НеоплаченныеЗаписиСтажа.ФизическоеЛицо = КатегорииЗастрахованныхЛиц.ФизическоеЛицо
	|			И (КатегорииЗастрахованныхЛиц.Период МЕЖДУ НАЧАЛОПЕРИОДА(НеоплаченныеЗаписиСтажа.ДатаНачалаПериода, МЕСЯЦ) И КОНЕЦПЕРИОДА(НеоплаченныеЗаписиСтажа.ДатаОкончанияПериода, МЕСЯЦ))
	|			И (НЕ НеоплаченныеЗаписиСтажа.ОтсутствуютДанныеСтажа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КатегорииЗастрахованныхЛиц.ФизическоеЛицо,
	|	МАКСИМУМ(КатегорииЗастрахованныхЛиц.КатегорияЗастрахованныхЛиц),
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ
	|ИЗ
	|	ВТНеоплаченныеЗаписиСтажа КАК НеоплаченныеЗаписиСтажа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКатегорииЗастрахованныхЛиц КАК КатегорииЗастрахованныхЛиц
	|		ПО НеоплаченныеЗаписиСтажа.ФизическоеЛицо = КатегорииЗастрахованныхЛиц.ФизическоеЛицо
	|			И (НеоплаченныеЗаписиСтажа.ОтсутствуютДанныеСтажа)
	|
	|СГРУППИРОВАТЬ ПО
	|	КатегорииЗастрахованныхЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТНеоплаченныеЗаписиСтажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКатегорииЗастрахованныхЛиц";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

Функция СведенияДокументаРазнесеныПоЛицевымСчетам(Ссылка) Экспорт 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсУчета.СписокПачекСЗВ КАК КомплектыОтчетностиПерсУчетаСписокПачекСЗВ
	|ГДЕ
	|	КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.ПачкаДокументов = &Ссылка
	|	И КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)";
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции	

Функция РегистрационныйНомерПФР(Организация, ДатаСведений = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период = ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ИсторияРегистрацийВОрганеПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	|ИЗ
	|	ВТИсторияРегистрацийВОрганеПФРСрезПоследних КАК ИсторияРегистрацийВОрганеПФР";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.РегистрационныйНомерПФР;
	
КонецФункции

Функция ТерриториальныеУсловияПФР(СтруктурнаяЕдиница, ДатаСведений = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	
	ОписаниеТипаТерриторияВыполненияРабот = Метаданные.ОпределяемыеТипы.ТерриторияВыполненияРабот.Тип;
	
	ИзмеренияДаты.Колонки.Добавить("СтруктурнаяЕдиница", ОписаниеТипаТерриторияВыполненияРабот);
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ИзмеренияДаты.Добавить();
	НоваяСтрока.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	НоваяСтрока.Период = ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ТерриториальныеУсловияПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТерриториальныеУсловияПФРСрезПоследних.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
	|ИЗ
	|	ВТТерриториальныеУсловияПФРСрезПоследних КАК ТерриториальныеУсловияПФРСрезПоследних";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ТерриториальныеУсловияПФР.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ТерриториальныеУсловияПФР;
	
КонецФункции

Функция ИсключаемыеТерриториальныеУсловияПФР() Экспорт
	
	ИсключаемыеТерриториальныеУсловия = Новый Массив;
	ИсключаемыеТерриториальныеУсловия.Добавить(Справочники.ТерриториальныеУсловияПФР.ПустаяСсылка());
	ИсключаемыеТерриториальныеУсловия.Добавить(Справочники.ТерриториальныеУсловияПФР.ПРОЧ);
	ИсключаемыеТерриториальныеУсловия.Добавить(Справочники.ТерриториальныеУсловияПФР.ЗАГР);
	
	Возврат ИсключаемыеТерриториальныеУсловия;
	
КонецФункции

Процедура СоздатьПоМассивуСсылокВТИсторияРегистрацийВОрганеПФРСрезПоследних(МенеджерВременныхТаблиц, МассивСсылок, ИмяТаблицы, ИмяРеквизитаТабличнойЧасти = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ИмяРеквизитаТабличнойЧасти = ИмяРеквизитаТабличнойЧасти + ?(ПустаяСтрока(ИмяРеквизитаТабличнойЧасти), "", ".");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ." + ИмяРеквизитаТабличнойЧасти + "Организация КАК Организация,
	|	Документ." + ИмяРеквизитаТабличнойЧасти + "ОкончаниеОтчетногоПериода КАК Период
	|ИЗ
	|	Документ." + ИмяТаблицы + " КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивСсылок)
	|СГРУППИРОВАТЬ ПО
	|	Документ." + ИмяРеквизитаТабличнойЧасти + "Организация,
	|	Документ." + ИмяРеквизитаТабличнойЧасти + "ОкончаниеОтчетногоПериода";
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ИсторияРегистрацийВОрганеПФР",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(Запрос.Выполнить().Выгрузить()));
	
КонецПроцедуры

Процедура ЗарегистрироватьРегистрационныйНомерПФР(Организация, РегистрационныйНомер, ДатаНачала) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ДатаНачала;
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Период = ДатаНачала;
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.РегистрационныйНомерПФР = РегистрационныйНомер;
	
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование пачек СЗВ-6-1(2,4)

Процедура ЗаполнитьСведенияОДоходахСЗВ64ПоСотруднику(ПачкаСЗВ, СведенияОДоходах, Сотрудник, КатегорияЗастрахованныхЛиц, ТипДоговора) Экспорт
	УдаляемыеСтроки = ПачкаСЗВ.СведенияОЗаработке.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ПачкаСЗВ.СведенияОЗаработке.Удалить(УдаляемаяСтрока);			
	КонецЦикла;	
	
	Если СведенияОДоходах <> Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ФизическоеЛицо", Сотрудник);
		СтруктураПоиска.Вставить("КатегорияЗастрахованныхЛиц", КатегорияЗастрахованныхЛиц);
		СтруктураПоиска.Вставить("ТипДоговора", ТипДоговора);
		
		ДобавляемыеСтроки = СведенияОДоходах.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ДобавляемаяСтрока Из ДобавляемыеСтроки Цикл
			НоваяСтрока = ПачкаСЗВ.СведенияОЗаработке.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДобавляемаяСтрока);
			НоваяСтрока.Сотрудник = Сотрудник;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////
// Получение данных о стаже сотрудников для перс. учета



///////////////////////////////////////////////////////////////////////////////
// Получение данных о взносах в ПФР


Процедура СоздатьВТКорректируемыеДокументыПоЗастрахованнымЛицам(МенеджерВременныхТаблиц, КорректируемыеДокументы, ПараметрыОтбора)
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", ПараметрыОтбора.КатегорияЗастрахованныхЛиц);
	Запрос.УстановитьПараметр("ТипДоговора", ПараметрыОтбора.ТипДоговора);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ПараметрыОтбора.СписокФизическихЛиц);
	Запрос.УстановитьПараметр("КорректируемыеДокументы", КорректируемыеДокументы);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
	|	СотрудникиДокумента.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|	СотрудникиДокумента.Ссылка.ОтчетныйПериод КАК ПериодРегистрации,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|			ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод
	|		ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод
	|	КОНЕЦ КАК ОтчетныйПериод,
	|	СотрудникиДокумента.Ссылка,
	|	СотрудникиДокумента.Ссылка.ТипСведенийСЗВ
	|ПОМЕСТИТЬ ВТФизическиеЛицаДокументов
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&КорректируемыеДокументы)
	|	И &УсловиеФизическоеЛицо
	|	И &УсловиеКатегорияЗастрахованныхЛиц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	СотрудникиДокумента.Ссылка.ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|			ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод
	|		ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод
	|	КОНЕЦ,
	|	СотрудникиДокумента.Ссылка,
	|	СотрудникиДокумента.Ссылка.ТипСведенийСЗВ
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&КорректируемыеДокументы)
	|	И &УсловиеФизическоеЛицо
	|	И &УсловиеКатегорияЗастрахованныхЛиц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиДокумента.Сотрудник,
	|	СотрудникиДокумента.Ссылка.КатегорияЗастрахованныхЛиц,
	|	СотрудникиДокумента.Ссылка.ТипДоговора,
	|	СотрудникиДокумента.Ссылка.ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|			ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод
	|		ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод
	|	КОНЕЦ,
	|	СотрудникиДокумента.Ссылка,
	|	СотрудникиДокумента.Ссылка.ТипСведенийСЗВ
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&КорректируемыеДокументы)
	|	И &УсловиеФизическоеЛицо
	|	И &УсловиеКатегорияЗастрахованныхЛиц
	|	И &УсловиеТипДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиДокумента.Сотрудник,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|	СотрудникиДокумента.Ссылка.ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА СотрудникиДокумента.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Исходная)
	|			ТОГДА СотрудникиДокумента.Ссылка.ОтчетныйПериод
	|		ИНАЧЕ СотрудникиДокумента.Ссылка.КорректируемыйПериод
	|	КОНЕЦ,
	|	СотрудникиДокумента.Ссылка,
	|	СотрудникиДокумента.Ссылка.ТипСведенийСЗВ
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК СотрудникиДокумента
	|ГДЕ
	|	СотрудникиДокумента.Ссылка В(&КорректируемыеДокументы)
	|	И &УсловиеФизическоеЛицо
	|	И &УсловиеКатегорияЗастрахованныхЛиц
	|	И &УсловиеТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаДокументов.Сотрудник,
	|	ФизическиеЛицаДокументов.КатегорияЗастрахованныхЛиц,
	|	ФизическиеЛицаДокументов.ТипДоговора,
	|	МАКСИМУМ(ФизическиеЛицаДокументов.ПериодРегистрации) КАК ПериодРегистрации,
	|	ФизическиеЛицаДокументов.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТМаксимальныеПериодыРегистрации
	|ИЗ
	|	ВТФизическиеЛицаДокументов КАК ФизическиеЛицаДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаДокументов.Сотрудник,
	|	ФизическиеЛицаДокументов.КатегорияЗастрахованныхЛиц,
	|	ФизическиеЛицаДокументов.ТипДоговора,
	|	ФизическиеЛицаДокументов.ОтчетныйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаДокументов.Сотрудник КАК ФизическоеЛицо,
	|	ФизическиеЛицаДокументов.КатегорияЗастрахованныхЛиц,
	|	ФизическиеЛицаДокументов.ТипДоговора,
	|	ФизическиеЛицаДокументов.ОтчетныйПериод,
	|	МАКСИМУМ(ФизическиеЛицаДокументов.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(ФизическиеЛицаДокументов.ТипСведенийСЗВ) КАК ТипСведенийСЗВ
	|ПОМЕСТИТЬ ВТКорректируемыеДокументыПоЗастрахованнымЛицам
	|ИЗ
	|	ВТМаксимальныеПериодыРегистрации КАК МаксимальныеПериодыРегистрации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаДокументов КАК ФизическиеЛицаДокументов
	|		ПО МаксимальныеПериодыРегистрации.Сотрудник = ФизическиеЛицаДокументов.Сотрудник
	|			И МаксимальныеПериодыРегистрации.КатегорияЗастрахованныхЛиц = ФизическиеЛицаДокументов.КатегорияЗастрахованныхЛиц
	|			И МаксимальныеПериодыРегистрации.ТипДоговора = ФизическиеЛицаДокументов.ТипДоговора
	|			И МаксимальныеПериодыРегистрации.ПериодРегистрации = ФизическиеЛицаДокументов.ПериодРегистрации
	|			И МаксимальныеПериодыРегистрации.ОтчетныйПериод = ФизическиеЛицаДокументов.ОтчетныйПериод
	|ГДЕ
	|	ФизическиеЛицаДокументов.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.Отменяющая)
	|
	|СГРУППИРОВАТЬ ПО
	|	ФизическиеЛицаДокументов.Сотрудник,
	|	ФизическиеЛицаДокументов.КатегорияЗастрахованныхЛиц,
	|	ФизическиеЛицаДокументов.ТипДоговора,
	|	ФизическиеЛицаДокументов.ОтчетныйПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТМаксимальныеПериодыРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТФизическиеЛицаДокументов";
	
	Если ПараметрыОтбора.КатегорияЗастрахованныхЛиц = Неопределено Тогда
		ТекстУсловиеКатегория = "ИСТИНА";
	Иначе	
		ТекстУсловиеКатегория = "СотрудникиДокумента.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеКатегорияЗастрахованныхЛиц", ТекстУсловиеКатегория);
	
	Если ПараметрыОтбора.ТипДоговора = Неопределено Тогда
		ТекстУсловиеТипДоговора = "ИСТИНА";
	Иначе	
		ТекстУсловиеТипДоговора = "СотрудникиДокумента.Ссылка.ТипДоговора = &ТипДоговора";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипДоговора", ТекстУсловиеТипДоговора);
	
	Если ПараметрыОтбора.СписокФизическихЛиц = Неопределено Тогда
		ТекстУсловиеСотрудники = "ИСТИНА";
	Иначе	
		ТекстУсловиеСотрудники = "СотрудникиДокумента.Сотрудник В (&СписокФизическихЛиц)";
	КонецЕсли;

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФизическоеЛицо", ТекстУсловиеСотрудники);
	
	Запрос.Выполнить();

КонецПроцедуры	

Процедура СоздатьВТВзносыНаНачалоПериода(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, УчитыватьФиксДанные = Истина, СписокФизическихЛиц = Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	ОкончаниеПрошлогоПериода = ОтчетныйПериод - 1;
	
	Если УчитыватьФиксДанные Тогда
		ПериодСреза = ОкончаниеПрошлогоПериода;	
	Иначе	
		ПериодСреза = ПерсонифицированныйУчетКлиентСервер.ПредшествующийОтчетныйПериодПерсУчета(ОтчетныйПериод) - 1;
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ОкончаниеПрошлогоПериода", ОкончаниеПрошлогоПериода);
	Запрос.УстановитьПараметр("ПериодСреза", ПериодСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОВзносахВПФРСрезПоследних.Период,
	|	СведенияОВзносахВПФРСрезПоследних.ФизическоеЛицо,
	|	СведенияОВзносахВПФРСрезПоследних.НачисленоСтраховая,
	|	СведенияОВзносахВПФРСрезПоследних.НачисленоНакопительная,
	|	СведенияОВзносахВПФРСрезПоследних.УплаченоСтраховая,
	|	СведенияОВзносахВПФРСрезПоследних.УплаченоНакопительная,
	|	СведенияОВзносахВПФРСрезПоследних.ЗадолженностьСтраховая,
	|	СведенияОВзносахВПФРСрезПоследних.ЗадолженностьНакопительная
	|ПОМЕСТИТЬ ВТСведенияОВзносахВПФР
	|ИЗ
	|	РегистрСведений.СведенияОВзносахВПФР.СрезПоследних(
	|			&ПериодСреза,
	|			Организация = &Организация
	|				И &УсловиеФизическиеЛицаДляСреза) КАК СведенияОВзносахВПФРСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо,
	|	СтраховыеВзносыПереданныеВПФР.Период,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА СтраховыеВзносыПереданныеВПФР.Страховая
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтраховаяПриход,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА СтраховыеВзносыПереданныеВПФР.Накопительная
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НакопительнаяПриход,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА СтраховыеВзносыПереданныеВПФР.Страховая
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтраховаяРасход,
	|	ВЫБОР
	|		КОГДА СтраховыеВзносыПереданныеВПФР.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА СтраховыеВзносыПереданныеВПФР.Накопительная
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НакопительнаяРасход
	|ПОМЕСТИТЬ ВТСтраховыеВзносыПереданныеВПФР
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыПереданныеВПФР КАК СтраховыеВзносыПереданныеВПФР
	|ГДЕ
	|	СтраховыеВзносыПереданныеВПФР.Организация = &Организация
	|	И СтраховыеВзносыПереданныеВПФР.Период <= &ОкончаниеПрошлогоПериода
	|	И &УсловиеФизическиеЛицаДляОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОВзносахЗаПериод.ФизическоеЛицо,
	|	СУММА(ДанныеОВзносахЗаПериод.СтраховаяПриход) КАК НачисленоСтраховая,
	|	СУММА(ДанныеОВзносахЗаПериод.НакопительнаяПриход) КАК НачисленоНакопительная,
	|	СУММА(ДанныеОВзносахЗаПериод.СтраховаяРасход) КАК УплаченоСтраховая,
	|	СУММА(ДанныеОВзносахЗаПериод.НакопительнаяРасход) КАК УплаченоНакопительная,
	|	СУММА(ДанныеОВзносахЗаПериод.ЗадолженностьСтраховая) КАК ЗадолженностьСтраховая,
	|	СУММА(ДанныеОВзносахЗаПериод.ЗадолженностьНакопительная) КАК ЗадолженностьНакопительная,
	|	МАКСИМУМ(ДанныеОВзносахЗаПериод.ФиксВзносы) КАК ФиксВзносы
	|ПОМЕСТИТЬ ВТВзносыНаНачалоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВЫБОР
	|			КОГДА СведенияОВзносахВПФР.Период ЕСТЬ NULL 
	|					ИЛИ СтраховыеВзносыПереданныеВПФР.Период > СведенияОВзносахВПФР.Период
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.СтраховаяПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтраховаяПриход,
	|		ВЫБОР
	|			КОГДА СведенияОВзносахВПФР.Период ЕСТЬ NULL 
	|					ИЛИ СтраховыеВзносыПереданныеВПФР.Период > СведенияОВзносахВПФР.Период
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.НакопительнаяПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НакопительнаяПриход,
	|		ВЫБОР
	|			КОГДА СведенияОВзносахВПФР.Период ЕСТЬ NULL 
	|					ИЛИ СтраховыеВзносыПереданныеВПФР.Период > СведенияОВзносахВПФР.Период
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.СтраховаяРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтраховаяРасход,
	|		ВЫБОР
	|			КОГДА СведенияОВзносахВПФР.Период ЕСТЬ NULL 
	|					ИЛИ СтраховыеВзносыПереданныеВПФР.Период > СведенияОВзносахВПФР.Период
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.НакопительнаяРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НакопительнаяРасход,
	|		ВЫБОР
	|			КОГДА СведенияОВзносахВПФР.Период ЕСТЬ NULL 
	|					ИЛИ СтраховыеВзносыПереданныеВПФР.Период > СведенияОВзносахВПФР.Период
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.СтраховаяПриход - СтраховыеВзносыПереданныеВПФР.СтраховаяРасход
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЗадолженностьСтраховая,
	|		ВЫБОР
	|			КОГДА СведенияОВзносахВПФР.Период ЕСТЬ NULL 
	|					ИЛИ СтраховыеВзносыПереданныеВПФР.Период > СведенияОВзносахВПФР.Период
	|				ТОГДА СтраховыеВзносыПереданныеВПФР.НакопительнаяПриход - СтраховыеВзносыПереданныеВПФР.НакопительнаяРасход
	|		КОНЕЦ КАК ЗадолженностьНакопительная,
	|		ЛОЖЬ КАК ФиксВзносы
	|	ИЗ
	|		ВТСтраховыеВзносыПереданныеВПФР КАК СтраховыеВзносыПереданныеВПФР
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОВзносахВПФР КАК СведенияОВзносахВПФР
	|			ПО СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо = СведенияОВзносахВПФР.ФизическоеЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СведенияОВзносахВПФР.ФизическоеЛицо,
	|		СведенияОВзносахВПФР.НачисленоСтраховая,
	|		СведенияОВзносахВПФР.НачисленоНакопительная,
	|		СведенияОВзносахВПФР.УплаченоСтраховая,
	|		СведенияОВзносахВПФР.УплаченоНакопительная,
	|		СведенияОВзносахВПФР.ЗадолженностьСтраховая,
	|		СведенияОВзносахВПФР.ЗадолженностьНакопительная,
	|		ВЫБОР
	|			КОГДА СведенияОВзносахВПФР.Период = НАЧАЛОПЕРИОДА(&ОкончаниеПрошлогоПериода, КВАРТАЛ)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ИЗ
	|		ВТСведенияОВзносахВПФР КАК СведенияОВзносахВПФР) КАК ДанныеОВзносахЗаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОВзносахЗаПериод.ФизическоеЛицо";
	
	Если СписокФизическихЛиц = Неопределено Тогда
		ТекстУсловияФизическиеЛицаДляСрезаПоследних = "ИСТИНА";	
		ТекстУсловияФизическиеЛицаДляОтбора = "ИСТИНА";	
	Иначе
		ТекстУсловияФизическиеЛицаДляСрезаПоследних = "ФизическоеЛицо В (&СписокФизическихЛиц)";	
		ТекстУсловияФизическиеЛицаДляОтбора = "СтраховыеВзносыПереданныеВПФР.ФизическоеЛицо В (&СписокФизическихЛиц)";	
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФизическиеЛицаДляСреза", ТекстУсловияФизическиеЛицаДляСрезаПоследних);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФизическиеЛицаДляОтбора", ТекстУсловияФизическиеЛицаДляОтбора);
	
	Запрос.Выполнить();
КонецПроцедуры	


///////////////////////////////////////////////////////////////////////////////
// Получение данных о взносах в ПФР

Функция РегНомерПФРВКорректируемыйПериод(Организация, ОтчетныйПериод, КорректируемыйПериод) Экспорт
	РегНомерПФРВКоррПериод = РегистрационныйНомерПФР(Организация, ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(КорректируемыйПериод));
		
	РегНомерПФРТекущий = РегистрационныйНомерПФР(Организация, ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод));
	
	Если РегНомерПФРВКоррПериод = РегНомерПФРТекущий Тогда
		РегНомерПФРВКоррПериод = "";
	КонецЕсли;	
	
	Возврат РегНомерПФРВКоррПериод;
КонецФункции	

Функция КатегорииЧленовЭкипажаМорскихСудов() Экспорт  
	Категории = Новый Массив;
	Категории.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЧЭС);
	Категории.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЭС);
	Категории.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЭС);
	
	Возврат Категории;
КонецФункции	

Функция СоответствиеКодовТарифаКатегориям(ОтчетныйПериод ) Экспорт
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	УчетСтраховыхВзносов.СоздатьВТКодыВидовТарифаСтраховыхВзносов(ОтчетныйПериод, ОтчетныйПериод, МенеджерВТ);
	
	СформироватьВТСоответствиеТарифаКатегории(МенеджерВТ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОтчетныйГод", Год(ОтчетныйПериод));
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц,
	|	КодыВидовТарифаСтраховыхВзносов.КодПФР
	|ИЗ
	|	ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
	|		ПО СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов = КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов
	|			И (&ОтчетныйГод МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|			И (&ОтчетныйГод = КодыВидовТарифаСтраховыхВзносов.РасчетныйПериод)";
		
	Выборка = Запрос.Выполнить().Выбрать();	
	СоответствиеКодовТарифаКатегориям = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеКодовТарифаКатегориям.Вставить(Выборка.КодПФР, Выборка.КатегорияЗастрахованныхЛиц);			
	КонецЦикла;	
	
	Возврат СоответствиеКодовТарифаКатегориям;
	
КонецФункции

Функция СоответствиеКодовТарифаКодамКатегорийЗастрахованных(ОтчетныйГод = 2017) Экспорт

	ОтчетныйПериод = Дата(ОтчетныйГод, 1, 1);
	СоответствиеКодов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйГод", ОтчетныйГод);
	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(Запрос.МенеджерВременныхТаблиц, ОтчетныйГод);
	УчетСтраховыхВзносов.СоздатьВТКодыВидовТарифаСтраховыхВзносов(ОтчетныйПериод, ОтчетныйПериод, Запрос.МенеджерВременныхТаблиц);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	МИНИМУМ(СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов) КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТТарифыПоКатегориям
	|ИЗ
	|	ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|ГДЕ
	|	&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	КодыВидовТарифаСтраховыхВзносов.ИмяПоля КАК КодТарифа
	|ИЗ
	|	ВТТарифыПоКатегориям КАК СоответствиеТарифаКатегории
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыВидовТарифаСтраховыхВзносов КАК КодыВидовТарифаСтраховыхВзносов
	|		ПО СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов = КодыВидовТарифаСтраховыхВзносов.ВидТарифаСтраховыхВзносов
	|			И (&ОтчетныйГод = КодыВидовТарифаСтраховыхВзносов.РасчетныйПериод)";
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяПоля", ?(ОтчетныйГод < 2017, "КодПФР", "КодФНС")); 

	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.КатегорияЗастрахованныхЛиц) Тогда
			Продолжить;
		КонецЕсли;
		СоответствиеКодов.Вставить(ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.КатегорияЗастрахованныхЛиц), Выборка.КодТарифа);			
	КонецЦикла;	
	
	Возврат СоответствиеКодов;
	
КонецФункции 

// Функция возвращает список значений, содержащий категории ЗЛ
// организации за период.
Функция КатегорииЗастрахованныхЛицОрганизации(Организация, ОтчетныйПериод, ОкончаниеОтчетногоПериода = Неопределено, КорректирующиеСведения = Ложь) Экспорт
    УстановитьПривилегированныйРежим(Истина);
	
	Если ОкончаниеОтчетногоПериода = Неопределено Тогда 
		ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	КонецЕсли;	
	
	СписокКатегорийЗастрахованныхЛиц = Новый СписокЗначений;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"));
	Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
	Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеОтчетногоПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ТарифЕНВД", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ЕНВД"));
	Запрос.УстановитьПараметр("ТарифФармацевтов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляФармацевтовАптек"));
	Запрос.УстановитьПараметр("ТарифМоряков", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ"));
	
	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(Запрос.МенеджерВременныхТаблиц, Год(ОтчетныйПериод));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОДоходахСтраховыеВзносы.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ КАК ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ,
	|	СведенияОДоходахСтраховыеВзносы.ЯвляетсяДоходомФармацевта КАК ЯвляетсяДоходомФармацевта,
	|	СведенияОДоходахСтраховыеВзносы.ЛьготныйТерриториальныйТариф КАК ЛьготныйТерриториальныйТариф,
	|	СведенияОДоходахСтраховыеВзносы.ОблагаетсяЕНВД КАК ОблагаетсяЕНВД
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	РегистрНакопления.СведенияОДоходахСтраховыеВзносы КАК СведенияОДоходахСтраховыеВзносы
	|ГДЕ
	|	СведенияОДоходахСтраховыеВзносы.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	И СведенияОДоходахСтраховыеВзносы.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрименяемыеТарифыСтраховыхВзносов.ВидТарифа КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТТарифыОрганизации
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов КАК ПрименяемыеТарифыСтраховыхВзносов
	|ГДЕ
	|	ПрименяемыеТарифыСтраховыхВзносов.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	И ПрименяемыеТарифыСтраховыхВзносов.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрименяемыеТарифыСтраховыхВзносовСрезПоследних.ВидТарифа
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов.СрезПоследних(&ОтчетныйПериод, ГоловнаяОрганизация = &ГоловнаяОрганизация) КАК ПрименяемыеТарифыСтраховыхВзносовСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ТарифЕНВД
	|ИЗ
	|	ВТДоходы КАК СведенияОДоходахСтраховыеВзносы
	|ГДЕ
	|	СведенияОДоходахСтраховыеВзносы.ОблагаетсяЕНВД
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ТарифФармацевтов
	|ИЗ
	|	ВТДоходы КАК СведенияОДоходахСтраховыеВзносы
	|ГДЕ
	|	СведенияОДоходахСтраховыеВзносы.ЯвляетсяДоходомФармацевта
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ТарифМоряков
	|ИЗ
	|	ВТДоходы КАК СведенияОДоходахСтраховыеВзносы
	|ГДЕ
	|	СведенияОДоходахСтраховыеВзносы.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОДоходахСтраховыеВзносы.ЛьготныйТерриториальныйТариф
	|ИЗ
	|	ВТДоходы КАК СведенияОДоходахСтраховыеВзносы
	|ГДЕ
	|	СведенияОДоходахСтраховыеВзносы.ЛьготныйТерриториальныйТариф <> ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц) КАК Представление,
	|	СоответствиеТарифаИВидаЗЛКатегории.Порядок КАК Порядок,
	|	СоответствиеТарифаИВидаЗЛКатегории.ДополнительныйПорядок КАК ДополнительныйПорядок
	|ИЗ
	|	ВТТарифыОрганизации КАК ТарифыОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|		ПО ТарифыОрганизации.ВидТарифаСтраховыхВзносов = СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов
	|			И (ГОД(&ОтчетныйПериод) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)";
	
	Если КорректирующиеСведения Тогда
		Запрос.Текст = Запрос.Текст + "
		|ОБЪЕДИНИТЬ
		|";
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.ПачкаДокументов.КатегорияЗастрахованныхЛиц,
		|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.ПачкаДокументов.КатегорияЗастрахованныхЛиц) КАК Представление,
		|	СоответствиеТарифаИВидаЗЛКатегории.Порядок КАК Порядок,
		|	СоответствиеТарифаИВидаЗЛКатегории.ДополнительныйПорядок
		|ИЗ
		|	Справочник.КомплектыОтчетностиПерсУчета.СписокПачекСЗВ КАК КомплектыОтчетностиПерсУчетаСписокПачекСЗВ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
		|		ПО КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.ПачкаДокументов.КатегорияЗастрахованныхЛиц = СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
		|			И (ГОД(&ОтчетныйПериод) МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо)
		|			И (КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка.ОтчетныйПериод = &ОтчетныйПериод)
		|			И (КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(Перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены))
		|			И (КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка.Организация = &Организация)";
		
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + 
	"УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	СоответствиеТарифаИВидаЗЛКатегории.ДополнительныйПорядок";
			
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	    СписокКатегорийЗастрахованныхЛиц.Добавить(Выборка.КатегорияЗастрахованныхЛиц,Выборка.Представление);
	КонецЦикла;
	Если СписокКатегорийЗастрахованныхЛиц.Количество() = 0 Тогда
		СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.НР, "НАЕМ/РАБОТНИК");
		Если Год(ОтчетныйПериод) >= 2012 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖНР, "ВР. ПРОЖИВАЮЩИЙ/НАЕМ/РАБОТНИК");
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПНР, "ВР. ПРЕБЫВАЮЩИЙ/НАЕМ/РАБОТНИК");
		КонецЕсли;
		Если Год(ОтчетныйПериод) = 2010 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗАЦИИ ИНВАЛИДОВ");
		ИначеЕсли Год(ОтчетныйПериод) < 2015 Тогда
			СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ООИ);
			Если Год(ОтчетныйПериод) >= 2012 Тогда
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ);
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПОИ);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Год(ОтчетныйПериод) = 2010 Тогда
			Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОЗОИ) = Неопределено Тогда 	
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗАЦИИ ИНВАЛИДОВ");
			КонецЕсли;
		ИначеЕсли Год(ОтчетныйПериод) < 2015 Тогда
			Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ООИ) = Неопределено Тогда 	
				СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ООИ);
			КонецЕсли;
			Если Год(ОтчетныйПериод) >= 2012 Тогда
				Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ) = Неопределено Тогда 	
					СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ);
				КонецЕсли;
				Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПОИ) = Неопределено Тогда 	
					СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПОИ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокКатегорийЗастрахованныхЛиц
	
КонецФункции	

// Возвращает результат выполнения запроса, содержащий данные для заполнения документов СЗВ по
// переданному списку физ. лиц.
// 
// Параметры:
//	Дата
//  ОтчетныйПериод 
//  Ссылка 
//  Организация
//  КатегорияФизЛиц
//  ИсточникДанных - менеджер временных таблиц, содержащий ВТ "ВТСписокФизлицДокумента", со списком физ. лиц по которым
//                   необходимо получить данные.
//
// Возвращаемое значение
//  Результат выполнения запроса, содержащий данные, необходимые для заполнения документов.
Функция ВыборкаДанныхПоСпискуФизЛицДляСЗВ(Организация, ОтчетныйПериод, ПараметрыОтбора, ТиаСведенийСЗВ, ОтчетныйПериодИсходныхСведений) 
	Если ОтчетныйПериод >= '20140101' Тогда 
		Возврат ВыборкаДанныхПоСпискуФизЛицДляСЗВ2014(Организация, ОтчетныйПериод, ПараметрыОтбора, ТиаСведенийСЗВ, ОтчетныйПериодИсходныхСведений);	
	Иначе
		Возврат ВыборкаДанныхПоСпискуФизЛицДляСЗВ2013(Организация, ОтчетныйПериод, ПараметрыОтбора, ТиаСведенийСЗВ);
	КонецЕсли;	
КонецФункции

// Возвращает результат выполнения запроса, содержащий данные для заполнения документов СЗВ по
// переданному списку физ. лиц.
// 
// Параметры:
//	Дата
//  ОтчетныйПериод 
//  Ссылка 
//  Организация
//  КатегорияФизЛиц
//  ИсточникДанных - менеджер временных таблиц, содержащий ВТ "ВТСписокФизлицДокумента", со списком физ. лиц по которым
//                   необходимо получить данные.
//
// Возвращаемое значение
//  Результат выполнения запроса, содержащий данные, необходимые для заполнения документов.
Функция ВыборкаДанныхПоСпискуФизЛицДляСЗВ2013(Организация, ОтчетныйПериод, ПараметрыОтбора, ТиаСведенийСЗВ)
	
	ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
		
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ();	
	ПараметрыПолученияДанных.ТипСведенийСЗВ = ТиаСведенийСЗВ;
		
	СоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ2013(МенеджерВТ, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияКвартальнойОтчетности.ФизическоеЛицо КАК Сотрудник,
	|	СведенияКвартальнойОтчетности.Наименование КАК Наименование,
	|	СведенияКвартальнойОтчетности.Фамилия,
	|	СведенияКвартальнойОтчетности.Имя,
	|	СведенияКвартальнойОтчетности.Отчество,
	|	СведенияКвартальнойОтчетности.СтраховойНомерПФР,
	|	СведенияКвартальнойОтчетности.НачисленоНакопительная,
	|	СведенияКвартальнойОтчетности.НачисленоСтраховая,
	|	СведенияКвартальнойОтчетности.УплаченоНакопительная,
	|	СведенияКвартальнойОтчетности.УплаченоСтраховая,
	|	СведенияКвартальнойОтчетности.ДоНачисленоСтраховая,
	|	СведенияКвартальнойОтчетности.ДоНачисленоНакопительная,
	|	СведенияКвартальнойОтчетности.ДоУплаченоСтраховая,
	|	СведенияКвартальнойОтчетности.ДоУплаченоНакопительная,
	|	СведенияКвартальнойОтчетности.ФиксНачисленныеВзносы,
	|	СведенияКвартальнойОтчетности.ФиксУплаченныеВзносы,
	|	СведенияКвартальнойОтчетности.ФиксЗаработок,
	|	СведенияКвартальнойОтчетности.ФиксСтаж,
	|	СведенияКвартальнойОтчетности.СложныйСтаж,
	|	СведенияКвартальнойОтчетности.ЛьготыПоУсловиямТруда,
	|	СведенияКвартальнойОтчетности.ЛьготыПоВыслуге,
	|	СведенияКвартальнойОтчетности.МаксимальныйКодТеррУсловий,
	|	СведенияКвартальнойОтчетности.ИмяТаблицы КАК ИмяТаблицы,
	|	СведенияКвартальнойОтчетности.ДатаНачалаПериода,
	|	СведенияКвартальнойОтчетности.ДатаОкончанияПериода,
	|	СведенияКвартальнойОтчетности.ОсобыеУсловияТруда,
	|	СведенияКвартальнойОтчетности.КодПозицииСписка,
	|	СведенияКвартальнойОтчетности.ОснованиеИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ПервыйПараметрИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ВторойПараметрИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ТретийПараметрИсчисляемогоСтажа,
	|	СведенияКвартальнойОтчетности.ОснованиеВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ПервыйПараметрВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ВторойПараметрВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ТретийПараметрВыслугиЛет,
	|	СведенияКвартальнойОтчетности.ТерриториальныеУсловия,
	|	СведенияКвартальнойОтчетности.ПараметрТерриториальныхУсловий,
	|	СведенияКвартальнойОтчетности.Месяц,
	|	СведенияКвартальнойОтчетности.Заработок,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносами,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияКвартальнойОтчетности.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах
	|ИЗ
	|	ВТСведенияОВзносахЗаработкеСтажеЗЛ КАК СведенияКвартальнойОтчетности
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизическоеЛицо,
	|	ИмяТаблицы";	
	
	Возврат Запрос.Выполнить().Выбрать();	
КонецФункции	

// Возвращает результат выполнения запроса, содержащий данные для заполнения документов СЗВ по
// переданному списку физ. лиц.
// 
// Параметры:
//	Дата
//  ОтчетныйПериод 
//  Ссылка 
//  Организация
//  КатегорияФизЛиц
//  ИсточникДанных - менеджер временных таблиц, содержащий ВТ "ВТСписокФизлицДокумента", со списком физ. лиц по которым
//                   необходимо получить данные.
//
// Возвращаемое значение
//  Результат выполнения запроса, содержащий данные, необходимые для заполнения документов.
Функция ВыборкаДанныхПоСпискуФизЛицДляСЗВ2014(Организация, ОтчетныйПериод, ПараметрыОтбора, ТиаСведенийСЗВ, ОтчетныйПериодИсходныхСведений)
	
	ОкончаниеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
		
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияДанных = ПараметрыДляСоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ();	
	ПараметрыПолученияДанных.ТипСведенийСЗВ = ТиаСведенийСЗВ;
	ПараметрыПолученияДанных.ОтчетныйПериодИсходныхСведений = ОтчетныйПериодИсходныхСведений;
	
	Если ТиаСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		Если ОтчетныйПериод >= '20140101' Тогда 
			ПараметрыПолученияДанных.КорректируемыеДокументы = Справочники.КомплектыОтчетностиПерсУчета.КорректируемыеДокументы(Организация, ОтчетныйПериодИсходныхСведений, ОтчетныйПериод);
			ВариантыИсточниковДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке();
			Если ПараметрыПолученияДанных.КорректируемыеДокументы.Количество() > 0 Тогда
				ПараметрыПолученияДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеКорректируемыхДокументовОтменяемые;	
			Иначе
				ПараметрыПолученияДанных.ИсточникДанныхСведенийОЗаработке = ВариантыИсточниковДанныхСведенийОЗаработке.ДанныеУчетаОтменяемые;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	СоздатьВТСведенияОВзносахЗаработкеСтажеЗЛ2014(МенеджерВТ, Организация, ОтчетныйПериод, ПараметрыПолученияДанных, ПараметрыОтбора);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФизическоеЛицо КАК Сотрудник,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Наименование,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Фамилия,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Имя,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Отчество,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.СтраховойНомерПФР,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.НачисленоСтраховая,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДоНачисленоСтраховая,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФиксНачисленныеВзносы,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФиксЗаработок,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ФиксСтаж,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ЛьготыПоУсловиямТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ЛьготыПоВыслуге,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.МаксимальныйКодТеррУсловий,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ИмяТаблицы КАК ИмяТаблицы,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДатаНачалаПериода,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДатаОкончанияПериода,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОсобыеУсловияТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КодПозицииСписка,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОснованиеИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПервыйПараметрИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ВторойПараметрИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ТретийПараметрИсчисляемогоСтажа,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОснованиеВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПервыйПараметрВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ВторойПараметрВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ТретийПараметрВыслугиЛет,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ТерриториальныеУсловия,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПараметрТерриториальныхУсловий,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Месяц,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КатегорияЗастрахованныхЛиц,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.Заработок,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиДоПредельнойВеличины,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ПоДоговорамГПХДоПредельнойВеличины,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиСвышеПредельнойВеличины,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КлассУсловийТруда,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.КорректируемыйПериод,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДоначисленоНаОПС,
	|	СведенияОВзносахЗаработкеСтажеЗЛ.ДоначисленоНакопительная
	|ИЗ
	|	ВТСведенияОВзносахЗаработкеСтажеЗЛ КАК СведенияОВзносахЗаработкеСтажеЗЛ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ИмяТаблицы";	
	
	Возврат Запрос.Выполнить().Выбрать();	
КонецФункции

Процедура СформироватьВТСоответствиеТарифаКатегории(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим"));
	Запрос.УстановитьПараметр("ЕНВД", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ЕНВД"));
	Запрос.УстановитьПараметр("СельХозПроизводители", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.СельХозПроизводители"));
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим"));
	Запрос.УстановитьПараметр("ЕСХН", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ЕСХН"));
	Запрос.УстановитьПараметр("ОрганизацияИнвалидов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОрганизацияИнвалидов"));
	Запрос.УстановитьПараметр("РезидентТехникоВнедренческойЗоны", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.РезидентТехникоВнедренческойЗоны"));
	Запрос.УстановитьПараметр("УчастникПроектаИнновационныйЦентрСколково", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково"));
	Запрос.УстановитьПараметр("ITОрганизации", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ITОрганизации"));
	Запрос.УстановитьПараметр("ОрганизацииРазработчикиЭлектроннойПродукции", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОрганизацииРазработчикиЭлектроннойПродукции"));
	Запрос.УстановитьПараметр("ХозОбществаБюджетныхВУЗов", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ХозОбществаБюджетныхВУЗов"));
	Запрос.УстановитьПараметр("УпрощенныйНалоговыйРежимПроизводство", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство"));
	Запрос.УстановитьПараметр("СМИ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.СМИ"));
	Запрос.УстановитьПараметр("НародныеХудожественныеПромыслы", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.НародныеХудожественныеПромыслы"));
	Запрос.УстановитьПараметр("ДляЧленовЭкипажейМорскихСудовПодФлагомРФ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ"));
	Запрос.УстановитьПараметр("ДляФармацевтовАптек", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляФармацевтовАптек"));
	Запрос.УстановитьПараметр("НекоммерческиеОрганизации", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.НекоммерческиеОрганизации"));
	Запрос.УстановитьПараметр("БлаготворительныеОрганизации", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.БлаготворительныеОрганизации"));
	Запрос.УстановитьПараметр("ОрганизацииОказывающиеИнжиниринговыеУслуги", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОрганизацииОказывающиеИнжиниринговыеУслуги"));
	Запрос.УстановитьПараметр("ИндивидуальныйПредпринимательПрименяющийПатент", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент"));
	Запрос.УстановитьПараметр("ТОР", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.РезидентТерриторииОпережающегоСоциальноЭкономическогоРазвития"));
	Запрос.УстановитьПараметр("КРЫМ", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УчастникОсобойЗоныВКрыму"));
	Запрос.УстановитьПараметр("Владивосток", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.РезидентПортаВладивосток"));
	Запрос.УстановитьПараметр("Мультипликаторы", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.Мультипликаторы"));
	Запрос.УстановитьПараметр("Калининград", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.РезидентОсобойЗоныВКалининградскойОбласти"));
	Запрос.УстановитьПараметр("Оффшорный", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.УчастникСпециальныхАдминистративныхРайонов"));
	Запрос.УстановитьПараметр("ДляСубъектовМалогоПредпринимательства", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляСубъектовМалогоПредпринимательства"));
	Запрос.УстановитьПараметр("ДляОтраслейПострадавшихОтКоронавируснойИнфекции", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляОтраслейПострадавшихОтКоронавируснойИнфекции"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка КАК ВидТарифаСтраховыхВзносов,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок,
	|	2010 КАК ГодС,
	|	2100 КАК ГодПо
	|ПОМЕСТИТЬ ВТСоответствиеТарифаКатегории
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ОбщийНалоговыйРежим
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2010,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2011,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &УпрощенныйНалоговыйРежим
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2014,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ОрганизацииОказывающиеИнжиниринговыеУслуги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &СельХозПроизводители
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &НародныеХудожественныеПромыслы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ОрганизацияИнвалидов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &СМИ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ЕСХН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2019,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &УпрощенныйНалоговыйРежимПроизводство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2020,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &РезидентТехникоВнедренческойЗоны
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.НР),
	|	1,
	|	2020,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ХозОбществаБюджетныхВУЗов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ),
	|	1,
	|	2012,
	|	2013
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ОрганизацииОказывающиеИнжиниринговыеУслуги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СХ),
	|	2,
	|	2010,
	|	2014
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &СельХозПроизводители
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХМН),
	|	2,
	|	2011,
	|	2014
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &НародныеХудожественныеПромыслы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ООИ),
	|	3,
	|	2011,
	|	2014
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ОрганизацияИнвалидов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СМИ),
	|	3,
	|	2011,
	|	2014
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &СМИ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЕСХН),
	|	4,
	|	2010,
	|	2014
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ЕСХН
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	3,
	|	2011,
	|	2018
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &УпрощенныйНалоговыйРежимПроизводство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	3,
	|	2012,
	|	2018
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ДляФармацевтовАптек
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	3,
	|	2012,
	|	2013
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ИндивидуальныйПредпринимательПрименяющийПатент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПНЭД),
	|	3,
	|	2014,
	|	2018
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ИндивидуальныйПредпринимательПрименяющийПатент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ),
	|	3,
	|	2011,
	|	2019
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &РезидентТехникоВнедренческойЗоны
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ХО),
	|	3,
	|	2011,
	|	2019
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ХозОбществаБюджетныхВУЗов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КВ),
	|	6,
	|	2020,
	|	2020
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ДляОтраслейПострадавшихОтКоронавируснойИнфекции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	1,
	|	2012,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &НекоммерческиеОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АСБ),
	|	1,
	|	2012,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &БлаготворительныеОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ИЦС),
	|	6,
	|	2010,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &УчастникПроектаИнновационныйЦентрСколково
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.МС),
	|	6,
	|	2020,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ДляСубъектовМалогоПредпринимательства
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ОДИТ),
	|	3,
	|	2011,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ITОрганизации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЭКБ),
	|	3,
	|	2021,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ОрганизацииРазработчикиЭлектроннойПродукции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.АНМ),
	|	3,
	|	2018,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &Мультипликаторы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ЧЭС),
	|	3,
	|	2012,
	|	2027
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ДляЧленовЭкипажейМорскихСудовПодФлагомРФ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КРС),
	|	3,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &КРЫМ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ТОР),
	|	3,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &ТОР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.КЛН),
	|	3,
	|	2018,
	|	2025
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &Калининград
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.СПВЛ),
	|	3,
	|	2015,
	|	2100
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &Владивосток
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыТарифовСтраховыхВзносов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.САР),
	|	3,
	|	2020,
	|	2027
	|ИЗ
	|	Справочник.ВидыТарифовСтраховыхВзносов КАК ВидыТарифовСтраховыхВзносов
	|ГДЕ
	|	ВидыТарифовСтраховыхВзносов.Ссылка = &Оффшорный";
	
	Запрос.Выполнить();
КонецПроцедуры	

Процедура ЗаполнитьЗамещаемыеДокументыПоТипам(ЗамещаемыеДокументы, ПачкиСЗВ_6_1, ПачкиСЗВ_6_2, ПачкиСЗВ_6_4) 
	Для Каждого ЗамещаемыйДокумент Из ЗамещаемыеДокументы Цикл
		Если ТипЗнч(ЗамещаемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда 
			ПачкиСЗВ_6_1.Добавить(ЗамещаемыйДокумент);
		ИначеЕсли ТипЗнч(ЗамещаемыйДокумент) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			ПачкиСЗВ_6_2.Добавить(ЗамещаемыйДокумент);
		ИначеЕсли ТипЗнч(ЗамещаемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
			ПачкиСЗВ_6_4.Добавить(ЗамещаемыйДокумент);	
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ПолучитьПачкуСЗВ(СложныйСтаж, ПериодРасчета, МассивПачекСЗВ6_1, МассивПачекСЗВ6_2, МассивПачекСЗВ6_4)	
	Если Год(ПериодРасчета) >= 2013 Тогда 
		Если МассивПачекСЗВ6_4.Количество() > 0 Тогда 
			ПачкаОбъект = МассивПачекСЗВ6_4[0].ПолучитьОбъект();
			ПачкаОбъект.Сотрудники.Очистить();
			ПачкаОбъект.ЗаписиОСтаже.Очистить();
			ПачкаОбъект.СведенияОЗаработке.Очистить();
			МассивПачекСЗВ6_4.Удалить(0);
		Иначе 
			ПачкаОбъект = Документы.ПачкаДокументовСЗВ_6_4.СоздатьДокумент();
		КонецЕсли;
		ПачкаОбъект.ФайлСформирован = Истина;
		Возврат ПачкаОбъект; 	
	ИначеЕсли СложныйСтаж Тогда
		Если МассивПачекСЗВ6_1.Количество() > 0 Тогда 
			ПачкаОбъект = МассивПачекСЗВ6_1[0].ПолучитьОбъект();
			ПачкаОбъект.Сотрудники.Очистить();
			ПачкаОбъект.ЗаписиОСтаже.Очистить();
			МассивПачекСЗВ6_1.Удалить(0);
		Иначе 
			ПачкаОбъект = Документы.ПачкаДокументовСЗВ_6_1.СоздатьДокумент();
		КонецЕсли;
		ПачкаОбъект.ФайлСформирован = Истина;
		Возврат ПачкаОбъект;
	Иначе
		Если МассивПачекСЗВ6_2.Количество() > 0 Тогда 
			ПачкаОбъект = МассивПачекСЗВ6_2[0].ПолучитьОбъект();
			ПачкаОбъект.Сотрудники.Очистить();
			ПачкаОбъект.ЗаписиОСтаже.Очистить();
			МассивПачекСЗВ6_2.Удалить(0);
		Иначе 
			ПачкаОбъект = Документы.РеестрСЗВ_6_2.СоздатьДокумент();
		КонецЕсли;
		ПачкаОбъект.ФайлСформирован = Истина;
		Возврат ПачкаОбъект;
	КонецЕсли;		
КонецФункции	

Функция ПачкаРазделов6(ЗамещаемыеДокументы, Организация, ОтчетныйПериод, НомерПачки, ПараметрыФормированияДокументов, РегНомерПФРВКоррПериод = "", СпециальныйДокумент2015года = Ложь) Экспорт 
	
	Если ЗамещаемыеДокументы.Количество() > 0 Тогда
		ПачкаРазделов6 = ЗамещаемыеДокументы[0].ПолучитьОбъект();
		
		ПачкаРазделов6.Сотрудники.Очистить();
		ПачкаРазделов6.ЗаписиОСтаже.Очистить();
		ПачкаРазделов6.СведенияОЗаработке.Очистить();
		ПачкаРазделов6.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
		ПачкаРазделов6.КорректирующиеСведения.Очистить();
		
		ЗамещаемыеДокументы.Удалить(0);
	Иначе
		ПачкаРазделов6 = Документы.ПачкаРазделов6РасчетаРСВ_1.СоздатьДокумент();	
	КонецЕсли;	
	
									
	ПачкаРазделов6.ОтчетныйПериод = ОтчетныйПериод;
	ПачкаРазделов6.Дата = ТекущаяДатаСеанса();
	ПачкаРазделов6.Организация =  Организация;
	ПачкаРазделов6.ТипСведенийСЗВ = ПараметрыФормированияДокументов.ТипСведенийСЗВ;
	ПачкаРазделов6.НомерПачки = НомерПачки;
	ПачкаРазделов6.КорректируемыйПериод = ПараметрыФормированияДокументов.КорректируемыйПериод;
	ПачкаРазделов6.УстановитьНовыйНомер();
	
	ПачкаРазделов6.РегистрационныйНомерПФРвКорректируемыйПериод = РегНомерПФРВКоррПериод;
	ПачкаРазделов6.СпециальныйДокумент2015года = СпециальныйДокумент2015года;
	
	ДокументыКвартальнойОтчетностиЗаполнитьОтветственныхЛиц(ПачкаРазделов6);
	
	Возврат ПачкаРазделов6;
		
КонецФункции	

Процедура ЗаполнитьСвойстваДокумента(ДокументСЗВ, Организация, ОтчетныйПериод, НомерПачки, КатегорияЗастрахованныхЛиц, ТипДоговора, ТипСведенийСЗВ, КорректируемыйПериод = '00010101', РегНомерПФРВКоррПериод = Неопределено)
									
	ДокументСЗВ.ОтчетныйПериод = ОтчетныйПериод;
	ДокументСЗВ.Дата = ТекущаяДатаСеанса();
	ДокументСЗВ.Организация =  Организация;
	ДокументСЗВ.КатегорияЗастрахованныхЛиц = КатегорияЗастрахованныхЛиц;
	ДокументСЗВ.ТипСведенийСЗВ = ТипСведенийСЗВ;
	ДокументСЗВ.НомерПачки = НомерПачки;
	ДокументСЗВ.КорректируемыйПериод = КорректируемыйПериод;
	ДокументСЗВ.УстановитьНовыйНомер();
	
	Если ТипЗнч(ДокументСЗВ) = Тип("ДокументОбъект.ПачкаДокументовСЗВ_6_4") Тогда
		ДокументСЗВ.ТипДоговора = ТипДоговора;
		
		Если РегНомерПФРВКоррПериод <> Неопределено
			И ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			
			ДокументСЗВ.РегистрационныйНомерПФРвКорректируемыйПериод = РегНомерПФРВКоррПериод;
		КонецЕсли;	
	КонецЕсли;	
			
	ДокументыКвартальнойОтчетностиЗаполнитьОтветственныхЛиц(ДокументСЗВ);
	
КонецПроцедуры	

Процедура ДокументыКвартальнойОтчетностиЗаполнитьОтветственныхЛиц(ДокументОбъект) Экспорт
	ЗаполняемыеЗначения = Новый Структура;
	ЗаполняемыеЗначения.Вставить("Организация", ДокументОбъект.Организация);
	ЗаполняемыеЗначения.Вставить("Руководитель");
	ЗаполняемыеЗначения.Вставить("ДолжностьРуководителя");
	ЗаполняемыеЗначения.Вставить("Ответственный");

	ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения);
	
	ДокументОбъект.Руководитель = ЗаполняемыеЗначения.Руководитель;
	ДокументОбъект.ДолжностьРуководителя = ЗаполняемыеЗначения.ДолжностьРуководителя;
    ДокументОбъект.Ответственный = ЗаполняемыеЗначения.Ответственный;
КонецПроцедуры	

// Формирует ВТ "ВТСписокФизическихЛиц" содержащую список физ. лиц, работавших в организации
// и по которым в отчетном периоде не передавались документы СЗВ.
//
// Параметры:
//  ДатаАктуальности
//  Организация 
//  ИмяВременнойТаблицы - имя ВТ, содержащей список физ. лиц, по которым необходимо получить изменившиеся адреса.
//  МенеджерВременныхТаблиц - менеджер временных таблиц,  содержащей список физ. лиц, по которым необходимо получить
//                            изменившиеся адреса. и в который будет помещена ВТ "ВТИзменившиесяАдресаФизическихЛиц".
//  Ссылка - необязательный.
//
Процедура СоздатьВТИзменившиесяАдресаФизическихЛиц(МенеджерВременныхТаблиц, Знач ИмяВременнойТаблицы, Организация, ОтчетныйПериод,  ДатаАктуальности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить("АдресДляИнформирования");
	МассивВидовКонтактнойИнформации.Добавить("АдресДляИнформированияПредставление");
	
	Если ВРег(ИмяВременнойТаблицы) = "ВТКАДРОВЫЕДАННЫЕФИЗИЧЕСКИХЛИЦ" Тогда
	
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ.* ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛицПромежуточная ИЗ ВТКадровыеДанныеФизическихЛиц КАК ВТ; Уничтожить ВТКадровыеДанныеФизическихЛиц";
		ИмяВременнойТаблицы = "ВТКадровыеДанныеФизическихЛицПромежуточная";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	 
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ.ФизическоеЛицо ИЗ " + ИмяВременнойТаблицы + " КАК ВТ";
	СписокФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, СписокФизическихЛиц, МассивВидовКонтактнойИнформации, ДатаАктуальности);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.ПачкаДокументов КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыПринятыеВПФР
	|ИЗ
	|	Справочник.КомплектыОтчетностиПерсУчета.СписокПачекСЗВ КАК КомплектыОтчетностиПерсУчетаСписокПачекСЗВ
	|ГДЕ
	|	КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка.Организация = &Организация
	|	И КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка.ОтчетныйПериод < &ОтчетныйПериод
	|	И КомплектыОтчетностиПерсУчетаСписокПачекСЗВ.Ссылка.СостояниеКомплекта = ЗНАЧЕНИЕ(перечисление.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.Дата,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.Сотрудник КАК ФизическоеЛицо,
	|	ПачкаДокументовСЗВ_6_1Сотрудники.АдресДляИнформирования
	|ПОМЕСТИТЬ ВТДанныеПачекПринятыхВПФР
	|ИЗ
	|	ИсточникДанныхОтбора КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ПачкаДокументовСЗВ_6_1Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыПринятыеВПФР КАК ДокументыПринятыеВПФР
	|			ПО ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка = ДокументыПринятыеВПФР.Ссылка
	|		ПО СписокФизЛиц.ФизическоеЛицо = ПачкаДокументовСЗВ_6_1Сотрудники.Сотрудник
	|			И ((ВЫРАЗИТЬ(ПачкаДокументовСЗВ_6_1Сотрудники.АдресДляИнформирования КАК СТРОКА(1000))) <> """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрСЗВ_6_2Сотрудники.Ссылка.Дата,
	|	РеестрСЗВ_6_2Сотрудники.Сотрудник,
	|	РеестрСЗВ_6_2Сотрудники.АдресДляИнформирования
	|ИЗ
	|	ИсточникДанныхОтбора КАК СписокФизЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСЗВ_6_2.Сотрудники КАК РеестрСЗВ_6_2Сотрудники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыПринятыеВПФР КАК ДокументыПринятыеВПФР
	|			ПО РеестрСЗВ_6_2Сотрудники.Ссылка = ДокументыПринятыеВПФР.Ссылка
	|		ПО СписокФизЛиц.ФизическоеЛицо = РеестрСЗВ_6_2Сотрудники.Сотрудник
	|			И ((ВЫРАЗИТЬ(РеестрСЗВ_6_2Сотрудники.АдресДляИнформирования КАК СТРОКА(1000))) <> """")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеПачекПринятыхВПФР.АдресДляИнформирования КАК АдресДляИнформирования
	|ПОМЕСТИТЬ ВТПереданныеВПФРАдреса
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ДанныеПачекПринятыхВПФР.Дата) КАК Дата,
	|		ДанныеПачекПринятыхВПФР.ФизическоеЛицо КАК ФизическоеЛицо
	|	ИЗ
	|		ВТДанныеПачекПринятыхВПФР КАК ДанныеПачекПринятыхВПФР
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДанныеПачекПринятыхВПФР.ФизическоеЛицо) КАК ДатыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПачекПринятыхВПФР КАК ДанныеПачекПринятыхВПФР
	|		ПО ДатыДокументов.Дата = ДанныеПачекПринятыхВПФР.Дата
	|			И ДатыДокументов.ФизическоеЛицо = ДанныеПачекПринятыхВПФР.ФизическоеЛицо
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ПереданныеВПФРАдреса.АдресДляИнформирования ЕСТЬ NULL 
	|			ТОГДА ВЫРАЗИТЬ(АдресаДляИнформирования.АдресДляИнформирования КАК СТРОКА(1000))
	|		КОГДА (ВЫРАЗИТЬ(АдресаДляИнформирования.АдресДляИнформирования КАК СТРОКА(1000))) <> (ВЫРАЗИТЬ(ПереданныеВПФРАдреса.АдресДляИнформирования КАК СТРОКА(1000)))
	|			ТОГДА ВЫРАЗИТЬ(АдресаДляИнформирования.АдресДляИнформирования КАК СТРОКА(1000))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДляИнформирования,
	|	ВЫБОР
	|		КОГДА ПереданныеВПФРАдреса.АдресДляИнформирования ЕСТЬ NULL 
	|			ТОГДА ВЫРАЗИТЬ(АдресаДляИнформирования.АдресДляИнформированияПредставление КАК СТРОКА(1000))
	|		КОГДА (ВЫРАЗИТЬ(АдресаДляИнформирования.АдресДляИнформирования КАК СТРОКА(1000))) <> (ВЫРАЗИТЬ(ПереданныеВПФРАдреса.АдресДляИнформирования КАК СТРОКА(1000)))
	|			ТОГДА ВЫРАЗИТЬ(АдресаДляИнформирования.АдресДляИнформированияПредставление КАК СТРОКА(1000))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДляИнформированияПредставление
	|ПОМЕСТИТЬ ВТИзменившиесяАдресаФизическихЛиц
	|ИЗ
	|	ИсточникДанныхОтбора КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК АдресаДляИнформирования
	|		ПО Сотрудники.ФизическоеЛицо = АдресаДляИнформирования.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеВПФРАдреса КАК ПереданныеВПФРАдреса
	|		ПО Сотрудники.ФизическоеЛицо = ПереданныеВПФРАдреса.ФизическоеЛицо
	|ГДЕ
	|	(ПереданныеВПФРАдреса.АдресДляИнформирования ЕСТЬ NULL 
	|			ИЛИ (ВЫРАЗИТЬ(АдресаДляИнформирования.АдресДляИнформирования КАК СТРОКА(1000))) <> (ВЫРАЗИТЬ(ПереданныеВПФРАдреса.АдресДляИнформирования КАК СТРОКА(1000))))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТКадровыеДанныеФизическихЛиц";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанныхОтбора", ИмяВременнойТаблицы);
	
	Если ВРег(ИмяВременнойТаблицы) = "ВТКАДРОВЫЕДАННЫЕФИЗИЧЕСКИХЛИЦПРОМЕЖУТОЧНАЯ" Тогда
	
		Запрос.Текст = Запрос.Текст + "; ВЫБРАТЬ РАЗЛИЧНЫЕ ВТ.* ПОМЕСТИТЬ ВТКадровыеДанныеФизическихЛиц ИЗ ВТКадровыеДанныеФизическихЛицПромежуточная КАК ВТ; Уничтожить ВТКадровыеДанныеФизическихЛицПромежуточная";
		
	КонецЕсли;
	 
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует ВТ "ВТДанныеОДопВзносах" содержащую список физ. лиц. и суммы доп. взносов в ПФР.
//
// Параметры:
//  ПериодРегистрации - начало месяца в котором перечислялись взносы.
//  ИмяВременнойТаблицы - имя ВТ, содержащей список сотрудников по которым необходимо получить доп. взносы. - необязательный.
//  МенеджерВременныхТаблиц - менеджер временных таблиц, в который будет помещена ВТ "ВТДанныеОДопВзносах".
//
Процедура СформироватьВТДанныеОДопВзносах(ПериодРегистрации, ИмяВременнойТаблицы, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОтчетныйПериод", НачалоМесяца(ПериодРегистрации));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&ОтчетныйПериод КАК ОтчетныйПериод,
		|	ИсточникДанных.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаОтчетныеПериоды
		|ИЗ
		|	ВТИсточникДанных КАК ИсточникДанных
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсточникДанных", ИмяВременнойТаблицы);
	
	Запрос.Выполнить();
	
	СформироватьВТДанныеОДопВзносахПоВременнойТаблице(МенеджерВременныхТаблиц, "ВТФизическиеЛицаОтчетныеПериоды");
	
КонецПроцедуры

// Формирует ВТ "ВТДанныеОДопВзносах" содержащую список физ. лиц. и суммы доп. взносов в ПФР.
//
// Параметры:
//  МенеджерВременныхТаблиц - менеджер временных таблиц, в который будет помещена ВТ "ВТДанныеОДопВзносах".
//  ИмяВременнойТаблицы - имя ВТ, содержащей список сотрудников по которым необходимо получить доп. взносы. - необязательный.
//
Процедура СформироватьВТДанныеОДопВзносахПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВременнойТаблицы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсточникДанных.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ИсточникДанных.ОтчетныйПериод КАК ОтчетныйПериод,
		|	СУММА(УдержанияРаботниковОрганизаций.Сумма) КАК СуммаВзносов
		|ПОМЕСТИТЬ ВТДанныеОДопВзносах
		|ИЗ
		|	ВТИсточникДанных КАК ИсточникДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК УдержанияРаботниковОрганизаций
		|		ПО ИсточникДанных.ФизическоеЛицо = УдержанияРаботниковОрганизаций.ФизическоеЛицо
		|			И (УдержанияРаботниковОрганизаций.Период МЕЖДУ ИсточникДанных.ОтчетныйПериод И КОНЕЦПЕРИОДА(ИсточникДанных.ОтчетныйПериод, МЕСЯЦ))
		|ГДЕ
		|	УдержанияРаботниковОрганизаций.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|	И ВЫРАЗИТЬ(УдержанияРаботниковОрганизаций.НачислениеУдержание КАК ПланВидовРасчета.Удержания).КатегорияУдержания = ЗНАЧЕНИЕ(Перечисление.КатегорииУдержаний.ДСВ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсточникДанных.ФизическоеЛицо,
		|	ИсточникДанных.ОтчетныйПериод
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТИсточникДанных", ИмяВременнойТаблицы);
	
	Запрос.Выполнить();

КонецПроцедуры

Функция ПолучитьТекущиеДанныеФизическихЛицДокумента(Дата, МенеджерВременныхТаблиц) 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокФизлицДокумента.ФизическоеЛицо
	|ИЗ
	|	ВТСписокФизлицДокумента КАК СписокФизлицДокумента";
	
	Сотрудники = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");

	МассивНеобходимыхКадровыхДанных = Новый Массив();
	
	МассивНеобходимыхКадровыхДанных.Добавить("ФизическоеЛицо");
	МассивНеобходимыхКадровыхДанных.Добавить("Пол");
	МассивНеобходимыхКадровыхДанных.Добавить("ДатаРождения");
	МассивНеобходимыхКадровыхДанных.Добавить("МестоРождения");
	МассивНеобходимыхКадровыхДанных.Добавить("СтраховойНомерПФР");
	МассивНеобходимыхКадровыхДанных.Добавить("ДокументВид");
	МассивНеобходимыхКадровыхДанных.Добавить("ДокументСерия");
	МассивНеобходимыхКадровыхДанных.Добавить("ДокументНомер");
	МассивНеобходимыхКадровыхДанных.Добавить("ДокументКемВыдан");
	МассивНеобходимыхКадровыхДанных.Добавить("ДокументДатаВыдачи");
	МассивНеобходимыхКадровыхДанных.Добавить("Фамилия");
	МассивНеобходимыхКадровыхДанных.Добавить("Имя");
	МассивНеобходимыхКадровыхДанных.Добавить("Отчество");
	МассивНеобходимыхКадровыхДанных.Добавить("Страна");
	МассивНеобходимыхКадровыхДанных.Добавить("ТелефонДомашнийПредставление");
	МассивНеобходимыхКадровыхДанных.Добавить("АдресМестаПроживания");
	МассивНеобходимыхКадровыхДанных.Добавить("АдресМестаПроживанияПредставление");
	МассивНеобходимыхКадровыхДанных.Добавить("АдресПоПрописке");
	МассивНеобходимыхКадровыхДанных.Добавить("АдресПоПропискеПредставление");
	МассивНеобходимыхКадровыхДанных.Добавить("ИНН");
	
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, Истина, Сотрудники, МассивНеобходимыхКадровыхДанных, Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписокФизлицДокумента.НомерСтроки,
	|	КадровыеДанныеФизЛиц.Фамилия КАК ДанныеФизЛицаФамилия,
	|	КадровыеДанныеФизЛиц.Имя КАК ДанныеФизЛицаИмя,
	|	КадровыеДанныеФизЛиц.Отчество КАК ДанныеФизЛицаОтчество,
	|	КадровыеДанныеФизЛиц.Пол КАК ДанныеФизЛицаПол,
	|	КадровыеДанныеФизЛиц.ДатаРождения КАК ДанныеФизЛицаДатаРождения,
	|	КадровыеДанныеФизЛиц.МестоРождения КАК ДанныеФизЛицаМестоРождения,
	|	КадровыеДанныеФизЛиц.СтраховойНомерПФР КАК ДанныеФизЛицаСтраховойНомерПФР,
	|	КадровыеДанныеФизЛиц.АдресПоПрописке КАК ДанныеФизЛицаАдресРегистрации,
	|	КадровыеДанныеФизЛиц.АдресПоПропискеПредставление КАК ДанныеФизЛицаАдресРегистрацииПредставление,
	|	КадровыеДанныеФизЛиц.АдресМестаПроживания КАК ДанныеФизЛицаАдресФактический,
	|	КадровыеДанныеФизЛиц.АдресМестаПроживанияПредставление КАК ДанныеФизЛицаАдресФактическийПредставление,
	|	КадровыеДанныеФизЛиц.ТелефонДомашнийПредставление КАК ДанныеФизЛицаТелефоны,
	|	КадровыеДанныеФизЛиц.ДокументВид КАК ДанныеФизЛицаВидДокумента,
	|	КадровыеДанныеФизЛиц.ДокументСерия КАК ДанныеФизЛицаСерияДокумента,
	|	КадровыеДанныеФизЛиц.ДокументНомер КАК ДанныеФизЛицаНомерДокумента,
	|	КадровыеДанныеФизЛиц.ДокументДатаВыдачи КАК ДанныеФизЛицаДатаВыдачи,
	|	КадровыеДанныеФизЛиц.ДокументКемВыдан КАК ДанныеФизЛицаКемВыдан,
	|	КадровыеДанныеФизЛиц.Страна КАК ДанныеФизЛицаГражданство,
	|	КадровыеДанныеФизЛиц.ИНН КАК ДанныеФизЛицаИНН
	|ИЗ
	|	ВТСписокФизлицДокумента КАК СписокФизлицДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц
	|		ПО СписокФизлицДокумента.ФизическоеЛицо = КадровыеДанныеФизЛиц.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить();

КонецФункции	

Процедура ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаЗаписейСтажа, Отказ, РасширеннаяПроверка = Истина, Поле = "") Экспорт
	Если РасширеннаяПроверка Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже, № основной записи %2 %3: %4'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ВыборкаЗаписейСтажа.НомерОсновнойЗаписи, ?(ЗначениеЗаполнено(ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ дополнительной записи %1'"), ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи), ""), ТекстОшибки);
	Иначе 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1, записи о стаже: %2'"), ВыборкаЗаписейСтажа.СотрудникНаименование, ТекстОшибки);
	КонецЕсли;	
	
	Если РасширеннаяПроверка Тогда
		НомерОсновнойЗаписи = ВыборкаЗаписейСтажа.НомерОсновнойЗаписи;
		НомерДополнительнойЗаписи = ВыборкаЗаписейСтажа.НомерДополнительнойЗаписи;
	Иначе	
		НомерОсновнойЗаписи = 0;
		НомерДополнительнойЗаписи = 0;
	КонецЕсли;	
		
	ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОСтаже(Ошибки, 
			Ссылка, 
			ВыборкаЗаписейСтажа.НомерСтрокиСотрудник,
			ВыборкаЗаписейСтажа.НомерСтрокиСтаж, 
			ТекстСообщения, 
			Поле, 
			Отказ);
	
КонецПроцедуры	

Функция ПолучитьСледующийНомерПачки(Организация, ОтчетныйПериод) Экспорт 
	УстановитьПривилегированныйРежим(Истина);
	СчВыгруженныхФайлов = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(Организация, Год(ОтчетныйПериод));
	УстановитьПривилегированныйРежим(Ложь);
	Возврат СчВыгруженныхФайлов + 1;
КонецФункции	

Функция КатегорииЗЛИностранцев() Экспорт 
	МассивКатегорий = Новый Массив;
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖИЖ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖНР);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖСХ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЕН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖМН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖХО);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖТЗ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖИТ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖСИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЭД);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЦС);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖСБ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЭС);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПИЖ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПНР);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПСХ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЕН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПМН);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПОИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПХО);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПТЗ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПИТ);	
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПСИ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЭД);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЦС);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПСБ);
	МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЭС);

	Возврат МассивКатегорий;
КонецФункции	

Функция ТарифыПоКатегориям(ОтчетныйПериод) Экспорт 
	ТарифыСтраховыхВзносов = РегистрыСведений.ТарифыСтраховыхВзносов.ТаблицаТарифовСтраховыхВзносов();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТарифыСтраховыхВзносов", ТарифыСтраховыхВзносов);
	Запрос.УстановитьПараметр("ОтчетныйГод", Год(ОтчетныйПериод));
	Запрос.УстановитьПараметр("КонецГода", КонецГода(ОтчетныйПериод));
	Запрос.УстановитьПараметр("ОбщийНалоговыйРежим", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим"));
	Запрос.УстановитьПараметр("ТарифМоряков", ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ВидыТарифовСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ"));
	СформироватьВТСоответствиеТарифаИВидаЗЛКатегории(Запрос.МенеджерВременныхТаблиц, Год(ОтчетныйПериод));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТарифыСтраховыхВзносов.Период,
	|	ТарифыСтраховыхВзносов.ВидТарифа,
	|	ТарифыСтраховыхВзносов.ПФР,
	|	ТарифыСтраховыхВзносов.ПФРНакопительная,
	|	ТарифыСтраховыхВзносов.ФСС,
	|	ТарифыСтраховыхВзносов.ФФОМС,
	|	ТарифыСтраховыхВзносов.ТФОМС
	|ПОМЕСТИТЬ ВТТаблицаТарифовСтраховыхВзносов
	|ИЗ
	|	&ТарифыСтраховыхВзносов КАК ТарифыСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТарифовСтраховыхВзносов.Период) КАК Период,
	|	ТаблицаТарифовСтраховыхВзносов.ВидТарифа
	|ПОМЕСТИТЬ ВТПериодыТарифов
	|ИЗ
	|	ВТТаблицаТарифовСтраховыхВзносов КАК ТаблицаТарифовСтраховыхВзносов
	|ГДЕ
	|	ТаблицаТарифовСтраховыхВзносов.Период <= &КонецГода
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТарифовСтраховыхВзносов.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТарифовСтраховыхВзносов.Период,
	|	ТаблицаТарифовСтраховыхВзносов.ВидТарифа,
	|	ТаблицаТарифовСтраховыхВзносов.ПФР,
	|	ТаблицаТарифовСтраховыхВзносов.ПФРНакопительная,
	|	ТаблицаТарифовСтраховыхВзносов.ФСС,
	|	ТаблицаТарифовСтраховыхВзносов.ФФОМС,
	|	ТаблицаТарифовСтраховыхВзносов.ТФОМС
	|ПОМЕСТИТЬ ВТТарифыСтраховыхВзносовСрезПоследних
	|ИЗ
	|	ВТПериодыТарифов КАК ПериодыТарифов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТаблицаТарифовСтраховыхВзносов КАК ТаблицаТарифовСтраховыхВзносов
	|		ПО ПериодыТарифов.ВидТарифа = ТаблицаТарифовСтраховыхВзносов.ВидТарифа
	|			И ПериодыТарифов.Период = ТаблицаТарифовСтраховыхВзносов.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифыСтраховыхВзносовСрезПоследних.ВидТарифа,
	|	ТарифыСтраховыхВзносовСрезПоследних.ПФР,
	|	ТарифыСтраховыхВзносовСрезПоследних.ПФРНакопительная
	|ПОМЕСТИТЬ ВТТарифыСтраховыхВзносов
	|ИЗ
	|	ВТТарифыСтраховыхВзносовСрезПоследних КАК ТарифыСтраховыхВзносовСрезПоследних
	|ГДЕ
	|	(ТарифыСтраховыхВзносовСрезПоследних.ВидТарифа <> &ТарифМоряков
	|			ИЛИ &ОтчетныйГод >= 2014)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ТарифМоряков,
	|	ТарифыСтраховыхВзносовСрезПоследних.ПФР,
	|	ТарифыСтраховыхВзносовСрезПоследних.ПФРНакопительная
	|ИЗ
	|	ВТТарифыСтраховыхВзносовСрезПоследних КАК ТарифыСтраховыхВзносовСрезПоследних
	|ГДЕ
	|	ТарифыСтраховыхВзносовСрезПоследних.ВидТарифа = &ОбщийНалоговыйРежим
	|	И &ОтчетныйГод < 2014
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц,
	|	МИНИМУМ(СоответствиеТарифаИВидаЗЛКатегории.ВидТарифаСтраховыхВзносов) КАК ВидТарифаСтраховыхВзносов
	|ПОМЕСТИТЬ ВТТарифыПоКатегориям
	|ИЗ
	|	ВТСоответствиеТарифаИВидаЗЛКатегории КАК СоответствиеТарифаИВидаЗЛКатегории
	|ГДЕ
	|	&ОтчетныйГод МЕЖДУ СоответствиеТарифаИВидаЗЛКатегории.ГодС И СоответствиеТарифаИВидаЗЛКатегории.ГодПо
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеТарифаИВидаЗЛКатегории.КатегорияЗастрахованныхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТарифыСтраховыхВзносов.ПФР - ТарифыСтраховыхВзносов.ПФРНакопительная КАК ПФРСтраховая,
	|	ТарифыСтраховыхВзносов.ПФРНакопительная,
	|	ТарифыПоКатегориям.КатегорияЗастрахованныхЛиц
	|ИЗ
	|	ВТТарифыПоКатегориям КАК ТарифыПоКатегориям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТарифыСтраховыхВзносов КАК ТарифыСтраховыхВзносов
	|		ПО ТарифыПоКатегориям.ВидТарифаСтраховыхВзносов = ТарифыСтраховыхВзносов.ВидТарифа";

	Выборка = Запрос.Выполнить().Выбрать();

	ТарифыПоКатегориям = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Тарифы = Новый Структура("ПФРСтраховая, ПФРНакопительная");
		ЗаполнитьЗначенияСвойств(Тарифы, Выборка);
		ТарифыПоКатегориям.Вставить(Выборка.КатегорияЗастрахованныхЛиц, Тарифы);
	КонецЦикла;	
	
	Возврат ТарифыПоКатегориям;		
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки документов СЗВ-6-1, СЗВ-6-2, СПВ-1

Функция ДокументыСЗВПравилаПроверкиДанныхЗЛ(ПроверятьАдрес) Экспорт 
	ПравилаПроверки = Новый Массив;
	
	ПравилоПроверкиСНИЛС = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиСНИЛС.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиСНИЛС.ПроверяемыйЭлемент = "СтраховойНомерПФР";
	ПравилоПроверкиСНИЛС.ПутьКДанным = "СтраховойНомерПФР";
	ПравилоПроверкиСНИЛС.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'СНИЛС'");

	ПравилаПроверки.Добавить(ПравилоПроверкиСНИЛС);
	
	ПравилоПроверкиФамилия = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиФамилия.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиФамилия.ПроверяемыйЭлемент = "Фамилия";
	ПравилоПроверкиФамилия.ПутьКДанным = "Фамилия";
	ПравилоПроверкиФамилия.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Фамилия'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиФамилия);
	
	ПравилоПроверкиИмя = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиИмя.ОбязательноКЗаполнению = Истина;
	ПравилоПроверкиИмя.ПроверяемыйЭлемент = "Имя";
	ПравилоПроверкиИмя.ПутьКДанным = "Имя";
	ПравилоПроверкиИмя.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Имя'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиИмя);
	
	ПравилоПроверкиОтчество = НовыйПравилоПроверкиДанныхЗЛ();
	ПравилоПроверкиОтчество.ОбязательноКЗаполнению = Ложь;
	ПравилоПроверкиОтчество.ПроверяемыйЭлемент = "Отчество";
	ПравилоПроверкиОтчество.ПутьКДанным = "Отчество";
	ПравилоПроверкиОтчество.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Отчество'");
	
	ПравилаПроверки.Добавить(ПравилоПроверкиОтчество);
	
	Если ПроверятьАдрес Тогда
		ПравилоПроверкиАдрес = НовыйПравилоПроверкиДанныхЗЛ();
		ПравилоПроверкиАдрес.ОбязательноКЗаполнению = Ложь;
		ПравилоПроверкиАдрес.ПроверяемыйЭлемент = "Адрес";
		ПравилоПроверкиАдрес.ПутьКДанным = "АдресДляИнформирования";
		ПравилоПроверкиАдрес.ПредставлениеПроверяемогоЭлемента = НСтр("ru = 'Адрес для информирования'");
		
		ПравилаПроверки.Добавить(ПравилоПроверкиАдрес);
	КонецЕсли;	
	
	Возврат ПравилаПроверки;
КонецФункции	

Функция ДокументыСЗВДанныеЗастрахованногоЛица(ВыборкаПоСтрокамДокумента) Экспорт
	ДанныеЗастрахованногоЛица = Новый Структура();
	ДанныеЗастрахованногоЛица.Вставить("ФизическоеЛицо", ВыборкаПоСтрокамДокумента.Сотрудник);
	ДанныеЗастрахованногоЛица.Вставить("Наименование", ВыборкаПоСтрокамДокумента.СотрудникНаименование);
	ДанныеЗастрахованногоЛица.Вставить("СтраховойНомерПФР");
	ДанныеЗастрахованногоЛица.Вставить("Фамилия");
	ДанныеЗастрахованногоЛица.Вставить("Имя");
	ДанныеЗастрахованногоЛица.Вставить("Отчество");
	ДанныеЗастрахованногоЛица.Вставить("АдресДляИнформирования");
	
	ЗаполнитьЗначенияСвойств(ДанныеЗастрахованногоЛица, ВыборкаПоСтрокамДокумента);
	
	Возврат ДанныеЗастрахованногоЛица;
КонецФункции	

Процедура РасположитьЗаписиСтажа(Сотрудник, ТаблицаСтажа) Экспорт
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	СтрокиСтажаПоСотруднику = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
	
	ТаблицаЗаписейОСтаже = ТаблицаСтажа.Выгрузить(СтрокиСтажаПоСотруднику);
	
	// Дополнительным записям проставим даты начала и окончания периода
	ТекущаяОсновнаяЗапись = Неопределено;
	Для Каждого Запись Из ТаблицаЗаписейОСтаже Цикл

		Если Запись.НомерДополнительнойЗаписи = 0 Тогда
			ТекущаяОсновнаяЗапись = Запись;
		Иначе
			Запись.ДатаНачалаПериода = ТекущаяОсновнаяЗапись.ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ТекущаяОсновнаяЗапись.ДатаОкончанияПериода;
		КонецЕсли;	 
	КонецЦикла;

	// Отсортируем таблицу по датам и номерам записей	
	ТаблицаЗаписейОСтаже.Сортировать("ДатаНачалаПериода,НомерДополнительнойЗаписи");

	// Уберем даты у дополнительных записей
	Для Каждого Запись Из ТаблицаЗаписейОСтаже Цикл
		Если Запись.НомерДополнительнойЗаписи <> 0 Тогда
			Запись.ДатаНачалаПериода = "";
			Запись.ДатаОкончанияПериода = "";
		КонецЕсли;	 
	КонецЦикла;

	Для Каждого СтрокаСтажа Из СтрокиСтажаПоСотруднику Цикл
		ТаблицаСтажа.Удалить(ТаблицаСтажа.Индекс(СтрокаСтажа));
	КонецЦикла;
	
	Для Каждого СтрокаСтажаСорт Из ТаблицаЗаписейОСтаже Цикл
		НоваяСтрокаСтажа = ТаблицаСтажа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСтажа, СтрокаСтажаСорт);
	КонецЦикла;	
		
КонецПроцедуры

// Раскладывает срок в днях на годы, месяцы, дни
//
Процедура РазложитьСрокВДнях(СрокВДнях,Лет, Месяцев, Дней) 

	ДнейВГоду 		= 12 * 30;
    Лет 			= Цел(СрокВДнях / ДнейВГоду);
	ОстатокДней 	= СрокВДнях - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

// Формирует строку "дополнительных сведений" по исчисляемому стажу в "удобочитаемом" виде для отражения в формах.
Функция СобратьСтрокуИсчисляемогоСтажа(ЗаписьСтажа) Экспорт 	
	НулевойПараметр	=	ЗаписьСтажа.НулевойПараметрИсчисляемогоСтажа;
	ПервыйПараметр	=	ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметр	=	ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметр	=	ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ.Код Тогда
		Возврат ?(ПервыйПараметр > 0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр> 0,""+ВторойПараметр + " мин","");
	ИначеЕсли ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод	=	Справочники.ОснованияИсчисляемогоСтраховогоСтажа.СЕЗОН.Код Тогда
		Возврат ""
	Иначе
		Если НулевойПараметр	=	""	Тогда
			Возврат ?(ПервыйПараметр > 0,""+ПервыйПараметр + " м ","") + ?(ВторойПараметр > 0,""+ВторойПараметр + " дн ","") + СокрЛП("" + ТретийПараметр);
		Иначе
			Возврат ?(НулевойПараметр > 0,""+НулевойПараметр + " г ","") + ?(ПервыйПараметр > 0,""+ПервыйПараметр + " м ","") + ?(ВторойПараметр>0,"" + ВторойПараметр + " дн ","") + СокрЛП("" + ТретийПараметр);
		КонецЕсли;
	КонецЕсли;
КонецФункции 

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число.
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло.
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным.
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться.
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

Функция КвартальнаяОтчетностьПерераспределятьВзносыАвтоматически() Экспорт 
	Возврат ПерсонифицированныйУчетВнутренний.КвартальнаяОтчетностьПерераспределятьВзносыАвтоматически()	
КонецФункции	

// Формирует строку "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
Функция СобратьСтрокуПенсииЗаВыслугуЛет(ЗаписьСтажа) Экспорт 
	
	КодОснования 	= ЗаписьСтажа.ОснованиеВыслугиЛет;
	ВсеКодыВыслуги	= Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК;
	ПервыйПараметр	= ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр	= ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр	= ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	Если 
		КодОснования = ВсеКодыВыслуги.ИСПКЛС1 Или КодОснования = ВсеКодыВыслуги.САМОЛЕТ Или 
		КодОснования = ВсеКодыВыслуги.СПЕЦАВ Или КодОснования = ВсеКодыВыслуги.ЛЕТИСП Или 
		КодОснования = ВсеКодыВыслуги.ИТСИСП Или КодОснования = ВсеКодыВыслуги.ИНСПЕКТ Или
		КодОснования = ВсеКодыВыслуги.ОПЫТИСП Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
	ИначеЕсли 
		КодОснования = ВсеКодыВыслуги.РЕАКТИВН Или КодОснования = ВсеКодыВыслуги.НОРМАПР Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" прыжков ","");
	ИначеЕсли 
		КодОснования = ВсеКодыВыслуги.НОРМСП Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" сп/под ","");
	ИначеЕсли 
		КодОснования = ВсеКодыВыслуги.УВД Или КодОснования = ВсеКодыВыслуги.ИТС Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" м ","")+?(ВторойПараметр>0,""+ВторойПараметр+" дн ","");
	ИначеЕсли 
		КодОснования = ВсеКодыВыслуги.ХИРУРГД Или КодОснования = ВсеКодыВыслуги.ХИРУРСМ Или 
		КодОснования = ВсеКодыВыслуги.ЗП81ГД Или КодОснования = ВсеКодыВыслуги.ЗП81СМ Тогда
		Возврат ?(ТретийПараметр>0,""+ТретийПараметр+" ставок ","");
	ИначеЕсли 
		КодОснования = ВсеКодыВыслуги.ЗП80РК Или КодОснования = ВсеКодыВыслуги.ЗП80ПД Тогда
		Возврат ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ТретийПараметр>0,""+ТретийПараметр+" ставок ","");
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Выполняет автоматическое заполнение итоговых данных о стаже
//
Функция ПолучитьТаблицуИтоговСтажаПоСотруднику(ЗаписиОСтаже, Сотрудник) Экспорт
    ДлинаСуток = 86400;
	
	СуммированныйСтаж = Новый ТаблицаЗначений;
	СуммированныйСтаж.Колонки.Добавить("ВидСтажа");
	СуммированныйСтаж.Колонки.Добавить("Сотрудник");
	СуммированныйСтаж.Колонки.Добавить("НомерЗаписи");
	СуммированныйСтаж.Колонки.Добавить("КодСтажа");
	СуммированныйСтаж.Колонки.Добавить("Лет");
	СуммированныйСтаж.Колонки.Добавить("Месяцев");
	СуммированныйСтаж.Колонки.Добавить("Дней");
	
	ТаблицаЗаписейОСтаже = ЗаписиОСтаже.Скопировать();
    //РАСЧЕТ ОБЩЕГО ТРУДОВОГО СТАЖА С УЧЕТОМ ПЕРЕСЕЧЕНИЯ ПЕРИОДОВ

	// Выполним расширение записей с кодом исчисляемого стажа СЕЗОН
	Для Каждого Запись Из ТаблицаЗаписейОСтаже Цикл
		// Пропустим льготные записи
		Если Запись.НомерДополнительнойЗаписи <> 0 Тогда
			Продолжить;
		КонецЕсли;	 
		Если Запись.ОснованиеИсчисляемогоСтажа	=	Справочники.ОснованияИсчисляемогоСтраховогоСтажа.СЕЗОН	Тогда	
			// Расширение периода до календарного года
			Запись.ДатаНачалаПериода = НачалоГода(Запись.ДатаНачалаПериода);
			Запись.ДатаОкончанияПериода = КонецГода(Запись.ДатаОкончанияПериода);
		КонецЕсли;
	КонецЦикла;	

	// Выполним календарное поглощение в 2 прохода:
	// 1 проход - поглощение записями ЛЕПРО всех остальных записей
	// 2 проход - поглощение записями СЕЗОН всех оставшихся записей.
	Для Сч = 1 По 2 Цикл

		Если Сч = 1 Тогда
			ПриоритетноеОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ЛЕПРО;
		Иначе	
			ПриоритетноеОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.СЕЗОН;
		КонецЕсли;	 

		ВсегоЗаписей = ТаблицаЗаписейОСтаже.Количество(); 
		Для НомерЗаписиОсновной = 0 По ВсегоЗаписей - 1 Цикл
			Запись = ТаблицаЗаписейОСтаже[НомерЗаписиОсновной];

			Если Запись.ОснованиеИсчисляемогоСтажа = ПриоритетноеОснованиеИсчисляемогоСтажа Тогда

				Для НомерЗаписиДополнительный = 0 По ВсегоЗаписей - 1 Цикл
					Запись2 = ТаблицаЗаписейОСтаже[НомерЗаписиДополнительный];

					Если Запись = Запись2 Тогда//Запись не может поглотить саму себя
						Продолжить;
					КонецЕсли;	 
					
					Если (Запись2.ДатаНачалаПериода > Запись.ДатаОкончанияПериода) Или
						(Запись2.ДатаОкончанияПериода < Запись.ДатаНачалаПериода)Тогда
						// Периоды не пересекаются
						Продолжить;
					Иначе	
						Если (Запись2.ДатаНачалаПериода >= Запись.ДатаНачалаПериода) Тогда
							Если (Запись2.ДатаОкончанияПериода <= Запись.ДатаОкончанияПериода) Тогда
								// Полное поглощение периода - удаляем запись2 с помощью задания отрицательного интервала.
								Запись2.ДатаНачалаПериода = Дата('00010102');
								Запись2.ДатаОкончанияПериода = Дата('00010101');
							Иначе//Запись 2 начинается позднее и оканчивается позднее записи 1 - обрежем голову
								Запись2.ДатаНачалаПериода = Запись.ДатаОкончанияПериода + ДлинаСуток;
							КонецЕсли;	
						Иначе
							Если (Запись2.ДатаОкончанияПериода <= Запись.ДатаОкончанияПериода) Тогда
								// Запись2 начинается раньше и оканчивается раньше Записи1 - обрежем хвост
								Запись2.ДатаОкончанияПериода = Запись.ДатаНачалаПериода - ДлинаСуток;
							Иначе//Запись 2 начинается раньше и оканчивается позднее записи 1 - разбиение интервала на 2 части
								// породим вторую часть копирование исходной записи
								НоваяСтрока = ТаблицаЗаписейОСтаже.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись2);
								// обрежем хвост у первой части
								Запись2.ДатаОкончанияПериода = Запись.ДатаНачалаПериода - ДлинаСуток;
								// обрежем голову у второй части
								НоваяСтрока.ДатаНачалаПериода = Запись.ДатаОкончанияПериода + ДлинаСуток;
							КонецЕсли;	
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЦикла;	

			КонецЕсли;	
		КонецЦикла;	
		
	КонецЦикла;	
	

	// Расчет общего стажа по оставшимся записям
	ОбщийСтажЛет				=	0;
	ОбщийСтажМесяцев			=	0;
	ОбщийСтажДней				=	0;

	Для Каждого Запись Из ТаблицаЗаписейОСтаже Цикл

		// Пропустим поглощенные и дополнительные записи
		Если  Запись.ДатаОкончанияПериода = Дата('00010101') Тогда
			Продолжить;
		КонецЕсли;	
		
		ЛетПоПериоду = 0;
		МесяцевПоПериоду = 0;
		ДнейПоПериоду = 0;
		ПолучитьСтажЗаПериод(Запись.ДатаОкончанияПериода,	Запись.ДатаНачалаПериода, ЛетПоПериоду,	МесяцевПоПериоду, ДнейПоПериоду);

		// Для видов деятельности, отличных от РАБОТА, день на увольнение не предоставляется.
		Если Запись.ВидДеятельности <> Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК.РАБОТА Тогда
			ДнейПоПериоду = ДнейПоПериоду - 1;
		КонецЕсли;	 

		Если Запись.ОснованиеИсчисляемогоСтажа	=	Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ЛЕПРО	Тогда
			// Стаж удваивается
			ЛетПоПериоду = ЛетПоПериоду * 2;
			МесяцевПоПериоду = МесяцевПоПериоду * 2;
			ДнейПоПериоду = ДнейПоПериоду * 2;
		ИначеЕсли Запись.ОснованиеИсчисляемогоСтажа	=	Справочники.ОснованияИсчисляемогоСтраховогоСтажа.УИК104	Тогда	
			// Стаж берется из ФОВ
			ЛетПоПериоду = Запись.НулевойПараметрИсчисляемогоСтажа;
			МесяцевПоПериоду = Запись.ПервыйПараметрИсчисляемогоСтажа;
			ДнейПоПериоду = Запись.ВторойПараметрИсчисляемогоСтажа;
		КонецЕсли;	
		
		ОбщийСтажЛет		=	ОбщийСтажЛет		+	ЛетПоПериоду;
		ОбщийСтажМесяцев	=	ОбщийСтажМесяцев	+	МесяцевПоПериоду;
		ОбщийСтажДней		=	ОбщийСтажДней		+	ДнейПоПериоду;
	КонецЦикла;	
	
	ТаблицаЗаписейОСтаже = ЗаписиОСтаже.Скопировать();
	
	ТаблицаТЕРР = Новый ТаблицаЗначений;
	ТаблицаТЕРР.Колонки.Добавить("КодСтажа");
	ТаблицаТЕРР.Колонки.Добавить("Лет");
	ТаблицаТЕРР.Колонки.Добавить("Месяцев");
	ТаблицаТЕРР.Колонки.Добавить("Дней");

	ТаблицаОСОБ = ТаблицаТЕРР.Скопировать();
	ТаблицаВЫСЛ = ТаблицаТЕРР.Скопировать();

	ТекущаяОсновнаяЗапись = Неопределено;

	Для Каждого Запись Из ТаблицаЗаписейОСтаже Цикл

		Если Запись.НомерДополнительнойЗаписи = 0 Тогда
			ТекущаяОсновнаяЗапись = Запись;
			ЭтоОсновнаяЗапись = ИСТИНА;
			// Счетчики терр стажа по коду МКС и РКС в рамках основной записи
			НакопленныйСтажМКС = 0;
			НакопленныйСтажРКС = 0;
		Иначе
			ЭтоОсновнаяЗапись = ЛОЖЬ;
		КонецЕсли;	 
		
		ЛетПоПериоду = 0;
		МесяцевПоПериоду = 0;
		ДнейПоПериоду = 0;
		ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, ЛетПоПериоду,	МесяцевПоПериоду, ДнейПоПериоду);

		ФОВ_Лет = Запись.НулевойПараметрИсчисляемогоСтажа;		
		ФОВ_Месяцев = Запись.ПервыйПараметрИсчисляемогоСтажа;
		ФОВ_Дней = Запись.ВторойПараметрИсчисляемогоСтажа;

		// Признак указания фактически-отработанного времени
		ФОВУказан = (ФОВ_Лет + ФОВ_Месяцев + ФОВ_Дней)  <> 0;
        УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
		
		// Расчет стажа по территориальным условиям
		Если ЗначениеЗаполнено(Запись.ТерриториальныеУсловия) Тогда
			НоваяСтрока = ТаблицаТЕРР.Добавить();
			НоваяСтрока.КодСтажа = Запись.ТерриториальныеУсловия;

			// При не указании ФОВ, для ВОДОЛАЗОВ, при указании условий труда стаж берем по периоду.
			Если (НЕ ФОВУказан)
				ИЛИ (Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ)
				ИЛИ (УказаныОсобыеУсловияТруда) Тогда
				СтажДляЗаписи = ЛетПоПериоду*12*30 + МесяцевПоПериоду*30 + ДнейПоПериоду;
			Иначе	
				СтажДляЗаписи = ФОВ_Лет*12*30 + ФОВ_Месяцев*30 + ФОВ_Дней;
			КонецЕсли;	  

			// Для кодов МКС и РКС надо выполнить контроль стажа на не превышение всего периода основной записи.
			СтажПоПериодуОсновнойЗаписи = ЛетПоПериоду*12*30 + МесяцевПоПериоду*30 + ДнейПоПериоду;
			Если Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС Тогда
				СтажДляЗаписи = Мин(СтажПоПериодуОсновнойЗаписи - НакопленныйСтажМКС, СтажДляЗаписи);
				НакопленныйСтажМКС = НакопленныйСтажМКС + СтажДляЗаписи;
			ИначеЕсли Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС Тогда
				СтажДляЗаписи = Мин(СтажПоПериодуОсновнойЗаписи - НакопленныйСтажРКС, СтажДляЗаписи);
				НакопленныйСтажРКС = НакопленныйСтажРКС + СтажДляЗаписи;
			КонецЕсли;	 

			РазложитьСрокВДнях(СтажДляЗаписи, НоваяСтрока.Лет, НоваяСтрока.Месяцев, НоваяСтрока.Дней);
		КонецЕсли;	

		// Расчет стажа за особые условия труда
		Если УказаныОсобыеУсловияТруда Тогда
			НоваяСтрока = ТаблицаОСОБ.Добавить();
			НоваяСтрока.КодСтажа = Запись.ОсобыеУсловияТруда;
			НоваяСтрока.Лет = ФОВ_Лет; 
			НоваяСтрока.Месяцев = ФОВ_Месяцев;
			НоваяСтрока.Дней = ФОВ_Дней;

			// При не указании ФОВ и ВОДОЛАЗОВ стаж берем по периоду
			Если (НЕ ФОВУказан)ИЛИ(Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ) Тогда
				НоваяСтрока.Лет = ЛетПоПериоду; 
				НоваяСтрока.Месяцев = МесяцевПоПериоду;
				НоваяСтрока.Дней = ДнейПоПериоду;
			Иначе	
				НоваяСтрока.Лет = ФОВ_Лет; 
				НоваяСтрока.Месяцев = ФОВ_Месяцев;
				НоваяСтрока.Дней = ФОВ_Дней;
			КонецЕсли;	  
		КонецЕсли;	

		// Расчет стажа за выслугу лет
		Если ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет) Тогда
			НоваяСтрока = ТаблицаВЫСЛ.Добавить();
			НоваяСтрока.КодСтажа = Запись.ОснованиеВыслугиЛет;

			ВЫСЛПоПериоду = Истина;

			Если (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.УВД)
				ИЛИ(Запись.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.ИТС) Тогда
				Если Запись.ПервыйПараметрВыслугиЛет + Запись.ВторойПараметрВыслугиЛет <> 0 Тогда
					НоваяСтрока.Лет = 0; 
					НоваяСтрока.Месяцев = Запись.ПервыйПараметрВыслугиЛет;
					НоваяСтрока.Дней = Запись.ВторойПараметрВыслугиЛет;
					ВЫСЛПоПериоду = Ложь;
				КонецЕсли;	
			КонецЕсли;	

			Если ВЫСЛПоПериоду Тогда	
				НоваяСтрока.Лет = ЛетПоПериоду; 
				НоваяСтрока.Месяцев = МесяцевПоПериоду;
				НоваяСтрока.Дней = ДнейПоПериоду;
			КонецЕсли;	 
		КонецЕсли;	

	КонецЦикла;	

	// Заносим в таблицу итогового стажа данные об общем стаже

	ПолучитьПриведенныйСтаж(ОбщийСтажЛет,ОбщийСтажМесяцев,ОбщийСтажДней);
	Если ОбщийСтажЛет + ОбщийСтажМесяцев + ОбщийСтажДней <> 0 Тогда
		СтрокаИтоговогоСтажа = СуммированныйСтаж.Добавить();
		СтрокаИтоговогоСтажа.Сотрудник = Сотрудник;
		СтрокаИтоговогоСтажа.НомерЗаписи = 1;
		СтрокаИтоговогоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж;
		СтрокаИтоговогоСтажа.Лет = ОбщийСтажЛет;
		СтрокаИтоговогоСтажа.Месяцев = ОбщийСтажМесяцев;
		СтрокаИтоговогоСтажа.Дней = ОбщийСтажДней;
	КонецЕсли;	 

	ТаблицаТЕРР.Свернуть("КодСтажа","Лет,Месяцев,Дней");
	ТаблицаОСОБ.Свернуть("КодСтажа","Лет,Месяцев,Дней");
	ТаблицаВЫСЛ.Свернуть("КодСтажа","Лет,Месяцев,Дней");

	// Заносим в итоговую таблицу данные о территориальных условиях
    Сч = 1;
	Для Каждого Строка Из ТаблицаТЕРР Цикл
		ПолучитьПриведенныйСтаж(Строка.Лет,Строка.Месяцев,Строка.Дней);
		Если Строка.Лет + Строка.Месяцев + Строка.Дней <> 0 Тогда
			СтрокаИтоговогоСтажа = СуммированныйСтаж.Добавить();
	        Сч = Сч + 1;
			СтрокаИтоговогоСтажа.НомерЗаписи = Сч;
			СтрокаИтоговогоСтажа.Сотрудник = Сотрудник;
			СтрокаИтоговогоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия;
			СтрокаИтоговогоСтажа.КодСтажа = Строка.КодСтажа;
			СтрокаИтоговогоСтажа.Лет = Строка.Лет;
			СтрокаИтоговогоСтажа.Месяцев = Строка.Месяцев;
			СтрокаИтоговогоСтажа.Дней = Строка.Дней;
		КонецЕсли;	 
	КонецЦикла;	

	// Заносим в итоговую таблицу данные об особых условиях труда
	Для Каждого Строка Из ТаблицаОСОБ Цикл
		ПолучитьПриведенныйСтаж(Строка.Лет,Строка.Месяцев,Строка.Дней);
		Если Строка.Лет + Строка.Месяцев + Строка.Дней <> 0 Тогда
			СтрокаИтоговогоСтажа = СуммированныйСтаж.Добавить();
	        Сч = Сч + 1;
			СтрокаИтоговогоСтажа.НомерЗаписи = Сч;
			СтрокаИтоговогоСтажа.Сотрудник = Сотрудник;
			СтрокаИтоговогоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда;
			СтрокаИтоговогоСтажа.КодСтажа = Строка.КодСтажа;
			СтрокаИтоговогоСтажа.Лет = Строка.Лет;
			СтрокаИтоговогоСтажа.Месяцев = Строка.Месяцев;
			СтрокаИтоговогоСтажа.Дней = Строка.Дней;
		КонецЕсли;	 
	КонецЦикла;	

	// Заносим в итоговую таблицу данные о выслуге лет
	Для Каждого Строка Из ТаблицаВЫСЛ Цикл
		ПолучитьПриведенныйСтаж(Строка.Лет,Строка.Месяцев,Строка.Дней);
		Если Строка.Лет + Строка.Месяцев + Строка.Дней <> 0 Тогда
			СтрокаИтоговогоСтажа = СуммированныйСтаж.Добавить();
	        Сч = Сч + 1;
			СтрокаИтоговогоСтажа.НомерЗаписи = Сч;
			СтрокаИтоговогоСтажа.Сотрудник = Сотрудник;
			СтрокаИтоговогоСтажа.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет;
			СтрокаИтоговогоСтажа.КодСтажа = Строка.КодСтажа;
			СтрокаИтоговогоСтажа.Лет = Строка.Лет;
			СтрокаИтоговогоСтажа.Месяцев = Строка.Месяцев;
			СтрокаИтоговогоСтажа.Дней = Строка.Дней;
		КонецЕсли;	 
	КонецЦикла;	
	
	Возврат СуммированныйСтаж;
КонецФункции 

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОписьСЗВ6(УзелПФР, ДеревоФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерДокументаВПачке, МакетВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ", НаборЗаписейВходящаяОпись = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ") Экспорт
	
	НаборЗаписейВходящаяОпись = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, МакетВходящейОписи);
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение; 
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента); 
	// Устанавливаем значение Номер пачки
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = Формат(ВыборкаПоШапкеДокумента.НомерПачки, "ЧГ=");  
	// Блок СоставДокументов
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
		
		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейВходящаяОпись.КодКатегории.Значение = ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		
		НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.ОтчетныйПериод.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			НаборЗаписейВходящаяОпись.КорректируемыйОтчетныйПериод.НеВыводитьВФайл = Истина;
		Иначе
			НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.КорректируемыйОтчетныйПериод.Значение;
			ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.КорректируемыйПериод));
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейВходящаяОпись, ВыборкаПоШапкеДокумента.НачисленоСтраховая, ВыборкаПоШапкеДокумента.УплаченоСтраховая, ВыборкаПоШапкеДокумента.НачисленоНакопительная, ВыборкаПоШапкеДокумента.УплаченоНакопительная);
		
	ИначеЕсли ТипДокумента = "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_ВОЗНАГРАЖДЕНИЙ" Тогда
		НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
		НаборЗаписейВходящаяОпись.КодКатегории.Значение = ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		НаборЗаписейВходящаяОпись.ТипДоговора.Значение = ВыборкаПоШапкеДокумента.ТипДоговора;
		НаборЗаписейВходящаяОпись.ОтчетныйГод.Значение = ВыборкаПоШапкеДокумента.ОтчетныйПериод;
		НаборЗаписейСуммаВыплатИВознаграждений = НаборЗаписейВходящаяОпись.СуммаВыплатИВознаграждений.Значение;
		НаборЗаписейСуммаВыплатИВознаграждений.ТипСтроки = "ИТОГО ПО ПАЧКЕ";
		НаборЗаписейСуммаВыплатИВознаграждений.СуммаВыплатВсего = ВыборкаПоШапкеДокумента.Заработок;
		НаборЗаписейСуммаВыплатИВознаграждений.СуммаВыплатНачисленыСтраховыеВзносы = ВыборкаПоШапкеДокумента.ОблагаетсяВзносами;
	КонецЕсли;
	
	УзелПачкаВходящихДокументов = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
	
	Возврат УзелПачкаВходящихДокументов;

	
КонецФункции

Функция ФайлСведенийОВзносахИСтаже(ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа, КоличествоДокументов) Экспорт
	
	ДеревоФорматаXML = ПолучитьОбщийМакет("ФорматПФР70_2010XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);

	ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
	ТипФормДокументов		= ВыборкаПоШапкеДокумента.ТипФормДокументов;
	НомерПачки				= ВыборкаПоШапкеДокумента.НомерПачки;
	Ссылка					= ВыборкаПоШапкеДокумента.Ссылка;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
	
	// Список стран
	СписокСтран = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтраныМира.Наименование,
	|	СтраныМира.Код
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
	КонецЦикла;	
	
	// Загружаем формат файла сведений
	ТипДокументовПачки = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	УзелПФР = УзелФайлаПФР(ДеревоВыгрузки);
	ЗаполнитьИмяИЗаголовокФайла(УзелПФР, ДеревоФормата, ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР);
	// Добавляем ветки ПачкаВходящихДокументов и ВходящаяОпись
	НаборЗаписейВходящаяОпись = "";
	МассивУдаляемыхНаборовВходящаяОпись = Новый Массив;
	
	УзелПачкаВходящихДокументов = ЗаполнитьНаборЗаписейВходящаяОписьСЗВ6(УзелПФР, ДеревоФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, КоличествоДокументов, 1, ,НаборЗаписейВходящаяОпись);
	
	ДанныеВходящейОписи = ОбщегоНазначения.СкопироватьРекурсивно(НаборЗаписейВходящаяОпись);
	
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ",""), НаборЗаписейВходящаяОпись);

	ФорматСЗВ6 = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, ?(ТипФормДокументов = "СПВ-1","СПВ_1","СЗВ_6"));
		
		
	Если ВыборкаПоШапкеДокумента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		ФорматСЗВ6.Удалить("КПП");
		ТаблицаПолей = ФорматСЗВ6.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	КонецЕсли;
	
	ФорматИностранныйАдрес = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "АдресОбщий", 3);
	ФорматНеструктурированныйАдрес = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "АдресОбщий", 2);
	
	НомерДокументаВПачке = 1;
	ВыборкаПоСотрудникам	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
	Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("НомерСтроки")	Цикл
		МассивУдаляемыхФорматСЗВ6 = Новый Массив;
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ И ТипФормДокументов <> "СПВ-1" Тогда
			ФорматСЗВ6.КорректируемыйОтчетныйПериод.НеВыводитьВФайл = Истина;
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
			ФорматСЗВ6.СуммаВзносовНаСтраховую.НеВыводитьВФайл = Истина;
			ФорматСЗВ6.СуммаВзносовНаНакопительную.НеВыводитьВФайл = Истина;
			ФорматСЗВ6.СтажевыйПериод.НеВыводитьВФайл = Истина;
		КонецЕсли;

		НаборЗаписейСЗВ6 = ФорматСЗВ6;
		
		// Общие данные пачки - берем их из описи
		НаборЗаписейСЗВ6.ВидФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормДокументов;
		НаборЗаписейСЗВ6.ТипСведений.Значение = ДанныеВходящейОписи.ТипСведений.Значение;
		НаборЗаписейСЗВ6.РегистрационныйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.РегистрационныйНомер.Значение;
		НаборЗаписейСЗВ6.НаименованиеКраткое.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НаименованиеКраткое.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.НалоговыйНомер.Значение, ДанныеВходящейОписи.СоставительПачки.Значение.НалоговыйНомер.Значение);
		НаборЗаписейСЗВ6.КодКатегории.Значение = ДанныеВходящейОписи.КодКатегории.Значение;
		ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.ОтчетныйПериод.Значение);
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			Если ТипФормДокументов = "СПВ-1" Тогда
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			Иначе
				ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.КорректируемыйОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
			КонецЕсли;
		КонецЕсли;
		НаборЗаписейСЗВ6.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
		
		// Данные физлица
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		
		Фамилия = СокрЛП(ВыборкаПоСотрудникам.Фамилия);
		Имя = СокрЛП(ВыборкаПоСотрудникам.Имя);
		Отчество = СокрЛП(ВыборкаПоСотрудникам.Отчество);
		
		НаборЗаписейСЗВ6.НомерВПачке.Значение = НомерДокументаВПачке;
		НаборЗаписейСЗВ6.СтраховойНомер.Значение = ВыборкаПоСотрудникам.СтраховойНомерПФР;
		НаборЗаписейФИО = НаборЗаписейСЗВ6.ФИО.Значение;
		НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
		НаборЗаписейФИО.Имя = ВРег(Имя);
		НаборЗаписейФИО.Отчество = ВРег(Отчество);
		
		Если ТипФормДокументов = "СПВ-1" Тогда
			НаборЗаписейСЗВ6.ДатаСоставленияНа.Значение = ВыборкаПоСотрудникам.ДатаСоставления 
		Иначе
			// Заполняем адрес застрахованного лица, если он есть.
			Если СокрЛП(СтрЗаменить(ВыборкаПоСотрудникам.АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = ВыборкаПоСотрудникам.АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";	
			КонецЕсли; 
			Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.АдресДляИнформирования) И Не ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
				НаборЗаписейАдресЗЛ = НаборЗаписейСЗВ6.АдресЗЛ.Значение;
				ЗаполнитьАдрес(НаборЗаписейАдресЗЛ, ВыборкаПоСотрудникам.АдресДляИнформирования, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, Ложь);
			Иначе
				НаборЗаписейСЗВ6.АдресЗЛ.НеВыводитьВФайл = Истина; 
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда // заполнение отменяющей формы завершено
			УзелСЗВ61 = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСЗВ61, НаборЗаписейСЗВ6);
			Продолжить;
		КонецЕсли;
		
		ВписатьВзносыВНаборДанных(НаборЗаписейСЗВ6, ВыборкаПоСотрудникам.НачисленоСтраховая, ВыборкаПоСотрудникам.УплаченоСтраховая, ВыборкаПоСотрудникам.НачисленоНакопительная, ВыборкаПоСотрудникам.УплаченоНакопительная);
		
		// Выводим стаж
		
		ФорматСтажевыйПериод = НаборЗаписейСЗВ6.СтажевыйПериод.Значение;
		НаборЗаписейСЗВ6.СтажевыйПериод.НеВыводитьВФайл = Истина;
				
		УзелСЗВ61 = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСЗВ61, НаборЗаписейСЗВ6);

		ВписатьЗаписиОСтажеВНаборДанных(УзелСЗВ61, ФорматСтажевыйПериод, ВыборкаПоСотрудникам, ТипФормДокументов, ТипДокументовПачки);
	КонецЦикла;

		
	// Преобразуем дерево в строковое описание XML
	ТекстФайла = ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
	Возврат ТекстФайла
	
КонецФункции

Процедура ВписатьЗаписиОСтажеВНаборДанных(УзелПачкаВходящихДокументов, ФорматСтажевыйПериод, ВыборкаПоСотрудникам, ТипФормДокументов, ТипДокументовПачки = Неопределено) Экспорт
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЛДЕТИ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ЧАЭС", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("НЕОПЛ", Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЛОТПУСК", Истина);
		
	Если ТипФормДокументов = "СЗВ-6-2" Тогда
		
		ЧислоОсновныхЗаписейОСтаже = 0;
		СотрудникОрганизацииИмеетЛьготныйСтаж = Ложь;
		
		Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
			
			Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ДатаНачалаПериода) И ЗначениеЗаполнено(ВыборкаПоСотрудникам.ДатаОкончанияПериода) Тогда
				
				ФорматСтажевыйПериод.НомерСтроки.Значение = ВыборкаПоСотрудникам.НомерОсновнойЗаписи;
				ФорматСтажевыйПериод.ДатаНачалаПериода.Значение = ВыборкаПоСотрудникам.ДатаНачалаПериода;
				ФорматСтажевыйПериод.ДатаКонцаПериода.Значение = ВыборкаПоСотрудникам.ДатаОкончанияПериода;
				
				УзелСтажевыйПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "СтажевыйПериод","");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
											
			КонецЕсли;
			
		КонецЦикла;
					
	Иначе
		
		ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ЛьготныйСтаж.Значение;
		ФорматСтажевыйПериод.КоличествоЛьготныхСоставляющих.НеВыводитьВФайл = Истина;
		ФорматСтажевыйПериод.ЛьготныйСтаж.НеВыводитьВФайл = Истина;
				
		Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.НомерОсновнойЗаписи) Тогда
			
			Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
				
				ФорматСтажевыйПериод.ЛьготныйСтаж.НеВыводитьВФайл = Истина;
				ФорматСтажевыйПериод.КоличествоЛьготныхСоставляющих.НеВыводитьВФайл = Истина;

				УзелСтажевыйПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "СтажевыйПериод","");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
				
				УзелСтажевыйПериод.Строки.Найти("НомерСтроки").Значение = Строка(ВыборкаПоСотрудникам.НомерОсновнойЗаписи);
				УзелСтажевыйПериод.Строки.Найти("ДатаНачалаПериода").Значение = Формат(ВыборкаПоСотрудникам.ДатаНачалаПериода,"ДФ=дд.ММ.гггг");
				УзелСтажевыйПериод.Строки.Найти("ДатаКонцаПериода").Значение = Формат(ВыборкаПоСотрудникам.ДатаОкончанияПериода,"ДФ=дд.ММ.гггг");
				
				ВыводитьЛьготныйСтаж = Ложь;
				
				НаборЗаписейЛьготныйСтаж = ФорматЛьготныйСтаж;
				НаборЗаписейОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
				
				//ДекретДети
				Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
					НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа;
				КонецЕсли;
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобенностиУчета.ДекретДети.Значение);
				
				Если НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЕТИ"
					Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "АДМИНИСТР"
					Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЛДЕТИ"
					Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ЧАЭС"
					Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "НЕОПЛ" Тогда
					
					НаборЗаписейОсобенностиУчета.ВыслугаЛет.НеВыводитьВФайл = Истина;
					НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.НеВыводитьВФайл = Истина;
					НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.НеВыводитьВФайл = Истина;
					НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.НеВыводитьВФайл = Истина;
				Иначе
					
					// Территориальные условия
					НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
					НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = СокрЛП(ВыборкаПоСотрудникам.ТерриториальныеУсловияКод);
					НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
					Если ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР Тогда
						НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
					Иначе
						ОписаниеПолей = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
						СтрокаКУдалению.НеВыводитьВФайл = Истина;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ОснованиеТУ);
					
					// Особые условия труда
					НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;
					НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = СокрЛП(ВыборкаПоСотрудникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоСотрудникам.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ);
					
					// Исчисляемый стаж
					НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
					НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажаКод;
					Если НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЕКРЕТ" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ВРНЕТРУД" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЛОТПУСК" Тогда
						НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
					Иначе 	
						НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
					КонецЕсли;

					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение);
					
					// Выслуга лет
					НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
					НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоСотрудникам.ОснованиеВыслугиЛетКод));
					НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоСотрудникам.ТретийПараметрВыслугиЛет;
					Если НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЕКРЕТ" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ВРНЕТРУД" Или НаборЗаписейОсобенностиУчета.ДекретДети.Значение = "ДЛОТПУСК" Тогда
						НаборЗаписейВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоСотрудникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
						НаборЗаписейВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
					Иначе
						НаборЗаписейВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение);
						
				КонецЕсли;
				
				Если ВыводитьЛьготныйСтаж Тогда
					ЧислоДополнительныхЗаписейОСтаже = 1;
					СтрокаКоличествоЛьготныхСоставляющих = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "КоличествоЛьготныхСоставляющих", 1);
					НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
					УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
					ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				Иначе
					ЧислоДополнительныхЗаписейОСтаже = 0;
				КонецЕсли;
				
				Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
					
					// В дополнительной записи с номером 0 находится информация об основной записи
					Если ВыборкаПоСотрудникам.НомерДополнительнойЗаписи = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					
					НаборЗаписейЛьготныйСтаж = ФорматЛьготныйСтаж;		
					НаборЗаписейДопОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
					
					ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
					НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
					
					// Территориальные условия
					НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
					НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = СокрЛП(ВыборкаПоСотрудникам.ТерриториальныеУсловияКод);
					НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
					Если ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР Тогда
						НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
					Иначе
						ОписаниеПолей = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
						СтрокаКУдалению.НеВыводитьВФайл = Истина;
					КонецЕсли;
					
					// Особые условия труда
					НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
					НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВыборкаПоСотрудникам.ОсобыеУсловияТрудаКод;
					НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВыборкаПоСотрудникам.КодПозицииСпискаКод;
					
					// Исчисляемый стаж
					НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
					НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВРег(СокрЛП(ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажаКод));
					Если ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейДопИсчисляемыйСтаж.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа > 0 
						ИЛИ ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						
						НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
						НаборЗаписейДопВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейДопВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
					Иначе
						НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
					КонецЕсли;
					
					// Выслуга лет
					НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
					НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоСотрудникам.ОснованиеВыслугиЛетКод));
					НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоСотрудникам.ТретийПараметрВыслугиЛет;
					Если ВыборкаПоСотрудникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
						НаборЗаписейДопВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
					Иначе
						НаборЗаписейДопВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					
					//ДекретДети
					Если ДопустимыеЗначенияТретьегоПараметра.Получить(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
						НаборЗаписейДопОсобенностиУчета.ДекретДети.Значение = ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа;
					КонецЕсли;
					
					УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
					ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
					
				КонецЦикла;// Выборка по дополнительным записям о стаже
				
				Если ЧислоДополнительныхЗаписейОСтаже > 1 Тогда
					СтрокаКоличествоЛьготныхСоставляющих.Значение = ЧислоДополнительныхЗаписейОСтаже;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры	

Процедура ВписатьЗаписиОСтажеВНаборДанных2014(УзелПачкаВходящихДокументов, ФорматСтажевыйПериод, ВыборкаПоСотрудникам) Экспорт	
	
	ФорматЛьготныйСтаж = ФорматСтажевыйПериод.ЛьготныйСтаж.Значение;
	ФорматСтажевыйПериод.КоличествоЛьготныхСоставляющих.НеВыводитьВФайл = Истина;
	ФорматСтажевыйПериод.ЛьготныйСтаж.НеВыводитьВФайл = Истина;
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
			
	Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.НомерОсновнойЗаписи) Тогда
		
		Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл	
			
			ФорматСтажевыйПериод.ЛьготныйСтаж.НеВыводитьВФайл = Истина;
			ФорматСтажевыйПериод.КоличествоЛьготныхСоставляющих.НеВыводитьВФайл = Истина;

			УзелСтажевыйПериод = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, "СтажевыйПериод","");
			ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
			
			УзелСтажевыйПериод.Строки.Найти("НомерСтроки").Значение = Строка(ВыборкаПоСотрудникам.НомерОсновнойЗаписи);
			УзелСтажевыйПериод.Строки.Найти("ДатаНачалаПериода").Значение = Формат(ВыборкаПоСотрудникам.ДатаНачалаПериода,"ДФ=дд.ММ.гггг");
			УзелСтажевыйПериод.Строки.Найти("ДатаКонцаПериода").Значение = Формат(ВыборкаПоСотрудникам.ДатаОкончанияПериода,"ДФ=дд.ММ.гггг");
			
			ВыводитьЛьготныйСтаж = Ложь;
			
			НаборЗаписейЛьготныйСтаж = ФорматЛьготныйСтаж;
			НаборЗаписейОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
			
			НаборЗаписейОсобенностиУчета.ДекретДети.НеВыводитьВФайл = Ложь;
			
			//ДекретДети
			Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) Тогда
				НаборЗаписейОсобенностиУчета.ДекретДети.Значение = ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажаКод;
				ВыводитьЛьготныйСтаж = Истина;
			Иначе
				НаборЗаписейОсобенностиУчета.ДекретДети.НеВыводитьВФайл = Истина;	
			КонецЕсли;
			
			НаборЗаписейОсобенностиУчета.ВыслугаЛет.НеВыводитьВФайл = Ложь;
			НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.НеВыводитьВФайл = Ложь;
			НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.НеВыводитьВФайл = Ложь;
			НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.НеВыводитьВФайл = Ложь;
			
			Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа)
				И ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда 
				
				НаборЗаписейОсобенностиУчета.ВыслугаЛет.НеВыводитьВФайл = Истина;
				НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.НеВыводитьВФайл = Истина;
				НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.НеВыводитьВФайл = Истина;
				НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.НеВыводитьВФайл = Истина;
			Иначе
				НаборЗаписейТерриториальныеУсловия = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Значение;
				// Территориальные условия
				Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ТерриториальныеУсловияКод) Тогда
					НаборЗаписейТерриториальныеУсловия.ОснованиеТУ = СокрЛП(ВыборкаПоСотрудникам.ТерриториальныеУсловияКод);
					НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
					Если ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ 
						Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР Тогда
						НаборЗаписейТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
					Иначе
						ОписаниеПолей = НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.Поля;
						СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
						СтрокаКУдалению.НеВыводитьВФайл = Истина;
					КонецЕсли;
				Иначе
					НаборЗаписейОсобенностиУчета.ТерриториальныеУсловия.НеВыводитьВФайл = Истина;	
				КонецЕсли;	
				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейТерриториальныеУсловия.ОснованиеТУ);
				
				// Особые условия труда
				НаборЗаписейОсобыеУсловияТруда = НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.Значение;

				НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.НеВыводитьВФайл = Ложь;
				
				Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ОсобыеУсловияТрудаКод) Тогда
					НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ = СокрЛП(ВыборкаПоСотрудникам.ОсобыеУсловияТрудаКод);
					НаборЗаписейОсобыеУсловияТруда.ПозицияСписка = ВРег(СокрЛП(ВыборкаПоСотрудникам.КодПозицииСпискаКод));
					ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейОсобыеУсловияТруда.ОснованиеОУТ);
				Иначе
					НаборЗаписейОсобенностиУчета.ОсобыеУсловияТруда.НеВыводитьВФайл = Истина;
				КонецЕсли;	
				
				// Исчисляемый стаж
				НаборЗаписейИсчисляемыйСтаж = НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.Значение;
				НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение = ВРег(СокрЛП(ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажаКод));
				
				НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.НеВыводитьВФайл = Ложь;
				НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
				НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
				
				// Исчисляемый стаж
				Если Не ЗначениеЗаполнено(ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажа) И ЗначениеЗаполнено(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.НеВыводитьВФайл = Истина;
				ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа) Или ЗначениеЗаполнено(ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа) Тогда		
					Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) Тогда
						НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
						НаборЗаписейВыработкаВЧасах = НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
						НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа > 0 Или ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
						НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
					Иначе
						НаборЗаписейИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейИсчисляемыйСтаж.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
				Иначе
					НаборЗаписейОсобенностиУчета.ИсчисляемыйСтаж.НеВыводитьВФайл = Истина;		
				КонецЕсли;	

				ВыводитьЛьготныйСтаж = ВыводитьЛьготныйСтаж Или ЗначениеЗаполнено(НаборЗаписейИсчисляемыйСтаж.ОснованиеИС.Значение);
				
				// Выслуга лет
				
				НаборЗаписейВыслугаЛет = НаборЗаписейОсобенностиУчета.ВыслугаЛет.Значение;
				НаборЗаписейОсобенностиУчета.ВыслугаЛет.НеВыводитьВФайл = Ложь;	
				НаборЗаписейВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Ложь;
				НаборЗаписейВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Ложь;
				
				Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ОснованиеВыслугиЛетКод) Тогда
				
					НаборЗаписейВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоСотрудникам.ОснованиеВыслугиЛетКод));
					НаборЗаписейВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоСотрудникам.ТретийПараметрВыслугиЛет;
					Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) Тогда	
						НаборЗаписейВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет) И Не ЗначениеЗаполнено(ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет) Тогда
						НаборЗаписейВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					ИначеЕсли ВыборкаПоСотрудникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
						НаборЗаписейВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаКалендарная = НаборЗаписейВыслугаЛет.ВыработкаКалендарная.Значение;
						НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
					Иначе
						НаборЗаписейВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
						НаборЗаписейВыработкаВЧасах = НаборЗаписейВыслугаЛет.ВыработкаВЧасах.Значение;
						НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
						НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
					КонецЕсли;
					ВыводитьЛьготныйСтаж = Истина;
					
				Иначе
					НаборЗаписейОсобенностиУчета.ВыслугаЛет.НеВыводитьВФайл = Истина;	
				КонецЕсли;	
					
			КонецЕсли;
			
			Если ВыводитьЛьготныйСтаж Тогда
				ЧислоДополнительныхЗаписейОСтаже = 1;
				СтрокаКоличествоЛьготныхСоставляющих = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "КоличествоЛьготныхСоставляющих", 1);
				НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
				УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
			Иначе			
				ЧислоДополнительныхЗаписейОСтаже = 0;
			КонецЕсли;
			
			Пока ВыборкаПоСотрудникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
				
				// В дополнительной записи с номером 0 находится информация об основной записи
				Если ВыборкаПоСотрудникам.НомерДополнительнойЗаписи = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				
				НаборЗаписейЛьготныйСтаж = ФорматЛьготныйСтаж;		
				НаборЗаписейДопОсобенностиУчета = НаборЗаписейЛьготныйСтаж.ОсобенностиУчета.Значение;
				
				ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
				НаборЗаписейЛьготныйСтаж.НомерСтроки.Значение = ЧислоДополнительныхЗаписейОСтаже;
				
				// Территориальные условия
				НаборЗаписейДопТерриториальныеУсловия = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Значение;
				НаборЗаписейДопТерриториальныеУсловия.ОснованиеТУ = СокрЛП(ВыборкаПоСотрудникам.ТерриториальныеУсловияКод);
				НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
				Если ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС 
					Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС 
					Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ 
					Или ВыборкаПоСотрудникам.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР Тогда
					
					НаборЗаписейДопТерриториальныеУсловия.Коэффициент = ВыборкаПоСотрудникам.ТерриториальныеУсловияСтавка;
				Иначе
					ОписаниеПолей = НаборЗаписейДопОсобенностиУчета.ТерриториальныеУсловия.Поля;
					СтрокаКУдалению = ОписаниеПолей.Найти("Коэффициент","ИмяПоля");
					СтрокаКУдалению.НеВыводитьВФайл = Истина;
				КонецЕсли;
				
				// Особые условия труда
				НаборЗаписейДопОсобыеУсловияТруда = НаборЗаписейДопОсобенностиУчета.ОсобыеУсловияТруда.Значение;
				НаборЗаписейДопОсобыеУсловияТруда.ОснованиеОУТ = ВыборкаПоСотрудникам.ОсобыеУсловияТрудаКод;
				НаборЗаписейДопОсобыеУсловияТруда.ПозицияСписка = ВыборкаПоСотрудникам.КодПозицииСпискаКод;
				
				// Исчисляемый стаж
				НаборЗаписейДопИсчисляемыйСтаж = НаборЗаписейДопОсобенностиУчета.ИсчисляемыйСтаж.Значение;
				НаборЗаписейДопИсчисляемыйСтаж.ОснованиеИС.Значение = ВРег(СокрЛП(ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажаКод));
				Если ВыборкаПоСотрудникам.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
					НаборЗаписейВыработкаВЧасах = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.Значение;
					НаборЗаписейВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
					НаборЗаписейДопИсчисляемыйСтаж.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
				ИначеЕсли ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа > 0 
					ИЛИ ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа > 0 Тогда
					
					НаборЗаписейДопВыработкаКалендарная = НаборЗаписейДопИсчисляемыйСтаж.ВыработкаКалендарная.Значение;
					НаборЗаписейДопВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрИсчисляемогоСтажа;
					НаборЗаписейДопВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрИсчисляемогоСтажа;
					НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				Иначе
					НаборЗаписейДопИсчисляемыйСтаж.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
				КонецЕсли;
				
				// Выслуга лет
				НаборЗаписейДопВыслугаЛет = НаборЗаписейДопОсобенностиУчета.ВыслугаЛет.Значение;
				НаборЗаписейДопВыслугаЛет.ОснованиеВЛ.Значение = ВРег(СокрЛП(ВыборкаПоСотрудникам.ОснованиеВыслугиЛетКод));
				НаборЗаписейДопВыслугаЛет.ДоляСтавки.Значение = ВыборкаПоСотрудникам.ТретийПараметрВыслугиЛет;
				Если ВыборкаПоСотрудникам.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15 Тогда
					НаборЗаписейДопВыслугаЛет.ВыработкаВЧасах.НеВыводитьВФайл = Истина;
					НаборЗаписейВыработкаКалендарная = НаборЗаписейДопВыслугаЛет.ВыработкаКалендарная.Значение;
					НаборЗаписейВыработкаКалендарная.ВсеМесяцы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
					НаборЗаписейВыработкаКалендарная.ВсеДни = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
				Иначе
					НаборЗаписейДопВыслугаЛет.ВыработкаКалендарная.НеВыводитьВФайл = Истина;
					НаборЗаписейДопВыработкаВЧасах = НаборЗаписейДопВыслугаЛет.ВыработкаВЧасах.Значение;
					НаборЗаписейДопВыработкаВЧасах.Часы = ВыборкаПоСотрудникам.ПервыйПараметрВыслугиЛет;
					НаборЗаписейДопВыработкаВЧасах.Минуты = ВыборкаПоСотрудникам.ВторойПараметрВыслугиЛет;
				КонецЕсли;
				
				//ДекретДети
				Если ЗначениеЗаполнено(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажа) Тогда
					НаборЗаписейДопОсобенностиУчета.ДекретДети.Значение = Строка(ВыборкаПоСотрудникам.ТретийПараметрИсчисляемогоСтажаКод);
				КонецЕсли;
				
				УзелЛьготныйСтаж = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСтажевыйПериод, "ЛьготныйСтаж","");
				ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелЛьготныйСтаж, НаборЗаписейЛьготныйСтаж);
				
			КонецЦикла;// Выборка по дополнительным записям о стаже
			
			Если ЧислоДополнительныхЗаписейОСтаже > 1 Тогда
				СтрокаКоличествоЛьготныхСоставляющих.Значение = ЧислоДополнительныхЗаписейОСтаже;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры	

Функция ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию() Экспорт

	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕКРЕТ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВРНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВАХТА);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕДНЕТРУД);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕСЯЦ);
	МассивПараметров.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	
	Возврат МассивПараметров;
КонецФункции 

// Вычисляет разность между двумя датами: в годах, месяцах, днях
Процедура ПолучитьСтажЗаПериод(Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0) Экспорт 
	
	Если ДатаОкончанияПериода >= ДатаНачалаПериода Тогда
		
		Лет1		=	Год(ДатаОкончанияПериода);
		Месяцев1	=	Месяц(ДатаОкончанияПериода);
		
		Если НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода)) Тогда
			Дней1		=	День(ДатаОкончанияПериода);
		Иначе
			Дней1		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет2		=	Год(ДатаНачалаПериода);
		Месяцев2	=	Месяц(ДатаНачалаПериода);
		Если НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода)) Тогда
			Дней2		=	День(ДатаНачалаПериода);
		Иначе
			Дней2		=	30;//В каждом месяце ровно 30 дней
		КонецЕсли;	 
		
		Лет		=	Лет1		-	Лет2;
		Месяцев	=	Месяцев1	-	Месяцев2;
		Дней	=	Дней1		-	Дней2 + 1;//1 день на увольнение
	Иначе
		Лет = 0; 
		Месяцев = 0;
		Дней = 0;
	КонецЕсли;	
КонецПроцедуры 

// Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30
Процедура ПолучитьПриведенныйСтаж(Лет, Месяцев, Дней) Экспорт	
	ДнейВГоду 		= 12 * 30;
	ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
	Лет 			= Цел(ВсегоДней / ДнейВГоду);
	ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
	Месяцев			= Цел(ОстатокДней / 30);
	Дней			= ОстатокДней % 30;
КонецПроцедуры 

Функция ДоляСтавкиУказанаНеверно(ДоляСтавки) Экспорт

	Возврат	ДоляСтавки < 0.1 Или ДоляСтавки > 2

КонецФункции
 
// Выполняет проверку дополнительной записи стажа на допустимость значений реквизитов.
Процедура ДокументыСЗВПроверитьДополнительнойЗаписиСтажа(Ошибки, Ссылка, Запись, ОсновнаяЗапись, НомерСтрокиСотрудник, НомерСтроки, Отказ) Экспорт
	СотрудникНаименование = Запись.СотрудникНаименование; 	
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа) Тогда
		
		ТекстОшибки = НСтр("ru = 'дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи: Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа.'");  
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина);
	КонецЕсли;	 
	
	Если ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа) Тогда
		ТекстОшибки =("ru = 'в дополнительной записи о стаже не может указываться основание исчисляемого стажа.'");     
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеИсчисляемогоСтажа");
	КонецЕсли;	
	
	// Проверка на обязательный ввод одной из льгот
	УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
	
	УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
	УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
	
	Если (НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет) Тогда
		ТекстОшибки =НСтр("ru = 'в дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет.'");     
		ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина);
	КонецЕсли;	 
	
	// Проверка на ввод территориальной льготы
	Если УказаныТерриториальныеУсловия Тогда
		Если  НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ТерриториальныеУсловия");
		КонецЕсли;	 
	КонецЕсли;	
	
	// Проверка на ввод условий труда
	Если УказаныОсобыеУсловияТруда Тогда
		УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
		Если (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТрудаПФР.Ст27_7) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОсобыеУсловияТруда");
		КонецЕсли;
		
		Если (УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТрудаПФР.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоСтраховогоСтажа.УИК104) Тогда
			ТекстОшибки = НСтр("ru = 'в дополнительной записи код условий труда 27-7 может быть указан только в случае указания в основной записи кода исчисляемого стажа УИК104.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОсобыеУсловияТруда");
		КонецЕсли;	 
	КонецЕсли;
	
	// Проверка на ввод основания выслуги лет
	КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет) Тогда
		Если СтрНайти(",,27-СМ,27-ГД,27-СМХР,27-ГДХР,",","+КодВыслугиЛетЗаписи+",") = 0 Тогда
			ТекстОшибки = НСтр("ru = 'если в основной записи не указан код выслуги лет, то в дополнительной записи основание выслуги лет должно быть пустым или указаны коды 28-СМ,28-ГД,28-СМХР или 28-ГДХР.'");     
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
		КонецЕсли;	
	Иначе//В основной записи код выслуги указан
		
		МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить("НОРМАПР,РЕАКТИВН,НОРМСП,");
		МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,27-СМ,27-ГД,27-СМХР,27-ГДХР,");//пустой код допустим
		
		КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
		
		ПроверочнаяСтрокаКодов = "";
		Для Каждого СтрокаКодов Из МассивПравилНаКодыВыслугиДопЗаписей Цикл 
			Если СтрНайти(СтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи+",") Тогда
				ПроверочнаяСтрокаКодов = СтрокаКодов;
				Прервать;
			КонецЕсли;	 
		КонецЦикла;	
		
		Если ПроверочнаяСтрокаКодов = "" Тогда
			ШаблонТекстаОшибки = НСтр("ru = 'при указании в основной записи кода выслуги лет %3 в дополнительной записи код выслуги указываться не может.'");  
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, КодВыслугиЛетЗаписи);
			ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
 		Иначе
			// Код выслуги основной записи исключим из списка возможных значений
			ПроверочнаяСтрокаКодов = СтрЗаменить(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетОсновнойЗаписи,"");
			
			Если НЕ СтрНайти(ПроверочнаяСтрокаКодов,","+КодВыслугиЛетЗаписи+",") Тогда
				ШаблонТекстаОшибки = НСтр("ru = 'при указании в основной записи кода выслуги лет %1 в дополнительной записи могут быть указаны только следующие коды выслуги: %2.'");
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекстаОшибки, КодВыслугиЛетОсновнойЗаписи, Сред(ПроверочнаяСтрокаКодов,2));     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, Запись, Отказ, Истина, "ОснованиеВыслугиЛет");
 			КонецЕсли;	 
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры	 

// Выполняет проверку записи стажа на допустимость значений реквизитов между группами.
Процедура ДокументыСЗВПроверитьСочетанияМеждуГруппамиСтажа(Ошибки, Ссылка, ОтчетныйПериод, МенеджерВременныхТаблиц, Отказ) Экспорт 
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Записи.НомерСтроки КАК НомерСтрокиСтаж,
	|	Записи.НомерСтрокиСотрудник КАК НомерСтрокиСотрудник,
	|	Записи.Сотрудник.Наименование КАК СотрудникНаименование,
	|	Записи.Сотрудник,
	|	Записи.НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи,
	|	Записи.ДатаНачалаПериода,
	|	Записи.ДатаОкончанияПериода,
	|	Записи.ТерриториальныеУсловия.Код,
	|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
	|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
	|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
	|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
	|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
	|	Сочетания.НомерПравила КАК НомерПравила,
	|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
	|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
	|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
	|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
	|	Сочетания.КодОснованияВыслугиЛет КАК УказанныйКодОснованияВыслугиЛет,
	|	Сочетания.ФорматФОВ КАК ФорматФОВ,
	|	Сочетания.ПериодС,
	|	Сочетания.ПериодПо
	|ИЗ
	|	ВТЗаписиОСтаже КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияКодовГруппСтажа КАК Сочетания
	|		ПО (Записи.ОсобыеУсловияТруда.КодДляОтчетности2010 = Сочетания.КодУсловийТруда
	|				ИЛИ Записи.ОсобыеУсловияТруда.КодДляОтчетности2010 ЕСТЬ NULL 
	|					И Сочетания.КодУсловийТруда = """")
	|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
	|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
	|			И (Записи.ОснованиеВыслугиЛет.КодДляОтчетности2010 = Сочетания.КодОснованияВыслугиЛет
	|				ИЛИ Записи.ОснованиеВыслугиЛет.КодДляОтчетности2010 ЕСТЬ NULL 
	|					И Сочетания.КодОснованияВыслугиЛет = """")
	|			И (Сочетания.ТипШаблонаКПС = ""Любой""
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
	|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
	|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
	|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
	|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
	|			И (ГОД(&ОтчетныйПериод) МЕЖДУ Сочетания.ПериодС И Сочетания.ПериодПо)
	|ГДЕ
	|	(НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
	|			ИЛИ НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Записи.НомерСтрокиСотрудник,
	|	Записи.НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи";

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтрокиСотрудник") Цикл
		НомерСтроки = 0;
		Пока Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
				
				НомерСтроки = НомерСтроки + 1;
				
				Если Не ЗначениеЗаполнено(Выборка.НомерПравила)
					Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ" 
					Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "27-14" Тогда
					
					ШаблонСообщения = НСтр("ru = 'комбинация значений реквизитов: Основание выслуги лет = %1; Основание исчисляемого стажа = %2; Особые условия труда = %3; Код позиции списка = %4 - не является допустимой.'");
					СтрокаСообщений = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											ШаблонСообщения, 
											Выборка.УказанныйКодОснованияВыслугиЛет, 
											Выборка.УказанныйКодОснованияИсчисляемогоСтажа,
											Выборка.УказанныйКодУсловийТруда, 
											Выборка.УказанныйКодПозицииСписка); 
					
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, СтрокаСообщений, Ссылка, Выборка, Отказ, Истина);					
					Продолжить;
					
				КонецЕсли;	
				
				// Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
				ФОВДопустимо = Ложь;
				
				МассивСообщений = Новый Массив;
				Пока Выборка.Следующий() Цикл
					
					ФорматФОВ = Выборка.ФорматФОВ;
					СтрокаОшибкиФормата = "";            	
					ПрошлоПроверку = 0;
					СтрокаЗначенияПараметров = "";
					
					Для Сч = 1 По 2 Цикл
						
						Если Сч = 1 Тогда
							ИмяПоляПараметр = "ПервыйПараметрИсчисляемогоСтажа";
						ИначеЕсли Сч = 2 Тогда
							ИмяПоляПараметр = "ВторойПараметрИсчисляемогоСтажа";	
						Иначе
							ИмяПоляПараметр  = "";	
						КонецЕсли;	
						
						ФорматПараметра = Сред(ФорматФОВ, Сч + 1, 1); 
						
						Если Сч = 0 Тогда
							ЗначениеПараметра = Выборка.УказанныйНулевойПараметрИсчисляемогоСтажа;
							ПсевдонимПараметра = НСтр("ru = 'Годы'");
						ИначеЕсли Сч = 1 Тогда	
							ЗначениеПараметра = Выборка.УказанныйПервыйПараметрИсчисляемогоСтажа;
							ПсевдонимПараметра = НСтр("ru = 'Месяцы'");
						Иначе
							ЗначениеПараметра = Выборка.УказанныйВторойПараметрИсчисляемогоСтажа;
							ПсевдонимПараметра = НСтр("ru = 'Дни'");
						КонецЕсли;	

						ПараметрПрошелПроверку = Ложь;
						
						ТекстПараметра = Строка(Сч) + "(" + ПсевдонимПараметра+ ")";
						
						Если (ФорматПараметра = "_") Тогда
							Если (ЗначениеПараметра <> 0) Тогда//ПУСТОЕ
								СтрокаОшибкиФормата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'параметр исчисляемого стажа № %1 должен быть пустым (=0).'"), ТекстПараметра); 
								ОшибкаФорматаСтажа = Новый Структура("Текст, Поле", СтрокаОшибкиФормата, ИмяПоляПараметр);
								МассивСообщений.Добавить(ОшибкаФорматаСтажа);	
							Иначе	
								ПараметрПрошелПроверку = ИСТИНА;
							КонецЕсли;
						ИначеЕсли (ФорматПараметра = "Г") Тогда
							Если (ЗначениеПараметра > 100) Тогда//ГОДЫ
								СтрокаОшибкиФормата =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'параметр исчисляемого стажа № %1 должен содержать значение не > 100 (лет).'"), ТекстПараметра); 
								ОшибкаФорматаСтажа = Новый Структура("Текст, Поле", СтрокаОшибкиФормата, ИмяПоляПараметр);
								МассивСообщений.Добавить(ОшибкаФорматаСтажа);	
							Иначе	
								ПараметрПрошелПроверку = ИСТИНА;
							КонецЕсли;
						ИначеЕсли (ФорматПараметра = "М") Тогда 
							Если (ЗначениеПараметра > 11) Тогда//МЕСЯЦЫ
								СтрокаОшибкиФормата =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'параметр исчисляемого стажа № %1  должен содержать значение не > 11 (месяцев).'"), ТекстПараметра);
								ОшибкаФорматаСтажа = Новый Структура("Текст, Поле", СтрокаОшибкиФормата, ИмяПоляПараметр);
								МассивСообщений.Добавить(ОшибкаФорматаСтажа);	
							Иначе	
								ПараметрПрошелПроверку = ИСТИНА;
							КонецЕсли;
						ИначеЕсли (ФорматПараметра = "Д") Тогда 
							Если (ЗначениеПараметра > 30) Тогда//ДНИ
								СтрокаОшибкиФормата =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'параметр исчисляемого стажа № %1 должен содержать значение не > 30 (дней).'"), ТекстПараметра);
								ОшибкаФорматаСтажа = Новый Структура("Текст, Поле", СтрокаОшибкиФормата, ИмяПоляПараметр);
								МассивСообщений.Добавить(ОшибкаФорматаСтажа);	
							Иначе	
								ПараметрПрошелПроверку = ИСТИНА;
							КонецЕсли;
						ИначеЕсли (ФорматПараметра = "ч") Тогда//ЧАСЫ 
							ПараметрПрошелПроверку = ИСТИНА;
						ИначеЕсли (ФорматПараметра = "м") Тогда 
							Если (ЗначениеПараметра > 59) Тогда//МИНУТЫ
								СтрокаОшибкиФормата =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'параметр исчисляемого стажа № %1 должен содержать значение не > 59 (минут).'"), ТекстПараметра);
								ОшибкаФорматаСтажа = Новый Структура("Текст, Поле", СтрокаОшибкиФормата, ИмяПоляПараметр);
								МассивСообщений.Добавить(ОшибкаФорматаСтажа);	
							Иначе	
								ПараметрПрошелПроверку = ИСТИНА;
							КонецЕсли;
						КонецЕсли;	 
						
						Если ПараметрПрошелПроверку Тогда
							ПрошлоПроверку = ПрошлоПроверку + 1;
						КонецЕсли;	 
						
					КонецЦикла;
					
					// Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0.
					Если (СокрЛП(ФорматФОВ) <> "___")И(СтрокаЗначенияПараметров="000") Тогда//
						ПрошлоПроверку = 0;
						МассивСообщений.Очистить();
						СтрокаОшибкиФормата =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время.'"), НомерСтроки, Выборка.СотрудникНаименование);
						ОшибкаФорматаСтажа = Новый Структура("Текст, Поле", СтрокаОшибкиФормата, "ПервыйПараметрИсчисляемогоСтажа");
						МассивСообщений.Добавить(ОшибкаФорматаСтажа);
					КонецЕсли;	
					
					Если ПрошлоПроверку = 2 Тогда
						ФОВДопустимо = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;	// по вариантам формата ФОВ
				
				Если Не ФОВДопустимо Тогда
					Для Каждого СообщениеОбОшибке Из МассивСообщений Цикл
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, СообщениеОбОшибке.Текст, Ссылка, Выборка, Отказ, Истина, СообщениеОбОшибке.Поле);
					КонецЦикла;	
				КонецЕсли;
								
			КонецЦикла;// По дополнительным записям	
		КонецЦикла;// По основным записям	
	КонецЦикла;// По сотрудникам
КонецПроцедуры	 

// Формирует представление параметров исчисляемого  трудового стажа
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
// Возвращаемое значение:
//		Строка
Функция ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровИТС = "";
	КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
	ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
	
	Если КодОснованияИТС = "ВОДОЛАЗ" Тогда
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
	ИначеЕсли КодОснованияИТС = "СЕЗОН" Тогда
		ПредставлениеПараметровИТС = "";
	Иначе
		ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,"" + ПервыйПараметрИТС+" м ","") + ?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" дн ","") + Строка(ТретийПараметрИТС);
	КонецЕсли;
	
	Возврат ПредставлениеПараметровИТС;
	
КонецФункции

// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
//
// Параметры:
//		ЗаписьСтажа -	структура - запись о стаже
//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра.
//
Процедура ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки) Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛет; 
	ВсеКодыВыслуги = Справочники.ОснованияДосрочногоНазначенияПенсии;
	ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
	ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
	ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
	
	СтрПервыйВторойПараметр = "";
	СтрСтавки = "";
	
	Если КодОснования = ВсеКодыВыслуги.ИСПКЛС1 Или КодОснования = ВсеКодыВыслуги.САМОЛЕТ Или КодОснования = ВсеКодыВыслуги.ИНСПЕКТ
			Или КодОснования = ВсеКодыВыслуги.СПЕЦАВ Или КодОснования = ВсеКодыВыслуги.ЛЕТИСП Или КодОснования = ВсеКодыВыслуги.ИТСИСП
			Или КодОснования = ВсеКодыВыслуги.ИНСПЕКТ Или КодОснования = ВсеКодыВыслуги.ИТСМАВ Или КодОснования = ВсеКодыВыслуги.ОПЫТИСП Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр > 0, "" + ПервыйПараметр + " ч ", "") + ?(ВторойПараметр > 0, "" + ВторойПараметр + " мин", "");
	ИначеЕсли КодОснования = ВсеКодыВыслуги.РЕАКТИВН Или КодОснования = ВсеКодыВыслуги.НОРМАПР Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр > 0, "" + ПервыйПараметр + " прыжков ", "");
	ИначеЕсли КодОснования = ВсеКодыВыслуги.НОРМСП Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр > 0, "" + ПервыйПараметр + " сп/под ", "");
	ИначеЕсли КодОснования = ВсеКодыВыслуги.Ст27_СП Или КодОснования = ВсеКодыВыслуги.Ст27_14 Или КодОснования = ВсеКодыВыслуги.Ст27_15 Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр > 0, "" + ПервыйПараметр + " м ", "") + ?(ВторойПараметр > 0, "" + ВторойПараметр + " дн ", "");
	ИначеЕсли КодОснования = ВсеКодыВыслуги.Ст27_ГДХР Или КодОснования = ВсеКодыВыслуги.Ст27_СМХР
			Или КодОснования = ВсеКодыВыслуги.Ст27_ГД Или КодОснования = ВсеКодыВыслуги.Ст27_СМ Тогда
		СтрСтавки = ?(ТретийПараметр > 0, "" + ТретийПараметр + ?(ТретийПараметр = 1, " ставка ", " ставок "), "");
	ИначеЕсли КодОснования = ВсеКодыВыслуги.Ст27_ПДРК Или КодОснования = ВсеКодыВыслуги.Ст27_ПД Тогда
		СтрПервыйВторойПараметр = ?(ПервыйПараметр > 0, "" + ПервыйПараметр + " ч ", "");
		СтрСтавки = ?(ТретийПараметр > 0, "" + ТретийПараметр + ?(ТретийПараметр = 1, " ставка ", " ставок "), "");
	КонецЕсли;
	
КонецПроцедуры 

Функция ПредставлениеПараметровТерриториальныхУсловий(ЗаписьСтажа) Экспорт
	
	ПредставлениеПараметровТУ = "";
	Ставка = ЗаписьСтажа.ПараметрТерриториальныхУсловий;
	ПервыйПараметрТУ = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
	ВторойПараметрТУ = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
	
	Если Ставка <> "0.00" Тогда
		ПредставлениеПараметровТУ = Ставка;
	Иначе
		ПредставлениеПараметровТУ = ?(ПервыйПараметрТУ > 0,"" + ПервыйПараметрТУ+" м ","") + ?(ВторойПараметрТУ > 0,""+ВторойПараметрТУ+" дн ","");
	КонецЕсли;
	
	Возврат ПредставлениеПараметровТУ;
	
КонецФункции

Процедура ВписатьСтавкуВНаборДанныхИсчисляемогоСтажа(Ставка, НаборДанных) Экспорт

	ИмяПоля = "ИС5__ДоляСтавки";
	Если ЗначениеЗаполнено(Ставка) Тогда
		НаборДанных[ИмяПоля].Значение = Ставка
	Иначе
		НаборДанных.Удалить(ИмяПоля)
	КонецЕсли;	

КонецПроцедуры

Процедура ВписатьСтавкуВНаборДанныхТеррУсловий(ТерриториальныеУсловия, Ставка, НаборДанных) Экспорт

	ИмяПоля = "ИС5__Коэффициент";
	Если (ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКС
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.РКСМ 
		Или ТерриториальныеУсловия = Справочники.ТерриториальныеУсловияПФР.МКСР) И ЗначениеЗаполнено(Ставка) Тогда
		
		НаборДанных.Значение[ИмяПоля] = Ставка;
	Иначе
		ОписаниеПолей = НаборДанных.Поля;
		СтрокаКУдалению = ОписаниеПолей.Найти(ИмяПоля,"ИмяПоля");
		ОписаниеПолей.Удалить(СтрокаКУдалению);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ
//

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ТерриториальныеУсловияПФР.НачальноеЗаполнение";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсии) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ОснованияДосрочногоНазначенияПенсии.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ВидыОбщественноПолезнойДеятельностиСЗВК.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ПараметрыИсчисляемогоСтраховогоСтажа) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина; 
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОсобыеУсловияТрудаПФР) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ОсобыеУсловияТрудаПФР.ВписатьКоды2015Года";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ДопустимыеСочетанияКодовГруппСтажа.НачальноеЗаполнение";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.21";
	Обработчик.Процедура = "ПерсонифицированныйУчет.УточнитьФорматСтраховогоНомераВСправочникеФизическиеЛица";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5ead2d09-f046-4cee-928a-268c174ad70e");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение формата страхового номера ПФР.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.21";
	Обработчик.Процедура = "ПерсонифицированныйУчет.УточнитьФорматРегистрационногоНомераВСправочникеОрганизации";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("543873c2-6d17-46f7-a988-dd7489e9f638");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение формата регистрационного номера ПФР.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.21";
	Обработчик.Процедура = "ПерсонифицированныйУчет.УточнитьФорматРегистрационногоНомераВРегистреИсторияРегистрацийВОрганеПФР";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3181e847-6ea8-4d04-84aa-40370bd2f021");
	Обработчик.Комментарий = НСтр("ru = 'Уточнение формата регистрационного номера ПФР.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.9.30";
	Обработчик.Процедура = "ПерсонифицированныйУчет.ЗаполнитьИтоговыеПоляДосрочногоНазначенияПенсии";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("75917583-d3e7-451f-8192-33894cc1ee47");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов документов СЗВ-СТАЖ, СЗВ-ИСХ и ОДВ-1.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.12";
	Обработчик.Процедура = "ПерсонифицированныйУчет.ЗаполнитьОсобыеУсловияТрудаИОснованиеДосрочногоНазначенияПенсии";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f7617697-1aa7-4fc4-9e3f-843c2bf54ae0");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов документов СЗВ-СТАЖ, СЗВ-ИСХ и ОДВ-1.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.10.24";
		Обработчик.Процедура = "Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.ОбновитьНеПредопределенныеЭлементы";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.ДатыВступленияВСилуНА) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.13.70";
		Обработчик.Процедура = "РегистрыСведений.ДатыВступленияВСилуНА.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.20";
	Обработчик.Процедура = "Документы.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.ЗаполнитьОкончаниеКорректируемогоПериода";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("93ef898e-149f-4ce8-addf-795551dc9eec");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизитов документов СЗВ-КОРР.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.68";
	Обработчик.Процедура = "Документы.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД.ЗаполнитьСотрудниковСЗВ_ТД";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b079839f-1eec-49e1-80ed-c189e876977b");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение сотрудников СЗВ-ТД.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.71";
	Обработчик.Процедура = "ПерсонифицированныйУчет.ЗаполнитьРазрядыКатегорииДокументовТрудовыхКнижек";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3596fca2-73bb-4c03-baa1-44e5c625d60d");
	Обработчик.Комментарий = НСтр("ru = 'Заполнение разрядов-категорий СЗВ-ТД и СТД-Р.'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.РегистрыСведений.ДатыВступленияВСилуНА) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.423";
		Обработчик.Процедура = "РегистрыСведений.ДатыВступленияВСилуНА.НачальноеЗаполнение";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьФорматСтраховогоНомераВСправочникеФизическиеЛица(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка КАК Ссылка,
	               |	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.СтраховойНомерПФР <> """"
	               |	И НЕ ФизическиеЛица.СтраховойНомерПФР ПОДОБНО ""[0-9][0-9][0-9]-%""";
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ФизическиеЛица = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(Выборка.СтраховойНомерПФР, 3)) Тогда 
			Продолжить;
		КонецЕсли;
		НомерБезПробелов = СтрЗаменить(СокрЛП(Выборка.СтраховойНомерПФР), " ", "");
		НомерБезДефисов = СтрЗаменить(НомерБезПробелов, "-", "");
		Если СтрДлина(НомерБезДефисов) <> 11 Тогда
			Продолжить;
		КонецЕсли;
		ФизическиеЛица.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если ФизическиеЛица.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.ФизическиеЛица", "Ссылка", ФизическоеЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		ФизическиеЛицаОбъект = ФизическоеЛицо.ПолучитьОбъект();
		ПерсонифицированныйУчетКлиентСервер.УстановитьФорматСтраховогоНомераПФР(ФизическиеЛицаОбъект.СтраховойНомерПФР);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ФизическиеЛицаОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьФорматРегистрационногоНомераВСправочникеОрганизации(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка,
	               |	Организации.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.РегистрационныйНомерПФР <> """"
	               |	И НЕ Организации.РегистрационныйНомерПФР ПОДОБНО ""[0-9][0-9][0-9]-%""";
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	Организации = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(Выборка.РегистрационныйНомерПФР, 3)) Тогда 
			Продолжить;
		КонецЕсли;
		НомерБезПробелов = СтрЗаменить(СокрЛП(Выборка.РегистрационныйНомерПФР), " ", "");
		НомерБезДефисов = СтрЗаменить(НомерБезПробелов, "-", "");
		Если СтрДлина(НомерБезДефисов) <> 12 Тогда
			Продолжить;
		КонецЕсли;
		Организации.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Организации.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Для Каждого Организация Из Организации Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "Справочник.Организации", "Ссылка", Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		ПерсонифицированныйУчетКлиентСервер.УстановитьФорматРегистрационногоНомераПФР(ОрганизацияОбъект.РегистрационныйНомерПФР);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОрганизацияОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьФорматРегистрационногоНомераВРегистреИсторияРегистрацийВОрганеПФР(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсторияРегистрацийВОрганеПФР.Период КАК Период,
	               |	ИсторияРегистрацийВОрганеПФР.Организация КАК Организация,
	               |	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР
	               |ИЗ
	               |	РегистрСведений.ИсторияРегистрацийВОрганеПФР КАК ИсторияРегистрацийВОрганеПФР
	               |ГДЕ
	               |	ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР <> """"
	               |	И НЕ ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР ПОДОБНО ""[0-9][0-9][0-9]-%""";
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ЗаписиРегистра = Новый Массив;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(Выборка.РегистрационныйНомерПФР, 3)) Тогда 
			Продолжить;
		КонецЕсли;
		НомерБезПробелов = СтрЗаменить(СокрЛП(Выборка.РегистрационныйНомерПФР), " ", "");
		НомерБезДефисов = СтрЗаменить(НомерБезПробелов, "-", "");
		Если СтрДлина(НомерБезДефисов) <> 12 Тогда
			Продолжить;
		КонецЕсли;
		ЗаписьРегистра = Новый Структура("Период,Организация,РегистрационныйНомерПФР");
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
		ЗаписиРегистра.Добавить(ЗаписьРегистра);
	КонецЦикла;
	
	Если ЗаписиРегистра.Количество() = 0 Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Для Каждого ЗаписьРегистра Из ЗаписиРегистра Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, "РегистрСведений.ИсторияРегистрацийВОрганеПФР", "Организация", ЗаписьРегистра.Организация) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.ИсторияРегистрацийВОрганеПФР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ЗаписьРегистра.Период);
		НаборЗаписей.Отбор.Организация.Установить(ЗаписьРегистра.Организация);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьРегистра);
		ПерсонифицированныйУчетКлиентСервер.УстановитьФорматРегистрационногоНомераПФР(НоваяЗапись.РегистрационныйНомерПФР);
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИтоговыеПоляДосрочногоНазначенияПенсии(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДосрочноеНазначениеПенсии.Ссылка КАК Ссылка,
	               |	СУММА(ДосрочноеНазначениеПенсии.КоличествоРабочихМест) КАК ВсегоРабочихМестДНП,
	               |	СУММА(ДосрочноеНазначениеПенсии.КоличествоРаботающих) КАК ВсегоРаботающихДНП,
	               |	""Документ.ОписьОДВ_1"" КАК ИмяТаблицы
	               |ИЗ
	               |	Документ.ОписьОДВ_1.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка.ВсегоРаботающихДНП = 0
	               |	И ДосрочноеНазначениеПенсии.Ссылка.ВсегоРабочихМестДНП = 0
	               |	И НЕ ДосрочноеНазначениеПенсии.Ссылка.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДосрочноеНазначениеПенсии.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ДосрочноеНазначениеПенсии.КоличествоРабочихМест) > 0
	               |		ИЛИ СУММА(ДосрочноеНазначениеПенсии.КоличествоРаботающих) > 0)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДосрочноеНазначениеПенсии.Ссылка,
	               |	СУММА(ДосрочноеНазначениеПенсии.КоличествоРабочихМест),
	               |	СУММА(ДосрочноеНазначениеПенсии.КоличествоРаботающих),
	               |	""Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ""
	               |ИЗ
	               |	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка.ВсегоРаботающихДНП = 0
	               |	И ДосрочноеНазначениеПенсии.Ссылка.ВсегоРабочихМестДНП = 0
	               |	И НЕ ДосрочноеНазначениеПенсии.Ссылка.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДосрочноеНазначениеПенсии.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ДосрочноеНазначениеПенсии.КоличествоРабочихМест) > 0
	               |		ИЛИ СУММА(ДосрочноеНазначениеПенсии.КоличествоРаботающих) > 0)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДосрочноеНазначениеПенсии.Ссылка,
	               |	СУММА(ДосрочноеНазначениеПенсии.КоличествоРабочихМест),
	               |	СУММА(ДосрочноеНазначениеПенсии.КоличествоРаботающих),
	               |	""Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ""
	               |ИЗ
	               |	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка.ВсегоРаботающихДНП = 0
	               |	И ДосрочноеНазначениеПенсии.Ссылка.ВсегоРабочихМестДНП = 0
	               |	И НЕ ДосрочноеНазначениеПенсии.Ссылка.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДосрочноеНазначениеПенсии.Ссылка
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(ДосрочноеНазначениеПенсии.КоличествоРабочихМест) > 0
	               |		ИЛИ СУММА(ДосрочноеНазначениеПенсии.КоличествоРаботающих) > 0)";
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Выборка.ИмяТаблицы, "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка, "ВсегоРаботающихДНП,ВсегоРабочихМестДНП");
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОсобыеУсловияТрудаИОснованиеДосрочногоНазначенияПенсии(ПараметрыОбновления = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	ПустыеЗначения = Новый Массив;
	ПустыеЗначения.Добавить(Справочники.ОсобыеУсловияТрудаДляСЗВКПФР.ПустаяСсылка());
	ПустыеЗначения.Добавить(Справочники.ОсобыеУсловияТрудаПФР.ПустаяСсылка());
	ПустыеЗначения.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка());
	ПустыеЗначения.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсииДляСЗВК.ПустаяСсылка());
	ПустыеЗначения.Добавить(Неопределено);
	
	Запрос.УстановитьПараметр("ПустыеЗначения", ПустыеЗначения);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка КАК Ссылка,
	               |	""Документ.ОписьОДВ_1"" КАК ИмяТаблицы
	               |ПОМЕСТИТЬ ДокументыПерсонифицированногоУчета
	               |ИЗ
	               |	Документ.ОписьОДВ_1.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	НЕ ДосрочноеНазначениеПенсии.УдалитьОснованиеВыслугиЛет В (&ПустыеЗначения)
	               |	И ДосрочноеНазначениеПенсии.ОсобыеУсловияТруда В(&ПустыеЗначения)
	               |	И ДосрочноеНазначениеПенсии.ОснованиеДосрочногоНазначенияПенсии В(&ПустыеЗначения)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка,
	               |	""Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ""
	               |ИЗ
	               |	Документ.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	НЕ ДосрочноеНазначениеПенсии.УдалитьОснованиеВыслугиЛет В (&ПустыеЗначения)
	               |	И ДосрочноеНазначениеПенсии.ОсобыеУсловияТруда В(&ПустыеЗначения)
	               |	И ДосрочноеНазначениеПенсии.ОснованиеДосрочногоНазначенияПенсии В(&ПустыеЗначения)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка,
	               |	""Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ""
	               |ИЗ
	               |	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	НЕ ДосрочноеНазначениеПенсии.УдалитьОснованиеВыслугиЛет В (&ПустыеЗначения)
	               |	И ДосрочноеНазначениеПенсии.ОсобыеУсловияТруда В(&ПустыеЗначения)
	               |	И ДосрочноеНазначениеПенсии.ОснованиеДосрочногоНазначенияПенсии В(&ПустыеЗначения)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1000
	               |	ДокументыПерсонифицированногоУчета.Ссылка КАК Ссылка,
	               |	ДокументыПерсонифицированногоУчета.ИмяТаблицы КАК ИмяТаблицы
	               |ИЗ
	               |	ДокументыПерсонифицированногоУчета КАК ДокументыПерсонифицированногоУчета";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000","");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();			   
				   
	Если РезультатЗапроса.Пустой() Тогда 
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл 
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Выборка.ИмяТаблицы, "Ссылка", Выборка.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Для Каждого ДанныеДосрочногоНазначенияПенсии Из ДокументОбъект.ДосрочноеНазначениеПенсии Цикл 
			Если Не ЗначениеЗаполнено(ДанныеДосрочногоНазначенияПенсии.УдалитьОснованиеВыслугиЛет)
				Или ЗначениеЗаполнено(ДанныеДосрочногоНазначенияПенсии.ОсобыеУсловияТруда)
				Или ЗначениеЗаполнено(ДанныеДосрочногоНазначенияПенсии.ОснованиеДосрочногоНазначенияПенсии) Тогда 
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ДанныеДосрочногоНазначенияПенсии.УдалитьОснованиеВыслугиЛет) = Тип("СправочникСсылка.ОсобыеУсловияТрудаПФР")
				Или ТипЗнч(ДанныеДосрочногоНазначенияПенсии.УдалитьОснованиеВыслугиЛет) = Тип("СправочникСсылка.ОсобыеУсловияТрудаДляСЗВКПФР") Тогда 
				ДанныеДосрочногоНазначенияПенсии.ОсобыеУсловияТруда = ДанныеДосрочногоНазначенияПенсии.УдалитьОснованиеВыслугиЛет;
			Иначе 
				ДанныеДосрочногоНазначенияПенсии.ОснованиеДосрочногоНазначенияПенсии = ДанныеДосрочногоНазначенияПенсии.УдалитьОснованиеВыслугиЛет;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с данными документов физических лиц

// Возвращает структуру содержащую данные документа физ. лица
// в формате необходимом для ПФР.
//
// Параметры:
//	ДокументВид
//	ДокументСерия
//  ДокументНомер
//  ДокументДатаВыдачи
//  ДокументКемВыдан
//  ДокументКодПФР
//
// Возвращаемое значение:
//	Структура с данными документа в формате необходимом для ПФР.
//
Функция ПолучитьДанныеДокументаВФорматеПФР(ДокументВид, ДокументСерия, ДокументНомер, ДокументДатаВыдачи, ДокументКемВыдан, ДокументКодПФР, ДокументНаименование) Экспорт 
	ДанныеДокумента = Новый Структура ("ТипУдостоверяющегоДокумента, НаименованиеУдостоверяющегоДокумента, НомерУдостоверяющегоДокумента, СерияРимскиеЦифры, СерияРусскиеБуквы, ДатаВыдачи, КемВыдан" );
	
	ДанныеДокумента.ТипУдостоверяющегоДокумента = СокрЛП(ДокументКодПФР);
	ДанныеДокумента.НаименованиеУдостоверяющегоДокумента = ?(СокрЛП(ДокументКодПФР) = "ПРОЧЕЕ", Лев(ВРег(СокрЛП(ДокументНаименование)), 80), СокрЛП(ДокументКодПФР));;
	
	СерииДокумента = РазложитьСериюДокумента(ДокументВид, ДокументСерия);
	
	ДанныеДокумента.СерияРимскиеЦифры = СерииДокумента.Часть1;
	ДанныеДокумента.СерияРусскиеБуквы = СерииДокумента.Часть2;
	ДанныеДокумента.НомерУдостоверяющегоДокумента = ДокументНомер;
	ДанныеДокумента.ДатаВыдачи = ДокументДатаВыдачи;
	ДанныеДокумента.КемВыдан = Лев(СокрЛП(ВРег(ДокументКемВыдан)), 80);
		
	Возврат ДанныеДокумента;

КонецФункции	

// Разбивает серию документа удостоверяющего личность на 2 части: до и после разделителя.
Функция РазложитьСериюДокумента(Знач ВидДокумента, Знач СерияДокумента) Экспорт
	Часть1 = "";
	Часть2 = "";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		

		Если ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР 
			Или ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении  Тогда
			// Свидетельство о рождении или Паспорт гражданина СССР. . Разделитель групп - "-"
			Разделитель = СтрНайти(СерияДокумента, "-");
			Часть1 = ?(Разделитель = 0, СерияДокумента, СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("1УХЛС", ВРег(СокрЛП(Лев(СерияДокумента, Разделитель-1))), "IVXLC"));
			Часть2 = ?(Разделитель = 0, "", СокрЛП(Сред(СерияДокумента, Разделитель + 1)));
		ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР 
			Или ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ Тогда
			// Загранпаспорт гражданина СССР и РФ - первая часть не заполняется, заполняется только вторая часть.
			Часть2 = СерияДокумента;
		ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ  Тогда
			// Паспорт гражданина Российской Федерации. Разделитель групп - " "
			Разделитель = СтрНайти(СерияДокумента, " ");
			Часть1 = ?(Разделитель = 0, СерияДокумента, СокрЛП(Лев(СерияДокумента, Разделитель - 1)));
			Часть2 = ?(Разделитель = 0, "", СокрЛП(Сред(СерияДокумента, Разделитель + 1)));
		Иначе	
			Если СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(СокрЛП(СерияДокумента)) Тогда
				Часть2 = СерияДокумента;
			Иначе 
				Часть1 = СерияДокумента;
			КонецЕсли
		КонецЕсли;
		
	КонецЕсли;	 

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Часть1",Часть1);
	СтруктураВозврата.Вставить("Часть2",Часть2);
	Возврат СтруктураВозврата;
	
КонецФункции	 

////////////////////////////////////////////////////////////////////////////////
// Преобразование типов

// Преобразует дату в формат, требуемый правилами подготовки документов в ПФ РФ 
// Преобразует дату в формат, необходимый для печатных форм сведений в ПФР: "ДД" месяц ГГГГ.
Функция ДатаВОтчет(Знач Дата) Экспорт
	Если (ТипЗнч(Дата) = Тип("Дата"))И(Дата <> Дата('00010101')) Тогда
		Стр = Формат(Дата,"ДФ='дд ММММ гггг'") + " года";
		Возврат """"+Лев(Стр,2)+""""+Сред(Стр,3);
	КонецЕсли;	 
	Возврат "";
КонецФункции 

// Преобразует строку в формат, требуемый правилами подготовки документов в ПФ РФ 
//
Функция СтрокаВОтчет(Знач Строка, ЗаменятьБуквуЁ = Ложь) Экспорт 
	Если ЗаменятьБуквуЁ Тогда
		ЗаменитьБуквуЁ(Строка, "");
	КонецЕсли;	
	
	Возврат СокрЛП(ВРег(Строка));
		
КонецФункции	 

 ////////////////////////////////////////////////////////////////////////////////
// Формирование выходных файлов сведений

// Формирует имя выходного файла сведений в ПФ РФ
Функция ПолучитьИмяФайлаПФ(Документ, ГодПредставленияСведений, Знач ВыборкаПоШапкеДокумента = Неопределено) Экспорт	
		
	НомерПачки = Формат(ВыборкаПоШапкеДокумента.НомерПачки, "ЧГ=");
	
	РегНомерПФР = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	СтрНомПачки = Прав("100000"+НомерПачки,5);
	
	РегНомерПФР = СтрЗаменить(РегНомерПФР, " ", "");
	Если СтрДлина(РегНомерПФР) <> 14 Тогда
		РегНомерПФР = Лев(РегНомерПФР, 8) + "0" + Сред(РегНомерПФР, 9)
	КонецЕсли;
	
	// имя файла без подразделений.
	ИмяФайла = "PFR-700-Y-"+Формат(ГодПредставленияСведений, "ЧГ=0")+"-ORG-"+ РегНомерПФР+   
	"-DCK-"+СтрНомПачки+"-DPT-000000-DCK-00000.XML";
		
	Возврат ИмяФайла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование файла индивидуальных сведений ПФР XML формат 7.0 

Функция УзелФайлаПФР(ДеревоВыгрузки) Экспорт
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://schema.pfr.ru");
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", Атрибуты);	
	
	Возврат УзелПФР;
КонецФункции	

// Процедура устанавливает заголовочные параметры файла выгрузки XML формата 07.00
//
Процедура ЗаполнитьИмяИЗаголовокФайла(УзелПФР, ДеревоФормата, ИмяФайла) Экспорт	
	
	// добавляем реквизит ИмяФайла
	НаборЗаписейИмяФайла = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ИмяФайла");
	НаборЗаписейИмяФайла.ИмяФайла.Значение = ИмяФайла;
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелПФР, НаборЗаписейИмяФайла);
	
	// Добавляем Реквизит заголовок файла
	НаборЗаписейЗаголовокФайла = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "ЗаголовокФайла");
	НаборЗаписейПрограммаПодготовкиДанных = НаборЗаписейЗаголовокФайла.ПрограммаПодготовкиДанных.Значение;
	
	НаборЗаписейПрограммаПодготовкиДанных.Версия = ВРег(РегламентированнаяОтчетность.ВерсияПрограммы());
	НаборЗаписейПрограммаПодготовкиДанных.НазваниеПрограммы = Лев(ВРег(РегламентированнаяОтчетность.НазваниеПрограммы()), 40);
	
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ЗаголовокФайла", ""), НаборЗаписейЗаголовокФайла); 
	
КонецПроцедуры 

// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
//
Функция ЗаполнитьНаборЗаписейВходящаяОпись(УзелПФР, ДеревоФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерДокументаВПачке, УзелПачкаСЗВ4 = Неопределено, НаборЗаписейИтогоСуммаВзносов = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ") Экспорт	
	// устанавливаем значение номер пачки	
	НаборЗаписейВходящаяОпись = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, ТегВходящейОписи, 1);
	НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = Формат(ВыборкаПоШапкеДокумента.НомерПачки, "ЧГ=");
	
	НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
	
	// Составитель пачки
	НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение;
	ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента);
	
	НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
	НаборЗаписейСоставДокументов.Количество.Значение = 1;
	
	НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
	НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
	НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
	
	НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
	
	Если ТипДокумента = "РЕЕСТР_ДСВ_РАБОТОДАТЕЛЬ" Тогда
		
		РеестрДСВ = НаборЗаписейВходящаяОпись.РеестрДСВ.Значение;
		
		ЗаполнитьЗначенияСвойств(РеестрДСВ.ПлатежноеПоручение.Значение,ВыборкаПоШапкеДокумента);
		РеестрДСВ.Год.Значение = ВыборкаПоШапкеДокумента.Год;
		РеестрДСВ.КоличествоСтрок.Значение = ВыборкаПоШапкеДокумента.КоличествоСтрок;
		РеестрДСВ.СуммаДСВРаботника.Значение = ВыборкаПоШапкеДокумента.СуммаДСВРаботника;
		РеестрДСВ.СуммаДСВРаботодателя.Значение = ВыборкаПоШапкеДокумента.СуммаДСВРаботодателя;
		РеестрДСВ.СуммаДСВОбщая.Значение = ВыборкаПоШапкеДокумента.СуммаДСВОбщая;
		
		УзелПачкаВходящихДокументов = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
	Иначе
		
		НаборЗаписейВходящаяОпись.Удалить("ПачкаСЗВ4");
		
		УзелПачкаВходящихДокументов = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
		
		ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
		
	КонецЕсли;
		
	Возврат УзелПачкаВходящихДокументов;
	
КонецФункции 

// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа.

Процедура ЗаменитьБуквуЁ(РедактируемаяСтрока, НазваниеРеквизита = "") Экспорт
	Если СтрНайти(ВРег(РедактируемаяСтрока), "Ё") > 0 Тогда
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");	
	КонецЕсли;
КонецПроцедуры 

/// Процедура заполняет адрес, представленный в структуре для записи в XML файл 
// входными данными является строка адреса
//  СписокСтран - Список стран и их кодов
// СписокСокращений1-5 - сокращения для определенного реквизита адреса
// ФорматИностранныйАдрес, ФорматНеструктурированныйАдрес - форматы данных для не Российских адресов.
// ВыходноеЗначение: НаборЗаписейАдрес.
Процедура ЗаполнитьАдрес(НаборЗаписейАдрес, СтрокаАдрес, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ЗаменятьБуквуЕ = Ложь) Экспорт
	АдресСписком = ЗарплатаКадры.СтруктураАдресаИзXML(
			СтрокаАдрес, Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
			
	Если АдресСписком.Свойство("Индекс") Тогда
		ЗаПределамиРФ = Ложь;
	Иначе
		ЗаПределамиРФ = Истина;
	КонецЕсли;	
	
	// ЗаПределамиРФ может быть не определено, поэтому сравниваем на значение
	Если ЗаПределамиРФ Тогда
		Если АдресСписком.Страна = "РОССИЯ" Тогда
			// Неструктурированный адрес
			НаборЗаписейАдрес = ОбщегоНазначения.СкопироватьРекурсивно(ФорматНеструктурированныйАдрес);
			НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(АдресСписком.Представление));
			Если ЗаменятьБуквуЕ Тогда
				ЗаменитьБуквуЁ(НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес, "Адрес");
			КонецЕсли;	
			НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
			НаборЗаписейАдрес.Удалить("Индекс");
			ТекстПредупреждения = НСтр("ru = 'сохранен как неструктурированный адрес.'");
		Иначе
			// Иностранный адрес
			
			НазваниеСтраны = ВРег(СокрЛП(АдресСписком.Страна));
			КодСтраны = СписокСтран.Получить(НазваниеСтраны);
			Если КодСтраны = Неопределено Тогда
				// не удалось получить страну, запишем как неструктурированный адрес
				НаборЗаписейАдрес = ОбщегоНазначения.СкопироватьРекурсивно(ФорматНеструктурированныйАдрес);
				НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(АдресСписком.Представление));
				Если ЗаменятьБуквуЕ Тогда
					ЗаменитьБуквуЁ(НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес, "Адрес");
				КонецЕсли;	
				НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
			Иначе
				НаборЗаписейАдрес = ОбщегоНазначения.СкопироватьРекурсивно(ФорматИностранныйАдрес);
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.КодСтраны = КодСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.НазваниеСтраны = НазваниеСтраны;
				НаборЗаписейАдрес.ИностранныйАдрес.Значение.Адрес = ВРег(СокрЛП(АдресСписком.Представление));
				НаборЗаписейАдрес.ТипАдреса.Значение = "ИНОСТРАННЫЙ";
				НаборЗаписейАдрес.Удалить("Индекс");
				ТекстПредупреждения = НСтр("ru = ' сохранен как иностранный адрес.'");
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Российский адрес
		НаборЗаписейАдрес.Индекс.Значение = АдресСписком.Индекс;
		НаборЗаписейАдрес.ТипАдреса.Значение = "РОССИЙСКИЙ";
		
		НаборЗаписейРоссийскийАдрес = НаборЗаписейАдрес.РоссийскийАдрес.Значение;
		НаборЗаписейРоссийскийАдрес.СостояниеАдреса.Значение = "ПРАВИЛЬНЫЙ";
		НаборЗаписейРоссийскийАдрес.СостояниеАдреса.НеВыводитьВФайл = Истина;
		
		НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(АдресСписком.Регион)), НаборЗаписейРоссийскийАдрес.Регион.Значение.Сокращение);
		Если ЗаменятьБуквуЕ Тогда
			ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Регион.Значение.ГеографическоеНазвание, "Регион");
		КонецЕсли;	
		
		НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(АдресСписком.Район)), НаборЗаписейРоссийскийАдрес.Район.Значение.Сокращение);
		Если ЗаменятьБуквуЕ Тогда
			ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Район.Значение.ГеографическоеНазвание, "Район");
		КонецЕсли;
		
		НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(АдресСписком.Город)), НаборЗаписейРоссийскийАдрес.Город.Значение.Сокращение);		
		Если ЗаменятьБуквуЕ Тогда	
			ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Город.Значение.ГеографическоеНазвание, "Город");
		КонецЕсли;
		
		НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.ГеографическоеНазвание = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(АдресСписком.НаселенныйПункт)), НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.Сокращение);
		Если ЗаменятьБуквуЕ Тогда
			ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.НаселенныйПункт.Значение.ГеографическоеНазвание, "Населенный пункт");
		КонецЕсли;
		
		НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(АдресСписком.Улица)), НаборЗаписейРоссийскийАдрес.Улица.Значение.Сокращение);
		Если ЗаменятьБуквуЕ Тогда
			ЗаменитьБуквуЁ(НаборЗаписейРоссийскийАдрес.Улица.Значение.ГеографическоеНазвание, "Улица");
		КонецЕсли;	
		
		Если Не ПустаяСтрока(АдресСписком.Дом) Тогда
			НаборЗаписейРоссийскийАдрес.Дом.Значение.Номер = ВРег(АдресСписком.Дом);
			НаборЗаписейРоссийскийАдрес.Дом.Значение.Сокращение = "Д";
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресСписком.Корпус) Тогда
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Номер = ВРег(АдресСписком.Корпус);
			НаборЗаписейРоссийскийАдрес.Корпус.Значение.Сокращение = "КОРП";
		КонецЕсли;
		
		Если Не ПустаяСтрока(АдресСписком.Квартира) Тогда
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Номер = ВРег(АдресСписком.Квартира);
			НаборЗаписейРоссийскийАдрес.Квартира.Значение.Сокращение = "КВ";
		КонецЕсли;
		
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.Регион, "Значение.ГеографическоеНазвание");
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.Район, "Значение.ГеографическоеНазвание");
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.Город, "Значение.ГеографическоеНазвание");
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.НаселенныйПункт, "Значение.ГеографическоеНазвание");
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.Улица, "Значение.ГеографическоеНазвание");
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.Дом, "Значение.Номер");
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.Корпус, "Значение.Номер");
		УстановитьВыводВФайл(НаборЗаписейРоссийскийАдрес.Квартира, "Значение.Номер");
	КонецЕсли;
КонецПроцедуры 

// Функция преобразует дерево значений в котором представлен XML файл, в текст
//
Функция ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки, АтрибутыПачкиВходящихДокументов = Неопределено) Экспорт	
	// Преобразуем дерево в строковое описание XML	
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML();
	
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML);
	
	// получаем содержимое файла в виде строки
	
	ТекстФайла = СтрЗаменить(ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML),"<ПачкаВходящихДокументов>",
	"<ПачкаВходящихДокументов " + ?(АтрибутыПачкиВходящихДокументов = Неопределено, "Окружение=""В составе файла"" Стадия=""До обработки""", АтрибутыПачкиВходящихДокументов) + ">");
	
	Возврат ТекстФайла;
	
КонецФункции 

// Процедура заполняет реквизиты файла - сведения об организации
//
Процедура ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента) Экспорт	
	
	Если ВыборкаПоШапкеДокумента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		НаборЗаписейСоставительПачки.Удалить("КодЕГРЮЛ");
		НаборЗаписейСоставительПачки.КодЕГРИП.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОГРН);
		УстановитьВыводВФайл(НаборЗаписейСоставительПачки.КодЕГРИП, "Значение");
	Иначе
		НаборЗаписейСоставительПачки.Удалить("КодЕГРИП");
		НаборЗаписейСоставительПачки.КодЕГРЮЛ.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОГРН);
		УстановитьВыводВФайл(НаборЗаписейСоставительПачки.КодЕГРЮЛ, "Значение");
	КонецЕсли;
	
	НомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР, " ", "");
	Если СтрДлина(НомерПФР) <> 14 Тогда
		НомерПФР = Лев(НомерПФР, 8) + "0" + Сред(НомерПФР, 9)
	КонецЕсли;
	НаборЗаписейСоставительПачки.РегистрационныйНомер.Значение = НомерПФР;
	НаборЗаписейСоставительПачки.Удалить("ДатаВыдачиЛицензии");
	НаборЗаписейСоставительПачки.Удалить("НомерЛицензии");
	
	НаборЗаписейНалоговыйНомер = НаборЗаписейСоставительПачки.НалоговыйНомер.Значение;
	НаборЗаписейНалоговыйНомер.ИНН = СокрЛП(ВыборкаПоШапкеДокумента.ИНН);
	Если ВыборкаПоШапкеДокумента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		НаборЗаписейНалоговыйНомер.Удалить("КПП");
		ТаблицаПолей = НаборЗаписейСоставительПачки.НалоговыйНомер.Поля;
		ТаблицаПолей.Индексы.Добавить("ИмяПоля");
		СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
		Если СтрокаКПП <> Неопределено Тогда
			ТаблицаПолей.Удалить(СтрокаКПП);
		КонецЕсли;
	Иначе
		НаборЗаписейНалоговыйНомер.КПП = ВыборкаПоШапкеДокумента.КПП;
	КонецЕсли;
	
	НаименованиеОрганизации = СокрЛП(ВРЕГ(Лев(ВыборкаПоШапкеДокумента.НаименованиеПолное,НаборЗаписейСоставительПачки.НаименованиеОрганизации.Размер)));
	УдалитьПробелыРядомСДефисом(НаименованиеОрганизации);
	НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение = НаименованиеОрганизации;
	
	НаименованиеКраткое = СокрЛП(ВРег(Лев(ВыборкаПоШапкеДокумента.НаименованиеСокращенное, НаборЗаписейСоставительПачки.НаименованиеКраткое.Размер)));
	УдалитьПробелыРядомСДефисом(НаименованиеКраткое);
	НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение = НаименованиеКраткое;
		
	НаборЗаписейСоставительПачки.Удалить("Подразделение");
	
	Если Не ЗначениеЗаполнено(НаборЗаписейСоставительПачки.Форма.Значение) Тогда 
		НаборЗаписейСоставительПачки.Форма.НеВыводитьВФайл = Истина;
	КонецЕсли;
	
КонецПроцедуры 

Процедура УдалитьПробелыРядомСДефисом(РедактируемаяСтрока) Экспорт 
	
	Пока Найти(РедактируемаяСтрока, " -") <> 0 Цикл 
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, " -", "-");
	КонецЦикла;
	
	Пока Найти(РедактируемаяСтрока, "- ") <> 0 Цикл 
		РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "- ", "-");
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеОтчетногоПериодаДляФайла(ОтчетныйПериод) Экспорт
	Если ОтчетныйПериод >= '20140101' Тогда 
		Возврат ОписаниеОтчетногоПериодаДляФайла2014(ОтчетныйПериод);
	Иначе
		Возврат ОписаниеОтчетногоПериодаДляФайла2013(ОтчетныйПериод);
	КонецЕсли;	
КонецФункции	

Функция ОписаниеОтчетногоПериодаДляФайла2013(ОтчетныйПериод) Экспорт
	
	Если Месяц(ОтчетныйПериод) = 1 Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",1,Год(ОтчетныйПериод));
	ИначеЕсли Месяц(ОтчетныйПериод) = 4 Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",2,Год(ОтчетныйПериод));
	ИначеЕсли Месяц(ОтчетныйПериод) = 7 Тогда
		Если Год(ОтчетныйПериод) = 2010 Тогда
			СтруктураОписания = Новый Структура("Квартал,Год",2,Год(ОтчетныйПериод));	
		Иначе	
			СтруктураОписания = Новый Структура("Квартал,Год",3,Год(ОтчетныйПериод));
		КонецЕсли;	
	ИначеЕсли Месяц(ОтчетныйПериод) = 10 Тогда
		СтруктураОписания = Новый Структура("Квартал,Год",4,Год(ОтчетныйПериод));
	Иначе	
		СтруктураОписания = Новый Структура("Квартал,Год");		
	КонецЕсли;
	
	Возврат СтруктураОписания
	
КонецФункции

Функция ОписаниеОтчетногоПериодаДляФайла2014(ОтчетныйПериод) Экспорт
	
	СтруктураОписания = Новый Структура("Квартал,Год", Месяц(КонецКвартала(ОтчетныйПериод)) % 12, Год(ОтчетныйПериод));
	
	Возврат СтруктураОписания
	
КонецФункции 

Процедура ВписатьВзносыВНаборДанных(НаборДанных, НачисленоСтраховая, УплаченоСтраховая, НачисленоНакопительная, УплаченоНакопительная) Экспорт 
	
	Если НачисленоСтраховая > 0 Или УплаченоСтраховая > 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаСтраховую.Значение;
		Если НачисленоСтраховая > 0 Тогда
			СуммаВзносов.Начислено = НачисленоСтраховая;
		КонецЕсли;
		Если УплаченоСтраховая > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоСтраховая;
		КонецЕсли;
	Иначе  
		НаборДанных.СуммаВзносовНаСтраховую.НеВыводитьВФайл = Истина;
	КонецЕсли;
	
	Если НачисленоНакопительная > 0 Или УплаченоНакопительная> 0 Тогда
		СуммаВзносов = НаборДанных.СуммаВзносовНаНакопительную.Значение;
		Если НачисленоНакопительная > 0 Тогда
			СуммаВзносов.Начислено = НачисленоНакопительная;
		КонецЕсли;
		Если УплаченоНакопительная > 0 Тогда
			СуммаВзносов.Уплачено = УплаченоНакопительная;
		КонецЕсли;
	Иначе
		НаборДанных.СуммаВзносовНаНакопительную.НеВыводитьВФайл = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВыводВФайл(Элемент, ПроверяемоеСвойство) Экспорт 
	
	МассивИмен = СтрРазделить(ПроверяемоеСвойство, ".");
	Свойство = Элемент;
	
	Для Сч = 0 По МассивИмен.Количество()-1 Цикл
		Свойство = Свойство[МассивИмен[Сч]]
	КонецЦикла;
	
	Элемент.НеВыводитьВФайл = Не ЗначениеЗаполнено(Свойство);
	
КонецПроцедуры

Процедура УстановитьВыводВФайлГруппыЭлементов(ГруппаЭлементов) Экспорт
	
	НеВыводитьВФайл = Истина;
	Для Каждого КлючИЗначение Из ГруппаЭлементов.Значение Цикл 
		Если КлючИЗначение.Значение.НеВыводитьВФайл = Ложь Тогда 
			НеВыводитьВФайл = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ГруппаЭлементов.НеВыводитьВФайл = НеВыводитьВФайл;
	
КонецПроцедуры

Процедура УстановитьВыводВФайлСвойстваЗначенияЭлемента(Элемент, ИмяСвойства) Экспорт
	
	СтрокаПоля = Элемент.Поля.Найти(ИмяСвойства, "ИмяПоля");
	Если СтрокаПоля <> Неопределено Тогда
		СтрокаПоля.НеВыводитьВФайл = Не ЗначениеЗаполнено(Элемент.Значение[ИмяСвойства]);
	КонецЕсли;		
	
КонецПроцедуры

Процедура УстановитьВыводВФайлСтруктуры(Элемент) Экспорт
	
	Элемент.НеВыводитьВФайл = Элемент.Поля.Найти(Ложь, "НеВыводитьВФайл") = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Персонифицированный учет с 2010 года

Процедура ПроставитьНомерПачки(ДокументОбъект) Экспорт
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("ОтчетныйПериод") <> Неопределено Тогда 	
		ОтчетныйПериод = ?(ТипЗнч(ДокументОбъект.ОтчетныйПериод) = Тип("Дата"), ДокументОбъект.ОтчетныйПериод, Дата(ДокументОбъект.ОтчетныйПериод, 1, 1));
	Иначе
		ОтчетныйПериод = НачалоГода(ДокументОбъект.Дата);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) И ЗначениеЗаполнено(ОтчетныйПериод) Тогда
		ГодДокумента = Год(ОтчетныйПериод);	
		Если ДокументОбъект.НомерПачки = 0 Тогда
			ДокументОбъект.НомерПачки = ПолучитьСледующийНомерПачки(ДокументОбъект.Организация, ОтчетныйПериод);
			РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(ДокументОбъект.Организация, ГодДокумента, ДокументОбъект.НомерПачки);
		Иначе 
			ПоследнийНомерПачки = РегламентированнаяОтчетность.ПолучитьНомерПачкиВыгруженныхФайловПФР(ДокументОбъект.Организация, ГодДокумента);
			Если ДокументОбъект.НомерПачки > ПоследнийНомерПачки Тогда
				РегламентированнаяОтчетность.УстановитьНомерПачкиВыгруженныхФайловПФР(ДокументОбъект.Организация, ГодДокумента, ДокументОбъект.НомерПачки);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры


/////////////////////////////////////////////////////////////////////
// Работа с адресами

// Процедура формирует представление для Адреса для ПФР
Функция ПолучитьПредставлениеАдресаДляПФР(СтруктураАдрес) Экспорт 
	Адрес = "";
	Если СтруктураАдрес <> Неопределено Тогда 
		Если СтруктураАдрес.Свойство("Индекс") Тогда
			ЗаПределамиРФ = Ложь;
		Иначе
			ЗаПределамиРФ = Истина;
		КонецЕсли;	
		
		Если Не ЗаПределамиРФ Тогда
			СокращениеРегион = "";
			Регион = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(СтруктураАдрес.Регион)), СокращениеРегион);
			СокращениеРайон = "";
			Район = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(СтруктураАдрес.Район)), СокращениеРайон);
			СокращениеГород = "";
			Город = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(СтруктураАдрес.Город)), СокращениеГород);
			СокращениеНаселенныйПункт = "";
			НаселенныйПункт = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(СтруктураАдрес.НаселенныйПункт)), СокращениеНаселенныйПункт);
			СокращениеУлица = "";
			Улица = НаименованиеИАдресноеСокращение(ВРЕГ(СокрЛП(СтруктураАдрес.Улица)), СокращениеУлица);
			
			Если Не ПустаяСтрока(СтруктураАдрес.Дом) Тогда
				СокращениеДом = "Д";
			КонецЕсли;

			Если Не ПустаяСтрока(СтруктураАдрес.Корпус) Тогда
				СокращениеКорпус = "КОРП";
			КонецЕсли;

			Если Не ПустаяСтрока(СтруктураАдрес.Квартира) Тогда
				СокращениеКвартира = "КВ";
			КонецЕсли;
			
			Адрес = "индекс " + ?(ЗначениеЗаполнено(СтруктураАдрес.Индекс), СтруктураАдрес.Индекс, "      ") + " адрес " +
				ВРег(Сред(?(ЗначениеЗаполнено(Регион), ", " + Регион + " " + СокращениеРегион, "") +
				?(ЗначениеЗаполнено(Район), ", " + Район + " " + СокращениеРайон, "") +
				?(ЗначениеЗаполнено(Город), ", " + Город + " " + СокращениеГород, "") +
				?(ЗначениеЗаполнено(НаселенныйПункт), ", " + НаселенныйПункт + " " + СокращениеНаселенныйПункт, "") +
				?(ЗначениеЗаполнено(Улица), ", " + Улица + " " + СокращениеУлица, "") +
				?(ЗначениеЗаполнено(СтруктураАдрес.Дом), ", " + СокращениеДом + " " + СтруктураАдрес.Дом, "") +
				?(ЗначениеЗаполнено(СтруктураАдрес.Корпус), ", " + СокращениеКорпус + " " + СтруктураАдрес.Корпус, "") +
				?(ЗначениеЗаполнено(СтруктураАдрес.Квартира), ", " + СокращениеКвартира + " " + СтруктураАдрес.Квартира, ""), 2));
		Иначе
			Адрес = "индекс        адрес " + ВРег(СтруктураАдрес.Представление);	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Адрес;
	
КонецФункции

/////////////////////////////////////////////////////////////////////
// Печать


// Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-1".
Функция ВывестиОписьАДВ6(МассивОбъектов, ОбъектыПечати,  ТипДокумента, Знач ИмяМакета = Неопределено) Экспорт
	
	// Получим ответственные лица организации и их должности 
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		ИмяМакета = "ПФ_MXL_ФормаАДВ_6_1"
	КонецЕсли;
	
	ДатаПостановления485п = РегистрыСведений.ДатыВступленияВСилуНА.ДатаВступленияВСилуНА("ПостановлениеПравленияПФРот27сентября2019Номер485п");
	
	ВыборкаДокументов = СформироватьЗапросДляОписиАДВ6(МассивОбъектов, ТипДокумента).Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ИнформацияОПачке = ВыборкаДокументов.Выбрать();
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		Пока ИнформацияОПачке.Следующий() Цикл
			
			ИспользоватьФорму2019 = ДатаПостановления485п <> Неопределено И ДатаПостановления485п <= ИнформацияОПачке.Дата И ИмяМакета = "ПФ_MXL_ФормаАДВ_6_1_2017";
			МакетОписи = УправлениеПечатью.МакетПечатнойФормы(?(ИспользоватьФорму2019,
				"ОбщийМакет.ПФ_MXL_ФормаАДВ_6_1_2019", "ОбщийМакет." + ИмяМакета));
			
			СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
		
			СекцияОпись.Параметры.РегНомерПФР						= ИнформацияОПачке.РегистрационныйНомерПФР;
			СекцияОпись.Параметры.ОКПО								= ИнформацияОПачке.КодПоОКПО;
			СекцияОпись.Параметры.ИНН								= ИнформацияОПачке.ИНН;
			СекцияОпись.Параметры.КПП								= ИнформацияОПачке.КПП;
			СекцияОпись.Параметры.Наименование						= ИнформацияОПачке.НаименованиеСокращенное;
			
			Если ТипДокумента = "АНКТ" Тогда
				СекцияОпись.Параметры.ДокументовАДВ1вПачке 			= ИнформацияОПачке.ДокументовВПачке;
			ИначеЕсли ТипДокумента = "ОБМН" Тогда
				СекцияОпись.Параметры.ДокументовАДВ2вПачке 			= ИнформацияОПачке.ДокументовВПачке;
			ИначеЕсли ТипДокумента = "ДУБЛ" Тогда
				СекцияОпись.Параметры.ДокументовАДВ3вПачке 			= ИнформацияОПачке.ДокументовВПачке;
			ИначеЕсли ТипДокумента = "СПВ_2" Тогда
				СекцияОпись.Параметры.ИныхДокументовВПачке 			= ИнформацияОПачке.ДокументовВПачке;	
				СекцияОпись.Параметры.ТипДокументов = "СПВ-2";
			КонецЕсли;
			
			СекцияОпись.Параметры.НомерПачкиРаботодателя 			= ИнформацияОПачке.НомерПачки;
			СекцияОпись.Параметры.РасшифровкаПодписиИсполнителя		= ИнформацияОПачке.Исполнитель;
			СекцияОпись.Параметры.ДолжностьРуководителя		 		= ИнформацияОПачке.Должность;
			СекцияОпись.Параметры.РасшифровкаПодписиРуководителя	= ИнформацияОПачке.Руководитель;
			ТабличныйДокумент.Вывести(СекцияОпись);
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументов.Документ);

			
		КонецЦикла;
	КонецЦикла;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ТабличныйДокумент;
КонецФункции	

// Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-3".
Функция ВывестиОписьАДВ6_3(ОбъектыПечати, ВыборкаПоШапкеДокумента, ТипДокумента) Экспорт
	ТабличныеДокументы = ТабличныеДокументыОписейАДВ6_3(ОбъектыПечати, ВыборкаПоШапкеДокумента, ТипДокумента); 	
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Для Каждого ТабличныйДокумент Из ТабличныеДокументы Цикл
		ДокументРезультат.Вывести(ТабличныйДокумент.Значение);	
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;	
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Возврат ДокументРезультат;
КонецФункции

Функция ТабличныеДокументыОписейАДВ6_3(ОбъектыПечати, ВыборкаПоШапкеДокумента, ТипДокумента, ДатаПодписи = Неопределено) Экспорт
	Результат = Новый Соответствие;
		
	Макет = ПолучитьОбщийМакет("ФормаАДВ_6_3");
	
	ОбластьОпись = Макет.ПолучитьОбласть("Опись");
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Результат.Вставить(ВыборкаПоШапкеДокумента.Ссылка, ТабличныйДокумент);
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьОпись.Параметры.РегНомерПФР = ВыборкаПоШапкеДокумента.РегНомерПФР;
		ОбластьОпись.Параметры.ИНН = ВыборкаПоШапкеДокумента.ИНН;
		ОбластьОпись.Параметры.КПП = ВыборкаПоШапкеДокумента.КПП;
		ОбластьОпись.Параметры.ОКПО = ВыборкаПоШапкеДокумента.КодПоОКПО;
		ОбластьОпись.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации; 
		
		
		ОбластьОпись.Параметры.КодКатегории = ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
		
		ОтчетныйПериод = ВыборкаПоШапкеДокумента.ОтчетныйПериод;
		
		Если Год(ОтчетныйПериод) >= 2011 Тогда
			ОбластьОпись.Параметры.ЭтоКварталОтчетногоГода   = Месяц(ОтчетныйПериод) = 1;
			ОбластьОпись.Параметры.ЭтоПолугодиеОтчетногоГода = Месяц(ОтчетныйПериод) = 4;
			ОбластьОпись.Параметры.Это9МесяцевОтчетногоГода  = Месяц(ОтчетныйПериод) = 7;
			ОбластьОпись.Параметры.ЭтоВесьОтчетныйГод        = Месяц(ОтчетныйПериод) = 10;
		Иначе
			ОбластьОпись.Параметры.ЭтоПолугодие2010 = Месяц(ОтчетныйПериод) = 1;
			ОбластьОпись.Параметры.Это2010год = Месяц(ОтчетныйПериод) = 7;
		КонецЕсли;	

		
		ОбластьОпись.Параметры.ОтчетныйГод = Формат(Год(ОтчетныйПериод), "ЧГ=");
		
		ОбластьОпись.Параметры.ЭтоИсходныйДокумент = ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
		ОбластьОпись.Параметры.ЭтоКорректирующийДокумент = ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ;
		ОбластьОпись.Параметры.ЭтоОтменяющийДокумент     = ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ;

		КорректируемыйПериод = ВыборкаПоШапкеДокумента.КорректируемыйПериод;
		
		Если ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда 
			Если КорректируемыйПериод >= '20110101' Тогда
				ОбластьОпись.Параметры.ЭтоКварталКорректируемогоГода   = Месяц(КорректируемыйПериод) = 1;
				ОбластьОпись.Параметры.ЭтоПолугодиеКорректируемогоГода = Месяц(КорректируемыйПериод) = 4;
				ОбластьОпись.Параметры.Это9МесяцевКорректируемогоГода  = Месяц(КорректируемыйПериод) = 7;
				ОбластьОпись.Параметры.ЭтоВесьКорректируемыйГод        = Месяц(КорректируемыйПериод) = 10;
			Иначе
				ОбластьОпись.Параметры.ЭтоПолугодиеКорректируемогоГода = Месяц(КорректируемыйПериод) = 1;
				ОбластьОпись.Параметры.ЭтоВесьКорректируемыйГод        = Месяц(КорректируемыйПериод) = 7;
			КонецЕсли;	
				
			ОбластьОпись.Параметры.КорректируемыйГод = Формат(Год(КорректируемыйПериод), "ЧГ=");
		КонецЕсли;	
		
		ОбластьОпись.Параметры.НомерПачкиРаботодателя = ВыборкаПоШапкеДокумента.НомерПачки;
		
		Если ТипДокумента = "СЗВ_6_1"  Тогда
			ОбластьОпись.Параметры.ДокументовВПачке = ВыборкаПоШапкеДокумента.Количество;
		ИначеЕсли ТипДокумента = "СПВ_1"  Тогда
			ОбластьОпись.Параметры.ИныхДокументовВПачке = ВыборкаПоШапкеДокумента.Количество;
			ОбластьОпись.Параметры.ТипИногоДокумента = "Сведения о начисленных, уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованного лица для установления трудовой пенсии";
		КонецЕсли; 
		
		ОбластьОпись.Параметры.НачисленоНакопительная = ВыборкаПоШапкеДокумента.НачисленоНакопительная;
		ОбластьОпись.Параметры.УплаченоНакопительная  = ВыборкаПоШапкеДокумента.УплаченоНакопительная;
		ОбластьОпись.Параметры.НачисленоСтраховая     = ВыборкаПоШапкеДокумента.НачисленоСтраховая;
		ОбластьОпись.Параметры.УплаченоСтраховая      = ВыборкаПоШапкеДокумента.УплаченоСтраховая;
		
		ОбластьОпись.Параметры.РуководительДолжность = ВыборкаПоШапкеДокумента.РуководительДолжность;
		ОбластьОпись.Параметры.Руководитель = ВыборкаПоШапкеДокумента.Руководитель;
		
		Если ЗначениеЗаполнено(ДатаПодписи) Тогда
			ОбластьОпись.Параметры.ДатаСоставленияОписи = ДатаВОтчет(ДатаПодписи);	
		Иначе							
			ОбластьОпись.Параметры.ДатаСоставленияОписи = ДатаВОтчет(ВыборкаПоШапкеДокумента.Дата);
		КонецЕсли;	

		ТабличныйДокумент.Вывести(ОбластьОпись);
		
		Если ОбъектыПечати <> Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоШапкеДокумента.Ссылка);
		КонецЕсли;	
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	КонецЦикла;	
		
	Возврат Результат;
	
КонецФункции	

Функция СформироватьЗапросДляОписиАДВ6(МассивОбъектов, ТипДокумента)
	
	Если ТипДокумента = "АНКТ" Тогда
		ИмяТаблицы = "ПачкаДокументовАДВ_1";
	ИначеЕсли ТипДокумента = "ОБМН" Тогда
		ИмяТаблицы = "ПачкаДокументовАДВ_2"; 
	ИначеЕсли ТипДокумента = "ДУБЛ" Тогда
		ИмяТаблицы = "ПачкаДокументовАДВ_3";
	ИначеЕсли ТипДокумента = "СПВ_2" Тогда
		ИмяТаблицы = "ПачкаДокументовСПВ_2";		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПачкаДокументовСотрудники.Ссылка.Организация КАК Организация,
	|	КОЛИЧЕСТВО(ПачкаДокументовСотрудники.НомерСтроки) КАК ДокументовВПачке,
	|	ПачкаДокументовСотрудники.Ссылка.НомерПачки КАК НомерПачки,
	|	ПачкаДокументовСотрудники.Ссылка.Дата КАК Дата,
	|	ПачкаДокументовСотрудники.Ссылка.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
	|	ПачкаДокументовСотрудники.Ссылка КАК Ссылка,
	|	ПачкаДокументовСотрудники.Ссылка.Руководитель КАК Руководитель,
	|	ПачкаДокументовСотрудники.Ссылка.Исполнитель КАК Исполнитель,
	|	ПачкаДокументовСотрудники.Ссылка.ДолжностьРуководителя.Наименование КАК Должность
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	ИсточникДанных КАК ПачкаДокументовСотрудники
	|ГДЕ
	|	ПачкаДокументовСотрудники.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПачкаДокументовСотрудники.Ссылка.Организация,
	|	ПачкаДокументовСотрудники.Ссылка.НомерПачки,
	|	ПачкаДокументовСотрудники.Ссылка,
	|	ПачкаДокументовСотрудники.Ссылка.Руководитель,
	|	ПачкаДокументовСотрудники.Ссылка.Исполнитель,
	|	ПачкаДокументовСотрудники.Ссылка.ДолжностьРуководителя.Наименование,
	|	ПачкаДокументовСотрудники.Ссылка.Дата";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИсточникДанных", "Документ." + ИмяТаблицы + ".Сотрудники");
	
	Если ТипДокумента = "СПВ_2" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПачкаДокументовСотрудники.Ссылка.Исполнитель", "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)");	
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	ИменаПолейОтветственныхЛиц.Добавить("Исполнитель");
	
	УстановитьПривилегированныйРежим(Истина);
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	УстановитьПривилегированныйРежим(Ложь);
	
	ОписаниеИсточникаДанных = ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ." + ИмяТаблицы;
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "ОкончаниеОтчетногоПериода";
	ОписаниеИсточникаДанных.СписокСсылок = МассивОбъектов;

	СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР,
	|	СведенияОбОрганизациях.КодПоОКПО,
	|	СведенияОбОрганизациях.ИНН,
	|	СведенияОбОрганизациях.КПП,
	|	СведенияОбОрганизациях.НаименованиеСокращенное,
	|	ДанныеОПачке.НомерПачки,
	|	ДанныеОПачке.ДокументовВПачке,
	|	ЕСТЬNULL(ФИОРуководителейПоследние.РасшифровкаПодписи, """") КАК Руководитель,
	|	ЕСТЬNULL(ФИОИсполнителейПоследние.РасшифровкаПодписи, """") КАК Исполнитель,
	|	ДанныеОПачке.Должность,
	|	ДанныеОПачке.Дата,
	|	ДанныеОПачке.Ссылка КАК Документ
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеОПачке
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ДанныеОПачке.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО ДанныеОПачке.Организация = СведенияОбОрганизациях.Организация
	|			И ДанныеОПачке.ОкончаниеОтчетногоПериода = СведенияОбОрганизациях.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОРуководителейПоследние
	|		ПО ДанныеОПачке.Ссылка = ФИОРуководителейПоследние.Ссылка
	|			И ДанныеОПачке.Руководитель = ФИОРуководителейПоследние.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИОИсполнителейПоследние
	|		ПО ДанныеОПачке.Ссылка = ФИОИсполнителейПоследние.Ссылка
	|			И ДанныеОПачке.Исполнитель = ФИОИсполнителейПоследние.ФизическоеЛицо
	|ИТОГИ ПО
	|	Документ";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ВывестиДанныеПоБуквенно(Данные, Раздел, ИмяПоказателя, КоличествоЯчеек, НачальнаяЯчейка = 1) Экспорт

	Для НомЯчейки = НачальнаяЯчейка По НачальнаяЯчейка + КоличествоЯчеек - 1 Цикл
		Раздел.Области[ИмяПоказателя + Формат(НомЯчейки,"ЧГ=0")].Текст = Сред(Данные, НомЯчейки - НачальнаяЯчейка + 1, 1);
	КонецЦикла;

КонецПроцедуры

Процедура ПроставитьНомерСтраницыВЯчейках(НумероватьСтраницы, НомерСтраницы, ОбластьКолонтитула) Экспорт

	Если НумероватьСтраницы Тогда
		ВывестиДанныеПоБуквенно(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Формат(НомерСтраницы,"ЧГ=0"), 6, "0", "Слева"), ОбластьКолонтитула, "НомСтр", 6);
	КонецЕсли;

КонецПроцедуры

Функция ПечатнаяФормаОДВ_1(МассивОбъектов, ОбъектыПечати, ИмяДокумента) Экспорт 
	
	ВыборкаПоШапкеДокумента = ЗапросПоШапкеДляПечатиОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();
	ВыборкаПоПоДаннымДосрочногоНазначенияПенсии = ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();
	ВыборкаПоДаннымНачисленныхУплаченныхВзносов = ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();
	ВыборкаПоДаннымРасшифровкиУплаченныхВзносов = ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(МассивОбъектов, ИмяДокумента).Выбрать();
	
	ЭтоПервыйДокументКоллекции = Истина;
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ФормаОДВ_1_2019");
		
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОДВ_1";
		ДокументРезультат.ПолеСлева = 0;
		ДокументРезультат.ПолеСправа = 0;
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		
		НачалоФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрокаПозиции = Макет.ПолучитьОбласть("СтрокаПозиции");
		ОбластьУплатаВзносовСтрока = Макет.ПолучитьОбласть("УплатаВзносовСтрока");
		ОбластьШапкаРаздела5 = Макет.ПолучитьОбласть("ШапкаРаздела5");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		Если ЭтоПервыйДокументКоллекции Тогда
			ЭтоПервыйДокументКоллекции = Ложь;	
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12);
		
		ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
		ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12);
		
		ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9);
		ВывестиДанныеПоБуквенно(Формат(Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод),"ЧГ=0"), ОбластьШапка, "Год", 4);
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
		ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
		ОбластьШапка.Параметры.КодОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.КодОтчетногоПериода(ВыборкаПоШапкеДокумента.ОтчетныйПериод, ВыборкаПоШапкеДокумента.ОкончаниеОтчетногоПериода);
		
		Если ИмяДокумента = "ОписьОДВ_1" Тогда 
			Если ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда 
				ОбластьШапка.Параметры.Корректирующая = Истина;
			Иначе 
				ОбластьШапка.Параметры.Отменяющая = Истина;
			КонецЕсли;
		Иначе 
			ОбластьШапка.Параметры.Исходная = Истина;
		КонецЕсли;
		
		Если ИмяДокумента = "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_Стаж = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		ИначеЕсли ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_ИСХ = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		ИначеЕсли ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда
			ОбластьШапка.Параметры.КоличествоЗастрахованныхЛицСЗВ_КОРР = ВыборкаПоШапкеДокумента.КоличествоЗастрахованныхЛиц;
		КонецЕсли;
		
		ЕстьДанныеНачисленныхУплаченныхВзносов = ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" 
			Или (ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" И ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_КОРР.Особая); 
		
		Если ЕстьДанныеНачисленныхУплаченныхВзносов Тогда 
			СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
			Если ВыборкаПоДаннымНачисленныхУплаченныхВзносов.НайтиСледующий(СтруктураПоиска) Тогда
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, ВыборкаПоДаннымНачисленныхУплаченныхВзносов);
			КонецЕсли;
		КонецЕсли;
		ТекущийЛист.Вывести(ОбластьШапка);
		
		Если ЕстьДанныеНачисленныхУплаченныхВзносов Тогда 
			Если ВыборкаПоДаннымРасшифровкиУплаченныхВзносов.НайтиСледующий(СтруктураПоиска) Тогда
				ВыборкаПоДаннымРасшифровкиУплаченныхВзносов.СледующийПоЗначениюПоля("Ссылка");
				Пока ВыборкаПоДаннымРасшифровкиУплаченныхВзносов.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьУплатаВзносовСтрока.Параметры, ВыборкаПоДаннымРасшифровкиУплаченныхВзносов);
					ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
				КонецЦикла;
			КонецЕсли;
		Иначе 
			ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
			ТекущийЛист.Вывести(ОбластьУплатаВзносовСтрока);
		КонецЕсли;
		
		ТекущийЛист.Вывести(ОбластьШапкаРаздела5);
		Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Количество() > 0 Тогда 

			СтруктураПоиска = Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка);
			Если ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.НайтиСледующий(СтруктураПоиска) Тогда
				ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.СледующийПоЗначениюПоля("Ссылка");
				Пока ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.Следующий() Цикл 
					ЗаполнитьЗначенияСвойств(ОбластьСтрокаПозиции.Параметры, ВыборкаПоПоДаннымДосрочногоНазначенияПенсии);
					Если ЗначениеЗаполнено(ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.ОсобыеУсловияТруда) Тогда 
						ОбластьСтрокаПозиции.Параметры.ОснованиеВыслугиЛетКод = ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.ОсобыеУсловияТрудаКод;
					ИначеЕсли ЗначениеЗаполнено(ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.ОснованиеДосрочногоНазначенияПенсии) Тогда 
						ОбластьСтрокаПозиции.Параметры.ОснованиеВыслугиЛетКод = ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.ОснованиеДосрочногоНазначенияПенсииКод;
					КонецЕсли;
					ВывестиОбластьОДВ_1(ОбластьСтрокаПозиции, ДокументРезультат, ТекущийЛист);
					// Вывод дополнительного основания выслуги лет
					Если ЗначениеЗаполнено(ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.ОсобыеУсловияТруда)
						И ЗначениеЗаполнено(ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.ОснованиеДосрочногоНазначенияПенсии) Тогда
						ОчиститьОбласть(ОбластьСтрокаПозиции);
						ОбластьСтрокаПозиции.Параметры.ОснованиеВыслугиЛетКод = ВыборкаПоПоДаннымДосрочногоНазначенияПенсии.ОснованиеДосрочногоНазначенияПенсииКод;
						ВывестиОбластьОДВ_1(ОбластьСтрокаПозиции, ДокументРезультат, ТекущийЛист);
					КонецЕсли;
				КонецЦикла;
				ОбластьПодвал.Параметры.КоличествоРабочихМест = ВыборкаПоШапкеДокумента.ВсегоРабочихМестДНП;
				ОбластьПодвал.Параметры.КоличествоРаботающих = ВыборкаПоШапкеДокумента.ВсегоРаботающихДНП;
			КонецЕсли;
		Иначе 
			ТекущийЛист.Вывести(ОбластьСтрокаПозиции);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
		ВывестиОбластьОДВ_1(ОбластьПодвал, ДокументРезультат, ТекущийЛист);
		
		ДокументРезультат.Вывести(ТекущийЛист);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоФормы, ОбъектыПечати, ВыборкаПоШапкеДокумента.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиОбластьОДВ_1(ВыводимаяОбласть, ДокументРезультат, ТекущийЛист)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = Новый ТабличныйДокумент;
		ТекущийЛист.ПолеСлева = 0;
		ТекущийЛист.ПолеСправа = 0;
		ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ОчиститьОбласть(ОбластьМакета)
	
	Для Счетчик = 0 По ОбластьМакета.Параметры.Количество() - 1 Цикл
		ОбластьМакета.Параметры[Счетчик] = ""
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапросПоШапкеДляПечатиОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ" + "." + ИмяДокумента;
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "Дата";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;

	СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);
	
	Если ИмяДокумента = "ОписьОДВ_1" Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	0 КАК Количество,
		|	ЗНАЧЕНИЕ(Документ.ОписьОДВ_1.ПустаяСсылка) КАК Ссылка
		|ПОМЕСТИТЬ ВТИтоги";
		Запрос.Выполнить();
	Иначе 
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Сотрудники.НомерСтроки) КАК Количество,
		|	Сотрудники.Ссылка
		|ПОМЕСТИТЬ ВТИтоги
		|ИЗ
		|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСсылок)
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.Ссылка";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеОрганизации,
	|	СведенияОбОрганизациях.ИНН КАК ИНН,
	|	СведенияОбОрганизациях.КПП КАК КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ГОД(ДанныеДокумента.ОтчетныйПериод) КАК Год,
	|	ДанныеДокумента.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ДанныеДокумента.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
	|	ДанныеДокумента.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ДанныеДокумента.ОкончаниеКорректируемогоПериода КАК ОкончаниеКорректируемогоПериода,
	|	ДанныеДокумента.ТипСведений КАК ТипСведений,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ДанныеДокумента.ДолжностьРуководителя.Наименование КАК ДолжностьРуководителя,
	|	ДанныеДокумента.Дата КАК Дата,
	|	СведенияОбОрганизациях.КодПоОКПО КАК КодПоОКПО,
	|	СведенияОбОрганизациях.ОГРН КАК ОГРН,
	|	СведенияОбОрганизациях.НаименованиеПолное КАК НаименованиеПолное,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ИТОГИ.Количество КАК КоличествоЗастрахованныхЛиц,
	|	ДанныеДокумента.НачисленыВзносыНаОПС КАК НачисленыВзносыНаОПС,
	|	ДанныеДокумента.НачисленыВзносыПоДТ КАК НачисленыВзносыПоДТ,
	|	ДанныеДокумента.ВсегоРаботающихДНП КАК ВсегоРаботающихДНП,
	|	ДанныеДокумента.ВсегоРабочихМестДНП КАК ВсегоРабочихМестДНП,
	|	ДанныеДокумента.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО ДанныеДокумента.Организация = СведенияОбОрганизациях.Организация
	|			И ДанныеДокумента.Дата = СведенияОбОрганизациях.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтоги КАК ИТОГИ
	|		ПО ДанныеДокумента.Ссылка = ИТОГИ.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Руководитель";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
	
	Если ИмяДокумента <> "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.НачисленыВзносыНаОПС", "ЛОЖЬ");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.НачисленыВзносыПоДТ", "ЛОЖЬ");
	КонецЕсли;
	
	Если ИмяДокумента <> "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.КорректируемыйПериод", "ДАТАВРЕМЯ(1, 1, 1)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ОкончаниеКорректируемогоПериода", "ДАТАВРЕМЯ(1, 1, 1)");
	КонецЕсли;
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ТипСведений", "NULL");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.ИНН", "ДанныеДокумента.ИНН");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.КПП", "ДанныеДокумента.КПП");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОбОрганизациях.РегистрационныйНомерПФР", "ДанныеДокумента.РегистрационныйНомерПФР");
	КонецЕсли;
	
	Если ИмяДокумента = "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ВсегоРаботающихДНП", "0");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокумента.ВсегоРабочихМестДНП", "0");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	ДанныеДокументов.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	ДанныеДокументов.НаименованиеОрганизации КАК НаименованиеОрганизации,
	|	ДанныеДокументов.Организация КАК Организация,
	|	ДанныеДокументов.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	ДанныеДокументов.ИНН КАК ИНН,
	|	ДанныеДокументов.КПП КАК КПП,
	|	ДанныеДокументов.ОГРН КАК ОГРН,
	|	ДанныеДокументов.КодПоОКПО КАК ОКПО,
	|	ДанныеДокументов.НаименованиеПолное КАК НаименованиеПолное,
	|	ДанныеДокументов.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	ДанныеДокументов.Год КАК Год,
	|	ДанныеДокументов.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ДанныеДокументов.ОкончаниеОтчетногоПериода КАК ОкончаниеОтчетногоПериода,
	|	ДанныеДокументов.КорректируемыйПериод КАК КорректируемыйПериод,
	|	ДанныеДокументов.ОкончаниеКорректируемогоПериода КАК ОкончаниеКорректируемогоПериода,
	|	ДанныеДокументов.ТипСведений КАК ТипСведений,
	|	ЕСТЬNULL(ВТФИОПоследние.ФИОПолные, """") КАК Руководитель,
	|	ЕСТЬNULL(ВТФИОПоследние.Фамилия, """") КАК ФамилияРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Имя, """") КАК ИмяРуководителя,
	|	ЕСТЬNULL(ВТФИОПоследние.Отчество, """") КАК ОтчествоРуководителя,
	|	ДанныеДокументов.ДолжностьРуководителя КАК ДолжностьРуководителя,
	|	ДанныеДокументов.Дата КАК Дата,
	|	ДанныеДокументов.КоличествоЗастрахованныхЛиц КАК КоличествоЗастрахованныхЛиц,
	|	ДанныеДокументов.НачисленыВзносыНаОПС КАК НачисленыВзносыНаОПС,
	|	ДанныеДокументов.НачисленыВзносыПоДТ КАК НачисленыВзносыПоДТ,
	|	ДанныеДокументов.ВсегоРаботающихДНП КАК ВсегоРаботающихДНП,
	|	ДанныеДокументов.ВсегоРабочихМестДНП КАК ВсегоРабочихМестДНП,
	|	ДанныеДокументов.ИмяФайлаДляПФР КАК ИмяФайлаДляПФР
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ВТФИОПоследние
	|		ПО ДанныеДокументов.Ссылка = ВТФИОПоследние.Ссылка
	|			И ДанныеДокументов.Руководитель = ВТФИОПоследние.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипСведений,
	|	Ссылка";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ЗапросПоДаннымДосрочногоНазначенияПенсииОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДосрочноеНазначениеПенсии.Ссылка КАК Ссылка,
	               |	ДосрочноеНазначениеПенсии.НомерСтроки КАК НомерСтроки,
	               |	ДосрочноеНазначениеПенсии.Подразделение КАК Подразделение,
	               |	ДосрочноеНазначениеПенсии.Подразделение.Наименование КАК НаименованиеПодразделения,
	               |	ДосрочноеНазначениеПенсии.Должность КАК Должность,
	               |	ДосрочноеНазначениеПенсии.Должность.Наименование КАК НаименованиеДолжности,
	               |	ДосрочноеНазначениеПенсии.КоличествоРабочихМест КАК КоличествоРабочихМест,
	               |	ДосрочноеНазначениеПенсии.КоличествоРаботающих КАК КоличествоРаботающих,
	               |	ДосрочноеНазначениеПенсии.ХарактерВыполняемыхРабот КАК ХарактерВыполняемыхРабот,
	               |	ДосрочноеНазначениеПенсии.ПервичныеДокументы КАК ПервичныеДокументы,
	               |	ДосрочноеНазначениеПенсии.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	               |	ДосрочноеНазначениеПенсии.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
	               |	ДосрочноеНазначениеПенсии.ОснованиеДосрочногоНазначенияПенсии КАК ОснованиеДосрочногоНазначенияПенсии,
	               |	ДосрочноеНазначениеПенсии.ОснованиеДосрочногоНазначенияПенсии.Код КАК ОснованиеДосрочногоНазначенияПенсииКод,
	               |	ДосрочноеНазначениеПенсии.КодПозицииСписка КАК КодПозицииСписка,
	               |	ДосрочноеНазначениеПенсии.КодПозицииСписка.Код КАК КодПозицииСпискаКод
	               |ИЗ
	               |	Документ.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.ДосрочноеНазначениеПенсии КАК ДосрочноеНазначениеПенсии
	               |ГДЕ
	               |	ДосрочноеНазначениеПенсии.Ссылка В(&МассивСсылок)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	НомерСтроки";
	
	Если ИмяДокумента <> "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяДокумента);
	КонецЕсли;
	
	Возврат Запрос.Выполнить();			   
	
КонецФункции

Функция ЗапросПоДаннымНачисленныхУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеОКорректировкеСведений.Ссылка
	               |ПОМЕСТИТЬ ВТСписокДокументов
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР КАК ДанныеОКорректировкеСведений
	               |ГДЕ
	               |	ДанныеОКорректировкеСведений.Ссылка В(&МассивСсылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеНачисленныхУплаченныхВзносов.Ссылка,
	               |	ДанныеНачисленныхУплаченныхВзносов.ВидСтраховыхВзносов,
	               |	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаНачалоПериода,
	               |	ДанныеНачисленныхУплаченныхВзносов.Начислено,
	               |	ДанныеНачисленныхУплаченныхВзносов.Уплачено,
	               |	ДанныеНачисленныхУплаченныхВзносов.ЗадолженностьНаКонецПериода
	               |ПОМЕСТИТЬ ВТДанныеОВзносах
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.НачисленныеУплаченныеВзносы КАК ДанныеНачисленныхУплаченныхВзносов
	               |ГДЕ
	               |	ДанныеНачисленныхУплаченныхВзносов.Ссылка В(&МассивСсылок)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокДокументов.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА Страховая.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьСтраховая,
	               |	ЕСТЬNULL(Страховая.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоСтраховая,
	               |	ЕСТЬNULL(Страховая.Начислено, 0) КАК НачисленоСтраховая,
	               |	ЕСТЬNULL(Страховая.Уплачено, 0) КАК УплаченоСтраховая,
	               |	ЕСТЬNULL(Страховая.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецСтраховая,
	               |	ВЫБОР
	               |		КОГДА Накопительная.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьНакопительная,
	               |	ЕСТЬNULL(Накопительная.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоНакопительная,
	               |	ЕСТЬNULL(Накопительная.Начислено, 0) КАК НачисленоНакопительная,
	               |	ЕСТЬNULL(Накопительная.Уплачено, 0) КАК УплаченоНакопительная,
	               |	ЕСТЬNULL(Накопительная.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецНакопительная,
	               |	ВЫБОР
	               |		КОГДА ТарифСВ.Ссылка ЕСТЬ NULL
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаНачалоПериода, 0) КАК ЗадолженностьНаНачалоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.Начислено, 0) КАК НачисленоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.Уплачено, 0) КАК УплаченоТарифСВ,
	               |	ЕСТЬNULL(ТарифСВ.ЗадолженностьНаКонецПериода, 0) КАК ЗадолженностьНаКонецТарифСВ
	               |ИЗ
	               |	ВТСписокДокументов КАК СписокДокументов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Страховая
	               |		ПО СписокДокументов.Ссылка = Страховая.Ссылка
	               |			И (Страховая.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаСтраховуюПенсию))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК Накопительная
	               |		ПО СписокДокументов.Ссылка = Накопительная.Ссылка
	               |			И (Накопительная.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.НаНакопительнуюПенсию))
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОВзносах КАК ТарифСВ
	               |		ПО СписокДокументов.Ссылка = ТарифСВ.Ссылка
	               |			И (ТарифСВ.ВидСтраховыхВзносов = ЗНАЧЕНИЕ(Перечисление.ВидыСтраховыхВзносовПФР.ПоТарифуСтраховыхВзносов))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка";
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;			   
	
КонецФункции

Функция ЗапросПоДаннымРасшифровкиУплаченныхВзносовОДВ_1(МассивСсылок, ИмяДокумента) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	УплаченныеВзносыРасшифровка.Ссылка КАК Ссылка,
	               |	УплаченныеВзносыРасшифровка.Год КАК Год,
	               |	УплаченныеВзносыРасшифровка.НаСтраховуюПенсию,
	               |	УплаченныеВзносыРасшифровка.НаНакопительнуюПенсию,
	               |	УплаченныеВзносыРасшифровка.ПоТарифуСтраховыхВзносов
	               |ИЗ
	               |	Документ.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР.УплаченныеВзносыРасшифровка КАК УплаченныеВзносыРасшифровка
	               |ГДЕ
	               |	УплаченныеВзносыРасшифровка.Ссылка В(&МассивСсылок)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Ссылка,
	               |	Год";
	
	Если ИмяДокумента = "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ" Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР", "СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ");
	КонецЕсли;
				   
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;			   
	
КонецФункции

Функция ОрганизацияЗарегистрированаВКрыму(КПП, РегистрацияВНалоговомОргане) Экспорт
	
	Если ЗначениеЗаполнено(КПП) Тогда
		Возврат ?(Лев(КПП, 2) = "91" Или Лев(КПП, 2) = "92", Истина, Ложь);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");
	Если ЗначениеЗаполнено(КодИФНС) И (Лев(КодИФНС, 2) = "91" Или Лев(КодИФНС, 2) = "92") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ СВЕДЕНИЙ ИЗ ФАЙЛОВ

// Получает список объектов XDTO, если список имеет место быть возвращается
// объект СписокXDTO, если узел только один создаем массив и добавляем туда 
// найденное значение узла.
//
// Параметры
//  XDTO  		- ОбъектXDTO - <описание параметра>
//  ИмяСписка  	- Строка - с именем "списочного" параметра.
//
// Возвращаемое значение:
//   СписокXDTO   - если действительно таких узлов в списке более 1
//   Массив		  - с ОбъектXDTO, если узел только один.
//
Функция СписокXDTOИзДерева(XDTO, ИмяСписка) Экспорт

	Попытка
		
		Возврат XDTO.ПолучитьСписок(ИмяСписка);
	
	Исключение
	
		МассивСвойств = Новый Массив;
		Значение = ОбъектXDTOИзДерева(XDTO, ИмяСписка);
		Если Значение <> Неопределено Тогда
			МассивСвойств.Добавить(Значение);
		КонецЕсли;

		Возврат МассивСвойств;
		
	КонецПопытки;
	
КонецФункции

// Получает строковое представление свойства по указанному пути
//
// Параметры
// 	XDTO  - ОбъектXDTO - Объект в котором проверяется наличие свойства
// 	ИмяСвойства - Строка - путь к свойству в иерархии объекта.
//
// Возвращаемое значение:
// 	Строка - значение свойства
//
Функция ЗначениеXDTOИзДерева(XDTO, ИмяСвойства) Экспорт
	
	Если Не СвойствоСуществуетXDTO(XDTO, ИмяСвойства) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 

	ВозвращаемоеЗначение =  XDTO.Получить(ИмяСвойства);
	
	// Вот здесь непонятно, если значение свойства не задано
	// по моей логике должен возвращать пустую строку
	// возвращает пустой ОбъектXDTO.
	Если ТипЗнч(ВозвращаемоеЗначение) = Тип("ОбъектXDTO") Тогда
		
		Если ВозвращаемоеЗначение.Свойства().Количество() = 0 Тогда
		
			Возврат "";
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат ВозвращаемоеЗначение;

КонецФункции

// Получает объект XDTO расположенный по указанному пути
//
// Параметры
// 	XDTO  - ОбъектXDTO - Объект в котором проверяется наличие свойства
// 	ИмяСвойства - Строка - путь к свойству в иерархии объекта.
//
// Возвращаемое значение:
// 	Неопределено - если пути не существует
// 	ОбъектXDTO - найденный объект.
//
Функция ОбъектXDTOИзДерева(XDTO, ИмяСвойства) Экспорт
	
	Если Не СвойствоСуществуетXDTO(XDTO, ИмяСвойства) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 

	Возврат XDTO.ПолучитьXDTO(ИмяСвойства);

КонецФункции

Функция СвойствоСуществуетXDTO(Дерево, Знач ИмяСвойства)

	ПозицияРазделителя = СтрНайти(ИмяСвойства, "/");
	
	Если ПозицияРазделителя = 0 Тогда
	
		ТекущееИмяСвойство = ИмяСвойства;
		
		ИмяСвойства = "";
	
	Иначе
	
		ТекущееИмяСвойство = Лев(ИмяСвойства, ПозицияРазделителя - 1);
		
		ИмяСвойства = Сред(ИмяСвойства, ПозицияРазделителя + 1);
	
	КонецЕсли; 
	
	ТекущееСвойство = Дерево.Свойства().Получить(ТекущееИмяСвойство);
	
	Если ТекущееСвойство = Неопределено Тогда
	
		Возврат Ложь;
		
	ИначеЕсли СтрДлина(ИмяСвойства) = 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат СвойствоСуществуетXDTO(Дерево.ПолучитьXDTO(ТекущееСвойство), ИмяСвойства);

КонецФункции 

// Проверяет данные на соответствие формату СЗВ-6-1,2
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Булево   - Истина - данные являются сведениями СЗВ-6, Ложь - в противном случае.
//
Функция ЭтоДокументСЗВ_6(ОписаниеДокумента) Экспорт

	Возврат СписокXDTOИзДерева(ОписаниеДокумента, "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ").Количество() > 0;

КонецФункции

// Проверяет данные на соответствие формату СЗВ-6-4
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Булево   - Истина - данные являются сведениями СЗВ-6, Ложь - в противном случае.
//
Функция ЭтоДокументСЗВ_6_4(ОписаниеДокумента) Экспорт

	Возврат СписокXDTOИзДерева(ОписаниеДокумента, "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ").Количество() > 0;

КонецФункции 

// Проверяет данные на соответствие формату раздела 6 РСВ-1
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Булево   - Истина - данные являются сведениями СЗВ-6, Ложь - в противном случае.
//
Функция ЭтоПачкаРаздела6РСВ1(ОписаниеДокумента) Экспорт

	Возврат СписокXDTOИзДерева(ОписаниеДокумента, "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ").Количество() > 0;

КонецФункции 

Функция ИмяСпискаЗастрахованныхЛицПоТипуФормы(ТипФормы) Экспорт

	ИмяСписка = "";
	
	Если ТипФормы = "СЗВ_6" Тогда
		ИмяСписка = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
	ИначеЕсли ТипФормы = "СЗВ_6_4" Тогда
		ИмяСписка = "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
	ИначеЕсли ТипФормы = "ПАЧКА_РАЗДЕЛОВ6РСВ1" Тогда
		ИмяСписка = "СВЕДЕНИЯ_О_СУММЕ_ВЫПЛАТ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";	
	КонецЕсли;
	
	Возврат ИмяСписка;

КонецФункции 

Функция ДеревоСведенийИзВременногоХранилища(АдресВХранилище) Экспорт

	ФайлСведений = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлСведений.Записать(ИмяВременногоФайла);
	
	Отказ = Ложь;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ДеревоXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если Не Отказ Тогда
		
		Попытка
			ВерсияФормата = ДеревоXML.Получить("/ЗаголовокФайла/ВерсияФормата");
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли; 
	
	Отказ = Отказ Или ВерсияФормата <> "07.00";
			
	Если Отказ Тогда
		ДеревоСведений = Неопределено;
	Иначе	
		ДеревоСведений = ДеревоXML.ПолучитьXDTO("/ПачкаВходящихДокументов");
	КонецЕсли; 
	
	УдалитьФайлы(ИмяВременногоФайла);
		
	Возврат ДеревоСведений;

КонецФункции

Функция СтраховыеНомераФизическихЛиц(МассивЗастрахованных) Экспорт

	МассивФизическихЛицБезСтраховыхНомеров = Новый Массив;	
	МассивСтраховыхНомеров = Новый Массив;	
	Для каждого СтрокаЗастрахованного Из МассивЗастрахованных Цикл
		СтраховойНомер = ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "СтраховойНомер");
		Если Не ПустаяСтрока(СтраховойНомер) Тогда
			Если МассивСтраховыхНомеров.Найти(СтраховойНомер) = Неопределено Тогда
				МассивСтраховыхНомеров.Добавить(СтраховойНомер);
			КонецЕсли;
		Иначе
			Фамилия 	= ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "ФИО/Фамилия");
			Фамилия     = Лев(Фамилия,1) + НРег(Сред(Фамилия,2));
			Имя 		= ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "ФИО/Имя");
			Имя 		= Лев(Имя,1) + НРег(Сред(Имя,2));
			Отчество 	= ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "ФИО/Отчество");
			Отчество 	= Лев(Отчество,1) + НРег(Сред(Отчество,2));
			ФИО = Фамилия + " " + Имя + " " +Отчество;
			Если МассивФизическихЛицБезСтраховыхНомеров.Найти(ФИО) = Неопределено Тогда
				МассивФизическихЛицБезСтраховыхНомеров.Добавить(ФИО);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	СтраховыеНомераФизическихЛиц = Новый Соответствие; 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.СтраховойНомерПФР
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.СтраховойНомерПФР В(&СтраховойНомерПФР)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ФИОФизическихЛиц.ФизическоеЛицо,
	|	ФИОФизическихЛиц.Фамилия + "" "" + ФИОФизическихЛиц.Имя + "" "" + ФИОФизическихЛиц.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|ГДЕ
	|	ФИОФизическихЛиц.Фамилия + "" "" + ФИОФизическихЛиц.Имя + "" "" + ФИОФизическихЛиц.Отчество В (&ФИО)
	|	И ФИОФизическихЛиц.ФизическоеЛицо.СтраховойНомерПФР = """"";
	Запрос.УстановитьПараметр("СтраховойНомерПФР", МассивСтраховыхНомеров);
	Запрос.УстановитьПараметр("ФИО", МассивФизическихЛицБезСтраховыхНомеров);
	Выборка =Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
		СтраховыеНомераФизическихЛиц[Выборка.СтраховойНомерПФР] = Выборка.Ссылка
	КонецЦикла;
	
	Возврат СтраховыеНомераФизическихЛиц;

КонецФункции 

Процедура ЗаполнитьДанныеФизическогоЛицаИзЗначенияXDTO(ДанныеФизическогоЛица, ЗначениеXDTO, СтраховыеНомераФизическихЛиц) Экспорт

	Фамилия 	= ЗначениеXDTOИзДерева(ЗначениеXDTO, "ФИО/Фамилия");
	Фамилия     = Лев(Фамилия,1) + НРег(Сред(Фамилия,2));
	
	Имя 		= ЗначениеXDTOИзДерева(ЗначениеXDTO, "ФИО/Имя");
	Имя 		= Лев(Имя,1) + НРег(Сред(Имя,2));
	
	Отчество 	= ЗначениеXDTOИзДерева(ЗначениеXDTO, "ФИО/Отчество");
	Отчество 	= Лев(Отчество,1) + НРег(Сред(Отчество,2));
	
	СтраховойНомерПФР = ЗначениеXDTOИзДерева(ЗначениеXDTO, "СтраховойНомер");
	
	Если ЗначениеЗаполнено(СтраховойНомерПФР) Тогда
		// Пробуем найти ФизЛицо по страховому номеру ПФР
		ФизическоеЛицо = СтраховыеНомераФизическихЛиц[СтраховойНомерПФР];
	Иначе
		// Пробуем найти ФизЛицо по страховому номеру ПФР
		ФизическоеЛицо = СтраховыеНомераФизическихЛиц[Фамилия + " " + Имя + " " +Отчество];
	КонецЕсли;
	
	ДанныеФизическогоЛица.ФизическоеЛицо = ФизическоеЛицо;
	ДанныеФизическогоЛица.Фамилия  = Фамилия;
	ДанныеФизическогоЛица.Имя	   = Имя;
	ДанныеФизическогоЛица.Отчество = Отчество;
	ДанныеФизическогоЛица.СтраховойНомерПФР = СтраховойНомерПФР;
	
КонецПроцедуры

// Создает элемент справочника Физические лица
//
// Параметры
//  Фамилия  			- Строка
//  Имя					- Строка
//  Отчество			- Строка
//  СтраховойНомерПФР	- Строка
//  ПериодДанных		- Дата - на которую регистрируются ФИО.
//
// Возвращаемое значение:
//   Справочник.Физлица - Ссылка на вновь созданный элемент.
//
Функция НовоеЗастрахованноеЛицо(ДанныеФизическогоЛица, ПериодДанных = Неопределено) Экспорт

	ФИО = Новый Структура("Фамилия, Имя, Отчество");
	ЗаполнитьЗначенияСвойств(ФИО, ДанныеФизическогоЛица);
	
	ФизическоеЛицоОбъект = КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица, ПериодДанных);
	Возврат ФизическоеЛицоОбъект.Ссылка;

КонецФункции

// получает строку адреса, разделенную запятыми
//
// Параметры
//  АдресXDTO  - ОбъектXDTO - содержащий адрес в формате ПФР.
//
// Возвращаемое значение:
//   Строка   - строка адреса
//
Функция СтрокаАдресаПоXDTO(АдресXDTO) Экспорт

	Если АдресXDTO = Неопределено Тогда
	
		Возврат "";
	
	КонецЕсли; 
	
	СтруктураАдреса = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Индекс = ЗначениеXDTOИзДерева(АдресXDTO,"Индекс");
	
	Если Не ПустаяСтрока(Индекс) Тогда
		СтруктураАдреса.Индекс = Индекс;
	КонецЕсли;
	
	Регион = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Регион/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Регион/Сокращение"); 
	
	Если Не ПустаяСтрока(Регион) Тогда
		СтруктураАдреса.Регион = Регион;
	КонецЕсли;

	Район = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Район/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Район/Сокращение");
	
	Если Не ПустаяСтрока(Район) Тогда
		СтруктураАдреса.Район = Район;
	КонецЕсли;
	
	Город = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Город/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Город/Сокращение");
	
	Если Не ПустаяСтрока(Город) Тогда
		СтруктураАдреса.Город = Город;
	КонецЕсли;
	
	НаселенныйПункт = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/НаселенныйПункт/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/НаселенныйПункт/Сокращение");
	
	Если Не ПустаяСтрока(НаселенныйПункт) Тогда
		СтруктураАдреса.НаселенныйПункт = НаселенныйПункт;
	КонецЕсли;
	
	Улица = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Улица/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Улица/Сокращение");
	
	Если Не ПустаяСтрока(Улица) Тогда
		СтруктураАдреса.Улица = Улица;
	КонецЕсли;
	
	Дом = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Дом/Номер");
	
	Если Не ПустаяСтрока(Дом) Тогда
		СтруктураАдреса.Дом = Дом;
		СтруктураАдреса.ТипДома = "Дом";
	КонецЕсли;
	
	Корпус = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Корпус/Номер");
	
	Если Не ПустаяСтрока(Корпус) Тогда
		СтруктураАдреса.Корпус = Корпус;
		СтруктураАдреса.ТипКорпуса = "Корпус";
	КонецЕсли;
	
	Квартира = "" + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Квартира/Номер");
	
	Если Не ПустаяСтрока(Квартира) Тогда
		СтруктураАдреса.Квартира = Квартира;
		СтруктураАдреса.ТипКвартиры = "Квартира";
	КонецЕсли;

	Представление = "";
	УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Представление);
	СтруктураАдреса.Вставить("Представление", Представление);
	
	Возврат СтруктураАдреса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ, ВЗЯТО ИЗ МОДУЛЯ "Общего назначения. ЗУП 2.5"

////////////////////////////////////////////////////////////////////////////////
// Работа с типами

// Предназначена для получения имени элемента перечисления по значению.
//
// Параметры:
//	Элемент перечисления.
//
// Возвращаемое значение:
//	Строка - имя элемента перечисления в метаданных.
//
Функция ПолучитьИмяЭлементаПеречисленияПоЗначению(ЗначениеПеречисления) Экспорт
	
	ИмяЭлемента = Строка(ЗначениеПеречисления);
	Для каждого ЭлементПеречисления Из Метаданные.Перечисления[ЗначениеПеречисления.Метаданные().Имя].ЗначенияПеречисления Цикл
		Если ЭлементПеречисления.Синоним = Строка(ЗначениеПеречисления) Тогда
			ИмяЭлемента = ЭлементПеречисления.Имя;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат ИмяЭлемента;
	
КонецФункции

Функция ПроверитьРегистрационныйНомерПФР(РегистрационныйНомерПФР, Отказ = Ложь) Экспорт 
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерПФР) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(РегистрационныйНомерПФР)) <> 14 Тогда
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(СокрЛП(РегистрационныйНомерПФР), 1, 3))
		Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(СокрЛП(РегистрационныйНомерПФР), 5, 3))
		Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Сред(СокрЛП(РегистрационныйНомерПФР), 9)) Тогда 
		Отказ = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМ ДОКУМЕНТОВ ПЕРС. УЧЕТА

Процедура СформироватьФайл(Форма) Экспорт
	НаличиеФайла = Форма.Объект.ФайлСформирован;
	СтруктураПараметровЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись);	
	Форма.Объект.ФайлСформирован = Истина;
	Форма.Объект.ФайлСформирован = Форма.Записать(СтруктураПараметровЗаписи) Или НаличиеФайла;
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////
//ДОКУМЕНТА АДВ23

Процедура ДокументыАДВЗаполнитьТекущиеДанныеФизическихЛиц(Объект) Экспорт
	Если Объект.Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	МенеджерВременныхТаблиц = ДокументыАДВСформироватьВТССотрудниками(Объект);	
	
	ТекущиеДанныеФизЛиц = ПолучитьТекущиеДанныеФизическихЛицДокумента(Объект.Дата, МенеджерВременныхТаблиц).Выбрать();	
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	Пока ТекущиеДанныеФизЛиц.Следующий() Цикл
		СтруктураПоиска.НомерСтроки = ТекущиеДанныеФизЛиц.НомерСтроки;
		
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда 
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекущиеДанныеФизЛиц);
			НайденныеСтроки[0].ДанныеФизЛицаМестоРожденияПредставление = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(ТекущиеДанныеФизЛиц.ДанныеФизЛицаМестоРождения);
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Функция ДокументыАДВСформироватьВТССотрудниками(Объект) Экспорт 
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудники", Объект.Сотрудники.Выгрузить());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудники.НомерСтроки,
	|	ТаблицаСотрудники.ДатаПолученияСвидетельства,
	|	ТаблицаСотрудники.СтраховойНомерПФРВСвидетельстве,
	|	ТаблицаСотрудники.Сотрудник КАК ФизическоеЛицо,
	|	&Организация КАК Организация,
	|	&Ссылка КАК ДокументСсылка,
	|	ВЫБОР
	|		КОГДА ТаблицаСотрудники.ДатаПолученияСвидетельства = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &Дата
	|		ИНАЧЕ ТаблицаСотрудники.ДатаПолученияСвидетельства
	|	КОНЕЦ КАК УточненнаяДатаПолученияСвидетельства,
	|	ВЫБОР
	|		КОГДА ТаблицаСотрудники.ДатаПолученияСвидетельства = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА &Дата
	|		ИНАЧЕ ТаблицаСотрудники.ДатаПолученияСвидетельства
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ВТСписокФизлицДокумента
	|ИЗ
	|	&ТаблицаСотрудники КАК ТаблицаСотрудники";
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////
// Проверка персональных данных физических лиц

Функция ПолучитьСтруктуруПроверяемыхДанных() Экспорт 
	Возврат Новый Структура("СтраховойНомерПФР, Фамилия, Имя");	
КонецФункции	

Процедура ДокументыАДВДополнитьСтруктуруПроверяемыхДанных(СтруктураПроверяемыхДанных) Экспорт
	СтруктураПроверяемыхДанных.Вставить("Пол");
	СтруктураПроверяемыхДанных.Вставить("ДатаРождения");
	СтруктураПроверяемыхДанных.Вставить("МестоРождения");
	СтруктураПроверяемыхДанных.Вставить("АдресРегистрации");
	СтруктураПроверяемыхДанных.Вставить("АдресФактический");
	СтруктураПроверяемыхДанных.Вставить("Гражданство");	
КонецПроцедуры	

Функция ДокументыСЗВПолучитьСтруктуруПроверяемыхДанных() Экспорт
	СтруктураПроверяемыхДанных = ПолучитьСтруктуруПроверяемыхДанных();
	
	Возврат СтруктураПроверяемыхДанных;
	
КонецФункции	

Функция ПолучитьПредставленияПроверяемыхРеквизитов() Экспорт
	ПредставленияПроверяемыхРеквизитов = Новый Структура;
	
	ПредставленияПроверяемыхРеквизитов.Вставить("СтраховойНомерПФР", НСтр("ru = 'не заполнен СНИЛС (страховой номер ПФР)'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ФамилияВСвидетельстве", НСтр("ru = 'не указана фамилия в свидетельстве'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ИмяВСвидетельстве", НСтр("ru = 'не указано имя в свидетельстве'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ПолВСвидетельстве",   НСтр("ru = 'не указан пол в свидетельстве'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ДатаРожденияВСвидетельстве",   НСтр("ru = 'не указана дата рождения в свидетельстве'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("МестоРожденияВСвидетельстве",   НСтр("ru = 'не указано место рождения в свидетельстве'"));	
	ПредставленияПроверяемыхРеквизитов.Вставить("Фамилия", НСтр("ru = 'не указана фамилия'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("Имя", НСтр("ru = 'не указано имя'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("Пол",   НСтр("ru = 'не указан пол'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("МестоРождения",   НСтр("ru = 'не указано место рождения'"));	
	ПредставленияПроверяемыхРеквизитов.Вставить("СтраховойНомерПФРВСвидетельстве",   НСтр("ru = 'не заполнен СНИЛС (страховой номер ПФР) в свидетельстве'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ДатаРождения",   НСтр("ru = 'не заполнена дата рождения'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("АдресРегистрации",  НСтр("ru = 'не заполнен адрес регистрации'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("АдресФактический", НСтр("ru = 'не заполнен адрес фактический'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("АдресДляИнформирования", НСтр("ru = 'не заполнен адрес для информирования'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ВидДокумента", НСтр("ru = 'не указан вид документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("СерияДокумента", НСтр("ru = 'не заполнена серия документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("НомерДокумента", НСтр("ru = 'не заполнен номер документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("ДатаВыдачи", НСтр("ru = 'не заполнена дата выдачи документа'"));
	ПредставленияПроверяемыхРеквизитов.Вставить("КемВыдан", НСтр("ru = 'не указано кем выдан документ'"));
	
	Возврат ПредставленияПроверяемыхРеквизитов;
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовФормеОбъекта() Экспорт
	СоответствиеРеквизитовПутиВФормеОбъекта = Новый Структура;
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("СтраховойНомерПФР", "СтраховойНомерПФР");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Фамилия", "Наименование");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Имя", "Наименование");

	Возврат СоответствиеРеквизитовПутиВФормеОбъекта;
КонецФункции

Процедура ДокументыАДВДополнитьСоответствиеРеквизитовФормеОбъекта(СоответствиеРеквизитовПутиВФормеОбъекта) Экспорт
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Пол", "Пол");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ДатаРождения", "ДатаРождения");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("МестоРождения", "МестоРождения");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("АдресРегистрации", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("АдресФактический", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ВидДокумента", "ВидДокумента");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("СерияДокумента", "Серия");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("НомерДокумента", "Номер");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ДатаВыдачи", "ДатаВыдачи");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("КемВыдан", "КемВыдан");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Гражданство", "ГражданствоФизическихЛицСтрана");	
КонецПроцедуры	

Функция ДокументыСЗВПолучитьСоответствиеРеквизитовФормеОбъекта() Экспорт 
	СоответствиеРеквизитовПутиВФормеОбъекта = ПолучитьСоответствиеРеквизитовФормеОбъекта();
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("АдресДляИнформирования", "");
	Возврат СоответствиеРеквизитовПутиВФормеОбъекта;
КонецФункции	

Функция ПолучитьСоответствиеРеквизитовПутиВФормеОбъекта() Экспорт
	СоответствиеРеквизитовПутиВФормеОбъекта = Новый Структура;
	
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("СтраховойНомерПФР", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Фамилия", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Имя", "");
	
	Возврат СоответствиеРеквизитовПутиВФормеОбъекта;
КонецФункции	

Процедура ДокументыАДВДополнитьСоответствиеРеквизитовПутиВФормеОбъекта(СоответствиеРеквизитовПутиВФормеОбъекта) Экспорт		
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("МестоРождения",  "ФизическоеЛицоМестоРождения");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Пол",   "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ДатаРождения",   "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("МестоРождения",  "ФизическоеЛицоМестоРождения");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("АдресРегистрации",  "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("АдресФактический", "");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ВидДокумента", "ДокументыФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("СерияДокумента", "ДокументыФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("НомерДокумента", "ДокументыФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("ДатаВыдачи", "ДокументыФизическихЛиц");
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("КемВыдан", "ДокументыФизическихЛиц");	
	СоответствиеРеквизитовПутиВФормеОбъекта.Вставить("Гражданство", "ГражданствоФизическихЛиц");	
КонецПроцедуры	

Процедура ПроверитьСоответствиеИзменившихсяДанныхДаннымСвидетельства(Ссылка, ДанныеСотрудника, Отказ) Экспорт
	Если ЗначениеЗаполнено(ДанныеСотрудника.ФамилияВСвидетельстве) И ВРег(СокрЛП(ДанныеСотрудника.Фамилия)) = ВРег(СокрЛП(ДанныеСотрудника.ФамилияВСвидетельстве)) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: Фамилия в свидетельстве совпадает с фамилией в изменившихся данных.'"), ДанныеСотрудника.СотрудникНаименование);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, "Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Сотрудник",,Отказ);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеСотрудника.ИмяВСвидетельстве) И ВРег(СокрЛП(ДанныеСотрудника.Имя)) = ВРег(СокрЛП(ДанныеСотрудника.ИмяВСвидетельстве)) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: Имя в свидетельстве совпадает с именем в изменившихся данных.'"), ДанныеСотрудника.СотрудникНаименование);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, "Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Сотрудник",,Отказ);
	КонецЕсли;
    Если ЗначениеЗаполнено(ДанныеСотрудника.ОтчествоВСвидетельстве) И ВРег(СокрЛП(ДанныеСотрудника.Отчество)) = ВРег(СокрЛП(ДанныеСотрудника.ОтчествоВСвидетельстве)) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: Отчество в свидетельстве совпадает с отчеством в изменившихся данных.'"), ДанныеСотрудника.СотрудникНаименование);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка, "Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Сотрудник",,Отказ);
	КонецЕсли;
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////////
// СЗВ-6-1, СЗВ-6-2, СПВ-1, Обр.ПодготовкаДанныхВПФР	

Процедура ДокументыСЗВСотрудникПриИзменении(ЭлементФормыСотрудники, ДокументОбъект, ТекущийСотрудник, УчитыватьКорректируемыйПериод = Истина, ЭлементФормыЗаписиОСтаже = Неопределено) Экспорт 
	Если Не УчитыватьКорректируемыйПериод Тогда
		КорректируемыйПериод = ДокументОбъект.ОтчетныйПериод;
	Иначе
		КорректируемыйПериод = ДокументОбъект.КорректируемыйПериод;
	КонецЕсли;	
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		ТипДоговора = ДокументОбъект.ТипДоговора;	
	Иначе
		ТипДоговора = Перечисления.ТипыДоговоровСЗВ63.ПустаяСсылка();
	КонецЕсли;	
	
	ИдентификаторТекущейСтроки = ЭлементФормыСотрудники.ТекущаяСтрока;
	ДанныеТекущейСтроки = ДокументОбъект.Сотрудники.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		НовыйСотрудник = ДанныеТекущейСтроки.Сотрудник;
		Если ТекущийСотрудник <> НовыйСотрудник Тогда
			ПерсонифицированныйУчетКлиентСервер.УдалитьСтрокиТаблицыЗаписиОСтаже(ДокументОбъект.ЗаписиОСтаже, ТекущийСотрудник);
			ТекущийСотрудник = НовыйСотрудник;
			
			ЗаполняемыеСотрудники = Новый Массив;
			
			ЗаполняемыеСотрудники.Добавить(НовыйСотрудник);
			
			ДокументыСЗВЗаполнитьПерсональныеДанныеСотрудников(
				ДокументОбъект, 
				Ложь,
				ЗаполняемыеСотрудники);
				
			Если ЭлементФормыЗаписиОСтаже <> Неопределено Тогда
				ПерсонифицированныйУчетКлиентСервер.ДокументыРедактированияСтажаУстановитьОтборЗаписейОСтаже(ЭлементФормыЗаписиОСтаже, НовыйСотрудник);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументыСПВСотрудникПриИзменении(ЭлементФормыСотрудники, ДокументОбъект, ТекущийСотрудник, УчитыватьКорректируемыйПериод = Истина, ЭлементФормыЗаписиОСтаже = Неопределено) Экспорт 
	Если Не УчитыватьКорректируемыйПериод Тогда
		КорректируемыйПериод = ДокументОбъект.ОтчетныйПериод;
	Иначе
		КорректируемыйПериод = ДокументОбъект.КорректируемыйПериод;
	КонецЕсли;	
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		ТипДоговора = ДокументОбъект.ТипДоговора;	
	Иначе
		ТипДоговора = Перечисления.ТипыДоговоровСЗВ63.ПустаяСсылка();
	КонецЕсли;	
	
	ИдентификаторТекущейСтроки = ЭлементФормыСотрудники.ТекущаяСтрока;
	ДанныеТекущейСтроки = ДокументОбъект.Сотрудники.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если ДанныеТекущейСтроки <> Неопределено Тогда
		НовыйСотрудник = ДанныеТекущейСтроки.Сотрудник;
		Если ТекущийСотрудник <> НовыйСотрудник Тогда
			ПерсонифицированныйУчетКлиентСервер.УдалитьСтрокиТаблицыЗаписиОСтаже(ДокументОбъект.ЗаписиОСтаже, ТекущийСотрудник);
			ТекущийСотрудник = НовыйСотрудник;
			
			ЗаполняемыеСотрудники = Новый Массив;
			
			ЗаполняемыеСотрудники.Добавить(НовыйСотрудник);
			
			ДокументыСЗВЗаполнитьДанныеСотрудников(
				ДокументОбъект, 
				Ложь,
				ЗаполняемыеСотрудники);
				
			Если ЭлементФормыЗаписиОСтаже <> Неопределено Тогда
				ПерсонифицированныйУчетКлиентСервер.ДокументыРедактированияСтажаУстановитьОтборЗаписейОСтаже(ЭлементФормыЗаписиОСтаже, НовыйСотрудник);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументыСЗВЗаполнитьДанныеСотрудников(ДокументОбъект, УчитыватьКорректируемыйПериод, Сотрудники = Неопределено) Экспорт
	Если Не УчитыватьКорректируемыйПериод Тогда
		КорректируемыйПериод = ДокументОбъект.ОтчетныйПериод;
	Иначе
		КорректируемыйПериод = ДокументОбъект.КорректируемыйПериод;
	КонецЕсли;	
	
	ПараметрыОтбора = СтруктураОтбораДанныхДляКвартальнойОтчетности();
	
	ЗаполнятьСведенияОЗаработке = Ложь;
	ЗаполнятьСведенияОЗаработкеВредный = Ложь;
	ЗаполнятьСведенияРаздела66 = Ложь;
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		ПараметрыОтбора.ТипДоговора = ДокументОбъект.ТипДоговора;
		ЗаполнятьСведенияОЗаработке = Истина;
	КонецЕсли;	
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
		ЗаполнятьСведенияОЗаработкеВредный = Истина;
		ЗаполнятьСведенияОЗаработке = Истина;
		ЗаполнятьСведенияРаздела66  = Истина;
	Иначе
		ПараметрыОтбора.КатегорияЗастрахованныхЛиц = ДокументОбъект.КатегорияЗастрахованныхЛиц;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = Новый Массив;
	
		Для Каждого ЭлементКоллекции Из ДокументОбъект.Сотрудники Цикл
			Сотрудники.Добавить(ЭлементКоллекции.Сотрудник);
		КонецЦикла;	
		
		ДокументОбъект.ЗаписиОСтаже.Очистить();
		
		Если ЗаполнятьСведенияОЗаработке Тогда
			ДокументОбъект.СведенияОЗаработке.Очистить();
		КонецЕсли;	
	Иначе
		Для Каждого Сотрудник Из Сотрудники Цикл
			СтрокиСтажа = ДокументОбъект.ЗаписиОСтаже.НайтиСтроки(Новый Структура("Сотрудник", Сотрудники));
			
			Для Каждого УдаляемаяСтрока Из СтрокиСтажа Цикл
				ДокументОбъект.ЗаписиОСтаже.Удалить(ДокументОбъект.ЗаписиОСтаже.Индекс(УдаляемаяСтрока));					
			КонецЦикла;
			
			Если ЗаполнятьСведенияОЗаработке Тогда
				СтрокиЗаработка = ДокументОбъект.СведенияОЗаработке.НайтиСтроки(Новый Структура("Сотрудник", Сотрудники));
			
				Для Каждого УдаляемаяСтрока Из СтрокиЗаработка Цикл
					ДокументОбъект.СведенияОЗаработке.Удалить(ДокументОбъект.СведенияОЗаработке.Индекс(УдаляемаяСтрока));					
				КонецЦикла;
			КонецЕсли;	
			
			Если ЗаполнятьСведенияОЗаработкеВредный Тогда
				СтрокиЗаработка = ДокументОбъект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.НайтиСтроки(Новый Структура("Сотрудник", Сотрудники));
			
				Для Каждого УдаляемаяСтрока Из СтрокиЗаработка Цикл
					ДокументОбъект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Удалить(ДокументОбъект.СведенияОЗаработке.Индекс(УдаляемаяСтрока));					
				КонецЦикла;
			КонецЕсли;	
			
			Если ЗаполнятьСведенияРаздела66 Тогда
				СтрокиРаздела66 = ДокументОбъект.КорректирующиеСведения.НайтиСтроки(Новый Структура("Сотрудник", Сотрудники));
				
				Для Каждого УдаляемаяСтрока Из СтрокиРаздела66 Цикл
					ДокументОбъект.КорректирующиеСведения.Удалить(ДокументОбъект.КорректирующиеСведения.Индекс(УдаляемаяСтрока));	
				КонецЦикла;	
			КонецЕсли;	

		КонецЦикла;	
	КонецЕсли;
	
	ПериодРасчета = ?(ДокументОбъект.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, ДокументОбъект.ОтчетныйПериод, КорректируемыйПериод);
		
	ПараметрыОтбора.СписокФизическихЛиц = Сотрудники;
		
	ДанныеСотрудников = ВыборкаДанныхПоСпискуФизЛицДляСЗВ(
							ДокументОбъект.Организация,
							ПериодРасчета,
							ПараметрыОтбора,
							ДокументОбъект.ТипСведенийСЗВ,
							ДокументОбъект.ОтчетныйПериод);		
		
	Пока ДанныеСотрудников.СледующийПоЗначениюПоля("Сотрудник") Цикл
		СтрокиСтажаПоСотруднику = Новый Массив;
		
		Пока ДанныеСотрудников.Следующий() Цикл
			СтрокаТаблицы = Неопределено;
			Если ДанныеСотрудников.ИмяТаблицы = "Сотрудники" Тогда
				СтруктураПоиска = Новый Структура("Сотрудник", ДанныеСотрудников.Сотрудник);
				СтрокаТаблицы = ДокументОбъект.Сотрудники.НайтиСтроки(СтруктураПоиска)[0];
			ИначеЕсли ДанныеСотрудников.ИмяТаблицы = "СведенияОЗаработке" 
				И (ДокументОбъект.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ 
				Или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1")) Тогда
				
				Если ЗаполнятьСведенияОЗаработке Тогда
					СтрокаТаблицы = ДокументОбъект.СведенияОЗаработке.Добавить();
				Иначе
					СтрокаТаблицы = Неопределено;
				КонецЕсли;
			ИначеЕсли ДанныеСотрудников.ИмяТаблицы = "ЗаписиОСтаже" 
				И ДокументОбъект.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда

				СтрокаТаблицы = ДокументОбъект[ДанныеСотрудников.ИмяТаблицы].Добавить();
				
				СтрокиСтажаПоСотруднику.Добавить(СтрокаТаблицы);
			ИначеЕсли ДанныеСотрудников.ИмяТаблицы = "СведенияОЗаработкеНаВредныхИТяжелыхРаботах" 
				И ДокументОбъект.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда

				Если ЗаполнятьСведенияОЗаработкеВредный Тогда
					СтрокаТаблицы = ДокументОбъект[ДанныеСотрудников.ИмяТаблицы].Добавить();
				Иначе
					СтрокаТаблицы = Неопределено;
				КонецЕсли;	
			ИначеЕсли ДанныеСотрудников.ИмяТаблицы = "КорректирующиеСведения" 
				И ДокументОбъект.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда

				Если ЗаполнятьСведенияРаздела66 Тогда
					СтрокаТаблицы = ДокументОбъект[ДанныеСотрудников.ИмяТаблицы].Добавить();
				Иначе
					СтрокаТаблицы = Неопределено;
				КонецЕсли;		
			КонецЕсли;	
			
			Если СтрокаТаблицы <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеСотрудников);
			КонецЕсли;	
		КонецЦикла;		
		
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ДокументыСЗВЗаполнитьПерсональныеДанныеСотрудников(ДокументОбъект, УчитыватьКорректируемыйПериод, Сотрудники = Неопределено) Экспорт
	Если Не УчитыватьКорректируемыйПериод Тогда
		КорректируемыйПериод = ДокументОбъект.ОтчетныйПериод;
	Иначе
		КорректируемыйПериод = ДокументОбъект.КорректируемыйПериод;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если Сотрудники = Неопределено Тогда
		Сотрудники = Новый Массив;
	
		Для Каждого ЭлементКоллекции Из ДокументОбъект.Сотрудники Цикл
			Сотрудники.Добавить(ЭлементКоллекции.Сотрудник);
		КонецЦикла;	
	КонецЕсли;
	
	Корректировка = ДокументОбъект.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ;
	ПериодРасчета = ?(Корректировка, КорректируемыйПериод, ДокументОбъект.ОтчетныйПериод);
	
	МассивНеобходимыхКадровыхДанных = Новый Массив();
	МассивНеобходимыхКадровыхДанных.Добавить("Наименование");
	МассивНеобходимыхКадровыхДанных.Добавить("Фамилия");
	МассивНеобходимыхКадровыхДанных.Добавить("Имя");
	МассивНеобходимыхКадровыхДанных.Добавить("Отчество"); 
    МассивНеобходимыхКадровыхДанных.Добавить("СтраховойНомерПФР"); 

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(
			Запрос.МенеджерВременныхТаблиц, 
			Истина, 
			Сотрудники,
			МассивНеобходимыхКадровыхДанных, 
			ТекущаяДатаСеанса());
			
	Запрос.Текст = 		
	"ВЫБРАТЬ
	|	КадровыеДанныеФизЛиц.ФизическоеЛицо КАК Сотрудник,
	|	КадровыеДанныеФизЛиц.Фамилия,
	|	КадровыеДанныеФизЛиц.Наименование,
	|	КадровыеДанныеФизЛиц.Имя,
	|	КадровыеДанныеФизЛиц.Отчество,
	|	КадровыеДанныеФизЛиц.СтраховойНомерПФР
	|ИЗ
	|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизЛиц";
								
	ВыборкаДанныхСотрудников = Запрос.Выполнить().Выбрать();							
	
	СтруктураПоиска = Новый Структура("Сотрудник");
	
	СтрокиПоСотрудникам = Новый Соответствие;
	Пока ВыборкаДанныхСотрудников.Следующий() Цикл
		СтруктураПоиска.Сотрудник = ВыборкаДанныхСотрудников.Сотрудник;
		МассивСтрокСотрудник =  ДокументОбъект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокСотрудник.Количество() <> 0 Тогда 
			СтрокаСотрудник = МассивСтрокСотрудник[0];
			
			ЗаполнитьЗначенияСвойств(СтрокаСотрудник, ВыборкаДанныхСотрудников);
			
			Структура = Новый Структура("ПериодыСтажаПредставление", "");
			
			ЗаполнитьЗначенияСвойств(СтрокаСотрудник, Структура);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры	

Процедура ДокументыСЗВОбработкаПодбораНаСервере(ДокументОбъект, МассивСотрудников, УчитыватьКорректируемыйПериод = Истина) Экспорт
	ЗаполняемыеСотрудники = Новый Массив;
	Для Каждого Сотрудник Из МассивСотрудников Цикл
		Если ДокументОбъект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда
			НоваяСтрока = ДокументОбъект.Сотрудники.Добавить();
			НоваяСтрока.Сотрудник = Сотрудник;
			
			ЗаполняемыеСотрудники.Добавить(Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
	Если ЗаполняемыеСотрудники.Количество() > 0 Тогда
		ДокументыСЗВЗаполнитьДанныеСотрудников(ДокументОбъект, УчитыватьКорректируемыйПериод, МассивСотрудников);
	КонецЕсли;	
КонецПроцедуры	

Процедура ДокументыСЗВЗаполнитьАдресаВДанныеПачек(Организация, ОтчетныйПериод, ДанныеПачек, ДатаАктуальности, ВсеАдреса = Истина) Экспорт
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	СоответствиеСотрудниковПачкам = Новый Соответствие;
	Для Каждого ДанныеПачкиСЗВ Из ДанныеПачек Цикл
		СтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
		СтрокаТаблицыСотрудников.ФизическоеЛицо = ДанныеПачкиСЗВ.Сотрудник;
		СтрокаТаблицыСотрудников.Период = ДатаАктуальности;
		
		СоответствиеСотрудниковПачкам.Вставить(ДанныеПачкиСЗВ.Сотрудник, ДанныеПачкиСЗВ);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаСотрудников.Период КАК Период
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ
	|	&ТаблицаСотрудников КАК ТаблицаСотрудников"; 
	
	Запрос.Выполнить();
	
	
	Если ВсеАдреса Тогда 
		СписокКадровыхДанных = Новый Массив;
		СписокКадровыхДанных.Добавить("АдресДляИнформирования");
		СписокКадровыхДанных.Добавить("АдресДляИнформированияПредставление");

		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
			Запрос.МенеджерВременныхТаблиц,
			"ВТСписокФизическихЛиц");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, СписокКадровыхДанных);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформацияФизЛиц.ФизическоеЛицо КАК Сотрудник,
		|	КонтактнаяИнформацияФизЛиц.АдресДляИнформированияПредставление КАК АдресДляИнформированияПредставление,
		|	КонтактнаяИнформацияФизЛиц.АдресДляИнформирования КАК АдресДляИнформирования
		|ИЗ
		|	ВТКадровыеДанныеФизическихЛиц КАК КонтактнаяИнформацияФизЛиц";
	Иначе
		СоздатьВТИзменившиесяАдресаФизическихЛиц(Запрос.МенеджерВременныхТаблиц, "ВТСписокФизическихЛиц", Организация, ОтчетныйПериод, ДатаАктуальности);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонтактнаяИнформацияФизЛиц.ФизическоеЛицо КАК Сотрудник,
		|	КонтактнаяИнформацияФизЛиц.АдресДляИнформированияПредставление КАК АдресДляИнформированияПредставление,
		|	КонтактнаяИнформацияФизЛиц.АдресДляИнформирования КАК АдресДляИнформирования
		|ИЗ
		|	ВТИзменившиесяАдресаФизическихЛиц КАК КонтактнаяИнформацияФизЛиц";
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеПачкиСЗВ = СоответствиеСотрудниковПачкам[Выборка.Сотрудник];
		ЗаполнитьЗначенияСвойств(ДанныеПачкиСЗВ, Выборка);			
	КонецЦикла;	
	
КонецПроцедуры	


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Документы СЗВ-6-3

Процедура ПачкаСЗВ63ЗаполнитьДанныеСотрудников(ДанныеДокументов, Организация, ОтчетныйПериод)
	Сотрудники = Новый Массив;
	СтрокиПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеСЗВ63 Из ДанныеДокументов Цикл
		Сотрудники.Добавить(ДанныеСЗВ63.Сотрудник);
		
		СтрокиПоСотрудникам.Вставить(ДанныеСЗВ63.Сотрудник, ДанныеСЗВ63);
	КонецЦикла;	
	
	
	ДанныеСотрудников = Документы.ПачкаДокументовСЗВ_6_3.ДанныеФизическихЛиц(Организация, ОтчетныйПериод, Сотрудники); 
																					
	Для Каждого ДанныеСотрудника Из ДанныеСотрудников Цикл 																				
		
		СтрокаСотрудник = СтрокиПоСотрудникам.Получить(ДанныеСотрудника.Сотрудник);
		
		ЗаполнитьЗначенияСвойств(СтрокаСотрудник, ДанныеСотрудника);
		
	КонецЦикла;	
КонецПроцедуры	

Процедура ПачкаСЗВ63ЗаполнитьСведенияОЗаработке(ДанныеДокументов, СведенияОЗаработке, Организация, ОтчетныйПериод, КатегорияЗастрахованныхЛиц, ТипДоговора) Экспорт 
	Сотрудники = Новый Массив;
	СтрокиПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеСЗВ63 Из ДанныеДокументов Цикл
		Сотрудники.Добавить(ДанныеСЗВ63.Сотрудник);
		
		УдаляемыеСтроки = СведенияОЗаработке.НайтиСтроки(Новый Структура("Сотрудник", ДанныеСЗВ63.Сотрудник));
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			СведенияОЗаработке.Удалить(СведенияОЗаработке.Индекс(УдаляемаяСтрока));
		КонецЦикла;	
	КонецЦикла;	
	
	
	ДанныеОЗаработкеСотрудников = Документы.ПачкаДокументовСЗВ_6_3.СведенияОЗаработке(Организация, ОтчетныйПериод, КатегорияЗастрахованныхЛиц, ТипДоговора, Сотрудники); 
																					
	Для Каждого СтрокаСведенийОЗаработке Из ДанныеОЗаработкеСотрудников Цикл
		НоваяСтрокаСведений = СведенияОЗаработке.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСведений, СтрокаСведенийОЗаработке);
		
		НоваяСтрокаСведений.МесяцСтрокой = Формат(Дата(2011, НоваяСтрокаСведений.Месяц, 1), "ДФ=ММММ")
	КонецЦикла;

КонецПроцедуры	

Процедура ПачкаСЗВ63ЗаполнитьДанныеДокументов(ДанныеДокументов, СведенияОЗаработке, Организация, ОтчетныйПериод, КатегорияЗастрахованныхЛиц, ТипДоговора) Экспорт
	ПачкаСЗВ63ЗаполнитьДанныеСотрудников(ДанныеДокументов, Организация, ОтчетныйПериод);
	ПачкаСЗВ63ЗаполнитьСведенияОЗаработке(ДанныеДокументов, СведенияОЗаработке, Организация, ОтчетныйПериод, КатегорияЗастрахованныхЛиц, ТипДоговора)
КонецПроцедуры	

Функция СписокНестрахуемыхВидовДохода() Экспорт
	Возврат УчетСтраховыхВзносов.ДоходыНестрахуемыеПоОПС();	
КонецФункции	

Функция СоответствиеТиповСсылокТипамФайловВыгрузки() Экспорт
	
	СоответствиеТиповСсылокТипамФайловВыгрузки = Новый Соответствие;
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовАДВ_1"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовАДВ_2"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовАДВ_3"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ОписьПачекСЗВ_6"), "ПачкаАДВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовДСВ_1"), "ПачкаДСВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.РеестрДСВ_3"), "РеестрДСВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.РегламентированныйОтчет"), "ПачкаРСВ");	
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.РеестрСЗВ_6_2"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1"), "пачкаСВВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_К"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСПВ_1"), "ПачкаСВВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ПачкаДокументовСПВ_2"), "ПачкаСВВ");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.ОписьОДВ_1"), "ПачкаИС");
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД"), "ПачкаИС");
	
	СоответствиеТиповСсылокТипамФайловВыгрузки.Вставить(Тип("СправочникСсылка.КомплектыОтчетностиПерсУчетаПрисоединенныеФайлы"), "сведенияПриложение");
	
	Возврат СоответствиеТиповСсылокТипамФайловВыгрузки;
	
КонецФункции	

Функция ПараметрыДляСоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, СписокФизическихЛиц) Экспорт
	Возврат ПерсонифицированныйУчетВнутренний.ПараметрыДляСоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод, СписокФизическихЛиц);
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Проверка персональных данных физических лиц

Функция НовыйПравилоПроверкиДанныхЗЛ() Экспорт
	Возврат Новый Структура("ОбязательноКЗаполнению, ПроверяемыйЭлемент, ПутьКДанным, ПредставлениеПроверяемогоЭлемента", Ложь);	
КонецФункции

Процедура ПроверитьДанныеЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ = Ложь) Экспорт
	
	ПроверитьОбязательныеДанныеЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ);	
	 
	Для Каждого Правило Из ПравилаПроверки Цикл
		Если Правило.ПроверяемыйЭлемент = "СтраховойНомерПФР" Тогда
			ПроверитьСНИЛСЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, Правило, Ошибки, ИсточникДанныхЗЛ, Отказ);
		ИначеЕсли Правило.ПроверяемыйЭлемент = "МестоРождения" Тогда 	
			ПроверитьМестоРожденияЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, Правило, Ошибки, ИсточникДанныхЗЛ, Отказ);
		ИначеЕсли Правило.ПроверяемыйЭлемент = "ВидДокумента" Тогда
			ПроверитьУдостоверениеЛичностиЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ);
		ИначеЕсли Правило.ПроверяемыйЭлемент = "Адрес" Тогда
			ПроверитьАдресЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, Правило, Ошибки, ИсточникДанныхЗЛ, Отказ);
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры	

Процедура ПроверитьОбязательныеДанныеЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ = Ложь)
	Для Каждого Правило Из ПравилаПроверки Цикл
		Если Правило.ОбязательноКЗаполнению И Не ЗначениеЗаполнено(ДанныеЗЛ[Правило.ПутьКДанным]) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: не заполнено поле %2'"), 
																			ДанныеЗЛ.Наименование, 
																			Правило.ПредставлениеПроверяемогоЭлемента);
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, Правило.ПутьКДанным);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстОшибки, ИсточникДанныхЗЛ, ИмяПоля, "Объект", Отказ);
		КонецЕсли;			
	КонецЦикла;		
КонецПроцедуры	

Процедура ПроверитьСНИЛСЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилоПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ = Ложь)
			
	ТекстСообщения = "";
	Если ЗначениеЗаполнено(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным]) И 
		Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным], ТекстСообщения) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2'"), ДанныеЗЛ.Наименование, ТекстСообщения);		
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, ПравилоПроверки.ПутьКДанным);
		ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстОшибки, ИсточникДанныхЗЛ, ИмяПоля, "Объект", Отказ);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроверитьМестоРожденияЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилоПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ = Ложь)
	
	Если ЗначениеЗаполнено(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным])  
		И (СокрЛП(СтрЗаменить(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным],",","")) = "" 
		Или СокрЛП(СтрЗаменить(ДанныеЗЛ[ПравилоПроверки.ПутьКДанным],",","")) = "0") Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: не заполнено поле %2'"), 
																			ДанныеЗЛ.Наименование,
																			ПравилоПроверки.ПредставлениеПроверяемогоЭлемента);
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, ПравилоПроверки.ПутьКДанным);
		ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстОшибки, ИсточникДанныхЗЛ, ИмяПоля, "Объект", Отказ);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПроверитьУдостоверениеЛичностиЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилаПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ = Ложь)
	
	ПравилоПроверкиВидДокумента        = Неопределено;
	ПравилоПроверкиСерияДокумента      = Неопределено;
	ПравилоПроверкиНомерДокумента      = Неопределено;
	
	Для Каждого Правило Из ПравилаПроверки Цикл
		Если Правило.ПроверяемыйЭлемент = "ВидДокумента" Тогда
			ПравилоПроверкиВидДокумента = Правило;
			ВидДокумента = ДанныеЗЛ[ПравилоПроверкиВидДокумента.ПутьКДанным]
		ИначеЕсли Правило.ПроверяемыйЭлемент = "СерияДокумента" Тогда
			ПравилоПроверкиСерияДокумента = Правило;
		ИначеЕсли  Правило.ПроверяемыйЭлемент = "НомерДокумента" Тогда
			ПравилоПроверкиНомерДокумента = Правило;
	   	КонецЕсли;	
	КонецЦикла;	
	
	Если ПравилоПроверкиВидДокумента <> Неопределено И ЗначениеЗаполнено(ВидДокумента) Тогда
		ТекстОшибкиСерия = "";
		Если ПравилоПроверкиСерияДокумента <> Неопределено
		 	И Не ДокументыФизическихЛицКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, ДанныеЗЛ[ПравилоПроверкиСерияДокумента.ПутьКДанным], ТекстОшибкиСерия) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2.'"), ДанныеЗЛ.Наименование, ТекстОшибкиСерия);
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, ПравилоПроверкиСерияДокумента.ПутьКДанным);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстОшибки, ИсточникДанныхЗЛ, ИмяПоля, "Объект", Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Если ПравилоПроверкиВидДокумента <> Неопределено И ЗначениеЗаполнено(ВидДокумента) Тогда
		ТекстОшибкиНомер = "";
		Если ПравилоПроверкиНомерДокумента <> Неопределено 
		 	И Не ДокументыФизическихЛицКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, ДанныеЗЛ[ПравилоПроверкиНомерДокумента.ПутьКДанным], ТекстОшибкиНомер) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: %2.'"), ДанныеЗЛ.Наименование, ТекстОшибкиНомер);
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, ПравилоПроверкиНомерДокумента.ПутьКДанным);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстОшибки, ИсточникДанныхЗЛ, ИмяПоля, "Объект", Отказ);
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры	

Процедура ПроверитьАдресЗастрахованногоЛица(ДанныеЗЛ, НомерВПачке, ПравилоПроверки, Ошибки, ИсточникДанныхЗЛ, Отказ = Ложь)
	
	Адрес = ДанныеЗЛ[ПравилоПроверки.ПутьКДанным];
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		
		СообщенияПроверки = "";
		РезультатПроверки = РаботаСАдресами.ПроверитьАдрес(Адрес);
		
		Если РезультатПроверки.СписокОшибок.Количество() <> 0 Тогда
			
			Для Каждого СтруктураОшибки Из РезультатПроверки.СписокОшибок Цикл
				СообщенияПроверки = СообщенияПроверки + СтруктураОшибки.Представление + Символы.ПС;
			КонецЦикла;
			
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщенияПроверки, 1);
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сотрудник %1: - поле ""%2"": %3'"),
					ДанныеЗЛ.Наименование,
					ПравилоПроверки.ПредставлениеПроверяемогоЭлемента,
					СообщенияПроверки);
					
			ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, ПравилоПроверки.ПутьКДанным);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстОшибки, ИсточникДанныхЗЛ, ИмяПоля, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет заполнение документов, содержащих данные о стаже сотрудников
// (СЗВ-1, СЗВ-2).
Процедура ПроверитьЗаполнениеДанныхВзносахИСтаже(ДанныеДокумента, ЗапросПоСтрокамДокумента, Ошибки, Отказ, РасширеннаяПроверкаСтажа = Ложь, НеПроверяемыеРеквизиты = Неопределено, ПроверятьАдрес = Истина) Экспорт
	КатегорииЗЛИностранцев = КатегорииЗЛИностранцев();
		
	Если ТипЗнч(ДанныеДокумента) = Тип("ДокументОбъект.ПачкаДокументовСПВ_1") Или ДанныеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		ОтчетныйПериод = ДанныеДокумента.ОтчетныйПериод;
	Иначе
		ОтчетныйПериод = ДанныеДокумента.КорректируемыйПериод;
	КонецЕсли;
	
	ТарифыПоКатегориям = ТарифыПоКатегориям(ОтчетныйПериод);
	
	ТарифыПФР = ТарифыПоКатегориям.Получить(ДанныеДокумента.КатегорияЗастрахованныхЛиц);
				
	ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод);
	ДанныеОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеДокумента.Организация, "Наименование, КодПоОКПО"); 
	
	Если ДанныеДокумента.Сотрудники.Количество() > 200 Тогда
		ТекстОшибки = НСтр("ru = 'В документе должно быть не более 200 сотрудников.'");
		
		ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, ДанныеДокумента.Ссылка, ТекстОшибки, ,Отказ);
	КонецЕсли;
	
	ВыборкаПоСтрокамДокумента = ЗапросПоСтрокамДокумента.Выполнить().Выбрать();
	
	ПравилаПроверкиДанныхЗЛ = ДокументыСЗВПравилаПроверкиДанныхЗЛ(ПроверятьАдрес);
	
	Если НеПроверяемыеРеквизиты <> Неопределено Тогда
		Для Каждого Правило Из ПравилаПроверкиДанныхЗЛ Цикл
			Если Правило.ОбязательноКЗаполнению Тогда
				НеПроверяемыеРеквизиты.Добавить("Сотрудники." + Правило.ПутьКДанным);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;	
		
	Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтрокиСотрудник") Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.Сотрудник) Тогда 
			
			Если ВыборкаПоСтрокамДокумента.КонфликтующаяСтрока <> Null Тогда  
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Информация о сотруднике %1 была введена в документе ранее.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(Ошибки, 
																							ДанныеДокумента.Ссылка, 
																							ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
																							ТекстОшибки,
																							"Сотрудник",
																							Отказ);
																							
			ИначеЕсли ВыборкаПоСтрокамДокумента.КонфликтующаяСтрокаСтраховойНомер <> Null Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: информация о сотруднике с таким же страховым номером была введена в документе ранее.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
				
				ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуЗаполненияСпискаСотрудников(Ошибки, 
																							ДанныеДокумента.Ссылка, 
																							ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
																							ТекстОшибки,
																							"СтраховойНомерПФР",
																							Отказ);
			КонецЕсли;	
			
			ДанныеЗастрахованногоЛица = ДокументыСЗВДанныеЗастрахованногоЛица(ВыборкаПоСтрокамДокумента);
			
			ПроверитьДанныеЗастрахованногоЛица(ДанныеЗастрахованногоЛица, ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник, ПравилаПроверкиДанныхЗЛ, Ошибки, ДанныеДокумента.Ссылка, Отказ);
			
			Если ДанныеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда 
				ПроверяемыйПериод = ОтчетныйПериод;
				
				Если ПроверяемыйПериод >= '20120101' Тогда
					
					// П. 4.1 Должны отсутствовать  значения в графах «Начислено» и «Уплачено» графы «Сумма страховых взносов на
					// накопительную часть трудовой пенсии» формы СЗВ-6-1 (2) с кодом категории застра-хованного лица ВЖИЖ, ВЖНР, ВЖСХ,
					// ВЖЕН, ВЖМН, ВЖОИ, ВЖХО,  ВЖТЗ, ВЖИТ, ВЖСИ, ВЖЭД, ВЖЦС, ВЖСБ, ВЖЭС, ВПИЖ, ВПНР, ВПСХ, ВПЕН, ВПМН, ВПОИ, ВПХО, 
					// ВПТЗ, ВПИТ, ВПСИ, ВПЭД, ВПЦС, ВПСБ, ВПЭС.
					Если КатегорииЗЛИностранцев.Найти(ДанныеДокумента.КатегорияЗастрахованныхЛиц) <> Неопределено Тогда  
						
						Если ВыборкаПоСтрокамДокумента.НачисленоНакопительная <> 0 Тогда		
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: для категории %2, данные о начисленных суммах на накопительную часть пенсии должны отсутствовать.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, ДанныеДокумента.КатегорияЗастрахованныхЛиц);
							
							ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОВзносах(Ошибки, 
																						ДанныеДокумента.Ссылка,  
																						ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
																						ТекстОшибки,  
																						"НачисленоНакопительная", 
																						Отказ);
						КонецЕсли;	
							
						Если ВыборкаПоСтрокамДокумента.УплаченоНакопительная <> 0 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: для категории %2, данные о уплаченных суммах на накопительную часть пенсии должны отсутствовать.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование, ДанныеДокумента.КатегорияЗастрахованныхЛиц);
							
							ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОВзносах(Ошибки, 
																						ДанныеДокумента.Ссылка,																							ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
																						ТекстОшибки,  
																						"УплаченоНакопительная", 
																						Отказ);
						КонецЕсли;
	
					ИначеЕсли ТарифыПФР <> Неопределено Тогда
						
						// Проверим что заполнена накопительная часть пенсии
						Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) И ВыборкаПоСтрокамДокумента.ДатаРождения >= '19670101' И 
							ТарифыПФР.ПФРНакопительная <> 0  И ВыборкаПоСтрокамДокумента.НачисленоСтраховая <> 0 И ВыборкаПоСтрокамДокумента.НачисленоНакопительная = 0 Тогда
							
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сотрудник %1: не заполнена сумма страховых взносов на накопительную часть трудовой пенсии.'"), ВыборкаПоСтрокамДокумента.СотрудникНаименование);
							
							ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОВзносах(Ошибки, 
																						ДанныеДокумента.Ссылка,
																						ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
																						ТекстОшибки,  
																						"НачисленоНакопительная", 
																						Отказ);
	
						ИначеЕсли ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаРождения) 
							И ВыборкаПоСтрокамДокумента.ДатаРождения >= '19670101' 
							И ТарифыПФР.ПФРНакопительная <> 0 
							И ТарифыПФР.ПФРСтраховая <> 0 Тогда	
							
							// П 5.1 Значение, рассчитанное для каждой строки формы отдельно по каждому застрахованному лицу по формуле: 
							// страховые взносы на страховую часть трудовой пенсии умноженные на тариф страховых взносов на накопительную
							// часть пенсии и деленные на тариф страховых взносов  на страховую часть  должно равняться сумме страховых взносов на накопитель-ную
							// часть трудовой пенсии  (допустимое расхождение до 10 копеек).	
							
							РассчитанныйПФРНакопительная = ВыборкаПоСтрокамДокумента.НачисленоСтраховая * ТарифыПФР.ПФРНакопительная / ТарифыПФР.ПФРСтраховая;
							Разность = Макс(РассчитанныйПФРНакопительная -  ВыборкаПоСтрокамДокумента.НачисленоНакопительная, ВыборкаПоСтрокамДокумента.НачисленоНакопительная - РассчитанныйПФРНакопительная);
							Если Разность >= 0.10 Тогда
								ШаблонТекстаОшибки = НСтр("ru = 'Сотрудник %1: - страховые взносы на страховую часть трудовой пенсии умноженные на тариф страховых взносов на накопительную часть пенсии  и деленные на  тариф страховых взносов  на страховую часть  должно равняться сумме страховых взносов на накопительную часть трудовой пенсии (допустимое расхождение до 10 копеек)'");
								
								ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ШаблонТекстаОшибки, 
													ВыборкаПоСтрокамДокумента.СотрудникНаименование);
													
								ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхОВзносах(
									Ошибки, 
									ДанныеДокумента.Ссылка,	
									ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник,
									ТекстОшибки,  
									"НачисленоСтраховая", 
									Отказ);

							КонецЕсли;		
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;					
			КонецЕсли;
		КонецЕсли;				
	КонецЦикла;
КонецПроцедуры

Функция ЗаписьСодержитСложныйСтаж(ЗаписьОСтаже)
	Если ЗначениеЗаполнено(ЗаписьОСтаже.ОсобыеУсловияТруда) 
		Или ЗначениеЗаполнено(ЗаписьОСтаже.КодПозицииСписка)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ОснованиеИсчисляемогоСтажа)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ПервыйПараметрИсчисляемогоСтажа)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ВторойПараметрИсчисляемогоСтажа)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ТретийПараметрИсчисляемогоСтажа)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ОснованиеВыслугиЛет)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ПервыйПараметрВыслугиЛет)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ВторойПараметрВыслугиЛет)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ТретийПараметрВыслугиЛет)
        Или ЗначениеЗаполнено(ЗаписьОСтаже.ТерриториальныеУсловия)
		Или ЗначениеЗаполнено(ЗаписьОСтаже.ПараметрТерриториальныхУсловий) 
		Или Год(ЗаписьОСтаже.ДатаНачалаПериода) >= 2013 Тогда

		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;		
КонецФункции	

Функция СоответствиеКатегорийИностранцевКатегориямРоссиян() Экспорт

	СоответствиеКатегорий = Новый Соответствие;
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖНР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.НР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПНР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.НР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.НР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.НР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПОИ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ООИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖОИ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ООИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ООИ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ООИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЕН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЕСХН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЕН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЕСХН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЕСХН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЕСХН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПИТ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОДИТ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖИТ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОДИТ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОДИТ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОДИТ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЭК, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЭКБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЭК, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЭКБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЭКБ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЭКБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПАН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.АНМ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖАН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.АНМ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.АНМ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.АНМ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПКЛ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.КЛН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖКЛ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.КЛН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.КЛН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.КЛН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЭД, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ПНЭД);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЭД, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ПНЭД);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ПНЭД, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ПНЭД);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПХО, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХО);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖХО, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХО);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХО, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХО);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПСИ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СМИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖСИ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СМИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.СМИ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СМИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЦС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИЦС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЦС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИЦС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИЦС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИЦС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПСБ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.АСБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖСБ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.АСБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.АСБ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.АСБ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПИЖ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖИЖ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ИНЖУ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПКС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.КРС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖКС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.КРС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.КРС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.КРС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПТР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТОР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖТР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТОР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТОР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТОР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПВЛ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СПВЛ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖВЛ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СПВЛ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.СПВЛ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СПВЛ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПАР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.САР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖАР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.САР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.САР, Перечисления.КатегорииЗастрахованныхЛицДляПФР.САР);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПЭС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЧЭС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖЭС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЧЭС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЧЭС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ЧЭС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПМС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.МС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖМС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.МС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.МС, Перечисления.КатегорииЗастрахованныхЛицДляПФР.МС);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПСХ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СХ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖСХ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СХ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.СХ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.СХ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПМН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХМН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖМН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХМН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХМН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ХМН);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВПТЗ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ВЖТЗ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ТВЭЗ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОЗОИ, Перечисления.КатегорииЗастрахованныхЛицДляПФР.ОЗОИ);
	СоответствиеКатегорий.Вставить(Перечисления.КатегорииЗастрахованныхЛицДляПФР.УСЕН, Перечисления.КатегорииЗастрахованныхЛицДляПФР.УСЕН);
	
	Возврат СоответствиеКатегорий

КонецФункции

// Настройки проверки файлов перс. учета

Функция ОписаниеВыгруженногоФайлаОтчетности() Экспорт
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Владелец");
	ОписаниеФайла.Вставить("ИмяФайла");
	ОписаниеФайла.Вставить("АдресВоВременномХранилище");
	ОписаниеФайла.Вставить("ПроверятьCheckXML", Ложь);
	ОписаниеФайла.Вставить("ПроверятьCheckUFA", Ложь);
	ОписаниеФайла.Вставить("ПроверятьПОПД", Ложь);
	ОписаниеФайла.Вставить("ПроверятьTesterNDFL", Ложь);
	ОписаниеФайла.Вставить("ФайлВСоставеКомплекта", Ложь);
	ОписаниеФайла.Вставить("ПроверяемыйФайлКомплекта", Ложь);
	
	Возврат ОписаниеФайла;
КонецФункции	

Функция ОбщиеНастройкиПрограммПроверкиОтчетности() Экспорт
	НастройкиПрограммПроверкиОтчетности = РегистрыСведений.НастройкиПроверкиОтчетностиПерсУчета.СоздатьМенеджерЗаписи();
	НастройкиПрограммПроверкиОтчетности.Прочитать();
	
	Если Не НастройкиПрограммПроверкиОтчетности.Выбран() Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	СтруктураНастроек = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
							НастройкиПрограммПроверкиОтчетности, Метаданные.РегистрыСведений.НастройкиПроверкиОтчетностиПерсУчета);
							
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СтруктураНастроек.ВыполнятьПроверкуНаСервере = Ложь;
	КонецЕсли;	
							
							
	// Если настройки не заполнены, все значения по умолчанию оставляем Ложь
	Возврат СтруктураНастроек;
	
КонецФункции

Функция ПерсональныеНастройкиПрограммПроверкиОтчетности() Экспорт
	Настройки = Новый Структура;
	
	ПроверятьПрограммойCheckUFA =  ХранилищеОбщихНастроек.Загрузить("НастройкиПерсонифицированногоУчета", "ПроверятьПрограммойCheckUFA"); 
	
	Если ПроверятьПрограммойCheckUFA = Неопределено Тогда
		Настройки.Вставить("ПроверятьПрограммойCheckUFA", Истина);
	Иначе
		Настройки.Вставить("ПроверятьПрограммойCheckUFA", ПроверятьПрограммойCheckUFA);
	КонецЕсли;
	
	ПроверятьПрограммойCheckXML =  ХранилищеОбщихНастроек.Загрузить("НастройкиПерсонифицированногоУчета", "ПроверятьПрограммойCheckXML"); 
	
	Если ПроверятьПрограммойCheckXML = Неопределено Тогда
		Настройки.Вставить("ПроверятьПрограммойCheckXML", Истина);
	Иначе
		Настройки.Вставить("ПроверятьПрограммойCheckXML", ПроверятьПрограммойCheckXML);
	КонецЕсли;
	
	ПроверятьПрограммойПОПД =  ХранилищеОбщихНастроек.Загрузить("НастройкиПерсонифицированногоУчета", "ПроверятьПрограммойПОПД"); 
	
	Если ПроверятьПрограммойПОПД = Неопределено Тогда
		Настройки.Вставить("ПроверятьПрограммойПОПД", Истина);
	Иначе
		Настройки.Вставить("ПроверятьПрограммойПОПД", ПроверятьПрограммойПОПД);
	КонецЕсли;
	
	КаталогПрограммыCheckUFA = ХранилищеОбщихНастроек.Загрузить("НастройкиПерсонифицированногоУчета", "КаталогПрограммыCheckUFA");
	
	Если КаталогПрограммыCheckUFA = Неопределено Тогда
		Настройки.Вставить("КаталогПрограммыCheckUFA", "");
	Иначе
		Настройки.Вставить("КаталогПрограммыCheckUFA", КаталогПрограммыCheckUFA);
	КонецЕсли;
	
	КаталогПрограммыCheckXml = ХранилищеОбщихНастроек.Загрузить("НастройкиПерсонифицированногоУчета", "КаталогПрограммыCheckXml");
	
	Если КаталогПрограммыCheckUFA = Неопределено Тогда
		Настройки.Вставить("КаталогПрограммыCheckXml", "");
	Иначе
		Настройки.Вставить("КаталогПрограммыCheckXml", КаталогПрограммыCheckXml);
	КонецЕсли;
	
	КаталогПрограммыПОПД = ХранилищеОбщихНастроек.Загрузить("НастройкиПерсонифицированногоУчета", "КаталогПрограммыПОПД");
	
	Если КаталогПрограммыПОПД = Неопределено Тогда
		Настройки.Вставить("КаталогПрограммыПОПД", "");
	Иначе
		Настройки.Вставить("КаталогПрограммыПОПД", КаталогПрограммыПОПД);
	КонецЕсли;
	
	Возврат Настройки;
КонецФункции

Процедура ПроверитьЗаписиОСтаже(МенеджерВременныхТаблиц, Ссылка, ОтчетныйПериод, Отказ, РасширеннаяПроверка = Истина, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь, ВыделятьСтажДоговорников = Ложь, ОкончаниеОтчетногоПериода = Неопределено) Экспорт
	
	Ошибки = Новый Массив;
	
	ДоговорыГПХ = Новый Массив;
	Если ВыделятьСтажДоговорников Тогда
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
		ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтаже.НомерСтроки КАК НомерСтрокиСтаж,
	|	ЗаписиОСтаже.НомерСтрокиСотрудник КАК НомерСтрокиСотрудник,
	|	ЗаписиОСтаже.Сотрудник КАК Сотрудник,
	|	ФизическиеЛица.Наименование КАК СотрудникНаименование,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ТерриториальныеУсловияПФР.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ОсобыеУсловияТрудаПФР.Код КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка,
	|	СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ОснованияИсчисляемогоСтраховогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ОснованияДосрочногоНазначенияПенсии.Код КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПараметрыИсчисляемогоСтраховогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
	|	ВЫБОР
	|		КОГДА ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа В (&ДоговорыГПХ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорГПХ
	|ИЗ
	|	ВТЗаписиОСтаже КАК ЗаписиОСтаже
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
	|		ПО ЗаписиОСтаже.ТерриториальныеУсловия = ТерриториальныеУсловияПФР.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсобыеУсловияТрудаПФР КАК ОсобыеУсловияТрудаПФР
	|		ПО ЗаписиОСтаже.ОсобыеУсловияТруда = ОсобыеУсловияТрудаПФР.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения КАК СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения
	|		ПО ЗаписиОСтаже.КодПозицииСписка = СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияИсчисляемогоСтраховогоСтажа КАК ОснованияИсчисляемогоСтраховогоСтажа
	|		ПО ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа = ОснованияИсчисляемогоСтраховогоСтажа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияДосрочногоНазначенияПенсии КАК ОснованияДосрочногоНазначенияПенсии
	|		ПО ЗаписиОСтаже.ОснованиеВыслугиЛет = ОснованияДосрочногоНазначенияПенсии.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ЗаписиОСтаже.Сотрудник = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыИсчисляемогоСтраховогоСтажа КАК ПараметрыИсчисляемогоСтраховогоСтажа
	|		ПО ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа = ПараметрыИсчисляемогоСтраховогоСтажа.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорГПХ,
	|	НомерСтрокиСотрудник,
	|	НомерСтрокиСтаж";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("ДоговорГПХ") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтрокиСотрудник") Цикл
			ПроверитьЗаписиОСтажеПоСотруднику(Ссылка, ОтчетныйПериод, Выборка, РасширеннаяПроверка, Ошибки, Отказ, ИспользоватьНовыйКлассификаторПараметровСтажа, ВыделятьСтажДоговорников, ОкончаниеОтчетногоПериода);		
		КонецЦикла;	
	КонецЦикла;	
	
	Если РасширеннаяПроверка Тогда
		ДокументыСЗВПроверитьСочетанияМеждуГруппамиСтажа(Ошибки, Ссылка, ОтчетныйПериод, МенеджерВременныхТаблиц, Отказ);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПроверитьЗаписиОСтажеПоСотруднику(Ссылка, ОтчетныйПериод, ВыборкаПоСтрокамДокумента, РасширеннаяПроверкаСтажа, Ошибки, Отказ, ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь, ВыделятьСтажДоговорников = Ложь, ОкончаниеПериода = Неопределено) Экспорт	
	
	ПараметрыИсчисляемогоСтраховогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа;
	
	Если ОкончаниеПериода = Неопределено Тогда
		ОкончаниеПериода = ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаСтажаПерсУчета(ОтчетныйПериод);
	КонецЕсли;
	
	ПараметрыСтажаСПравомНаДосрочнуюПенсию = ПараметрыИсчисляемогоСтажаПредусматривающиеПравоНаДосрочнуюПенсию();
	
	ТекущаяОсновнаяЗапись = Новый Структура("Сотрудник, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
	СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
	СписокУсловияТрудаЗаписи = Новый СписокЗначений;
	СписокВыслугаЛетЗаписи = Новый СписокЗначений;
	
	ПредыдущийНомерОсновнойЗаписи = 0;
	ПредыдущийНомерДополнительнойЗаписи = 0;
	
	НомерСтроки = 0;
	
	Если ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.НомерСтрокиСтаж) Тогда
					
		Пока ВыборкаПоСтрокамДокумента.СледующийПоЗначениюПоля("НомерСтрокиСтаж") Цикл
			
			НомерСтроки = НомерСтроки + 1;
									
			// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
			
			// По умолчанию считаем, что запись основная
			ЭтоОсновнаяЗапись = Истина;
			
			// Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
			ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
			
			// Проверка заполнения реквизитов "ДатаНачалаПериода" и "ДатаОкончанияПериода". 
			Если Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаПериода) И Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода) Тогда
				Если ДополнительнаяЗаписьВозможна Тогда
					ЭтоОсновнаяЗапись = Ложь;
				Иначе
					ТекстОшибки = НСтр("ru = 'не указана дата начала периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
					
					ТекстОшибки = НСтр("ru = 'не указана дата окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");					
				КонецЕсли;	
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаНачалаПериода) Тогда
				ТекстОшибки = НСтр("ru = 'при указании даты окончания периода необходимо указывать дату начала периода.'");     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода) Тогда
				ТекстОшибки = НСтр("ru = 'при указании даты начала периода необходимо указывать дату окончания периода.'");     
				ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");
				
			Иначе//Обе даты заполнены
				
				// Дата начала периода не должна быть ранее начала периода
				Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода < ОтчетныйПериод Тогда
					ТекстОшибки = НСтр("ru = 'дата начала периода должна быть не ранее начала периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
					
				КонецЕсли;	 
				
				// Дата окончания периода не должна быть позднее окончания периода
				Если ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода > ОкончаниеПериода Тогда
					ТекстОшибки = НСтр("ru = 'дата окончания периода должна быть не позднее окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаОкончанияПериода");
				КонецЕсли;	 
				
				// Начало периода не должно быть позже окончания периода 
				Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода > ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода Тогда
					ТекстОшибки = НСтр("ru = 'дата начала периода не должна превышать дату окончания периода.'");     
					ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
				КонецЕсли;
				
			КонецЕсли;	 
			
			Если РасширеннаяПроверкаСтажа Тогда
				
				Если ЭтоОсновнаяЗапись Тогда
					
					// Проверка на хронологический порядок записей
					Если ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено Тогда
						Если ВыборкаПоСтрокамДокумента.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода Тогда
							ТекстОшибки = НСтр("ru = 'дата начала периода должна быть больше даты окончания предыдущего периода'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ДатаНачалаПериода");
						КонецЕсли;	 
					КонецЕсли;
					
					// Переустановка текущей основной записи
					ТекущаяОсновнаяЗапись.Сотрудник = ВыборкаПоСтрокамДокумента.Сотрудник;
					ТекущаяОсновнаяЗапись.ДатаНачалаПериода = ВыборкаПоСтрокамДокумента.ДатаНачалаПериода;
					ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = ВыборкаПоСтрокамДокумента.ДатаОкончанияПериода;
					ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет;
					ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод;
					ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = ВыборкаПоСтрокамДокумента.ТерриториальныеУсловия;
					ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа;
					ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи;
					ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
					
					СписокТерриториальныеУсловияЗаписи.Очистить();
					СписокУсловияТрудаЗаписи.Очистить();
					СписокВыслугаЛетЗаписи.Очистить();
				КонецЕсли;	 
				
				// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
				
				// Проверка нумерации основных и дополнительных записей
				Если (ЭтоОсновнаяЗапись) Тогда
					Если Не ВыделятьСтажДоговорников Тогда  
						ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						Если (ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)  Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'неверный номер основной записи. Ожидается номер: %1'"), ОжидаемыйНомерОсновнойЗаписи);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "НомерОсновнойЗаписи");
						КонецЕсли;
					КонецЕсли;	
				Иначе
					ОжидаемыйНомерДополнительнойЗаписи = ПредыдущийНомерДополнительнойЗаписи +1;
					Если (ВыборкаПоСтрокамДокумента.НомерДополнительнойЗаписи <> ОжидаемыйНомерДополнительнойЗаписи)  Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'неверный номер дополнительной записи. Ожидается номер: %1'"), ОжидаемыйНомерДополнительнойЗаписи);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "НомерДополнительнойЗаписи");
					КонецЕсли;
				КонецЕсли;
				
				//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
				
				// Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
				УказаныТерриториальныеУсловия = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТерриториальныеУсловия);
				
				// Признаки заполнения реквизитов группы "Особые условия труда"
				УказанКодПозицииСписка = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.КодПозицииСписка);
				УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда);
				ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
				
				// Признаки заполнения реквизитов группы "Исчисляемый стаж"
				УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа);
				УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа);
				ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
				
				// Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
				УказанПараметрИсчисляемогоСтажа1 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа); 
				УказанПараметрИсчисляемогоСтажа2 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа); 
				ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
				
				// Признаки заполнения реквизитов группы "ВыслугаЛет"
				УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет);
				ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
				
				//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
				
				Если НЕ ЭтоОсновнаяЗапись Тогда
					ДокументыСЗВПроверитьДополнительнойЗаписиСтажа(Ошибки, Ссылка, ВыборкаПоСтрокамДокумента, ТекущаяОсновнаяЗапись, ВыборкаПоСтрокамДокумента.НомерСтрокиСотрудник, НомерСтроки, Отказ);
				КонецЕсли;	 
				
				// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
				
				Если УказаныТерриториальныеУсловия Тогда
					ПредставлениеЗначения = ""+ СОКРЛП(ВыборкаПоСтрокамДокумента.ТерриториальныеУсловияКод);
					Если СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанные в дополнительной записи территориальные условия %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТерриториальныеУсловия");
					Иначе	
						СписокТерриториальныеУсловияЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если УказаныОсобыеУсловияТруда Тогда
					ПредставлениеЗначения = СОКРЛП(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТрудаКод);
					Если СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанные в дополнительной записи условия труда %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ОсобыеУсловияТруда");
					Иначе	
						СписокУсловияТрудаЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	 
				
				Если УказаноОснованиеВыслугиЛет Тогда
					ПредставлениеЗначения = СОКРЛП(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод);
					Если СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'указанный в дополнительной записи код выслуги лет %1 не должны повторяться в рамках одной основной записи.'"), ПредставлениеЗначения);     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ОснованиеВыслугиЛет");
					Иначе	
						СписокВыслугаЛетЗаписи.Добавить(ПредставлениеЗначения);
					КонецЕсли;	 
				КонецЕсли;	
				
				//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
				
				КПС = СокрЛП(ВыборкаПоСтрокамДокумента.КодПозицииСпискаКод);
				
				НазваниеСписка ="";
				Если УказанКодПозицииСписка Тогда 
					
					Если НЕ УказаныОсобыеУсловияТруда Тогда
						ТекстОшибки = НСтр("ru = 'код позиции списка не может указываться без указания кода особых условий труда.'");     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
					КонецЕсли;	 
					
					ДлинаКПС = СтрДлина(КПС);
					
					Если (ДлинаКПС=8)ИЛИ(ДлинаКПС=14) Тогда
						
						Первые2СимволаКПС = Лев(КПС,2);
						Если (Первые2СимволаКПС = "10")ИЛИ(Первые2СимволаКПС = "11")ИЛИ(Первые2СимволаКПС = "12") Тогда
							НазваниеСписка = "Список№1";
						ИначеЕсли (Первые2СимволаКПС >= "20")И(Первые2СимволаКПС <= "23") Тогда
							НазваниеСписка = "Список№2";
						Иначе	
							ТекстОшибки = НСтр("ru = 'неверный код позиции списка вредных профессий.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	
						
					ИначеЕсли (ДлинаКПС=5) Тогда
						НазваниеСписка = "ПрочиеСписки";
					Иначе	
						ТекстОшибки = НСтр("ru = 'длина кода позиции списка должна быть равна либо 5, либо 8, либо 14 символам.'");     
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
					КонецЕсли;	 
				КонецЕсли;
				
				Если УказаныОсобыеУсловияТруда Тогда
					
					// Проверки на возможные коды списков для конкретных условий труда
					
					КодОсобыхУсловийТруда = СОКРЛП(ВыборкаПоСтрокамДокумента.ОсобыеУсловияТрудаКод);
					Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
					
					Если ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТрудаПФР.Ст27_1 Тогда
						Если (НазваниеСписка <> "Список№1") Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 должен быть указан код позиции Списка №1.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТрудаПФР.Ст27_2 Тогда
						
						Если (НЕ УказанКодПозицииСписка) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 должен быть указан код позиции Списка №1 или Списка №2.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
						Если (НазваниеСписка = "Список№1") Тогда
							Если (Первые8СимволовКПС <> "1010300Б")И(Первые8СимволовКПС <> "1010100Г")И(Первые8СимволовКПС <> "1010100Д")  Тогда
								ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1  указан неверный код позиции списка.'"), КодОсобыхУсловийТруда);     
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
							КонецЕсли;	
						ИначеЕсли (НазваниеСписка <> "Список№2") Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 указан неверный код позиции списка.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
						
					Иначе
						// Для остальных кодов условий труда КПС указываться не должен
						Если УказанКодПозицииСписка Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для особых условий труда с кодом %1 код позиции списка указываться не должен.'"), КодОсобыхУсловийТруда);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "КодПозицииСписка");
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
				
				УказанПараметр1 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ПервыйПараметрВыслугиЛет);
				УказанПараметр2 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ВторойПараметрВыслугиЛет);
				УказанПараметр3 = ЗначениеЗаполнено(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет);
				ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
				
				Если УказаноОснованиеВыслугиЛет Тогда
					
					КодОснования = СокрЛП(ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛетКод);
					
					УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
					
					// Медицинские работники
					Если (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМ) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГД)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_СМХР)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ГДХР) Тогда
						
						Если ДоляСтавкиУказанаНеверно(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр должен содержать долю ставки (число от 0.1 до 2)'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						Иначе
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 должен указываться только третий параметр'"), КодОснования);  
							Если УказанПараметр1 Тогда    
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
							КонецЕсли;	
							Если УказанПараметр2 Тогда
								ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");	
							КонецЕсли;	
						КонецЕсли;	
						
						// Педагогические работники	
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПД Тогда
						
						Если УказанПараметр2 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 второй параметр указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка,  ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						ИначеЕсли ДоляСтавкиУказанаНеверно(ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр должен содержать долю ставки (число от 0.1 до 2).'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
					ИначеЕсли ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_ПДРК Тогда
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 второй параметр указываться не должен.'"), КодОснования);
						Если УказанПараметр2 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");	
						ИначеЕсли УказанПараметр3 
							И ВыборкаПоСтрокамДокумента.ТретийПараметрВыслугиЛет <> 1 Тогда
							
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 третий параметр может содержать только ставку равную 0 или 1.'"), КодОснования);
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
						//Летчики
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.САМОЛЕТ) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.СПЕЦАВ)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСИСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ЛЕТИСП) 
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИНСПЕКТ)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ОПЫТИСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИСПКЛС1)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСМАВ)Тогда
						
						Если  УказанПараметр3 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметр 3 указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	 
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры 1 и 2 должны содержать отработанное время (часы и минуты).'"), КодОснования);  
						Если  (НЕ УказанПараметр1) И (НЕ УказанПараметр2) Тогда   
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;		
						//Парашютисты	
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.РЕАКТИВН)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМСП)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.НОРМАПР) Тогда	
						
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры 2 и 3 указываться не должны.'"), КодОснования);
						Если УказанПараметр2 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
						
						// Управление воздушным движением и  инженерно-технический состав 	
					ИначеЕсли (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_14)
						ИЛИ (ВыборкаПоСтрокамДокумента.ОснованиеВыслугиЛет = Справочники.ОснованияДосрочногоНазначенияПенсии.Ст27_15) Тогда
						
						Если  УказанПараметр3 Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметр 3 указываться не должен.'"), КодОснования);     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ТретийПараметрВыслугиЛет");
						КонецЕсли;	 
						
						// Прочие коды выслуги лет	
					Иначе
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'для основания выслуги лет %1 параметры выслуги лет 1,2,3 указываться не должны.'"), КодОснования); 
						Если УказанПараметр1 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр2 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
					КонецЕсли;	 
				Иначе
					Если ПараметрыУказаны Тогда
						ТекстОшибки = НСтр("ru = 'параметры выслуги лет 1,2,3 без указания основания выслуги лет указываться не должны.'");     
						Если УказанПараметр1 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр2 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрВыслугиЛет");
						КонецЕсли;	
						Если УказанПараметр3 Тогда    
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа,  "ТретийПараметрВыслугиЛет");
						КонецЕсли;	
					КонецЕсли;	 
				КонецЕсли;	 
				
				
				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр).
				Если УказанТретийПараметрИсчисляемогоСтажа Тогда
					
					ЭтоПараметрСПравомНаДосрочнуюПенсию = ПараметрыСтажаСПравомНаДосрочнуюПенсию.Найти(ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа) <> Неопределено;
					Если Не ЭтоПараметрСПравомНаДосрочнуюПенсию И (УказаноОснованиеИсчисляемогоСтажа Или ЗаданаГруппаФОВ Или УказаноОснованиеВыслугиЛет Или ЗаданаГруппаУсловияТруда) Тогда
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" группы реквизитов должны быть пустыми: Исчисляемый стаж: основание, Фактически отработанное время, Выслуга лет'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);
	
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					Если ЭтоПараметрСПравомНаДосрочнуюПенсию И ЗаданаГруппаФОВ Тогда
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" группа реквизитов фактически отработанного времени указываться не должна.'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);

						
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					
					Если (ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕСЯЦ Или ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕДНЕТРУД)
						И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаноОснованиеВыслугиЛет И Не ЗаданаГруппаУсловияТруда И Не УказаныТерриториальныеУсловия Тогда
				
						ШаблонТекстаОшибки = НСтр("ru = 'при указании третьего параметра исчисляемого стажа ""%1"" обязательно заполнение хотя бы одной из групп реквизитов ""Условия труда"", ""Исчисление стажа: код"", ""Досрочное назначение пенсии"".'");  
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ШаблонТекстаОшибки,
												ВыборкаПоСтрокамДокумента.ТретийПараметрИсчисляемогоСтажаКод);
	
						ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа);
					КонецЕсли;
					
				КонецЕсли;	
						 				
				//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
				
				Если ЗаданаГруппаФОВ Тогда
					Если (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
						И (НЕ УказаныТерриториальныеУсловия)  Тогда
						
						ТекстОшибки = НСтр("ru = 'параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов (Территориальные условия, Условия труда, Исчисляемый стаж: основание).'");
						
						Если УказанПараметрИсчисляемогоСтажа1 Тогда
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");
						КонецЕсли;
						Если УказанПараметрИсчисляемогоСтажа2 Тогда
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрИсчисляемогоСтажа");
						КонецЕсли;
					КонецЕсли;	
					
					Если ВыборкаПоСтрокамДокумента.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоСтраховогоСтажа.ВОДОЛАЗ Тогда
						
						Если ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа > 11 Тогда
							ТекстОшибки = НСтр("ru = 'первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");							
						КонецЕсли;	 	
						Если ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа > 30 Тогда
							ТекстОшибки = НСтр("ru = 'второй параметр исчисляемого стажа (Дни) не должен быть больше 30.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ВторойПараметрИсчисляемогоСтажа");
						КонецЕсли;	 	
						
						Лет = 0;
						Месяцев = 0;
						Дней = 0;
						ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);			
						ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
						КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
						ФОВДляСравнения = ВыборкаПоСтрокамДокумента.ПервыйПараметрИсчисляемогоСтажа *30 + ВыборкаПоСтрокамДокумента.ВторойПараметрИсчисляемогоСтажа; 
						
						Если (ФОВДляСравнения > КалендарноеВремя) Тогда
							ТекстОшибки = НСтр("ru = 'указанное фактически отработанное время превышает календарное время.'");     
							ДокументыСЗВДобавитьОшибкуСтажа(Ошибки, ТекстОшибки, Ссылка, ВыборкаПоСтрокамДокумента, Отказ, РасширеннаяПроверкаСтажа, "ПервыйПараметрИсчисляемогоСтажа");
						КонецЕсли;	
					КонецЕсли;	 
					
				КонецЕсли;
				
			КонецЕсли;
			
			//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
			
			// Запомним для следующей итерации
			ПредыдущийНомерОсновнойЗаписи = ВыборкаПоСтрокамДокумента.НомерОсновнойЗаписи;
			ПредыдущийНомерДополнительнойЗаписи = ВыборкаПоСтрокамДокумента.НомерДополнительнойЗаписи;
			
		КонецЦикла;//Цикл по записям стажа сотрудника	
	КонецЕсли;						
КонецПроцедуры	

Функция ДопустимыеЗначенияТретьегоПараметраИсчисляемогоСтажа(ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь) Экспорт
	ПараметрыИсчисляемогоСтраховогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа;	
	
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.ДЕКРЕТ, Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИ, Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.АДМИНИСТР, Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.ВРНЕТРУД, Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.ДЛДЕТИ, Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.ЧАЭС, Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛ, Истина);
	ДопустимыеЗначенияТретьегоПараметра.Вставить(ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК, Истина);
	
	Возврат ДопустимыеЗначенияТретьегоПараметра;
КонецФункции	
	
Функция КодПериодаДляРасчетаРСВ1(ОтчетныйПериод) Экспорт
	
	Если ОтчетныйПериод < '20140101' Тогда
		Возврат	ОписаниеОтчетногоПериодаДляФайла(ОтчетныйПериод).Квартал
	Иначе
		Возврат	ОписаниеОтчетногоПериодаДляФайла2014(ОтчетныйПериод).Квартал
	КонецЕсли;
	
КонецФункции

Функция ПроверяемыеПоляОрганизации() Экспорт
	ПроверяемыеПоля = Новый Массив;
	ПроверяемыеПоля.Добавить("НаименованиеПолное");
	ПроверяемыеПоля.Добавить("НаименованиеСокращенное");
	ПроверяемыеПоля.Добавить("РегистрационныйНомерПФР");
	ПроверяемыеПоля.Добавить("КПП");
	ПроверяемыеПоля.Добавить("ИНН");
	
	Возврат ПроверяемыеПоля;	
КонецФункции

#Область ПроцедурыИФункцииПроверкиФайловСтороннимиПрограммами

Процедура ПроверитьФайлыСтороннимиПрограммами(СтруктураПараметров, АдресХранилища) Экспорт
	УстановитьПривилегированныйРежим(Истина);

	СоответствиеФайловПротоколамПроверкиCheckXML = Новый Соответствие;
	СоответствиеФайловПротоколамПроверкиCheckUFA = Новый Соответствие;
	СоответствиеФайловПротоколамПроверкиПОПД = Новый Соответствие;
	
	РезультатыПроверки = Новый Структура;
	РезультатыПроверки.Вставить("ПротоколыCheckXML", СоответствиеФайловПротоколамПроверкиCheckXML); 
	РезультатыПроверки.Вставить("ПротоколыCheckUFA", СоответствиеФайловПротоколамПроверкиCheckUFA); 
	РезультатыПроверки.Вставить("ПротоколыПОПД", СоответствиеФайловПротоколамПроверкиCheckUFA); 
	
	Если СтруктураПараметров.ПроверятьПрограммойCheckXML 
		И СтруктураПараметров.ФайлПрограммыCheckXMLОбнаружен Тогда
		
		Для Каждого ОписаниеФайла Из СтруктураПараметров.ОписаниеПроверяемыхФайлов Цикл
			Если Не ОписаниеФайла.ПроверятьCheckXML Тогда
				Продолжить;
			КонецЕсли;	
			
			ПутьКФайлу = СтруктураПараметров.ПутиКФайлам[ОписаниеФайла.Владелец];
			
			Если ЗначениеЗаполнено(ПутьКФайлу) Тогда 
				
				ТекстПротокола = ПроверитьФайлыПрограммойCheckXML(
									СтруктураПараметров.КаталогПрограммыСheckXml, 
									СтруктураПараметров.КаталогФайлов, 
									ПутьКФайлу,
									ОписаниеФайла.ИмяФайла);
				
				Если ЗначениеЗаполнено(ТекстПротокола) Тогда
					СоответствиеФайловПротоколамПроверкиCheckXML.Вставить(ОписаниеФайла.Владелец, ТекстПротокола);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не удалось проверить файл %1 программой CheckXML'"),
										ОписаниеФайла.ИмяФайла);
										
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЕсли;	
	
	Если СтруктураПараметров.ПроверятьПрограммойCheckUFA
		И СтруктураПараметров.ФайлПрограммыCheckUFAОбнаружен Тогда
		
		Для Каждого ОписаниеФайла Из СтруктураПараметров.ОписаниеПроверяемыхФайлов Цикл
			
			Если Не ОписаниеФайла.ФайлВСоставеКомплекта 
				Или ОписаниеФайла.ПроверяемыйФайлКомплекта Тогда
			
				ПутьКФайлу = СтруктураПараметров.ПутиКФайлам[ОписаниеФайла.Владелец];
				
				Если ЗначениеЗаполнено(ПутьКФайлу) Тогда 

					ТекстПротокола = ПроверитьФайлыПрограммойCheckUFA(СтруктураПараметров.КаталогПрограммыСheckUFA, СтруктураПараметров.КаталогФайлов, ПутьКФайлу);
					
					Если ЗначениеЗаполнено(ТекстПротокола) Тогда
						СоответствиеФайловПротоколамПроверкиCheckUFA.Вставить(ОписаниеФайла.Владелец, ТекстПротокола);
					Иначе
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не удалось проверить файл %1 программой CheckUFA'"),
										ОписаниеФайла.ИмяФайла);
										
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
					КонецЕсли;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЕсли;	
	
	Если СтруктураПараметров.ПроверятьПрограммойПОПД
		И СтруктураПараметров.ФайлПрограммыПОПДОбнаружен Тогда
		
		Для Каждого ОписаниеФайла Из СтруктураПараметров.ОписаниеПроверяемыхФайлов Цикл
			
			Если Не ОписаниеФайла.ПроверятьПОПД Тогда
				Продолжить;
			КонецЕсли;	
			
			ПутьКФайлу = СтруктураПараметров.ПутиКФайлам[ОписаниеФайла.Владелец];
			
			Если ЗначениеЗаполнено(ПутьКФайлу) Тогда 
				
				ТекстПротокола = ПроверитьФайлыПрограммойПОПД(
									СтруктураПараметров.КаталогПрограммыПОПД, 
									СтруктураПараметров.КаталогФайлов, 
									ПутьКФайлу);
				
				Если ЗначениеЗаполнено(ТекстПротокола) Тогда
					СоответствиеФайловПротоколамПроверкиПОПД.Вставить(ОписаниеФайла.Владелец, ТекстПротокола);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не удалось проверить файл %1 программой ПО ПД'"),
										ОписаниеФайла.ИмяФайла);
										
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЕсли;	
	
	УдалитьФайлы(СтруктураПараметров.КаталогФайлов);

	ПоместитьВоВременноеХранилище(РезультатыПроверки, АдресХранилища);
КонецПроцедуры	

Функция ПроверитьФайлыПрограммойCheckUFA(КаталогПрограммы, КаталогФайлов, ПроверяемыйФайл)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ТекстИсключения = НСтр("ru = 'Проверка файлов отчетности на сервере не возможная.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	ЗапуститьПриложение(КаталогПрограммы + "\Check.exe "+ """" + ПроверяемыйФайл + """", , Истина);
	
	НайденныеФайлы = НайтиФайлы(КаталогФайлов, "*.log.html"); 
	
	Если НайденныеФайлы.Количество() > 0 Тогда 
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(НайденныеФайлы[0].ПолноеИмя);
		ТекстПротокола = ТекстовыйДокумент.ПолучитьТекст();

		УдалитьФайлы(КаталогФайлов, "*.log.html");
	КонецЕсли;	
	
	Возврат ТекстПротокола;
		
КонецФункции	

Функция ПроверитьФайлыПрограммойCheckXML(КаталогПрограммы, КаталогФайлов, ПроверяемыйФайл, ИмяФайла)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ТекстИсключения = НСтр("ru = 'Проверка файлов отчетности на сервере не возможная.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	ЗапуститьПриложение(КаталогПрограммы + "\CheckXML.exe """+ ПроверяемыйФайл + """", КаталогПрограммы, Истина);
	ИмяФайлаРезультатаПроверки = КаталогПрограммы + "\LOG\" + СтрЗаменить(ВРег(ИмяФайла), ".XML", "-LOG.HTML");
	
	Файл = Новый Файл(ИмяФайлаРезультатаПроверки);
	                                                                                                              
	Если Файл.Существует() Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ИмяФайлаРезультатаПроверки);
		ТекстПротокола = ТекстовыйДокумент.ПолучитьТекст();

		УдалитьФайлы(Файл.ПолноеИмя);	
		
		Возврат ТекстПротокола;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;		
КонецФункции	

Функция ПроверитьФайлыПрограммойПОПД(КаталогПрограммы, КаталогФайлов, ПроверяемыйФайл)
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ТекстИсключения = НСтр("ru = 'Проверка файлов отчетности на сервере не возможна.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
	
	ЗапуститьПриложение(КаталогПрограммы + "\run.cmd -s " + ПроверяемыйФайл + " -o " + КаталогФайлов + "\", КаталогФайлов, Истина);
	
	НайденныеФайлы = НайтиФайлы(КаталогФайлов, "*УППО*.html"); 
	
	Если НайденныеФайлы.Количество() > 0 Тогда 
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(НайденныеФайлы[0].ПолноеИмя, КодировкаТекста.UTF8);
		ТекстПротокола = ТекстовыйДокумент.ПолучитьТекст();
		УдалитьФайлы(КаталогФайлов, "*УППО*.html");
	КонецЕсли;	
	
	Возврат ТекстПротокола;

КонецФункции

Функция ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(Дата) Экспорт

	СмещениеВСекундах = СмещениеСтандартногоВремени();
	ЗнакЧасовогоПояса = ?(СмещениеВСекундах < 0, "-", "+");
	ПоложительноеСмещениеВСекундах = ?(СмещениеВСекундах < 0, -СмещениеВСекундах, СмещениеВСекундах);
	
	Возврат Формат(Дата, "ДФ=yyyy-MM-ddTЧЧ:мм:сс; ДП=0001-01-01T00:00:00") + ?(ЗначениеЗаполнено(ПоложительноеСмещениеВСекундах), ЗнакЧасовогоПояса + Формат('00010101' + ПоложительноеСмещениеВСекундах, "ДФ=чч:мм"), "Z")

КонецФункции 

#КонецОбласти

#Область ЗапросВФНСНаПроверкуСведенийРаботников

Процедура ПолучитьДанныеДляЗапросаВФНСНаПроверкуСведенийРаботников(ПараметрыЗапросаВФНС) Экспорт
	
	Организация = ПараметрыЗапросаВФНС.Организация;
	ДатаПодписи = ТекущаяДатаСеанса();
	Если ПараметрыЗапросаВФНС.Свойство("ДатаПодписи") Тогда
		ДатаПодписи = ПараметрыЗапросаВФНС.ДатаПодписи;
	КонецЕсли;
	
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаПодписи);
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");
	СтруктураДанныхНА = УчетНДФЛ.СправкиНДФЛДанныеНалоговогоАгента(Организация, Год(ТекущаяДата()), РегистрацияВНалоговомОргане, ДатаПодписи, "", Справочники.Должности.ПустаяСсылка(), "");

	ОрганизацияЭтоФизЛицо = Не СтруктураДанныхНА.ЭтоЮрЛицо;
	
	ПараметрыЗапросаВФНС.Вставить("КодНалоговогоОргана", КодИФНС);
	ПараметрыЗапросаВФНС.Вставить("ИНН", СтруктураДанныхНА.ИННорг);
	ПараметрыЗапросаВФНС.Вставить("КПП", ?( СтруктураДанныхНА.ЭтоЮрЛицо , СтруктураДанныхНА.КПП, ""));
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьСвязиПараметровВыбораСотрудников(ЭлементФормы) Экспорт 
	
	ПерсонифицированныйУчетВнутренний.УстановитьСвязиПараметровВыбораСотрудников(ЭлементФормы);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораТерриториальныхУсловий(Элементы, ИмяЭлементаТерриториальныеУсловия, ИсключаемыеУсловия = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТерриториальныеУсловияПФР.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ТерриториальныеУсловияПФР КАК ТерриториальныеУсловияПФР
	               |ГДЕ
	               |	НЕ ТерриториальныеУсловияПФР.Ссылка В (&ИсключаемыеЗначения)";
	
	ИсключаемыеЗначения = Новый Массив;
	ИсключаемыеЗначения.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.ЗАГР"));
	Если ИсключаемыеУсловия <> Неопределено Тогда 
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсключаемыеЗначения, ИсключаемыеУсловия);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсключаемыеЗначения", ИсключаемыеЗначения);
	
	ТерриториальныеУсловия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ТерриториальныеУсловия)));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		ИмяЭлементаТерриториальныеУсловия, "ПараметрыВыбора", Новый ФиксированныйМассив(ПараметрыВыбора));

КонецПроцедуры

Процедура УстановитьПараметрыВыбораОснованияИсчисляемогоСтраховогоСтажа(Элементы, ИмяЭлемента, Период) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияИсчисляемогоСтраховогоСтажа.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ОснованияИсчисляемогоСтраховогоСтажа КАК ОснованияИсчисляемогоСтраховогоСтажа
	               |ГДЕ
	               |	НЕ ОснованияИсчисляемогоСтраховогоСтажа.Ссылка В (&ИсключаемыеЗначения)";
	
	ИсключаемыеЗначения = Новый Массив;
	Если Период < '20200101' Тогда
		ИсключаемыеЗначения.Добавить(ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ОснованияИсчисляемогоСтраховогоСтажа.ВИРУС"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИсключаемыеЗначения", ИсключаемыеЗначения);
	
	Основания = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(Основания)));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		ИмяЭлемента, "ПараметрыВыбора", Новый ФиксированныйМассив(ПараметрыВыбора));

КонецПроцедуры

Процедура ПроверитьДанныеСотрудников(Сотрудники, НачалоПериода, ОкончаниеПериода, ЗаписиОСтаже, Отказ, Ошибки = Неопределено) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.НомерСтроки КАК НомерСтроки,
	               |	Сотрудники.Сотрудник КАК Сотрудник,
	               |	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР
	               |ПОМЕСТИТЬ ВТСотрудники
	               |ИЗ
	               |	&Сотрудники КАК Сотрудники
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Сотрудники.НомерСтроки КАК НомерСтроки,
	               |	Сотрудники.Сотрудник КАК Сотрудник,
	               |	Сотрудники.Сотрудник.ИНН КАК ИНН,
	               |	Сотрудники.СтраховойНомерПФР КАК СтраховойНомерПФР
	               |ИЗ
	               |	ВТСотрудники КАК Сотрудники";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УникальныеИНН = Новый Соответствие;
	УникальныеСтраховыеНомера = Новый Соответствие;
	
	СписокСотрудников = Новый Соответствие;
	Для Каждого ЗаписьОСтаже Из ЗаписиОСтаже Цикл 
		ПериодЗаполненКорректно = СписокСотрудников[Выборка.Сотрудник];
		Если ПериодЗаполненКорректно = Неопределено Тогда 
			ПериодЗаполненКорректно = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаписьОСтаже.ДатаНачалаПериода) И ЗначениеЗаполнено(ЗаписьОСтаже.ДатаОкончанияПериода) 
			И (ЗаписьОСтаже.ДатаНачалаПериода < НачалоПериода Или ЗаписьОСтаже.ДатаОкончанияПериода > ОкончаниеПериода) Тогда 
			ПериодЗаполненКорректно = Ложь;
		КонецЕсли;
		СписокСотрудников.Вставить(ЗаписьОСтаже.Сотрудник, ПериодЗаполненКорректно);
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		ПериодЗаполненКорректно = СписокСотрудников[Выборка.Сотрудник];
		Если ПериодЗаполненКорректно = Неопределено Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка %1: для сотрудника %2 не указаны сведения о стаже.'"),
				Выборка.НомерСтроки, Выборка.Сотрудник);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, ,
				"Объект.Сотрудники[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].НомерСтроки" , , Отказ);
		ИначеЕсли ПериодЗаполненКорректно = Ложь Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка %1: для сотрудника %2 период стажа выходит за границы отчетного (корректируемого) периода.'"),
				Выборка.НомерСтроки, Выборка.Сотрудник);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, ,
				"Объект.Сотрудники[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].НомерСтроки" , , Отказ);
		КонецЕсли;
		ПроверитьДанныеСтрокиСотрудника(Выборка, УникальныеИНН, УникальныеСтраховыеНомера, Отказ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДанныеСтрокиСотрудника(ДанныеСотрудника, УникальныеИНН, УникальныеСтраховыеНомера, Отказ, ИмяПоляИНН = "НомерСтроки", Ошибки = Неопределено) Экспорт 
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.СтраховойНомерПФР) Тогда 
		Если УникальныеСтраховыеНомера[ДанныеСотрудника.СтраховойНомерПФР] <> Неопределено Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка %1: СНИЛС %2 уже был введен ранее в строке %3.'"),
				ДанныеСотрудника.НомерСтроки, ДанныеСотрудника.СтраховойНомерПФР, УникальныеСтраховыеНомера[ДанныеСотрудника.СтраховойНомерПФР]);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, ,
				"Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].СтраховойНомерПФР" , , Отказ);
		Иначе 
			УникальныеСтраховыеНомера.Вставить(ДанныеСотрудника.СтраховойНомерПФР, ДанныеСотрудника.НомерСтроки);
		КонецЕсли;
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(ДанныеСотрудника.СтраховойНомерПФР, ТекстСообщения) Тогда 
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, ,
				"Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].СтраховойНомерПФР" , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСотрудника.ИНН) Тогда 
		Если УникальныеИНН[ДанныеСотрудника.ИНН] <> Неопределено Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Строка %1: сотрудник с ИНН %2 был введен ранее в строке %3.'"),
				ДанныеСотрудника.НомерСтроки, ДанныеСотрудника.ИНН, УникальныеИНН[ДанныеСотрудника.ИНН]);
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, ,
				"Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяПоляИНН, , Отказ);
		Иначе 
			УникальныеИНН.Вставить(ДанныеСотрудника.ИНН, ДанныеСотрудника.НомерСтроки);
		КонецЕсли;
		ТекстСообщения = "";
		Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ДанныеСотрудника.ИНН, Ложь, ТекстСообщения) Тогда 
			ОбщегоНазначенияБЗК.ДобавитьОшибкуЗаполненияДокумента(Ошибки, ТекстСообщения, ,
				"Объект.Сотрудники[" + Формат(ДанныеСотрудника.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "]." + ИмяПоляИНН, , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеСтрокСовпадают(ПерваяСтрока, ВтораяСтрока, ПроверяемыеРеквизиты) Экспорт 
	
	Для Каждого ИмяРеквизита Из ПроверяемыеРеквизиты Цикл 
		Если Не ЗначениеЗаполнено(ПерваяСтрока[ИмяРеквизита]) И Не ЗначениеЗаполнено(ВтораяСтрока[ИмяРеквизита]) Тогда 
			Продолжить;
		КонецЕсли;
		Если ПерваяСтрока[ИмяРеквизита] <> ВтораяСтрока[ИмяРеквизита] Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура СоздатьВТДанныеСтажаСотрудников(МенеджерВременныхТаблиц, Организация, ОтчетныйПериод) Экспорт 
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(
		МенеджерВременныхТаблиц, 
		ОтчетныйПериод, 
		КонецГода(ОтчетныйПериод),
		"МЕСЯЦ",
		"Месяц",
		"ВТМесяцы");
		
	Авиация = Новый Массив;
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИНСПЕКТ);
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИСПКЛС1);
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСИСП);
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ИТСМАВ);
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ЛЕТИСП);
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.ОПЫТИСП);
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.САМОЛЕТ);
	Авиация.Добавить(Справочники.ОснованияДосрочногоНазначенияПенсии.СПЕЦАВ);
	
	Отсутствия = Новый Массив;
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.АДМИНИСТР);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВАХТА);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ВРНЕТРУД);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕКРЕТ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИПРЛ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛДЕТИ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОПВЫХ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.КВАЛИФ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕДНЕТРУД);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.МЕСЯЦ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ОБЩЕСТ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ОТСТРАН);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ПРОСТОЙ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.СДКРОВ);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.УЧОТПУСК);
	Отсутствия.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ЧАЭС);
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Отпуск", Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЛОТПУСК);
	Запрос.УстановитьПараметр("Авиация", Авиация);
	Запрос.УстановитьПараметр("Отсутствия", Отсутствия);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Месяцы.Месяц КАК Месяц,
	               |	ДанныеСтажаПФР.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ДанныеСтажаПФР.ДатаНачалаПериода КАК ИсходныйПериодНачало,
	               |	ДанныеСтажаПФР.ДатаОкончанияПериода КАК ИсходныйПериодОкончание,
	               |	ВЫБОР
	               |		КОГДА Месяцы.Месяц > ДанныеСтажаПФР.ДатаНачалаПериода
	               |			ТОГДА Месяцы.Месяц
	               |		ИНАЧЕ ДанныеСтажаПФР.ДатаНачалаПериода
	               |	КОНЕЦ КАК НачалоПериода,
	               |	ВЫБОР
	               |		КОГДА КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ) < КОНЕЦПЕРИОДА(ДанныеСтажаПФР.ДатаОкончанияПериода, ДЕНЬ)
	               |			ТОГДА КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ)
	               |		ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеСтажаПФР.ДатаОкончанияПериода, ДЕНЬ)
	               |	КОНЕЦ КАК ОкончаниеПериода
	               |ПОМЕСТИТЬ ВТПериодыОтпусков
	               |ИЗ
	               |	ВТМесяцы КАК Месяцы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДанныеСтажаПФР КАК ДанныеСтажаПФР
	               |		ПО Месяцы.Месяц <= ДанныеСтажаПФР.ДатаОкончанияПериода
	               |			И (КОНЕЦПЕРИОДА(Месяцы.Месяц, МЕСЯЦ) >= ДанныеСтажаПФР.ДатаНачалаПериода)
	               |			И (ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа = &Отпуск)";
		
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПериодыОтпусков.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТОтборФизическихЛиц
				   |ИЗ
	               |	ВТПериодыОтпусков КАК ПериодыОтпусков";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.НачалоПериода = ОтчетныйПериод; 
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецГода(ОтчетныйПериод); 
	ПараметрыПолученияСотрудников.КадровыеДанные = "ФизическоеЛицо";
	ПараметрыПолученияСотрудников.ИмяВТФизическиеЛица = "ВТОтборФизическихЛиц";
	
	Если ПараметрыПолученияСотрудников.Свойство("РаботникиПоДоговорамГПХ") Тогда
		ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;	
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	               |	ПериодыОтпусков.НачалоПериода КАК Период
	               |ПОМЕСТИТЬ ВТОтборСотрудников
				   |ИЗ
	               |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыОтпусков КАК ПериодыОтпусков
	               |		ПО СотрудникиОрганизации.ФизическоеЛицо = ПериодыОтпусков.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, "ВТОтборСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ФизическоеЛицо,ЯвляетсяРаботникомСДосрочнойПенсией");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	КадровыеДанныеСотрудников.Период КАК Период,
	               |	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТВредныеУсловия
	               |ИЗ
	               |	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	               |ГДЕ
	               |	КадровыеДанныеСотрудников.ЯвляетсяРаботникомСДосрочнойПенсией <> ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)";
	
	Запрос.Выполнить();
	
	ВзносыНеНачислены = Новый ТаблицаЗначений;
	ВзносыНеНачислены.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
	ВзносыНеНачислены.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	НАЧАЛОПЕРИОДА(ВредныеУсловия.Период, МЕСЯЦ) КАК Период
	               |ИЗ
	               |	ВТВредныеУсловия КАК ВредныеУсловия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Выборка.Период)); 
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	КОНЕЦПЕРИОДА(ВредныеУсловия.Период, МЕСЯЦ) КАК Период,
		               |	ВредныеУсловия.ФизическоеЛицо КАК ФизическоеЛицо
		               |ПОМЕСТИТЬ ВТФизическиеЛица
		               |ИЗ
		               |	ВТВредныеУсловия КАК ВредныеУсловия ГДЕ КОНЕЦПЕРИОДА(ВредныеУсловия.Период, МЕСЯЦ) = &КонецМесяца";
		
		Запрос.Выполнить();
		
		УстановитьПривилегированныйРежим(Истина);
		УчетСтраховыхВзносов.СформироватьВТДанныеОФактеНачисленияВзносовВПФР(
			МенеджерВременныхТаблиц,
			Организация,
			Выборка.Период,
			КонецМесяца(Выборка.Период));
		УстановитьПривилегированныйРежим(Ложь);
			
		Запрос.Текст = "ВЫБРАТЬ
		               |	ДанныеОФактеНачисленияВзносов.ФизическоеЛицо КАК ФизическоеЛицо
		               |ИЗ
		               |	ВТДанныеОФактеНачисленияВзносов КАК ДанныеОФактеНачисленияВзносов
		               |ГДЕ
		               |	НЕ ДанныеОФактеНачисленияВзносов.НачисленоПоДополнительнымТарифам";
			
		ВыборкаПоФизическимЛицам = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоФизическимЛицам.Следующий() Цикл 
			НоваяСтрока = ВзносыНеНачислены.Добавить();
			НоваяСтрока.Месяц = Выборка.Период;
			НоваяСтрока.ФизическоеЛицо = ВыборкаПоФизическимЛицам.ФизическоеЛицо;
		КонецЦикла;
		
		ИменаВТ = Новый Массив;
		ИменаВТ.Добавить("ВТФизическиеЛица");
		ИменаВТ.Добавить("ВТДанныеОФактеНачисленияВзносов");
		ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, ИменаВТ);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ВзносыНеНачислены", ВзносыНеНачислены);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзносыНеНачислены.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВзносыНеНачислены.Месяц КАК Месяц
	               |ПОМЕСТИТЬ ВТВзносыНеНачислены
	               |ИЗ
	               |	&ВзносыНеНачислены КАК ВзносыНеНачислены
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПериодыОтпусков.ИсходныйПериодНачало КАК ИсходныйПериодНачало,
	               |	ПериодыОтпусков.ИсходныйПериодОкончание КАК ИсходныйПериодОкончание,
	               |	ПериодыОтпусков.НачалоПериода КАК НачалоПериода
	               |ПОМЕСТИТЬ ВТДлительныеОтпуска
	               |ИЗ
	               |	ВТПериодыОтпусков КАК ПериодыОтпусков
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВзносыНеНачислены КАК ВзносыНеНачислены
	               |		ПО ПериодыОтпусков.Месяц = ВзносыНеНачислены.Месяц
	               |			И ПериодыОтпусков.ФизическоеЛицо = ВзносыНеНачислены.ФизическоеЛицо
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВредныеУсловия КАК ВредныеУсловия
	               |		ПО ПериодыОтпусков.НачалоПериода = ВредныеУсловия.Период
	               |			И ПериодыОтпусков.ФизическоеЛицо = ВредныеУсловия.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПериодыОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПериодыОтпусков.ИсходныйПериодНачало КАК ИсходныйПериодНачало,
	               |	ПериодыОтпусков.ИсходныйПериодОкончание КАК ИсходныйПериодОкончание
	               |ПОМЕСТИТЬ ВТИсходныеПериодыОтпусков
	               |ИЗ
	               |	ВТПериодыОтпусков КАК ПериодыОтпусков
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПериодыОтпусков.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПериодыОтпусков.ИсходныйПериодНачало КАК ИсходныйПериодНачало,
	               |	ПериодыОтпусков.ИсходныйПериодОкончание КАК ИсходныйПериодОкончание,
	               |	ПериодыОтпусков.НачалоПериода КАК НачалоПериода,
	               |	ПериодыОтпусков.ОкончаниеПериода КАК ОкончаниеПериода,
	               |	ВЫБОР
	               |		КОГДА ДлительныеОтпуска.ФизическоеЛицо ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.ПустаяСсылка)
	               |		ИНАЧЕ &Отпуск
	               |	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа
	               |ПОМЕСТИТЬ ВТИзмененныеПериоды
	               |ИЗ
	               |	ВТПериодыОтпусков КАК ПериодыОтпусков
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИсходныеПериодыОтпусков КАК ИсходныеПериодыОтпусков
	               |		ПО ПериодыОтпусков.ФизическоеЛицо = ИсходныеПериодыОтпусков.ФизическоеЛицо
	               |			И ПериодыОтпусков.ИсходныйПериодНачало = ИсходныеПериодыОтпусков.ИсходныйПериодНачало
	               |			И ПериодыОтпусков.ИсходныйПериодОкончание = ИсходныеПериодыОтпусков.ИсходныйПериодОкончание
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТДлительныеОтпуска КАК ДлительныеОтпуска
	               |		ПО ПериодыОтпусков.ФизическоеЛицо = ДлительныеОтпуска.ФизическоеЛицо
	               |			И ПериодыОтпусков.ИсходныйПериодНачало = ДлительныеОтпуска.ИсходныйПериодНачало
	               |			И ПериодыОтпусков.ИсходныйПериодОкончание = ДлительныеОтпуска.ИсходныйПериодОкончание
	               |			И ПериодыОтпусков.НачалоПериода = ДлительныеОтпуска.НачалоПериода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа = &Отпуск
	               |			ТОГДА ВЫБОР
	               |					КОГДА ИзмененныеПериоды.ТретийПараметрИсчисляемогоСтажа ЕСТЬ NULL
	               |						ТОГДА ДанныеСтажаПФР.ДатаНачалаПериода
	               |					ИНАЧЕ ИзмененныеПериоды.НачалоПериода
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеСтажаПФР.ДатаНачалаПериода
	               |	КОНЕЦ КАК ДатаНачалаПериода,
	               |	ВЫБОР
	               |		КОГДА ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа = &Отпуск
	               |			ТОГДА ВЫБОР
	               |					КОГДА ИзмененныеПериоды.ТретийПараметрИсчисляемогоСтажа ЕСТЬ NULL
	               |						ТОГДА ДанныеСтажаПФР.ДатаОкончанияПериода
	               |					ИНАЧЕ ИзмененныеПериоды.ОкончаниеПериода
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеСтажаПФР.ДатаОкончанияПериода
	               |	КОНЕЦ КАК ДатаОкончанияПериода,
	               |	ВЫБОР
	               |		КОГДА ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа = &Отпуск
	               |			ТОГДА ВЫБОР
	               |					КОГДА ДанныеСтажаПФР.ОснованиеВыслугиЛет В (&Авиация)
	               |						ТОГДА ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.ПустаяСсылка)
	               |					КОГДА ИзмененныеПериоды.ТретийПараметрИсчисляемогоСтажа ЕСТЬ NULL
	               |						ТОГДА ЗНАЧЕНИЕ(Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.ПустаяСсылка)
	               |					ИНАЧЕ ИзмененныеПериоды.ТретийПараметрИсчисляемогоСтажа
	               |				КОНЕЦ
	               |		ИНАЧЕ ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа
	               |	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	               |	ВЫБОР
	               |		КОГДА ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа В (&Отсутствия)
	               |				И ДанныеСтажаПФР.ОснованиеВыслугиЛет В (&Авиация)
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.ОснованияДосрочногоНазначенияПенсии.ПустаяСсылка)
	               |		ИНАЧЕ ДанныеСтажаПФР.ОснованиеВыслугиЛет
	               |	КОНЕЦ КАК ОснованиеВыслугиЛет,
	               |	ДанныеСтажаПФР.*
	               |ПОМЕСТИТЬ ВТДанныеСтажаСотрудников
	               |ИЗ
	               |	ВТДанныеСтажаПФР КАК ДанныеСтажаПФР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмененныеПериоды КАК ИзмененныеПериоды
	               |		ПО ДанныеСтажаПФР.ФизическоеЛицо = ИзмененныеПериоды.ФизическоеЛицо
	               |			И ДанныеСтажаПФР.ДатаНачалаПериода = ИзмененныеПериоды.ИсходныйПериодНачало
	               |			И ДанныеСтажаПФР.ДатаОкончанияПериода = ИзмененныеПериоды.ИсходныйПериодОкончание
	               |			И (ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа = &Отпуск)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ВывестиДанныеОУТ(Выборка, УзелОснование, ФорматОУТ)Экспорт 
	
	Если ЗначениеЗаполнено(Выборка.ОсобыеУсловияТруда) Тогда 
		НаборЗаписейОУТ = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОУТ);
		НаборЗаписейОУТ.Значение.Код = ВРег(СокрЛП(Выборка.ОсобыеУсловияТрудаКод));
		НаборЗаписейОУТ.Значение.ПозицияСписка = ВРег(СокрЛП(Выборка.КодПозицииСпискаКод));
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелОснование, Новый Структура("ОУТ", НаборЗаписейОУТ));
	ИначеЕсли ЗначениеЗаполнено(Выборка.ОснованиеДосрочногоНазначенияПенсии) Тогда
		НаборЗаписейОУТ = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОУТ);
		НаборЗаписейОУТ.Значение.Код = ВРег(СокрЛП(Выборка.ОснованиеДосрочногоНазначенияПенсииКод));
		НаборЗаписейОУТ.Значение.ПозицияСписка = ВРег(СокрЛП(Выборка.КодПозицииСпискаКод));
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелОснование, Новый Структура("ОУТ", НаборЗаписейОУТ));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ОсобыеУсловияТруда) 
		И ЗначениеЗаполнено(Выборка.ОснованиеДосрочногоНазначенияПенсии) Тогда
		НаборЗаписейОУТ = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматОУТ);
		НаборЗаписейОУТ.Значение.Код = ВРег(СокрЛП(Выборка.ОснованиеДосрочногоНазначенияПенсииКод));
		ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелОснование, Новый Структура("ОУТ", НаборЗаписейОУТ));
	КонецЕсли;
	
КонецПроцедуры

#Область ПечатьСЗВ_М

Функция ПечатнаяФормаСЗВМПоДаннымДокументов(ОбъектыПечати, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникиОрганизации, РазбиватьПоСотрудникам = Ложь) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ФормаСЗВ_М");
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_М";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	
	ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка"); 
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакета = Макет.ПолучитьОбласть("СтрокаРаботник"); 
	ОбластьМакетаПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрокаРаботник");
	ОбластьМакетаКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	
	ЭтоПервыйДокументКоллекции = Истина;
	Пока ВыборкаПоШапкеДокумента.Следующий() Цикл
		
		НачалоФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Если ЭтоПервыйДокументКоллекции Тогда
			ЭтоПервыйДокументКоллекции = Ложь;
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("ССылка");
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		
		ОбластьМакетаШапка.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		ОбластьМакетаПодвал.Параметры.Заполнить(ВыборкаПоШапкеДокумента);
		
		Если ВыборкаПоШапкеДокумента.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Исходная Тогда
			ОбластьМакетаШапка.Параметры.ТипФормыСтрокой = "исхд";	
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Дополняющая Тогда
			ОбластьМакетаШапка.Параметры.ТипФормыСтрокой = "доп";
		ИначеЕсли ВыборкаПоШапкеДокумента.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Отменяющая Тогда
			ОбластьМакетаШапка.Параметры.ТипФормыСтрокой = "отмн";	
		КонецЕсли;	
		
		Если Не РазбиватьПоСотрудникам Тогда
			
			ВыведеноСтрок = 0;
			НомерСтраницы = 0;
			
			ТекущийЛист = НовыйПечатныйЛистСЗВМ(ВыборкаПоШапкеДокумента, ДокументРезультат, ОбластьМакетаКолонтитул, НомерСтраницы);
			ТекущийЛист.Вывести(ОбластьМакетаШапка);
			
		КонецЕсли;
		
		Пока ВыборкаПоРаботникиОрганизации.Следующий() Цикл
			
			Если РазбиватьПоСотрудникам Тогда
				
				НачалоБланка = ДокументРезультат.ВысотаТаблицы + 1;
				
				ВыведеноСтрок = 0;
				НомерСтраницы = 0;
				
				ТекущийЛист = НовыйПечатныйЛистСЗВМ(ВыборкаПоШапкеДокумента, ДокументРезультат, ОбластьМакетаКолонтитул, НомерСтраницы);
				ТекущийЛист.Вывести(ОбластьМакетаШапка);
				
			КонецЕсли;
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоРаботникиОрганизации);
			ОбластьМакета.Параметры.НомерПП = ВыведеноСтрок;
			Если ВыборкаПоШапкеДокумента.КоличествоСотрудников > 25 Тогда
				Если ВыведеноСтрок = ВыборкаПоШапкеДокумента.КоличествоСотрудников Тогда 
					ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
				КонецЕсли;
				Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
					ТекущийЛист.Вывести(ОбластьМакета);
				Иначе 
					ДокументРезультат.Вывести(ТекущийЛист);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ТекущийЛист = НовыйПечатныйЛистСЗВМ(ВыборкаПоШапкеДокумента, ДокументРезультат, ОбластьМакетаКолонтитул, НомерСтраницы);
					ТекущийЛист.Вывести(ОбластьМакета);
				КонецЕсли;
			Иначе 
				ТекущийЛист.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если РазбиватьПоСотрудникам Тогда
				
				Если ВыведеноСтрок < 25 Тогда
					Для Сч = ВыведеноСтрок + 1 По 25 Цикл
						ТекущийЛист.Вывести(ОбластьМакетаПустаяСтрока);
					КонецЦикла;
				КонецЕсли;
				ТекущийЛист.Вывести(ОбластьМакетаПодвал);
				ДокументРезультат.Вывести(ТекущийЛист);
				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоБланка, ОбъектыПечати, ВыборкаПоРаботникиОрганизации.Сотрудник);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не РазбиватьПоСотрудникам Тогда
			
			Если ВыведеноСтрок < 25 Тогда
				Для Сч = ВыведеноСтрок + 1 По 25 Цикл
					ТекущийЛист.Вывести(ОбластьМакетаПустаяСтрока);
				КонецЦикла;
			КонецЕсли;
			ТекущийЛист.Вывести(ОбластьМакетаПодвал);
			ДокументРезультат.Вывести(ТекущийЛист);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоФормы, ОбъектыПечати, ВыборкаПоШапкеДокумента.Ссылка);
		
	КонецЦикла;	
	
	Возврат ДокументРезультат
	
КонецФункции

Функция НовыйПечатныйЛистСЗВМ(ВыборкаПоШапкеДокумента, ДокументРезультат, ОбластьМакетаКолонтитул, НомерСтраницы)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = 0;
	ТекущийЛист.ПолеСправа = 0;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	Если ВыборкаПоШапкеДокумента.КоличествоСотрудников <= 25 Тогда 
		Возврат ТекущийЛист;
	КонецЕсли;
	
	РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
	РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
	ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьМакетаКолонтитул, "НомРег", 12);
	
	НомерСтраницы = НомерСтраницы + 1;
	НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 5);
	ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьМакетаКолонтитул, "НомСтр", 5);
	
	ТекущийЛист.Вывести(ОбластьМакетаКолонтитул);
	
	Возврат ТекущийЛист;
	
КонецФункции

#КонецОбласти

#Область ПечатьСЗВ_СТАЖ

Функция ПечатнаяФормаСЗВСТАЖПоДаннымДокументов(ОбъектыПечати, ВыборкаПоШапкеДокумента, ВыборкаПоРаботникам, РазбиватьПоСотрудникам = Ложь) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ФормаСЗВ_СТАЖ_2019");
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СЗВ_СТАЖ";
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ЭтоПервыйДокументКоллекции = Истина;
	
	Пока ВыборкаПоШапкеДокумента.СледующийПоЗначениюПоля("Ссылка") Цикл 
		
		НачалоФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьСтрокаСтажа = Макет.ПолучитьОбласть("СтрокаСтажа");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьСтрокаКодПозицииСписка = Макет.ПолучитьОбласть("СтрокаКодПозицииСписка");
		
		Если ЭтоПервыйДокументКоллекции Тогда
			ЭтоПервыйДокументКоллекции = Ложь;	
		Иначе
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;	
		
		РегистрационныйНомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР," ","");
		РегистрационныйНомерПФР = СтрЗаменить(РегистрационныйНомерПФР,"-","");
		ВывестиДанныеПоБуквенно(РегистрационныйНомерПФР, ОбластьШапка, "НомРег", 12, 13);
		
		ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ВыборкаПоШапкеДокумента.ИНН, 12, "-", "Справа");
		ВывестиДанныеПоБуквенно(ИНН, ОбластьШапка, "ИНН", 12, 13);
		
		ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.КПП,"ЧГ=0"), ОбластьШапка, "КПП", 9, 10);
		
		ВывестиДанныеПоБуквенно(Формат(ВыборкаПоШапкеДокумента.Год,"ЧГ=0"), ОбластьШапка, "Год", 4);
		
		НомерСтраницы = 1;
		НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 5);
		ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьШапка, "НомСтр", 5);
		
		ОбластьШапка.Параметры.Исходная = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Исходная;
		ОбластьШапка.Параметры.Дополняющая = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.Дополняющая;
		ОбластьШапка.Параметры.НазначениеПенсии = ВыборкаПоШапкеДокумента.ТипСведений = Перечисления.ТипыСведенийСЗВ_СТАЖ.НазначениеПенсии;
		
		ОбластьШапка.Параметры.НаименованиеОрганизации = ВыборкаПоШапкеДокумента.НаименованиеОрганизации;
		ОбластьШапка.Параметры.Организация = ВыборкаПоШапкеДокумента.Организация;
		
		Если Не РазбиватьПоСотрудникам Тогда
			
			ТекущийЛист = Новый ТабличныйДокумент;
			ТекущийЛист.ПолеСлева = 0;
			ТекущийЛист.ПолеСправа = 0;
			ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
			
			ТекущийЛист.Вывести(ОбластьШапка);
			ТекущийЛист.Вывести(ОбластьЗаголовок);
			
		КонецЕсли;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьСтрокаСтажа);
		
		ВыборкаПоРаботникам.Сбросить();
		
		Если ВыборкаПоРаботникам.НайтиСледующий(Новый Структура("Ссылка", ВыборкаПоШапкеДокумента.Ссылка)) Тогда
			
			ВыборкаПоРаботникам.СледующийПоЗначениюПоля("Ссылка");
			НомерСтроки = 0;
			
			Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерСтроки") Цикл
				
				Если РазбиватьПоСотрудникам Тогда
					
					НачалоБланка = ДокументРезультат.ВысотаТаблицы + 1;
					НомерСтроки = 0;
					
					ТекущийЛист = Новый ТабличныйДокумент;
					ТекущийЛист.ПолеСлева = 0;
					ТекущийЛист.ПолеСправа = 0;
					ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
					
					ТекущийЛист.Вывести(ОбластьШапка);
					ТекущийЛист.Вывести(ОбластьЗаголовок);
					
				КонецЕсли;
				
				ОчиститьОбласть(ОбластьСтрокаСтажа);
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаСтажа.Параметры, ВыборкаПоРаботникам);
				
				Если ЗначениеЗаполнено(ОбластьСтрокаСтажа.Параметры.СотрудникУволен) Тогда 
					ОбластьСтрокаСтажа.Параметры.СотрудникУволен = Формат(КонецГода(ВыборкаПоШапкеДокумента.ОтчетныйПериод), "ДЛФ=Д");
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтрокаСтажа.Параметры.НомерСтроки = СтрЗаменить(ВыборкаПоРаботникам.НомерСтроки, Символы.НПП, "") + ".";
				
				Если ВыборкаПоРаботникам.ЗаполненСтаж Тогда
					Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерОсновнойЗаписи") Цикл
						Если ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа = Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИПРЛ Тогда 
							ОбластьСтрокаСтажа.Параметры.ТерриториальныеУсловияКод = "";
						КонецЕсли;
						ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок);
						Если ЗначениеЗаполнено(ВыборкаПоРаботникам.КодПозицииСпискаКод) Тогда 
							ЗаполнитьЗначенияСвойств(ОбластьСтрокаКодПозицииСписка.Параметры, ВыборкаПоРаботникам);
							ВывестиОбласть(ОбластьСтрокаКодПозицииСписка, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
						КонецЕсли;
						ОбластьСтрокаСтажа.Параметры.Фамилия = "";
						ОбластьСтрокаСтажа.Параметры.Имя = "";
						ОбластьСтрокаСтажа.Параметры.Отчество = "";
						ОбластьСтрокаСтажа.Параметры.СтраховойНомерПФР = "";
						ОбластьСтрокаСтажа.Параметры.НомерСтроки = "";
						Пока ВыборкаПоРаботникам.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи") Цикл
							Если ВыборкаПоРаботникам.НомерДополнительнойЗаписи = 0 Тогда
								Продолжить;
							КонецЕсли;
							ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок);
						КонецЦикла;	
					КонецЦикла;
				Иначе
					ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
				КонецЕсли;
				
				Если РазбиватьПоСотрудникам Тогда
					
					ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
					ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
					
					Если НомерСтраницы = 1 Тогда 
						ТекущийЛист.Область("R1C1:R1C24").Очистить(Истина, Ложь, Истина);
					КонецЕсли;
					
					ДокументРезультат.Вывести(ТекущийЛист);
					
					УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоБланка, ОбъектыПечати, ВыборкаПоРаботникам.Сотрудник);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не РазбиватьПоСотрудникам Тогда
			
			ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры, ВыборкаПоШапкеДокумента);
			ВывестиОбласть(ОбластьПодвал, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы);
			
			Если НомерСтраницы = 1 Тогда 
				ТекущийЛист.Область("R1C1:R1C24").Очистить(Истина, Ложь, Истина);
			КонецЕсли;
			
			ДокументРезультат.Вывести(ТекущийЛист);
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НачалоФормы, ОбъектыПечати, ВыборкаПоШапкеДокумента.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции

Процедура ВывестиСтрокуСтажа(ВыборкаПоРаботникам, ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок)
	
	ЗаполнитьОбластьСтаж(ВыборкаПоРаботникам, ОбластьСтрокаСтажа);
	Если ЗначениеЗаполнено(ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей)
		И Не ЗначениеЗаполнено(ВыборкаПоРаботникам.ТретийПараметрИсчисляемогоСтажа) Тогда
		ОбластьСтрокаСтажа.Параметры.ДопИТС = ВыборкаПоРаботникам.ЗамещениеГосударственныхМуниципальныхДолжностей;
	КонецЕсли;
	
	ВывестиОбласть(ОбластьСтрокаСтажа, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок);
	
КонецПроцедуры

Процедура ВывестиОбласть(ВыводимаяОбласть, ВыборкаПоШапкеДокумента, ДокументРезультат, ТекущийЛист, Макет, НомерСтраницы, ОбластьЗаголовок = Неопределено)
	
	ВыводимыеОбласти = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыводимаяОбласть);
	Если ТекущийЛист.ПроверитьВывод(ВыводимыеОбласти) Тогда 
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	Иначе 
		ДокументРезультат.Вывести(ТекущийЛист);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ТекущийЛист = НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы);
		Если ОбластьЗаголовок <> Неопределено Тогда 
			ТекущийЛист.Вывести(ОбластьЗаголовок);
		КонецЕсли;
		ТекущийЛист.Вывести(ВыводимаяОбласть);
	КонецЕсли;	
	
КонецПроцедуры 

Процедура ЗаполнитьОбластьСтаж(ВыборкаЗаписейСтажа, ОбластьСтаж)
	
	ОбластьСтаж.Параметры.ДатаНачалаПериода = Формат(ВыборкаЗаписейСтажа.ДатаНачалаПериода, "ДФ=""дд.ММ.гггг""");
	ОбластьСтаж.Параметры.ДатаОкончанияПериода = Формат(ВыборкаЗаписейСтажа.ДатаОкончанияПериода, "ДФ=""дд.ММ.гггг""");
	
	Если ВыборкаЗаписейСтажа.ТретийПараметрИсчисляемогоСтажа <> Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДЕТИПРЛ Тогда 
		ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод;
		Если ЗначениеЗаполнено(ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка) Тогда 
			ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = Строка(ВыборкаЗаписейСтажа.ТерриториальныеУсловияКод) + " " + ВыборкаЗаписейСтажа.ТерриториальныеУсловияСтавка;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ВыборкаЗаписейСтажа.ОсобыеУсловияТрудаКод;
	ОбластьСтаж.Параметры.ОснованиеИсчисляемогоСтажаКод = ВыборкаЗаписейСтажа.ОснованиеИсчисляемогоСтажаКод;
	ОбластьСтаж.Параметры.ОснованиеВыслугиЛетКод = ВыборкаЗаписейСтажа.ОснованиеВыслугиЛетКод;
	ОбластьСтаж.Параметры.ДопИТС = ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ВыборкаЗаписейСтажа);
	
	ПредставлениеПараметровПенсииЗаВыслугуЛет(ВыборкаЗаписейСтажа, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
	
КонецПроцедуры

Функция НовыйПечатныйЛист(ВыборкаПоШапкеДокумента, ДокументРезультат, Макет, НомерСтраницы)
	
	ТекущийЛист = Новый ТабличныйДокумент;
	ТекущийЛист.ПолеСлева = 0;
	ТекущийЛист.ПолеСправа = 0;
	ТекущийЛист.ОриентацияСтраницы = ДокументРезультат.ОриентацияСтраницы;
	
	ОбластьКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	НомерСтраницы = НомерСтраницы + 1;
	НомерДляПечати = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерСтраницы, 5);
	ВывестиДанныеПоБуквенно(НомерДляПечати, ОбластьКолонтитул, "НомСтр", 5, 6);
	
	ТекущийЛист.Вывести(ОбластьКолонтитул);
	ТекущийЛист.Вывести(ОбластьПустаяСтрока);
	
	Возврат ТекущийЛист;
	
КонецФункции

#Область ЗаполнениеДанныхОСтажеСотрудников

Процедура ЗаполнитьДанныеОСтажеСотрудников(ЗаписиОСтаже, Организация, СписокСотрудников, Год, СсылкаНаДокумент, ДатыВыходаНаПенсию = Неопределено) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ.СоздатьВТДанныеСтажаПФР(
		МенеджерВременныхТаблиц, Организация, Год, СписокСотрудников, СсылкаНаДокумент);
		
	ДоговорыГПХ = Новый Массив;
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	ДоговорыГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
		
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеОСтажеПФР.ФизическоеЛицо КАК ФизическоеЛицо
	               |ПОМЕСТИТЬ ВТСлужащие
	               |ИЗ
	               |	ВТДанныеСтажаПФР КАК ДанныеОСтажеПФР
	               |ГДЕ
	               |	ДанныеОСтажеПФР.ЗамещениеГосударственныхМуниципальныхДолжностей <> ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДанныеОСтажеПФР.ФизическоеЛицо
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеОСтажеПФР.ТерриториальныеУсловия) > 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеОСтажеПФР.ФизическоеЛицо КАК Сотрудник,
	               |	ДанныеОСтажеПФР.ДатаНачалаПериода КАК ДатаНачалаПериода,
	               |	ДанныеОСтажеПФР.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	               |	ДанныеОСтажеПФР.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	               |	ДанныеОСтажеПФР.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей
	               |ИЗ
	               |	ВТДанныеСтажаПФР КАК ДанныеОСтажеПФР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСлужащие КАК Служащие
	               |		ПО ДанныеОСтажеПФР.ФизическоеЛицо = Служащие.ФизическоеЛицо
	               |			И (ДанныеОСтажеПФР.ЗамещениеГосударственныхМуниципальныхДолжностей <> ЗНАЧЕНИЕ(Справочник.ЗамещениеГосударственныхМуниципальныхДолжностейПФР.ПустаяСсылка))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ДатаНачалаПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПериодыСлужбыСотрудников = Новый Соответствие;
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
		ТерриториальныеУсловия = Новый Соответствие;
		ПериодСлужбы = Новый Структура("Сотрудник,ДатаНачалаПериода,ДатаОкончанияПериода,ЗамещениеГосударственныхМуниципальныхДолжностей");
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(ПериодСлужбы.ДатаНачалаПериода) Тогда 
				ЗаполнитьЗначенияСвойств(ПериодСлужбы, Выборка);
				ТерриториальныеУсловия.Вставить(Выборка.ТерриториальныеУсловия, Истина);
				Продолжить;
			КонецЕсли;
			Если ПериодСлужбы.ЗамещениеГосударственныхМуниципальныхДолжностей = Выборка.ЗамещениеГосударственныхМуниципальныхДолжностей
				И КонецДня(ПериодСлужбы.ДатаОкончанияПериода) + 1 = Выборка.ДатаНачалаПериода Тогда 
				ПериодСлужбы.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				ТерриториальныеУсловия.Вставить(Выборка.ТерриториальныеУсловия, Истина);
			Иначе 
				Если ТерриториальныеУсловия.Количество() > 1 Тогда 
					ПериодыСлужбы = ПериодыСлужбыСотрудников[Выборка.Сотрудник];
					Если ПериодыСлужбы = Неопределено Тогда 
						ПериодыСлужбы = Новый Массив;
						ПериодыСлужбыСотрудников.Вставить(Выборка.Сотрудник, ПериодыСлужбы);
					КонецЕсли;
					ПериодыСлужбы.Добавить(ПериодСлужбы);
				КонецЕсли;
				ТерриториальныеУсловия = Новый Соответствие;
				ПериодСлужбы = Новый Структура("Сотрудник,ДатаНачалаПериода,ДатаОкончанияПериода,ЗамещениеГосударственныхМуниципальныхДолжностей");
				ЗаполнитьЗначенияСвойств(ПериодСлужбы, Выборка);
				ТерриториальныеУсловия.Вставить(Выборка.ТерриториальныеУсловия, Истина);
			КонецЕсли;
		КонецЦикла;
		Если ТерриториальныеУсловия.Количество() > 1 Тогда 
			ПериодыСлужбы = ПериодыСлужбыСотрудников[Выборка.Сотрудник];
			Если ПериодыСлужбы = Неопределено Тогда 
				ПериодыСлужбы = Новый Массив;
				ПериодыСлужбыСотрудников.Вставить(Выборка.Сотрудник, ПериодыСлужбы);
			КонецЕсли;
			ПериодыСлужбы.Добавить(ПериодСлужбы);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ДоговорыГПХ", ДоговорыГПХ);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеСтажаСотрудников.ФизическоеЛицо КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ДанныеСтажаСотрудников.ТретийПараметрИсчисляемогоСтажа В (&ДоговорыГПХ)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ДоговорГПХ,
	               |	ДанныеСтажаСотрудников.*
	               |ИЗ
	               |	ВТДанныеСтажаСотрудников КАК ДанныеСтажаСотрудников
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Сотрудник,
	               |	ДоговорГПХ УБЫВ,
	               |	ДанныеСтажаСотрудников.ДатаНачалаПериода";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	ИменаРеквизитов = "Сотрудник,КодПозицииСписка,ОснованиеИсчисляемогоСтажа,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,
		|ОснованиеВыслугиЛет,ПервыйПараметрВыслугиЛет,ВторойПараметрВыслугиЛет,ТретийПараметрВыслугиЛет,ОсобыеУсловияТруда,
		|ТерриториальныеУсловия,ПараметрТерриториальныхУсловий,ТерриториальныеУсловияДополнительные,ЗамещениеГосударственныхМуниципальныхДолжностей";
	ПроверяемыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, , Истина, Истина);
	РеквизитыСтроки = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПроверяемыеРеквизиты);
	РеквизитыСтроки.Добавить("ТретийПараметрИсчисляемогоСтажа");
	ДанныеЗаписи = Новый Структура(ИменаРеквизитов + ",ТретийПараметрИсчисляемогоСтажа");
	
	Если ТипЗнч(ЗаписиОСтаже) = Тип("ТаблицаЗначений") Тогда
		ТаблицаОтклонений = ЗаписиОСтаже.Скопировать(Новый Массив);
	Иначе
		ТаблицаОтклонений = ЗаписиОСтаже.Выгрузить(Новый Массив);
	КонецЕсли;
	
	Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл 
		ПредыдущаяСтрока = Неопределено;
		ТаблицаОтклонений.Очистить();
		ИндексПервойСтрокиСотрудника = ЗаписиОСтаже.Количество();
		ПериодыСлужбы = ПериодыСлужбыСотрудников[Выборка.Сотрудник];
		Если ПериодыСлужбы <> Неопределено Тогда 
			Для Каждого ПериодСлужбы Из ПериодыСлужбы Цикл 
				НоваяСтрока = ЗаписиОСтаже.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПериодСлужбы);
			КонецЦикла;
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			Если ДатыВыходаНаПенсию <> Неопределено И (ДатыВыходаНаПенсию[Выборка.Сотрудник] - 86400) < Выборка.ДатаНачалаПериода Тогда 
				Продолжить;
			КонецЕсли;
			Если ПериодыСлужбы = Неопределено И ЗначениеЗаполнено(Выборка.ТретийПараметрИсчисляемогоСтажа) И ЗначениеЗаполнено(Выборка.ЗамещениеГосударственныхМуниципальныхДолжностей) Тогда 
				ПредыдущаяСтрока = ПредыдущаяОсновнаяЗапись(ЗаписиОСтаже);
				Если ПредыдущаяСтрока = Неопределено Тогда 
					ПредыдущаяСтрока = ЗаписиОСтаже.Добавить();
					ЗаполнитьЗначенияСвойств(ПредыдущаяСтрока, Выборка, , "ТретийПараметрИсчисляемогоСтажа");
				Иначе 
					Если ПредыдущаяСтрока.ДатаОкончанияПериода + 86400 = Выборка.ДатаНачалаПериода
						И ДанныеСтрокСовпадают(ПредыдущаяСтрока, Выборка, ПроверяемыеРеквизиты) Тогда 
						ПредыдущаяСтрока.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
					Иначе
						ВывестиСтрокиОтклонений(ЗаписиОСтаже, ТаблицаОтклонений, ПредыдущаяСтрока);
						ПредыдущаяСтрока = ЗаписиОСтаже.Добавить();
						ЗаполнитьЗначенияСвойств(ПредыдущаяСтрока, Выборка, , "ТретийПараметрИсчисляемогоСтажа");
					КонецЕсли;
				КонецЕсли;
				УчестьДатуВыходаНаПенсию(ПредыдущаяСтрока, Выборка.Сотрудник, ДатыВыходаНаПенсию);
				ДобавитьСтрокуЗаписейОСтаже(ТаблицаОтклонений, Выборка, ДатыВыходаНаПенсию, ПериодыСлужбы);
				Продолжить;
			КонецЕсли;
			Если ПредыдущаяСтрока <> Неопределено И Не Выборка.ПрерываниеСтажа 
				И ПредыдущаяСтрока.ДатаОкончанияПериода + 86400 = Выборка.ДатаНачалаПериода
				И ДанныеСтрокСовпадают(ПредыдущаяСтрока, Выборка, ПроверяемыеРеквизиты) Тогда 
				ПредыдущаяСтрока.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				УчестьДатуВыходаНаПенсию(ПредыдущаяСтрока, Выборка.Сотрудник, ДатыВыходаНаПенсию);
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Выборка);
			Если ПериодыСлужбы <> Неопределено Тогда 
				ДанныеЗаписи.ЗамещениеГосударственныхМуниципальныхДолжностей = Неопределено;
			КонецЕсли;
			ПредыдущаяЗапись = ПредыдущаяОсновнаяЗапись(ЗаписиОСтаже);
			Если ПредыдущаяЗапись <> Неопределено И КонецДня(ПредыдущаяЗапись.ДатаОкончанияПериода) + 1 = Выборка.ДатаНачалаПериода
				И Не Выборка.ПрерываниеСтажа И ДанныеСтрокСовпадают(ПредыдущаяЗапись, ДанныеЗаписи, РеквизитыСтроки) Тогда 
				ПредыдущаяЗапись.ДатаОкончанияПериода = Выборка.ДатаОкончанияПериода;
				УчестьДатуВыходаНаПенсию(ПредыдущаяЗапись, Выборка.Сотрудник, ДатыВыходаНаПенсию);
				Продолжить;
			КонецЕсли;
			ВывестиСтрокиОтклонений(ЗаписиОСтаже, ТаблицаОтклонений, ПредыдущаяСтрока);
			ДобавитьСтрокуЗаписейОСтаже(ЗаписиОСтаже, Выборка, ДатыВыходаНаПенсию, ПериодыСлужбы);
		КонецЦикла;
		ВывестиСтрокиОтклонений(ЗаписиОСтаже, ТаблицаОтклонений, ПредыдущаяСтрока);
		ИндексПоследнейСтрокиСотрудника = ЗаписиОСтаже.Количество() - 1;
		СтрокиСтажаПоСотруднику = Новый Массив;
		Для Индекс = ИндексПервойСтрокиСотрудника По ИндексПоследнейСтрокиСотрудника Цикл  
			СтрокаСтажа = ЗаписиОСтаже[Индекс];
			Если ЗначениеЗаполнено(СтрокаСтажа.ТерриториальныеУсловияДополнительные) 
				И Не ЗначениеЗаполнено(СтрокаСтажа.ТерриториальныеУсловия) Тогда 
				СтрокаСтажа.ТерриториальныеУсловия = СтрокаСтажа.ТерриториальныеУсловияДополнительные;
			КонецЕсли;
		    СтрокиСтажаПоСотруднику.Добавить(СтрокаСтажа);
		КонецЦикла;
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
	КонецЦикла;
	
КонецПроцедуры

Функция ПредыдущаяОсновнаяЗапись(ЗаписиОСтаже)
	
	КоличествоСтрок = ЗаписиОСтаже.Количество();
	Если КоличествоСтрок = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрок Цикл 
		Если ЗначениеЗаполнено(ЗаписиОСтаже[КоличествоСтрок-Сч].ДатаНачалаПериода) Тогда 
			Возврат ЗаписиОСтаже[КоличествоСтрок-Сч];
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ВывестиСтрокиОтклонений(ЗаписиОСтаже, ТаблицаОтклонений, ПредыдущаяСтрока)
	
	Для Каждого СтрокаОтклонения Из ТаблицаОтклонений Цикл 
		НоваяСтрока = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтклонения);
	КонецЦикла;
	
	ТаблицаОтклонений.Очистить();
	ПредыдущаяСтрока = Неопределено;
	
КонецПроцедуры

Процедура ДобавитьСтрокуЗаписейОСтаже(ДанныеОСтаже, Выборка, ДатыВыходаНаПенсию, ПериодыСлужбы)
	
	НоваяСтрока = ДанныеОСтаже.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	УчестьДатуВыходаНаПенсию(НоваяСтрока, Выборка.Сотрудник, ДатыВыходаНаПенсию);
	
	Если ПериодыСлужбы <> Неопределено Тогда 
		НоваяСтрока.ЗамещениеГосударственныхМуниципальныхДолжностей = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.ТерриториальныеУсловияДополнительные) И ЗначениеЗаполнено(Выборка.ТерриториальныеУсловия) Тогда 
		НоваяСтрока = ДанныеОСтаже.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.ТерриториальныеУсловия = Выборка.ТерриториальныеУсловияДополнительные;
	КонецЕсли;
	
КонецПроцедуры

Процедура УчестьДатуВыходаНаПенсию(Строка, Сотрудник, ДатыВыходаНаПенсию)
	
	Если ДатыВыходаНаПенсию = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоследнийРабочийДень = ДатыВыходаНаПенсию[Сотрудник] - 86400;
	Строка.ДатаОкончанияПериода = Мин(Строка.ДатаОкончанияПериода, ПоследнийРабочийДень);
	
КонецПроцедуры

Функция РезультатЗапросаПоСотрудникам(МенеджерВременныхТаблиц, ИмяИсточникаСведенийОСтраховомСтаже = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ПараметрТерриториальныхУсловий,
		|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа.Код КАК ТретийПараметрИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ЗамещениеГосударственныхМуниципальныхДолжностей КАК ЗамещениеГосударственныхМуниципальныхДолжностей,
		|	СотрудникиДокумента.НомерСтроки КАК НомерСтроки,
		|	СотрудникиДокумента.Сотрудник КАК Сотрудник,
		|	СотрудникиДокумента.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	СотрудникиДокумента.Фамилия КАК Фамилия,
		|	СотрудникиДокумента.Имя КАК Имя,
		|	СотрудникиДокумента.Отчество КАК Отчество,
		|	СотрудникиДокумента.СотрудникУволен КАК СотрудникУволен,
		|	СотрудникиДокумента.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЗаполненСтаж
		|ИЗ
		|	ВТСотрудникиДокумента КАК СотрудникиДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ КАК ЗаписиОСтаже
		|		ПО СотрудникиДокумента.Сотрудник = ЗаписиОСтаже.Сотрудник
		|			И СотрудникиДокумента.Ссылка = ЗаписиОСтаже.ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	СотрудникиДокумента.Год УБЫВ,
		|	СотрудникиДокумента.ТипСведений,
		|	Ссылка,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
	
	Если Не ПустаяСтрока(ИмяИсточникаСведенийОСтраховомСтаже) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.ЗаписиОСтажеСведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ", ИмяИсточникаСведенийОСтраховомСтаже);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
		
	
КонецФункции

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьРазрядыКатегорииДокументовТрудовыхКнижек(ПараметрыОбновления = Неопределено) Экспорт
	
	ПерсонифицированныйУчетВнутренний.ЗаполнитьРазрядыКатегорииДокументовТрудовыхКнижек(ПараметрыОбновления);
	
КонецПроцедуры

Процедура ЗаписатьТерриториальныеУсловияДополнительныеПФР(СтруктурнаяЕдиница, РаботаВСельскомХозяйстве) Экспорт
	
	Отбор = Новый Структура("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Выборка = РегистрыСведений.ТерриториальныеУсловияДополнительныеПФР.Выбрать(Отбор);
	
	БылоРаботаВСельскомХозяйстве = Ложь;
	Если Выборка.Следующий() И Выборка.ТерриториальныеУсловияПФР = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.СЕЛО") Тогда 
		БылоРаботаВСельскомХозяйстве = Истина;
	КонецЕсли;
	
	Если РаботаВСельскомХозяйстве = БылоРаботаВСельскомХозяйстве Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ТерриториальныеУсловияДополнительныеПФР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(СтруктурнаяЕдиница);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
	НоваяЗапись.ТерриториальныеУсловияПФР = ?(РаботаВСельскомХозяйстве, ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ТерриториальныеУсловияПФР.СЕЛО"), Неопределено);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРуководителя(Объект) Экспорт
	
	ПерсонифицированныйУчетВнутренний.ЗаполнитьДанныеРуководителя(Объект);
	
КонецПроцедуры

#КонецОбласти