
#Область ПрограммныйИнтерфейс

// Сообщает, возможно ли формирование комплекта нулевой отчетности в упрощенном режиме
// для переданной организации на указанную дату.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - проверяемая организация
//  Период      - Дата - дата проверки
//
// Возвращаемое значение:
//   Булево   - Если ИСТИНА, нулевую отчетность можно сформировать в упрощенном режиме.
//
Функция ДоступноУпрощенноеФормирование(Организация, Период) Экспорт
	
	Результат =
		НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()                   // Режим сервиса "Нулевка"
		И НЕ УчетнаяПолитика.ПлательщикНалогаНаПрибыльЗаПериод(Организация, Дата(1, 1, 1), Период) // Применялась только УСН для ЮЛ
		И НЕ УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, Дата(1, 1, 1), Период)            // Применялась только УСН для ИП
		И НЕ УчетЗарплаты.НеобходимоНачислятьЗарплату(Организация, Период);                        // Нет "действующих" сотрудников
	Возврат Результат;
	
КонецФункции

// Проверяет возможность автозаполнения отчета по данным информационной базы
// в режиме, когда запрещен учет регулярной деятельности.
// Параметры:
//  ИДОтчета - Строка, идентификатор регламентированного отчета
//
// Возвращаемое значение:
//   Булево   - ИСТИНА, если отчет должен автозаполняться
//
Функция АвтозаполняемыйОтчет(ИДОтчета) Экспорт
	
	Возврат ИДОтчета = "РегламентированныйОтчетБухОтчетностьМП"
		ИЛИ ИДОтчета = "РегламентированныйОтчетПодтверждениеВидаДеятельности"
		ИЛИ ИДОтчета = "РегламентированныйОтчет4ФСС"
		ИЛИ ИДОтчета = "РегламентированныйОтчетРСВ1"
		ИЛИ ИДОтчета = "РегламентированныйОтчетРасчетПоСтраховымВзносам"
		ИЛИ ИДОтчета = "РегламентированныйОтчетСведенияОСреднесписочнойЧисленностиРаботников"
		ИЛИ ИДОтчета = "РегламентированныйОтчет6НДФЛ";
	
КонецФункции

// Формирует начальные остатки и регистрирует руководителя в качестве сотрудника
// при записи организации.
// Параметры:
//  ОрганизацияОбъект - СправочникОбъект.Организаци, записываемая организация
//  Отказ             - Булево, признак отказа от записи
//
Процедура ПриЗаписиОрганизации(ОрганизацияОбъект, Отказ) Экспорт
	
	// При записи новой организации необходимо получить данные из ЕГРН:
	// сведения об учредителях, руководителе, балансе и т.п.
	Если Отказ
		Или ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности()
		Или НЕ ТарификацияБПВызовСервераПовтИсп.РазрешенБухгалтерскийУчет() Тогда
		Возврат;
	КонецЕсли;
	
	Организация = ОрганизацияОбъект.Ссылка;
	Если НеобходимоЗарегистрироватьНачальныеДанные(Организация) Тогда
		// Получаем данные об организации.
		ИнформацияОСвязях = ИнформацияОСвязяхЮридическогоЛица(Организация);
		Если ИнформацияОСвязях <> Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ИнформацияОСвязях.ДатаРегистрации) Тогда
				// Нет сведений о такой организации
				Возврат;
			КонецЕсли;
			
			// Регистрируем в программе начальные остатки
			ЗарегистрироватьВходящиеОстатки(Организация, ИнформацияОСвязях);
			// Регистрирум сведения о руководителе - принимаем его на работу.
			// Но сначала подключаем кадровый учет.
			Если НЕ УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров() Тогда
				УчетЗарплаты.ВключитьПодсистемуУчетаЗарплатыИКадров(Истина);
			КонецЕсли;
			ЗарегистрироватьСведенияОРуководителе(Организация, ИнформацияОСвязях);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НеобходимоЗарегистрироватьНачальныеДанные(Организация)
	
	ЗарегистрироватьНачальныеДанные = Истина;
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		// Для ИП - ничего регистрировать не надо
		ЗарегистрироватьНачальныеДанные = Ложь;
	КонецЕсли;
	
	// Проверим - не было ли ранее попытки зарегистрировать ввод остатков.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВводНачальныхОстатков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.Организация = &Организация";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		// Остатки вводились - больше ничего не предпринимаем.
		ЗарегистрироватьНачальныеДанные = Ложь;
	КонецЕсли;
	
	Возврат ЗарегистрироватьНачальныеДанные;
	
КонецФункции

Функция ИнформацияОСвязяхЮридическогоЛица(Организация)
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН");
	
	ИнформацияОСвязях = РаботаСКонтрагентами.ИнформацияОСвязяхЮридическогоЛицаПоИНН(РеквизитыОрганизации.ИНН);
	НомерПопытки = 1;
	Пока ИнформацияОСвязях.ОжиданиеОтвета И НомерПопытки <= 3 Цикл
		// Иногда ответ задерживается - немного подождем.
		ИнформацияОСвязях = РаботаСКонтрагентами.ИнформацияОСвязяхЮридическогоЛицаПоИНН(РеквизитыОрганизации.ИНН);
		НомерПопытки = НомерПопытки + 1;
	КонецЦикла;
	
	Если ИнформацияОСвязях.ОжиданиеОтвета Тогда
		Возврат Неопределено;
	Иначе
		Отчеты.ДосьеКонтрагента.СостояниеКонтрагентаПоДаннымЕГРН(ИнформацияОСвязях, Организация);
		Возврат ИнформацияОСвязях;
	КонецЕсли;
	
КонецФункции

Процедура ЗарегистрироватьВходящиеОстатки(Организация, ИнформацияОСвязях)
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ДатаРегистрации");
	
	ДатаРегистрации = РеквизитыОрганизации.ДатаРегистрации;
	ПредельнаяДата  = КонецГода(НачалоГода(ТекущаяДатаСеанса()) - 60);
	Если НЕ ЗначениеЗаполнено(ДатаРегистрации) Тогда
		ДатаВводаОстатков = ПредельнаяДата;
	Иначе
		ДатаВводаОстатков = Макс(ДатаРегистрации, ПредельнаяДата);
	КонецЕсли;
	
	УкрупненныеПоказатели = Новый ТаблицаЗначений;
	УкрупненныеПоказатели.Колонки.Добавить("СчетУчета");
	УкрупненныеПоказатели.Колонки.Добавить("Значение", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	УкрупненныеПоказателиУчредители = УкрупненныеПоказатели.СкопироватьКолонки();
	
	ТаблицаУчредителей = Новый ТаблицаЗначений;
	Если ИнформацияОСвязях.Свойство("Учредители", ТаблицаУчредителей) Тогда
		НоваяСтрока = УкрупненныеПоказателиУчредители.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал;
		НоваяСтрока.Значение = ТаблицаУчредителей.Итог("СуммаКапитала");
	КонецЕсли;
	
	Если ИнформацияОСвязях.БухгалтерскаяОтчетность.Количество() <> 0 Тогда
		
		ПериодыОтчетности = Отчеты.ДосьеКонтрагента.ПериодыБухгалтерскойОтчетности(ИнформацияОСвязях);
		Отчеты.ДосьеКонтрагента.ДанныеБухгалтерскойОтчетности(ИнформацияОСвязях, ПериодыОтчетности);
		
		Если ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИнформацияОСвязях.БухгалтерскаяОтчетность.Сортировать("Год Убыв");
		
		ГодОтчетности = ИнформацияОСвязях.БухгалтерскаяОтчетность[0].Год;
		ДатаВводаОстатков = Дата(ГодОтчетности, 12, 31);
		
		КодВалютыОтчетности = ИнформацияОСвязях.БухгалтерскаяОтчетность[0].КодВалютыОтчетности;
		КратностьПоказателей = 1;
		Если КодВалютыОтчетности  = "384" Тогда // в тысячах
			КратностьПоказателей = 1000;
		ИначеЕсли КодВалютыОтчетности  = "385" Тогда // в миллионах
			КратностьПоказателей =  1000000;
		КонецЕсли;
		
		СтруктураПоказателей = ИнформацияОСвязях.ДанныеБухгалтерскойОтчетности[0].Показатели;
		
		СоответствиеПоказателей = Новый Соответствие;
		
		// Актив
		СоответствиеПоказателей.Вставить("П1110_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1120_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1130_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1140_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1150_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1160_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1170_1", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
		СоответствиеПоказателей.Вставить("П1180_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1190_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		
		СоответствиеПоказателей.Вставить("П1210_1", ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
		СоответствиеПоказателей.Вставить("П1220_1", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
		СоответствиеПоказателей.Вставить("П1230_1", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
		СоответствиеПоказателей.Вставить("П1240_1", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
		СоответствиеПоказателей.Вставить("П1250_1", ПланыСчетов.Хозрасчетный.КассаОрганизации);
		СоответствиеПоказателей.Вставить("П1260_1", ПланыСчетов.Хозрасчетный.РасчетыСПокупателями);
		
		// Пассив
		СоответствиеПоказателей.Вставить("П1310_1", ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал);
		СоответствиеПоказателей.Вставить("П1320_1", ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению);
		СоответствиеПоказателей.Вставить("П1340_1", ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению);
		СоответствиеПоказателей.Вставить("П1350_1", ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению);
		СоответствиеПоказателей.Вставить("П1360_1", ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению);
		СоответствиеПоказателей.Вставить("П1370_1", ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению);

		СоответствиеПоказателей.Вставить("П1410_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1420_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1430_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1450_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1510_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1520_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1530_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1540_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		СоответствиеПоказателей.Вставить("П1550_1", ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками);
		
		Для Каждого ЗначениеПоказателя ИЗ СтруктураПоказателей Цикл
			
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			СчетУчета = СоответствиеПоказателей.Получить(ЗначениеПоказателя.Ключ);
			Если СчетУчета = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = УкрупненныеПоказатели.Добавить();
			НоваяСтрока.СчетУчета  = СчетУчета;
			НоваяСтрока.Значение   = ЗначениеПоказателя.Значение * КратностьПоказателей;
		КонецЦикла;
		
		УкрупненныеПоказатели.Свернуть("СчетУчета", "Значение");
		
	КонецЕсли;
	
	Если УкрупненныеПоказатели.Количество() = 0 Тогда
		// воспользуемся данными об учредителях
		УкрупненныеПоказатели = УкрупненныеПоказателиУчредители.Скопировать();
		НоваяСтрока = УкрупненныеПоказателиУчредители.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		НоваяСтрока.Значение = УкрупненныеПоказатели.Итог("Значение");
	Иначе
		СтрокиУчредителей = УкрупненныеПоказатели.НайтиСтроки(Новый Структура("СчетУчета", ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал));
		Если СтрокиУчредителей.Количество() = 0
			И УкрупненныеПоказателиУчредители.Количество() <> 0 Тогда
			// выделим уставный капитал
			НоваяСтрока = УкрупненныеПоказатели.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал;
			НоваяСтрока.Значение = УкрупненныеПоказателиУчредители.Итог("Значение");
			
			НоваяСтрока = УкрупненныеПоказатели.Добавить();
			НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал;
			НоваяСтрока.Значение = - УкрупненныеПоказателиУчредители.Итог("Значение");
			
			УкрупненныеПоказатели.Свернуть("СчетУчета", "Значение");
		КонецЕсли;
	КонецЕсли;
	
	// Готовим учетную политику
	Если НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, ДатаВводаОстатков) = Неопределено Тогда
		НастройкиУчета.СоздатьЗаписьУчетнойПолитикиНаНовуюДату(Организация, ТекущаяДатаСеанса(), НачалоМесяца(ДатаВводаОстатков));
	КонецЕсли;
	Обработки.ВводНачальныхОстатков.УстановитьДатуНачалаУчета(Организация, ДатаВводаОстатков);

	// Аналитики остатков
	
	ВалютаРубль = Константы.ВалютаРегламентированногоУчета.Получить();
	
	НаименованиеНоменклатуры = НСтр("ru = '## Сводная номенклатура ##'");
	Номенклатура = Справочники.Номенклатура.НайтиПоНаименованию(НаименованиеНоменклатуры);
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		НоменклатураОбъект.Наименование = НаименованиеНоменклатуры;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоменклатураОбъект);
		Номенклатура = НоменклатураОбъект.Ссылка;
	КонецЕсли;
	
	Склад = Справочники.Склады.ПолучитьСкладПоУмолчанию();
	
	НаименованиеКонтрагента = НСтр("ru = '## Сводный контрагент ##'");
	Контрагент = Справочники.Контрагенты.НайтиПоНаименованию(НаименованиеКонтрагента);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонтрагентОбъект.Наименование      = НаименованиеКонтрагента;
		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект);
		Контрагент = КонтрагентОбъект.Ссылка;
	КонецЕсли;
	
	НаименованиеДоговора = НСтр("ru = '## Сводный договор ##'");
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(НаименованиеДоговора,,,Контрагент);
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		ДоговорКонтрагентаОбъект.Владелец     = Контрагент;
		ДоговорКонтрагентаОбъект.Организация  = Организация;
		ДоговорКонтрагентаОбъект.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		ДоговорКонтрагентаОбъект.Наименование = НаименованиеДоговора;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДоговорКонтрагентаОбъект);
		ДоговорКонтрагента = ДоговорКонтрагентаОбъект.Ссылка;
	КонецЕсли;
	
	ДокументРасчетовОбъект = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	ДокументРасчетовОбъект.Организация        = Организация;
	ДокументРасчетовОбъект.Дата               = ДатаВводаОстатков;
	ДокументРасчетовОбъект.Контрагент         = Контрагент;
	ДокументРасчетовОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
	ДокументРасчетовОбъект.Комментарий        = НСтр("ru = '## Сводный документ расчетов ##'");
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументРасчетовОбъект);
	ДокументРасчетов = ДокументРасчетовОбъект.Ссылка;
		
	Для Каждого СтрокаПоказателя ИЗ УкрупненныеПоказатели Цикл
		ДокументОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
		ДокументОстатков.Организация                    = Организация;
		ДокументОстатков.Дата                           = ДатаВводаОстатков;
		ДокументОстатков.Комментарий                    = СтрШаблон(НСтр("ru = 'Остатки заполнены по выписке из ЕГРЮЛ на %1 г.'"), Формат(ДатаВводаОстатков, "ДФ=dd.MM.yyyy"));
		ДокументОстатков.ОтражатьВБухгалтерскомУчете    = Истина;
		ДокументОстатков.ОтражатьВНалоговомУчете        = Ложь;
		ДокументОстатков.ОтражатьПоСпециальнымРегистрам = Ложь;
		
		Если СтрокаПоказателя.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах Тогда
			ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Товары;
			
			НоваяСтрока = ДокументОстатков.НоменклатураНаСкладе.Добавить();
			НоваяСтрока.СчетУчета = СтрокаПоказателя.СчетУчета;
			НоваяСтрока.Номенклатура             = Номенклатура;
			НоваяСтрока.Склад                    = Склад;
			НоваяСтрока.Сумма                    = СтрокаПоказателя.Значение;
			НоваяСтрока.Партия                   = ДокументРасчетов;
			НоваяСтрока.Количество               = 1;
			НоваяСтрока.СтатусыПартийУСН         = Перечисления.СтатусыПартийУСН.Купленные;
			НоваяСтрока.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
			НоваяСтрока.ОтражениеВУСН            = Перечисления.ОтражениеВУСН.Принимаются;
			НоваяСтрока.РасчетныйДокумент        = ДокументРасчетов;
			НоваяСтрока.Валюта                   = ВалютаРубль;
			
		ИначеЕсли СтрокаПоказателя.СчетУчета = ПланыСчетов.Хозрасчетный.КассаОрганизации Тогда
			ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
			
			НоваяСтрока = ДокументОстатков.БухСправка.Добавить();
			НоваяСтрока.СчетУчета                = СтрокаПоказателя.СчетУчета;
			НоваяСтрока.Сумма                    = СтрокаПоказателя.Значение;
			НоваяСтрока.Валюта                   = ВалютаРубль;
			
		ИначеЕсли СтрокаПоказателя.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями Тогда
			ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками;
			
			НоваяСтрока = ДокументОстатков.РасчетыСКонтрагентами.Добавить();
			НоваяСтрока.СчетУчета = СтрокаПоказателя.СчетУчета;
			НоваяСтрока.Контрагент               = Контрагент;
			НоваяСтрока.ДоговорКонтрагента       = ДоговорКонтрагента;
			НоваяСтрока.Документ                 = ДокументРасчетов;
			НоваяСтрока.Сумма                    = СтрокаПоказателя.Значение;
			НоваяСтрока.Валюта                   = ВалютаРубль;
			
		ИначеЕсли СтрокаПоказателя.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками Тогда
			ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками;
			
			НоваяСтрока = ДокументОстатков.РасчетыСКонтрагентами.Добавить();
			НоваяСтрока.СчетУчета = СтрокаПоказателя.СчетУчета;
			НоваяСтрока.Контрагент               = Контрагент;
			НоваяСтрока.ДоговорКонтрагента       = ДоговорКонтрагента;
			НоваяСтрока.Документ                 = ДокументРасчетов;
			НоваяСтрока.СуммаКт                  = СтрокаПоказателя.Значение;
			НоваяСтрока.Валюта                   = ВалютаРубль;
			
		ИначеЕсли СтрокаПоказателя.СчетУчета = ПланыСчетов.Хозрасчетный.УставныйКапитал_ПрочийКапитал Тогда
			ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал;
			
			НоваяСтрока = ДокументОстатков.БухСправка.Добавить();
			НоваяСтрока.СчетУчета                = СтрокаПоказателя.СчетУчета;
			НоваяСтрока.СуммаКт                  = СтрокаПоказателя.Значение;
			НоваяСтрока.Валюта                   = ВалютаРубль;
			
		ИначеЕсли СтрокаПоказателя.СчетУчета = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению Тогда
			ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал;
			
			НоваяСтрока = ДокументОстатков.БухСправка.Добавить();
			НоваяСтрока.СчетУчета                = СтрокаПоказателя.СчетУчета;
			НоваяСтрока.СуммаКт                  = СтрокаПоказателя.Значение;
			НоваяСтрока.Валюта                   = ВалютаРубль;
			
		ИначеЕсли СтрокаПоказателя.СчетУчета = ПланыСчетов.Хозрасчетный.РасчетыПоВкладамВУставныйКапитал Тогда
			ДокументОстатков.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями;
			
			НоваяСтрока = ДокументОстатков.БухСправка.Добавить();
			НоваяСтрока.СчетУчета                = СтрокаПоказателя.СчетУчета;
			НоваяСтрока.Сумма                    = СтрокаПоказателя.Значение;
			НоваяСтрока.Валюта                   = ВалютаРубль;
			
		КонецЕсли;
		
		ДокументОстатков.ДополнительныеСвойства.Вставить("РегистрацияНачальныхДанныхНулевойОтчетности", Истина);
		ДокументОстатков.Записать(РежимЗаписиДокумента.Проведение);
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьСведенияОРуководителе(Организация, ИнформацияОСвязях)
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ДатаРегистрации");
	
	ДатаРегистрации = РеквизитыОрганизации.ДатаРегистрации;
	
	// Оформление руководителя
	Если ИнформацияОСвязях.Свойство("Руководитель") Тогда
		
		Руководитель = ?(ЗначениеЗаполнено(ИнформацияОСвязях.Руководители), ИнформацияОСвязях.Руководители[0], Неопределено);
		
		Если НЕ ЗначениеЗаполнено(Руководитель) Тогда
			Возврат;
		КонецЕсли;
		
		ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ИНН", Руководитель.ИНН);
		Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("ФИО", Руководитель.Представление);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
			ФизическоеЛицо = УчетЗарплаты.СоздатьФизическоеЛицо(Руководитель.Представление, Руководитель.ИНН);
		КонецЕсли;
		
		Должность = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(Руководитель.Должность);
		
		Сотрудник = КадровыйУчет.НеоформленныеСотрудникиФизическихЛиц(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическоеЛицо),
			Организация).Получить(ФизическоеЛицо);
		
		Подразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
		
		Если УчетЗарплаты.ВедетсяКадровыйУчет() Тогда
			
			ДокументПриемНаРаботу = Документы.ПриемНаРаботу.СоздатьДокумент();
			ДокументПриемНаРаботу.Дата                = ДатаРегистрации;
			ДокументПриемНаРаботу.ДатаПриема          = ДатаРегистрации;
			ДокументПриемНаРаботу.Организация         = Организация;
			ДокументПриемНаРаботу.Сотрудник           = Сотрудник;
			ДокументПриемНаРаботу.Подразделение       = Подразделение;
			ДокументПриемНаРаботу.Должность           = Должность;
			ДокументПриемНаРаботу.ВидЗанятости        = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
			ДокументПриемНаРаботу.СпособРасчетаАванса = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа;
			
			ДокументПриемНаРаботу.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументПриемНаРаботу);
			ДокументПриемНаРаботу.ОбменДанными.Загрузка = Ложь;
			Попытка
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
		Иначе
			
			ТекущиеКадровыеДанные  = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			ЗаписьКадровыхДанных = ТекущиеКадровыеДанные.Добавить();
			ЗаписьКадровыхДанных.ФизическоеЛицо                   = ФизическоеЛицо;
			ЗаписьКадровыхДанных.Сотрудник                        = Сотрудник;
			ЗаписьКадровыхДанных.ГоловнаяОрганизация              = Организация;
			ЗаписьКадровыхДанных.ТекущаяОрганизация               = Организация;
			ЗаписьКадровыхДанных.ТекущееПодразделение             = Подразделение;
			ЗаписьКадровыхДанных.ТекущаяДолжность                 = Должность;
			ЗаписьКадровыхДанных.ОсновноеРабочееМестоВОрганизации = Истина;
			ЗаписьКадровыхДанных.ОформленПоТрудовомуДоговору      = Истина;
			ЗаписьКадровыхДанных.ТекущийВидЗанятости              = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы;
			ЗаписьКадровыхДанных.ДатаПриема                       = ДатаРегистрации;
			ТекущиеКадровыеДанные.Записать();
			
			ТекущаяТарифнаяСтавка = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			ЗаписьКадровыхДанных = ТекущаяТарифнаяСтавка.Добавить();
			ЗаписьКадровыхДанных.ФизическоеЛицо                   = ФизическоеЛицо;
			ЗаписьКадровыхДанных.Сотрудник                        = Сотрудник;
			ЗаписьКадровыхДанных.ГоловнаяОрганизация              = Организация;
			ЗаписьКадровыхДанных.ТекущаяОрганизация               = Организация;
			ЗаписьКадровыхДанных.ТекущийСпособРасчетаАванса       = Перечисления.СпособыРасчетаАванса.ПроцентомОтТарифа;
			ТекущаяТарифнаяСтавка.Записать();
			
		КонецЕсли;
		
		РольСотрудника = Перечисления.РолиСотрудников.Работник;
		РолиСотрудников = РегистрыСведений.РолиСотрудников.СоздатьНаборЗаписей();
		РолиСотрудников.Отбор.Сотрудник.Установить(Сотрудник);
		РолиСотрудников.Отбор.РольСотрудника.Установить(РольСотрудника);
		РолиСотрудников.Прочитать();
		Если РолиСотрудников.Количество() = 0 Тогда
			ЗаписьРольСотрудника = РолиСотрудников.Добавить();
			ЗаписьРольСотрудника.Сотрудник      = Сотрудник;
			ЗаписьРольСотрудника.РольСотрудника = РольСотрудника;
			РолиСотрудников.Записать();
		КонецЕсли;
		
		// Он же выполняет функции главного бухгалтера
		ДолжностьГлавногоБухгалтера = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(НСтр("ru = 'Главный бухгалтер'"));
		
		НаборЗаписей = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(Организация);
		НаборЗаписей.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Период             = Дата("19800101");
			Запись.СтруктурнаяЕдиница = Организация;
			Запись.ОтветственноеЛицо  = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
			Запись.ФизическоеЛицо     = ФизическоеЛицо;
			Запись.Должность          = ДолжностьГлавногоБухгалтера;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	//Отправка руководителя в отпуск без содержания
	ОтпускБезСохраненияОплаты = Документы.ОтпускБезСохраненияОплаты.СоздатьДокумент();
	ОтпускБезСохраненияОплаты.ПериодРегистрации     = НачалоМесяца(Макс(ДатаРегистрации, НачалоГода(ТекущаяДатаСеанса())));
	ОтпускБезСохраненияОплаты.Организация           = Организация;
	ОтпускБезСохраненияОплаты.Дата                  = Макс(ДатаРегистрации, НачалоГода(ТекущаяДатаСеанса()));
	ОтпускБезСохраненияОплаты.Сотрудник             = Сотрудник;
	ОтпускБезСохраненияОплаты.ФизическоеЛицо        = ФизическоеЛицо;
	ОтпускБезСохраненияОплаты.ДатаНачала            = Макс(ДатаРегистрации, НачалоГода(ДобавитьМесяц(ТекущаяДатаСеанса(),-24)));
	ОтпускБезСохраненияОплаты.ДатаОкончания         = КонецГода(ДобавитьМесяц(ТекущаяДатаСеанса(), 36));
	ОтпускБезСохраненияОплаты.Руководитель          = ФизическоеЛицо;
	ОтпускБезСохраненияОплаты.ДолжностьРуководителя = Должность;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОтпускБезСохраненияОплаты);
	ОтпускБезСохраненияОплаты.ОбменДанными.Загрузка = Ложь;
	Попытка
		ОтпускБезСохраненияОплаты.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОтпускБезСохраненияОплаты.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти
