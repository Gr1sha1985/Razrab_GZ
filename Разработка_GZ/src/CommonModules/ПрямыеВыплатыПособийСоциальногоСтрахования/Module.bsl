#Область ПрограммныйИнтерфейс

// Возвращает дату передачи выплаты пособий в ФСС.
//
// Параметры:
//  Организация - СправочникСсылка.Организации.
//
// Возвращаемое значение:
//	Дата
//
Функция ДатаПередачиФССВыплатыПособий(Организация) Экспорт
	Настройки = НастройкиУчетаПособийСоциальногоСтрахования(Организация);
	
	Если Настройки.ПособияВыплачиваютсяСтрахователем Тогда
		Возврат '39991231235959';
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Настройки.ДатаПередачиФССВыплатыПособий) Тогда
		Возврат МаксимальнаяДатаПередачиФССВыплатыПособий();
	КонецЕсли;
	
	Возврат Настройки.ДатаПередачиФССВыплатыПособий;
КонецФункции

// Определяет по статусу является ли объект редактируемым или нет
//
// Параметры
//  Статус - Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.
//
// Возвращаемое значение:
//    Булево - истина, если статус позволяет редактировать документ.
//
Функция СтатусПозволяетРедактироватьДокумент(Статус) Экспорт
	Массив = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.СтатусыПозволяющиеРедактироватьДокументы();
	Возврат Массив.Найти(Статус) <> Неопределено;
КонецФункции

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность).
//
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	СоответствиеСсылокСвойствам = Новый Соответствие;
	ДокументыРеестрыСведений = Новый Массив;
	ДокументыРеестрыДанныхЭЛН = Новый Массив;
	Для Каждого ЗапрашиваемыеДанные Из СвойстваОбъектов Цикл
		Если ТипЗнч(ЗапрашиваемыеДанные.Ссылка)  = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий") Тогда
			ДокументыРеестрыСведений.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		ИначеЕсли ТипЗнч(ЗапрашиваемыеДанные.Ссылка) = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем") Тогда
			ДокументыРеестрыДанныхЭЛН.Добавить(ЗапрашиваемыеДанные.Ссылка);
			СоответствиеСсылокСвойствам.Вставить(ЗапрашиваемыеДанные.Ссылка, ЗапрашиваемыеДанные);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыРеестрыСведений.Количество() = 0 И ДокументыРеестрыДанныхЭЛН.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыРеестрыСведений", ДокументыРеестрыСведений);
	Запрос.УстановитьПараметр("ДокументыРеестрыДанныхЭЛН", ДокументыРеестрыДанныхЭЛН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата КАК ДатаСоздания,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Организация,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата, ДЕНЬ) КАК ДатаОкончания,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Комментарий
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	|ГДЕ
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка В(&ДокументыРеестрыСведений)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Ссылка,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата КАК ДатаСоздания,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Организация,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Организация.КодПодчиненностиФСС КАК КодКонтролирующегоОргана,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата, ДЕНЬ) КАК ДатаНачала,
	|	КОНЕЦПЕРИОДА(РеестрДанныхЭЛНЗаполняемыхРаботодателем.Дата, ДЕНЬ) КАК ДатаОкончания,
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Комментарий
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем КАК РеестрДанныхЭЛНЗаполняемыхРаботодателем
	|ГДЕ
	|	РеестрДанныхЭЛНЗаполняемыхРаботодателем.Ссылка В(&ДокументыРеестрыДанныхЭЛН)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапрашиваемыеДанные = СоответствиеСсылокСвойствам[Выборка.Ссылка];
		ЗаполнитьЗначенияСвойств(ЗапрашиваемыеДанные, Выборка);
		ЗапрашиваемыеДанные.ВариантОтчета = "-";
	КонецЦикла;
КонецПроцедуры

// Определяет свойства, касающиеся общих свойств объектов конфигураций-потребителей для отображения в форме Отчетность
// и возможности создания новый объектов из формы Отчетность.
//
// Параметры:
//  ТаблицаОписания  - ТаблицаЗначений -  (см. РегламентированнаяОтчетностьПереопределяемый.ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности).
//
Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'Пилотный проект ФСС'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = Неопределено;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрСведенийВФСС;
	
	ОписаниеДокументаОтчетности = ТаблицаОписания.Добавить();
	ОписаниеДокументаОтчетности.ТипОбъекта = Тип("ДокументСсылка.РеестрДанныхЭЛНЗаполняемыхРаботодателем");
	ОписаниеДокументаОтчетности.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФСС;
	ОписаниеДокументаОтчетности.ГруппаВДереве = НСтр("ru = 'ЭЛН'");
	ОписаниеДокументаОтчетности.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеДокументаОтчетности.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеДокументаОтчетности.ЯвляетсяАктуальным = Истина;
	ОписаниеДокументаОтчетности.ИмяОсновногоМакетаДляПечати = Неопределено;
	ОписаниеДокументаОтчетности.ВидЭлектронногоПредставления = Справочники.ВидыОтправляемыхДокументов.РеестрДанныхЭЛНЗаполняемыхРаботодателем;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	Документы.ЗаявлениеВФССОВозмещенииРасходовНаПогребение.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
	РегистрыСведений.НастройкиПрямыхВыплатФСССотрудников.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	СпособыПрямыхВыплатФСС.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
	Списки.Вставить(Метаданные.Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидовПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявлениеВФССОВозмещенииРасходовНаПогребение, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявлениеВФССОВозмещенииРасходовНаПогребениеПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия, Истина);
	Списки.Вставить(Метаданные.Справочники.ЗаявлениеСотрудникаНаВыплатуПособияПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОписьЗаявленийСотрудниковНаВыплатуПособий, Истина);
	Списки.Вставить(Метаданные.Справочники.ОписьЗаявленийСотрудниковНаВыплатуПособийПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий, Истина);
	Списки.Вставить(Метаданные.Справочники.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособийПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком, Истина);
	Списки.Вставить(Метаданные.Справочники.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.ЗаявленияОписиИРеестрыНаВыплатуПособий, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	СпособыПрямыхВыплатФСС.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	
	Описание = Описание + "
	|Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.Чтение.Организации
	|Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов.Изменение.Организации
	|Справочник.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидовПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидовПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидовПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидовПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Чтение.Организации
	|Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Изменение.Организации
	|Справочник.ЗаявлениеВФССОВозмещенииРасходовНаПогребениеПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеВФССОВозмещенииРасходовНаПогребениеПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявлениеВФССОВозмещенииРасходовНаПогребениеПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеВФССОВозмещенииРасходовНаПогребениеПрисоединенныеФайлы.Изменение.Организации
	|Документ.ЗаявлениеСотрудникаНаВыплатуПособия.Чтение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеСотрудникаНаВыплатуПособия.Чтение.Организации
	|Документ.ЗаявлениеСотрудникаНаВыплатуПособия.Изменение.ГруппыФизическихЛиц
	|Документ.ЗаявлениеСотрудникаНаВыплатуПособия.Изменение.Организации
	|Справочник.ЗаявлениеСотрудникаНаВыплатуПособияПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеСотрудникаНаВыплатуПособияПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ЗаявлениеСотрудникаНаВыплатуПособияПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ЗаявлениеСотрудникаНаВыплатуПособияПрисоединенныеФайлы.Изменение.Организации
	|Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий.Чтение.ГруппыФизическихЛиц
	|Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий.Чтение.Организации
	|Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий.Изменение.ГруппыФизическихЛиц
	|Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий.Изменение.Организации
	|Справочник.ОписьЗаявленийСотрудниковНаВыплатуПособийПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ОписьЗаявленийСотрудниковНаВыплатуПособийПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ОписьЗаявленийСотрудниковНаВыплатуПособийПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ОписьЗаявленийСотрудниковНаВыплатуПособийПрисоединенныеФайлы.Изменение.Организации
	|Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Чтение.ГруппыФизическихЛиц
	|Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Чтение.Организации
	|Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Изменение.ГруппыФизическихЛиц
	|Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Изменение.Организации
	|Справочник.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособийПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособийПрисоединенныеФайлы.Чтение.Организации
	|Справочник.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособийПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособийПрисоединенныеФайлы.Изменение.Организации
	|Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Чтение.ГруппыФизическихЛиц
	|Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Чтение.Организации
	|Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Изменение.ГруппыФизическихЛиц
	|Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.Изменение.Организации
	|Справочник.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Чтение.Организации
	|Справочник.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенкомПрисоединенныеФайлы.Изменение.Организации
	|ЖурналДокументов.ЗаявленияОписиИРеестрыНаВыплатуПособий.Чтение.ГруппыФизическихЛиц
	|ЖурналДокументов.ЗаявленияОписиИРеестрыНаВыплатуПособий.Чтение.Организации";
	
КонецПроцедуры

#КонецОбласти

Функция ЗаголовокГиперссылкиЗаявления(СсылкаОснования) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Заявление = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.НайтиЗаявлениеПоОснованию(
		СсылкаОснования,
		,
		"Представление, Дата, Номер");
	Если Заявление = Неопределено Тогда
		Если ТекущаяДатаСеанса() >= ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2021Года() Тогда
			Возврат НСтр("ru = 'Ввести сведения для реестра прямых выплат ФСС'");
		Иначе
			Возврат НСтр("ru = 'Ввести заявление сотрудника на выплату пособия'");
		КонецЕсли;
	Иначе
		Если Заявление.Дата < ПрямыеВыплатыПособийСоциальногоСтрахования.ДатаВступленияВСилуФорм2021Года() Тогда
			Возврат СтрШаблон(
				НСтр("ru = 'Заявление сотрудника на выплату пособия %1 от %2'"),
				Заявление.Номер,
				Формат(Заявление.Дата, "ДЛФ=D"));
		Иначе
			Возврат Заявление.Представление;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Процедура ОбновитьГиперссылкуУведомленияОПрекращенииОтпускаПоУходу(Форма, ИмяГруппы, ИмяРеквизита, Основание, Организация, Сотрудник, ДатаПрекращенияОплаты) Экспорт
	ВидимостьГруппы = Ложь;
	Если Форма.ИспользуетсяРасчетЗарплаты
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования)
		И ПравоДоступа("Чтение", Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком)
		И ПравоДоступа("Чтение", Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия)
		И ПособиеПлатитУчастникПилотногоПроекта(Организация, ДатаПрекращенияОплаты, Ложь) Тогда
		Менеджер = Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком;
		Уведомление = Менеджер.НайтиУведомлениеПоОснованию(Основание, "Ссылка, Представление");
		Если ЗначениеЗаполнено(Уведомление.Ссылка) Тогда
			Форма[ИмяРеквизита] = Уведомление.Представление;
			ВидимостьГруппы = Истина;
		ИначеЕсли ПравоДоступа("Добавление", Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком)
			И Менеджер.ДанныеОДетях(Уведомление.Ссылка, Сотрудник, ДатаПрекращенияОплаты).Количество() > 0 Тогда
			Форма[ИмяРеквизита] = НСтр("ru = 'Ввести уведомление о прекращении отпуска по уходу за ребенком'");
			ВидимостьГруппы = Истина;
		КонецЕсли;
	КонецЕсли;
	Форма.Элементы[ИмяГруппы].Видимость = ВидимостьГруппы;
КонецПроцедуры

Процедура ДобавитьУсловноеОформлениеЗаявленийВТаблицеДетей(Форма, ПутьКТаблице, ИмяТаблицы, ИмяКолонки) Экспорт
	
	Если ПутьКТаблице = "" Тогда
		ПутьКПолюОтбора = ИмяТаблицы + "." + ИмяКолонки;
	Иначе
		ПутьКПолюОтбора = ПутьКТаблице + "." + ИмяТаблицы + "." + ИмяКолонки;
	КонецЕсли;
	
	ЭлементУО = ОбщегоНазначенияБЗК.ДобавитьУсловноеОформление(Форма, ИмяТаблицы + ИмяКолонки);
	ОбщегоНазначенияБЗК.УстановитьПараметрУсловногоОформления(ЭлементУО, "Текст", НСтр("ru = 'Заявление не введено'"));
	ОбщегоНазначенияБЗК.ДобавитьОтборУсловногоОформления(ЭлементУО, ПутьКПолюОтбора, ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц) Экспорт
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ЗаполнитьПризнакВыплачиваетсяФСССуществующихДокументов(МенеджерВременныхТаблиц);
	
КонецПроцедуры

Функция ДопустимыеЗначенияРайонногоКоэффициента() Экспорт
	
	ДопустимыеЗначенияРайонногоКоэффициента = Новый Массив;
	
	ROWSET 	= КорневойЭлементРеестраПилотногоПроектаФСС();
	ROW 	= ЭлементРеестраПилотногоПроектаФСС(ROWSET);
	ФасетыРК = ROW.Свойства().Получить("KF_REG").Тип.Фасеты.Перечисления;
	
	Для Каждого Фасет Из ФасетыРК Цикл
		Если ПустаяСтрока(Фасет.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ПриведенноеЗначение = Число(Фасет.Значение) / 100;
		
		ДопустимыеЗначенияРайонногоКоэффициента.Добавить(ПриведенноеЗначение);
		
	КонецЦикла;
	
	Возврат ДопустимыеЗначенияРайонногоКоэффициента;
	
КонецФункции

Функция КатегорииНачисленийПособийПоПрямымВыплатамФСС() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.КатегорииНачисленийПособийПоПрямымВыплатамФСС();
	
КонецФункции

Функция ПособиеПлатитУчастникПилотногоПроекта(Организация, ПериодРегистрации, ЭЛНКарантинПоКоронавирусу = Ложь) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭЛНКарантинПоКоронавирусу = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Получение настроек из регистра.
	Настройки = НастройкиУчетаПособийСоциальногоСтрахования(Организация);
	
	Если Настройки.ПособияВыплачиваютсяСтрахователем Тогда
		Возврат Ложь; // Для организации действует особый порядок выплаты пособий (не через ФСС).
	КонецЕсли;
	
	Если МаксимальнаяДатаПередачиФССВыплатыПособий() <= ПериодРегистрации Тогда
		Возврат Истина; // Прямые выплаты распространились на всю страну.
	КонецЕсли;
	
	// Установка значений по умолчанию.
	Если Не ЗначениеЗаполнено(Настройки.ДатаПередачиФССВыплатыПособий) Тогда
		Настройки.ДатаПередачиФССВыплатыПособий = ДатаВступленияРегионаОрганизацииВПроектПоПрямымВыплатам(Организация, ПериодРегистрации);
		Если Не ЗначениеЗаполнено(Настройки.ДатаПередачиФССВыплатыПособий) Тогда
			Настройки.ДатаПередачиФССВыплатыПособий = МаксимальнаяДатаПередачиФССВыплатыПособий();
		КонецЕсли;
	КонецЕсли;
	
	// Проверка настроек из регистра.
	Возврат Настройки.ДатаПередачиФССВыплатыПособий <= ПериодРегистрации;
КонецФункции

Функция ТекстСообщенияЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация) Экспорт
	
	ТекстСообщения = НСтр("ru = 'Организация %1 зарегистрирована в одном из регионов, где в настоящее время проводится Пилотный проект ФСС по непосредственной выплате пособий.
	|Необходимо указать дату вступления в Пилотный проект в учетной политике организации, либо уточнить ИНН и КПП организации.'");
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Организация);
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция - Проверить выплату пособия участником пилотного проекта ФСС
//
// Параметры:
//  Организация	 - 	СправочникСсылка.Организации - ссылка на организацию выплаты которой проверяются
//  ПериодРегистрации - Дата
//  Пособия		 - 	Таблица значение, колонки: Начисление, Результат.
//
// Возвращаемое значение:
//  ТекстОшибки - строка.
//
Функция ПроверитьОплатуПособийУчастникомПилотногоПроектаФСС(Организация, ПериодРегистрации, Пособия, ЭЛНКарантинПоКоронавирусу = Ложь) Экспорт
	
	Если Пособия.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПособиеПлатитУчастникПилотногоПроекта = ПособиеПлатитУчастникПилотногоПроекта(Организация, ПериодРегистрации, Ложь);
	Если Не ПособиеПлатитУчастникПилотногоПроекта И Не ЭЛНКарантинПоКоронавирусу Тогда
		Возврат "";
	КонецЕсли;
	
	КатегорииНачисленийПособийПоПрямымВыплатамФСС = КатегорииНачисленийПособийПоПрямымВыплатамФСС();
	Для Каждого Пособие Из Пособия Цикл
		ОписаниеНачисления = ЗарплатаКадрыПовтИсп.ПолучитьИнформациюОВидеРасчета(Пособие.Начисление);
		Если КатегорииНачисленийПособийПоПрямымВыплатамФСС.Найти(ОписаниеНачисления.КатегорияНачисленияИлиНеоплаченногоВремени) <> Неопределено
			И Пособие.Результат > 0 Тогда
			
			Если ПособиеПлатитУчастникПилотногоПроекта Тогда
				Если ПериодРегистрации < МаксимальнаяДатаПередачиФССВыплатыПособий() Тогда
					ТекстОшибки = НСтр("ru = 'С %1 пособие %2 не может быть начислено в организации - участнике пилотного проекта по прямым выплатам пособий.'");
				Иначе
					ТекстОшибки = НСтр("ru = 'С %1 пособие %2 не может быть начислено. Выплата пособий передана ФСС.'");
				КонецЕсли;
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибки,
					Формат(ДатаПередачиФССВыплатыПособий(Организация), "ДЛФ=D"),
					Пособие.Начисление);
			Иначе
				ТекстОшибки = НСтр("ru = 'Пособие, начисляемое в карантине по коронавирусу, не может быть начислено страхователем. Выплата пособий передана ФСС.'");
			КонецЕсли;
			
			Возврат ТекстОшибки;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Функция подготавливает пустую таблицу для механизма проверки оплаты пособий участником пилотного проекта ФСС.
//
// Возвращаемое значение:
//  Таблица - ТаблицаЗначений
//
Функция ПустаяТаблицаДляПроверкиОплатыПособийУчастникомПилотногоПроектаФСС() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Начисление");
	Таблица.Колонки.Добавить("Результат");

	Возврат Таблица;
	
КонецФункции

#Область ОбновлениеИБ

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.261";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("42bac61c-ee04-11ea-80e5-4cedfb43b11a");
	Обработчик.Процедура       = "ПрямыеВыплатыПособийСоциальногоСтрахования.ЗаполнитьСотрудниковИИдентификаторыФССВРеестрахПрямыхВыплат";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение сотрудников и идентификаторов ФСС в реестрах прямых выплат.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.458";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("d54eec9d-7382-11eb-82a3-b61727bfa46c");
	Обработчик.Процедура       = "Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ЗаполнитьТипПриказа";
	Обработчик.Комментарий     = НСтр("ru = 'Поддержка формата прямых выплат ФСС 1.7.7 в документе ""Уведомление о прекращении отпуска по уходу за ребенком"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.458";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("b3c15211-7c28-11eb-82af-f09a943f852e");
	Обработчик.Процедура       = "Документы.ЗаявлениеСотрудникаНаВыплатуПособия.ОбновитьДокументы";
	Обработчик.Комментарий     = НСтр("ru = 'Заполнение сведений для прямых выплат ФСС.'");
	
	СпособыПрямыхВыплатФСС.ЗарегистрироватьОбработчикиОбновления(Обработчики);

КонецПроцедуры

#КонецОбласти

// Определяет есть ли в массиве начислений пособия оплачиваемые за счет ФСС
//
// Параметры
//  МассивНачислений - массив или список значений содержащий виды расчетов.
//
// Возвращаемое значение:
//    Булево - истина, если в массиве начислений есть пособия за счет ФСС.
//
Функция КоллекцияСодержитПособияЗаСчетФСС(МассивНачислений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&МассивНачислений)
	|	И Начисления.КатегорияНачисленияИлиНеоплаченногоВремени В(&МассивКатегорий)";
	Запрос.УстановитьПараметр("МассивНачислений", МассивНачислений);
	Запрос.УстановитьПараметр("МассивКатегорий", КатегорииНачисленийПособийПоПрямымВыплатамФСС());
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

#Область ОбработкаПроверкиЗаполнения

// Проверяет корректность сведений о документе, удостоверяющем личность.
//
// Параметры:
//   Отказ - Булево - Если Истина, то документ не прошел проверку.
//   ДокументОбъект - ДокументОбъект - Объект, в котором указаны сведения.
//   ИменаРеквизитов - Структура - Имена реквизитов объекта со сведениями о документе, удостоверяющем личность.
//
Процедура ПроверитьДокументУдостоверяющийЛичность(Отказ, ДокументОбъект, ИменаРеквизитов) Экспорт
	СоответствиеОшибок = Новый Соответствие;
	ПравилаПроверкиДанныхФизическогоЛица = Новый Массив;
	ФизическиеЛицаЗарплатаКадры.ДобавитьПравилоПроверкиУдостоверенияЛичности(
		ПравилаПроверкиДанныхФизическогоЛица,
		ИменаРеквизитов.ВидДокумента,
		ИменаРеквизитов.СерияДокумента,
		ИменаРеквизитов.НомерДокумента,
		ИменаРеквизитов.ДатаВыдачиДокумента,
		ИменаРеквизитов.КемВыданДокумент,
		НСтр("ru = 'Документ, удостоверяющий личность'"),
		Истина,
		Ложь);
	ДанныеФизическогоЛицаДляПроверки = Новый Структура;
	ДанныеФизическогоЛицаДляПроверки.Вставить("Наименование",                      ДокументОбъект[ИменаРеквизитов.Сотрудник]);
	ДанныеФизическогоЛицаДляПроверки.Вставить("ФизическоеЛицо",                    ДокументОбъект[ИменаРеквизитов.ФизическоеЛицо]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.ВидДокумента,        ДокументОбъект[ИменаРеквизитов.ВидДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.СерияДокумента,      ДокументОбъект[ИменаРеквизитов.СерияДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.НомерДокумента,      ДокументОбъект[ИменаРеквизитов.НомерДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.ДатаВыдачиДокумента, ДокументОбъект[ИменаРеквизитов.ДатаВыдачиДокумента]);
	ДанныеФизическогоЛицаДляПроверки.Вставить(ИменаРеквизитов.КемВыданДокумент,    ДокументОбъект[ИменаРеквизитов.КемВыданДокумент]);
	ФизическиеЛицаЗарплатаКадры.ПроверитьДанныеФизическогоЛица(
		ДанныеФизическогоЛицаДляПроверки,
		ПравилаПроверкиДанныхФизическогоЛица,
		СоответствиеОшибок);
	Для Каждого КлючИЗначение Из СоответствиеОшибок Цикл
		Для Каждого ОписаниеОшибки Из КлючИЗначение.Значение Цикл
			Если ОписаниеОшибки.ПолеФормы <> "КемВыдан"
				И ОписаниеОшибки.ПолеФормы <> "ДатаВыдачи" Тогда
				ЗарплатаКадрыОтображениеОшибок.СообщитьОбОшибке(Отказ, ОписаниеОшибки.ТекстОшибки, ОписаниеОшибки.ПолеФормы);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ДокументБольничныйЛист

Процедура ПриЗаписиБольничного(БольничныйОбъект) Экспорт
	ПриЗаписиБольничногоПометитьНаУдалениеЗаявления(БольничныйОбъект);
	ПриЗаписиБольничногоОбновитьЗаявления65(БольничныйОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Определяет, является ли организация участником проекта прямых выплат
// и, если является, введена ли для этой организации дата передачи в ФСС выплаты пособий.
//
// Параметры
//   Организация - СправочникСсылка.Организации - Организация.
//   ДатаАктуальности - Дата - Дата, на которую проверяется участие в проекте по прямым выплатам.
//
// Возвращаемое значение:
//   Булево - Истина, если на указанную дату организация участвует в пилотном проекте и дата вступления не заполнена.
//            Ложь, если на указанную дату организация или регион не участвуют в пилотном проекте.
//
Функция ЭтоУчастникПилотногоПроектаБезДатыВступленияВПроект(Организация, ДатаАктуальности) Экспорт
	
	ДатаВступленияРегиона = ДатаВступленияРегионаОрганизацииВПроектПоПрямымВыплатам(Организация, ДатаАктуальности);
	Если ДатаВступленияРегиона = МаксимальнаяДатаПередачиФССВыплатыПособий() 
		Или ДатаАктуальности >= МаксимальнаяДатаПередачиФССВыплатыПособий() Тогда
		Возврат Ложь; // Прямые выплаты распространились на всю страну.
	ИначеЕсли ДатаВступленияРегиона = Неопределено
		Или ДатаВступленияРегиона > ДатаАктуальности Тогда
		Возврат Ложь; // Регион не участвует в пилотном проекте или на указанную дату регион еще не участвовал в проекте.
	КонецЕсли;
	
	// Регион участвует, чтение настроек учета.
	Настройки = НастройкиУчетаПособийСоциальногоСтрахования(Организация);
	Если Настройки.ПособияВыплачиваютсяСтрахователем Тогда
		Возврат Ложь; // Для организации действует особый порядок выплаты пособий (не через ФСС).
	КонецЕсли;
	
	Возврат Не ЗначениеЗаполнено(Настройки.ДатаПередачиФССВыплатыПособий); // Не заполнена дата вступления?
	
КонецФункции

// Возвращает дату вступления региона организации в проект по прямым выплатам.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация.
//
// Возвращаемое значение:
//   Неопределено - Если нет информации о регистрации в налоговом органе в регионе еще не действует проект по прямым выплатам.
//   Дата - Дата вступления региона в проект по прямым выплатам.
//
Функция ДатаВступленияРегионаОрганизацииВПроектПоПрямымВыплатам(Организация, ДатаАктуальности) Экспорт
	РегистрацияВНалоговомОргане = ЗарплатаКадры.РегистрацияВНалоговомОргане(Организация, ДатаАктуальности);
	Если РегистрацияВНалоговомОргане.Пустая() Тогда
		Возврат Неопределено; // Нет информации о регистрации в налоговом органе.
	КонецЕсли;
	КодыРегионовПилотногоПроекта = ПрямыеВыплатыПособийСоциальногоСтрахованияКлиентСервер.КодыРегионовПилотногоПроекта();
	Если ЗарплатаКадры.ЭтоЮридическоеЛицо(Организация) Тогда
		КПП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "КПП");
		КодРегиона = Лев(КПП, 2);
	Иначе
		КодНалоговогоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");
		КодРегиона = Лев(КодНалоговогоОргана, 2);
	КонецЕсли;
	ДатаРегиона = КодыРегионовПилотногоПроекта[КодРегиона];
	Возврат ?(ЗначениеЗаполнено(ДатаРегиона), ДатаРегиона, МаксимальнаяДатаПередачиФССВыплатыПособий());
КонецФункции

// Возвращает настройки учета пособий социального страхования по организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - Организация.
//
// Возвращаемое значение:
//   Структура - Сведения из регистра НастройкиУчетаПособийСоциальногоСтрахования.
//       * ДатаПередачиФССВыплатыПособий - Дата - Дата передачи выплаты пособий в ФСС.
//       * ПособияВыплачиваютсяСтрахователем - Булево - Истина, если пособия выплачиваются страхователем.
//
Функция НастройкиУчетаПособийСоциальногоСтрахования(Организация)
	Отбор = Новый Структура("Организация", Организация);
	Возврат РегистрыСведений.НастройкиУчетаПособийСоциальногоСтрахования.Получить(Отбор);
КонецФункции

Функция МаксимальнаяДатаПередачиФССВыплатыПособий()

	Возврат '20210101';

КонецФункции

#Область Печать

Функция ДатаВступленияВСилуФорм2017Года() Экспорт
	Возврат '20171229';
КонецФункции

Функция ДатаВступленияВСилуФорм2021Года() Экспорт
	Возврат ЗарплатаКадрыПовтИсп.ДатаВступленияВСилуНА("ПечатныеФормыПрямыхВыплат2021");
КонецФункции

Процедура ВывестиШапкуИПодвалЗаявленияОВозмещении_2012(Макет, Выборка) Экспорт
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(27);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеТерриториальногоОрганаФСС), ДлиныСтрок), Макет, "Наименование_ФСС_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.ОрганизацияНаименование), ДлиныСтрок), Макет, "ФИО_Заявителя_", 135);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.РегистрационныйНомерФСС, Макет, "РегистрационныйНомер_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ДополнительныйКодФСС, Макет, "ДополнительныйКод_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КодПодчиненностиФСС, Макет, "КодПодчиненности_", 5);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ИНН, Макет, "ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КПП, Макет, "КПП_", 9);
	
	Если ЗначениеЗаполнено(Выборка.АдресОрганизации) Тогда
		СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(Выборка.АдресОрганизации, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));	
		Если СтруктураАдреса <> Неопределено 
			И СтруктураАдреса.Свойство("Индекс") Тогда
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтруктураАдреса.Индекс, Макет, "АдресРегистрации_", 6);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Регион), Макет, "АдресРегистрации_", 17, 7);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Район), Макет, "АдресРегистрации_", 17, 24);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(?(ЗначениеЗаполнено(СтруктураАдреса.Город), СтруктураАдреса.Город + " " + СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.НаселенныйПункт)), Макет, "АдресРегистрации_", 34, 41);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Улица), Макет, "АдресРегистрации_", 37, 75);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Дом), Макет, "АдресРегистрации_", 8, 112);
			Если ВРег(СтруктураАдреса.ТипКорпуса) = "СТРОЕНИЕ" Тогда
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 123);
			Иначе
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 120);
			КонецЕсли;;
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Квартира), Макет, "АдресРегистрации_", 6, 126);
		КонецЕсли;
	КонецЕсли;
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(39);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеБанка), ДлиныСтрок), Макет, "НаименованиеБанка_", 78);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерСчета, Макет, "НомерСчета_", 20);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.БИКБанка, Макет, "БИК_", 9);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерЛицевогоСчета, Макет, "ЛицСчет_", 12);
	
	Если ЗначениеЗаполнено(Выборка.ТелефонСоставителя) Тогда
		СтруктураТелефона = УправлениеКонтактнойИнформацией.СведенияОТелефоне(Выборка.ТелефонСоставителя);
		Телефон = СтрЗаменить(СтруктураТелефона.КодГорода, "-", "") + СтрЗаменить(СтруктураТелефона.НомерТелефона, "-", "");
		Телефон = СтрЗаменить(Телефон, " ", ""); 
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(Телефон, Макет, "ТелефонСоставителя_", 10);
	КонецЕсли;
	Макет.Параметры.ДолжностьРуководителя = "" + Выборка.ДолжностьРуководителя;
	Макет.Параметры.ФИОРуководителя = "" + Выборка.ФИОРуководителя;
	
КонецПроцедуры

Процедура ВывестиШапкуИПодвалЗаявленияОВозмещении_2017(Макет, Выборка) Экспорт
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(27);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеТерриториальногоОрганаФСС), ДлиныСтрок), Макет, "Наименование_ФСС_", 135);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.ОрганизацияНаименование), ДлиныСтрок), Макет, "ФИО_Заявителя_", 135);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.РегистрационныйНомерФСС, Макет, "РегистрационныйНомер_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ДополнительныйКодФСС, Макет, "ДополнительныйКод_", 10);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КодПодчиненностиФСС, Макет, "КодПодчиненности_", 5);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.ИНН, Макет, "ИНН_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КПП, Макет, "КПП_", 9);
	
	Если ЗначениеЗаполнено(Выборка.АдресОрганизации) Тогда
		СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(Выборка.АдресОрганизации, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));	
		Если СтруктураАдреса <> Неопределено 
			И СтруктураАдреса.Свойство("Индекс") Тогда
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(СтруктураАдреса.Индекс, Макет, "АдресРегистрации_", 6);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Регион), Макет, "АдресРегистрации_", 37, 7);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Район), Макет, "АдресРегистрации_", 37, 24);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(?(
				ЗначениеЗаполнено(СтруктураАдреса.Город),
				СтруктураАдреса.Город + " " + СтруктураАдреса.НаселенныйПункт,
				СтруктураАдреса.НаселенныйПункт)), Макет, "АдресРегистрации_", 34, 81);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Улица), Макет, "АдресРегистрации_", 37, 115);
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Дом), Макет, "АдресРегистрации_", 7, 152);
			Если ВРег(СтруктураАдреса.ТипКорпуса) = "СТРОЕНИЕ" Тогда
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 162);
			Иначе
				ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Корпус), Макет, "АдресРегистрации_", 3, 159);
			КонецЕсли;;
			ЗарплатаКадры.ВывестиДанныеПоБуквенно(ВРег(СтруктураАдреса.Квартира), Макет, "АдресРегистрации_", 5, 165);
		КонецЕсли;
	КонецЕсли;
	
	ДлиныСтрок = Новый Массив();
	ДлиныСтрок.Добавить(39);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(ЗарплатаКадры.РазбитьСтрокуНаПодСтроки(ВРег(Выборка.НаименованиеБанка), ДлиныСтрок), Макет, "НаименованиеБанка_", 78);
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерСчета, Макет, "НомерСчета_", 20);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.БИКБанка, Макет, "БИК_", 9);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.НомерЛицевогоСчета, Макет, "ЛицСчет_", 12);
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(Выборка.КБК, Макет, "КБК_", 20);
	
	Если ЗначениеЗаполнено(Выборка.ТелефонСоставителя) Тогда
		СтруктураТелефона = УправлениеКонтактнойИнформацией.СведенияОТелефоне(Выборка.ТелефонСоставителя);
		Телефон = СтрЗаменить(СтруктураТелефона.КодГорода, "-", "") + СтрЗаменить(СтруктураТелефона.НомерТелефона, "-", "");
		Телефон = СтрЗаменить(Телефон, " ", ""); 
		ЗарплатаКадры.ВывестиДанныеПоБуквенно(Телефон, Макет, "ТелефонСоставителя_", 10);
	КонецЕсли;
	Макет.Параметры.ДолжностьРуководителя = "" + Выборка.ДолжностьРуководителя;
	Макет.Параметры.ФИОРуководителя = "" + Выборка.ФИОРуководителя;
	
	ЗарплатаКадры.ВывестиДанныеПоБуквенно(СокрЛП(Выборка.АдресЭлектроннойПочтыОрганизации), Макет, "АдресЭлектроннойПочты_", 28);
КонецПроцедуры

Процедура ВывестиТелефонПоБуквам(ПредставлениеТелефона, ТабличныйДокумент, ИмяПоказателя, КоличествоЯчеек, НачальнаяЯчейка = 1) Экспорт
	Точечная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	Длина = Мин(СтрДлина(ПредставлениеТелефона), КоличествоЯчеек);
	Для НомерЯчейки = НачальнаяЯчейка По НачальнаяЯчейка + Длина - 1 Цикл
		Символ = Сред(ПредставлениеТелефона, НомерЯчейки - НачальнаяЯчейка + 1, 1);;
		ОбластьЯчеекТабличногоДокумента = ТабличныйДокумент.Области[ИмяПоказателя + Формат(НомерЯчейки, "ЧГ=0")];
		ОбластьЯчеекТабличногоДокумента.Текст = Символ;
		Если Не ПустаяСтрока(Символ) И Символ <> "-" Тогда
			ОбластьЯчеекТабличногоДокумента.ГраницаСлева  = Точечная;
			ОбластьЯчеекТабличногоДокумента.ГраницаСверху = Точечная;
			ОбластьЯчеекТабличногоДокумента.ГраницаСнизу  = Точечная;
			ОбластьЯчеекТабличногоДокумента.ГраницаСправа = Точечная;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов

Функция ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Документ, ОплатаДнейУходаЗаДетьмиИнвалидами = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов(Документ, ОплатаДнейУходаЗаДетьмиИнвалидами);
	
КонецФункции

Функция ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов();
	
КонецФункции

Функция ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииВыплатРодителямДетейИнвалидов() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ИспользуетсяЗаполнениеДокументаЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов();
	
КонецФункции

#КонецОбласти

#Область ЗаявлениеВФССОВозмещенииРасходовНаПогребение

Функция ДанныеЗаполненияЗаявленияВФССОВозмещенииРасходовНаПогребение(Организация, Ссылка, ЕдиновременноеПособие = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДанныеЗаполненияЗаявленияВФССОВозмещенииРасходовНаПогребение(Организация, Ссылка, ЕдиновременноеПособие);
	
КонецФункции

Функция ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииРасходовНаПогребение() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ОписаниеФиксацииРеквизитовЗаявленияВФССОВозмещенииРасходовНаПогребение();
	
КонецФункции

Функция ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииРасходовНаПогребение() Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ИспользуетсяЗаполнениеЗаявленияВФССОВозмещенииРасходовНаПогребение();
	
КонецФункции

#КонецОбласти

#Область ЗаявлениеСотрудникаНаВыплатуПособия

Функция БанковскиеРеквизитыСотрудникаДляВыплатыЗарплаты(Дата, Организация, Сотрудник, ФизическоеЛицо) Экспорт
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.БанковскиеРеквизитыСотрудникаДляВыплатыЗарплаты(Дата, Организация, Сотрудник, ФизическоеЛицо);
КонецФункции

Функция РеестрПоЗаявлению(Заявление) Экспорт
	
	Реестр = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реестры.Ссылка,
	|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СтатусДокумента
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК Реестры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	|		ПО Реестры.Ссылка = РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка
	|ГДЕ
	|	Реестры.Заявление = &Заявление
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Ссылка,
	|	ОписьЗаявленийСотрудниковНаВыплатуПособий.СтатусДокумента
	|ИЗ
	|	Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий.Заявления КАК ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОписьЗаявленийСотрудниковНаВыплатуПособий КАК ОписьЗаявленийСотрудниковНаВыплатуПособий
	|		ПО ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Ссылка = ОписьЗаявленийСотрудниковНаВыплатуПособий.Ссылка
	|ГДЕ
	|	ОписьЗаявленийСотрудниковНаВыплатуПособийЗаявления.Заявление = &Заявление";
	Запрос.УстановитьПараметр("Заявление", Заявление);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Реестр = Новый Структура("Ссылка, СтатусДокумента", Выборка.Ссылка, Выборка.СтатусДокумента);
	КонецЕсли;
	
	Возврат Реестр;
	
КонецФункции

Функция РайонныйКоэффициентРФПодразделенияОрганизацииДляЗаявленияСотрудникаНаВыплатуПособия(Организация, Подразделение = Неопределено) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.РайонныйКоэффициентРФПодразделенияОрганизацииДляЗаявленияСотрудникаНаВыплатуПособия(Организация, Подразделение);
	
КонецФункции

// Функция находит вид на жительство или разрешение на проживание для физлица
Функция ДокументРазрешениеНаПроживаниеФизическогоЛица(ФизическоеЛицо, Дата) Экспорт
	
	СтруктураПолейДокумента  = Новый Структура("ВидДокумента, КемВыдан, Серия, Номер, ДатаВыдачи");
	СтруктураПолейДокумента.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка();
	СтруктураПолейДокумента.КемВыдан = "";
	СтруктураПолейДокумента.Серия = "";
	СтруктураПолейДокумента.Номер = "";
	СтруктураПолейДокумента.ДатаВыдачи = '00010101';
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
	|	ВидыДокументовФизическихЛиц.КодМВД КАК КодМВД,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, Физлицо = &ФизическоеЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка
	|			И (ВидыДокументовФизическихЛиц.КодМВД = ""12""
	|				ИЛИ ВидыДокументовФизическихЛиц.КодМВД = ""15"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодМВД";
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПолейДокумента, Выборка);
	КонецЕсли;
	
	Возврат	 СтруктураПолейДокумента
	
КонецФункции

Функция СписокДетейПоУходуЗаКоторымиПредоставленОтпуск(ДокументОснование) Экспорт
	
	Возврат ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.СписокДетейПоУходуЗаКоторымиПредоставленОтпуск(ДокументОснование);
	
КонецФункции

Функция ДоляРабочегоВремениСотрудника(Сотрудник, Дата) Экспорт
	
	ДоляРабочегоВремениСотрудника = 1;
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудник),
		"ДоляНеполногоРабочегоВремени",
		Дата);
	
	Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
		
		ДоляРабочегоВремениСотрудника = КадровыеДанныеСотрудника[0].ДоляНеполногоРабочегоВремени;
		
	КонецЕсли;
	
	Возврат ДоляРабочегоВремениСотрудника;
	
КонецФункции

Процедура ДобавитьКомандыПечатиЗаявленияСотрудникаНаВыплатуПособия(КомандыПечати) Экспорт

	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ДобавитьКомандыПечатиЗаявленияСотрудникаНаВыплатуПособия(КомандыПечати);

КонецПроцедуры

Функция КодыПричинИсправления(КодыПричин = Неопределено) Экспорт
	Если ТипЗнч(КодыПричин) = Тип("СписокЗначений") Тогда
		Список = КодыПричин;
		Список.Очистить();
	Иначе
		Список = Новый СписокЗначений;
	КонецЕсли;
	
	Список.Добавить("01", НСтр("ru = 'Представлены дополнительные сведения о выплатах в расчетном периоде'"));
	Список.Добавить("02", НСтр("ru = 'Поступление от застрахованного лица заявления о замене одного года или двух лет расчетного периода предшествующими годами'"));
	Список.Добавить("03", НСтр("ru = 'По результатам документальной выездной (камеральной) проверки'"));
	Список.Добавить("04", НСтр("ru = 'Перерасчет листка нетрудоспособности при признании несчастного случая на производстве страховым'"));
	Список.Добавить("05", НСтр("ru = 'Перерасчет листка нетрудоспособности в случае ошибки в расчете работодателя'"));
	Список.Добавить("06", НСтр("ru = 'Иное'"));
	
	Для Каждого Элемент Из Список Цикл
		Элемент.Представление = Элемент.Значение + ". " + Элемент.Представление;
	КонецЦикла;
	
	Возврат Список;
КонецФункции

Процедура ПриЗаписиБольничногоПометитьНаУдалениеЗаявления(БольничныйОбъект)
	
	ЗначенияРеквизитовДоЗаписи = БольничныйОбъект.ДополнительныеСвойства.ЗначенияРеквизитовДоЗаписи;
	Если БольничныйОбъект.ПометкаУдаления = ЗначенияРеквизитовДоЗаписи.ПометкаУдаления Тогда
		Возврат; // Пометка удаления не изменилась.
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Заявление = Документы.ЗаявлениеСотрудникаНаВыплатуПособия.НайтиЗаявлениеПоОснованию(БольничныйОбъект.Ссылка, , "Ссылка, ПометкаУдаления");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Заявление <> Неопределено И Заявление.ПометкаУдаления <> БольничныйОбъект.ПометкаУдаления Тогда
		
		Если Не ПравоДоступа("Изменение", Заявление.Ссылка.Метаданные()) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1 - недостаточно прав для изменения пометки удаления, поскольку введено Заявление сотрудника на выплату пособия.'"),
				БольничныйОбъект.Ссылка);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ЗаявлениеОбъект = Заявление.Ссылка.ПолучитьОбъект();
		ТекстОшибкиЗаявления = "";
		Если ЗаявлениеОбъект.ОбъектЗафиксирован(ТекстОшибкиЗаявления) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось изменить пометку удаления %1: Больничный включен в %2: %3'"),
				БольничныйОбъект.Ссылка,
				Заявление.Ссылка,
				ТекстОшибкиЗаявления);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Попытка
			ЗаявлениеОбъект.Заблокировать();
			ЗаявлениеОбъект.УстановитьПометкуУдаления(БольничныйОбъект.ПометкаУдаления);
		Исключение
			Если БольничныйОбъект.ПометкаУдаления Тогда
				ЗаголовокОшибки = НСтр("ru = 'При установке пометки удаления документа ""%1""
					|не удалось пометить на удаление документ ""%2""'");
			Иначе
				ЗаголовокОшибки = НСтр("ru = 'При снятии пометки удаления документа ""%1""
					|не удалось снять пометку удаления документа ""%2""'");
			КонецЕсли;
			ЗаголовокОшибки = СтрШаблон(ЗаголовокОшибки, БольничныйОбъект.Ссылка, Заявление.Ссылка);
			ЗаголовокОшибки = СтрЗаменить(ЗаголовокОшибки, Символы.ПС, " ");
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Кратко = ЗаголовокОшибки + ":" 
				+ Символы.ПС 
				+ Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке) 
				+ Символы.ПС 
				+ Символы.ПС + НСтр("ru = 'Подробности см. в журнале регистрации.'");
			Подробно = ЗаголовокОшибки + ":" 
				+ Символы.ПС 
				+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Учет пособий социального страхования'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				БольничныйОбъект.Ссылка.Метаданные(),
				БольничныйОбъект.Ссылка,
				Подробно);
			ВызватьИсключение Кратко;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиБольничногоОбновитьЗаявления65(БольничныйОбъект)
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если СтрНачинаетсяС(БольничныйОбъект.НомерЛисткаНетрудоспособности, "9990") Тогда
			
			ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(БольничныйОбъект.Организация);
			ВключитьФлажокИзмененияПринятыФССЕслиЭтоЭЛН(БольничныйОбъект.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация);
			
		КонецЕсли;
		
		Если Не БольничныйОбъект.ПометкаУдаления
			И БольничныйОбъект.ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин Тогда
			
			СтрокаТаблицы = НайтиЗаявлениеИРеестр(БольничныйОбъект);
			
			Если СтрокаТаблицы = Неопределено Тогда
				// Нет заявления, либо больничный не соответствует критериям 65+.
				Возврат;
			КонецЕсли;
			
			Если СтрокаТаблицы.РеестрОсвобождениеДатаНачала1 <= БольничныйОбъект.ДатаНачала
				И СтрокаТаблицы.РеестрОсвобождениеДатаОкончания1 >= БольничныйОбъект.ДатаОкончания
				И Не СтрНачинаетсяС(БольничныйОбъект.НомерЛисткаНетрудоспособности, "9990") Тогда
				// Найдено заявление и реестр 65+. ЭЛН отправлять не требуется.
				ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(БольничныйОбъект.Организация);
				ВключитьФлажокИзмененияПринятыФССЕслиЭтоЭЛН(БольничныйОбъект.НомерЛисткаНетрудоспособности, ГоловнаяОрганизация);
			КонецЕсли;
			
			// Заполнение основания заявления и отключение пометки удаления.
			Если ЗначениеЗаполнено(СтрокаТаблицы.ЗаявлениеДокументОснование)
				И СтрокаТаблицы.ЗаявлениеДокументОснование <> БольничныйОбъект.Ссылка Тогда
				Текст = СтрШаблон(
					НСтр("ru = 'Для больничного найдено заявление %1, но в нем выбран другой документ: %2.'"),
					СтрокаТаблицы.ЗаявлениеСсылка,
					СтрокаТаблицы.ЗаявлениеДокументОснование);
				ОбщегоНазначения.СообщитьПользователю(Текст, СтрокаТаблицы.ЗаявлениеСсылка);
			КонецЕсли;
			
			ЗаявлениеОбъект = СтрокаТаблицы.ЗаявлениеСсылка.ПолучитьОбъект();
			ЗаявлениеОбъект.ДополнительныеСвойства.Вставить("РазрешитьИзменение", Истина);
			Если ЗаявлениеОбъект.ПометкаУдаления Тогда
				ЗаявлениеОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ЗаявлениеОбъект.ДокументОснование = БольничныйОбъект.Ссылка;
			ЗаявлениеОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"ПрямыеВыплатыПособийСоциальногоСтрахования.ОбновитьЗаявления65ПриЗаписиБольничного",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			БольничныйОбъект.Ссылка);
	КонецПопытки;
КонецПроцедуры

Функция СвойстваПособияФСС(ВидПособияФСС, ПервичныйДокумент) Экспорт
	Результат = Новый Структура("ЗаголовокПоля, ОписаниеТипов, ЭтоУходЗаРебенком, ПараметрыВыбора, ОтбиратьПоСотруднику");
	Результат.ПараметрыВыбора = Новый Массив;
	Результат.ОтбиратьПоСотруднику = Истина;
	
	СтандартнаяОбработка = Истина;
	
	// АПК:278-выкл Базовые подсистемы могут условно вызывать расширенные.
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПрямыеВыплатыПособийСоциальногоСтрахованияРасширенный");
		Модуль.ПриОпределенииСвойствПособийФСС(ВидПособияФСС, ПервичныйДокумент, Результат, СтандартнаяОбработка);
	КонецЕсли;
	// АПК:278-вкл
	
	Если СтандартнаяОбработка Тогда
		
		ОпределитьПоТипу = Не ЗначениеЗаполнено(ВидПособияФСС) И ЗначениеЗаполнено(ПервичныйДокумент);
		
		Если ?(ОпределитьПоТипу,
				ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.Отпуск"),
				ВидПособияФСС = Перечисления.ПособияНазначаемыеФСС.ОтпускСверхЕжегодногоНаПериодЛечения) Тогда
			
			Результат.ЗаголовокПоля = НСтр("ru = 'Отпуск на период лечения'");
			Результат.ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.Отпуск");
			
		ИначеЕсли ?(ОпределитьПоТипу,
				ТипЗнч(ПервичныйДокумент) = Тип("ДокументСсылка.БольничныйЛист"),
				ВидПособияФСС = Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности
					Или ВидПособияФСС = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам
					Или ВидПособияФСС = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки
					Или ВидПособияФСС = Перечисления.ПособияНазначаемыеФСС.ПособиеВставшимНаУчетВРанниеСроки
					Или ВидПособияФСС = Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве
					Или ВидПособияФСС = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка) Тогда
			
			Результат.ЗаголовокПоля = НСтр("ru = 'Больничный'");
			Результат.ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.БольничныйЛист");
			Результат.ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПособиеВыплачиваетсяФСС", Истина));
			
		Иначе
			
			Результат.ЗаголовокПоля = НСтр("ru = 'Первичный документ'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область РеестрПВСО

Функция ЗапросРеестраПрямыхВыплатПоПервичнымДокументам(Объект, ТаблицаОснований, ИмяВТ) Экспорт
	Если Не ЗначениеЗаполнено(Объект.ВидРеестра) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СсылкаРеестра",          Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация",            Объект.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",    ЗарплатаКадры.ГоловнаяОрганизация(Объект.Организация));
	Запрос.УстановитьПараметр("ВидРеестра",             Объект.ВидРеестра);
	Запрос.УстановитьПараметр("ДатаРеестра",            Объект.Дата);
	Запрос.УстановитьПараметр("ДатаНачалаАктуальности", ДобавитьМесяц(НачалоМесяца(Объект.Дата), -6));
	Запрос.УстановитьПараметр("ТаблицаОснований",       ТаблицаОснований);
	
	СоздатьВТЗаявления(Запрос, ТаблицаОснований, Объект.ВидРеестра);
	
	СоздатьВТРанееПринятыеРеестры(Запрос);
	
	ПриОпределенииЗапросаРеестраПрямыхВыплатПоПервичнымДокументам(Запрос, Объект, ТаблицаОснований);
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяВТ <> Неопределено Тогда
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
		ПоследнийЗапрос.ТаблицаДляПомещения = ИмяВТ;
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ИначеЕсли ТаблицаОснований = Неопределено Тогда
		// Схема запроса в этом случае, к сожалению, не видит полей из ВТ.
		Запрос.Текст = Запрос.Текст + Символы.ПС +
			"УПОРЯДОЧИТЬ ПО
			|ВТЗаявления.ФамилияПолучателя,
			|ВТЗаявления.ИмяПолучателя,
			|ВТЗаявления.ОтчествоПолучателя,
			|ВТЗаявления.Дата";
	КонецЕсли;
	
	Возврат Запрос;
КонецФункции

Процедура ПриОпределенииЗапросаРеестраПрямыхВыплатПоПервичнымДокументам(Запрос, Объект, ТаблицаОснований)
	
	ПрямыеВыплатыПособийСоциальногоСтрахованияВнутренний.ПриОпределенииЗапросаРеестраПрямыхВыплатПоПервичнымДокументам(Запрос, Объект, ТаблицаОснований);
	
КонецПроцедуры

Функция СоздатьВТЗаявления(Запрос, ТаблицаОснований, ВидРеестра) Экспорт
	Если ТипЗнч(ТаблицаОснований) = Тип("ТаблицаЗначений") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОснований.Заявление КАК Заявление,
		|	ТаблицаОснований.ПервичныйДокумент КАК ПервичныйДокумент
		|ПОМЕСТИТЬ ТаблицаОснований
		|ИЗ
		|	&ТаблицаОснований КАК ТаблицаОснований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОснований.Заявление КАК Заявление,
		|	ТаблицаОснований.ПервичныйДокумент КАК ПервичныйДокумент,
		|	Заявления.ДокументОснование КАК ДокументОснование,
		|	Заявления.Сотрудник КАК Сотрудник,
		|	Заявления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Заявления.ФамилияПолучателя КАК ФамилияПолучателя,
		|	Заявления.ИмяПолучателя КАК ИмяПолучателя,
		|	Заявления.ОтчествоПолучателя КАК ОтчествоПолучателя,
		|	Заявления.Дата КАК Дата,
		|	Заявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
		|	Заявления.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
		|	ВЫБОР
		|		КОГДА Заявления.ДатаПредставленияПакетаДокументов = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Заявления.Дата
		|		ИНАЧЕ Заявления.ДатаПредставленияПакетаДокументов
		|	КОНЕЦ КАК ДатаПредставленияПакетаДокументов,
		|	Заявления.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	Заявления.ИзвещениеИзФССНомер КАК ИзвещениеИзФССНомер,
		|	Заявления.ИзвещениеИзФССДата КАК ИзвещениеИзФССДата
		|ПОМЕСТИТЬ ВТЗаявления
		|ИЗ
		|	ТаблицаОснований КАК ТаблицаОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК Заявления
		|		ПО ТаблицаОснований.Заявление = Заявления.Ссылка";
	Иначе
		
		СоздатьВТУчтенныеЗаявления(Запрос);
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Заявления.Ссылка КАК Заявление,
		|	Заявления.ДокументОснование КАК ПервичныйДокумент,
		|	Заявления.ДокументОснование КАК ДокументОснование,
		|	Заявления.Сотрудник КАК Сотрудник,
		|	Заявления.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Заявления.ФамилияПолучателя КАК ФамилияПолучателя,
		|	Заявления.ИмяПолучателя КАК ИмяПолучателя,
		|	Заявления.ОтчествоПолучателя КАК ОтчествоПолучателя,
		|	Заявления.Дата КАК Дата,
		|	Заявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
		|	Заявления.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
		|	ВЫБОР
		|		КОГДА Заявления.ДатаПредставленияПакетаДокументов = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА Заявления.Дата
		|		ИНАЧЕ Заявления.ДатаПредставленияПакетаДокументов
		|	КОНЕЦ КАК ДатаПредставленияПакетаДокументов,
		|	Заявления.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
		|	Заявления.ИзвещениеИзФССНомер КАК ИзвещениеИзФССНомер,
		|	Заявления.ИзвещениеИзФССДата КАК ИзвещениеИзФССДата
		|ПОМЕСТИТЬ ВТЗаявления
		|ИЗ
		|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК Заявления
		|ГДЕ
		|	Заявления.ВидРеестра = &ВидРеестра
		|	И Заявления.Организация = &Организация
		|	И Заявления.Дата >= &ДатаНачалаАктуальности
		|	И Заявления.Проведен
		|	И НЕ Заявления.Ссылка В
		|				(ВЫБРАТЬ
		|					УчтенныеЗаявления.Заявление
		|				ИЗ
		|					ВТУчтенныеЗаявления КАК УчтенныеЗаявления)";
		Если ВидРеестра = Перечисления.ВидыРеестровСведенийНеобходимыхДляНазначенияИВыплатыПособий.ЕжемесячныеПособияПоУходуЗаРебенком Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗаявления", "ВТЗаявленияБезУведомлений");
			ТекстЗапроса = ТекстЗапроса + ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов()
			+
			"ВЫБРАТЬ * ПОМЕСТИТЬ ВТЗаявления ИЗ ВТЗаявленияБезУведомлений КАК ЗаявленияБезУведомлений
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|"
			+
			"ВЫБРАТЬ
			|	Заявления.Ссылка КАК Заявление,
			|	ПрекращаемыеЗаявления.Ссылка КАК ПервичныйДокумент,
			|	Заявления.ДокументОснование КАК ДокументОснование,
			|	Заявления.Сотрудник КАК Сотрудник,
			|	Заявления.ФизическоеЛицо КАК ФизическоеЛицо,
			|	Заявления.ФамилияПолучателя КАК ФамилияПолучателя,
			|	Заявления.ИмяПолучателя КАК ИмяПолучателя,
			|	Заявления.ОтчествоПолучателя КАК ОтчествоПолучателя,
			|	Заявления.Дата КАК Дата,
			|	Заявления.ИдентификаторСтрокиОснования КАК ИдентификаторСтрокиОснования,
			|	Заявления.НомерЛисткаНетрудоспособности КАК НомерЛисткаНетрудоспособности,
			|	ВЫБОР
			|		КОГДА Заявления.ДатаПредставленияПакетаДокументов = ДАТАВРЕМЯ(1, 1, 1)
			|			ТОГДА Заявления.Дата
			|		ИНАЧЕ Заявления.ДатаПредставленияПакетаДокументов
			|	КОНЕЦ КАК ДатаПредставленияПакетаДокументов,
			|	Заявления.ФинансированиеФедеральнымБюджетом КАК ФинансированиеФедеральнымБюджетом,
			|	Заявления.ИзвещениеИзФССНомер КАК ИзвещениеИзФССНомер,
			|	Заявления.ИзвещениеИзФССДата КАК ИзвещениеИзФССДата
			|ИЗ
			|	Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком.ПрекращаемыеЗаявления КАК ПрекращаемыеЗаявления
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК РеестрыУведомлений
			|		ПО ПрекращаемыеЗаявления.Заявление = РеестрыУведомлений.Заявление
			|			И ПрекращаемыеЗаявления.Ссылка = РеестрыУведомлений.ПервичныйДокумент
			|			И (РеестрыУведомлений.Ссылка.Дата >= &ДатаНачалаАктуальности)
			|			И (РеестрыУведомлений.Ссылка <> &СсылкаРеестра)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК Заявления
			|		ПО ПрекращаемыеЗаявления.Заявление = Заявления.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаявленияБезУведомлений КАК ЗаявленияБезУведомлений
			|		ПО ПрекращаемыеЗаявления.Заявление = ЗаявленияБезУведомлений.Заявление
			|ГДЕ
			|	ПрекращаемыеЗаявления.Ссылка.Организация = &Организация
			|	И ПрекращаемыеЗаявления.Ссылка.Дата >= &ДатаНачалаАктуальности
			|	И ПрекращаемыеЗаявления.Ссылка.Проведен
			|	И РеестрыУведомлений.Ссылка ЕСТЬ NULL
			|	И ЗаявленияБезУведомлений.Заявление ЕСТЬ NULL";
		КонецЕсли;
		
	КонецЕсли;
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	Запрос.Текст = ИсходныйТекстЗапроса;
КонецФункции

Процедура СоздатьВТУчтенныеЗаявления(Запрос)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСведений.Заявление КАК Заявление,
	|	ТаблицаСведений.ПервичныйДокумент КАК ПервичныйДокумент
	|ПОМЕСТИТЬ ВТУчтенныеЗаявления
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ТаблицаСведений
	|ГДЕ
	|	ТаблицаСведений.Ссылка.Дата >= &ДатаНачалаАктуальности
	|	И ТаблицаСведений.Ссылка <> &СсылкаРеестра
	|	И ТаблицаСведений.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	Запрос.Текст = ИсходныйТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура СоздатьВТРанееПринятыеРеестры(Запрос)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЗаявленияРеестров.Ссылка) КАК Ссылка,
	|	ВТЗаявления.Заявление КАК Заявление
	|ПОМЕСТИТЬ ВТРанееПринятыеРеестры
	|ИЗ
	|	ВТЗаявления КАК ВТЗаявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК ЗаявленияРеестров
	|		ПО ВТЗаявления.Заявление = ЗаявленияРеестров.Заявление
	|			И (ЗаявленияРеестров.Ссылка <> &СсылкаРеестра)
	|			И (ЗаявленияРеестров.Ссылка.Дата <= &ДатаРеестра)
	|			И (ЗаявленияРеестров.Ссылка.СтатусДокумента = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС))
	|			И (ЗаявленияРеестров.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТЗаявления.Заявление";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныйТекстЗапроса = Запрос.Текст;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	Запрос.Текст = ИсходныйТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область РаботаСXDTO

Функция URIПространстваИменРеестровФСС()
	Возврат "http://pilot.fss.ru/1.7";
КонецФункции

Функция КорневойЭлементРеестраПилотногоПроектаФСС() Экспорт
	ПакетXDTO = ФабрикаXDTO.Пакеты.Получить(URIПространстваИменРеестровФСС());
	ТипROWSET = ПакетXDTO.КорневыеСвойства.Получить("ROWSET").Тип;
	Возврат ФабрикаXDTO.Создать(ТипROWSET);
КонецФункции

Функция ЭлементРеестраПилотногоПроектаФСС(КорневойXDTOЭлемент) Экспорт
	
	ТипROW = КорневойXDTOЭлемент.Свойства().Получить("ROW").Тип;
	
	Возврат ФабрикаXDTO.Создать(ТипROW);
	
КонецФункции

Функция ДопустимыеЗначенияСтрокиРеестра(ROW, ИмяСвойства) Экспорт
	ДопустимыеЗначения = Новый Массив;
	
	ФасетыXDTO = ROW.Свойства().Получить(ИмяСвойства).Тип.Фасеты.Перечисления;
	Для Каждого ФасетXDTO Из ФасетыXDTO Цикл
		ОбщегоНазначенияБЗК.ДобавитьЗначениеВМассив(ДопустимыеЗначения, ФасетXDTO.Значение);
	КонецЦикла;
	
	Возврат ДопустимыеЗначения;
КонецФункции

Функция СписокЭлементовРеестраПилотногоПроектаФСС(ROWSET) Экспорт
	
	Возврат ROWSET["ROW"];
	
КонецФункции

Функция ЗаписатьРеестрВСтрокуXML(ROWSET) Экспорт
	
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML();
	ФабрикаXDTO.ЗаписатьXML(ПотокВыгрузкиXML, ROWSET, "ROWSET");
	СтрокаXML = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML);
	
	Возврат СтрокаXML;
	
КонецФункции

Процедура УдалитьURIПространстваИменРеестровФССИзСтрокиXML(СтрокаXML) Экспорт
	
	АтрибутXMLNS = "xmlns=""" + URIПространстваИменРеестровФСС() + """";
	СтрокаXML = СтрЗаменить(СтрокаXML, АтрибутXMLNS, "");
	
КонецПроцедуры

#КонецОбласти

#Область Реестры65

Процедура ВключитьФлажокИзмененияПринятыФССЕслиЭтоЭЛН(НомерЛН, ГоловнаяОрганизация)
	
	НаборЗаписей = РегистрыСведений.СведенияОбЭЛН.НачатьЗаписьНабора(НомерЛН, ГоловнаяОрганизация, Ложь);
	Если НаборЗаписей <> Неопределено
		И НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
		Если Не Запись.ИзмененияПринятыФСС Тогда
			Запись.ИзмененияПринятыФСС = Истина;
			РегистрыСведений.СведенияОбЭЛН.ЗавершитьЗаписьНабора(НаборЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЗаявлениеИРеестр(БольничныйОбъект)
	Если БольничныйОбъект.ДатаНачала < '20200406' Тогда
		// Период нетрудоспособности не попадает в период отправки реестров 65+.
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаРождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БольничныйОбъект.ФизическоеЛицо, "ДатаРождения");
	МаксимальнаяДатаРождения = НачалоДня(ДобавитьМесяц(БольничныйОбъект.ДатаНачала, -65*12));
	Если ДатаРождения > МаксимальнаяДатаРождения Тогда
		// На дату начала сотруднику не исполнилось 65 лет.
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск заявлений и реестров по сотруднику и периоду оформления 65+.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеЗаявления.Ссылка КАК ЗаявлениеСсылка,
	|	ВсеЗаявления.Проведен КАК ЗаявлениеПроведено,
	|	ВсеЗаявления.ПометкаУдаления КАК ЗаявлениеПометкаУдаления,
	|	ВсеЗаявления.Дата КАК ЗаявлениеДата,
	|	ВсеЗаявления.ДокументОснование КАК ЗаявлениеДокументОснование,
	|	ВЫРАЗИТЬ(ВсеЗаявления.Комментарий КАК СТРОКА(1000)) КАК ЗаявлениеКомментарий,
	|	СтрокиРеестров.Ссылка КАК РеестрСсылка,
	|	СтрокиРеестров.ОсвобождениеДатаНачала1 КАК РеестрОсвобождениеДатаНачала1,
	|	СтрокиРеестров.ОсвобождениеДатаОкончания1 КАК РеестрОсвобождениеДатаОкончания1,
	|	СтрокиРеестров.НомерЛисткаНетрудоспособности КАК РеестрНомерЛисткаНетрудоспособности
	|ПОМЕСТИТЬ ВТЗаявленияИРеестры
	|ИЗ
	|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ВсеЗаявления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК СтрокиРеестров
	|		ПО (ВсеЗаявления.Сотрудник = &Сотрудник)
	|			И ВсеЗаявления.Ссылка = СтрокиРеестров.Заявление
	|			И (СтрокиРеестров.КодПричиныНетрудоспособности = &КодКарантина)
	|			И (СтрокиРеестров.ОсвобождениеДатаНачала1 <= &НачалоПериода)
	|			И (СтрокиРеестров.ОсвобождениеДатаОкончания1 >= &НачалоПериода)
	|ГДЕ
	|	СтрокиРеестров.НомерЛисткаНетрудоспособности ПОДОБНО &ШаблонНомераЛН
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеЗаявления.Ссылка,
	|	ВсеЗаявления.Проведен,
	|	ВсеЗаявления.ПометкаУдаления,
	|	ВсеЗаявления.Дата,
	|	ВсеЗаявления.ДокументОснование,
	|	ВЫРАЗИТЬ(ВсеЗаявления.Комментарий КАК СТРОКА(1000)),
	|	ЕСТЬNULL(СтрокиРеестров.Ссылка, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(СтрокиРеестров.ОсвобождениеДатаНачала1, &ПустаяДата),
	|	ЕСТЬNULL(СтрокиРеестров.ОсвобождениеДатаОкончания1, &ПустаяДата),
	|	ЕСТЬNULL(СтрокиРеестров.НомерЛисткаНетрудоспособности, """")
	|ИЗ
	|	Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ВсеЗаявления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК СтрокиРеестров
	|		ПО ВсеЗаявления.Ссылка = СтрокиРеестров.Заявление
	|ГДЕ
	|	ВсеЗаявления.ДокументОснование = &Больничный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТЗаявленияИРеестры.ЗаявлениеСсылка КАК ЗаявлениеСсылка,
	|	ВТЗаявленияИРеестры.ЗаявлениеПроведено КАК ЗаявлениеПроведено,
	|	ВТЗаявленияИРеестры.ЗаявлениеПометкаУдаления КАК ЗаявлениеПометкаУдаления,
	|	ВТЗаявленияИРеестры.ЗаявлениеДата КАК ЗаявлениеДата,
	|	ВТЗаявленияИРеестры.ЗаявлениеДокументОснование КАК ЗаявлениеДокументОснование,
	|	ВТЗаявленияИРеестры.ЗаявлениеКомментарий КАК ЗаявлениеКомментарий,
	|	ВТЗаявленияИРеестры.РеестрСсылка КАК РеестрСсылка,
	|	ВТЗаявленияИРеестры.РеестрОсвобождениеДатаНачала1 КАК РеестрОсвобождениеДатаНачала1,
	|	ВТЗаявленияИРеестры.РеестрОсвобождениеДатаОкончания1 КАК РеестрОсвобождениеДатаОкончания1,
	|	ВТЗаявленияИРеестры.РеестрНомерЛисткаНетрудоспособности КАК РеестрНомерЛисткаНетрудоспособности,
	|	ЕСТЬNULL(Реестры.Проведен, ЛОЖЬ) КАК РеестрПроведен,
	|	ЕСТЬNULL(Реестры.ПометкаУдаления, ИСТИНА) КАК РеестрПометкаУдаления,
	|	ЕСТЬNULL(Реестры.Дата, &ПустаяДата) КАК РеестрДата,
	|	ЕСТЬNULL(Реестры.СтатусДокумента, НЕОПРЕДЕЛЕНО) КАК РеестрСтатусДокумента,
	|	ЕСТЬNULL(Реестры.Комментарий, """") КАК РеестрКомментарий
	|ИЗ
	|	ВТЗаявленияИРеестры КАК ВТЗаявленияИРеестры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК Реестры
	|		ПО ВТЗаявленияИРеестры.РеестрСсылка = Реестры.Ссылка";
	Запрос.УстановитьПараметр("Больничный",       БольничныйОбъект.Ссылка);
	Запрос.УстановитьПараметр("Сотрудник",        БольничныйОбъект.Сотрудник);
	Запрос.УстановитьПараметр("ФизическоеЛицо",   БольничныйОбъект.ФизическоеЛицо);
	Запрос.УстановитьПараметр("КодКарантина",     "03");
	Запрос.УстановитьПараметр("НачалоПериода",    БольничныйОбъект.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", БольничныйОбъект.ДатаОкончания);
	Запрос.УстановитьПараметр("ПустаяДата",       '00010101');
	Запрос.УстановитьПараметр("ШаблонНомераЛН",   "9990%");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Не найдено ни одной пары "заявление + реестр".
		Возврат Неопределено;
	КонецЕсли;
	
	Таблица = Результат.Выгрузить();
	Таблица.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	
	Если Таблица.Количество() = 1 Тогда
		// Найдена всего одна пара "заявление + реестр".
		Возврат Таблица[0];
	КонецЕсли;
	
	// Определение наилучшего соответствия.
	ФрагментКомментария = НСтр("ru = '{Автозаполнение}'");
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если СтрокаТаблицы.РеестрПометкаУдаления Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес - 1000;
		ИначеЕсли СтрокаТаблицы.РеестрПроведен Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 30;
		КонецЕсли;
		
		Если СтрокаТаблицы.РеестрСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 1000;
		ИначеЕсли СтрокаТаблицы.РеестрСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПереданВФСС Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 500;
		ИначеЕсли СтрокаТаблицы.РеестрСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Подготовлен Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 30;
		ИначеЕсли СтрокаТаблицы.РеестрСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.НеПринятФСС Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес - 20;
		ИначеЕсли СтрокаТаблицы.РеестрСтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.Аннулирован Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес - 500;
		КонецЕсли;
		
		Если СтрокаТаблицы.РеестрОсвобождениеДатаНачала1 = БольничныйОбъект.ДатаНачала Тогда
			Коэффициент1 = 10;
		ИначеЕсли СтрокаТаблицы.РеестрОсвобождениеДатаНачала1 < БольничныйОбъект.ДатаНачала Тогда
			Коэффициент1 = 2;
		Иначе
			Коэффициент1 = 0;
		КонецЕсли;
		Если СтрокаТаблицы.РеестрОсвобождениеДатаОкончания1 = БольничныйОбъект.ДатаОкончания Тогда
			Коэффициент2 = 10;
		ИначеЕсли СтрокаТаблицы.РеестрОсвобождениеДатаОкончания1 > БольничныйОбъект.ДатаОкончания Тогда
			Коэффициент2 = 2;
		Иначе
			Коэффициент2 = 0;
		КонецЕсли;
		СтрокаТаблицы.Вес = 500 * Коэффициент1 * Коэффициент2; // 50000 - идеальное совпадение, 2000 - попадание в период.
		
		Если СтрНайти(СтрокаТаблицы.ЗаявлениеКомментарий, ФрагментКомментария) > 0 Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 50;
		КонецЕсли;
		Если СтрНайти(СтрокаТаблицы.РеестрКомментарий, ФрагментКомментария) > 0 Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 50;
		КонецЕсли;
		
		Если СтрокаТаблицы.ЗаявлениеПроведено Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 20;
		ИначеЕсли Не СтрокаТаблицы.ЗаявлениеПометкаУдаления Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 10;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЗаявлениеДокументОснование) Тогда
			СтрокаТаблицы.Вес = СтрокаТаблицы.Вес + 5;
		КонецЕсли;
		
	КонецЦикла;
	
	Таблица.Сортировать("Вес Убыв, ЗаявлениеДата Убыв, РеестрДата Убыв");
	Возврат Таблица[0];
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьСотрудниковИИдентификаторыФССВРеестрахПрямыхВыплат(ПараметрыОбновления = Неопределено) Экспорт
	ОбработкаЗавершена = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реестр.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК Реестр
	|ГДЕ
	|	Реестр.ИдентификаторФСС = """"";
	
	ИзмерениеОтбора = "Ссылка";
	ПространствоБлокировки = "Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(
				ПараметрыОбновления,
				ПространствоБлокировки,
				ИзмерениеОтбора,
				Выборка[ИзмерениеОтбора]) Тогда
			ОбработкаЗавершена = Ложь; // Документ заблокирован, требуется повторная обработка.
			Продолжить;
		КонецЕсли;
		
		РеестрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		РеестрОбъект.ЗаполнитьСотрудниковИФизическихЛиц();
		РеестрОбъект.ИдентификаторФСС = Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ИдентификаторФСС(
			РеестрОбъект);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(РеестрОбъект);
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
		
	КонецЦикла;
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = ОбработкаЗавершена;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Адреса

Функция КодыАдреса(Адрес, ТекстОшибки = Неопределено) Экспорт
	Результат = Новый Структура("КодКЛАДР, ИдентификаторОбъектаФИАС");
	Попытка
		КодыАдреса = АдресныйКлассификатор.КодыАдреса(Адрес);
		Результат.КодКЛАДР = Формат(КодыАдреса.КодКЛАДР, "ЧГ=0");
		Если ЗначениеЗаполнено(КодыАдреса.ИдентификаторДома) Тогда
			Результат.ИдентификаторОбъектаФИАС = Строка(КодыАдреса.ИдентификаторДома);
		Иначе
			Результат.ИдентификаторОбъектаФИАС = Строка(КодыАдреса.Идентификатор);
		КонецЕсли;
	Исключение
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При вызове функции ""%1"" с параметром ""%2"" возникла ошибка ""%3"".
				|Подробности:
				|%4.'"),
			"АдресныйКлассификатор.КодыАдреса",
			Адрес,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция СтруктураАдреса(Адрес, ИменаПолей) Экспорт
	СведенияОбАдресе = СведенияОбАдресеССокращениями(Адрес);
	
	// Примеры имен полей:
	//   "Индекс, Регион, Район, Город, НаселенныйПункт, Территория, Улица, Дом, Корпуса, Квартира";
	//   "Индекс, Регион, Район, НаселенныйПункт, Улица, Дом, Корпуса, Квартира".
	Результат = Новый Структура(ИменаПолей);
	
	ЗаполнитьЗначенияСвойств(Результат, СведенияОбАдресе);
	
	// Определение заполняемых полей и дозаполнение пустыми строками.
	ТребуетсяРегион = Ложь;
	ТребуетсяНаселенныйПункт = Ложь;
	ТребуетсяГород = Ложь;
	ТребуетсяВнутригородскойРайон = Ложь;
	ТребуетсяТерритория = Ложь;
	ТребуетсяУлица = Ложь;
	ТребуетсяДом = Ложь;
	ТребуетсяЗдание = Ложь;
	ТребуетсяНомерЗемельногоУчастка = Ложь;
	Для Каждого КлючИЗначение Из Результат Цикл
		Если СтрСравнить(КлючИЗначение.Ключ, "Корпуса") = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрСравнить(КлючИЗначение.Ключ, "Регион") = 0 Тогда
			ТребуетсяРегион = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "НаселенныйПункт") = 0 Тогда
			ТребуетсяНаселенныйПункт = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "Город") = 0 Тогда
			ТребуетсяГород = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "ВнутригородскойРайон") = 0 Тогда
			ТребуетсяВнутригородскойРайон = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "Территория") = 0 Тогда
			ТребуетсяТерритория = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "Улица") = 0 Тогда
			ТребуетсяУлица = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "Дом") = 0 Тогда
			ТребуетсяДом = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "Здание") = 0 Тогда
			ТребуетсяЗдание = Истина;
		ИначеЕсли СтрСравнить(КлючИЗначение.Ключ, "НомерЗемельногоУчастка") = 0 Тогда
			ТребуетсяНомерЗемельногоУчастка = Истина;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Результат.Вставить(КлючИЗначение.Ключ, "");
		КонецЕсли;
	КонецЦикла;
	
	// Город записывается в населенный пункт.
	// Его сокращения тоже важны, т.к. например, в одном регионе бывают одноименная деревня/поселок и город.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город) И Не ТребуетсяГород Тогда
		Если ТребуетсяНаселенныйПункт Тогда
			Результат.НаселенныйПункт = СоединитьЧерезЗапятую(СведенияОбАдресе.Город, Результат.НаселенныйПункт);
		КонецЕсли;
	КонецЕсли;
	
	// Внутригородской район требуется выводить в населенном пункте только в том случае,
	// если не заполнен ни город, ни населенный пункт.
	Если ЗначениеЗаполнено(СведенияОбАдресе.ВнутригородскойРайон) И Не ТребуетсяВнутригородскойРайон Тогда
		Если ТребуетсяНаселенныйПункт И Результат.НаселенныйПункт = "" Тогда
			Результат.НаселенныйПункт = СведенияОбАдресе.ВнутригородскойРайон;
		КонецЕсли;
	КонецЕсли;
	
	// Территорию следует выводить либо в населенном пункте, либо в улице.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Территория) И Не ТребуетсяТерритория Тогда
		// Порядок проверок важен: в приоритете - пустой населенный пункт, затем пустая улица.
		Если ТребуетсяНаселенныйПункт И Результат.НаселенныйПункт = "" Тогда
			Результат.НаселенныйПункт = СведенияОбАдресе.Территория;
		ИначеЕсли ТребуетсяУлица И Результат.Улица = "" Тогда
			Результат.Улица = СведенияОбАдресе.Территория;
		ИначеЕсли ТребуетсяНаселенныйПункт Тогда
			Результат.НаселенныйПункт = СоединитьЧерезЗапятую(Результат.НаселенныйПункт, СведенияОбАдресе.Территория);
		КонецЕсли;
	КонецЕсли;
	
	// * Здание - Структура - структура с информацией о здании адреса.
	//   ** ТипЗдания - Строка - тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N171н.
	//   ** Номер     - Строка - Представление номера дома (только для адресов РФ).
	// * НомерЗемельногоУчастка - Строка - Представление номера земельного участка (только для адресов РФ).
	Если ТребуетсяДом Тогда
		Дом = Результат.Дом;
		Здание = СведенияОбАдресе.Здание;
		Если Не ТребуетсяЗдание
			И ТипЗнч(Здание) = Тип("Структура")
			И ЗначениеЗаполнено(Здание.Номер)
			И Дом <> Здание.Номер Тогда
			Результат.Дом = ?(Результат.Дом = "", "", Результат.Дом + "/") + Здание.Номер;
		КонецЕсли;
		Если Не ТребуетсяНомерЗемельногоУчастка
			И ЗначениеЗаполнено(СведенияОбАдресе.НомерЗемельногоУчастка)
			И СведенияОбАдресе.НомерЗемельногоУчастка <> Дом
			И СведенияОбАдресе.НомерЗемельногоУчастка <> Здание.Номер Тогда
			Результат.Дом = ?(Результат.Дом = "", "", Результат.Дом + "/") + СведенияОбАдресе.НомерЗемельногоУчастка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Преобразует массив корпусов из сведений об адресе в структуру.
//
// Параметры:
//   МассивКорпусов - Массив из Структура - Значение свойства "Корпуса" структуры результата функции СтруктураАдреса.
//       * ТипКорпуса - Строка
//       * Номер - Строка
//
// Возвращаемое значение:
//   Структура - Перечень корпусов в виде структуры:
//       * Корпус - Строка
//       * Строение - Строка
//       * Сооружение - Строка
//       * Участок - Строка
//
Функция СтруктураКорпусов(МассивКорпусов) Экспорт
	Корпуса = Новый Структура("Корпус, Строение, Литера, Сооружение, Участок", "", "", "", "", "");
	Для Каждого Корпус Из МассивКорпусов Цикл
		Если Не ЗначениеЗаполнено(Корпус.Номер) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрСравнить(Корпус.ТипКорпуса, "Литер") = 0 Тогда
			// "Литер" считается устаревшим дублем корпусов типа "Литера".
			Корпус.ТипКорпуса = "Литера";
		ИначеЕсли Не Корпуса.Свойство(Корпус.ТипКорпуса) Тогда
			Корпус.ТипКорпуса = "Сооружение";
		КонецЕсли;
		Корпуса[Корпус.ТипКорпуса] = Корпуса[Корпус.ТипКорпуса] + Корпус.Номер;
	КонецЦикла;
	// "Литера" является добавкой к любому из корпусов.
	// Например, "Корпус 5, Литера А" это "Корпус 5А", а "Строение 10, Литер Б" это "Строение 10Б".
	Если ЗначениеЗаполнено(Корпуса.Литера) Тогда
		Если ЗначениеЗаполнено(Корпуса.Корпус) Тогда
			Корпуса.Корпус = Корпуса.Корпус + Корпуса.Литера;
		ИначеЕсли ЗначениеЗаполнено(Корпуса.Строение) Тогда
			Корпуса.Строение = Корпуса.Строение + Корпуса.Литера;
		ИначеЕсли ЗначениеЗаполнено(Корпуса.Сооружение) Тогда
			Корпуса.Сооружение = Корпуса.Сооружение + Корпуса.Литера;
		ИначеЕсли ЗначениеЗаполнено(Корпуса.Участок) Тогда
			Корпуса.Участок = Корпуса.Участок + Корпуса.Литера;
		Иначе
			Корпуса.Корпус = Корпуса.Литера;
		КонецЕсли;
	КонецЕсли;
	Корпуса.Удалить("Литера");
	Возврат Корпуса;
КонецФункции

// Возвращает сведения об адресе в виде отдельных частей адреса и различных кодов (код региона, ОКТМО и др.).
//
// Параметры:
//   Адрес                  - Строка - адрес во внутреннем формате JSON или в XML, соответствующем XDTO-пакету Адрес.
//                          - ОбъектXDTO - XDTO-объект, соответствующий XDTO пакету Адрес.
//                          - Неопределено - конструктор для получения пустых полей адреса.
//
// Возвращаемое значение:
//   Структура:
//        * Представление              - Строка - Представление адреса по административно-территориальному делению.
//        * МуниципальноеПредставление - Строка - Представление адреса по муниципальному делению.
//        * ТипАдреса                  - Строка - Основной тип адреса (только для адресов РФ).
//                                                Варианты: "Муниципальный", "Административно-территориальный".
//        * Страна                     - Строка - Представление страны.
//        * КодСтраны                  - Строка - Код страны по ОКСМ.
//        * Индекс                     - Строка - Почтовый индекс.
//        * КодРегиона                 - Строка - Код региона РФ.
//        * Регион                     - Строка - Представление региона РФ.
//        * Район                      - Строка - Представление района у адресов по административно-территориальному делению.
//        * МуниципальныйРайон         - Строка - Представление муниципального района для адреса по муниципальному делению.
//        * КодМуниципальногоРайона    - Строка - Код муниципального района:
//                                                1- муниципальный район; 2- городской округ; 3 - внутригородская территория
//                                                города федерального значения; 4 - муниципальный округ.
//                                                Если не удалось определить код, то возвращается пустая строка.
//        * Город                      - Строка - Представление города у адресов по административно-территориальному делению.
//        * Поселение                  - Строка - Представление поселения у адресов по муниципальному делению.
//        * КодПоселения               - Строка - код поселения: 1 - городское поселение; 2 - сельское поселение; 3-  межселенная
//                                                территория в составе муниципального района; 4 - внутригородской район
//                                                городского округа;
//        * ВнутригородскойРайон       - Строка - Представление внутригородского района.
//        * НаселенныйПункт            - Строка - Представление населенного пункта.
//        * Территория                 - Строка - Представление территории (элемента планировочной структуры).
//        * Улица                      - Строка - Представление улицы.
//        * Здание  - Структура
//            ** ТипЗдания - Строка - Тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N171н.
//            ** Номер     - Строка - Представление номера дома (только для адресов РФ).
//        * Корпуса - Структура - Перечень корпусов адреса: "Корпус", "Строение", "Литера", "Сооружение", "Участок".
//        * Квартира - Строка - Номер квартиры.
//        * НомерЗемельногоУчастка - Строка - Представление номера земельного участка (только для адресов РФ).
//        * Комментарий - Строка - комментарий об адресе.
//        * ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - идентификационный код последнего адресного объекта
//                                        в иерархи адреса. Например, для адреса: Москва г., Дмитровское ш., д.9 это
//                                        будет идентификатор улицы.
//                                        Поле отсутствует, если дополнительный параметр КодыАдреса равен Ложь.
//        * ИдентификаторДома             - УникальныйИдентификатор - идентификационный код дома(строения) адресного объекта.
//                                        Поле отсутствует, если дополнительный параметр КодыАдреса равен Ложь.
//                                        Пустая строка если значение отсутствует.
//        * ИдентификаторЗемельногоУчастка - УникальныйИдентификатор - идентификационный код земельного участка
//                                       адресного объекта. При отсутствии значения - пустая строка.
//        * ДополнительныеКоды  - Структура - коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
//                                            Поле отсутствует, если дополнительный параметр КодыАдреса равен Ложь.
//
Функция СведенияОбАдресеССокращениями(Адрес) Экспорт
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес);
	
	// Сокращения тоже являются частью адреса (определяют его смысл в плане уникальности).
	// Например, регион: "Кемеровская область -", сокращение: "Кузбасс".
	Если ЗначениеЗаполнено(СведенияОбАдресе.РегионТипКраткий) Тогда
		СведенияОбАдресе.Регион = СведенияОбАдресе.Регион + " " + СведенияОбАдресе.РегионТипКраткий;
	КонецЕсли;
	
	// Представление района у адресов по административно-территориальному делению.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Район)
		И ЗначениеЗаполнено(СведенияОбАдресе.РайонТипКраткий) Тогда
		СведенияОбАдресе.Район = СведенияОбАдресе.Район + " " + СведенияОбАдресе.РайонТипКраткий;
	КонецЕсли;
	
	// Представление муниципального района для адреса по муниципальному делению.
	Если ЗначениеЗаполнено(СведенияОбАдресе.МуниципальныйРайон)
		И ЗначениеЗаполнено(СведенияОбАдресе.МуниципальныйРайонТипКраткий) Тогда
		СведенияОбАдресе.МуниципальныйРайон = СведенияОбАдресе.МуниципальныйРайон + " " + СведенияОбАдресе.МуниципальныйРайонТипКраткий;
	КонецЕсли;
	
	// Сокращения города тоже важны, т.к. например, в одном регионе бывают одноименная деревня/поселок и город.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Город)
		И ЗначениеЗаполнено(СведенияОбАдресе.ГородТипКраткий) Тогда
		СведенияОбАдресе.Город = СведенияОбАдресе.Город + " " + СведенияОбАдресе.ГородТипКраткий;
	КонецЕсли;
	
	// Представление поселения у адресов по муниципальному делению.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Поселение)
		И ЗначениеЗаполнено(СведенияОбАдресе.ПоселениеТипКраткий) Тогда
		СведенияОбАдресе.Поселение = СведенияОбАдресе.Поселение + " " + СведенияОбАдресе.ПоселениеТипКраткий;
	КонецЕсли;
	
	// Внутригородской район.
	Если ЗначениеЗаполнено(СведенияОбАдресе.ВнутригородскойРайон)
		И ЗначениеЗаполнено(СведенияОбАдресе.ВнутригородскойРайонТипКраткий) Тогда
		СведенияОбАдресе.ВнутригородскойРайон = СведенияОбАдресе.ВнутригородскойРайон + " " + СведенияОбАдресе.ВнутригородскойРайонТипКраткий;
	КонецЕсли;
	
	// Например, район: "Сходня", сокращение: "мкр".
	Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт)
		И ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПунктТипКраткий) Тогда
		СведенияОбАдресе.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт + " " + СведенияОбАдресе.НаселенныйПунктТипКраткий;
	КонецЕсли;
	
	// Территория.
	Если ЗначениеЗаполнено(СведенияОбАдресе.Территория)
		И ЗначениеЗаполнено(СведенияОбАдресе.ТерриторияТипКраткий) Тогда
		СведенияОбАдресе.Территория = СведенияОбАдресе.Территория + " " + СведенияОбАдресе.ТерриторияТипКраткий;
	КонецЕсли;
	
	// Например, улица: "10-я В.О.", сокращение: "линия".
	Если ЗначениеЗаполнено(СведенияОбАдресе.Улица)
		И ЗначениеЗаполнено(СведенияОбАдресе.УлицаТипКраткий) Тогда
		СведенияОбАдресе.Улица = СведенияОбАдресе.Улица + " " + СведенияОбАдресе.УлицаТипКраткий;
	КонецЕсли;
	
	// * Помещения - Массив - содержит структуры (поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
	СведенияОбАдресе.Вставить("Квартира", "");
	Помещения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СведенияОбАдресе, "Помещения");
	Если ТипЗнч(Помещения) = Тип("Массив") Тогда
		Для Каждого Помещение Из Помещения Цикл
			СведенияОбАдресе.Квартира = СоединитьЧерезЗапятую(СведенияОбАдресе.Квартира, Помещение.Номер);
		КонецЦикла;
	КонецЕсли;
	
	// Обратная совместимость.
	// * ДополнительнаяТерритория - Строка - устаревшее свойство. Текстовое представление дополнительной территории.
	Если Не ЗначениеЗаполнено(СведенияОбАдресе.Улица)
		И ЗначениеЗаполнено(СведенияОбАдресе.ДополнительнаяТерритория) Тогда
		СведенияОбАдресе.Улица = СведенияОбАдресе.ДополнительнаяТерритория;
	КонецЕсли;
	
	Возврат СведенияОбАдресе;
КонецФункции

Функция СоединитьЧерезЗапятую(Фрагмент1, Фрагмент2)
	Возврат ?(
		ЗначениеЗаполнено(Фрагмент1) И ЗначениеЗаполнено(Фрагмент2),
		Фрагмент1 + ", " + Фрагмент2,
		Строка(Фрагмент1) + Строка(Фрагмент2));
КонецФункции

#КонецОбласти


#КонецОбласти
