///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "СПАРКРиски".
// ОбщийМодуль.СПАРКРиски.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет возможность использования сервиса в соответствии с текущим
// режимом работы и правами пользователя.
//
// Параметры:
//	ДополнительныеПрава - Строка - дополнительные права для проверки,
//		заполненные через ";".
//		Возможные значения: "ПостановкаНаМониторинг;", "ЗапросСправки;".
//
// Возвращаемое значение:
//	Булево - признак разрешенности использования. Истина - использование разрешено,
//		Ложь - в противном случае.
//
Функция ИспользованиеРазрешено(ДополнительныеПрава = Неопределено) Экспорт
	
	Возврат (ИспользованиеСПАРКРискиВключено()
		И СПАРКРискиПовтИсп.ИспользованиеРазрешено(ДополнительныеПрава));
	
КонецФункции

// Добавляет подключаемые команды в подменю.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, на которую добавляются команды;
//	Источник - ДанныеФормыСтруктура - объект контрагент на форме карточки контрагента;
//			 - ТаблицаФормы - список контрагентов в форме списка;
//	ЭлементПодменю - ГруппаФормы - подменю, в которое необходимо добавить команды.
//	ДополнительныеПараметры - Структура - дополнительные параметры заполнения подменю команд.
//		Поля структуры:
//		* КонтрагентСсылка - ОпределяемыйТип.КонтрагентБИП - ссылка на элемент справочника
//			контрагентов, для которого выполняется команда. Необходимо использовать в том
//			случае, если реквизит Ссылка в параметре Источник не соответствует контрагенту.
//
Процедура ДобавитьПодключаемыеКомандыКонтрагента(
		Форма,
		Источник,
		ЭлементПодменю,
		ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	Команды = ПодключаемыеКомандыФормыКонтрагента(ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура"));
	ТипКнопкаФормы = Тип("КнопкаФормы");
	Для Каждого ТекущаяКоманда Из Команды Цикл
		
		ИмяКоманды = ТекущаяКоманда.Имя;
		
		// Создание команды.
		КомандаФормы = Форма.Команды.Добавить(ТекущаяКоманда.Имя);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду1СПАРКРиски";
		КомандаФормы.Заголовок                 = ТекущаяКоманда.Синоним;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение               = ОтображениеКнопки.КартинкаИТекст;
		
		// Создание кнопки.
		НовыйЭлемент = Форма.Элементы.Добавить(ИмяКоманды, ТипКнопкаФормы, ЭлементПодменю);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды            = ИмяКоманды;
		НовыйЭлемент.Видимость             = Истина;
		НовыйЭлемент.ТолькоВоВсехДействиях = Ложь;
		
		Если ТекущаяКоманда.Имя = "СПАРКРиски_ВключитьМониторингСобытий" Тогда
			
			// Установка отметки кнопки.
			КонтрагентСсылка = Неопределено;
			Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
				И ДополнительныеПараметры.Свойство("КонтрагентСсылка") Тогда
				КонтрагентСсылка = ДополнительныеПараметры.КонтрагентСсылка;
			Иначе
				КонтрагентСсылка = Источник.Ссылка;
			КонецЕсли;
			
			НовыйЭлемент.Пометка = МониторингСобытийВключен(КонтрагентСсылка, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ИндексыСПАРККонтрагента

// Возвращает информацию о контрагенте (индексы и прочая информация).
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  Контрагент            - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ВидКонтрагента        - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
// Возвращаемое значение:
//  Структура - структура с ключами как описано в СПАРКРискиКлиентСервер.НовыйДанныеИндексов().
//
Функция ИндексыСПАРККонтрагента(Контрагент, ВидКонтрагента, ПризнакЗагрузкиДанных = Ложь) Экспорт
	
	Результат = СПАРКРискиКлиентСервер.НовыйДанныеИндексов();
	Результат.РаботаВМоделиСервиса = ОбщегоНазначения.РазделениеВключено();
	Результат.ВидКонтрагента = ВидКонтрагента;
	Результат.ДанныеАутентификацииЗаполнены
		= ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	Если НЕ ИспользованиеРазрешено() Тогда
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено;
		Возврат Результат;
	КонецЕсли;
	
	КонтрагентИНН = "";
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
		КонтрагентИНН = СокрЛП(Контрагент);
		Результат.ИНН = КонтрагентИНН;
		Результат.Контрагент = Неопределено;
		Результат.ПодлежитПроверке = ИННСоответствуетТребованиям(КонтрагентИНН, ВидКонтрагента);
	Иначе
		Результат.Контрагент = Контрагент;
		
		// Получение вспомогательных данных.
		МассивКонтрагентов = Новый Массив;
		МассивКонтрагентов.Добавить(Контрагент);
		
		ТаблицаЗначенийРеквизитов = ЗначенияРеквизитовКонтрагентов(МассивКонтрагентов);
		Если ТаблицаЗначенийРеквизитов.Количество() >= 1 Тогда
			КонтрагентИНН = СокрЛП(ТаблицаЗначенийРеквизитов[0].ИНН);
			Результат.ИНН = КонтрагентИНН;
			Результат.ПодлежитПроверке = ТаблицаЗначенийРеквизитов[0].ПодлежитПроверке;
		КонецЕсли;
		
	КонецЕсли;
	
	// УслугаПодключена - только для модели сервиса.
	УслугаПодключена = ИнтернетПоддержкаПользователей.УслугаПодключена(
		СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска(),
		Неопределено);
	
	Если УслугаПодключена <> Истина Тогда
		Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит;
		Возврат Результат;
	КонецЕсли;
	
	НеобходимоЗагрузитьИнформацию = Ложь;
	// Передали ИНН - загружать всегда, кэш не используется.
	Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
		ТекстОшибки = "";
		Если ИННСоответствуетТребованиям(КонтрагентИНН, ВидКонтрагента, ТекстОшибки) Тогда
			Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
				НеобходимоЗагрузитьИнформацию = Ложь;
				Результат.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных;
				Результат.СостояниеЗагрузкиДанных = Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка();
				Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
			Иначе
				НеобходимоЗагрузитьИнформацию = Истина;
				Результат.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных;
				Результат.СостояниеЗагрузкиДанных = Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Результат.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН;
			Результат.СостояниеЗагрузкиДанных = Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка();
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.НекорректныйИНН;
			Результат.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
	Иначе // Передали ссылку на контрагента.
		// Если есть информация в кэше и она актуальна, то вернуть ее.
		ПолучитьДанныеИндексовИзКэша(
			Контрагент,
			НеобходимоЗагрузитьИнформацию,
			ПризнакЗагрузкиДанных,
			Результат);
	КонецЕсли;
	
	// Если информации в кэше нет, то получить ее фоновым заданием.
	Если НеобходимоЗагрузитьИнформацию Тогда
		ЗапуститьФоновоеЗаданиеИндексыСПАРК(
			Контрагент,
			КонтрагентИНН,
			ВидКонтрагента,
			ПризнакЗагрузкиДанных,
			Результат);
	КонецЕсли;
	
	Если Результат.Свойство("ИНН") И Не ИННСоответствуетТребованиям(Результат.ИНН, ВидКонтрагента) Тогда
		Результат.Вставить("ВидОшибки", Перечисления.ВидыОшибокСПАРКРиски.НекорректныйИНН);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выводит информацию об индексах СПАРК Риски в элемент управления.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  КонтрагентОбъект - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  Контрагент - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ВидКонтрагента - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//                   В этой форме должен присутствовать реквизит "ИндексыСПАРКРиски" произвольного типа
//                     и (если заполнение будет осуществляться стандартным библиотечным способом), то элементы с именами:
//    * ДекорацияИндексыСПАРКРиски - Декорация текст;
//    * КартинкаОжиданиеЗагрузкиИндексовСПАРКРиски - Декорация картинка;
//  ПараметрыОтображения - Структура - прочие параметры. Возможные ключи:
//    * ВариантОтображения - Строка - см. СПАРКРискиКлиентСервер.ОтобразитьИндексыСПАРК;
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
Процедура ОтобразитьИндексыСПАРК(
			РезультатИндексыКонтрагента,
			КонтрагентОбъект,
			Контрагент,
			ВидКонтрагента,
			Форма,
			ПараметрыОтображения = Неопределено,
			ПризнакЗагрузкиДанных = Ложь) Экспорт

	ИспользованиеРазрешено = ИспользованиеРазрешено();

	Если ИспользованиеРазрешено
			И (ТипЗнч(РезультатИндексыКонтрагента) <> Тип("Структура")) Тогда
		РезультатИндексыКонтрагента = ИндексыСПАРККонтрагента(
			Контрагент,
			ВидКонтрагента,
			ПризнакЗагрузкиДанных);
	КонецЕсли;

	Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	СПАРКРискиКлиентСервер.ОтобразитьИндексыСПАРК(
		РезультатИндексыКонтрагента,
		КонтрагентОбъект,
		Контрагент,
		Форма,
		ИспользованиеРазрешено,
		ПараметрыОтображения);

КонецПроцедуры

// Возвращает информацию об индексах СПАРК Риски в виде структуры форматированных строк.
// В случае, если информации нет в кэше, то инициируется фоновое задание.
// Если передан ИНН, то информация получается напрямую из веб-сервиса без фонового задания.
//
// Параметры:
//  РезультатИндексыКонтрагента - Структура, Неопределено - результата выполнения функции ИндексыСПАРККонтрагента
//                                 (ключи описаны в СПАРКРискиКлиентСервер.НовыйДанныеИндексов()),
//                                 или Неопределено, если необходимо вызвать эту функцию;
//  Контрагент - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ВидКонтрагента - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//  Форма      - ФормаКлиентскогоПриложения - форма, в которой необходимо вывести информацию об индексах СПАРК Риски.
//  ПризнакЗагрузкиДанных - Булево, УникальныйИдентификатор - если ИСТИНА, то в случае, если данных нет или они просрочены,
//            то запустить фоновое задание загрузки данных. Если передан УникальныйИдентификатор, то это идентификатор фонового задания.
//
// Возвращаемое значение:
//   Структура - Структура представлений индексов и других показателей с ключами, как СПАРКРискиКлиентСервер.НовыйПредставленияИндексов().
//
Функция ПолучитьПредставленияИндексов(
			РезультатИндексыКонтрагента,
			Контрагент,
			ВидКонтрагента,
			Форма,
			ПризнакЗагрузкиДанных = Истина) Экспорт

	Результат = СПАРКРискиКлиентСервер.НовыйПредставленияИндексов();
	Результат.Вставить("Контрагент", Контрагент);

	Если НЕ ИспользованиеРазрешено() Тогда
		РезультатИндексыКонтрагента.Вставить("ВидОшибки", ПредопределенноеЗначение("Перечисление.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено"));
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(РезультатИндексыКонтрагента) <> Тип("Структура") Тогда
		РезультатИндексыКонтрагента = ИндексыСПАРККонтрагента(
			Контрагент,
			ВидКонтрагента,
			ПризнакЗагрузкиДанных);
	КонецЕсли;

	Форма.ИндексыСПАРКРиски = РезультатИндексыКонтрагента;
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("ИспользованиеРазрешено", ИспользованиеРазрешено());
	Результат = СПАРКРискиКлиентСервер.ПолучитьПредставленияИндексов(
		РезультатИндексыКонтрагента,
		Контрагент,
		Форма,
		КонтекстВыполнения);

	Возврат Результат;

КонецФункции

// Записывает данные в кэш индексов СПАРК Риски.
//
// Параметры:
//  Данные - Структура - данные, необходимые для заполнения записи регистра сведений "ИндексыСПАРКРиски".
//
Процедура СохранитьЗначенияИндексовВКэше(Данные) Экспорт

	Если ТипЗнч(Данные) = Тип("Структура")
			И (НЕ ЗначениеЗаполнено(Данные.ВидОшибки)
				ИЛИ Данные.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.НеизвестныйИНН) Тогда
		Если Данные.Свойство("ИНН") Тогда
			Данные.Вставить("ИНН", СокрЛП(Данные.ИНН));
		КонецЕсли;
		УстановитьПривилегированныйРежим(Истина);
		Запись = РегистрыСведений.ИндексыСПАРКРиски.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, Данные);
		Запись.Записать(Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область МониторингСобытий

// Загружает события мониторинга из сервиса 1СПАРК Риски:
//	- все события, если последняя загрузка событий выполнялась
//	  не в текущий день;
//	- события по контрагентам, поставленным на мониторинг, события
//	  по которым еще не загружались в информационную базу.
//
// Возвращаемое значение:
//	- ПеречислениеСсылка.ВидыОшибокСПАРКРиски - вид ошибки,
//		возникшей при загрузке событий из сервиса 1СПАРК Риски.
//		При успешном выполнении возвращается пустая ссылка.
//
Функция ОбновитьСобытияМониторинга() Экспорт
	
	Возврат СПАРКРискиМониторингСобытий.ОбновитьСобытияМониторинга();
	
КонецФункции

// Заполняет контрагентов на мониторинге в соответствии.
// См. СПАРКРискиПереопределяемый.КонтрагентыДляМониторинга().
//
Процедура ЗаполнитьКонтрагентовНаМониторинге() Экспорт
	
	СПАРКРискиМониторингСобытий.ЗаполнитьКонтрагентовНаМониторинге();
	
КонецПроцедуры

// Включает или отключает мониторинг контрагентов.
//
// Параметры:
//  Контрагенты - Массив из ОпределяемыйТип.КонтрагентБИП - контрагенты для добавления или удаления.
//  Включить - Булево - Истина - включить мониторинг, Ложь - в противном случае;
//  Вручную - Булево - установить признак ручной постановки на мониторинг.
//
Процедура ВключитьОтключитьМониторингСобытий(Контрагенты, Включить, Вручную = Ложь) Экспорт
	
	СПАРКРискиМониторингСобытий.ВключитьОтключитьМониторингСобытий(Контрагенты, Включить, Вручную);
	
КонецПроцедуры

// Возвращает признак постановки контрагента на мониторинг.
//
// Параметры:
//	Контрагент - ОпределяемыйТип.КонтрагентБИП - проверяемый контрагент;
//	Вручную    - Булево - проверить признак ручной или автоматической постановки.
//		Если не передан, тогда не учитывается.
//
// Возвращаемое значение:
//	Булево - Истина - мониторинг включен, Ложь - в противном случае.
//
Функция МониторингСобытийВключен(Контрагент, Вручную = Неопределено) Экспорт
	
	Возврат СПАРКРискиМониторингСобытий.МониторингСобытийВключен(Контрагент, Вручную);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий_ИндексыСПАРКРиски

// Вызывается из форм, в которые встроен показ индексов 1СПАРК Риски.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой инициировано событие;
//  КонтрагентОбъект     - Объект, Неопределено - заполняется в том случае, если форма - это форма элемента справочника, а не форма документа.
//  Контрагент           - ОпределяемыйТип.КонтрагентБИП, Строка - Контрагент или ИНН контрагента;
//  ВидКонтрагента       - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//  ПараметрыОтображения - Структура - прочие параметры. Возможные ключи:
//    * ВариантОтображения - Строка - см. описание в СПАРКРиски.ОтобразитьИндексыСПАРК.
//
Процедура ПриСозданииНаСервере(Форма, КонтрагентОбъект, Контрагент, ВидКонтрагента, ПараметрыОтображения) Экспорт

	ИспользованиеРазрешено = ИспользованиеРазрешено();

	СтандартнаяОбработкаБиблиотекой = Истина;
	
	ИнтеграцияПодсистемБИП.ПриСозданииНаСервереСПАРК(
		Форма,
		КонтрагентОбъект,
		Контрагент,
		ВидКонтрагента,
		ПараметрыОтображения,
		ИспользованиеРазрешено,
		СтандартнаяОбработкаБиблиотекой);
	
	СПАРКРискиПереопределяемый.ПриСозданииНаСервере(
		Форма,
		КонтрагентОбъект,
		Контрагент,
		ВидКонтрагента,
		ПараметрыОтображения,
		ИспользованиеРазрешено,
		СтандартнаяОбработкаБиблиотекой);

	Если СтандартнаяОбработкаБиблиотекой = Истина Тогда
		// Есть несколько способов отображения данных индексов на форме:
		//  - библиотека самостоятельно заполняет декорацию,
		//  - ответственные за внедрение пишут код, который (на основании данных индексов) рисует их на форме
		//      в произвольных элементах управления.
		// По умолчанию библиотека самостоятельно заполняет декорацию. Если это поведение необходимо изменить,
		//  то надо прописать код в "СПАРКРискиПереопределяемый.ПриСозданииНаСервере".
		ОтобразитьИндексыСПАРК(
			Форма.ИндексыСПАРКРиски,
			КонтрагентОбъект,
			Контрагент,
			ВидКонтрагента,
			Форма,
			ПараметрыОтображения,
			Истина);
	КонецЕсли;

КонецПроцедуры

// Вызывается из форм объектов, в которые встроен показ индексов 1СПАРК Риски.
// Сценарий использования такой: при создании нового объекта и ввода ИНН, инициируется получение индексов СПАРК Риски.
//  НО! Так как ссылки еще нет, то полученные данные не сохраняются в кэше и при повторном открытии этой же формы, данные получаются заново.
//  В этой процедуре реализована запись полученных индексов в кэш.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, в которой инициировано событие;
//  ТекущийОбъект   - Объект - Записываемый объект;
//  ПараметрыЗаписи - Структура - Параметры записи объекта. Ключи:
//    * ВключитьМониторингСобытий1СПАРКРиски - Булево - добавить контрагента
//        в список контрагентов на мониторинге 1СПАРК Риски.
//        Истина - добавить, Ложь - не добавлять;
//    * КонтрагентСсылка - ссылка на контрагента. Необходимо заполнять в том случае,
//        если ТекущийОбъект.Ссылка не указывает на Контрагента, информацию о котором необходимо сохранить в кэше.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	КонтрагентСсылка = ТекущийОбъект.Ссылка;

	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура") Тогда
		Если ПараметрыЗаписи.Свойство("КонтрагентСсылка") Тогда
			КонтрагентСсылка = ПараметрыЗаписи.КонтрагентСсылка;
		КонецЕсли;
		Если ПараметрыЗаписи.Свойство("ВключитьМониторингСобытий1СПАРКРиски")
				И ПараметрыЗаписи.ВключитьМониторингСобытий1СПАРКРиски = Истина Тогда
			// Включить события мониторинга по контрагенту
			УстановитьПривилегированныйРежим(Истина);
			ВключитьОтключитьМониторингСобытий(КонтрагентСсылка, Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Форма.ИндексыСПАРКРиски) = Тип("Структура") Тогда
		Если Форма.ИндексыСПАРКРиски.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания Тогда
			Форма.ИндексыСПАРКРиски.Вставить("Контрагент", КонтрагентСсылка);
			СохранитьЗначенияИндексовВКэше(Форма.ИндексыСПАРКРиски);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ИнтеграцияПодсистемБиблиотеки

// Возвращает ссылку на элемент справочника "ТипыСобытийСПАРКРиски".
//
// Параметры:
//  ТипСобытия - Строка, УникальныйИдентификатор - идентификатор события.
//
// Возвращаемое значение:
//   СправочникСсылка.ТипыСобытийСПАРКРиски - ссылка на элемент справочника.
//
Функция ДанныеТипаСобытияПоИдентификатору(ТипСобытия) Экспорт
	
	Если Не ЗначениеЗаполнено(ТипСобытия) Тогда
		Возврат Справочники.ТипыСобытийСПАРКРиски.ПустаяСсылка();
	КонецЕсли;
	
	Попытка
		Результат = СПАРКРискиПовтИсп.ДанныеТипаСобытияПоИдентификатору(ТипСобытия);
	Исключение
		Возврат Справочники.ТипыСобытийСПАРКРиски.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при изменении логина и пароля пользователя ИПП в
// информационной базе из всех контекстов использования библиотеки.
//
Процедура ПриИзмененииДанныхАутентификации(Логин, Пароль) Экспорт
	
	СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	
КонецПроцедуры

// Добавляет описание сервиса 1СПАРК Риски
//
// Параметры:
//   СервисыСопровождения - Массив    - массив структур, описывающий сервисы доступные для использовании в конфигурации;
//     *Значение - Структура - см. ПодключениеСервисовСопровождения.НовыйОписательСервиса().
//
// Пример:
//  ОписательСервиса = ПодключениеСервисовСопровождения.НовыйОписательСервиса();
//  ОписательСервиса.Идентификатор   = "contragent";
//  ОписательСервиса.КартинкаСервиса = Метаданные.ОбщиеКартинки.Сервис1СКонтрагент;
//  ОписательСервиса.Наименование    = НСтр("ru = '1С:Контрагент'");
//  ОписательСервиса.ОписаниеСервиса = НСтр("ru = 'Быстрая проверка информации о контрагентах, автоматическое
//   |заполнение реквизитов контрагентов в различных документах и другие полезные функции.'");
//
//  СервисыСопровождения.Добавить(ОписательСервиса);
//
Процедура ПриДобавленииОписанийСервисовСопровождения(СервисыСопровождения) Экспорт
	
	МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
	ОписательСервиса = МодульПодключениеСервисовСопровождения.НовыйОписательСервиса();
	ОписательСервиса.Идентификатор   = СПАРКРискиКлиентСервер.ИдентификаторСервиса();
	ОписательСервиса.Картинка        = Метаданные.ОбщиеКартинки.Сервис1СПАРКРиски48;
	ОписательСервиса.Наименование    = НСтр("ru = '1СПАРК Риски'");
	ОписательСервиса.Описание        = НСтр("ru = 'Оценка надежности и мониторинг контрагентов в программах 1С
		| для принятия взвешенных решений о сотрудничестве и минимизации налоговых рисков.'");
	
	СервисыСопровождения.Добавить(ОписательСервиса);
	
КонецПроцедуры

// Определяет параметры выполнения операций регламентных заданий.
//
// Параметры:
//  Операция - Строка - идентификатор операции.
//
// Возвращаемое значение:
//  Структура - см. РасписанияРегламентныхЗаданий.ОписаниеПараметровВыполнения.
//
Функция ПараметрыВыполненияОперации(Операция) Экспорт
	
	Если Операция = ИдентификаторОперацииЗагрузкаИндексов() Тогда
		Возврат РасписанияРегламентныхЗаданий.ОписаниеПараметровВыполнения(720);
	ИначеЕсли Операция = ИдентификаторОперацииЗаполнениеКонтрагентовНаМониторинге() Тогда
		Возврат РасписанияРегламентныхЗаданий.ОписаниеПараметровВыполнения(1435);
	ИначеЕсли Операция = ИдентификаторОперацииПостановкаНаМониторинг() Тогда
		Возврат РасписанияРегламентныхЗаданий.ОписаниеПараметровВыполнения(55);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСБиблиотекойСтандартныхПодсистем

// Возвращает список процедур-обработчиков обновления ИБ для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Вызывается перед началом обновления данных ИБ.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Обработчики обновления общих данных.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "СПАРКРиски.ОбщиеДанныеНачальноеЗаполнениеДанныхСПАРКРиски";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Начальное заполнение.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.7.11";
	Обработчик.Процедура           = "СПАРКРиски.ПерейтиНаВерсию_2_1_7_11";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.7.11'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.8.15";
	Обработчик.Процедура           = "СПАРКРиски.ОбщиеДанныеПерейтиНаВерсию_2_1_8_15";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.8.15'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.3.14";
	Обработчик.Процедура           = "СПАРКРиски.ОбновлениеИнформационнойБазы_АктуализироватьОписаниеТиповСобытий";
	Обработчик.ОбщиеДанные         = Истина;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Актуализировать описание типов событий'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	// Обработчики обновления областей данных.
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "";
	Обработчик.Процедура           = "СПАРКРиски.НачальноеЗаполнениеДанныхСПАРКРиски";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Начальное заполнение.'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "*";
	Обработчик.Процедура           = "СПАРКРиски.НачальноеЗаполнениеДанныхСПАРКРиски";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на новую версию'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.7.10";
	Обработчик.Процедура           = "СПАРКРиски.ПерейтиНаВерсию_2_1_7_10";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.7.10'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.9.2";
	Обработчик.Процедура           = "СПАРКРиски.ОбновлениеИнформационнойБазы_ОчиститьРезультатыПостановкиНаМониторинг_2_1_9_2";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Переход на версию 2.1.9.2'");
	Обработчик.РежимВыполнения     = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.2.3.6";
	Обработчик.Процедура           = "СПАРКРиски.ЗаполнитьНовыеРесурсыИндексыСПАРКРиски";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Заполнение новых ресурсов регистра ИндексыСПАРКРиски'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("c4ffe210-0d36-493e-b5c7-500ea146a946");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.5.1.1";
	Обработчик.Процедура           = "СПАРКРиски.ЗаполнитьДанныеИндивидуальныхПредпринимателей";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Заполнение данных индивидуальных предпринимателей'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("740f8138-fdce-46c4-9c6e-bd69c476ad20");
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия              = "2.5.1.3";
		Обработчик.Процедура           = "СПАРКРиски.ЗаполнитьНовыеПоляТиповСобытий";
		Обработчик.НачальноеЗаполнение = Ложь;
		Обработчик.Комментарий         = НСтр("ru='1СПАРК Риски. Заполнение новых полей типов событий'");
		Обработчик.РежимВыполнения     = "Отложенно";
		Обработчик.Идентификатор       = Новый УникальныйИдентификатор("e41aa80a-008c-4e87-9f7d-be1afa24ac56");
	КонецЕсли;
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"assessment.1c.ru",
		443,
		НСтр("ru = 'Сервис 1СПАРК Риски (зона ru)'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.ТекущиеДела.
// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ИспользованиеРазрешено() Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Отчеты.СобытияМониторингаСПАРКРиски.ПолноеИмя());
	Если Разделы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Количество критичных событий по разрешенным контрагентам.
	ЧастиЗапроса = Новый Массив;
	ЧастиЗапроса.Добавить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КонтрагентыДляМониторинга
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
	|		ПО КонтрагентыНаМониторингеСПАРКРиски.Контрагент = СвойстваКонтрагентовСПАРКРиски.Контрагент
	|ГДЕ
	|	СвойстваКонтрагентовСПАРКРиски.ИННКорректный
	|	И НЕ КонтрагентыНаМониторингеСПАРКРиски.Контрагент.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент");
	ЧастиЗапроса.Добавить(";");
	
	
	ШаблонЗапроса =
	"ИЗ
	|	РегистрСведений.СобытияМониторингаСПАРКРиски КАК СобытияМониторингаСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
	|		ПО СобытияМониторингаСПАРКРиски.ТипСобытияИдентификатор = ТипыСобытийСПАРКРиски.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыДляМониторинга КАК КонтрагентыДляМониторинга
	|		ПО СобытияМониторингаСПАРКРиски.Контрагент = КонтрагентыДляМониторинга.Контрагент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.%ИмяСправочникаКонтрагенты КАК СправочникКонтрагенты
	|		ПО (СправочникКонтрагенты.Ссылка = СобытияМониторингаСПАРКРиски.Контрагент)
	|ГДЕ
	|	ТипыСобытийСПАРКРиски.Критичное";
	
	СвойстваСправочников = СвойстваСправочниковКонтрагентов();
	ЭтоПерваяИтерация = Истина;
	Для Каждого ОписаниеСправочника Из СвойстваСправочников Цикл
		
		Если ЭтоПерваяИтерация Тогда
			ЧастиЗапроса.Добавить("ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|ЕСТЬNULL(КОЛИЧЕСТВО(СобытияМониторингаСПАРКРиски.Идентификатор), 0) КАК КоличествоСобытий");
		Иначе
			ЧастиЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			ЧастиЗапроса.Добавить("ВЫБРАТЬ ЕСТЬNULL(КОЛИЧЕСТВО(СобытияМониторингаСПАРКРиски.Идентификатор), 0)");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(
			ШаблонЗапроса,
			"%ИмяСправочникаКонтрагенты",
			ОписаниеСправочника.Имя);
		
		ЧастиЗапроса.Добавить(ТекстЗапроса);
		
		ЭтоПерваяИтерация = Ложь;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
	
	Выборка           = Неопределено;
	КоличествоСобытий = 0;
	НаименованиеДела  = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии"        , Истина);
	ПараметрыФормы.Вставить("КлючВарианта"                   , "Основной");
	ПараметрыФормы.Вставить("КлючНазначенияИспользования"    , "ТекущиеДела");
	
	Для Каждого ТекущийРаздел Из Разделы Цикл
		
		ИдентификаторДела = "СобытияМониторингаСПАРКРиски" + СтрЗаменить(ТекущийРаздел.ПолноеИмя(), ".", "");
		Если МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка = Неопределено Тогда
			
			// Получить данные только при необходимости
			// показать дело в разделе.
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				КоличествоСобытий = КоличествоСобытий + Выборка.КоличествоСобытий;
			КонецЦикла;
			
			Если КоличествоСобытий > 0 Тогда
				
				// Сформировать параметры дела только при наличии критичных событий.
				НаименованиеДела =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '1СПАРК Риски. Критичных событий мониторинга %1'"),
						КоличествоСобытий);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоСобытий > 0 Тогда
			
			Дело = ТекущиеДела.Добавить();
			Дело.Идентификатор  = ИдентификаторДела;
			Дело.ЕстьДела       = Истина;
			Дело.Важное         = Истина;
			Дело.Представление  = НаименованиеДела;
			Дело.Владелец       = ТекущийРаздел;
			Дело.Форма          = "Отчет.СобытияМониторингаСПАРКРиски.ФормаОбъекта";
			Дело.ПараметрыФормы = ПараметрыФормы;
			
		Иначе
			
			ДобавитьОтключенноеДело(ТекущиеДела, ИдентификаторДела, ТекущийРаздел, ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.ВариантыОтчетов.
//
// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоПредопределенных().
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	МодульВариантыОтчетов = ОбщегоНазначения.ОбщийМодуль("ВариантыОтчетов");
	ОписаниеОтчета = МодульВариантыОтчетов.ОписаниеОтчета(
		Настройки,
		Метаданные.Отчеты.ИндексыСПАРКРиски);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(
		Настройки,
		Метаданные.Отчеты.ИндексыСПАРКРиски,
		"СписокКонтрагентовДляОбновления");
	НастройкиВарианта.Включен = Ложь;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(
		Настройки,
		Метаданные.Отчеты.ИндексыСПАРКРиски,
		"ИндексыСПАРКРиски");
	НастройкиВарианта.Описание = НСтр("ru = 'Просмотр индексов рисков 1СПАРК Риски по контрагентам.'");
	
	ОписаниеОтчета = МодульВариантыОтчетов.ОписаниеОтчета(
		Настройки,
		Метаданные.Отчеты.СобытияМониторингаСПАРКРиски);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(
		Настройки,
		Метаданные.Отчеты.СобытияМониторингаСПАРКРиски,
		"Основной");
	НастройкиВарианта.Описание = НСтр("ru = 'Просмотр событий мониторинга 1СПАРК Риски по контрагентам за последние 15 дней.'");
	
	ОтчетНадежностьВходящегоНДС = Метаданные.Отчеты.Найти("НадежностьВходящегоНДССПАРКРиски");
	Если ОтчетНадежностьВходящегоНДС <> Неопределено Тогда
		
		ОписаниеОтчета = МодульВариантыОтчетов.ОписаниеОтчета(
			Настройки,
			ОтчетНадежностьВходящегоНДС);
		ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(
			Настройки,
			ОтчетНадежностьВходящегоНДС,
			"Основной");
		НастройкиВарианта.Описание = НСтр("ru = 'Данные входящего НДС с индексами 1СПАРК Риски по контрагентам.'");
	КонецЕсли;
	
	ОтчетНадежностьДебиторов = Метаданные.Отчеты.Найти("НадежностьДебиторовСПАРКРиски");
	Если ОтчетНадежностьДебиторов <> Неопределено Тогда
		
		ОписаниеОтчета = МодульВариантыОтчетов.ОписаниеОтчета(
			Настройки,
			ОтчетНадежностьДебиторов);
		ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(
			Настройки,
			ОтчетНадежностьДебиторов,
			"Основной");
		НастройкиВарианта.Описание = НСтр("ru = 'Данные дебиторской задолженности с индексами 1СПАРК Риски по контрагентам.'");
	КонецЕсли;
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить("ЗаполнениеКонтрагентовНаМониторингеСПАРКРиски");
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ОчередьЗаданийПереопределяемый.
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ЗаполнениеКонтрагентовНаМониторингеСПАРКРиски.ИмяМетода);
	
	СоответствиеИменПсевдонимам.Вставить(
		Метаданные.РегламентныеЗадания.ПроверкаГотовностиСправкиСПАРКРиски.ИмяМетода);
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению,
//  и если ДА - установить флажок Загружать.
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое.
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "ТипыСобытийМониторинга1СПАРКРиски" Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "ТипыСобытийМониторинга1СПАРКРиски" Тогда
		СПАРКРискиМониторингСобытий.ОбновитьТипыСобытийИзПоставляемыхДанных(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	МодульПоставляемыеДанные = ОбщегоНазначения.ОбщийМодуль("ПоставляемыеДанные");
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обработка поставляемых данных не выполнена.
				|Поставляемые данные:
				|%1'"),
			МодульПоставляемыеДанные.ПолучитьОписаниеДанных(Дескриптор)));
	
КонецПроцедуры

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.Элементы.БИПГруппаСПАРКРиски.Видимость =
		Пользователи.ЭтоПолноправныйПользователь(, Истина)
		И (Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
		И Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	Если Форма.Элементы.БИПГруппаСПАРКРиски.Видимость Тогда
		Форма.БИПИспользоватьСервисСПАРКРиски = Константы.ИспользоватьСервисСПАРКРиски.Получить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.Константы.ДатаОбновленияСобытийСПАРКРиски);
	Типы.Добавить(Метаданные.РегистрыСведений.ИндексыСПАРКРиски);
	Типы.Добавить(Метаданные.РегистрыСведений.СобытияМониторингаСПАРКРиски);
	
КонецПроцедуры

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	
КонецПроцедуры

// См. процедуру
// ИнтернетПоддержкаПользователей.ПриФормированииСпискаУслуг().
//
Процедура ПриФормированииСпискаУслуг(Услуги) Экспорт
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Индикаторы риска для компаний'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиМониторингКомпаний());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Мониторинг компаний'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиСправкиПоКомпаниям());
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'Справки по компаниям'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

Функция АдресСтраницыЛичныйКабинетВсеСправки() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/application/1C-Spark-risks/sub/getOrganizationReports",
		0);
	
КонецФункции

Функция АдресСтраницыТарифовСервисаНаПортале1С() Экспорт
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.URLСтраницыПорталаПоддержки(
		"/app/1spark-risks#prices");
	
КонецФункции

Функция ИспользованиеСПАРКРискиВключено() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски");
	
КонецФункции

Функция СвойстваСправочниковКонтрагентов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Иерархический"          , Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Имя"                    , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("РеквизитИНН"            , ОписаниеТипаСтрока);
	Результат.Колонки.Добавить("ИмяФормыПодбора"        , ОписаниеТипаСтрока);
	
	ИнтеграцияПодсистемБИП.ПриОпределенииСвойствСправочниковКонтрагентов(
		Результат);
	СПАРКРискиПереопределяемый.ПриОпределенииСвойствСправочниковКонтрагентов(
		Результат);
	
	Если Результат.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось определить свойства справочника Контрагенты.
			|Не заполнена реализация метода ПриОпределенииСвойствСправочниковКонтрагентов()
			|общего модуля СПАРКРискиПереопределяемый.'");
	КонецЕсли;
	
	Результат.Колонки.Добавить("ТипСсылка", Новый ОписаниеТипов("Тип"));
	
	Для Каждого СтрокаОписаниеСправочника Из Результат Цикл
		СтрокаОписаниеСправочника.ТипСсылка = Тип("СправочникСсылка." + СтрокаОписаниеСправочника.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначенияРеквизитовКонтрагентов(Контрагенты) Экспорт
	
	Если ТипЗнч(Контрагенты) = Тип("Массив") Тогда
		КонтрагентыМассив = Контрагенты;
	Иначе
		КонтрагентыМассив = Новый Массив;
		КонтрагентыМассив.Добавить(Контрагенты);
	КонецЕсли;
	
	ЗапросКонтрагенты = Новый Запрос;
	// Текст запроса.
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		СвойстваСправочников = СвойстваСправочниковКонтрагентов();
		
		КонтрагентыПоТипам = Новый Соответствие;
		Если СвойстваСправочников.Количество() = 1 Тогда
			КонтрагентыПоТипам.Вставить(СвойстваСправочников[0].ТипСсылка, КонтрагентыМассив);
		Иначе
			// Распределение контрагентов по типам для запросов к разным справочникам.
			Для Каждого ТекущийКонтрагент Из КонтрагентыМассив Цикл
				ТипТекущийКонтрагент = ТипЗнч(ТекущийКонтрагент);
				КонтрагентыПоТипу = КонтрагентыПоТипам.Получить(ТипТекущийКонтрагент);
				Если КонтрагентыПоТипу = Неопределено Тогда
					КонтрагентыПоТипу = Новый Массив;
					КонтрагентыПоТипам.Вставить(ТипТекущийКонтрагент, КонтрагентыПоТипу);
				КонецЕсли;
				КонтрагентыПоТипу.Добавить(ТекущийКонтрагент);
			КонецЦикла;
		КонецЕсли;
		
		ШаблонТекстаЗапроса = "
			|СправочникКонтрагенты.%Ссылка,
			|	СвойстваКонтрагентовСПАРКРиски.%ИмяРеквизитаИНН,
			|	СвойстваКонтрагентовСПАРКРиски.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
			|	СвойстваКонтрагентовСПАРКРиски.ВидКонтрагента КАК ВидКонтрагента,
			|	ВЫБОР
			|		КОГДА СвойстваКонтрагентовСПАРКРиски.Контрагент ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ %ИмяПодлежитПроверке
			|ИЗ
			|	Справочник.%ИмяСправочникаКонтрагенты КАК СправочникКонтрагенты
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
			|		ПО СправочникКонтрагенты.Ссылка = СвойстваКонтрагентовСПАРКРиски.Контрагент
			|ГДЕ
			|	СправочникКонтрагенты.Ссылка В (&%ИмяПараметрКонтрагенты)
			|	%УсловиеЭтоГруппа
			|";
		
		ЧастиЗапроса     = Новый Массив;
		
		НомерИтерации = 0;
		Для Каждого КлючЗначение Из КонтрагентыПоТипам Цикл
			
			ТипЭлемента = КлючЗначение.Ключ;
			ОписаниеСправочника = СвойстваСправочников.Найти(ТипЭлемента, "ТипСсылка");
			Если ОписаниеСправочника = Неопределено Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип справочника контрагентов (%1). Описание справочника отсутствует в методе
						|ПриОпределенииСвойствСправочниковКонтрагентов() общего модуля СПАРКРискиПереопределяемый.'"),
					Строка(ТипЭлемента));
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Если НомерИтерации > 0 Тогда
				ЧастиЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			КонецЕсли;
			
			Если НомерИтерации = 0 Тогда
				ИмяРеквизитаСсылка  = "Ссылка КАК Контрагент";
				ИмяРеквизитаИНН     = "ИНН КАК ИНН";
				ИмяПодлежитПроверке = "КАК ПодлежитПроверке";
				ЧастиЗапроса.Добавить("ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			Иначе
				ИмяРеквизитаСсылка  = "Ссылка";
				ИмяРеквизитаИНН     = "ИНН";
				ИмяПодлежитПроверке = "";
				ЧастиЗапроса.Добавить("ВЫБРАТЬ");
			КонецЕсли;
			
			Если ОписаниеСправочника.Иерархический Тогда
				УсловиеЭтоГруппа = "И НЕ СправочникКонтрагенты.ЭтоГруппа";
			Иначе
				УсловиеЭтоГруппа = "";
			КонецЕсли;
			
			ИмяПараметрКонтрагенты = "ИмяПараметрКонтрагенты" + Формат(НомерИтерации, "ЧГ=0");
			
			ТекстТекущегоЗапроса = СтрЗаменить(
				ШаблонТекстаЗапроса,
				"%Ссылка",
				ИмяРеквизитаСсылка);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяРеквизитаИНН",
				ИмяРеквизитаИНН);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяПодлежитПроверке",
				ИмяПодлежитПроверке);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяСправочникаКонтрагенты",
				ОписаниеСправочника.Имя);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%ИмяПараметрКонтрагенты",
				ИмяПараметрКонтрагенты);
			ТекстТекущегоЗапроса = СтрЗаменить(
				ТекстТекущегоЗапроса,
				"%УсловиеЭтоГруппа",
				УсловиеЭтоГруппа);
			
			ЧастиЗапроса.Добавить(ТекстТекущегоЗапроса);
			ЗапросКонтрагенты.УстановитьПараметр(ИмяПараметрКонтрагенты, КлючЗначение.Значение);
			
			НомерИтерации = НомерИтерации + 1;
			
		КонецЦикла;
		
		ЗапросКонтрагенты.Текст = СтрСоединить(ЧастиЗапроса, Символы.ПС);
		
	Иначе
		
		ЗапросКонтрагенты.Текст = "
			|ВЫБРАТЬ
			|	СвойстваКонтрагентовСПАРКРиски.Контрагент                         КАК Контрагент,
			|	СвойстваКонтрагентовСПАРКРиски.ИНН                                КАК ИНН,
			|	СвойстваКонтрагентовСПАРКРиски.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
			|	СвойстваКонтрагентовСПАРКРиски.ВидКонтрагента                     КАК ВидКонтрагента,
			|	ИСТИНА                                                            КАК ПодлежитПроверке
			|ИЗ
			|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
			|ГДЕ
			|	СвойстваКонтрагентовСПАРКРиски.Контрагент В (&Контрагенты)
			|";
		
		ЗапросКонтрагенты.УстановитьПараметр("Контрагенты", КонтрагентыМассив);
		
	КонецЕсли;
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ЗапросКонтрагенты.Текст = СтрЗаменить(
			ЗапросКонтрагенты.Текст,
			"СвойстваКонтрагентовСПАРКРиски.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,",
			"");
	КонецЕсли;
	
	Результат = ЗапросКонтрагенты.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Контрагент");
	Результат.Индексы.Добавить("ИНН");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеАутентификацииПользователяИнтернетПоддержки(НомерОбласти = Неопределено) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Новый Структура("Тикет, НомерОбласти", "", НомерОбласти);
	Иначе
		Возврат ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	КонецЕсли;
	
КонецФункции

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПередЗагрузкойВариантаНаСервере" в синтакс-помощнике.
//   ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере().
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ПараметрыОтображения = Новый Структура;
	ПараметрыОтображения.Вставить("ИмяМакетаОформления", "");
	
	ИнтеграцияПодсистемБИП.ПараметрыОтображенияОтчетов(
		ПараметрыОтображения);
	СПАРКРискиПереопределяемый.ПараметрыОтображенияОтчетов(
		ПараметрыОтображения);
	
	Если Не ПустаяСтрока(ПараметрыОтображения.ИмяМакетаОформления) Тогда
		
		ПараметрМакетОформления = НовыеНастройкиКД.ПараметрыВывода.Элементы.Найти("МакетОформления");
		Если ПараметрМакетОформления.Значение = "Main" 
			Или ПараметрМакетОформления.Значение = "Основной" Тогда
			ПараметрМакетОформления.Значение = ПараметрыОтображения.ИмяМакетаОформления;
			ПараметрМакетОформления.Использование = Истина;
		КонецЕсли;
		
		Для Каждого ЭлементСтруктуры Из НовыеНастройкиКД.Структура Цикл
			Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ПараметрМакетОформления = ЭлементСтруктуры.Настройки.ПараметрыВывода.Элементы.Найти("МакетОформления");
				Если ПараметрМакетОформления.Значение = "Main" 
					Или ПараметрМакетОформления.Значение = "Основной" Тогда
					ПараметрМакетОформления.Значение = ПараметрыОтображения.ИмяМакетаОформления;
					ПараметрМакетОформления.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//   СвойстваНастройки - Структура - Описание настройки отчета, которая будет выведена в форме отчета.
//       * ОписаниеТипов - ОписаниеТипов -
//           Тип настройки.
//       * ЗначенияДляВыбора - СписокЗначений -
//           Объекты, которые будут предложены пользователю в списке выбора.
//           Дополняет список объектов, уже выбранных пользователем ранее.
//       * ЗапросЗначенийВыбора - Запрос -
//           Возвращает объекты, которыми необходимо дополнить ЗначенияДляВыбора.
//           Первой колонкой (с 0м индексом) должен выбираться объект,
//           который следует добавить в ЗначенияДляВыбора.Значение.
//           Для отключения автозаполнения
//           в свойство ЗапросЗначенийВыбора.Текст следует записать пустую строку.
//       * ОграничиватьВыборУказаннымиЗначениями - Булево -
//           Когда Истина, то выбор пользователя будет ограничен значениями,
//           указанными в ЗначенияДляВыбора (его конечным состоянием).
//
Процедура ПриОпределенииПараметровВыбора(СвойстваНастройки) Экспорт
	
	Если СвойстваНастройки.Тип = "ЗначениеПараметраНастроек" Тогда
		ИмяПараметра = Строка(СвойстваНастройки.ПолеКД);
		Если ИмяПараметра = "ПараметрыДанных.СтатусНазвание"
			Или ИмяПараметра = "ПараметрыДанных.ТипСобытия" Тогда
			
			СвойстваНастройки.ВыводРазрешен = Ложь;
			СвойстваНастройки.ЗапросЗначенийВыбора.Текст = "";
			СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТипыСобытийСПАРКРиски.Название КАК Название
				|ИЗ
				|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски";
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СвойстваНастройки.ЗначенияДляВыбора.Добавить(Выборка.Название, Выборка.Название);
			КонецЦикла;
			// Дополнительный статус, если не активен.
			СвойстваНастройки.ЗначенияДляВыбора.Добавить(
				ТекстСтатусаПрекратилДеятельность(),
				ТекстСтатусаПрекратилДеятельность());
			СвойстваНастройки.ЗначенияДляВыбора.СортироватьПоПредставлению()
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = '1СПАРК Риски'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Процедура ДобавитьОтключенноеДело(ТекущиеДела, ИдентификаторДела, Раздел, ПараметрыФормы)
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = ИдентификаторДела;
	Дело.ЕстьДела       = Ложь;
	Дело.Представление  = НСтр("ru = '1СПАРК Риски. Критичные события мониторинга'");
	Дело.Владелец       = Раздел;
	Дело.Форма          = "Отчет.СобытияМониторингаСПАРКРиски.ФормаОбъекта";
	Дело.ПараметрыФормы = ПараметрыФормы;
	
КонецПроцедуры

Функция ОбработатьВидКонтрагента(ВидКонтрагента) Экспорт
	
	Возврат ?(Не ЗначениеЗаполнено(ВидКонтрагента),
		Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо,
		ВидКонтрагента);
	
КонецФункции

// Возвращает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя получаемого свойства;
//	ЗначениеПоУмолчанию - Произвольный - значение свойства,
//		которое необходимо возвратить при отсутствии сохраненного свойства.
//
// Возвращаемое значение:
//	Произвольный - значение свойства.
//
Функция ЗначениеСвойстваСПАРК(Имя, ЗначениеПоУмолчанию = Неопределено)
	
	СвойстваСПАРКРиски = Константы.СвойстваСПАРКРиски.Получить().Получить();
	Если ТипЗнч(СвойстваСПАРКРиски) <> Тип("Соответствие") Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = СвойстваСПАРКРиски.Получить(Имя);
	Если Результат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает значение вспомогательного свойства БИП.
//
// Параметры:
//	Имя - Строка - имя устанавливаемого свойства;
//	Значение - - Произвольный - значение устанавливаемого свойства.
//
Процедура УстановитьЗначениеСвойстваСПАРК(Имя, Значение) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.СвойстваСПАРКРиски");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		СвойстваСПАРКРиски = Константы.СвойстваСПАРКРиски.Получить().Получить();
		Если ТипЗнч(СвойстваСПАРКРиски) <> Тип("Соответствие") Тогда
			СвойстваСПАРКРиски = Новый Соответствие;
		КонецЕсли;
		
		СвойстваСПАРКРиски.Вставить(Имя, Значение);
		Константы.СвойстваСПАРКРиски.Установить(Новый ХранилищеЗначения(СвойстваСПАРКРиски));
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКомандыФормыКонтрагента

Функция ПодключаемыеКомандыФормыКонтрагента(ЭтоФормаОбъекта)
	
	Результат = Новый ТаблицаЗначений;
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("Имя"     , ОписаниеТиповСтрока);
	Результат.Колонки.Добавить("Синоним" , ОписаниеТиповСтрока);
	
	Если ЭтоФормаОбъекта И ИспользованиеРазрешено("ПостановкаНаМониторинг;") Тогда
		СтрКоманды = Результат.Добавить();
		СтрКоманды.Имя     = "СПАРКРиски_ВключитьМониторингСобытий";
		СтрКоманды.Синоним = НСтр("ru = 'Включить мониторинг событий'");
	КонецЕсли;
	
	СтрКоманды = Результат.Добавить();
	СтрКоманды.Имя     = "СПАРКРиски_ОткрытьСписокСправокКонтрагента";
	СтрКоманды.Синоним = НСтр("ru = 'Справки'");
	
	СтрКоманды = Результат.Добавить();
	СтрКоманды.Имя     = "СПАРКРиски_СобытияМониторингаПоКонтрагенту";
	СтрКоманды.Синоним = НСтр("ru = 'События мониторинга'");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СправкиСПАРКРиски

Процедура УстановитьСостояниеСправки(СправкаСсылка, Состояние) Экспорт
	
	Если Не Пользователи.РолиДоступны("ЧтениеДанныхСПАРКРиски") Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СправкиСПАРКРиски");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", СправкаСсылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		СправкаОбъект = СправкаСсылка.ПолучитьОбъект();
		СправкаОбъект.Заблокировать();
		СправкаОбъект.Состояние = Состояние;
		СправкаОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурналРегистрации(ИнформацияОбОшибке);
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИндексыСПАРКРиски

// Процедура предназначена для проверки завершенности фоновых заданий.
//
// Параметры:
//  ПроверяемыеФоновыеЗадания - Массив - массив структур, описанных в СПАРКРискиКлиент.НовыйПроверкаЗавершенностиФоновогоЗадания.
//
// Возвращаемое значение:
//   Массив - массив структур, описанных в СПАРКРискиКлиент.НовыйПроверкаЗавершенностиФоновогоЗадания.
//
Функция ПроверкаЗавершенностиФоновыхЗаданий(ПроверяемыеФоновыеЗадания) Экспорт

	ТипМассив = Тип("Массив");

	Результат = Новый Массив;

	Если (ТипЗнч(ПроверяемыеФоновыеЗадания) = ТипМассив)
			И (ПроверяемыеФоновыеЗадания.Количество() > 0) Тогда
		Для Каждого ТекущееПроверяемоеФоновоеЗадание Из ПроверяемыеФоновыеЗадания Цикл
			ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ТекущееПроверяемоеФоновоеЗадание.ИдентификаторФоновогоЗадания);
			Если ФоновоеЗадание <> Неопределено Тогда
				ТекущееПроверяемоеФоновоеЗадание.Вставить("КоличествоПроверок", ТекущееПроверяемоеФоновоеЗадание.КоличествоПроверок + 1);
				Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Выполняется");
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Выполнено");
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Ошибка");
				ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("Статус", "Отменено");
				КонецЕсли;
				Если ТипЗнч(ФоновоеЗадание.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
					ТекущееПроверяемоеФоновоеЗадание.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
				КонецЕсли;
				Результат.Добавить(ТекущееПроверяемоеФоновоеЗадание);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция по значению индекса выдает его градацию.
//
// Параметры:
//  ЗначениеИндекса - Число, NULL, Неопределено - числовое значение индекса;
//  ИмяИндекса      - Строка - одно из значений:
//                      - ИндексДолжнойОсмотрительности,
//                      - ИндексПлатежнойДисциплины,
//                      - ИндексФинансовогоРиска;
//                      - СводныйИндикатор.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ГрадацияИндексовСПАРКРиски - градация по значению.
//
Функция ГрадацияИндекса(ЗначениеИндекса, ИмяИндекса) Экспорт

	Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.ПустаяСсылка");

	ТипЧисло = Тип("Число");

	// Определение интервалов индексов СПАРК Риски.
	Если ТипЗнч(ЗначениеИндекса) = ТипЧисло Тогда
		Если ВРег(ИмяИндекса) = ВРег("ИндексДолжнойОсмотрительности") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=40 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий");
			ИначеЕсли ЗначениеИндекса >=41 И ЗначениеИндекса <=71 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний");
			ИначеЕсли ЗначениеИндекса >=72 И ЗначениеИндекса <=100 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий");
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексПлатежнойДисциплины") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=49 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий");
			ИначеЕсли ЗначениеИндекса >=50 И ЗначениеИндекса <=79 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний");
			ИначеЕсли ЗначениеИндекса >=80 И ЗначениеИндекса <=100 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий");
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("ИндексФинансовогоРиска") Тогда
			Если ЗначениеИндекса >=0 И ЗначениеИндекса <=14 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий");
			ИначеЕсли ЗначениеИндекса >=15 И ЗначениеИндекса <=85 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний");
			ИначеЕсли ЗначениеИндекса >=86 И ЗначениеИндекса <=100 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий");
			КонецЕсли;
		ИначеЕсли ВРег(ИмяИндекса) = ВРег("СводныйИндикатор") Тогда
			Если ЗначениеИндекса <= 1 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Низкий");
			ИначеЕсли ЗначениеИндекса = 2 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Средний");
			ИначеЕсли ЗначениеИндекса = 3 Тогда
				Результат = ПредопределенноеЗначение("Перечисление.ГрадацияИндексовСПАРКРиски.Высокий");
			КонецЕсли;
		КонецЕсли
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает структуру контрагента для получения по ним индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура возвращаемых данных с ключами:
//     * ВидКонтрагента - ПеречислениеСсылка.ВидыКонтрагентовСПАРКРиски - вид проверки данных контрагента;
//     * ОбластьДанных  - Число - номер области данных или -1 при работе НЕ в модели сервиса.
//     * Контрагент     - ОпределяемыеТипы.КонтрагентБИП - контрагент;
//     * ИНН            - Строка.
//
Функция НовыйОписаниеКонтрагента() Экспорт

	Результат = Новый Структура();

	// Основные данные.
	Результат.Вставить("ВидКонтрагента"  , Неопределено);
	Результат.Вставить("ОбластьДанных", -1);
	Результат.Вставить("Контрагент"   , Неопределено);
	Результат.Вставить("ИНН"          , "");

	Возврат Результат;

КонецФункции

// Проверяет соответствие ИНН требованиям.
//
// Параметры:
//  ИНН                - Строка - Проверяемый индивидуальный номер налогоплательщика.
//  ТекстСообщения     - Строка - Текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Истина       - ИНН соответствует требованиям;
//  Ложь         - ИНН не соответствует требованиям.
//
Функция ИННСоответствуетТребованиям(
		Знач ИНН,
		ВидКонтрагента,
		ТекстСообщения = Неопределено) Экспорт
	
	Возврат РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
		ИНН,
		(ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо),
		ТекстСообщения);
	
КонецФункции 

Функция ТекстСтатусаПрекратилДеятельность() Экспорт
	
	Возврат НСтр("ru = 'Контрагент прекратил деятельность'");
	
КонецФункции

Функция ТекстСтатусаНетИнформацииОКонтрагенте() Экспорт
	
	Возврат НСтр("ru = 'Нет информации о контрагенте'");
	
КонецФункции

Процедура ПолучитьДанныеИндексовИзКэша(
		Контрагент,
		НеобходимоЗагрузитьИнформацию,
		ПризнакЗагрузкиДанных,
		Результат)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИндексыСПАРКРиски.Активен КАК Активен,
		|	ИндексыСПАРКРиски.ВидОшибки КАК ВидОшибки,
		|	ИндексыСПАРКРиски.ДатаСтатуса КАК ДатаСтатуса,
		|	ИндексыСПАРКРиски.ИндексДолжнойОсмотрительности КАК ИндексДолжнойОсмотрительности,
		|	ИндексыСПАРКРиски.ИндексПлатежнойДисциплины КАК ИндексПлатежнойДисциплины,
		|	ИндексыСПАРКРиски.ИндексФинансовогоРиска КАК ИндексФинансовогоРиска,
		|	ИндексыСПАРКРиски.ОтображатьСтатус КАК ОтображатьСтатус,
		|	ИндексыСПАРКРиски.СводныйИндикатор КАК СводныйИндикатор,
		|	ИндексыСПАРКРиски.Статус КАК Статус,
		|	ИндексыСПАРКРиски.СтатусНазвание КАК СтатусНазвание,
		|	ИндексыСПАРКРиски.Контрагент КАК Контрагент,
		|	ИндексыСПАРКРиски.ИНН КАК ИНН,
		|	ИндексыСПАРКРиски.ТекстОшибки КАК ТекстОшибки,
		|	ИндексыСПАРКРиски.ДатаОбновления КАК ДатаОбновления,
		|	ИндексыСПАРКРиски.БухгалтерскаяОтчетность КАК БухгалтерскаяОтчетность,
		|	ВЫБОР
		|		КОГДА ИндексыСПАРКРиски.Статус = ЗНАЧЕНИЕ(Справочник.ТипыСобытийСПАРКРиски.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИндексыСПАРКРиски.Статус.Критичное
		|	КОНЕЦ КАК Критичное
		|ИЗ
		|	РегистрСведений.ИндексыСПАРКРиски КАК ИндексыСПАРКРиски
		|ГДЕ
		|	ИндексыСПАРКРиски.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	// Данные за прошедшие 12 часов считаются актуальными.
	ДатаАктуальностиИнформации = ТекущаяДатаСеанса() - 12*60*60;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(
			Результат,
			ВыборкаДетальныеЗаписи,
			"Контрагент, ИНН, СводныйИндикатор,
			|ИндексДолжнойОсмотрительности, ИндексФинансовогоРиска,
			|ИндексПлатежнойДисциплины, Активен, ОтображатьСтатус,
			|Статус, СтатусНазвание, ДатаСтатуса,
			|ВидОшибки, ТекстОшибки, ДатаОбновления, БухгалтерскаяОтчетность,
			|Критичное");
		
		Результат.СводныйИндикаторГрадация = ГрадацияИндекса(
			ВыборкаДетальныеЗаписи.СводныйИндикатор,
			"СводныйИндикатор");
		
		Результат.ИДОГрадация = ГрадацияИндекса(
			ВыборкаДетальныеЗаписи.ИндексДолжнойОсмотрительности,
			"ИндексДолжнойОсмотрительности");
		
		Результат.ИФРГрадация = ГрадацияИндекса(
			ВыборкаДетальныеЗаписи.ИндексФинансовогоРиска,
			"ИндексФинансовогоРиска");
		
		Результат.ИПДГрадация = ГрадацияИндекса(
			ВыборкаДетальныеЗаписи.ИндексПлатежнойДисциплины,
			"ИндексПлатежнойДисциплины");
		
		Результат.ИдентификаторФоновогоЗадания = Неопределено;
		Результат.АдресХранилищаФоновогоЗадания = Неопределено;
		
		Если ВыборкаДетальныеЗаписи.ДатаОбновления < ДатаАктуальностиИнформации Тогда
			НеобходимоЗагрузитьИнформацию = Истина;
			Результат.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеУстаревшиеДанные;
			Результат.СостояниеЗагрузкиДанных = ?(ПризнакЗагрузкиДанных, 
				Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание,
				Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
		Иначе
			Результат.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзКэша;
			Результат.СостояниеЗагрузкиДанных = Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Результат.СостояниеВыводаДанных = Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных;
		Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
			НеобходимоЗагрузитьИнформацию = Ложь;
			Результат.СостояниеЗагрузкиДанных = Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка();
			Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена;
		Иначе
			НеобходимоЗагрузитьИнформацию = ПризнакЗагрузкиДанных;
			Результат.СостояниеЗагрузкиДанных = ?(ПризнакЗагрузкиДанных, 
				Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание,
				Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапуститьФоновоеЗаданиеИндексыСПАРК(
		Контрагент,
		КонтрагентИНН,
		ВидКонтрагента,
		ПризнакЗагрузкиДанных,
		Результат)
	
	Если НЕ ПустаяСтрока(КонтрагентИНН) Тогда

		ТекстОшибки = "";
		Если ИННСоответствуетТребованиям(КонтрагентИНН, ВидКонтрагента, ТекстОшибки) Тогда

			ИдентификаторФормы = Новый УникальныйИдентификатор;
			АдресХранилищаФоновогоЗадания = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторФормы);
			Результат.Вставить("АдресХранилищаФоновогоЗадания", АдресХранилищаФоновогоЗадания);

			РезультатЗапускаФоновогоЗадания = Новый Структура;
			РезультатЗапускаФоновогоЗадания.Вставить("ИдентификаторЗадания", Неопределено);
			РезультатЗапускаФоновогоЗадания.Вставить("АдресРезультата", АдресХранилищаФоновогоЗадания);
			РезультатЗапускаФоновогоЗадания.Вставить("АдресДополнительногоРезультата", "");
			РезультатЗапускаФоновогоЗадания.Вставить("КраткоеПредставлениеОшибки", "");
			РезультатЗапускаФоновогоЗадания.Вставить("ПодробноеПредставлениеОшибки", "");

			// Ограничение: в один момент времени нельзя запустить несколько фоновых заданий по получению индексов для одинакового ИНН.
			КлючФоновогоЗадания = "ЗагрузкаИндексаСПАРКРискиДляИНН_" + КонтрагентИНН;

			Если ТипЗнч(ПризнакЗагрузкиДанных) = Тип("УникальныйИдентификатор") Тогда // Задание было запущено ранее.
				ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ПризнакЗагрузкиДанных);
				Если ФоновоеЗадание <> Неопределено Тогда
					РезультатЗапускаФоновогоЗадания.Вставить("ИдентификаторЗадания", ФоновоеЗадание.УникальныйИдентификатор);
					Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
						РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Выполняется");
					ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
						РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Выполнено");
						СообщенияФоновогоЗадания = ДлительныеОперации.ПрочитатьПрогресс(ФоновоеЗадание.УникальныйИдентификатор);
						Если (ТипЗнч(СообщенияФоновогоЗадания) = Тип("Структура"))
								И (СообщенияФоновогоЗадания.Свойство("АдресРезультата"))
								И НЕ ПустаяСтрока(СообщенияФоновогоЗадания.АдресРезультата) Тогда
							РезультатЗапускаФоновогоЗадания.Вставить("АдресРезультата", СообщенияФоновогоЗадания.АдресРезультата);
						КонецЕсли;
					ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
						РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Ошибка");
						РезультатЗапускаФоновогоЗадания.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
					ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
						РезультатЗапускаФоновогоЗадания.Вставить("Статус", "Отменено");
					КонецЕсли;
				Иначе
					Результат.Вставить("ВидОшибки",               Перечисления.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка);
					Результат.Вставить("ТекстОшибки",             НСтр("ru='Не найдено фоновое задание'"));
					Результат.Вставить("СостояниеВыводаДанных",   Перечисления.СостоянияВыводаИндексовСПАРКРиски.ВКэшеНетДанных);
					Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания);
				КонецЕсли;
			Иначе
				// Фоновое задание не было запущено.
				// Запускать фоновое задание только если это явно указано.
				Если (ПризнакЗагрузкиДанных = Истина) Тогда
					МассивОписанийКонтрагентов = Новый Массив;
					ОбластьДанныхЛокальная = -1;
					ОписаниеКонтрагента = НовыйОписаниеКонтрагента();
					Если ОбщегоНазначения.РазделениеВключено() Тогда
						ОбластьДанныхЛокальная = ИнтернетПоддержкаПользователей.ЗначениеРазделителяСеанса();
						ОписаниеКонтрагента.ОбластьДанных = ОбластьДанныхЛокальная;
					КонецЕсли;
					Если ТипЗнч(Контрагент) = Тип("Строка") Тогда
						ОписаниеКонтрагента.Контрагент = Неопределено;
					Иначе
						ОписаниеКонтрагента.Контрагент = Контрагент;
					КонецЕсли;
					ОписаниеКонтрагента.ВидКонтрагента = ВидКонтрагента;
					ОписаниеКонтрагента.ИНН            = КонтрагентИНН; // Уже без пробелов.
					МассивОписанийКонтрагентов.Добавить(ОписаниеКонтрагента);
					
					ПараметрыЗапускаПроцедуры = Новый Структура("ОбластьДанных, МассивОписанийКонтрагентов",
						ОбластьДанныхЛокальная,
						МассивОписанийКонтрагентов);
					
					ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
					ПараметрыВыполнения.Вставить("НаименованиеФоновогоЗадания",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Загрузка индексов СПАРК Риски для контрагента %1 с ИНН %2'"),
							Контрагент,
							КонтрагентИНН));
					
					ПараметрыВыполнения.Вставить("КлючФоновогоЗадания", КлючФоновогоЗадания);
					ПараметрыВыполнения.Вставить("АдресРезультата", АдресХранилищаФоновогоЗадания);
					ПараметрыВыполнения.Вставить("ЗапуститьВФоне", Истина); // Всегда запускать в фоне, даже если в очереди уже есть фоновые задания.
					ОжидатьЗавершение = ПараметрыВыполнения.ОжидатьЗавершение;
					
					ИнтеграцияПодсистемБИП.ВремяОжиданияФоновогоЗадания(
						ОжидатьЗавершение);
					СПАРКРискиПереопределяемый.ВремяОжиданияФоновогоЗадания(
						ОжидатьЗавершение);
					
					ПараметрыВыполнения.Вставить("ОжидатьЗавершение", ОжидатьЗавершение);

					РезультатЗапускаФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
						"СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентовВФоне",
						ПараметрыЗапускаПроцедуры,
						ПараметрыВыполнения);
				КонецЕсли;
			КонецЕсли;

			Если РезультатЗапускаФоновогоЗадания.Статус = "Выполняется" Тогда
				// СостояниеВыводаДанных заполняется раньше - 
				Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ЗапущеноФоновоеЗадание);
				Результат.Вставить("ИдентификаторФоновогоЗадания", РезультатЗапускаФоновогоЗадания.ИдентификаторЗадания);
			ИначеЕсли РезультатЗапускаФоновогоЗадания.Статус = "Выполнено" Тогда
				// Если задание выполнено, значит значения уже или записаны в кэш (в регистр сведений) (если передан Контрагент)
				//  или сохранены во временном хранилище.
				РезультатВыполненияФоновогоЗадания = ПолучитьИзВременногоХранилища(РезультатЗапускаФоновогоЗадания.АдресРезультата);
				Если РезультатВыполненияФоновогоЗадания <> Неопределено Тогда
					Если РезультатВыполненияФоновогоЗадания.Свойство("ЗначенияИндексов")
							И (ТипЗнч(РезультатВыполненияФоновогоЗадания.ЗначенияИндексов) = Тип("ТаблицаЗначений"))
							И (РезультатВыполненияФоновогоЗадания.ЗначенияИндексов.Количество() > 0) Тогда
						ЗаполнитьЗначенияСвойств(Результат, РезультатВыполненияФоновогоЗадания.ЗначенияИндексов[0]);
					КонецЕсли;
					// ВидОшибки может быть общий или по каждому ИНН. Если есть по ИНН - вставить его, иначе подставить общий.
					Если Результат.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПустаяСсылка() Тогда
						Результат.Вставить("ВидОшибки", РезультатВыполненияФоновогоЗадания.ВидОшибки);
					Иначе
						// Некоторые виды общих ошибок приоритетнее локальных ошибок по каждому ИНН.
						Если (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса)
								ИЛИ (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена)
								ИЛИ (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеЗапрещено)
								ИЛИ (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеОтключено)
								ИЛИ (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаАутентификации)
								ИЛИ (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения)
								ИЛИ (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ПревышеноКоличествоПопытокАутентификации)
								ИЛИ (РезультатВыполненияФоновогоЗадания.ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит) Тогда
							Результат.Вставить("ВидОшибки", РезультатВыполненияФоновогоЗадания.ВидОшибки);
						КонецЕсли;
					КонецЕсли;
					Результат.Вставить("ТекстОшибки",             РезультатВыполненияФоновогоЗадания.СообщениеОбОшибке);
					Результат.Вставить("СостояниеВыводаДанных",   Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПолученоИзФоновогоЗадания);
					Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
				Иначе
					Результат.Вставить("ВидОшибки",                Перечисления.ВидыОшибокСПАРКРиски.НеизвестнаяОшибка);
					Результат.Вставить("ТекстОшибки",              НСтр("ru='Ошибка получения индексов СПАРК Риски'"));
					Результат.Вставить("ДатаОбновления",           ТекущаяДатаСеанса());
					Результат.Вставить("СостояниеВыводаДанных",    Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
					Результат.Вставить("СостояниеЗагрузкиДанных",  Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания);
				КонецЕсли;
				Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
			ИначеЕсли РезультатЗапускаФоновогоЗадания.Статус = "Ошибка" Тогда
				Результат.Вставить("ТекстОшибки",                  РезультатЗапускаФоновогоЗадания.ПодробноеПредставлениеОшибки);
				Результат.Вставить("СостояниеВыводаДанных",        Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
				Результат.Вставить("СостояниеЗагрузкиДанных",      Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОшибкаФоновогоЗадания);
				Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
			ИначеЕсли РезультатЗапускаФоновогоЗадания.Статус = "Отменено" Тогда
				Результат.Вставить("ТекстОшибки",                  НСтр("ru='Выполнение фонового задания отменено администратором'"));
				Результат.Вставить("СостояниеВыводаДанных",        Перечисления.СостоянияВыводаИндексовСПАРКРиски.ПустаяСсылка());
				Результат.Вставить("СостояниеЗагрузкиДанных",      Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ОтменаФоновогоЗадания);
				Результат.Вставить("ИдентификаторФоновогоЗадания", Неопределено);
			КонецЕсли;

		Иначе
			Результат.Вставить("ТекстОшибки",             ТекстОшибки);
			Результат.Вставить("СостояниеВыводаДанных",   Перечисления.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН);
			Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
		КонецЕсли;

	Иначе
		Результат.Вставить("СостояниеВыводаДанных", Перечисления.СостоянияВыводаИндексовСПАРКРиски.НеправильныйИНН);
		Результат.Вставить("СостояниеЗагрузкиДанных", Перечисления.СостоянияЗагрузкиИндексовСПАРКРиски.ПустаяСсылка());
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбновитьИндексыКонтрагентовОтчет(
		МенеджерВременныхТаблиц,
		ИмяТаблицы,
		ДокументРезультат,
		Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвойстваКонтрагентовСПАРКРиски.Контрагент КАК Контрагент,
		|	СвойстваКонтрагентовСПАРКРиски.ИНН КАК ИНН,
		|	СвойстваКонтрагентовСПАРКРиски.ВидКонтрагента КАК ВидКонтрагента
		|ИЗ
		|	%1 КАК ТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
		|		ПО ТаблицаДанных.Контрагент = СвойстваКонтрагентовСПАРКРиски.Контрагент
		|			И (СвойстваКонтрагентовСПАРКРиски.ИННКорректный)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИндексыСПАРКРиски КАК ИндексыСПАРКРиски
		|		ПО ТаблицаДанных.Контрагент = ИндексыСПАРКРиски.Контрагент
		|			И (ИндексыСПАРКРиски.ДатаОбновления > &ДатаАктуальности)
		|ГДЕ
		|	ИндексыСПАРКРиски.Контрагент ЕСТЬ NULL";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		ИмяТаблицы);
	
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяДатаСеанса() - 12*60*60);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		КонтрагентОбластьДанных = ИнтернетПоддержкаПользователей.ЗначениеРазделителяСеанса();
	Иначе
		КонтрагентОбластьДанных = -1;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ОписанияКонтрагентов = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОписаниеКонтрагента = НовыйОписаниеКонтрагента();
		ОписаниеКонтрагента.ОбластьДанных  = КонтрагентОбластьДанных;
		ОписаниеКонтрагента.Контрагент     = ВыборкаДетальныеЗаписи.Контрагент;
		ОписаниеКонтрагента.ВидКонтрагента = ВыборкаДетальныеЗаписи.ВидКонтрагента;
		ОписаниеКонтрагента.ИНН            = СокрЛП(ВыборкаДетальныеЗаписи.ИНН);
		ОписанияКонтрагентов.Добавить(ОписаниеКонтрагента);
		
		Если ОписанияКонтрагентов.Количество() >= 1000 Тогда
			РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
				КонтрагентОбластьДанных,
				ОписанияКонтрагентов);
			Если Не ЗначениеЗаполнено(РезультатВызоваВебСервиса.ВидОшибки) Тогда
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда
		Если ОписанияКонтрагентов.Количество() > 0 Тогда
			РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
				КонтрагентОбластьДанных,
				ОписанияКонтрагентов);
		КонецЕсли;
	Иначе
		ЗаполнитьОписаниеОшибкиФормированияОтчета(
			ДокументРезультат,
			РезультатВызоваВебСервиса.ВидОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_КонтрагентБИПОбъект

// Процедура-обработчик события перед записью элемента справочника определяемого типа КонтрагентыБИП.
// Определяет разные параметры:
//  - что записывается новый контрагент;
//  - реквизиты контрагента ДО записи (ФизЛицо / ЮрЛицо, ИНН);
// и передает эту информацию дальше, в подписку на событие "ПриЗаписи".
//
// Параметры:
//  КонтрагентОбъект - ОпределяемыеТипы.КонтрагентБИПОбъект - записываемый объект.
//
Процедура КонтрагентБИПОбъектПередЗаписьюОбработчик(КонтрагентОбъект, Отказ) Экспорт

	// Если происходит загрузка данных, то выйти из обработчика.
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ИнтернетПоддержкаПользователей.ЭтоИдентификаторОбъектаМетаданных(КонтрагентОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если Отказ Или КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	ДополнительныеСвойства = КонтрагентОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", КонтрагентОбъект.ЭтоНовый());

	// Определение прежних значений свойств контрагента.
	Если Не ДополнительныеСвойства.ЭтоНовыйОбъект
		И Не ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагентаПередИзменением") Тогда
		// Если свойства не переданы из формы элемента, тогда
		// получить их из информационной базы.
		ЗначенияРеквизитов = ЗначенияРеквизитовКонтрагентов(КонтрагентОбъект.Ссылка);
		Если ЗначенияРеквизитов.Количество() > 0 Тогда
			ДополнительныеСвойства.Вставить("СПАРКРискиСвойстваКонтрагентаПередИзменением", ЗначенияРеквизитов[0]);
		Иначе
			// Контрагент не подлежит проверке.
			СвойстваКонтрагента = СПАРКРискиКлиентСервер.НовыйСвойстваКонтрагента();
			ДополнительныеСвойства.Вставить("СПАРКРискиСвойстваКонтрагентаПередИзменением", СвойстваКонтрагента);
		КонецЕсли;
	КонецЕсли;

	// Определение текущих значений свойств контрагента.
	Если Не ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагента") Тогда
		// Если свойства контрагента не были переданы из формы, тогда
		// определить их при необходимости.
		СвойстваКонтрагента = СПАРКРискиКлиентСервер.СвойстваКонтрагентаВОбъекте(КонтрагентОбъект);
		ДополнительныеСвойства.Вставить("СПАРКРискиСвойстваКонтрагента", СвойстваКонтрагента);
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик события при записи элемента справочника определяемого типа КонтрагентыБИП.
//
// Параметры:
//  КонтрагентОбъект - ОпределяемыеТипы.КонтрагентБИПОбъект - записываемый объект.
//
Процедура КонтрагентБИПОбъектПриЗаписиОбработчик(КонтрагентОбъект, Отказ) Экспорт

	// Если происходит загрузка данных, то выйти из обработчика.
	Если КонтрагентОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ИнтернетПоддержкаПользователей.ЭтоИдентификаторОбъектаМетаданных(КонтрагентОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если Отказ Или КонтрагентОбъект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;

	// Запись в регистры сведений запрещена для роли "ЧтениеДанныхСПАРКРиски", поэтому писать будем в привилегированном режиме.
	УстановитьПривилегированныйРежим(Истина);

	ДополнительныеСвойства = КонтрагентОбъект.ДополнительныеСвойства;

	// Запись значений свойств в РС СвойстваКонтрагентовСПАРКРиски.
	Если ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагента") Тогда

		СвойстваКонтрагента = ДополнительныеСвойства.СПАРКРискиСвойстваКонтрагента;
		ЗаписатьСвойстваКонтрагента(КонтрагентОбъект.Ссылка, СвойстваКонтрагента);

		// Мониторинг событий.
		// Обработка события изменения свойств контрагента.
		СвойстваИзменены = Ложь;
		Если ДополнительныеСвойства.Свойство("СПАРКРискиСвойстваКонтрагентаПередИзменением") Тогда
			СвойстваКонтрагентаПередИзменением = ДополнительныеСвойства.СПАРКРискиСвойстваКонтрагентаПередИзменением;
			СвойстваИзменены = СвойстваКонтрагентаИзменены(
				СвойстваКонтрагентаПередИзменением,
				СвойстваКонтрагента);
		КонецЕсли;

		Если СвойстваИзменены Тогда
			СПАРКРискиМониторингСобытий.ПриИзмененииСвойствКонтрагента(КонтрагентОбъект.Ссылка, СвойстваКонтрагента);
			// Удалить кэш индексов, если изменились свойства контрагента.
			Запись = РегистрыСведений.ИндексыСПАРКРиски.СоздатьМенеджерЗаписи();
			Запись.Контрагент = КонтрагентОбъект.Ссылка;
			Запись.Удалить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьСвойстваКонтрагента(Контрагент, СвойстваКонтрагента)

	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	Если СвойстваКонтрагента.ПодлежитПроверке Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.Контрагент       = Контрагент;
		Запись.ИНН              = СвойстваКонтрагента.ИНН;
		Запись.СвояОрганизация  = СвойстваКонтрагента.СвояОрганизация;
		Запись.ВидКонтрагента   = СвойстваКонтрагента.ВидКонтрагента;
	КонецЕсли;
	НаборЗаписей.Записать();

КонецПроцедуры

Функция СвойстваКонтрагентаИзменены(ПрежниеЗначения, НовыеЗначения)

	Если Не ПрежниеЗначения.ПодлежитПроверке И Не НовыеЗначения.ПодлежитПроверке Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат (ПрежниеЗначения.ПодлежитПроверке <> НовыеЗначения.ПодлежитПроверке
		Или ПрежниеЗначения.ИНН <> НовыеЗначения.ИНН
		Или ПрежниеЗначения.ВидКонтрагента <> НовыеЗначения.ВидКонтрагента);

КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Регламентное задание ОбновлениеИндексовСПАРКРиски.
//
Процедура ОбновлениеИндексовСПАРКРиски() Экспорт

	// Регламентные задания блокируются на время служебных операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеИндексовСПАРКРиски);
	
	Если Не ИспользованиеСПАРКРискиВключено() Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Проверка надежности контрагентов в сервисе 1СПАРК Риски отключена.
				|Задание не выполнено.'"));
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущаяДатаСеансаДляПроверки = ТекущаяДатаСеанса();
	
	// Если база работает в монопольном режиме (например, запущено фоновое задание,
	// которое включило монопольный режим и выгружает данные из области данных для 
	// последующей загрузки в модели сервиса),то будут ошибки при всех попытках записи
	//  данных в базу. Поэтому в монопольном режиме не следует выполнять никаких
	// обновлений в подсистеме СПАРКРиски.
	Если Не МонопольныйРежим() Тогда
		
		// 1. Загрузка индексов СПАРК.
		Если РасписанияРегламентныхЗаданий.ТребуетсяВыполнение(ИдентификаторОперацииЗагрузкаИндексов()) Тогда
			
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				
				// Для ИБ в модели сервиса необходимо загрузить данные по каждой области данных.
				// По каждой области данных индексы загружаются со своими данными аутентификации.
				// Области данных со статусом <> Перечисление.СтатусыОбластейДанных.Используется НЕ обрабатываются.
				// Определим список контрагентов, по которым есть кэш - их и надо обновить.
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	РегСвойства.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
					|	РегСвойства.Контрагент                         КАК Контрагент,
					|	РегСвойства.ИНН                                КАК ИНН,
					|	РегСвойства.ВидКонтрагента                     КАК ВидКонтрагента
					|ИЗ
					|	РегистрСведений.ИндексыСПАРКРиски КАК РегИндексы
					|
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
					|	ПО
					|		(ОбластиДанных.ОбластьДанныхВспомогательныеДанные = РегИндексы.ОбластьДанныхВспомогательныеДанные)
					|		И (ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется))
					|
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК РегСвойства
					|	ПО
					|		РегИндексы.ОбластьДанныхВспомогательныеДанные = РегСвойства.ОбластьДанныхВспомогательныеДанные
					|		И РегИндексы.Контрагент = РегСвойства.Контрагент
					|ГДЕ
					|	РегСвойства.ИННКорректный = ИСТИНА // Основное условие
					|	И ( // Условия, что надо обновить
					|		РегИндексы.ИНН <> РегСвойства.ИНН
					|		ИЛИ РегИндексы.ДатаОбновления <= &СрокГодности
					|	)
					|УПОРЯДОЧИТЬ ПО
					|	РегСвойства.ОбластьДанныхВспомогательныеДанные,
					|	РегСвойства.ИНН
					|";
				Запрос.УстановитьПараметр("СрокГодности", ТекущаяДатаСеансаДляПроверки - 12*60*60);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.СледующийПоЗначениюПоля("ОбластьДанных") Цикл
						// Если услуга не подключена, то продолжить со следующей области данных.
						// В этой области данных данные останутся просроченными и при получении индексов будет выдана ошибка.
						// В кэш ошибка записываться не будет.
						УслугаПодключена = ИнтернетПоддержкаПользователей.УслугаПодключена(
							СПАРКРискиКлиентСервер.ИдентификаторУслугиИндикаторыРиска(),
							Выборка.ОбластьДанных);
						Если УслугаПодключена <> Истина Тогда
							Продолжить;
						КонецЕсли;
						ВсегоКонтрагентовПоОбластиДанных = 0;
						МассивОписанийКонтрагентов = Новый Массив;
						Пока Выборка.СледующийПоЗначениюПоля("ИНН") Цикл
							ОписаниеКонтрагента = НовыйОписаниеКонтрагента();
							ОписаниеКонтрагента.ОбластьДанных  = Выборка.ОбластьДанных;
							ОписаниеКонтрагента.Контрагент     = Выборка.Контрагент;
							ОписаниеКонтрагента.ИНН            = СокрЛП(Выборка.ИНН);
							ОписаниеКонтрагента.ВидКонтрагента = Выборка.ВидКонтрагента;
							МассивОписанийКонтрагентов.Добавить(ОписаниеКонтрагента);
							ВсегоКонтрагентовПоОбластиДанных = ВсегоКонтрагентовПоОбластиДанных + 1;
							Если МассивОписанийКонтрагентов.Количество() >= 1000 Тогда
								РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
									Выборка.ОбластьДанных,
									МассивОписанийКонтрагентов);
								МассивОписанийКонтрагентов = Новый Массив;
								// Если в процессе загрузки индексов возникали ошибки (ошибки соединения, ошибки подключения и т.п.),
								//  то пропустить загрузку данных по этой области.
								Если НЕ РезультатВызоваВебСервиса.ВидОшибки.Пустая() Тогда
									// Ошибка будет зафиксирована в КонтекстВыполненияПоШагамВложенный.
									// Прервать цикл по ИНН, продолжить цикл по областям.
									Прервать;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Если МассивОписанийКонтрагентов.Количество() > 0 Тогда
							РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
								Выборка.ОбластьДанных,
								МассивОписанийКонтрагентов);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

			Иначе
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
					|ВЫБРАТЬ
					|	-1                         КАК ОбластьДанных,
					|	РегСвойства.Контрагент     КАК Контрагент,
					|	РегСвойства.ИНН            КАК ИНН,
					|	РегСвойства.ВидКонтрагента КАК ВидКонтрагента
					|ИЗ
					|	РегистрСведений.ИндексыСПАРКРиски КАК РегИндексы
					|
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК РегСвойства
					|	ПО
					|		РегИндексы.Контрагент = РегСвойства.Контрагент
					|ГДЕ
					|	РегСвойства.ИННКорректный = ИСТИНА // Основное условие
					|	И ( // Условия, что надо обновить
					|		РегИндексы.ИНН <> РегСвойства.ИНН
					|		ИЛИ РегИндексы.ДатаОбновления <= &СрокГодности
					|	)
					|УПОРЯДОЧИТЬ ПО
					|	РегСвойства.ИНН
					|";
				Запрос.УстановитьПараметр("СрокГодности", ТекущаяДатаСеансаДляПроверки - 12*60*60);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					МассивОписанийКонтрагентов = Новый Массив;
					Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
					Пока Выборка.Следующий() Цикл
						ОписаниеКонтрагента = НовыйОписаниеКонтрагента();
						ОписаниеКонтрагента.ОбластьДанных  = Выборка.ОбластьДанных;
						ОписаниеКонтрагента.Контрагент     = Выборка.Контрагент;
						ОписаниеКонтрагента.ИНН            = СокрЛП(Выборка.ИНН);
						ОписаниеКонтрагента.ВидКонтрагента = Выборка.ВидКонтрагента;
						МассивОписанийКонтрагентов.Добавить(ОписаниеКонтрагента);
						Если МассивОписанийКонтрагентов.Количество() >= 1000 Тогда
							РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
								Выборка.ОбластьДанных,
								МассивОписанийКонтрагентов);
							МассивОписанийКонтрагентов = Новый Массив;
						КонецЕсли;
					КонецЦикла;
					Если МассивОписанийКонтрагентов.Количество() > 0 Тогда
						РезультатВызоваВебСервиса = СервисСПАРКРиски.ЗагрузитьИндексыКонтрагентов(
							Выборка.ОбластьДанных,
							МассивОписанийКонтрагентов);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			РасписанияРегламентныхЗаданий.ОперацияВыполнена(
				ИдентификаторОперацииЗагрузкаИндексов());
			
		КонецЕсли;
		
		// 2. Постановка контрагентов на мониторинг в сервисе 1СПАРК Риски.
		Если РасписанияРегламентныхЗаданий.ТребуетсяВыполнение(ИдентификаторОперацииПостановкаНаМониторинг()) Тогда
			СПАРКРискиМониторингСобытий.ПоставитьКонтрагентовНаМониторингЗаданиеНеразделенное();
			РасписанияРегламентныхЗаданий.ОперацияВыполнена(
				ИдентификаторОперацииПостановкаНаМониторинг());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Регламентное задание ЗаполнениеКонтрагентовНаМониторингеСПАРКРиски.
//
Процедура ЗаполнениеКонтрагентовНаМониторингеСПАРКРиски() Экспорт

	// Регламентные задания блокируются на время служебных операций с информационной базой.
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ЗаполнениеКонтрагентовНаМониторингеСПАРКРиски);

	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;

	Если Не ИспользованиеСПАРКРискиВключено() Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Проверка надежности контрагентов в сервисе 1СПАРК Риски отключена.
				|Задание не выполнено.'"));
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не МонопольныйРежим()
		И РасписанияРегламентныхЗаданий.ТребуетсяВыполнение(ИдентификаторОперацииЗаполнениеКонтрагентовНаМониторинге()) Тогда
		СПАРКРискиМониторингСобытий.ЗаполнитьИПоставитьКонтрагентовНаМониторингЗадание();
		РасписанияРегламентныхЗаданий.ОперацияВыполнена(
			ИдентификаторОперацииЗаполнениеКонтрагентовНаМониторинге());
	КонецЕсли;
	
КонецПроцедуры

// Регламентное задание ПроверкаГотовностиСправкиСПАРКРиски.
//
Процедура ПроверитьГотовностьСправкиСПАРКРиски(СправкаСПАРКРиски) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ПроверкаГотовностиСправкиСПАРКРиски);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправкиСПАРКРиски.Состояние КАК Состояние,
	|	СправкиСПАРКРиски.Идентификатор КАК Идентификатор,
	|	СправкиСПАРКРиски.ВидКонтрагента КАК ВидКонтрагента
	|ИЗ
	|	Документ.СправкиСПАРКРиски КАК СправкиСПАРКРиски
	|ГДЕ
	|	СправкиСПАРКРиски.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СправкаСПАРКРиски);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияСправки = Перечисления.СостоянияСправкиСПАРКРиски;
	// Проверка включения использования функциональности 1СПАРК Риски в конфигурации.
	Если Не ИспользованиеСПАРКРискиВключено() Тогда
		УстановитьСостояниеСправки(СправкаСПАРКРиски, СостоянияСправки.НеУдалосьПроверитьСостояниеСправки);
		ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Проверка надежности контрагентов в сервисе 1СПАРК Риски отключена.
					|Задание проверки готовности справки отменено.
					|Идентификатор справки %1'"),
					Строка(Выборка.Идентификатор)));
		Возврат;
	КонецЕсли;
	
	Если Выборка.Состояние <> СостоянияСправки.Готовится Тогда
		// Если состояние справки уже проверено, тогда отменить задание.
		ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
		Возврат;
	КонецЕсли;
	
	// Вид контрагента может быть не заполнен, если не завершено
	// обновление информационной базы.
	ВидКонтрагента = ОбработатьВидКонтрагента(
		Выборка.ВидКонтрагента);

	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Выборка.Идентификатор);
	
	Если ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо Тогда
		РезультатВызоваОперации = СервисСПАРКРиски.СостояниеПодготовкиСправокЮридическихЛиц(
			Идентификаторы);
	Иначе
		РезультатВызоваОперации = СервисСПАРКРиски.СостояниеПодготовкиСправокИндивидуальныхПредпринимателей(
			Идентификаторы);
	КонецЕсли;
	
	Если Не РезультатВызоваОперации.ВидОшибки.Пустая() Тогда
		// При ошибке подключения к сервису необходимо отменить регламентное задание,
		// при этом для справки устанавливается состояние "НеУдалосьПроверитьСостояниеСправки"
		// для оповещения пользователя.
		// Далее пользователь проверяет состояние справки вручную.
		УстановитьСостояниеСправки(СправкаСПАРКРиски, СостоянияСправки.НеУдалосьПроверитьСостояниеСправки);
		ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
		Возврат;
	КонецЕсли;
	
	Состояние = РезультатВызоваОперации.СостояниеСправок[Выборка.Идентификатор];
	Если Состояние = СостоянияСправки.Готовится Тогда
		// Переход на следующую итерацию регламентного задания.
		Возврат;
	КонецЕсли;
	
	Если Состояние = Неопределено Тогда
		Состояние = СостоянияСправки.ОшибкаПодготовки;
	КонецЕсли;
	
	УстановитьСостояниеСправки(СправкаСПАРКРиски, Состояние);
	ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Выборка.Идентификатор);
	
КонецПроцедуры

// Отменяет регламентное задание ПроверкаГотовностиСправкиСПАРКРиски.
//
Процедура ОтменитьЗаданиеПроверкиГотовностиСправкиСПАРКРиски(Ключ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("Ключ", Строка(Ключ));
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	ТипЗадания = ТипЗнч(Задания);
	Если ТипЗадания = Тип("Массив") Тогда
		Если Задания.Количество() > 0 Тогда
			РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].УникальныйИдентификатор);
		КонецЕсли;
	ИначеЕсли ТипЗадания = Тип("ТаблицаЗначений") Тогда
		Если Задания.Количество() > 0 Тогда
			Если Задания.Колонки.Найти("УникальныйИдентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].УникальныйИдентификатор);
			ИначеЕсли Задания.Колонки.Найти("Идентификатор") <> Неопределено Тогда
				РегламентныеЗаданияСервер.УдалитьЗадание(Задания[0].Идентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Вызывается при начальном заполнении общих данных информационной базы.
//
Процедура ОбщиеДанныеНачальноеЗаполнениеДанныхСПАРКРиски() Экспорт
	
	ОбновлениеИнформационнойБазыВключитьИспользованиеСервиса1СПАРКРиски();
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации, в которую внедрена
// подсистема СПАРКРиски. Выполняет начальное заполнение данных в
// объектах метаданных подсистемы.
//
Процедура НачальноеЗаполнениеДанныхСПАРКРиски() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяСвойстваСПАРКРиски = "СПАРКРиски.НачальноеЗаполнениеДанныхВыполнено";
	Если ЗначениеСвойстваСПАРК(ИмяСвойстваСПАРКРиски) = Истина Тогда
		// Начальное заполнение данных уже выполнено.
		Возврат;
	КонецЕсли;
	
	ЗаполнениеДанныхСПАРКРискиЮридическихЛиц();
	ЗаполнениеДанныхСПАРКРискиИндивидуальныхПредпринимателей();
	
	// Сохранить результат заполнения данных.
	УстановитьЗначениеСвойстваСПАРК(ИмяСвойстваСПАРКРиски, Истина);
	
КонецПроцедуры

// Вызывается при переходе на версию 2.1.7.10
//
Процедура ПерейтиНаВерсию_2_1_7_10() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе на версию 2.1.7.11
//
Процедура ПерейтиНаВерсию_2_1_7_11() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ОтборЗаданий = Новый Структура;
		ОтборЗаданий.Вставить("Метаданные",
			Метаданные.РегламентныеЗадания.ЗаполнениеКонтрагентовНаМониторингеСПАРКРиски);
		ОтборЗаданий.Вставить("Предопределенное", Истина);
		Задания = РегламентныеЗаданияСервер.НайтиЗадания(ОтборЗаданий);
		Если ТипЗнч(Задания) = Тип("Массив") Тогда
			ИдентификаторЗадания = Задания[0].УникальныйИдентификатор;
			РасписаниеЗадания = Новый РасписаниеРегламентногоЗадания;
			РасписаниеЗадания.ПериодПовтораДней        = 1;
			РасписаниеЗадания.ПериодПовтораВТечениеДня = 43200; // Каждые 12 часов.
			РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(
				ИдентификаторЗадания,
				РасписаниеЗадания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе на версию 2.1.8.15
//
Процедура ОбщиеДанныеПерейтиНаВерсию_2_1_8_15() Экспорт
	
	ОбновлениеИнформационнойБазыВключитьИспользованиеСервиса1СПАРКРиски();
	
КонецПроцедуры

// Очищает в области данных результаты постановки контрагентов на мониторинг
// в связи со сменой модели аутентификации в сервисе 1СПАРК Риски в релизе 2.1.9.
Процедура ОбновлениеИнформационнойБазы_ОчиститьРезультатыПостановкиНаМониторинг_2_1_9_2() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Очистка результатов постановки на мониторинг в области данных при переходе на версию 2.1.9.2.'"));
	СПАРКРискиМониторингСобытий.ОчиститьРезультатыПостановкиНаМониторинг();
	
КонецПроцедуры

// Заполняет новые реквизиты регистра сведений "ИндексыСПАРКРиски".
//
Процедура ЗаполнитьНовыеРесурсыИндексыСПАРКРиски(Параметры) Экспорт
	
	// Дозаписываем информацию о статусе в регистр в локальном режиме,
	// либо в модели сервиса в отложенном обновлении из областей данных.
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало заполнения ресурсов регистра сведений ИндексыСПАРКРиски.'"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Для записей у которых заполнен тип события СПАРК Риски будет заполнена информация
	// о статусе, у всех остальных статус останется пустой. Будут обновлен только актуальный
	// кэш, т.к. при очередной загрузке данных из сервиса информация о статусах будет заполнена.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	*
		|ИЗ
		|	РегистрСведений.ИндексыСПАРКРиски КАК ИндексыСПАРКРиски
		|ГДЕ
		|	ИндексыСПАРКРиски.УдалитьИдентификаторТипаСобытия <> """"
		|	И ИндексыСПАРКРиски.Статус = ЗНАЧЕНИЕ(Справочник.ТипыСобытийСПАРКРиски.ПустаяСсылка)
		|	И НЕ ИндексыСПАРКРиски.УдалитьИдентификаторТипаСобытия В (&ИдентификаторыИсключения)
		|	И ИндексыСПАРКРиски.ДатаОбновления >= &ДатаАктуальности";
	
	ВсеОбработано            = Ложь;
	ИдентификаторыИсключения = Новый Массив;
	ДатаАктуальности         = ТекущаяДатаСеанса() - 12*60*60; // Данные за прошедшие 12 часов считаются актуальными.
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("ИдентификаторыИсключения", ИдентификаторыИсключения);
		Запрос.УстановитьПараметр("ДатаАктуальности",         ДатаАктуальности);
		РезультатЗапроса = Запрос.Выполнить();
		ВсеОбработано = РезультатЗапроса.Пустой();
		
		Если ВсеОбработано Тогда
			Прервать;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеСтатуса = ДанныеТипаСобытияПоИдентификатору(ВыборкаДетальныеЗаписи.УдалитьИдентификаторТипаСобытия);
			Если ЗначениеЗаполнено(ДанныеСтатуса.Ссылка) Тогда
				НаборЗаписей = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Контрагент.Установить(ВыборкаДетальныеЗаписи.Контрагент);
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
				Запись.ОтображатьСтатус = Истина;
				Запись.Статус           = ДанныеСтатуса.Ссылка;
				Запись.СтатусНазвание   = ДанныеСтатуса.Название;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				// Защита от зацикливания.
				ИдентификаторыИсключения.Добавить(ВыборкаДетальныеЗаписи.УдалитьИдентификаторТипаСобытия);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено заполнение ресурсов регистра сведений ИндексыСПАРКРиски.'"));
	
КонецПроцедуры

// Включает использование сервиса 1СПАРК Риски по умолчанию.
Процедура ОбновлениеИнформационнойБазыВключитьИспользованиеСервиса1СПАРКРиски()
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьСервисСПАРКРиски.Установить(Истина);
	
КонецПроцедуры

// Актуализирует описание типов событий 1СПАРК Риски.
//
Процедура ОбновлениеИнформационнойБазы_АктуализироватьОписаниеТиповСобытий() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторТипаСобытия1 = Новый УникальныйИдентификатор("84b84686-44fd-4ea8-b084-1ec1208a139d");
	НаименованиеТипаСобытия1  = НСтр("ru = 'Отменено дело о банкротстве'");
	ИдентификаторТипаСобытия2 = Новый УникальныйИдентификатор("8711ce88-2ee1-41ce-8887-e6ff60794e35");
	НаименованиеТипаСобытия2  = НСтр("ru = 'Прекращено дело о банкротстве'");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТипыСобытийСПАРКРиски.Ссылка КАК Ссылка,
	|	&Название1 КАК НовоеНазвание
	|ИЗ
	|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
	|ГДЕ
	|	ТипыСобытийСПАРКРиски.Идентификатор = &Идентификатор1
	|	И ТипыСобытийСПАРКРиски.Название <> &Название1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТипыСобытийСПАРКРиски.Ссылка,
	|	&Название2
	|ИЗ
	|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
	|ГДЕ
	|	ТипыСобытийСПАРКРиски.Идентификатор = &Идентификатор2
	|	И ТипыСобытийСПАРКРиски.Название <> &Название2");
	
	Запрос.УстановитьПараметр("Идентификатор1", ИдентификаторТипаСобытия1);
	Запрос.УстановитьПараметр("Название1"     , НаименованиеТипаСобытия1);
	Запрос.УстановитьПараметр("Идентификатор2", ИдентификаторТипаСобытия2);
	Запрос.УстановитьПараметр("Название2"     , НаименованиеТипаСобытия2);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТипСобытияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТипСобытияОбъект.Название = Выборка.НовоеНазвание;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ТипСобытияОбъект); // АПК:1036 АПК:1327 конфликт маловероятен
	КонецЦикла;
	
КонецПроцедуры

// Заполняет информацию о видах контрагентах в объектах подсистемы.
//
Процедура ЗаполнитьДанныеИндивидуальныхПредпринимателей(Параметры) Экспорт
	
	// Дозаписываем информацию о статусе в регистр в локальном режиме,
	// либо в модели сервиса в отложенном обновлении из областей данных.
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало заполнения данных ИП в подсистеме.'"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьВидКонтрагента();
	ЗаполнениеДанныхСПАРКРискиИндивидуальныхПредпринимателей();
	Константы.ДатаОбновленияСобытийСПАРКРиски.Установить(Неопределено);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Завершено заполнение ИП в подсистеме.'"));
	
КонецПроцедуры

// Заполняет новые поля типов событий мониторинга.
//
Процедура ЗаполнитьНовыеПоляТиповСобытий(Параметры) Экспорт
	
	// Дозаписываем информацию о статусе в регистр в локальном режиме,
	// либо в модели сервиса в отложенном обновлении из областей данных.
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru = 'Начало обновления данных типов событий.'"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТипыСобытийСПАРКРиски.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Обновлять нечего, обработчик можно отметить
	// как выполненный.
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Обновление устаревших данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТипыСобытийСПАРКРиски.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
		|ГДЕ
		|	ТипыСобытийСПАРКРиски.Идентификатор В (&Идентификаторы)
		|	И ТипыСобытийСПАРКРиски.Критичное";
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить(Новый УникальныйИдентификатор("299c76e1-8555-4520-af0c-911bc4bf1560"));
	Идентификаторы.Добавить(Новый УникальныйИдентификатор("05b14f88-3832-406c-b789-86e1527aceff"));
	
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТипыСобытияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ТипыСобытияОбъект.Заблокировать();
		ТипыСобытияОбъект.Критичное = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТипыСобытияОбъект);
	КонецЦикла;
	
	// В случае ошибки не будет исключения, т.к. при необходимости
	// пользователь может отметить самостоятельно исполнительные
	// производства.
	РезультатВызова = СервисСПАРКРиски.ТипыСобытийСообщенийМониторинга();
	Если Не РезультатВызова.ВидОшибки.Пустая() Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Не удалось обновить типы событий.'") + Символы.ПС
				+ РезультатВызова.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	СПАРКРискиМониторингСобытий.ОбновитьДанныеТиповСобытий(
		РезультатВызова,
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанныхПодсистемы

// Заполнение начальных данных по юридическим лицам.
//
Процедура ЗаполнениеДанныхСПАРКРискиЮридическихЛиц()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗапросСвойствКонтрагентов"              , Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКонтрагентовНаМониторинге"     , Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьИндексыКонтрагентов"           , Ложь);
	ПараметрыЗаполнения.Вставить("ЗапросКонтрагентовДляЗаполненияИндексов", "");
	
	ИнтеграцияПодсистемБИП.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц(
		ПараметрыЗаполнения);
	
	СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц(
		ПараметрыЗаполнения);
	
	НаборСвойстваКонтрагентов = Неопределено;
	Если ПараметрыЗаполнения.ЗапросСвойствКонтрагентов = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнена реализация переопределяемого метода
			|СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиЮридическихЛиц().
			|Не определено значение поля ПараметрыЗаполнения.ЗапросСвойствКонтрагентов.'");
		
	ИначеЕсли Не ПустаяСтрока(ПараметрыЗаполнения.ЗапросСвойствКонтрагентов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПараметрыЗаполнения.ЗапросСвойствКонтрагентов;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			НаборСвойстваКонтрагентов = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьНаборЗаписей();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = НаборСвойстваКонтрагентов.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо;
			КонецЦикла;
			НаборСвойстваКонтрагентов.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьКонтрагентовНаМониторинге Тогда
		ЗаполнитьКонтрагентовНаМониторинге();
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексыКонтрагентов Тогда
		
		Если ПустаяСтрока(ПараметрыЗаполнения.ЗапросКонтрагентовДляЗаполненияИндексов) Тогда
			
			// Заполнение по всем контрагентам.
			НаборЗаписейИндексы = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
			Если Не ПустаяСтрока(ПараметрыЗаполнения.ЗапросСвойствКонтрагентов) Тогда
				
				Если НаборСвойстваКонтрагентов <> Неопределено Тогда
					Для Каждого ЗаписьСвойства Из НаборСвойстваКонтрагентов Цикл
						Запись = НаборЗаписейИндексы.Добавить();
						Запись.Контрагент                    = ЗаписьСвойства.Контрагент;
						Запись.ИндексДолжнойОсмотрительности = -1;
						Запись.ИндексПлатежнойДисциплины     = -1;
						Запись.ИндексФинансовогоРиска        = -1;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = ПараметрыЗаполнения.ЗапросКонтрагентовДляЗаполненияИндексов;
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				НаборЗаписейИндексы = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Запись = НаборЗаписейИндексы.Добавить();
					Запись.Контрагент                    = Выборка.Контрагент;
					Запись.ИндексДолжнойОсмотрительности = -1;
					Запись.ИндексПлатежнойДисциплины     = -1;
					Запись.ИндексФинансовогоРиска        = -1;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НаборЗаписейИндексы <> Неопределено Тогда
			НаборЗаписейИндексы.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение начальных данных по индивидуальным предпринимателям.
//
Процедура ЗаполнениеДанныхСПАРКРискиИндивидуальныхПредпринимателей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗапросСвойствКонтрагентов"              , Неопределено);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКонтрагентовНаМониторинге"     , Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьИндексыКонтрагентов"           , Ложь);
	ПараметрыЗаполнения.Вставить("ЗапросКонтрагентовДляЗаполненияИндексов", "");
	
	ИнтеграцияПодсистемБИП.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей (
		ПараметрыЗаполнения);
	
	СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей (
		ПараметрыЗаполнения);
	
	НаборСвойстваКонтрагентов = Неопределено;
	Если ПараметрыЗаполнения.ЗапросСвойствКонтрагентов = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'Не заполнена реализация переопределяемого метода
			|СПАРКРискиПереопределяемый.ПараметрыНачальногоЗаполненияДанных1СПАРКРискиИндивидуальныхПредпринимателей().
			|Не определено значение поля ПараметрыЗаполнения.ЗапросСвойствКонтрагентов.'");
		
	ИначеЕсли Не ПустаяСтрока(ПараметрыЗаполнения.ЗапросСвойствКонтрагентов) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПараметрыЗаполнения.ЗапросСвойствКонтрагентов;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ИндивидуальныйПредприниматель;
				Запись.Записать();
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьКонтрагентовНаМониторинге Тогда
		ЗаполнитьКонтрагентовНаМониторинге();
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ЗаполнитьИндексыКонтрагентов Тогда
		
		НаборЗаписейИндексы = Неопределено;
		Если ПустаяСтрока(ПараметрыЗаполнения.ЗапросКонтрагентовДляЗаполненияИндексов) Тогда
			
			// Заполнение по всем контрагентам.
			НаборЗаписейИндексы = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
			Если Не ПустаяСтрока(ПараметрыЗаполнения.ЗапросСвойствКонтрагентов) Тогда
				
				Если НаборСвойстваКонтрагентов <> Неопределено Тогда
					Для Каждого ЗаписьСвойства Из НаборСвойстваКонтрагентов Цикл
						Запись = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьМенеджерЗаписи();
						Запись.Контрагент                    = ЗаписьСвойства.Контрагент;
						Запись.ИндексДолжнойОсмотрительности = -1;
						Запись.ИндексПлатежнойДисциплины     = -1;
						Запись.ИндексФинансовогоРиска        = -1;
						Запись.Записать();
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = ПараметрыЗаполнения.ЗапросКонтрагентовДляЗаполненияИндексов;
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				
				НаборЗаписейИндексы = РегистрыСведений.ИндексыСПАРКРиски.СоздатьНаборЗаписей();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Запись = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьМенеджерЗаписи();
					Запись.Контрагент                    = Выборка.Контрагент;
					Запись.ИндексДолжнойОсмотрительности = -1;
					Запись.ИндексПлатежнойДисциплины     = -1;
					Запись.ИндексФинансовогоРиска        = -1;
					Запись.Записать();
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение начальных данных вида контрагента.
//
Процедура ЗаполнитьВидКонтрагента()
	
	// Блокировки устанавливать нет необходимости, т.к. все данные
	// в регистре с не заполненным полем ВидКонтрагента относятся
	// к юридическим лицам.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СвойстваКонтрагентовСПАРКРиски.Контрагент КАК Контрагент,
		|	СвойстваКонтрагентовСПАРКРиски.ИНН КАК ИНН,
		|	СвойстваКонтрагентовСПАРКРиски.ИННКорректный КАК ИННКорректный,
		|	СвойстваКонтрагентовСПАРКРиски.СвояОрганизация КАК СвояОрганизация
		|ИЗ
		|	РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
		|ГДЕ
		|	СвойстваКонтрагентовСПАРКРиски.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентовСПАРКРиски.ПустаяСсылка)";
	
	Пока Истина Цикл
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = РегистрыСведений.СвойстваКонтрагентовСПАРКРиски.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
			Запись.ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо;
			Запись.Записать(); // АПК:1327 Конкурентная работа маловероятна.
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	СправкиСПАРКРиски.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СправкиСПАРКРиски КАК СправкиСПАРКРиски
		|ГДЕ
		|	СправкиСПАРКРиски.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентовСПАРКРиски.ПустаяСсылка)";
	
	Пока Истина Цикл
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Прервать;
		КонецЕсли;
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбъектСправка = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектСправка.Заблокировать();
			ОбъектСправка.ВидКонтрагента = Перечисления.ВидыКонтрагентовСПАРКРиски.ЮридическоеЛицо;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектСправка);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Тарификация

Функция ИдентификаторУслугиМониторингКомпаний() Экспорт
	
	Возврат "1c-spark-risks-events";
	
КонецФункции

Функция ИдентификаторУслугиСправкиПоКомпаниям() Экспорт
	
	Возврат "1c-spark-risks-reports";
	
КонецФункции

#КонецОбласти

#Область РасписанияРегламентныхЗаданий

// Определяет идентификатор операции загрузки индексов СПАРК Риски.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииЗагрузкаИндексов()
	
	Возврат "ЗагрузкаИндексовСПАРКРиски";
	
КонецФункции

// Определяет идентификатор операции загрузки событий мониторинга СПАРК Риски.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииЗаполнениеКонтрагентовНаМониторинге()
	
	Возврат "ЗаполнениеКонтрагентовНаМониторингеСПАРКРиски";
	
КонецФункции

// Определяет идентификатор операции постановки на мониторинг СПАРК Риски.
//
// Возвращаемое значение:
//  Строка - идентификатор операции.
//
Функция ИдентификаторОперацииПостановкаНаМониторинг()
	
	Возврат "ПостановкаНаМониторингСПАРКРиски";
	
КонецФункции

#КонецОбласти

#Область ОтчетыПодсистемы

// Формирует описание ошибки формирования отчета.
//
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - документ для заполнения;
//  ВидОшибки - ПеречислениеСсылка.ВидыОшибокСПАРКРиски - ошибка формирования отчета.
//
Процедура ЗаполнитьОписаниеОшибкиФормированияОтчета(ДокументРезультат, ВидОшибки) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОшибкиОтчетовСПАРКРиски");
	Если ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИнтернетПоддержкаНеПодключена Тогда
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ИмяОбласти = "ИППНеПодключена";
		Иначе
			ИмяОбласти = "ИППНеПодключенаОбычныйПользователь";
		КонецЕсли;
	ИначеЕсли ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ТребуетсяОплатаИлиПревышенЛимит Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПодключениеСервисовСопровождения") Тогда
		
			Идентификатор = СПАРКРискиКлиентСервер.ИдентификаторСервиса();
			Идентификаторы = Новый Массив;
			Идентификаторы.Добавить(Идентификатор);
			
			МодульПодключениеСервисовСопровождения = ОбщегоНазначения.ОбщийМодуль("ПодключениеСервисовСопровождения");
			РезультатПроверки  = МодульПодключениеСервисовСопровождения.ДоступноПодключениеТестовогоПериода(Идентификаторы);
			ДоступностьСервиса = РезультатПроверки.СервисыСопровождения.Получить(Идентификатор);
			
			// Обработка подключения тестового периода.
			Если РезультатПроверки.Ошибка Тогда
				Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
					ИмяОбласти = "ОшибкаПроверкиТестовыхПериодов";
				Иначе
					ИмяОбласти = "ОшибкаПроверкиТестовыхПериодовОбычныйПользователь";
				КонецЕсли;
			ИначеЕсли ДоступностьСервиса = "Подключение" Тогда
				ИмяОбласти = "ОбработкаЗапросаНаПодключение";
			ИначеЕсли ДоступностьСервиса = "Доступно" Тогда
				ИмяОбласти = "ПодключитьТестовыйПериод";
			Иначе
				Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
					Или ОбщегоНазначения.РазделениеВключено() Тогда
					ИмяОбласти = "СервисНеПодключенПодробнее";
				Иначе
					ИмяОбласти = "СервисНеПодключенКупитьСервис";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ИмяОбласти = "СервисНеПодключенКупитьСервис";
		КонецЕсли;
		
	ИначеЕсли ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ВнутренняяОшибкаСервиса Тогда
		ИмяОбласти = "СервисНедоступен";
	ИначеЕсли ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаПодключения Тогда
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ИмяОбласти = "ОшибкаПодключения";
		Иначе
			ИмяОбласти = "ОшибкаПодключенияОбычныйПользователь";
		КонецЕсли;
	ИначеЕсли ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ИспользованиеОтключено Тогда
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ИмяОбласти = "ИспользованиеСервисаОтключено";
		Иначе
			ИмяОбласти = "ИспользованиеСервисаОтключеноОбычныйПользователь";
		КонецЕсли;
	ИначеЕсли ВидОшибки = Перечисления.ВидыОшибокСПАРКРиски.ОшибкаАутентификации Тогда
		Если Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь) Тогда
			ИмяОбласти = "ОшибкаАутентификации";
		Иначе
			ИмяОбласти = "ОшибкаАутентификацииОбычныйПользователь";
		КонецЕсли;
	Иначе
		ИмяОбласти = "НеизвестнаяОшибка";
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	Если ИмяОбласти = "СервисНеПодключенПодробнее" Тогда
		Область.Параметры.АдресОписаниеСервисаСПАРК = СПАРКРискиКлиентСервер.АдресСтраницыОписанияСервисаСПАРКРиски();
	ИначеЕсли ИмяОбласти = "ПодключитьТестовыйПериод" Тогда
		Область.Параметры.ПодключитьТестовыйПериодСПАРК = "ПодключитьТестовыйПериодСПАРК";
		Область.Параметры.ПереходКПокупкеСервиса = "ПереходКПокупкеСервиса";
	ИначеЕсли ИмяОбласти = "СервисНеПодключенКупитьСервис" Тогда
		Область.Параметры.ПереходКПокупкеСервиса = "ПереходКПокупкеСервиса";
	ИначеЕсли ИмяОбласти = "ИППНеПодключена" Тогда
		Область.Параметры.ПодключитьИнтернетПоддержкуПользователей
			= "ПодключитьИнтернетПоддержкуПользователей";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Область);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
