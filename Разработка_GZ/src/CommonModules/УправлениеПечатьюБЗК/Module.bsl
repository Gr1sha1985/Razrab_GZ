#Область СлужебныйПрограммныйИнтерфейс

// Для методов служебного API использование не контролируем.
// АПК:581-выкл
// АПК:299-выкл

// Печатает макеты объекта метаданных.
//
// Параметры:
//   МассивОбъектов        - Массив         - Список печатаемых объектов.
//   ПараметрыПечати       - Структура      - Произвольные параметры, переданные при вызове команды печати.
//   КоллекцияПечатныхФорм - Массив         - Сформированные табличные документы и дополнительная информация.
//   ОбъектыПечати         - СписокЗначений - Соответствие между объектами и областями табличного документа.
//       Параметры "МассивОбъектов", "ПараметрыПечати", "КоллекцияПечатныхФорм" и "ОбъектыПечати"
//       передаются из процедуры Печать "как есть".
//       См. описание одноименных параметров в УправлениеПечатьюПереопределяемый.ПриПечати.
//   МенеджерПечати - Произвольный - Модуль менеджера объекта, выполняющего команду печати.
//       В модуле менеджера печати должна быть определена экспортная процедура по шаблону:
//           #Область ПрограммныйИнтерфейс
//           #Область ДляВызоваИзДругихПодсистем
//           // ЗарплатаКадрыПодсистемы
//           
//           // Формирует печатную форму. Вызывается из УправлениеПечатьюБЗК.Печать.
//           //
//           // Параметры:
//           //   КонтекстПечати - Структура - См. УправлениеПечатьюБЗК.КонтекстПечати.
//           //
//           Процедура ПриФормированииПечатнойФормы(КонтекстПечати) Экспорт
//           	
//           	
//           КонецПроцедуры
//           
//           // Конец ЗарплатаКадрыПодсистемы
//           #КонецОбласти
//           #КонецОбласти
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, МенеджерПечати) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерПечати));
	Для Каждого МетаданныеМакета Из ОбъектМетаданных.Макеты Цикл
		Если МетаданныеМакета.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТабличныйДокумент
			И УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, МетаданныеМакета.Имя) Тогда
			КонтекстПечати = КонтекстПечати(МетаданныеМакета, МассивОбъектов, ОбъектыПечати);
			МенеджерПечати.ПриФормированииПечатнойФормы(КонтекстПечати);
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				МетаданныеМакета.Имя,
				МетаданныеМакета.Представление(),
				КонтекстПечати.ТабличныйДокумент,
				,
				КонтекстПечати.ПолноеИмяМакета);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров печати.
//
// Параметры:
//   МетаданныеМакета  - ОбъектМетаданных: Макет - Метаданные макета печатной формы.
//   МассивОбъектов    - Массив                  - Список печатаемых объектов.
//   ОбъектыПечати     - СписокЗначений          - Соответствие между объектами и областями табличного документа.
//       Параметры "МассивОбъектов" и "ОбъектыПечати" передаются из процедуры Печать "как есть".
//       См. описание одноименных параметров в УправлениеПечатьюПереопределяемый.ПриПечати.
//   ТабличныйДокумент - ТабличныйДокумент       - Табличный документ для вывода печатной формы.
//       Если параметр "ТабличныйДокумент" не указан, то создается новый табличный документ с параметрами:
//       * ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
//       * АвтоМасштаб = Истина;
//       * КлючПараметровПечати = "ПараметрыПечати_<ИмяМакетаБезПрефикса>".
//
// Возвращаемое значение:
//   Структура - Контекст печати.
//       * МассивОбъектов    - Массив            - Соответствует параметру МассивОбъектов.
//       * ОбъектыПечати     - СписокЗначений    - Соответствует параметру ОбъектыПечати.
//       * ТабличныйДокумент - ТабличныйДокумент - Соответствует параметру ТабличныйДокумент.
//       * Макет             - ТабличныйДокумент - Макет печатной формы.
//       * ИменаПараметровОбластей - Структура   - См. УправлениеПечатьюБЗК.ИменаПараметровОбластейСтандартногоМакета.
//       * ПолноеИмяМакета  - Строка             - Полное имя макета печатной формы.
//       * МетаданныеМакета - ОбъектМетаданных: Макет - Метаданные макета печатной формы.
//
Функция КонтекстПечати(МетаданныеМакета, МассивОбъектов = Неопределено, ОбъектыПечати = Неопределено, ТабличныйДокумент = Неопределено) Экспорт
	ПолноеИмяМакета = МетаданныеМакета.Родитель().ПолноеИмя() + "." + МетаданныеМакета.Имя;
	Макет = УправлениеПечатью.МакетПечатнойФормы(ПолноеИмяМакета);
	ИменаПараметровОбластей = ИменаПараметровОбластейСтандартногоМакета(ПолноеИмяМакета);
	
	ОтсутствующиеОбласти = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаПараметровОбластей Цикл
		Если Макет.Области.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
			ОтсутствующиеОбласти.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Если ОтсутствующиеОбласти.Количество() > 0 Тогда
		ПолноеИмяКоманды = Метаданные.Обработки.ПанельАдминистрированияБСП.Команды.ПечатныеФормыОтчетыИОбработки.ПолноеИмя();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пользовательский макет формы ""%1"" не подходит к текущей версии программы.
				|При печати использован типовой макет. Рекомендуется актуализировать или удалить пользовательский макет.
				|
				|В пользовательском макете печати ""%1"" отсутствуют области: ""%3"".
				|
				|Для просмотра настроек макетов печати:
				|- Открыть панель администрирования <a href = ""%4"">""Печатные формы, отчеты и обработки""</a>;
				|- Нажать ""Макеты печатных форм"";
				|- В поле ""Найти"" ввести ""%1"" или ""%2"".
				|
				|Перед актуализацией (или удалением) рекомендуется сделать резервную копию пользовательского макета, например, сохранив его в файл в режиме редактирования (""Еще"" - ""Сохранить"").
				|При актуализации: удалить измененный макет (вернуться к стандартному макету) и точечно внести необходимые изменения (при этом можно копировать ячейки из резервной копии макета).'"),
			МетаданныеМакета.Представление(),
			МетаданныеМакета.Родитель().Представление(),
			СтрСоединить(ОтсутствующиеОбласти, """, """),
			"e1cib/command/" + ПолноеИмяКоманды);
		ЗарплатаКадрыОтображениеОшибок.СообщитьПользователю(ТекстОшибки, ИдентификаторПредупрежденияВШапкеПечатиДокументов());
		Макет = МакетПоПолномуПути(ПолноеИмяМакета);
	КонецЕсли;
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.АвтоМасштаб = Истина;
		ЧистоеИмяМакета = МетаданныеМакета.Имя;
		Если СтрНачинаетсяС(ЧистоеИмяМакета, "ПФ_") Тогда
			ЧистоеИмяМакета = Сред(ЧистоеИмяМакета, СтрДлина("ПФ_") + 1);
		КонецЕсли;
		Если СтрНачинаетсяС(ЧистоеИмяМакета, "MXL_") Тогда
			ЧистоеИмяМакета = Сред(ЧистоеИмяМакета, СтрДлина("MXL_") + 1);
		КонецЕсли;
		ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_" + ЧистоеИмяМакета;
	КонецЕсли;
	
	КонтекстПечати = Новый Структура;
	КонтекстПечати.Вставить("МассивОбъектов", МассивОбъектов);
	КонтекстПечати.Вставить("ОбъектыПечати", ОбъектыПечати);
	КонтекстПечати.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонтекстПечати.Вставить("ПолноеИмяМакета", ПолноеИмяМакета);
	КонтекстПечати.Вставить("Макет", Макет);
	КонтекстПечати.Вставить("МетаданныеМакета", МетаданныеМакета);
	КонтекстПечати.Вставить("ИменаПараметровОбластей", ИменаПараметровОбластей);
	
	Возврат КонтекстПечати;
КонецФункции

// Возвращает структуру параметров макета конфигурации 
// (или указанной области макета).
//
// Параметры:
//  ПутьКМакету - Строка - полный путь к макету в формате:
//                         "Документ.<ИмяДокумента>.<ИмяМакета>"
//                         "Обработка.<ИмяОбработки>.<ИмяМакета>"
//                         "ОбщийМакет.<ИмяМакета>".
//  ИмяОбласти - Строка - Имя области в макете. 
//                        Необязательный. Если не указан, возвращаются все параметры в макете.
//
// Возвращаемое значение:
//  Структура - параметры макета, ключ соответствует имени параметра, значение - Неопределено.
//
Функция ПараметрыСтандартногоМакета(ПутьКМакету, Знач ИмяОбласти = Неопределено) Экспорт
	
	Макет = МакетПоПолномуПути(ПутьКМакету);
	
	Если ЗначениеЗаполнено(ИмяОбласти) Тогда
		ТабличныйДокумент = Макет.ПолучитьОбласть(ИмяОбласти)
	Иначе	
		ТабличныйДокумент = Макет;
	КонецЕсли;	
	
	Параметры = ОбщегоНазначенияБЗК.ПараметрыТабличногоДокумента(ТабличныйДокумент);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры указанных областей макета конфигурации.
//
// Параметры:
//  ПутьКМакету   - Строка - полный путь к макету в формате:
//                           "Документ.<ИмяДокумента>.<ИмяМакета>"
//                           "Обработка.<ИмяОбработки>.<ИмяМакета>"
//                           "ОбщийМакет.<ИмяМакета>".
//  Области - Строка, Массив - области в макете, параметры которых необходимо получить.
//                             Необязательный. Если не указан, возвращаются все области макета.
//
// Возвращаемое значение:
//  Структура - ключ соответствует имени области, значение - Структура -  содержит параметры области.
//
Функция ПараметрыОбластейСтандартногоМакета(ПутьКМакету, Знач Области = Неопределено) Экспорт
	
	Макет = МакетПоПолномуПути(ПутьКМакету);
	
	ИменаОбластей = Новый Массив;
	Если ЗначениеЗаполнено(Области) Тогда
		Если ТипЗнч(Области) = Тип("Строка") Тогда 
			ИменаОбластей = СтроковыеФункцииБЗККлиентСервер.РазделитьИменаСвойств(Области)
		ИначеЕсли ТипЗнч(Области) = Тип("Массив") Тогда
			ИменаОбластей = Области
		Иначе
			ВызватьИсключение НСтр("ru = 'Недопустимый параметр ""ИменаОбластей"".'")
		КонецЕсли;	
	Иначе	
		Для Каждого Область Из Макет.Области Цикл
			ИменаОбластей.Добавить(Область.Имя)
		КонецЦикла	
	КонецЕсли;	
	
	Параметры = Новый Структура;
	Для Каждого ИмяОбласти Из ИменаОбластей Цикл
		Область = Макет.ПолучитьОбласть(ИмяОбласти);
		Параметры.Вставить(
			ИмяОбласти,
			ОбщегоНазначенияБЗК.ПараметрыТабличногоДокумента(Область));
	КонецЦикла;		
	
	Возврат Параметры;
	
КонецФункции

// Возвращает имена параметров всех областей макета конфигурации.
//
// Параметры:
//   ПутьКМакету - Строка - полный путь к макету в формате:
//       "Документ.<ИмяДокумента>.<ИмяМакета>"
//       "Обработка.<ИмяОбработки>.<ИмяМакета>"
//       "ОбщийМакет.<ИмяМакета>".
//
// Возвращаемое значение:
//   Структура - Имена параметров в разрезе имен областей.
//       * Ключ - Строка - Имя области,
//       * Значение - Строка - Имена параметров области через запятую.
//
Функция ИменаПараметровОбластейСтандартногоМакета(ПутьКМакету) Экспорт
	ИменаПараметровОбластей = Новый Структура;
	
	Макет = МакетПоПолномуПути(ПутьКМакету);
	
	Для Каждого Область Из Макет.Области Цикл
		ТабличныйДокумент = Макет.ПолучитьОбласть(Область.Имя);
		
		ИменаПараметровОбласти = ОбщегоНазначенияБЗК.ИменаПараметровТабличногоДокумента(ТабличныйДокумент);
		
		ИменаПараметровОбластей.Вставить(Область.Имя, СтрСоединить(ИменаПараметровОбласти, ","));
	КонецЦикла;
	
	Возврат ИменаПараметровОбластей;
КонецФункции

// Выводит область макета в табличный документ с собственным форматом строк.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Приемник, в который необходимо вывести область.
//   Макет             - ТабличныйДокумент - Источник, из которого необходимо вывести область.
//   ИмяОбласти        - Строка            - Имя области источника, которую необходимо вывести.
//                                           Если не указано, то выводится весь макет.
//
Процедура ВывестиОбластьСФорматомСтрок(ТабличныйДокумент, Макет, ИмяОбласти = Неопределено) Экспорт
	Если ИмяОбласти = Неопределено Тогда
		ТаблицаОбласти = Макет;
	Иначе
		ТаблицаОбласти = Макет.ПолучитьОбласть(ИмяОбласти);
	КонецЕсли;
	
	// Вывод области в табличный документ.
	НомерПервойСтрокиПриемника = ТабличныйДокумент.ВысотаТаблицы + 1;
	ТабличныйДокумент.Вывести(ТаблицаОбласти);
	
	// Настройка ширины областей в табличном документе.
	ОбластьПриемник = ТабличныйДокумент.Область(НомерПервойСтрокиПриемника, , ТабличныйДокумент.ВысотаТаблицы);
	ОбластьПриемник.СоздатьФорматСтрок();
	Для Счетчик = 1 По ТаблицаОбласти.ШиринаТаблицы Цикл
		Колонка = ТабличныйДокумент.Область(ОбластьПриемник.Верх, Счетчик, ОбластьПриемник.Низ, Счетчик);
		Колонка.ШиринаКолонки = ТаблицаОбласти.Область(1, Счетчик).ШиринаКолонки;
	КонецЦикла;
КонецПроцедуры

// Получает макет по полному имени.
//
// Параметры:
//   ПутьКМакету - Строка - полный путь к макету в формате:
//       "Документ.<ИмяДокумента>.<ИмяМакета>"
//       "Обработка.<ИмяОбработки>.<ИмяМакета>"
//       "ОбщийМакет.<ИмяМакета>".
//
// Возвращаемое значение:
//    ТабличныйДокумент - Макет.
//
Функция МакетПоПолномуПути(ПутьКМакету) Экспорт
	
	ЧастиПути = СтрРазделить(ПутьКМакету, ".");
	ИмяМакета = ЧастиПути[ЧастиПути.ВГраница()];
	
	Если ЧастиПути.Количество() = 2 Тогда
		Макет = ПолучитьОбщийМакет(ИмяМакета);
	Иначе
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЧастиПути[0] + "." + ЧастиПути[1]);
		Макет = МенеджерОбъекта.ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

// Устанавливает размер полей отступа табличного документа в случае,
//  если величина полей отступа не переопределена пользователем
//  и соответствует умолчаниям табличного документа - 10.
//
// Параметры:
//   ТабличныйДокумент - ТабличныйДокумент - Табличный документ для вывода печатной формы.
//   ПолеСлева         - Число             - См. "ТабличныйДокумент.ПолеСлева"  в синтакс-помощнике.
//   ПолеСверху        - Число             - См. "ТабличныйДокумент.ПолеСверху" в синтакс-помощнике.
//   ПолеСправа        - Число             - См. "ТабличныйДокумент.ПолеСправа" в синтакс-помощнике.
//   ПолеСнизу         - Число             - См. "ТабличныйДокумент.ПолеСнизу"  в синтакс-помощнике.
//
Процедура УстановитьОтступ(ТабличныйДокумент, ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу) Экспорт
	Если  ТабличныйДокумент.ПолеСлева  = 10
		И ТабличныйДокумент.ПолеСверху = 10
		И ТабличныйДокумент.ПолеСправа = 10
		И ТабличныйДокумент.ПолеСнизу  = 10 Тогда
		ТабличныйДокумент.ПолеСлева  = ПолеСлева;
		ТабличныйДокумент.ПолеСверху = ПолеСверху;
		ТабличныйДокумент.ПолеСправа = ПолеСправа;
		ТабличныйДокумент.ПолеСнизу  = ПолеСнизу;
	КонецЕсли;
КонецПроцедуры

// Выводит горизонтальный разделитель страниц в случае, если табличный документ не пустой,
//   и запоминает номер строки табличного документа, с которой начинается фрагмент очередного объекта.
//   См. также УправлениеПечатьюБЗК.ПослеОкончанияПечатиОчередногоОбъекта.
//
// Параметры:
//   КонтекстПечати - Структура - См. описание функции УправлениеПечатьюБЗК.КонтекстПечати.
//
Процедура ПередПечатьюОчередногоОбъекта(КонтекстПечати) Экспорт
	Если КонтекстПечати.ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
		КонтекстПечати.ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	КонтекстПечати.Вставить("НачалоОчередногоДокумента", КонтекстПечати.ТабличныйДокумент.ВысотаТаблицы + 1);
КонецПроцедуры

// Задает область печати объекта в табличном документе.
//   Вызывается после УправлениеПечатьюБЗК.ПередНачаломПечатиОчередногоОбъекта.
//
// Параметры:
//   КонтекстПечати - Структура - См. описание функции УправлениеПечатьюБЗК.КонтекстПечати.
//   Ссылка - ЛюбаяСсылка - Объект печати. См. описание одноименного параметра 
//       процедуры УправлениеПечатью.ЗадатьОбластьПечатиДокумента.
//
Процедура ПослеПечатиОчередногоОбъекта(КонтекстПечати, Ссылка) Экспорт
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
		КонтекстПечати.ТабличныйДокумент,
		КонтекстПечати.НачалоОчередногоДокумента,
		КонтекстПечати.ОбъектыПечати,
		Ссылка);
КонецПроцедуры

// Используется для вывода текста сообщения пользователю в виде предупреждения в шапке формы "Печать документов".
//
// Возвращаемое значение:
//   Строка - Значение реквизита Поле объекта СообщениеПользователю.
//       В реквизите Текст объекта СообщениеПользователю может быть как обычный тест,
//       так и шаблон форматированной строки (см. СтроковыеФункции.ФорматированнаяСтрока).
//
Функция ИдентификаторПредупрежденияВШапкеПечатиДокументов() Экспорт
	Возврат "ПредупреждениеВШапкеПечатиДокументов";
КонецФункции

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Предупреждения печатных форм выводятся через сообщения пользователю.
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	ИдентификаторПредупреждения = ИдентификаторПредупрежденияВШапкеПечатиДокументов();
	Для Каждого Сообщение Из Сообщения Цикл
		
		// Предупреждения, которые требуют вывода в шапку, маркируются специальным именем поля.
		Если Сообщение.Поле <> ИдентификаторПредупреждения Тогда
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		// Предупреждений может быть несколько, поэтому перед созданием элементов осуществляется подбор свободного имени.
		НомерСуффикса = 0;
		Суффикс = ИдентификаторПредупреждения;
		Пока Форма.Элементы.Найти(Суффикс + Формат(НомерСуффикса, "ЧГ=")) <> Неопределено Цикл
			НомерСуффикса = НомерСуффикса + 1;
		КонецЦикла;
		Если НомерСуффикса <> 0 Тогда
			Суффикс = Суффикс + Формат(НомерСуффикса, "ЧГ=");
		КонецЕсли;
		
		// Если текст объемный (подробный), то из него выделяется краткая часть.
		Позиция = СтрНайти(Сообщение.Текст, Символы.ПС, , , 2);
		Если Позиция > 0 Тогда
			Кратко = СокрЛП(Лев(Сообщение.Текст, Позиция - 1));
			Подробно = Сообщение.Текст;
		Иначе
			Кратко = Сообщение.Текст;
			Подробно = "";
		КонецЕсли;
		
		// Горизонтальная группа.
		Группа = Форма.Элементы.Вставить("Группа" + Суффикс, Тип("ГруппаФормы"), , Форма.Элементы.ГруппаДополнительнаяИнформация);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		// Восклицательный знак средних размеров.
		Картинка = Форма.Элементы.Добавить("Картинка" + Суффикс, Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.Предупреждение32;
		
		// Краткий текст предупреждения.
		Надпись = Форма.Элементы.Добавить(Суффикс, Тип("ДекорацияФормы"), Группа);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Кратко);
		Надпись.АвтоМаксимальнаяШирина = Ложь;
		Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
		
		Если Подробно <> "" Тогда
			// Гиперссылка "Подробнее...".
			ГруппаПодробнее = Форма.Элементы.Добавить("ГруппаПодробнее" + Суффикс, Тип("ГруппаФормы"), Группа);
			ГруппаПодробнее.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПодробнее.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаПодробнее.ОтображатьЗаголовок = Истина;
			ГруппаПодробнее.Заголовок = НСтр("ru = 'Подробнее...'");
			ГруппаПодробнее.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
			ГруппаПодробнее.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаПодробнее.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
			ГруппаПодробнее.ОтображениеУправления = ОтображениеУправленияОбычнойГруппы.ГиперссылкаЗаголовка;
			ГруппаПодробнее.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
			
			// Подробный текст предупреждения.
			Надпись = Форма.Элементы.Добавить("Подробнее" + Суффикс, Тип("ДекорацияФормы"), ГруппаПодробнее);
			Надпись.Вид = ВидДекорацииФормы.Надпись;
			Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Подробно);
			Надпись.АвтоМаксимальнаяШирина = Ложь;
			Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// АПК:299-вкл
// АПК:581-вкл

#КонецОбласти
