
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ, ОТРАЖАЮЩИЕ ХОЗЯЙСТВЕННЫЕ ОПЕРАЦИИ В ПОДСИСТЕМЕ НМА

// АМОРТИЗАЦИЯ НМА

Функция ПолучитьПустуюТаблицуАмортизацииНМА()
	
	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета",                                Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета",                                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииБУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР",                         ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаАмортизации.Колонки.Добавить("Подразделение",                              БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения());
	ТаблицаАмортизации.Колонки.Добавить("НомерСтроки",                                ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	
	Возврат ТаблицаАмортизации;
	
КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАВсе()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)";

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАПоТаблице()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)
	|				И Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)";

	Возврат ТекстЗапроса;

КонецФункции

Процедура СообщитьОбОшибкеПриНачисленииАмортизации(Выборка, ТекстСообщения, РегОперация, Отказ, Ссылка = Неопределено)
	
	ШаблонСообщения = НСтр("ru = '%1 для нематериального актива %2 (%3).'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекстСообщения, 
		Выборка.НематериальныйАктивПредставление, Выборка.Код);
		
	Если Ссылка = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке + Символы.ПС
			+ НСтр("ru = 'Укажите эти данные в документах принятия к учету или изменения параметров начисления амортизации.'");
		СсылкаСообщения = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьНавигационнуюСсылкуНаЖурналДокументыПоНМА();
	ИначеЕсли Ссылка = Ложь Тогда
		СсылкаСообщения = Неопределено;
	Иначе
		СсылкаСообщения = Ссылка;
	КонецЕсли;
	
	БухгалтерскийУчетПереопределяемый.СообщитьОбОшибкеРегОперацииСНавигацией(ТекстСообщенияОбОшибке, СсылкаСообщения, Отказ, РегОперация);
	
КонецПроцедуры // СообщитьОбОшибкеПриНачисленииАмортизации()

Функция ПодготовитьРасчетАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ, РежимСправкиРасчета = Ложь) Экспорт
	
	Параметры = ПодготовитьПараметрыРасчетАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииНМА();
	СправкаРасчет = УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации");
	СправкаРасчет.Колонки.Удалить("Период");

	Результат = Новый Структура;
	Результат.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	Результат.Вставить("СправкаРасчет", СправкаРасчет);
	
	ОтражатьВНалоговомУчете 		=	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);
	
	Если Не ЗначениеЗаполнено(МетодНачисленияАмортизацииНУ) Тогда
		МетодНачисленияАмортизацииНУ = Перечисления.МетодыНачисленияАмортизации.Линейный;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",                  Реквизиты.Организация);
	Запрос.УстановитьПараметр("НачалоПериодаДата",            НачалоМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",                Новый Граница(НачалоМесяца(Реквизиты.ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",                 КонецМесяца(Реквизиты.ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                       Реквизиты.ДатаРасчета);
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", УправлениеВнеоборотнымиАктивами.ПолучитьДатуПереходаКЛинейномуМетоду(Реквизиты.ДатаРасчета, Реквизиты.Организация));
	Запрос.УстановитьПараметр("Регистратор",                  Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("МетодНачисленияАмортизацииНУ", МетодНачисленияАмортизацииНУ);
	
	// Получим список нематериальных активов для расчета амортизации
	Если Параметры.ТаблицаНМА.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАПоТаблице();
	Иначе
		Запрос.Текст = ПолучитьТекстЗапросаАмортизацияНМАПринятыКУчетуНМАВсе();
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент КАК Коэффициент,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК СпособОтраженияРасходов,
	|	КОЛИЧЕСТВО(СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент) КАК КоличествоКоэффициентов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииСпособы
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов
	|			ИЗ
	|				СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета
	|		ИНАЧЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|	КОНЕЦ КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив";
	Запрос.Выполнить();
	
	// С целью оптимизации производительности формируем массивы счетов (а не временные таблицы) для отборов в виртуальных таблицах.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	ЛОЖЬ КАК ЭтоСчетНачисленияАмортизации
	|ПОМЕСТИТЬ СписокСчетовНМА
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации,
	|	ИСТИНА
	|ИЗ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСчетовНМА.СчетУчета КАК СчетУчета
	|ИЗ
	|	СписокСчетовНМА КАК СписокСчетовНМА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокСчетовНМА.СчетУчета КАК СчетУчета
	|ИЗ
	|	СписокСчетовНМА КАК СписокСчетовНМА
	|ГДЕ
	|	СписокСчетовНМА.ЭтоСчетНачисленияАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокСчетовНМА";
	Результаты = Запрос.ВыполнитьПакет();
	Запрос.УстановитьПараметр("СчетаБухгалтерскогоУчетаДляНМА", Результаты[1].Выгрузить().ВыгрузитьКолонку("СчетУчета"));
	Запрос.УстановитьПараметр("СчетаНачисленияАмортизацииНМА", Результаты[2].Выгрузить().ВыгрузитьКолонку("СчетУчета"));
	
	Если РежимСправкиРасчета Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка) КАК НематериальныйАктив,
		|	0 КАК СуммаОборотКт,
		|	0 КАК СуммаНУОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОбороты";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОбороты.Субконто1 КАК НематериальныйАктив,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
		|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУОборотКт
		|ПОМЕСТИТЬ ХозрасчетныйОбороты
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет В (&СчетаНачисленияАмортизацииНМА),
		|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
		|			Организация = &Организация
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						СписокНМА.НематериальныйАктив
		|					ИЗ
		|						СписокНМА КАК СписокНМА),
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.Регистратор <> &Регистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОбороты.Субконто1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НематериальныйАктив";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета() + 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НематериальныйАктив,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК СуммаНУНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт КАК СуммаПРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт КАК СуммаВРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК СуммаНУНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокКт КАК СуммаПРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокКт КАК СуммаВРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК СуммаНУКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт КАК СуммаПРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт КАК СуммаВРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК СуммаНУКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокКт КАК СуммаПРКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокКт КАК СуммаВРКонечныйОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Счет В (&СчетаБухгалтерскогоУчетаДляНМА),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаНМАОбороты.НематериальныйАктив КАК НематериальныйАктив,
	|	ВыработкаНМАОбороты.КоличествоОборот КАК КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаНМАОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаНМА.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						СписокНМА КАК СписокНМА)) КАК ВыработкаНМАОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив КАК НематериальныйАктив,
	|	МАКСИМУМ(СостоянияНМАОрганизаций.Период) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияНМАОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Организация = &Организация
	|	И СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизаций.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК НематериальныйАктив
	|ПОМЕСТИТЬ НМАТолькоЛинейныйМетодНУ
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В
	|			(ВЫБРАТЬ
	|				СписокНМА.НематериальныйАктив
	|			ИЗ
	|				СписокНМА КАК СписокНМА)
	|	И НематериальныеАктивы.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНМАНачалоПериода.Субконто1 КАК НематериальныйАктив,
	|	АмортизацияНМАНачалоПериода.СуммаНУОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияНМАПриПереходеКЛинейномуМетоду
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаПереходаКЛинейномуМетоду,
	|			Счет В (&СчетаНачисленияАмортизацииНМА),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							НМАТолькоЛинейныйМетодНУ.НематериальныйАктив
	|						ИЗ
	|							НМАТолькоЛинейныйМетодНУ)) КАК АмортизацияНМАНачалоПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокНМА.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	СписокНМА.НематериальныйАктив.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	СписокНМА.НематериальныйАктив.Код КАК Код,
	|	СтоимостьНМА.Подразделение КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНачальныйОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУНачальныйОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаПРНачальныйОстатокДт, 0) КАК СтоимостьПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУНачальныйОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаПРНачальныйОстатокКт, 0) КАК АмортизацияПРНачальныйОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК АмортизацияНУОборот,
	|	ЕСТЬNULL(ВыработкаНМАОбороты.КоличествоОборот, 0) КАК Количество,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент, 0) КАК Коэффициент,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СпособыОтраженияРасходовПоАмортизацииСпособы.КоличествоКоэффициентов, 0) КАК КоличествоКоэффициентов,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							НМАТолькоЛинейныйМетодНУ.НематериальныйАктив
	|						ИЗ
	|							НМАТолькоЛинейныйМетодНУ)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|				ИНАЧЕ &МетодНачисленияАмортизацииНУ
	|			КОНЕЦ
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	ЕСТЬNULL(НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	ЕСТЬNULL(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатацию,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2009, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияНМАПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0)
	|	КОНЕЦ КАК АмортизацияПриПереходеКЛинейномуМетоду,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009, 0)
	|		ИНАЧЕ (ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию)) - 1
	|	КОНЕЦ КАК ФактическийСрокПриПереходеКЛинейномуМетоду
	|ИЗ
	|	СписокНМА КАК СписокНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСпособы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|		ПО (СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов = СпособыОтраженияРасходовПоАмортизацииСпособы.СпособОтраженияРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК СтоимостьНМА
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМА.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК АмортизацияНМА
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНМА.Счет
	|		ПО СписокНМА.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|		ПО СписокНМА.НематериальныйАктив = ХозрасчетныйОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаНМАОбороты КАК ВыработкаНМАОбороты
	|		ПО СписокНМА.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНМАПриПереходеКЛинейномуМетоду КАК АмортизацияНМАПриПереходеКЛинейномуМетоду
	|		ПО СписокНМА.НематериальныйАктив = АмортизацияНМАПриПереходеКЛинейномуМетоду.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ПО СписокНМА.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|ГДЕ
	|	НЕ(ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ
	|				И ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ)";
	
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();
	
	// Чтобы во время выполнения дальнейшего алгоритма не использовались ненужные уже ресурсы (временные таблицы).
	МенеджерВременныхТаблиц.Закрыть();
	
	Пока ВыборкаПоНМА.Следующий() Цикл

		СуммаАмортизацииБУ                  = 0;
		СуммаАмортизацииНУ                  = 0;
		СуммаАмортизацииПР                  = 0;
		СуммаАмортизацииВР                  = 0;
		НормаАмортизации                    = 0;
		СтоимостьДляВычисленияАмортизацииНУ = 0;
		ОстаточнаяСтоимость                 = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СчетНачисленияАмортизации) Тогда
			Если Реквизиты.ВыдаватьСообщения Тогда
				СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Не указан счет для начисления амортизации'"),
					Реквизиты.Регистратор, Отказ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ВыборкаПоНМА.НачислятьАмортизациюБУ Тогда

			Если ВыборкаПоНМА.АмортизацияОборот <> 0 Тогда
				Если Реквизиты.ВыдаватьСообщения И ТаблицаНМА.Количество() > 0 Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Амортизация в этом месяце уже начислялась '"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Не указан способ амортизации '"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации = 0 Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Стоимость равна нулю '"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				Если Реквизиты.ВыдаватьСообщения Тогда
					СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Срок использования равен нулю '"),
						Реквизиты.Регистратор, Отказ);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ Пропустить Тогда
			
				СуммаАмортизации = 0;

				Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
		 
					СуммаГодовойАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
					СуммаАмортизации        = СуммаГодовойАмортизации / 12;

				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
						Если Реквизиты.ВыдаватьСообщения Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Объем продукции для вычисления не определен '"),
								Реквизиты.Регистратор, Отказ);
						КонецЕсли; 
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0 ;
					Иначе
						СуммаАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации * ВыборкаПоНМА.Количество / ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
					КонецЕсли;

				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда

					ОстаточнаяСтоимость = Макс(0, ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток);
					ОставшийсяСрокПолезногоИспользования = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации 
														 - УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВыборкаПоНМА.Период, Реквизиты.ДатаРасчета)
														 + 1;
					Коэффициент = ?(ВыборкаПоНМА.Коэффициент = 0, 1, ВыборкаПоНМА.Коэффициент);
					
					СуммаАмортизации = ?(ОставшийсяСрокПолезногоИспользования > 0,
										 ОстаточнаяСтоимость * (Коэффициент / ОставшийсяСрокПолезногоИспользования),
										 0);

				КонецЕсли;

				ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток;
				Если ВсегоОсталосьСписать - СуммаАмортизации < 0.01 
					И ВсегоОсталосьСписать - СуммаАмортизации > 0 Тогда 
					//погрешности при вычислениях
					СуммаАмортизации = ВсегоОсталосьСписать;
					
				КонецЕсли;
				
				БУНеОкругленная = Мин(СуммаАмортизации, ВсегоОсталосьСписать);
				Если ВыборкаПоНМА.СтоимостьНачальныйОстаток = 0 Тогда
					ПРНеОкругленная = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
				Иначе
					ПРНеОкругленная = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток * (БУНеОкругленная / ВыборкаПоНМА.СтоимостьНачальныйОстаток);
				КонецЕсли;
				РазницаНеОкругленная = БУНеОкругленная - ПРНеОкругленная;
				
				СуммаАмортизацииБУ = Окр(БУНеОкругленная, 2);
				
				Если ВыборкаПоНМА.СтоимостьПРНачальныйОстаток = ВыборкаПоНМА.АмортизацияПРНачальныйОстаток Тогда 
					СуммаАмортизацииПР = 0;
				ИначеЕсли РазницаНеОкругленная < 0.005 И РазницаНеОкругленная > -0.005 Тогда 
					СуммаАмортизацииПР = СуммаАмортизацииБУ;
				Иначе
					СуммаАмортизацииПР = Окр(ПРНеОкругленная, 2);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если ВыборкаПоНМА.НачислятьАмортизациюНУ Тогда
				
				Если ВыборкаПоНМА.АмортизацияНУОборот <> 0 Тогда
					Если Реквизиты.ВыдаватьСообщения И ТаблицаНМА.Количество() > 0 Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Амортизация (НУ) в этом месяце уже начислялась '"),
							Реквизиты.Регистратор, Отказ);
					КонецЕсли; 
					Пропустить = Истина; 
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.МетодНачисленияАмортизации) Тогда
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Не указан метод начисления амортизации (НУ) в настройках налога на прибыль '"),
							Реквизиты.Регистратор, Отказ);
					КонецЕсли;
					Пропустить = Истина;                                                                                     
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНУНачальныйОстаток) Тогда
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный
					И ВыборкаПоНМА.СрокПолезногоИспользования = 0 Тогда
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'Срок использования (НУ) равен нулю '"),
							Реквизиты.Регистратор, Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоНМА.АмортизационнаяГруппа) Тогда
					Если Реквизиты.ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоНМА, НСтр("ru = 'В справочнике не указана амортизационная группа '"),
							Реквизиты.Регистратор, Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если НЕ Пропустить Тогда
					
					СуммаАмортизации = 0;
					
					Если ВыборкаПоНМА.СчетУчета = ВыборкаПоНМА.СчетНачисленияАмортизации Тогда // НИОКР.
						СтоимостьДляВычисленияАмортизацииНУ = ВыборкаПоНМА.ПервоначальнаяСтоимостьНУ;
					Иначе
						СтоимостьДляВычисленияАмортизацииНУ = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток;
					КонецЕсли; 
					
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоНМА.СрокПолезногоИспользования);
					
					СпециальныйКоэффициент = ?(ВыборкаПоНМА.СпециальныйКоэффициент = 0, 1, ВыборкаПоНМА.СпециальныйКоэффициент);
					
					Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
						
						СтоимостьДляВычисленияАмортизацииНУ = СтоимостьДляВычисленияАмортизацииНУ - ВыборкаПоНМА.АмортизацияПриПереходеКЛинейномуМетоду;
						ФактическийСрокПриПереходеКЛинейномуМетоду = Макс(ВыборкаПоНМА.ФактическийСрокПриПереходеКЛинейномуМетоду, 0);
						СрокИспользованияДляВычисления = СрокИспользованияДляВычисления - ФактическийСрокПриПереходеКЛинейномуМетоду;
						
						СуммаАмортизации = СтоимостьДляВычисленияАмортизацииНУ / СрокИспользованияДляВычисления * СпециальныйКоэффициент;
						
					ИначеЕсли ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
						
						НормаАмортизации = УправлениеВнеоборотнымиАктивами.ПолучитьНормуПоАмортизационнойГруппе(ВыборкаПоНМА.АмортизационнаяГруппа);
						
						Если НЕ (НормаАмортизации = Неопределено) Тогда
							
							СуммаАмортизации = (ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток)
							* НормаАмортизации / 100 
							* СпециальныйКоэффициент;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток;
					Если ВсегоОсталосьСписать - СуммаАмортизации < 0.01 
						И ВсегоОсталосьСписать - СуммаАмортизации > 0 Тогда
						//погрешности при вычислениях
						СуммаАмортизации = ВсегоОсталосьСписать;
						
					КонецЕсли;
					
					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизации), 2);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаАмортизацииВР = СуммаАмортизацииБУ - СуммаАмортизацииНУ - СуммаАмортизацииПР;			
		
		Если СуммаАмортизацииБУ > 0
		 ИЛИ СуммаАмортизацииНУ > 0
		 ИЛИ СуммаАмортизацииПР <> 0
		 ИЛИ СуммаАмортизацииВР <> 0 Тогда
	
			СтрокаАмортизации = Результат.ТаблицаАмортизации.Добавить();

			СтрокаАмортизации.ОбъектУчета               = ВыборкаПоНМА.НематериальныйАктив;
			СтрокаАмортизации.СчетУчета                 = ВыборкаПоНМА.СчетУчета;
			СтрокаАмортизации.СчетНачисленияАмортизации = ВыборкаПоНМА.СчетНачисленияАмортизации;
			СтрокаАмортизации.НаправлениеАмортизации    = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
			СтрокаАмортизации.СуммаАмортизацииБУ        = СуммаАмортизацииБУ;
			СтрокаАмортизации.СуммаАмортизацииНУ        = СуммаАмортизацииНУ;
			СтрокаАмортизации.СуммаАмортизацииПР        = ?(ПоддержкаПБУ18, СуммаАмортизацииПР, 0);
			СтрокаАмортизации.СуммаАмортизацииВР        = ?(ПоддержкаПБУ18, СуммаАмортизацииВР, 0);
			СтрокаАмортизации.Подразделение             = ВыборкаПоНМА.ПодразделениеОрганизации;
			
			//Данные для справки-расчета
			СтрокаСправкаРасчет = Результат.СправкаРасчет.Добавить();
			
			ОстаточнаяСтоимостьБУ = ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток;
			ОстаточнаяСтоимостьНУ = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток;
				
			ФактическийСрокИспользованияБУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				ВыборкаПоНМА.ДатаВводаВЭксплуатацию, Реквизиты.ДатаРасчета) - 1;
			ФактическийСрокИспользованияНУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				ВыборкаПоНМА.ДатаВводаВЭксплуатацию, Реквизиты.ДатаРасчета) - 1;
				
			ОстатокСрокаПолезногоИспользованияБУ = Макс(0, ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации - ФактическийСрокИспользованияБУ);
			ОстатокСрокаПолезногоИспользованияНУ = Макс(0, ВыборкаПоНМА.СрокПолезногоИспользования - ФактическийСрокИспользованияНУ);
			
			Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
				СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
				СтоимостьДляВычисленияАмортизацииБУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
			ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
				СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка;
				СтоимостьДляВычисленияАмортизацииБУ = ОстаточнаяСтоимость;
			ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
				СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции;
				СтоимостьДляВычисленияАмортизацииБУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
			КонецЕсли;
			
			СтрокаСправкаРасчет.ПериодРасчета                         = КонецМесяца(Реквизиты.ДатаРасчета);
			СтрокаСправкаРасчет.Объект                                = ВыборкаПоНМА.НематериальныйАктив;
			СтрокаСправкаРасчет.СпособНачисленияАмортизацииБУ         = СпособНачисленияАмортизацииБУ;
			СтрокаСправкаРасчет.СпособНачисленияАмортизацииНУ         = ВыборкаПоНМА.МетодНачисленияАмортизации;
			СтрокаСправкаРасчет.АмортизационнаяГруппа                 = ВыборкаПоНМА.АмортизационнаяГруппа;
			СтрокаСправкаРасчет.ИнвентарныйНомер                      = ВыборкаПоНМА.Код;
			СтрокаСправкаРасчет.ДатаВводаВЭксплуатацию                = ВыборкаПоНМА.ДатаВводаВЭксплуатацию;
			СтрокаСправкаРасчет.НачислятьАмортизациюБУ                = ВыборкаПоНМА.НачислятьАмортизациюБУ;
			СтрокаСправкаРасчет.НачислятьАмортизациюНУ                = ВыборкаПоНМА.НачислятьАмортизациюНУ;
			СтрокаСправкаРасчет.НормаАмортизации                      = НормаАмортизации;
			СтрокаСправкаРасчет.СтоимостьБУ                           = ВыборкаПоНМА.СтоимостьНачальныйОстаток;
			СтрокаСправкаРасчет.СтоимостьНУ                           = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток;
			СтрокаСправкаРасчет.ОстаточнаяСтоимостьБУ                 = ОстаточнаяСтоимостьБУ;
			СтрокаСправкаРасчет.ОстаточнаяСтоимостьНУ                 = ОстаточнаяСтоимостьНУ;
			СтрокаСправкаРасчет.СтоимостьДляАмортизацииБУ             = СтоимостьДляВычисленияАмортизацииБУ;
			СтрокаСправкаРасчет.СтоимостьДляАмортизацииНУ             = СтоимостьДляВычисленияАмортизацииНУ;
			СтрокаСправкаРасчет.СуммаАмортизацииБУ                    = СуммаАмортизацииБУ;
			СтрокаСправкаРасчет.СуммаАмортизацииНУ                    = СуммаАмортизацииНУ;
			СтрокаСправкаРасчет.СрокПолезногоИспользованияБУ          = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации;
			СтрокаСправкаРасчет.СрокПолезногоИспользованияНУ          = ВыборкаПоНМА.СрокПолезногоИспользования;
			СтрокаСправкаРасчет.ОстатокСрокаПолезногоИспользованияБУ  = ОстатокСрокаПолезногоИспользованияБУ;
			СтрокаСправкаРасчет.ОстатокСрокаПолезногоИспользованияНУ  = ОстатокСрокаПолезногоИспользованияНУ;
			СтрокаСправкаРасчет.КоэффициентАмортизации                = ВыборкаПоНМА.Коэффициент;
			СтрокаСправкаРасчет.КоэффициентАмортизацииНУ              = ВыборкаПоНМА.СпециальныйКоэффициент;
			СтрокаСправкаРасчет.СпособыОтраженияРасходовПоАмортизации = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
			СтрокаСправкаРасчет.ОбъемПродукцииРабот                   = ВыборкаПоНМА.Количество;
			СтрокаСправкаРасчет.ОбъемПродукцииРаботДляАмортизации     = ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
			
			Если ПоддержкаПБУ18 Тогда
				
				СтоимостьВРНачальныйОстаток = ВыборкаПоНМА.СтоимостьНачальныйОстаток
					- ВыборкаПоНМА.СтоимостьНУНачальныйОстаток
					- ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
					
				ОстаточнаяСтоимостьПР = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток - ВыборкаПоНМА.АмортизацияПРНачальныйОстаток;
				ОстаточнаяСтоимостьВР = ОстаточнаяСтоимостьБУ - ОстаточнаяСтоимостьНУ - ОстаточнаяСтоимостьПР;
				
				СтрокаСправкаРасчет.СтоимостьПР               = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
				СтрокаСправкаРасчет.СтоимостьВР               = СтоимостьВРНачальныйОстаток;
				СтрокаСправкаРасчет.ОстаточнаяСтоимостьПР     = ОстаточнаяСтоимостьПР;
				СтрокаСправкаРасчет.ОстаточнаяСтоимостьВР     = ОстаточнаяСтоимостьВР;
				СтрокаСправкаРасчет.СтоимостьДляАмортизацииПР = ВыборкаПоНМА.СтоимостьПРНачальныйОстаток;
				СтрокаСправкаРасчет.СуммаАмортизацииПР        = СуммаАмортизацииПР;
				СтрокаСправкаРасчет.СуммаАмортизацииВР        = СуммаАмортизацииВР;
			
			КонецЕсли;
	
		КонецЕсли;
			
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ПодготовитьПараметрыРасчетАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныйАктив>

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"            // <Дата>
	+ "ДатаРасчета,"       // <Дата>
	+ "Организация,"       // <СправочникСсылка.Организации>
	+ "Регистратор,"       // <ДокументСсылка.*>
	+ "ВыдаватьСообщения"; // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицыАмортизацииНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];


	ПараметрыНачисленияАмортизации = Новый Структура;

	РасчетАмортизации = ПодготовитьРасчетАмортизацииНМА(Параметры.ТаблицаНМА, Параметры.Реквизиты, Отказ);
	ТаблицаАмортизации = РасчетАмортизации.ТаблицаАмортизации;

	ПараметрыАмортизации = Новый Структура;
	ПараметрыАмортизации.Вставить("ТаблицаАмортизации", ТаблицаАмортизации);
	ПараметрыАмортизации.Вставить("СправкаРасчет", РасчетАмортизации.СправкаРасчет);
	ПараметрыАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("Амортизация", ПараметрыАмортизации);
	
	ТаблицаРаспределения = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, Параметры.Реквизиты, Отказ);

	ПараметрыРаспределения = Новый Структура;
	ПараметрыРаспределения.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыРаспределения.Вставить("ТаблицаЗатрат", ТаблицаРаспределения);
	ПараметрыНачисленияАмортизации.Вставить("РаспределениеАмортизации", ПараметрыРаспределения);
	
	Возврат ПараметрыНачисленияАмортизации;

КонецФункции

Функция ПодготовитьПараметрыАмортизацияНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив"; // <СправочникСсылка.НематериальныйАктив>

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"      // <Дата>
	+ "ДатаРасчета," // <Дата>
	+ "Организация," // <СправочникСсылка.Организации>
	+ "Регистратор," // <ДокументСсылка.*>
	+ "ИмяСписка,"   // <Строка>
	+ "ВыдаватьСообщения," // <Булево>
	+ "Содержание";  // <Строка, 150>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции


// ВЫБЫТИЕ НМА

Функция ПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты, Отказ, ВыдаватьСообщения = Ложь) Экспорт

	Параметры = ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	// Проинициализируем структуру, чтобы в случае "досрочного" выхода в структуре были все таблицы, хоть и пустые
	ПараметрыВыбытия = ПолучитьИнициализированнуюСтруктуруПараметровВыбытия();

	Параметры.Реквизиты.Колонки.Добавить("ДатаРасчета", Новый ОписаниеТипов("Дата"));
	Параметры.Реквизиты.ЗаполнитьЗначения(Реквизиты.Период, "ДатаРасчета");
	Параметры.Реквизиты.Колонки.Добавить("ВыдаватьСообщения", Новый ОписаниеТипов("Булево"));
	Параметры.Реквизиты.ЗаполнитьЗначения(ВыдаватьСообщения = Истина, "ВыдаватьСообщения");
	Если Параметры.ТаблицаНМА.Количество() = 0 Тогда
		ТаблицаАмортизации = ПолучитьПустуюТаблицуАмортизацииНМА();
	Иначе
		РасчетАмортизации = ПодготовитьРасчетАмортизацииНМА(Параметры.ТаблицаНМА, Параметры.Реквизиты, Отказ);
		ТаблицаАмортизации = РасчетАмортизации.ТаблицаАмортизации;
		Если Отказ Тогда
			Возврат ПараметрыВыбытия;
		КонецЕсли;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("ТабАмортизации", ТаблицаАмортизации);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабАмортизации.ОбъектУчета КАК ОбъектУчета,
	|	ТабАмортизации.СуммаАмортизацииБУ КАК СуммаАмортизацииБУ,
	|	ТабАмортизации.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ТабАмортизации.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ТабАмортизации.СуммаАмортизацииВР КАК СуммаАмортизацииВР
	|ПОМЕСТИТЬ ТабАмортизации
	|ИЗ
	|	&ТабАмортизации КАК ТабАмортизации";
	Запрос.Выполнить();

	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(ТаблицаАмортизации, Параметры.Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат ПараметрыВыбытия;
	КонецЕсли;

	ПараметрыНачисленияАмортизации = Новый Структура;
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаЗатрат", ТаблицаЗатрат);
	ПараметрыНачисленияАмортизации.Вставить("ТаблицаРеквизиты", Параметры.Реквизиты);
	ПараметрыНачисленияАмортизации.Вставить("СправкаРасчет", РасчетАмортизации.СправкаРасчет);

	// Параметры для процедуры СформироватьДвиженияНачислениеАмортизации
	ПараметрыВыбытия.Вставить("НачислениеАмортизации", ПараметрыНачисленияАмортизации);
	
	Запрос.УстановитьПараметр("Дата", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("ТаблицаНМА", Параметры.ТаблицаНМА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ ТаблицаНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаУчетаНМА.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СчетаУчетаНМА.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА СчетаУчетаНМА.СчетУчета
	|		ИНАЧЕ СчетаУчетаНМА.СчетНачисленияАмортизации
	|	КОНЕЦ КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаНМА
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СчетаУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаНМА.СчетУчета КАК Счет
	|ПОМЕСТИТЬ РазличныеСчетаУчетаНМА
	|ИЗ
	|	СчетаУчетаНМА КАК СчетаУчетаНМА
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаУчетаНМА.СчетНачисленияАмортизации
	|ИЗ
	|	СчетаУчетаНМА КАК СчетаУчетаНМА";
	Запрос.Выполнить();

	Если ТранзакцияАктивна() Тогда
		// Блокировка регистра бухгалтерии.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный");
		ЭлементБлокировки.УстановитьЗначение("Организация", Реквизиты.Организация);
		ЭлементБлокировки.УстановитьЗначение("Период", Новый Диапазон(, КонецМесяца(Реквизиты.Период)));
		
		Запрос.Текст = "ВЫБРАТЬ РазличныеСчетаУчетаНМА.Счет ИЗ РазличныеСчетаУчетаНМА";
		ЭлементБлокировки.ИсточникДанных = Запрос.Выполнить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Счет", "Счет");
		
		Блокировка.Заблокировать();
		
	КонецЕсли;

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтоимостьНМА.Субконто1 КАК НематериальныйАктив,
	|	СтоимостьНМА.Счет КАК Счет,
	|	СтоимостьНМА.СуммаОстатокДт КАК СуммаОстатокДт,
	|	СтоимостьНМА.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	СтоимостьНМА.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	СтоимостьНМА.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	СтоимостьНМА.СуммаОстатокКт КАК СуммаОстатокКт,
	|	СтоимостьНМА.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	СтоимостьНМА.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	СтоимостьНМА.СуммаВРОстатокКт КАК СуммаВРОстатокКт,
	|	СтоимостьНМА.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ СтоимостьНМА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Дата,
	|			Счет В
	|				(ВЫБРАТЬ
	|					РазличныеСчетаУчетаНМА.Счет
	|				ИЗ
	|					РазличныеСчетаУчетаНМА КАК РазличныеСчетаУчетаНМА),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаНМА.НематериальныйАктив
	|					ИЗ
	|						ТаблицаНМА КАК ТаблицаНМА)) КАК СтоимостьНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНМА.НомерСтроки КАК НомерСтроки,
	|	ТаблицаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	СтоимостьНМА.Подразделение КАК Подразделение,
	|	СчетаУчетаНМА.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНМА.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаОстатокДт, 0) КАК СтоимостьНМАБУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУОстатокДт, 0) КАК СтоимостьНМАНУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаПРОстатокДт, 0) КАК СтоимостьНМАПР,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаВРОстатокДт, 0) КАК СтоимостьНМАВР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииБУ, 0) КАК АмортизацияНМАБУ,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияНМАНУ,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияНМАПР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияНМАВР
	|ИЗ
	|	ТаблицаНМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаНМА КАК СчетаУчетаНМА
	|		ПО ТаблицаНМА.НематериальныйАктив = СчетаУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА КАК СтоимостьНМА
	|		ПО (СчетаУчетаНМА.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив)
	|			И (СчетаУчетаНМА.СчетУчета = СтоимостьНМА.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМА КАК АмортизацияНМА
	|		ПО (СчетаУчетаНМА.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив)
	|			И (СчетаУчетаНМА.СчетНачисленияАмортизации = АмортизацияНМА.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАмортизации КАК ТабАмортизации
	|		ПО ТаблицаНМА.НематериальныйАктив = ТабАмортизации.ОбъектУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТаблицаПараметрыСписания = Запрос.Выполнить().Выгрузить();
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", ТаблицаПараметрыСписания);

	Возврат ПараметрыВыбытия;

КонецФункции

Функция ПодготовитьПараметрыПодготовитьТаблицыСведенийПоВыбытиюНМА(ТаблицаНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА
	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"         // <Число, 5, 0>
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы>
	+ "Регистратор";         // <ДокументСсылка.*>

	Параметры.Вставить("ТаблицаНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты
	СписокОбязательныхКолонок = ""
	+ "Период,"        // <Дата>
	+ "Организация,"   // <СправочникСсылка.Организации>
	+ "Подразделение," // <Ссылка на справочник подразделений>
	+ "Содержание,"    // <Строка, 150>
	+ "ИмяСписка,"     // <Строка>
	+ "Регистратор";   // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьИнициализированнуюСтруктуруПараметровВыбытия()

	ПараметрыВыбытия = Новый Структура;
	
	// НачислениеАмортизации, структура из двух таблиц: ТаблицаЗатрат и ТаблицаРеквизиты
	ПараметрыВыбытия.Вставить("НачислениеАмортизации",
		Новый Структура("ТаблицаЗатрат, ТаблицаРеквизиты, СправкаРасчет",
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(Новый Структура("ОбъектУчета, ПодразделениеЗатрат, Подразделение,
				|Субконто1, Субконто2, Субконто3, СуммаБУ, СуммаНУ, СуммаПР, СуммаВР, СчетЗатрат, СчетАмортизации")), // ТаблицаЗатрат
			УправлениеВнеоборотнымиАктивами.ПолучитьПустуюТаблицуЗначенийСКолонками(Новый Структура("Период, Организация, Содержание")),  // ТаблицаРеквизиты
			УправлениеВнеоборотнымиАктивами.ПустаяСправкаРасчет("РасчетАмортизации")
		)
	);

	// ТаблицаПараметрыСписания, таблица значений
	ПараметрыВыбытия.Вставить("ТаблицаПараметрыСписания", Новый ТаблицаЗначений); // Достаточно указать ТЗ без строк, колонки прописывать не нужно

	Возврат ПараметрыВыбытия;

КонецФункции

Процедура СформироватьДвиженияВыбытиеНМА(ТаблицаРеквизиты, ПараметрыВыбытия, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВыбытиеНМА(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	УправлениеВнеоборотнымиАктивами.СформироватьДвиженияНачислениеАмортизации(
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаЗатрат,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		Движения, Отказ);
		
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(Движения,
		ПараметрыВыбытия.НачислениеАмортизации.СправкаРасчет,
		ПараметрыВыбытия.НачислениеАмортизации.ТаблицаРеквизиты,
		"РасчетАмортизации");
	
	ОтражатьВНалоговомУчете 		=	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18					=	УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	МетодНачисленияАмортизацииНУ	=	УчетнаяПолитика.МетодНачисленияАмортизацииНУ(Реквизиты.Организация, Реквизиты.Период);

	Для каждого СтрокаТаблицы Из ПараметрыВыбытия.ТаблицаПараметрыСписания Цикл
		
		Если Реквизиты.Подразделение <> Неопределено Тогда
			ПодразделениеПроводки = Реквизиты.Подразделение;
		Иначе
			ПодразделениеПроводки = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		СчетУчетаСтоимости   = СтрокаТаблицы.СчетУчета;
		СчетУчетаАмортизации = СтрокаТаблицы.СчетНачисленияАмортизации;
		
		// списание амортизации Д (Счет амортизации) К (счет учета)
		СуммаПроводки   = СтрокаТаблицы.АмортизацияНМАБУ;
		СуммаПроводкиНУ = СтрокаТаблицы.АмортизацияНМАНУ;
		СуммаПроводкиПР = СтрокаТаблицы.АмортизацияНМАПР;
		СуммаПроводкиВР = СтрокаТаблицы.АмортизацияНМАВР;

		Если ((СуммаПроводки <> 0) 
			  ИЛИ (СуммаПроводкиНУ <> 0)
			  ИЛИ (СуммаПроводкиПР <> 0)
			  ИЛИ (СуммаПроводкиВР <> 0))
			И НЕ (СчетУчетаСтоимости = СчетУчетаАмортизации) Тогда

			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = СуммаПроводки;
			
			Проводка.СчетДт = СчетУчетаАмортизации;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;
			
			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// списание остаточной стоимости
		СуммаПроводки   = СтрокаТаблицы.СтоимостьНМАБУ - СтрокаТаблицы.АмортизацияНМАБУ;
		СуммаПроводкиНУ = СтрокаТаблицы.СтоимостьНМАНУ - СтрокаТаблицы.АмортизацияНМАНУ;
		СуммаПроводкиПР = СтрокаТаблицы.СтоимостьНМАПР - СтрокаТаблицы.АмортизацияНМАПР;
		СуммаПроводкиВР = СтрокаТаблицы.СтоимостьНМАВР - СтрокаТаблицы.АмортизацияНМАВР;

		Если СуммаПроводки <> 0
		 ИЛИ СуммаПроводкиНУ <> 0 
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда
		
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание  = Реквизиты.Содержание;
			Проводка.Сумма       = СуммаПроводки;
			
			Проводка.СчетДт = Реквизиты.СчетСписания;
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.КоличествоСубконто > 0 Тогда
				Если СвойстваСчетаДт.ВидСубконто1ТипЗначения.СодержитТип(ТипЗнч(Реквизиты.СубконтоСписания)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СвойстваСчетаДт.ВидСубконто1, Реквизиты.СубконтоСписания);
				КонецЕсли;
			КонецЕсли;
			Если СвойстваСчетаДт.Родитель = ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы Тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РеализуемыеАктивы", СтрокаТаблицы.НематериальныйАктив);
			КонецЕсли;
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = ПодразделениеПроводки;
			КонецЕсли;
			
			Проводка.СчетКт = СчетУчетаСтоимости;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР"		 , СтрокаТаблицы.НематериальныйАктив);
			
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = ПодразделениеПроводки;
			КонецЕсли;
			
			Если ОтражатьВНалоговомУчете Тогда
				Если СвойстваСчетаДт.НалоговыйУчет Тогда
					Проводка.СуммаНУДт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРДт = СуммаПроводкиПР;
						Проводка.СуммаВРДт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;

				Если СвойстваСчетаКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СуммаПроводкиНУ;
					Если ПоддержкаПБУ18 Тогда
						Проводка.СуммаПРКт = СуммаПроводкиПР;
						Проводка.СуммаВРКт = СуммаПроводкиВР;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
	// Вызов переопределяемой процедуры для возможности выполнения дополнительных действий при списании НМА.
	УправлениеВнеоборотнымиАктивамиПереопределяемый.ВыполнитьДополнительныеДействияСписаниеНМА(ПараметрыВыбытия.ТаблицаПараметрыСписания, ТаблицаРеквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыбытиеНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "Подразделение,"             // <Ссылка на справочник подразделений>
	+ "Содержание,"                // <Строка, 150>
	+ "СчетСписания,"              // <ПланСчетовСсылка.Хозрасчетный>
	+ "СубконтоСписания"           // 
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


// ВЫРАБОТКА НМА

Процедура СформироватьДвиженияВыработкаНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА);
	Движения.ВыработкаНМА.Загрузить(Параметры.ТаблицаНМА);
	Движения.ВыработкаНМА.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыработкаНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "НематериальныйАктив,"
	+ "Количество,"
	;
	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Изменение способов отражения расходов по амортизации НМА

Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА);
	
	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Загрузить(Параметры.ТаблицаНМА);
	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "СпособОтраженияРасходов,"
	+ "НематериальныйАктив";
	
	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Изменение специального коэфициента для НМА

Процедура СформироватьДвиженияИзменениеСпециальногоКоэффициентаНМА(ТаблицаНМА, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеСпециальногоКоэффициентаНМА(ТаблицаНМА);
	
	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Загрузить(Параметры.ТаблицаНМА);
	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпециальногоКоэффициентаНМА(ТаблицаНМА)

	Параметры = Новый Структура;
	
	// Подготовка таблицы ТаблицаНМА:
	СписокОбязательныхКолонок = ""
	+ "Период,"
	+ "Регистратор,"
	+ "Организация,"
	+ "НомерСтроки,"
	+ "НематериальныйАктив,"
	+ "СпециальныйКоэффициент";
	
	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// ПОСТУПЛЕНИЕ НМА

Процедура СформироватьДвиженияПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты);	
	Реквизиты = Параметры.Реквизиты[0];
	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	
	Для каждого СтрокаТаблицы Из Параметры.ТаблицаНМА Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТаблицы.Содержание;
		
		Проводка.СчетДт      = СтрокаТаблицы.СчетУчета;
		Если СтрокаТаблицы.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", СтрокаТаблицы.НематериальныйАктив);
		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РасходыНаНИОКР", СтрокаТаблицы.НематериальныйАктив);
		КонецЕсли;
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт      = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры", Реквизиты.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Проводка.Сумма =  СтрокаТаблицы.СуммаБУ;
		
		Если ОтражатьВНалоговомУчете Тогда
			
			Если СвойстваСчетаДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРДт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРДт = 0;
			КонецЕсли;
			Если СвойстваСчетаКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаПРКт = СтрокаТаблицы.СуммаБУ - СтрокаТаблицы.СуммаНУ;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПоступлениеНМА(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаНМА

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы> - поступающий НМА
	+ "СуммаВзаиморасчетов," // <Число,15,2> - сумма в валюте взаиморасчетов с поставщиком
	+ "СуммаБУ,"             // <Число,15,2> - сумма в рублях
	+ "СуммаНУ,"             // <Число,15,2> - сумма в рублях (НУ)
	+ "СчетУчета,"           // <ПланСчетовСсылка.Хозрасчетный> - счет учета, на который приходуется НМА
	+ "ВидОбъектаУчета,"     // <ПеречислениеСсылка.ВидыОбъектовУчетаНМА> - вид объекта учета
	+ "Содержание";          // <Строка,150> - содержание проводки

	Параметры.Вставить("ТаблицаНМА", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Регистратор,"                    // <ДокументСсылка.*> - документ-регистратор движений
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает НМА
	+ "Подразделение,"                  // <Ссылка на справочник подразделений> - подразделение, в которое поступает НМА
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - поставщик НМА
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор, по которому поступает НМА
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет учета расчетов с поставщиком, обычно 60.01
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов с поставщиком

	Параметры.Вставить("Реквизиты",  ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Движения по состоянию НМА

Процедура СформироватьДвиженияСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаНМА) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты);

	Движения.СостоянияНМАОрганизаций.Загрузить(Параметры.СостоянияНМАОрганизаций);
	Движения.СостоянияНМАОрганизаций.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыСостоянияНМАОрганизаций(ТаблицаНМА, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы СостоянияНМАОрганизаций:
	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив,"	// <СправочникСсылка.НематериальныйАктив>
	+ "Состояние"				// <ПеречислениеСсылка.ВидыСостоянийНМА>
	;
	
	СостоянияНМАОрганизаций = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНМА, СписокОбязательныхКолонок);
	
	// Подготовка реквизитов
	СписокОбязательныхКолонок = ""
	+ "Период,"                 // <Дата> - Дата движения
	+ "Организация";			// <СправочникСсылка.Организации> - организация документа
	
	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок);
	
	СостоянияНМАОрганизаций.Колонки.Добавить("Организация", Реквизиты.Колонки.Организация.ТипЗначения);
	СостоянияНМАОрганизаций.Колонки.Добавить("Период", Реквизиты.Колонки.Период.ТипЗначения);
	СостоянияНМАОрганизаций.ЗаполнитьЗначения(Реквизиты[0].Организация, "Организация");
	СостоянияНМАОрганизаций.ЗаполнитьЗначения(Реквизиты[0].Период, "Период");
	
	Параметры.Вставить("СостоянияНМАОрганизаций", СостоянияНМАОрганизаций);
	
	Возврат Параметры;
	
КонецФункции

// ПРИНЯТИЕ К УЧЕТУ НМА

// Регистрация состояний НМА

Процедура ПроверитьВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив.Код КАК КодНМА,
	|	СостоянияНМАОрганизацийСрезПоследних.Период,
	|	СостоянияНМАОрганизацийСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|		&Период,
	|		Организация = &Организация
	|		    И НематериальныйАктив В (&НематериальныеАктивы)
	|		    И Состояние = &Состояние
	|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация",          Реквизиты.Организация);
	Запрос.УстановитьПараметр("Состояние",            Реквизиты.Состояние);
	Запрос.УстановитьПараметр("НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	Запрос.УстановитьПараметр("ТекущийРегистратор",   Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Период",               Новый МоментВремени(Реквизиты.Период, Реквизиты.Регистратор));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();

		ШаблонСообщения = НСтр("ru = 'Для нематериального актива <%1 (%2)> в организации <%3> уже зафиксировано состояние <%4>
			|документом <%5>. Дата состояния: %6'");

		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.НематериальныйАктив,
				Выборка.КодНМА, Реквизиты.Организация, Реквизиты.Состояние, Выборка.Регистратор, Формат(Выборка.Период, "ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЦикла;

		Возврат;
	КонецЕсли;

КонецПроцедуры

Функция ПодготовитьПараметрыВозможностьИзмененияСостоянияНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныхАктивов>
	+ "Период,"              // <Дата>
	+ "ИмяСписка,"           // <Строка, 0>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "Состояние,"           // <ПеречислениеСсылка.СостоянияНМА> - состояние НМА, которое требуется установить
	+ "Регистратор";         // <ДокументСсылка.*>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Проводки НМА по счетам

Процедура СформироватьДвиженияПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчете = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПоддержкаПБУ18          = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Проводка = Движения.Хозрасчетный.Добавить();

	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Сумма       = Реквизиты.СтоимостьБУ;
	
	Проводка.СчетДт          = Реквизиты.СчетУчета;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);

	Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
	КонецЕсли;
	
	Проводка.СчетКт          = Реквизиты.СчетУчетаВнеоборотногоАктива;
	
	СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
	Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
	КонецЕсли;
	
	Если Реквизиты.НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив тогда
		Проводка.Содержание = "Принят к учету НМА";
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НематериальныеАктивы", Реквизиты.НематериальныйАктив);
	Иначе
		Проводка.Содержание = "Приняты к учету расходы на НИОКР";
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", Реквизиты.НематериальныйАктив);
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = Реквизиты.СтоимостьНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРДт = Реквизиты.СтоимостьПР;
				Проводка.СуммаВРДт = Реквизиты.СтоимостьВР;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = Реквизиты.СтоимостьНУ;
			Если ПоддержкаПБУ18 Тогда
				Проводка.СуммаПРКт = Реквизиты.СтоимостьПР;
				Проводка.СуммаВРКт = Реквизиты.СтоимостьВР;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		Для Каждого СтрокаСписания Из Параметры.ТаблицаСпособОтраженияРасходов Цикл
			
			Проводка             = Движения.Хозрасчетный.Добавить();
			Проводка.Период      = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Сумма       = 0;
			Проводка.Содержание = "Приняты к учету расходы на НИОКР";
			
			Проводка.СчетДт      = СтрокаСписания.СчетЗатрат;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаСписания.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаСписания.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаСписания.Субконто3);

			Проводка.СчетКт      = Реквизиты.СчетУчетаВнеоборотногоАктива;

			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
			Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаСписания.Подразделение;
			КонецЕсли;
			СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
			Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
			КонецЕсли;

			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РасходыНаНИОКР", Реквизиты.НематериальныйАктив);

			Проводка.СуммаНУДт = СтрокаСписания.СуммаНУДт;
			Проводка.СуммаНУКт = СтрокаСписания.СуммаНУКт;

			Если ПоддержкаПБУ18 Тогда
				
				Проводка.СуммаПРДт = СтрокаСписания.СуммаПРДт;
				Проводка.СуммаПРКт = СтрокаСписания.СуммаПРКт;
				Проводка.СуммаВРДт = СтрокаСписания.СуммаВРДт;
				Проводка.СуммаВРКт = СтрокаСписания.СуммаВРКт;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПринятиеКУчетуНМА(ТаблицаРеквизиты, ТаблицаСпособОтраженияРасходов)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "НематериальныйАктив,"          // <СправочникСсылка.НематериальныеАктивы>
	+ "Организация,"                  // <СправочникСсылка.Организации>
	+ "ПодразделениеДт,"              // <Ссылка на справочник подразделений>
	+ "ПодразделениеКт,"              // <Ссылка на справочник подразделений>
	+ "Регистратор,"                  // <ДокументСсылка.*>
	+ "СчетУчета,"                    // <ПланСчетовСсылка.Хозрасчетный> - счет на который принимается к учету НМА
	+ "СчетУчетаВнеоборотногоАктива," // <ПланСчетовСсылка.Хозрасчетный> - счет учета нематериального актива
	+ "СтоимостьБУ,"
	+ "СтоимостьНУ,"
	+ "СтоимостьПР,"
	+ "СтоимостьВР,"
	+ "ВидОбъектаУчета,"
	+ "ПорядокСписанияНИОКРНаРасходыНУ"
	;

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	СписокОбязательныхКолонок = ""
	+ "НомерСтроки,"                  // <Число>
	+ "СчетЗатрат,"                   // <ПланСчетовСсылка.Хозрасчетный>
	+ "Подразделение,"                // <Ссылка на справочник подразделений>
	+ "Субконто1,"                    //
	+ "Субконто2,"                    //
	+ "Субконто3,"                    //
	+ "Коэффициент,"                  // <Число>
	+ "ВидРасходовНУ,"                // <ПеречислениеСсылка.ВидыРасходовНУ>
	+ "СуммаНУДт,"                    // <Число>
	+ "СуммаПРДт,"                    // <Число>
	+ "СуммаВРДт,"                    // <Число>
	+ "СуммаНУКт,"                    // <Число>
	+ "СуммаПРКт,"                    // <Число>
	+ "СуммаВРКт"                    // <Число>
	;

	Параметры.Вставить("ТаблицаСпособОтраженияРасходов",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСпособОтраженияРасходов, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

// Отражение НМА в учете

Процедура СформироватьДвиженияРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.СчетаБухгалтерскогоУчетаНМА.Добавить();
	Движение.Период                    = Реквизиты.Период;
	Движение.НематериальныйАктив       = Реквизиты.НематериальныйАктив;
	Движение.Организация               = Реквизиты.Организация;
	Движение.СчетУчета                 = Реквизиты.СчетУчета;
	Движение.СчетНачисленияАмортизации = Реквизиты.СчетНачисленияАмортизации;

	Движения.СчетаБухгалтерскогоУчетаНМА.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияСчетовБухгалтерскогоУчетаНМА(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                    // <Дата>
	+ "Организация,"               // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"       // <СправочникСсылка.НематериальныеАктивы>
	+ "СчетНачисленияАмортизации," // <ПланСчетовСсылка.Хозрасчетный> - счет начисления амортизации ОС
	+ "СчетУчета";                 // <ПланСчетовСсылка.Хозрасчетный> - счет учета ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции


Процедура СформироватьДвиженияИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Добавить();
	Движение.Период                  = Реквизиты.Период;
	Движение.НематериальныйАктив     = Реквизиты.НематериальныйАктив;
	Движение.Организация             = Реквизиты.Организация;
	Движение.СпособОтраженияРасходов = Реквизиты.СпособОтраженияРасходов;

	Движения.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыИзменениеСпособовОтраженияРасходовПоАмортизацииНМАБУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                // <Дата>
	+ "Организация,"                           // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"                           // <СправочникСсылка.НематериальныеАктивы
	+ "СпособОтраженияРасходов"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способы
		// отражения расходов по амортизации ОС

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Первоначальниые сведения НМА

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Добавить();
	Движение.Период                      = Реквизиты.Период;
	Движение.НематериальныйАктив         = Реквизиты.НематериальныйАктив;
	Движение.Организация                 = Реквизиты.Организация;
	Движение.ПервоначальнаяСтоимость     = Реквизиты.СтоимостьБУ;
	Движение.НачислятьАмортизацию        = Реквизиты.НачислятьАмортизациюБУ;
	Движение.СпособНачисленияАмортизации = Реквизиты.СпособНачисленияАмортизацииБУ;
	Движение.СпособПоступления           = Реквизиты.СпособПоступления;
	Движение.СрокПолезногоИспользования  = Реквизиты.СрокПолезногоИспользованияБУ;
	Движение.Коэффициент                 = Реквизиты.КоэффициентБУ;
	Если Реквизиты.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции тогда
		Движение.ОбъемПродукцииРаботДляВычисленияАмортизации = Реквизиты.ОбъемПродукцииРаботДляВычисленияАмортизации;
	КонецЕсли;

	Движения.ПервоначальныеСведенияНМАБухгалтерскийУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАБУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                      // <Дата>
	+ "НематериальныйАктив,"           
	+ "Организация,"                 // <СправочникСсылка.Организации>
	+ "СтоимостьБУ,"           
	+ "НачислятьАмортизациюБУ,"           
	+ "СпособНачисленияАмортизацииБУ," // <ПеречислениеСсылка.СпособыНачисленияАмортизацииНМА> - способ начисления
		// амортизации НМА по бухгалтерскому учету
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации,"           
	//+ "ПорядокПогашенияСтоимости,"   
	+ "СрокПолезногоИспользованияБУ,"   
	+ "КоэффициентБУ,"   
	+ "СпособПоступления";           // <ПеречислениеСсылка.СпособыПоступленияАктивов> - способ поступления НМА

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Добавить();
	Движение.Период                                        = Реквизиты.Период;
	Движение.Организация                                   = Реквизиты.Организация;
	Движение.НематериальныйАктив                           = Реквизиты.НематериальныйАктив;
	Движение.НачислятьАмортизацию                          = Реквизиты.НачислятьАмортизациюНУ;
	Движение.ПервоначальнаяСтоимостьНУ                     = Реквизиты.СтоимостьНУ;
	Движение.СрокПолезногоИспользования                    = Реквизиты.СрокПолезногоИспользованияНУ;
	Движение.ПорядокВключенияСтоимостиВСоставРасходов      = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов;
	Движение.СпособОтраженияРасходовПриВключенииВСтоимость = Реквизиты.СпособОтраженияРасходовПриВключенииВСтоимость;

	Движения.ПервоначальныеСведенияНМАНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАНУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                        // <Дата>
	+ "Организация,"                                   // <СправочникСсылка.Организации>
	+ "НачислятьАмортизациюНУ,"                        // <Булево>
	+ "СрокПолезногоИспользованияНУ,"                  // <Число, 4, 0> - срок полезного использования ОС для целей начисления
	                                                   // амортизации по налоговому учету
	+ "НематериальныйАктив,"                           // <СправочникСсылка.НематериальныхАктивов>
	+ "СтоимостьНУ,"                                   // <Число, 15, 2> - первоначальная стоимость ОС по данным налогового учета
	+ "ПорядокВключенияСтоимостиВСоставРасходов,"      // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
	+ "СпособОтраженияРасходовПриВключенииВСтоимость"; // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьТаблицуПервоначальныеСведенияНМАУСН(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыПервоначальныеСведенияНМАУСН(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	ОтражатьВНалоговомУчетеУСН = УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период);
	
	Если ОтражатьВНалоговомУчетеУСН Тогда
		ТаблицаПервоначальныеСведенияНМАУСН = Параметры.ТаблицаПервоначальныеСведенияНМАУСН.Скопировать();
	Иначе
		ТаблицаПервоначальныеСведенияНМАУСН = Параметры.ТаблицаПервоначальныеСведенияНМАУСН.СкопироватьКолонки();
	КонецЕсли;

	Возврат ТаблицаПервоначальныеСведенияНМАУСН;

КонецФункции

Функция ПодготовитьПараметрыПервоначальныеСведенияНМАУСН(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияНМА

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныхАктивов>
	+ "СуммаУСН";            // <Число, 0, 0> - стоимость НМА по данным УСН

	Параметры.Вставить("ТаблицаПервоначальныеСведенияНМАУСН",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияНМА, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "ДатаПриобретения,"							 // <Дата> Дата приобретения ОС					 
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияРегистрацияПервоначальныхСведенийНМАУСН(ТаблицаОплатНМАУСН, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАУСН(ТаблицаОплатНМАУСН, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Движение = Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН.Добавить();
	Движение.Период                     = Реквизиты.Период;
	Движение.НематериальныйАктив        = Реквизиты.НематериальныйАктив;
	Движение.Организация                = Реквизиты.Организация;
	Движение.ПервоначальнаяСтоимостьУСН = Реквизиты.СтоимостьУСН;
	Движение.СрокПолезногоИспользования = Реквизиты.СрокПолезногоИспользованияУСН;
	Движение.ДатаПриобретения           = Реквизиты.ДатаПриобретения;
	Движение.ПорядокВключенияСтоимостиВСоставРасходовУСН = Реквизиты.ПорядокВключенияСтоимостиВСоставРасходовУСН;
	
	Движения.ПервоначальныеСведенияНМАНалоговыйУчетУСН.Записывать = Истина;

	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаОплатНМА Цикл
		
		Если СтрокаТаблицы.СуммаОплаты <> 0 Тогда
			
			Движение = Движения.ОплатыНМАДляУСН.Добавить();
			Движение.Период              = СтрокаТаблицы.ДатаОплаты;
			Движение.Организация         = Реквизиты.Организация;
			Движение.НематериальныйАктив = Реквизиты.НематериальныйАктив;
			Движение.ДатаОплаты          = СтрокаТаблицы.ДатаОплаты;
			Движение.СуммаОплаты         = СтрокаТаблицы.СуммаОплаты;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.ОплатыНМАДляУСН.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыРегистрацияПервоначальныхСведенийНМАУСН(ТаблицаОплатНМАУСН, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОСУСН
	СписокОбязательныхКолонок = ""
	+ "ДатаОплаты,"
	+ "СуммаОплаты"; // <Число, 0, 0> - стоимость НМА по данным УСН

	Параметры.Вставить("ТаблицаОплатНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОплатНМАУСН, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                      // <Дата>
	+ "Организация,"                                 // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"                         // <СправочникСсылка.НематериальныхАктивов>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН> -
	                                                 // порядок включения стоимости ОС в состав расходов по УСН
	+ "СтоимостьУСН,"
	+ "ДатаПриобретения,"                            // <Дата> Дата приобретения ОС
	+ "СрокПолезногоИспользованияУСН";               // <Число, 4, 0> - срок полезного использования для целей
	                                                 // начисления амортизации по УСН

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Параметры амортизации НМА (НУ)

Процедура СформироватьДвиженияНачислениеАмортизацииНМАСпециальныйКоэффициентНУ(ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Реквизиты = ТаблицаРеквизиты[0];
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеАмортизацииНМАСпециальныйКоэффициентНУ(ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];

	Движение = Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Добавить();
	Движение.Период                  = Реквизиты.Период;
	Движение.Организация             = Реквизиты.Организация;
	Движение.НематериальныйАктив     = Реквизиты.НематериальныйАктив;
	Движение.СпециальныйКоэффициент  = Реквизиты.СпециальныйКоэффициентНУ;

	Движения.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизацииНМАСпециальныйКоэффициентНУ(ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                   // <Дата>
	+ "Организация,"              // <СправочникСсылка.Организации>
	+ "НематериальныйАктив,"      // <СправочникСсылка.НематериальныхАктивов>
	+ "СпециальныйКоэффициентНУ"; // <Число, 5, 2> - специальный коэффциент для начисления амортизации НМА (НУ)

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Списание НМА на расходы (НУ) при принятии к учету

Функция ПодготовитьТаблицуСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты, Отказ) Экспорт

	Параметры = ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияНМА, ТаблицаРеквизиты);

	Реквизиты = Параметры.Реквизиты[0];

	Если НЕ Реквизиты.ПлательщикНалогаНаПрибыль
			ИЛИ Реквизиты.ПорядокВключенияСтоимостиВСоставРасходов <> Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияНМА.СкопироватьКолонки();
	Иначе
		ТаблицаДляСписания = Параметры.ТаблицаПервоначальныеСведенияНМА;
	КонецЕсли;

	ТаблицаДляСписания.Колонки.НематериальныйАктив.Имя = "ОбъектУчета";
	ТаблицаДляСписания.Колонки.Добавить("НаправлениеАмортизации",
		Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СпособыОтраженияРасходовПоАмортизации, "НаправлениеАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СчетНачисленияАмортизации");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.СчетУчета, "СчетНачисленияАмортизации");
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииБУ", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииПР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.Добавить("СуммаАмортизацииВР", ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаДляСписания.Колонки.СтоимостьНУ.Имя = "СуммаАмортизацииНУ";
	ТаблицаДЛяСписания.Колонки.Добавить("Подразделение");
	ТаблицаДляСписания.ЗаполнитьЗначения(Реквизиты.Подразделение, "Подразделение");
	ТаблицаДляСписания.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));

	// Распределение стоимости по направлениям.
	ТаблицаЗатратПоАмортизации = 
		УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаДляСписания, Параметры.Реквизиты, Отказ);

	Для каждого СтрокаНМА Из ТаблицаЗатратПоАмортизации Цикл
		СтрокаНМА.СуммаВР = СтрокаНМА.СуммаВР - СтрокаНМА.СуммаНУ;
	КонецЦикла;

	Возврат ТаблицаЗатратПоАмортизации;

КонецФункции

Функция ПодготовитьПараметрыСписаниеНаРасходыНУ(ТаблицаПервоначальныеСведенияОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПервоначальныеСведенияОС

	СписокОбязательныхКолонок = ""
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы>
	+ "СтоимостьНУ";         // <Число, 15, 2> - сумма, относимая на расходы (НУ)

	Параметры.Вставить("ТаблицаПервоначальныеСведенияНМА",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПервоначальныеСведенияОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                                   // <Дата>
	+ "Организация,"                              // <СправочникСсылка.Организации>
	+ "ПлательщикНалогаНаПрибыль,"                // <Булево>
	+ "Подразделение,"                            // <Ссылка на справочник подразделений>
	+ "ПорядокВключенияСтоимостиВСоставРасходов," // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ> -
	                                              // порядок включения стоимости НМА в состав расходов (НУ)
	+ "СпособыОтраженияРасходовПоАмортизации,"    // <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации> - способ
	                                              // отрадения расходов по списанию НМА (НУ)
	+ "Регистратор,"                              // <ДокументСсылка.*>
	+ "СчетУчета,"                                 // <ПланСчетовСсылка.Хозрасчетный> - счет на котором формируется стоимость НМА
	+ "ИмяСписка";                                // <Строка>
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПЕРЕДАЧА НМА

// Параметры выручки НМА

Процедура СформироватьДвиженияПоВыручкеНМА(ТаблицаРеквизиты, ТаблицаРеализованныеТоварыУслуги, Движения, Отказ) Экспорт

	Если ТаблицаРеализованныеТоварыУслуги[0].СуммаРуб = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыВыручкиНМА(ТаблицаРеквизиты, ТаблицаРеализованныеТоварыУслуги);
	Реквизиты = Параметры.Реквизиты[0];
	СтрокаТаблицыНМА = Параметры.РеализованныеТоварыУслуги[0];
	
	ПрименениеПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период);
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период       = Реквизиты.Период;
	Проводка.Организация  = Реквизиты.Организация;
	Проводка.Сумма        = СтрокаТаблицыНМА.СуммаБУ;
	Проводка.Содержание   = СтрокаТаблицыНМА.Содержание;
	
	Проводка.СчетДт      = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",        Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",           Реквизиты.ДоговорКонтрагента);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами", Реквизиты.Регистратор);
	
	Если Реквизиты.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
		//Если документ в иностранной валюте, он может быть выписан только в валюте взаиморасчетов
		Проводка.ВалютаДт        = Реквизиты.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаДт = СтрокаТаблицыНМА.СуммаВзаиморасчетов;
		
	КонецЕсли;
	
	Проводка.СчетКт = СтрокаТаблицыНМА.СчетДоходов;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаТаблицыНМА.Субконто);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтавкиНДС", СтрокаТаблицыНМА.СтавкаНДС);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РеализуемыеАктивы", Реквизиты.НематериальныйАктив);
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, Реквизиты.ПодразделениеОрганизации, Реквизиты.ПодразделениеОрганизации);
	
	Если Реквизиты.ОтражатьВНалоговомУчете Тогда
		
		СуммаНУДт = СтрокаТаблицыНМА.СуммаБУ;
		СуммаНУКт = СтрокаТаблицыНМА.СуммаБУ - СтрокаТаблицыНМА.СуммаНДСРуб;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
			СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУДт, , , Проводка, ПрименениеПБУ18);
		
	КонецЕсли;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыВыручкиНМА(ТаблицаРеквизиты, ТаблицаРеализованныеТоварыУслуги)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"              // <Дата>
	+ "Регистратор,"         // <ДокументСсылка.*>
	+ "Организация,"         // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"
	+ "НематериальныйАктив," // <СправочникСсылка.НематериальныеАктивы>
	+ "Контрагент,"
	+ "ДоговорКонтрагента,"
	+ "ОтражатьВНалоговомУчете,"
	+ "СчетУчетаРасчетовСКонтрагентом,"
	+ "СчетРасходов,"
	+ "СчетУчетаНДСПоРеализации";

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
		
	// Подготовка таблицы реализованных товаров и услуг:
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"
	+ "НомерСтроки,"
	+ "Содержание,"
	+ "Количество,"
	+ "СуммаВзаиморасчетов,"
	+ "СуммаРуб,"
	+ "СуммаБУ,"
	+ "СуммаНДСРуб,"
	+ "СчетУчета,"
	+ "СчетДоходов,"
	+ "Субконто,"
	+ "СтавкаНДС,"
	+ "СчетУчетаНДСПоРеализации,"
	+ "Контрагент,"
	+ "ВалютаВзаиморасчетов,"
	+ "Подразделение"
	;
	Параметры.Вставить("РеализованныеТоварыУслуги", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеализованныеТоварыУслуги, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// СОСТОЯНИЕ НМА

//Получает документ и дату для указанного состояния нематериального актива по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияНМАОрганизаций.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|ГДЕ
		|	СостоянияНМАОрганизаций.НематериальныйАктив = &НМА
		|	И СостоянияНМАОрганизаций.Организация = &Организация
		|	И СостоянияНМАОрганизаций.Состояние = &СостояниеНМА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияНМАОрганизаций.Период УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

Функция ОбработатьПодборНематериальныхАктивов(Знач КоллекцияНМА, Знач ВыбранноеЗначение) Экспорт
	
	ТаблицаНМА = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	
	ИсходныеДанные = КоллекцияНМА.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("НематериальныйАктив");
	
	ДобавленныеСтроки = Новый Массив;
	
	КоллекцияНМА.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаНМА Цикл
		ЭлементКоллекции = КоллекцияНМА.Добавить();
		
		СтрокаИсходныхДанных = ИсходныеДанные.Найти(СтрокаТаблицы.НематериальныйАктив, "НематериальныйАктив");
		Если СтрокаИсходныхДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаИсходныхДанных);
		Иначе
			ДобавленныеСтроки.Добавить(ЭлементКоллекции);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции