////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Показывает оповещение пользователю о наличии новых документов в сервисе 1С-ЭДО
//
Процедура ОповеститьОНовыхДокументахЭДО() Экспорт
	
	НавигационнаяСсылка = НавигационнаяСсылкаТекущиеДелаЭДО();
		ЗаголовокОповещения = НСтр("ru ='Сервис 1С-ЭДО'");
		ТекстОповещения = НСтр("ru = 'Доступны к получению новые документы'");
		
	ПоказатьОповещениеПользователя(ЗаголовокОповещения,
			НавигационнаяСсылка,
			ТекстОповещения,
			БиблиотекаКартинок.ЭмблемаСервиса1СЭДО,
			СтатусОповещенияПользователя.Важное, 
			"ОповещениеОНовыхДокументахЭДО");
	
КонецПроцедуры

// Оповещает формы об изменении данных, влияющих на текущее состояние дел по ЭДО.
//
Процедура ОповеститьОбИзмененииТекущихДелПоЭДО() Экспорт
	
	Оповестить("ОбновитьТекущиеДелаЭДО");
	
КонецПроцедуры

// Подключает, отключает оповещение о новых ЭД.
//
// Параметры:
//  Включить - Булево - новое положение переключателя.
//
Процедура ИзменитьОповещенияЭДО(Включить = Ложь) Экспорт
	
	Если Включить Тогда
		ПодключитьОбработчикОжидания("ОповеститьОНовыхЭД", 15);
	Иначе
		ОтключитьОбработчикОжидания("ОповеститьОНовыхЭД");
	КонецЕсли;
	
КонецПроцедуры

#Область КомандыЭДО

// Процедура - Выполнить команду формы документа
// Выполняет подключаемую команду ЭДО
// Параметры:
//  Объект		 - ДокументОбъект - Основной реквизит формы.
//  Форма		 - Форма - Форма документа ИБ.
//  ИмяКоманды	 - строка - Идентификатор выполняемой команды.
//
Процедура ВыполнитьКомандуФормыДокумента(Объект, Форма, ИмяКоманды) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		РезультатПроверки = Неопределено;
		ОбменСКонтрагентамиКлиентПереопределяемый.ОбъектМодифицирован(Объект, Форма, РезультатПроверки);
		Если РезультатПроверки = Неопределено Тогда
			
			Если Форма.Модифицированность ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
				СтрПроведен = ?(Проведен, НСтр("ru = 'записать и провести.
				|Записать и провести?'"), НСтр("ru = 'записать.
				|Записать?'"));
				
				ШаблонСообщения = НСтр("ru = 'Документ изменен. Для формирования электронного документа его необходимо %1'");
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПроведен);
				
				ДополнительныеПараметры = Новый Структура();
				ДополнительныеПараметры.Вставить("СсылкаНаОбъект", Объект.Ссылка);
				ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
				ДополнительныеПараметры.Вставить("Форма", Форма);
				ДополнительныеПараметры.Вставить("Проведен", Проведен);
				
				Обработчик = Новый ОписаниеОповещения( "ЗаписатьВФорме", ЭтотОбъект, ДополнительныеПараметры);
				
				ПоказатьВопрос( Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена,
					НСтр("ru = 'Документ изменен.'"));
				
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	ВыполнитьКомандуЭДО(Объект.Ссылка, ИмяКоманды);
	
КонецПроцедуры

// Запись в форме.
//
// Параметры:
//  Ответ					 - КодВозвратаДиалога - результат диалога.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ЗаписатьВФорме(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		Проведен = ДополнительныеПараметры.Проведен;
		Форма = ДополнительныеПараметры.Форма;
		
		Если Проведен Тогда
			Попытка
				Отказ = Не Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			Исключение
				ПоказатьПредупреждение(, НСтр("ru = 'Операция не выполнена.'"));
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Не Форма.ЗаписатьВФорме();
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = ДополнительныеПараметры.СсылкаНаОбъект;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	ВыполнитьКомандуЭДО(СсылкаНаОбъект, ИмяКоманды);
	
	
КонецПроцедуры

// Открывает форму с деревом электронных документов для данного владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка - ссылка на объект ИБ, электронные документы которого надо увидеть,
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра дерева электронных документов.
//  ЭД - Ссылка - ссылка на электронный документ, используется для позиционирования текущей строки дерева на переданном ЭД.
//
Процедура ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено, ЭД = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьДеревоЭД(СсылкаНаОбъект, ПараметрыОткрытия, ЭД);
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме печати БСП.
//
// Параметры:
//  НавигационнаяСсылкаФорматированнойСтроки - Строка - текст навигационной ссылки;
//  МассивСсылок - Массив - ссылка на объекты ИБ, которые передали на печать.
//
Процедура ОбработкаНавигационнойСсылкиВФормеПечатиБСП(НавигационнаяСсылкаФорматированнойСтроки, МассивСсылок) Экспорт
	
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(МассивСсылок[0]);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает, утверждает, подписывает и отправляет электронный документ. Выполняются только те действия,
// которые действительно требуются для электронного документа (еще не были выполнены и допустимы).
//
// Параметры:
//  ПараметрКоманды    - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД                 - Ссылка - электронный документ, который надо подписать, отправить. Указывается в том случае, если
//                                необходимо выполнить действия с конкретной транзакцией электронного документа, например,
//                                извещением о получении.
//  ОписаниеОповещения - ОписаниеОповещения - обработчик оповещения, который вызывается по окончании операции.
//                       В качестве результата передается Истина, если удалось выполнить действия хотя бы по одному объекту.
//
Процедура СформироватьПодписатьОтправитьЭД(ПараметрКоманды, ЭД = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьУтвердитьПодписатьОтправить",, ЭД, ОписаниеОповещения);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить.
//  Показывать - Булево - если Истина, то электронный документ будет открыть после формирования.
//
Процедура СформироватьНовыйЭД(ПараметрКоманды, Показывать = Истина) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Показывать Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "СформироватьПоказать");
	Иначе
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "Сформировать");
	КонецЕсли;
	
КонецПроцедуры

// Процедура отправляет повторно электронный документ.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ЭД - Ссылка - электронный документ, который надо подписать, отправить.
//
Процедура ОтправитьПовторноЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Если ЭД = Неопределено Тогда
			Возврат;
		Иначе
			МассивСсылок = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивСсылок, "ОтправитьПовторно", , ЭД);
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
//
Процедура ОтправитьПолучитьОбменСКонтрагентами() Экспорт
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьПолучитьОбменСКонтрагентами();
	
КонецПроцедуры

// Процедура открывает форму администрирования обмена электронными документами.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на объект ИБ, электронные документы которого надо отправить,
//  ПараметрыВыполненияКоманды - Структура - дополнительные параметры просмотра.
//
Процедура ОткрытьФормуОбменаЭлектроннымиДокументами(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИмяФормы = "ОбменЭлектроннымиДокументами";
	
	ПараметрыФормы = Новый Структура("ТекущийРаздел", ИмяФормы);
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияЭДО.Форма.ОбменЭлектроннымиДокументами",
		ПараметрыФормы,
		ПараметрыВыполненияКоманды.Источник,
		ПараметрыВыполненияКоманды.Уникальность,
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открывается форма списка только с закладкой Настройки ЭДО с контрагентами.
//
Процедура ОткрытьФормуНастроекЭДОСКонтрагентами() Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкиЭДОСКонтрагентами", Истина);
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов.Форма.НастройкиЭДО", ПараметрыФормы);
	
КонецПроцедуры

// Запускает обработку "Текущие дела ЭДО".
//
Процедура ОткрытьТекущиеДелаЭДО() Экспорт
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("ОбщийМодуль.ОбменСКонтрагентамиКлиент.ОткрытьТекущиеДелаЭДО");
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО");
	
КонецПроцедуры

// Открывает актуальный ЭД по документу ИБ.
//
// Параметры:
//  ПараметрКоманды - Ссылка - ссылка на документ ИБ;
//  Источник - ФормаКлиентскогоПриложения - источник открытия;
//  ПараметрыОткрытия - Структура - дополнительные параметры просмотра.
//
Процедура ОткрытьАктуальныйЭД(ПараметрКоманды, Источник = Неопределено, ПараметрыОткрытия = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Источник);

	ОбработчикОповещения = Новый ОписаниеОповещения("ОткрытьАктуальныйЭД", ОбменСКонтрагентамиСлужебныйКлиент, ДополнительныеПараметры);
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрКоманды", МассивСсылок); 
	ДополнительныеПараметры.Вставить("Обработчик", ОбработчикОповещения);
	ДополнительныеПараметры.Вставить("Источник", Источник);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ВыполнитьПроверкуПроведенияДокументов(ДополнительныеПараметры);
	
КонецПроцедуры

// Процедура принудительно закрывает электронный документооборот для массива ссылок на документы.
//
// Параметры:
//  МассивВладельцевЭД - Массив - содержит ссылки на документы ИБ, для которых требуется закрыть ЭДО.
//
Процедура ЗакрытьПринудительноЭДО(МассивВладельцевЭД) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(МассивВладельцевЭД);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСсылок", МассивСсылок);
	
	Обработчик = Новый ОписаниеОповещения("ЗакрытьПринудительноРезультатВводаСтроки", ЭтотОбъект, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбменСКонтрагентамиСлужебныйКлиент.ДополнительныеПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причину закрытия документооборота'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть документооборот'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для закрытия документооборота по выбранным ЭД необходимо указать причину закрытия.'");
	ОбменСКонтрагентамиСлужебныйКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

// Отклоняет основной файл электронного документа, являющегося актуальным для переданного учетного.
// Если в процессе выполнения метода возникают какие-то ошибки, они обрабатываются библиотекой, вызывающей стороне не возвращаются.
//
// Параметры:
//  Документ		     - Ссылка - ссылка на объект ИБ, основной файл электронного документа которого нужно отклонить.
//                         Имеет смысл передавать только входящие документы.
//  ОписаниеОповещения	 - ОписаниеОповещения - оповещение вызывается по окончании выполнения операции. В качестве результата
//                         передается "Истина" в случае, если отклонение выполнено успешно, "Ложь" - в противном случае.
//
Процедура ОтклонитьЭД(Документ, ОписаниеОповещения = Неопределено) Экспорт

	ОсновнойФайлЭлектронногоДокумента = ОбменСКонтрагентамиСлужебныйВызовСервера.ОсновнойФайлЭлектронногоДокументаПоДокументуУчета(Документ);
	
	Если ЗначениеЗаполнено(ОсновнойФайлЭлектронногоДокумента) Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(ОсновнойФайлЭлектронногоДокумента, Истина,, ОписаниеОповещения);
	Иначе
		Если ЗначениеЗаполнено(ОписаниеОповещения) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конвертирует переданные двоичные данные в произвольный электронный документ.
//
// Параметры:
//  ПараметрыФормирования	 - Структура - описывает стороны электронного документооборота:
//                                         * Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, которому нужно отправить документ.
//                                         * Организация - ОпределяемыйТип.Организация - организация, от имени которой нужно отправить документ.
//                                         * ДоговорКонтрагента - ОпределяемыйТип.ДоговорСКонтрагентом - договор, по которому отправляется документ (необязателен).
//  ПараметрыФайла           - Структура - описывает файл, который нужно отправить:
//                                         * ИмяФайла - имя файла вместе с расширением.
//                                         * АдресХранилища - адрес временного хранилища, в котором содержатся двоичные данные файла.
// Возвращаемое значение:
//  ДокументСсылка.ЭлектронныйДокументИсходящий - Истина - Ссылка на сформированный произвольный документ.
//  Неопределено - Если произвольный документ не сформирован.
//
Функция НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла) Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебныйКлиент.НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла)
	
КонецФункции

#Область КомандыЭДОБыстрыйОбмен

// Открывает форму выгрузки ЭД в файл.
//
// Параметры:
//  ПараметрыЭД - Структура - содержит следующие поля:
//      * Ключ - Строка - "ВыгрузитьВФайл", обязательный параметр, определяет режим открытия формы выгрузи документа.
//      * ЗначениеКлюча - Структура - структура ЭД с полями:
//         ** ВидЭД -  перечисление ВидыЭД (файл быстрого обмена формируется только для ЭД ПрайсЛист);
//         ** АдресТаблицыЦен - адрес во временном хранилище, по которому находится таблица значений, источник данных;
//         ** ДатаФормирования - дата формирования ЭД;
//         ** ВладелецЭД - организация которой принадлежит ЭД;
//         ** Организация - организация от имени которой формируется ЭД.
//
Процедура СформироватьФайлБыстрогоОбмена(ПараметрыЭД) Экспорт
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ВыгрузкаЭлектронныхДокументовВФайл", ПараметрыЭД);
	
КонецПроцедуры

// Процедура создает новый электронный документ.
//
// Параметры:
//  ПараметрКоманды - СсылкаНаОбъект - ссылка на объект ИБ, электронные документы которого надо отправить.
//
Процедура БыстрыйОбменСформироватьНовыйЭД(ПараметрКоманды) Экспорт
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура("СтруктураЭД", МассивСсылок);
	ФормаПросмотраЭД = ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ВыгрузкаЭлектронныхДокументовВФайл", Параметры);
	
КонецПроцедуры

// Процедура создает новый электронный каталог.
//
Процедура БыстрыйОбменСформироватьНовыйЭДКаталог() Экспорт
	
	НазваниеСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	
	Обработчик = Новый ОписаниеОповещения("СформироватьНовыйЭДКаталог", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму("Справочник." + НазваниеСправочникаОрганизации + ".ФормаВыбора",,,,,, Обработчик, Режим);
	
КонецПроцедуры

// Загружает файл электронного документа в данные ИБ, используется для вывода команды в интерфейсы.
//
Процедура БыстрыйОбменЗагрузитьЭДИзФайла() Экспорт
	
	БыстрыйОбменЗагрузитьЭД();
	
КонецПроцедуры

// Загружает файл электронного документа в документ ИБ.
//
// Параметры:
//  СсылкаНаДокумент - Ссылка - ссылка на объект ИБ, данные которого необходимо перезаполнить.
//
Процедура БыстрыйОбменЗагрузитьЭД(СсылкаНаДокумент = Неопределено) Экспорт
	
	Файл = Неопределено;
	АдресВХранилище = Неопределено;
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПомещениеФайла(Обработчик, АдресВХранилище, Файл, Истина, УникальныйИдентификатор);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПомощникиПодключенияЭДО

// Запускает мастер-помощник по подключению организации к сервису 1С-ЭДО.
//
Процедура ПомощникПодключенияКСервису1СЭДО() Экспорт
	
	СпособыОЭД = Новый Массив;
	СпособыОЭД.Добавить(ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезСервис1СЭДО"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СпособыОбменаЭД", СпособыОЭД);
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПередачаЭДВФНС

// Получает документы информационной базы по заданным критериям отбора.
// Процедура предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - Структура - параметры отбора для формы выбора документов ИБ.
//
Процедура ПолучитьСвойстваДокументовИБДляПередачиФНС(СтруктураОтбора = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияВызова", 3);
	
	Если СтруктураОтбора <> Неопределено Тогда
		Если СтруктураОтбора.Свойство("ВидДокумента") Тогда
			ПараметрыФормы.Вставить("ВидДокумента", СтруктураОтбора.ВидДокумента);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Организация") Тогда
			ПараметрыФормы.Вставить("Организация", СтруктураОтбора.Организация);
		КонецЕсли;
		
		Если СтруктураОтбора.Свойство("Контрагент") Тогда
			ПараметрыФормы.Вставить("Контрагент", СтруктураОтбора.Контрагент);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ВыгрузкаЭлектронныхДокументовДляФНС", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ПерезаполнениеДокументаИБДаннымиЭД

// Перезаполняет документ ИБ на основании актуального ЭД.
//
// Параметры:
//  ПараметрКоманды - Массив, Ссылка - объекты информационной базы.
//  ЭД - ДокуменСсылка.ВходящийЭлектронныйДокумент - электронный документ, номенклатура которого сопоставляется.
//  СпособОбработки - Строка - способ обработки входящего электронного документа.
//
Процедура ПерезаполнитьДокумент(ПараметрКоманды, ЭД = Неопределено, СпособОбработки = "") Экспорт
	
	ОчиститьСообщения();
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЭД", ЭД);
	ПараметрыЗаполнения.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыЗаполнения.Вставить("СпособОбработки", СпособОбработки);
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	
	Результат = ОбменСКонтрагентамиСлужебныйВызовСервера.ПерезаполнитьДокумент(ПараметрыЗаполнения, КонтекстОперации);
	
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	
	Если Результат.Отказ Тогда
		
		Если Результат.НетПраваОбработкиЭД Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если Результат.МассивДокументов.Количество() > 0 Тогда
		
		Оповестить("ОбновитьДокументИБПослеЗаполнения", Результат.МассивДокументов);
		
		Если Результат.МассивДокументов.Количество() = 1 Тогда
			ТекстСостоянияВывод = НСтр("ru = 'Документ перезаполнен.'");
		Иначе
			ТекстСостоянияВывод = НСтр("ru = 'Документы перезаполнены (%1).'");
			ТекстСостоянияВывод = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостоянияВывод, 
				Результат.МассивДокументов.Количество());
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФорм

// Функция - Параметры "ПриОткрытии" формы справочника.
// 
// Возвращаемое значение:
//  Структура - параметры, которые необходимо передать в метод ОбменСКонтрагентамиКлиент.ПриОткрытии.
//    * Форма - ФормаКлиентскогоПриложения - форма справочника или документа.
//    * МестоРазмещенияКоманд - ЭлементФормы - элемент формы "группа", в котором должны отображаться команды ЭДО, необязательный параметр.
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево - нужно устанавливать в Истина в форме прикладного справочника организаций.
//
Функция ПараметрыПриОткрытии() Экспорт

	ПараметрыОповещения = Новый Структура("Форма, МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	
	Возврат ПараметрыОповещения;

КонецФункции


// Вызывается из обработчика события "ПриОткрытии" формы списка и формы документа.
// Параметры:
//  Параметры - ФормаКлиентскогоПриложения - Форма документа или форма списков документов (вариант передачи параметра устарел).
//            - Структура - см. ОбменСКонтрагентамиКлиент.ПараметрыПриОткрытии. 
//
Процедура ПриОткрытии(Параметры) Экспорт
	
	Если ТипЗнч(Параметры) = Тип("ФормаКлиентскогоПриложения") Тогда
		ПараметрыПриОткрытии = ПараметрыПриОткрытии();
		ПараметрыПриОткрытии.Форма = Параметры;
	Иначе 
		ПараметрыПриОткрытии = Параметры;
	КонецЕсли;
	
	ПараметрыПриОткрытии.Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияЭДО", ВремяОжиданияЭДО(), Истина);
	
	Если ПараметрыПриОткрытии.ЕстьОбработчикОбновитьКомандыЭДО Тогда
		НачатьОбновлениеКоманд(ПараметрыПриОткрытии.Форма);
	КонецЕсли;
	
КонецПроцедуры

// Получение параметров оповещения для формы документ.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента:
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * ДокументСсылка - ДокументСсылка - Ссылка на документ.
//    * ДекорацияСостояниеЭДО - ЭлементФормы - элемент формы "декорация", в заголовке которого будет отображаться состояние ЭДО.
//    * ГруппаСостояниеЭДО - ЭлементФормы - элемент формы "группа", которому может принадлежать ДекорацияСостояниеЭДО, необязательный параметр.
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю, в котором отображаются команды ЭДО.
//
Функция ПараметрыОповещенияЭДО_ФормаДокумента() Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО, МестоРазмещенияКоманд");
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ОбработкаОповещения" формы документа.
//
// Параметры:
//  ИмяСобытия - Строка - Имя события.
//  Параметр - Произвольный - Параметр сообщения. Могут быть переданы любые необходимые данные.
//  Источник - Произвольный - Источник события. Например, в качестве источника может быть указана другая форма.
//  ПараметрыОповещения - Структура - см. ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента.
//
Процедура ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД"
		ИЛИ ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда
		
		ДекорацияСостояниеЭДО = ПараметрыОповещения.ДекорацияСостояниеЭДО;
		ГруппаСостояниеЭДО = ПараметрыОповещения.ГруппаСостояниеЭДО;
		ДокументСсылка = ПараметрыОповещения.ДокументСсылка;
		Форма = ПараметрыОповещения.Форма;
		
		Если ДекорацияСостояниеЭДО = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ДокументыУчета")
			И ТипЗнч(Параметр.ДокументыУчета) = Тип("Массив") Тогда
			
			Если Параметр.ДокументыУчета.Найти(ДокументСсылка) = Неопределено Тогда
				
				ВладельцыИЭлектронныеДокументы = ОбменСКонтрагентамиСлужебныйВызовСервера.ВладельцыИЭлектронныеДокументы(, Параметр.ДокументыУчета);
				Если ВладельцыИЭлектронныеДокументы.Получить(ДокументСсылка) = Неопределено Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбменСКонтрагентамиКлиентСервер.ЗаполнитьСостояниеЭДО(Форма, ДокументСсылка, ДекорацияСостояниеЭДО, ГруппаСостояниеЭДО);
		
	ИначеЕсли ИмяСобытия = "ОбновитьНаличиеЭДО" Тогда
		
		Форма = ПараметрыОповещения.Форма;
		МестоРазмещенияКоманд = ПараметрыОповещения.МестоРазмещенияКоманд;
		ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

// Получение параметров оповещения для формы списка.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента.
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * ИмяДинамическогоСписка - Строка - Наименование динамического списка формы, отображающего "СостояниеЭД".
//                               Возможно указание нескольких списков через ("СписокИсходящий, СписокВходящий").
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю, в котором отображаются команды ЭДО.
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево - нужно устанавливать в Истина в форме прикладного справочника организаций.
//    * ЕстьОбработчикОбновленияВидимостиСостоянияЭДО - Булево - нужно устанавливать в Истина в формах списка внутрених документов ЭДО.
//
Функция ПараметрыОповещенияЭДО_ФормаСписка() Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма, ИмяДинамическогоСписка, МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновленияВидимостиСостоянияЭДО", Ложь);
	
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ОбработкаОповещения" формы списка документов.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Параметр - Произвольный - параметр сообщения, могут быть переданы любые необходимые данные.
//  Источник - Произвольный - источник события. Например, в качестве источника может быть указана другая форма.
//  ПараметрыОповещения - Структура - см. ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка.
//
Процедура ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
 	Если ИмяСобытия = "ОбновитьСостояниеЭД"
		Или ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда
		
		ИмяДинамическогоСписка = ПараметрыОповещения.ИмяДинамическогоСписка;
		Форма = ПараметрыОповещения.Форма;
		
		МассивСписков = СтрРазделить(ИмяДинамическогоСписка, ", ", Ложь);
		Для Каждого ИмяРеквизита Из МассивСписков Цикл
			Форма.Элементы[ИмяРеквизита].Обновить();
		КонецЦикла;
		Если ПараметрыОповещения.ЕстьОбработчикОбновитьКомандыЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьНаличиеЭДО" Тогда
		
		МестоРазмещенияКоманд = ПараметрыОповещения.МестоРазмещенияКоманд;
		Форма = ПараметрыОповещения.Форма;
		ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И Источник = "ИспользоватьВнутренниеДокументыЭДО" Тогда
				
		Если ПараметрыОповещения.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО Тогда 
			Форма = ПараметрыОповещения.Форма;
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьСостоянияЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьВидимостьСостоянияЭДО", 0.2, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получение параметров оповещения для формы справочника.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСправочника.
//    * Форма - ФормаКлиентскогоПриложения - форма документа.
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю, в котором отображаются команды ЭДО.
//    * ЕстьОбработчикОбновитьКомандыЭДО - Булево - нужно устанавливать в Истина в форме прикладного справочника организаций.
//
Функция ПараметрыОповещенияЭДО_ФормаСправочника() Экспорт
	
	ПараметрыОповещения = Новый Структура("Форма, МестоРазмещенияКоманд");
	ПараметрыОповещения.Вставить("ЕстьОбработчикОбновитьКомандыЭДО", Ложь);
	
	Возврат ПараметрыОповещения;
	
КонецФункции

// Обработчик события "ОбработкаОповещения" формы списка документов.
//
// Параметры:
//  ИмяСобытия - Строка - имя события.
//  Параметр - Произвольный - параметр сообщения, могут быть переданы любые необходимые данные.
//  Источник - Произвольный - источник события. Например, в качестве источника может быть указана другая форма.
//  ПараметрыОповещения - Структура - см. ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСправочника.
//
Процедура ОбработкаОповещения_ФормаСправочника(ИмяСобытия, Параметр, Источник, ПараметрыОповещения) Экспорт
	
	Если ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда
		
		Форма = ПараметрыОповещения.Форма;
		Если ПараметрыОповещения.ЕстьОбработчикОбновитьКомандыЭДО Тогда
			Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьНаличиеЭДО" Тогда
		
		МестоРазмещенияКоманд = ПараметрыОповещения.МестоРазмещенияКоманд;
		Форма = ПараметрыОповещения.Форма;
		ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры ожидания ЭДО.
//
// Возвращаемое значение:
//  Структура - параметры, которые нужно передавать в метод "ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО".
//    * МестоРазмещенияКоманд - ЭлементФормы, Массив - подменю в котором отображаются команды ЭДО.
//
Функция ПараметрыОжиданияЭДО() Экспорт
	
	ПараметрыОжиданияЭДО = Новый Структура("МестоРазмещенияКоманд");
	Возврат ПараметрыОжиданияЭДО;
	
КонецФункции

// Обработчик ожидания событий ЭДО.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, к которой подключается обработчик;
//  ПараметрыОжиданияЭДО - Структура, Неопределено - дополнительные параметры обработчика ожидания.
//
Процедура ОбработчикОжиданияЭДО(Форма, ПараметрыОжиданияЭДО = Неопределено) Экспорт
	
	МестоРазмещенияКоманд = Неопределено;
	Если Не ПараметрыОжиданияЭДО = Неопределено Тогда
		МестоРазмещенияКоманд = ПараметрыОжиданияЭДО.МестоРазмещенияКоманд;
	КонецЕсли;
	
	ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд);
	
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияЭДО", ВремяОжиданияЭДО(), Истина);
	
КонецПроцедуры

// Обработчик обновления видимости состояния ЭДО.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, к которой подключается обработчик.
//  КолонкаСостояния - ЭлементФормы - колонка состояния.
//
Процедура ОбработчикОбновленияВидимостьСостоянияЭДО(Форма, КолонкаСостояния) Экспорт
	
	Если КолонкаСостояния <> Неопределено Тогда
		ИспользоватьОбменЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД");
		ИспользоватьВнутренниеДокументыЭДО = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьВнутренниеДокументыЭДО");
		КолонкаСостояния.Видимость = ИспользоватьОбменЭД И ИспользоватьВнутренниеДокументыЭДО;
	КонецЕсли; 	
	
КонецПроцедуры

// Обработка результата помещения файла.
//
// Параметры:
//  ВыборВыполнен			 - Булево - результат выполнения выбора.
//  АдресФайла				 - Строка - адрес хранилища.
//  ВыбранноеИмяФайла		 - Строка - имя файла.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ОбработатьРезультатПомещенияФайла(ВыборВыполнен, АдресФайла, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не ВыборВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	Расширение = Прав(ВыбранноеИмяФайла, 3);
	СсылкаНаДокумент = ДополнительныеПараметры.СсылкаНаДокумент;
	УникальныйИдентификатор = ДополнительныеПараметры.УникальныйИдентификатор;
	
	Если ВРег(Расширение) <> ВРег("zip")
			И ВРег(Расширение) <> ВРег("xml") Тогда
		ТекстСообщения = НСтр("ru = 'Некорректный формат файла.
									|Выберите файл с расширением ""zip"" или ""xml"".'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураОбмена = Новый Структура();
	СтруктураОбмена.Вставить("НаправлениеЭД",           ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
	СтруктураОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	СтруктураОбмена.Вставить("АдресХранилища",          АдресФайла);
	СтруктураОбмена.Вставить("СсылкаНаДокумент",        СсылкаНаДокумент);
	СтруктураОбмена.Вставить("ИмяФайла",                ВыбранноеИмяФайла);
	СтруктураОбмена.Вставить("ФайлАрхива",              ВРег(Расширение) = ВРег("zip"));
	
	Параметры = Новый Структура("СтруктураЭД", СтруктураОбмена);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ЗагрузкаПросмотрЭлектронногоДокумента", Параметры, ,
		СтруктураОбмена.УникальныйИдентификатор);
	
	
КонецПроцедуры

// Обработка нажатия на гиперссылку "СостояниеЭДО" в форме документа
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма учетного документа.
//  СтандартнаяОбработка - Булево - Признак стандартной обработки нажатия на гиперссылку (устанавливается в Ложь).
//
Процедура ДекорацияСостояниеЭДОНажатие(Форма, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Владелец", Форма);
	
	Если Форма.Модифицированность Тогда
		
		ТекстВопроса = "";
		
		Реквизит = Форма.ПараметрыОбменаСКонтрагентами;
		
		Если НРег(Реквизит.ТекстСостоянияЭДО) = НРег("ЕстьДействующийДокумент") Тогда
			// Есть действующий документ, открываем его.
			ПараметрыОбъекта = ОбменСКонтрагентамиСлужебныйКлиентСервер.НовыеПараметрыОбъектаУчетаДляПросмотраСтатусовДокументов();
			ПараметрыОбъекта.Ссылка = Форма.Объект.Ссылка;
			ПараметрыОбъекта.Организация = Реквизит.Организация;
			ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуПросмотраСтатусовДокументов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОбъекта));
		Иначе
			Если НРег(Реквизит.ТекстСостоянияЭДО) = НРег("ЭДОНеНачат") Тогда
				ТекстВопроса = НСтр("ru='Для того чтобы начать ЭДО с контрагентом, нужно записать документ. Записать?'");
			
			Иначе
				ТекстВопроса = НСтр("ru='Для того чтобы настроить ЭДО с контрагентом, нужно записать документ. Записать?'");
			
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстВопроса) Тогда
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Форма", Форма);
			Оповещение = Новый ОписаниеОповещения("ДекорацияСостояниеЭДОНажатиеПродолжить", ОбменСКонтрагентамиКлиент, ПараметрыОповещения);
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, ,
				КодВозвратаДиалога.Отмена, НСтр("ru='Необходимо записать документ'"));
			
		КонецЕсли;
		
	Иначе
		ПараметрыОбъекта = ОбменСКонтрагентамиСлужебныйКлиентСервер.НовыеПараметрыОбъектаУчетаДляПросмотраСтатусовДокументов();
		ПараметрыОбъекта.Ссылка = Форма.Объект.Ссылка;
		ПараметрыОбъекта.Организация = Форма.ПараметрыОбменаСКонтрагентами.Организация;
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуПросмотраСтатусовДокументов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОбъекта));
	КонецЕсли;
	
КонецПроцедуры

// Обработка нажатия на гиперссылку "СостояниеЭДО" в форме списка
//
// Параметры:
//  ОбъектУчета - ОпределяемыйТип.ОснованияЭлектронныхДокументов - ссылка на объект учета.
//  СтандартнаяОбработка - Булево - признак стандартной обработки нажатия на гиперссылку (устанавливается в Ложь).
//
Процедура ДекорацияСостояниеЭДОФормаСпискаНажатие(ОбъектУчета, СтандартнаяОбработка = Ложь) Экспорт
	
	Если ОбъектУчета <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
				
		ПараметрыОбъекта = ОбменСКонтрагентамиСлужебныйКлиентСервер.НовыеПараметрыОбъектаУчетаДляПросмотраСтатусовДокументов();
		ПараметрыОбъекта.Ссылка = ОбъектУчета;
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуПросмотраСтатусовДокументов(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыОбъекта));
			
	КонецЕсли;

КонецПроцедуры

// Обработчик события "ПослеЗаписи" формы документа.
// При встраивании метода в форму документа необходимо доработать реализацию
// метода ОбменСКонтрагентамиПереопределяемый.ПриОпределенииДокументовСПоддержкойДиагностикиОшибок.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа.
//  ПараметрыЗаписи - Структура - см. параметр события формы ПослеЗаписи.
//
Процедура ПослеЗаписи_ФормаДокумента(Форма, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыОбменаСКонтрагентами")
		И Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации <> Неопределено Тогда
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(Форма.ПараметрыОбменаСКонтрагентами.КонтекстОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РекламаЭДО

// Открывает рекламную форму ЭДО.
//
// Параметры:
//  ПараметрыПодключения - Структура - описывает участников ЭДО, которых нужно подключить:
//    * Контрагент - ОпределяемыйТип.Контрагент - ссылка на контрагента, необязательный;
//    * Организация - ОпределяемыйТип.Организация - ссылка на организацию.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//  ОбработчикЗакрытияФормы - ОписаниеОповещения - оповещение, вызываемое после закрытия формы заявления на подключение.
//
Процедура ПредложениеОформитьЗаявлениеНаПодключение(ПараметрыПодключения = Неопределено,
	ДополнительныеПараметры = Неопределено, ОбработчикЗакрытияФормы = Неопределено) Экспорт
	
	ПараметрыОткрытия = Новый Структура("Организация, Контрагент");
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ПараметрыПодключения);
	
	ВладелецФормы = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("Владелец") Тогда
		ВладелецФормы = ДополнительныеПараметры.Владелец;
		ДополнительныеПараметры.Удалить("Владелец");
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПредложениеОформитьЗаявлениеНаПодключение",
		ПараметрыОткрытия, ВладелецФормы,,,,
		ОбработчикЗакрытияФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область Интеграция1СЭДОИ1СОтчетности

// Проверяет статус подключения организации в сервисе 1С-ЭДО.
//
// Параметры:
//   Организация - ОпределяемыйТип.Организация - ссылка на определяемый справочник Организация.
//   ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое вызывается при завершении проверки.
//     Параметры процедуры-обработчика оповещения:
//     * Результат - Булево - результат проверки организации в сервисе 1С-ЭДО.
//     * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения.
//
Процедура НачатьПроверкуОрганизацииВ1СЭДО(Организация, ОповещениеОЗавершении) Экспорт
	
	ИдентификаторФормы = Неопределено;
	Если ТипЗнч(ОповещениеОЗавершении.Модуль) = Тип("ФормаКлиентскогоПриложения") Тогда
		ИдентификаторФормы = ОповещениеОЗавершении.Модуль.УникальныйИдентификатор;
	КонецЕсли;
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьЗаданиеНаПроверкуОрганизацииВ1СЭДО(
		Организация, ИдентификаторФормы);
	
	ДополнительныеПараметры = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиОрганизацииВ1СЭДО", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
		ПараметрыОжидания.ВыводитьСообщения    = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		ПослеПроверкиОрганизацииВ1СЭДО(ДлительнаяОперация, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму настройки регистрации в сервисе ЭДО.
//
// Параметры:
//  Настройки - Строка - настройки регистрации.
//                       См. ОбменСКонтрагентами.ИнициализироватьНастройкиПодключенияЭДО.
//                       См. ОбменСКонтрагентами.ИнициализироватьНастройкиПереизданияСертификатаЭДО.
//  ВыполняемоеОповещение - ОписаниеОповещения - описание процедуры, которая будет вызвана при закрытии формы со следующими параметрами:
//   * Настройки - Строка - измененные настройки регистрации.
//               - Неопределено - пользователь отказался от редактирования настроек.
//   * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ОткрытьФормуНастроекРегистрацииЭДО(Знач Настройки, Знач ВыполняемоеОповещение) Экспорт
	
	Операция = ОбменСКонтрагентамиСлужебныйВызовСервера.ОперацияЭДОИзСтроки(Настройки);
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ЗакрытиеФормыНастроекРегистрацииЭДО", ЭтотОбъект, ВыполняемоеОповещение);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНастройкиОперацииЭДО(Операция, ОбработкаЗакрытия);
	
КонецПроцедуры

// Запускает отправку данных оператору ЭДО, согласно переданным настройкам.
// Поддерживается подключение к ЭДО и переиздание сертификата.
//
// Параметры:
//  Настройки - Строка - настройки регистрации.
//                       См. ОбменСКонтрагентами.ИнициализироватьНастройкиПодключенияЭДО.
//                       См. ОбменСКонтрагентами.ИнициализироватьНастройкиПереизданияСертификатаЭДО.
//  Сертификат - СертификатКриптографии - сертификат криптографии для регистрации у оператора ЭДО.
//  ВыполняемоеОповещение - ОписаниеОповещения - описание процедуры, которая будет вызвана при окончании отправки данных со следующими параметрами:
//   * Результат - Структура - результат отправки со следующими свойствами:
//    ** Выполнено - Булево - Истина, если настройка ЭДО завешена успешна и продолжения не требует.
//    ** Настройка - Строка - настройки для повторной попытки, если операция не была завершена.
//                 - Неопределено - операция завершена успешно.
//   * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ОткрытьФормуОтправкиДанныхОператоруЭДО(Знач Настройки, Знач Сертификат ,Знач ВыполняемоеОповещение) Экспорт
	
	Операция = ОбменСКонтрагентамиСлужебныйВызовСервера.ОперацияЭДОИзСтроки(Настройки);
	
	СсылкаНаСертификат = ОбменСКонтрагентамиСлужебныйКлиент.СсылкаНаСертификатКриптографии(Сертификат);
	
	Контекст = Новый Структура;
	Контекст.Вставить("Операция", Операция);
	Контекст.Вставить("Настройки", Настройки);
	Контекст.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
	
	Если ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		Контекст.Вставить("СсылкаНаСертификат", СсылкаНаСертификат);
		ЗавершитьОткрытиеФормыОтправкиДанныхОператоруЭДО(Контекст);
	Иначе
		ОбработкаПродолжения = Новый ОписаниеОповещения("ОткрытьФормуОтправкиДанныхОператоруЭДО_ДобавлениеСертификата", ЭтотОбъект, Контекст);
		ПараметрыЗаполнения = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыеПараметрыЗаполненияСертификатаКриптографии();
		ПараметрыЗаполнения.Организация = Операция.Параметры.Организация;
		ЭлектронноеВзаимодействиеСлужебныйКлиент.НачатьДобавлениеСертификатаКриптографии(
			Сертификат, ПараметрыЗаполнения, ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаЭлектронныхДокументов

// В процедуре выполняются действия по служебным ЭД (извещение о получении, уведомление об уточнении):
// формирование, утверждение, подписание, отправка.
//
// Параметры:
//  МассивЭД - массив - содержит ссылки на ЭД, по которым требуется сформировать служебные ЭД (электронные
//    документы, владельцы обрабатываемых служебных ЭД).
//  ВидЭД - перечисление - вид ЭД, которые надо обработать (может принимать значения: Извещение о получении
//    и уведомление об уточнении).
//  ТекстУведомления - строка - текст уведомления, введенный пользователем, отклонившим ЭД (имеет смысл,
//    только для ВидЭД = УведомлениеОбУточнении).
//  ДопПараметры - структура - структура дополнительных параметров.
//  ОписаниеОповещения - ОписаниеОповещения - оповещение, вызываемое после выполнения метода.
//
Процедура СформироватьПодписатьИОтправитьСлужебныеЭД(МассивЭД,
	ВидЭД, ТекстУведомления = "", ДопПараметры = Неопределено, ОписаниеОповещения = Неопределено) Экспорт
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	КолОтправленных   = 0;
	// Структура соответствий содержит соответствия: соглашений и сертификатов подписи, соглашений и сертификатов авторизации,
	// сертификатов и структур параметров этих сертификатов (структура параметров сертификатов содержит: ссылку на сертификат,
	// признак "запомнить пароль к сертификату", пароль к сертификату, признак "отозван", отпечаток, файл сертификата, а так же
	// если этот сертификат используется для авторизации, то либо расшифрованный маркер, либо зашифрованный маркер или и то и другое).
	НемедленнаяОтправкаЭД = Неопределено;
	ВыполнятьКриптооперацииНаСервере = Неопределено;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ИнициализироватьПеременные(
		ВыполнятьКриптооперацииНаСервере, НемедленнаяОтправкаЭД);
	ВыполнитьОповещение = (ОписаниеОповещения <> Неопределено);
	Если МассивЭД.Количество() > 0 Тогда
		МассивСлужебныхЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СформироватьСлужебныеЭД(МассивЭД, ВидЭД, ТекстУведомления);
		Если ЗначениеЗаполнено(МассивСлужебныхЭД) Тогда
			СтМассивовСтруктурСертификатов = Новый Структура;
			Действия = "ПодписатьОтправить";
			ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(
				Новый Массив, Действия, ДопПараметры, МассивСлужебныхЭД, ОписаниеОповещения);
			ВыполнитьОповещение = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ВыполнитьОповещение И ТипЗнч(ОписаниеОповещения) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать процедуру ПолучитьСвойстваДокументовИБДляПередачиФНС.
// Получает документы информационной базы по заданным критериям отбора.
// Функция предназначена для использования совместно с библиотекой "Регламентированная отчетность".
//
// Параметры:
//  СтруктураОтбора - Структура - параметры отбора для формы выбора документов ИБ.
//  МножественныйВыбор - Булево - свойство формы выбора.
//
// Возвращаемое значение:
//  Неопределено - значение для обратной совместимости.
//
Функция ПолучитьДокументыИБДляПередачиФНС(СтруктураОтбора, МножественныйВыбор) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Устарела. Заполнение документа по ЭД.
//
// Параметры:
//  Результат				 - Булево - результат заполнения.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//
Процедура ЗаполнитьДокументПоЭД(Результат, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#Область СопоставлениеНоменклатуры

// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры.
// Открывает форму сопоставления номенклатуры контрагентов и информационной базы.
//
// Параметры:
//  НоменклатураКонтрагентов - Массив - набор номенклатуры контрагентов для сопоставления. 
//                                      См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//  Настройки - Структура - настройки сопоставления номенклатуры:
//   * РазрешитьСохранение - Булево - признак разрешения сохранения результатов сопоставления в базе. По умолчанию Истина.
//                                    Если установить Ложь, то команды сохранения сопоставления будут недоступны.
//                                    Получить результат сопоставления можно только после закрытия формы
//                                    в процедуре, указанной через параметр ОповещениеОЗакрытии.
//   * РежимОткрытияОкна - РежимОткрытияОкнаФормы - режим открытия формы сопоставления. По умолчанию Независимый.
//   * Заголовок - Строка - заголовок формы сопоставления номенклатуры. По умолчанию "Сопоставление номенклатуры".
//  ОповещениеОЗакрытии - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытии формы с параметрами:
//   * Сопоставление - Массив, Неопределено - результат сопоставления, состоящий из структур:
//    ** НоменклатураКонтрагента - Структура - номенклатура контрагента. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//    ** НоменклатураИБ - Структура - номенклатура ИБ. См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//   * ДополнительныеПараметры - Произвольный - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ОткрытьСопоставлениеНоменклатуры(Знач НоменклатураКонтрагентов, Знач Настройки = Неопределено, Знач ОповещениеОЗакрытии = Неопределено) Экспорт
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(НоменклатураКонтрагентов, Настройки, ОповещениеОЗакрытии);
	
КонецПроцедуры

// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьВыборНоменклатурыКонтрагента.
// Открывает форму выбора номенклатуры контрагента.
// Форма открывается в режиме блокирования окна владельца (параметр ВладелецФормы).
// При осуществлении выбора в форме, владельцу будет отправлено оповещение о выборе со значением, представляющим структуру:
//  * НоменклатураКонтрагента - Структура - выбранная номенклатура контрагента. 
//                                         См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураКонтрагента.
//  * НоменклатураИБ - Структура - номенклатура информационной базы, соответствующая выбранной номенклатуре контрагента.
//                                 См. ОбменСКонтрагентамиКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
// Параметры:
//  ВладелецНоменклатуры - ОпределяемыйТип.ВладелецНоменклатурыБЭД - значение для отбора номенклатуры по владельцу.
//  ВладелецФормы - Форма, ФормаКлиентскогоПриложения, ПолеФормы - владелец открываемой формы, которому будет отправлено оповещение о выборе.
//  Идентификатор - Строка - идентификатор номенклатуры, на которой нужно спозиционировать текущую строку списка.
//
Процедура ОткрытьВыборНоменклатурыКонтрагента(Знач ВладелецНоменклатуры, Знач ВладелецФормы, Знач Идентификатор = Неопределено) Экспорт
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьВыборНоменклатурыКонтрагента(ВладелецНоменклатуры, ВладелецФормы, Идентификатор);
	
КонецПроцедуры

// Устарела. Следует использовать СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСписокНоменклатурыКонтрагентов.
// Открывает форму списка номенклатуры контрагентов.
//
Процедура ОткрытьСписокНоменклатурыКонтрагентов() Экспорт
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСписокНоменклатурыКонтрагентов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// Запускает отложенный процесс обновления команд ЭДО на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, на которой необходимо обновить команды печати.
//
Процедура НачатьОбновлениеКоманд(Форма) Экспорт
	Форма.ОтключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО");
	Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбновитьКомандыЭДО", 0.2, Истина);
КонецПроцедуры

#Область ПереопределениеМеханизмаПечатиБСП

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовОбработкаНавигационнойСсылки
Процедура ПечатьДокументовОбработкаНавигационнойСсылки(Форма, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОбъектыУчета = Форма.Параметры.ПараметрКоманды;
	
	Если Не ЗначениеЗаполнено(ОбъектыУчета) Тогда 
		 Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектыУчета) <> Тип("Массив") Тогда
		 ОбъектыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыУчета);
	КонецЕсли;  
		
	Команда = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьКомандуПечатиОбъекта(ОбъектыУчета[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
	
	Если Не ЗначениеЗаполнено(Команда) Тогда
		Возврат;	
	КонецЕсли;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВнутреннийЭДОПрогрессПодписания" Тогда
		
		Если ОбъектыУчета.Количество() = 1 Тогда 
			
			ОбъектУчета = ОбъектыУчета[0];
			
			Идентификатор = ОбменСКонтрагентамиСлужебныйВызовСервера.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектУчета)); 
			ВидВнутреннегоДокумента = ОбменСКонтрагентамиСлужебныйВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, Команда);
			АктуальныеВнутренниеЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.АктуальныеВнутренниеЭД(ОбъектыУчета, ВидВнутреннегоДокумента);
			
			АктуальныйЭД = АктуальныеВнутренниеЭД.Получить(ОбъектУчета);
			
			Если ЗначениеЗаполнено(АктуальныйЭД) Тогда 
				ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(АктуальныйЭД);
			КонецЕсли;	
				
		Иначе
			
			МассивПараметров = Новый Массив;	
			
			Для Каждого ОбъектУчета Из ОбъектыУчета Цикл
				
				ПараметрыЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаполнитьПараметрыЭДПоИсточнику(ОбъектУчета);
				Идентификатор = ОбменСКонтрагентамиСлужебныйВызовСервера.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектУчета));
				ВидВнутреннегоДокумента = ОбменСКонтрагентамиСлужебныйВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, Команда);

				ПараметрыОбъекта = ОбменСКонтрагентамиСлужебныйКлиентСервер.НовыеПараметрыОбъектаУчетаДляПросмотраСтатусовДокументов();
				ПараметрыОбъекта.Ссылка = ОбъектУчета;
				ПараметрыОбъекта.Организация = ПараметрыЭД.Организация;
				ПараметрыОбъекта.ВидВнутреннегоДокумента = ВидВнутреннегоДокумента;
				
				МассивПараметров.Добавить(ПараметрыОбъекта);
				
			КонецЦикла;
			
			ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуПросмотраСтатусовДокументов(МассивПараметров);
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Реклама1СЭДОВнутренний" Тогда
		
		Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена(Ложь) Тогда
			ПараметрыЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаполнитьПараметрыЭДПоИсточнику(ОбъектыУчета[0]);
	
			Оповещение = Новый ОписаниеОповещения("ЗавершениеРаботыМастераНастроекВнутреннегоЭДОСобытие", 
												ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйКлиент"));
												
			ОписаниеВидаВнутреннегоДокумента = ОбменСКонтрагентамиСлужебныйКлиент.НовоеОписаниеВидаВнутреннегоДокумента();
			ОписаниеВидаВнутреннегоДокумента.ОбъектУчета = ОбъектыУчета[0];
			ОписаниеВидаВнутреннегоДокумента.ИдентификаторКомандыПечати = Команда.Идентификатор;
			ОбменСКонтрагентамиСлужебныйКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(ПараметрыЭД.Организация,
																								ОписаниеВидаВнутреннегоДокумента,
																								Оповещение);
		Иначе 
			КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
			ВидОперации = НСтр("ru = 'Формирование внутреннего электронного документа'");
			ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиент.ВидОшибкиНетПравДляНастройкиЭДО();
			ТекстОшибки = НСтр("ru = 'Не настроен внутренний документооборот'"); 
			Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ДобавитьОшибку(КонтекстОперации, Ошибка, Ложь);
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовВыполнитьКоманду
Процедура ПечатьДокументовВыполнитьКоманду(Форма, Команда, ПродолжитьВыполнениеНаСервере, ДополнительныеПараметры) Экспорт
	
	Если Команда.Имя = "ВнутреннийЭДООтправитьНаПодпись" Тогда
		
		ОбъектыПечати = Форма.Параметры.ПараметрКоманды;
		
		ПараметрыЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.ЗаполнитьПараметрыЭДПоИсточнику(ОбъектыПечати[0]);	
		Идентификатор = ОбменСКонтрагентамиСлужебныйВызовСервера.ИдентификаторОбъектаМетаданных(ТипЗнч(ОбъектыПечати[0]));
		Команда = ОбменСКонтрагентамиСлужебныйВызовСервера.ПолучитьКомандуПечатиОбъекта(ОбъектыПечати[0], Форма.НастройкиПечатныхФорм[0].ИмяМакета);
		
		Если Не ЗначениеЗаполнено(Команда) Тогда
			Возврат;
		КонецЕсли;
		
		ВидВнутреннегоДокумента = ОбменСКонтрагентамиСлужебныйВызовСервера.НайтиСоздатьВидВнутреннегоДокумента(Идентификатор, Команда);
		
		КлючиНастроекОбъектов = Новый Соответствие;

		КлючНастройки = Новый Структура;
		КлючНастройки.Вставить("Организация", ПараметрыЭД.Организация);
		КлючНастройки.Вставить("ВидВнутреннегоДокумента", ВидВнутреннегоДокумента);

		Параметр = Новый Структура;
		Параметр.Вставить("КлючНастройки", КлючНастройки);
		
		ОбменСКонтрагентамиСлужебныйКлиент.СформироватьЭДИзФормыПечатиБСП(Форма, Параметр);  
		
	ИначеЕсли Команда.Имя = "ЭДОСформироватьПроизвольныйДокумент" Тогда
		
		ОбъектыПечати = Форма.Параметры.ПараметрКоманды;

		Если ТипЗнч(ОбъектыПечати) <> Тип("Массив") Тогда
			ОбъектыПечати = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектыПечати);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;

		НастройкиПечатныхФорм = Форма.НастройкиПечатныхФорм.НайтиСтроки(Новый Структура("Печатать", Истина));
		
		Если НастройкиПечатныхФорм.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектыПечати) И ТипЗнч(ОбъектыПечати) = Тип("Массив") Тогда
			СуществуютЭД = ОбменСКонтрагентамиСлужебныйВызовСервера.СуществуютЭДНаОсновании(ОбъектыПечати[0]);
			
			Если СуществуютЭД Тогда 
				ПараметрыФормы = Новый Структура("ДокументОснование", ОбъектыПечати[0]);
				ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.СписокСформированныхДокументов", ПараметрыФормы, 
					Форма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НастройкиПечатныхФорм.Количество() = 1 Тогда
			
			ТабличныйДокумент = Форма[Форма.НастройкиПечатныхФорм[0].ИмяРеквизита];
			
			ПараметрыФормы.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			ПараметрыФормы.Вставить("НаименованиеФайла", НастройкиПечатныхФорм[0].Название);
			ПараметрыФормы.Вставить("Расширение", "pdf");
			
			Если ЗначениеЗаполнено(ОбъектыПечати) И ТипЗнч(ОбъектыПечати) = Тип("Массив") Тогда
				ПараметрыФормы.Вставить("ДокументОснование", ОбъектыПечати[0]); 
			КонецЕсли;
			
			ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД", ПараметрыФормы, ЭтотОбъект, Новый УникальныйИдентификатор); 
		Иначе
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДокументОснование", ОбъектыПечати[0]);
			ДанныеДокументов = Новый Массив;
		
			Для Каждого НастройкаПечатнойФормы Из НастройкиПечатныхФорм Цикл
				
				ПараметрыДокумента = Новый Структура;  
				
				ТабличныйДокумент = Форма[НастройкаПечатнойФормы.ИмяРеквизита];
				
				ПараметрыДокумента.Вставить("ТабличныйДокумент", ТабличныйДокумент);
				ПараметрыДокумента.Вставить("НаименованиеФайла",НастройкаПечатнойФормы.Название);
				ПараметрыДокумента.Вставить("Расширение", "pdf"); 
				
				ДанныеДокументов.Добавить(ПараметрыДокумента);
				
			КонецЦикла;
			
			ДополнительныеПараметры.Вставить("ДанныеДокументов", ДанныеДокументов);
			
			ШаблонВопроса = НСтр("ru='Будет сформировано %1 электронных документа. Продолжить?'");
			ТекстВопроса = СтрШаблон(ШаблонВопроса, НастройкиПечатныхФорм.Количество());
			
			Оповещение = Новый ОписаниеОповещения("ПослеОтветаНаВопросОФормированииДокументов", ОбменСКонтрагентамиСлужебныйКлиент, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, НСтр("ru='Формирование документов'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеПечатьюКлиентПереопределяемый.ПечатьДокументовОбработкаОповещения
Процедура ПечатьДокументовОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ВнутреннийЭДО_ОбновлениеСостоянияФормыПечатиБСП" Тогда
		
		ОбменСКонтрагентамиСлужебныйКлиентСервер.ОбновитьФормуПечатиДокументовБСП(Форма);
		Форма.ПодключитьОбработчикОжидания("ОбновитьТекущуюПечатнуюФорму",0.1,Истина);
		
	ИначеЕсли ИмяСобытия = "ЗавершениеРаботыМастераНастроекВнутреннегоЭДО" Тогда
		
		ОбменСКонтрагентамиСлужебныйКлиент.СформироватьЭДИзФормыПечатиБСП(Форма, Параметр);
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Устанавливает признак использования функционала внутренних электронных документов.
//
// Параметры:
//  Использовать - Булево - признак использования.
//
Процедура УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать) Экспорт
	
	ОбменСКонтрагентамиСлужебныйКлиент.УстановитьПризнакИспользованияВнутреннегоЭДО(Использовать);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Продолжение процедуры ЗакрытьПринудительноЭДО.
//
// Параметры:
//  ПричинаЗакрытия			 - Строка - причины закрытия электронного документа.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры.
//    * Массив - список документов для закрытия.
//
Процедура ЗакрытьПринудительноРезультатВводаСтроки(ПричинаЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ПричинаЗакрытия = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	МассивСсылок = ДополнительныеПараметры.МассивСсылок;
	КоличествоОбработанныхЭД = 0;
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(МассивСсылок, ПричинаЗакрытия, КоличествоОбработанныхЭД);
	
	ТекстОповещения = НСтр("ru = 'Изменено состояние ЭД документов на ""Закрыт принудительно"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", КоличествоОбработанныхЭД);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка документов'"), , ТекстОповещения);
	Если КоличествоОбработанныхЭД > 0 Тогда
		
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ДокументыВладельцы", МассивСсылок);
		Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);

	КонецЕсли;
	
КонецПроцедуры

// Описание оповещения для процедуры БыстрыйОбменСформироватьНовыйЭДКаталог
//
// Параметры:
//  Организация				 - СправочникСсылка - организация с информационной базе.
//  ДополнительныеПараметры	 - Структура - дополнительные параметры (не используется).
//
Процедура СформироватьНовыйЭДКаталог(Организация, ДополнительныеПараметры) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("Организация", Организация);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"СформироватьНовыйЭДКаталогЗавершить", ОбменСКонтрагентамиСлужебныйКлиент, ДопПараметры);
	ОбменСКонтрагентамиКлиентПереопределяемый.ОткрытьФормуПодбораТоваров(Новый УникальныйИдентификатор(),
		ОписаниеОповещения);
	
КонецПроцедуры

// Описание оповещения для процедуры ДекорацияСостояниеЭДОНажатие
//
// Параметры:
//  Результат - КодВозвратаДиалога.ОК, КодВозвратаДиалога.Отмена - результат диалога с пользователем.
//  Параметры - Структура - дополнительные параметры.
//    * Форма - ФормаКлиентскогоПриложения - Форма учетного документа, из которого вызван диалог.
//
Процедура ДекорацияСостояниеЭДОНажатиеПродолжить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Параметры.Форма.Записать();
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД(Параметры.Форма.Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВремяОжиданияЭДО()
	
	Возврат 1800;
	
КонецФункции

Процедура ОбновитьПиктограммуОповещенияЭДО(Форма, МестоРазмещенияКоманд = Неопределено)
	
	КартинкаПодменюЭДО = ОбменСКонтрагентамиСлужебныйКлиент.КартинкаОповещенияЭДО();
	ОбновитьОтображениеНовыхЭД(Форма, КартинкаПодменюЭДО, МестоРазмещенияКоманд);

КонецПроцедуры

Процедура ВыполнитьКомандуЭДО(СсылкаНаОбъект, ИмяКоманды)
	
	Если ИмяКоманды = "СформироватьПодписатьОтправитьЭД" Тогда
		СформироватьПодписатьОтправитьЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "СформироватьНовыйЭД" Тогда
		СформироватьНовыйЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "ОтправитьПовторно" Тогда
		ОтправитьПовторноЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "ОткрытьАктуальныйЭД" Тогда
		ОткрытьАктуальныйЭД(СсылкаНаОбъект);
		
	ИначеЕсли ИмяКоманды = "БыстрыйОбменСформироватьНовыйЭД" Тогда
		БыстрыйОбменСформироватьНовыйЭД(СсылкаНаОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает нажатие на рекламную ссылку на форме объекта.
//
// Параметры:
//  СсылкаНаОбъект    - СсылкаНаОбъект - ссылка на объект ИБ, на форме которого была активирована гиперссылка с рекламным текстом.
//  ПараметрыОткрытия - Структура - дополнительные параметры открытия формы.
//
Процедура ОбработкаНавигационнойСсылкиВФормеОбъектаИБ(СсылкаНаОбъект, ПараметрыОткрытия = Неопределено)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД(СсылкаНаОбъект);
	
КонецПроцедуры

// Обновление отображения новых электронных документов.
//
// Параметры:
//  Форма					 - Форма - форма отображения.
//  КартинкаЭДО				 - Картинка - изображение оповещения.
//  МестоРазмещенияКоманд	 - Массив, ЭлементФормы - место размещения команд.
//
Процедура ОбновитьОтображениеНовыхЭД(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	Если Не МестоРазмещенияКоманд = Неопределено Тогда
		
		Если ТипЗнч(МестоРазмещенияКоманд) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из МестоРазмещенияКоманд Цикл
				ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ЭлементМассива);
			КонецЦикла;
			
		Иначе
			ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд);
			
		КонецЕсли;
		
	Иначе
		
		Элементы = Форма.Элементы;
		
		ПодменюЭДО = ПодменюЭДОФормы(Элементы);
		Если ПодменюЭДО = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, ПодменюЭДО);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодменюЭДОФормы(ЭлементыФормы)
	
	КомандыЭДО = ЭлементыФормы.Найти("ФормаКоманднаяПанельКомандыЭДО");
	
	Возврат КомандыЭДО;
	
КонецФункции

Процедура ОбновитьКартинкуЭДО(Форма, КартинкаЭДО, МестоРазмещенияКоманд)
	
	ПодменюЭДО = МестоРазмещенияКоманд;
	Если ПодменюЭДО.Вид = ВидГруппыФормы.ГруппаКнопок Или ПодменюЭДО.Картинка = КартинкаЭДО Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюЭДО.Картинка = КартинкаЭДО;
	Если Не КартинкаЭДО = БиблиотекаКартинок.ЭмблемаСервиса1СЭДО Тогда
		ПодменюЭДО.Подсказка = НСтр("ru = 'В сервисе 1С-ЭДО есть новые документы'");
	Иначе
		ПодменюЭДО.Подсказка = НСтр("ru = 'Команды ЭДО'");
	КонецЕсли;
	
КонецПроцедуры

Функция НавигационнаяСсылкаТекущиеДелаЭДО()
	
	Возврат "e1cib/app/Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО";
	
КонецФункции

Процедура ПослеПроверкиОрганизацииВ1СЭДО(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, Ложь);
	Иначе
		РезультатОперации = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОЗавершении, РезультатОперации);
	КонецЕсли;
	
КонецПроцедуры

#Область Интеграция1СЭДОИ1СОтчетности

Процедура ЗакрытиеФормыНастроекРегистрацииЭДО(Знач ОперацияЭДО, Знач ОбработкаПродолжения) Экспорт
	
	Настройки = Неопределено;
	Если ОперацияЭДО <> Неопределено Тогда
		Настройки = ОбменСКонтрагентамиСлужебныйВызовСервера.ОперацияЭДОВСтроку(ОперацияЭДО);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Настройки);
	
КонецПроцедуры

Процедура ЗавершитьОткрытиеФормыОтправкиДанныхОператоруЭДО(Знач Контекст)
	
	Операция = Контекст.Операция;
	СсылкаНаСертификат = Контекст.СсылкаНаСертификат;
	
	Если Не ЗначениеЗаполнено(СсылкаНаСертификат) Тогда
		Результат = Новый Структура("Выполнено,Настройки", Ложь, Контекст.Настройки);
		ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
		Возврат;
	КонецЕсли;
	
	ОперацияПодключенияЭДО = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияПодключенияЭДО();
	ОперацияОбновленияСертификата = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяОперацияОбновленияСертификата();
	
	Если Операция.Действие = ОперацияПодключенияЭДО.Действие Тогда
		Операция.Параметры.Сертификат = СсылкаНаСертификат;
	ИначеЕсли Операция.Действие = ОперацияОбновленияСертификата.Действие Тогда
		Операция.Параметры.НовыйСертификат = СсылкаНаСертификат;
	КонецЕсли;
	
	ОбработкаЗакрытия = Новый ОписаниеОповещения("ЗакончитьОтправкуДанныхОператоруЭДО", ЭтотОбъект, Контекст.ВыполняемоеОповещение);
	
	ОбменСКонтрагентамиСлужебныйКлиент.НачатьВыполнениеОперацииЭДО(Операция, ОбработкаЗакрытия);
	
КонецПроцедуры

Процедура ОткрытьФормуОтправкиДанныхОператоруЭДО_ДобавлениеСертификата(Знач СсылкаНаСертификат, Знач Контекст) Экспорт
	
	Контекст.Вставить("СсылкаНаСертификат", СсылкаНаСертификат);
	ЗавершитьОткрытиеФормыОтправкиДанныхОператоруЭДО(Контекст);
	
КонецПроцедуры

Процедура ЗакончитьОтправкуДанныхОператоруЭДО(Знач РезультатОтправки, Знач ОбработкаПродолжения) Экспорт
	
	Результат = Новый Структура("Выполнено,Настройки", Истина, Неопределено);
	
	Если Не РезультатОтправки.Выполнено Тогда
		Результат.Выполнено = Ложь;
		Результат.Настройки = ОбменСКонтрагентамиСлужебныйВызовСервера.ОперацияЭДОВСтроку(РезультатОтправки.ОперацияЭДО);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Результат);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
