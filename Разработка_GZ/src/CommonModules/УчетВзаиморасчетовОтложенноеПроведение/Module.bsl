#Область ДвиженияОтложенныхРасчетов

// Записывает в регистр "Отложенные расчеты с контрагентами" информацию о договорах
// с контрагентами, по которым в будущем требуется рассчитать отложенные взаиморасчеты.
//
// Параметры:
//	Объект - ДокументОбъект.* - документ
//	Отказ - Булево - Выставляется в Истина при возникновении ошибочной ситуации.
//	ТаблицаОтложенныеРасчетыСКонтрагентами - ТаблицаЗначений, Неопределено - таблица со списком договоров.
//		Если документ снят с проведения, то нового списка договоров нет, в этом случае передается Неопределено.
//		Содержит колонки:
//			* Контрагент - СправочникСсылка.Контрагенты
//			* ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(Объект, Отказ, ТаблицаОтложенныеРасчетыСКонтрагентами = Неопределено) Экспорт

	// Проверяем признак включения отложенного проведения в целом для базы, 
	// а не только по организации Объекта-источника, т.к. организации, договоры и др. реквизиты
	// документа могут быть изменены при записи.
	// В этом случае будет необходимо зарегистрировать документ к исключению
	// из расчетов по старому договору / организации.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыОтложенныеРасчетыСКонтрагентами(ТаблицаОтложенныеРасчетыСКонтрагентами);
	ОтложенныеРасчетыСКонтрагентами = Параметры.ОтложенныеРасчетыСКонтрагентами;
		
	ДатаПроверки = РаботаСПоследовательностями.ДатаРегистрацииДокументаВПоследовательности(
		Объект.Ссылка, Объект.Дата, Объект.Организация);
	
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(
		Объект.Организация, ДатаПроверки);
	
	// Блокируем записи регистра по документу.
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение");
	ЭлементБлокировки.УстановитьЗначение("Документ", Объект.Ссылка);

	БлокировкаДанных.Заблокировать();

	// Прочитаем существующие записи регистра с отложенными расчетами.
	НаборЗаписей = РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
 
	// Отметим по старым измерениям регистра, что расчеты по ним стали неактуальными.
	Счетчик = НаборЗаписей.Количество();
	Пока Счетчик > 0 Цикл

		Счетчик = Счетчик - 1;
		Движение = НаборЗаписей[Счетчик];
		
		Если Движение.Организация = Объект.Организация И НачалоМесяца(Движение.Дата) = НачалоМесяца(ДатаПроверки) Тогда
			// Режим отложенного проведения на дату из записи регистра совпадает с текущим для документа.
			ИспользуетсяОтложенноеПроведениеДляЗаписи = ИспользуетсяОтложенноеПроведение;
		Иначе
			ИспользуетсяОтложенноеПроведениеДляЗаписи = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(
				Движение.Организация,
				Движение.Дата);
		КонецЕсли;

		Если ИспользуетсяОтложенноеПроведениеДляЗаписи Тогда
			// Записи по прошлым состояниям документа отмечаем как подлежащие исключению из расчетов.
			Движение.СостояниеРасчетов = Перечисления.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов;
		Иначе
			// По этой организации не используется отложенное проведение, запись в регистре не нужна.
			НаборЗаписей.Удалить(Движение);
		КонецЕсли;

	КонецЦикла;
	
	// Если по текущей организации из документа используется отложенное проведение, 
	// то добавим записи в регистр.
	Если ИспользуетсяОтложенноеПроведение
		И ОтложенныеРасчетыСКонтрагентами.Количество() > 0 Тогда

		// Признак того, что запись о договоре уже есть в наборе и она была обработана
		ОтложенныеРасчетыСКонтрагентами.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		
		ОтложенныеРасчетыСКонтрагентами.Индексы.Добавить("Контрагент, ДоговорКонтрагента, Дата, ВалютаВзаиморасчетов");

		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		Отбор = Новый Структура;
		Отбор.Вставить("Контрагент");
		Отбор.Вставить("ДоговорКонтрагента");
		Отбор.Вставить("Дата");
		Отбор.Вставить("ВалютаВзаиморасчетов", ВалютаРегламентированногоУчета);
		
		// Записи регистра, которые совпадают с новым состоянием документа, отметим как требующие перерасчета.
		Для Каждого Движение Из НаборЗаписей Цикл
			
			Если Движение.Организация <> Объект.Организация Тогда
				Продолжить;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(Отбор, Движение);
			НайденныеСтроки = ОтложенныеРасчетыСКонтрагентами.НайтиСтроки(Отбор);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				// Отметим записи из таблицы, чтобы не включить их повторно.
				НайденнаяСтрока.Обработано = Истина;
			КонецЦикла;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Движение.СостояниеРасчетов = Перечисления.СостоянияОтложенныхРасчетов.КВыполнению;
			КонецЕсли;
				
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Обработано", Ложь);
		
		// Таблица ОтложенныеРасчетыСКонтрагентами содержит все договоры по документу, 
		// информация о них необходима для совместной работы общей последовательности ДокументыОрганизаций и
		// отложенного проведения.
		// При этом в самом отложенном проведении обрабатываются только договоры в рублях.
		Отбор.Вставить("ВалютаВзаиморасчетов", ВалютаРегламентированногоУчета);
		
		ВидыДоговоров = ВидыДоговоровОтложенногоПроведения();
		
		// Дописываем в набор новые записи.
		НайденныеСтроки = ОтложенныеРасчетыСКонтрагентами.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			
			Если ВидыДоговоров.Найти(СтрокаТаблицы.ВидДоговора) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаРегистрации = РаботаСПоследовательностями.ДатаРегистрацииДокументаВПоследовательности(
				Объект.Ссылка, СтрокаТаблицы.Дата, Объект.Организация);
			
			Движение = НаборЗаписей.Добавить();
			Движение.Организация 		= Объект.Организация;
			Движение.Контрагент 		= СтрокаТаблицы.Контрагент;
			Движение.ДоговорКонтрагента = СтрокаТаблицы.ДоговорКонтрагента;
			Движение.Документ 			= Объект.Ссылка;
			Движение.Дата				= ДатаРегистрации;
			Движение.СостояниеРасчетов 	= Перечисления.СостоянияОтложенныхРасчетов.КВыполнению;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НаборЗаписей.Модифицированность() Тогда
		// Свернем записи для исключения дублей.
		ТаблицаНабора = НаборЗаписей.Выгрузить();
		ТаблицаНабора.Свернуть("Организация, СостояниеРасчетов, Дата, Документ, Контрагент, ДоговорКонтрагента");
		ТаблицаНабора.Колонки.Добавить("Активность", Новый ОписаниеТипов("Булево"));
		ТаблицаНабора.ЗаполнитьЗначения(Истина, "Активность");
		НаборЗаписей.Загрузить(ТаблицаНабора);
	
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

// Выполняет регистрацию отложенных расчетов по договорам из набора проводок.
// Вызывается перед записью из модуля набора записей регистра бухгалтерии Хозрасчетный
// для тех документов, которые имеют признак ручной корректировки, а также для ОперацииБух.
//
// Параметры:
//	Проводки - РегистрБухгалтерииНаборЗаписей.Хозрасчетный - Записываемый набор проводок.
//	Отказ - Булево - Признак отказа от записи.
//
Процедура ЗарегистрироватьОтложенныеРасчетыСКонтрагентамиПередЗаписьюХозрасчетный(Проводки, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		// Отложенное проведение не используется.
		Возврат;
	КонецЕсли;

	Регистратор = Проводки.Отбор.Регистратор.Значение;

	ТаблицаДоговоры = Новый ТаблицаЗначений;
	ТаблицаДоговоры.Колонки.Добавить("Дата",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаДоговоры.Колонки.Добавить("Контрагент",           Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДоговоры.Колонки.Добавить("ДоговорКонтрагента",   Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДоговоры.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаДоговоры.Колонки.Добавить("ВидДоговора",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"));
	ТаблицаДоговоры.Индексы.Добавить("Контрагент, ДоговорКонтрагента");

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПодготовитьСчетаВзаиморасчетов(МенеджерВременныхТаблиц, Ложь);
	
	// Выбираем договоры из нового набора проводок.
	ЗаполнитьДоговорыПоНаборуПроводок(ТаблицаДоговоры, Проводки, МенеджерВременныхТаблиц);

	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "Дата, Организация, ПометкаУдаления");

	Если ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами(Регистратор) Тогда
	
		// Текущий документ сам поддерживает отложенные расчеты, регистрируем в привязке к нему. 

		// Для передачи в общую процедуру регистрации отложенных расчетов с контрагентами
		// вместо документа-объекта создаем создаем структуру, содержащую необходимые поля.
		Объект = Новый Структура();
		Объект.Вставить("Ссылка",                   Регистратор);
		Объект.Вставить("Дата",                     РеквизитыДокумента.Дата);
		Объект.Вставить("Проведен",                 Истина);
		Объект.Вставить("ПометкаУдаления",          РеквизитыДокумента.ПометкаУдаления);
		Объект.Вставить("Организация",              РеквизитыДокумента.Организация);
		Объект.Вставить("ОбменДанными",             Новый Структура("Загрузка", Ложь));
		Объект.Вставить("ДополнительныеСвойства",   Новый Структура());

		ЗарегистрироватьОтложенныеРасчетыСКонтрагентами(
			Объект,
			Отказ,
			ТаблицаДоговоры);
	Иначе
		// Текущий документ сам по себе не поддерживает отложенные расчеты,
		// поэтому найдем по каждому договору следующий по хронологии документ,
		// и зарегистрируем его к выполнению отложенных расчетов.
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		// Могла поменяться организация, поэтому получим из проводок до записи старое значение.
		ТаблицаДоговоры.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));	
		ТаблицаДоговоры.ЗаполнитьЗначения(РеквизитыДокумента.Организация, "Организация");
		
		// Добавим договоры, которые были ранее в проводках документа,
		// по ним тоже потребуется выполнить отложенные расчеты.
		ДобавитьДоговорыПоПроводкамИзРегистраБухгалтерии(ТаблицаДоговоры, Регистратор, МенеджерВременныхТаблиц);
		
		ВидыДоговоровОтложенногоПроведения = ВидыДоговоровОтложенногоПроведения();
		Для Каждого СтрокаТаблицы Из ТаблицаДоговоры Цикл
			
			Если СтрокаТаблицы.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета Тогда
				// Отложенные расчеты поддерживаются только для договоров в рублях.
				Продолжить;
			КонецЕсли;
			Если ВидыДоговоровОтложенногоПроведения.Найти(СтрокаТаблицы.ВидДоговора) = Неопределено Тогда
				// Отложенные расчеты поддерживаются только для видов договоров без расчетов по комиссионной схеме.
				Продолжить;
			КонецЕсли;
		
			НайтиИУстановитьКВыполнениюСледующийДокументПоДоговору(
				СтрокаТаблицы.Организация,
				СтрокаТаблицы.Контрагент,
				СтрокаТаблицы.ДоговорКонтрагента, 
				СтрокаТаблицы.Дата);
				
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Выполняет регистрацию отложенных расчетов при включении режима отложенного проведения.
//
// Параметры:
//	Организации - Массив, Неопределено - Список организаций, для которых надо зарегистрировать отложенные расчеты.
//				Если не передан, то по всем организациям.
//	Отказ - Булево - Внутри процедуры необходимо установить в Истина, если возникла ошибка при регистрации.
//
Процедура ЗарегистрироватьОтложенныеРасчетыСКонтрагентамиПриВключении(Организации, Отказ) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	// Определяем по каждой организации периоды, в течение которых действовала учетная политика,
	// удовлетворяющая условию использования отложенного проведения.
	ПериодыОтложенногоПроведения = ПроведениеСервер.ПериодыИспользованияОтложенногоПроведения(Организации);
	
	// Обрабатываем, начиная с самых поздних, т.к. в них более вероятно наличие документов,
	// которые потребуют актуализации расчетов.
	ПериодыОтложенногоПроведения.Сортировать("Организация, ДатаНачала УБЫВ", Новый СравнениеЗначений());
	
	МенеджерВременныхТаблиц = Неопределено; // Будет проинициализирован при первом обращении.
	
	ОбработанныеОрганизации = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ПериодыОтложенногоПроведения Цикл
	
		Если ОбработанныеОрганизации[СтрокаТаблицы.Организация] <> Неопределено Тогда
			// Такую организацию уже обрабатывали ранее.
			Продолжить;
		КонецЕсли;
	
		ЗарегистрироватьОтложенныеРасчетыСКонтрагентамиПриВключенииПоОрганизации(
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.ДатаНачала,
			СтрокаТаблицы.ДатаОкончания,
			МенеджерВременныхТаблиц,
			Отказ);
	
		ОбработанныеОрганизации.Вставить(СтрокаТаблицы.Организация, Истина);
			
	КонецЦикла;
	
КонецПроцедуры

// Выполняет регистрацию отложенных расчетов при включении режима отложенного проведения по организации за период.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которых надо зарегистрировать отложенные расчеты.
//	ДатаНачала - Дата - Дата начала периода, за который необходимо зарегистрировать отложенные расчеты.
//	ДатаОкончания - Дата - Дата окончания периода, за который необходимо зарегистрировать отложенные расчеты.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер, используемый для выполнения запросов. Создается новый, если не передан.
//	Отказ - Булево - Внутри процедуры необходимо установить в Истина, если возникла ошибка при регистрации.
//
Процедура ЗарегистрироватьОтложенныеРасчетыСКонтрагентамиПриВключенииПоОрганизации(Организация, Знач ДатаНачала, ДатаОкончания, МенеджерВременныхТаблиц, Отказ) Экспорт

	МоментНарушения = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
		Организация, ДатаОкончания);
		
	Если МоментНарушения = Неопределено Тогда
		// Последовательность не нарушена, актуализация расчетов не требуется.
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Если МенеджерВременныхТаблиц = Неопределено Тогда
		// Счета взаиморасчетов, к которым применяется отложенное проведение.
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПодготовитьСчетаВзаиморасчетов(МенеджерВременныхТаблиц, Ложь);
	КонецЕсли;

	// Если дата начала действия учетной политики совпадает с датой ввода начальных остатков,
	// то определяем данные из регистра бухгалтерии без ограничения по начальной дате.
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
		
	Если ДатаВводаНачальныхОстатков = Неопределено Тогда
		ДатаВводаНачальныхОстатков = '0001-01-01';
	КонецЕсли;
	
	// В момент начала ведения учета в новой базе данных возможны две ситуации:
	// 1. Ввод начальных остатков проведен 31 декабря, а учетная политика введена с 1 января следующего года. 
	// В этом случае других первичных документов до 1 января провести нельзя и все остатки
	// формируют только сами документы "Ввод начальных остатков".
	// 2. Ввод начальных остатков проведен 31 декабря, а учетная политика введена, начиная с более ранней даты.
	// В этом случае, кроме ввода начальных остатков, могут быть проведены другие первичные документы
	// в периоде до 1 января, с помощью которых могут формировать особенные ситуации в остатках.
	// 
	// В первом случае включаем режим отложенного проведения "с начала времен",
	// а во втором - с фактической даты ввода учетной политики.
	Если КонецМесяца(ДатаВводаНачальныхОстатков) + 1 = ДатаНачала Тогда
		ДатаНачала = '0001-01-01';
	КонецЕсли;
	
	// Определим по каждому рублевому договору первый документ, который сформировал проводку
	// по счетам взаиморасчетов с отложенным проведением (кроме договоров по комиссии).
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ДатаНачала", 	Макс(ДатаНачала, МоментНарушения.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Период,
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет) КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_Хозрасчетный
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение
	|		ПО Хозрасчетный.СчетДт = ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Хозрасчетный.Период,
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение
	|		ПО Хозрасчетный.СчетКт = ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Хозрасчетный.Период КАК Период,
	|	ВТ_Хозрасчетный.Регистратор КАК Регистратор,
	|	ВЫРАЗИТЬ(ХозрасчетныйСубконто.Значение КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ДокументыПоДоговорам
	|ИЗ
	|	ВТ_Хозрасчетный КАК ВТ_Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО ВТ_Хозрасчетный.Период = ХозрасчетныйСубконто.Период
	|			И ВТ_Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И ВТ_Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И ВТ_Хозрасчетный.ВидДвижения = ХозрасчетныйСубконто.ВидДвижения
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|ГДЕ
	|	НЕ ХозрасчетныйСубконто.Значение ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДоговорКонтрагента,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыПоДоговорам.ДоговорКонтрагента,
	|	МИНИМУМ(ВТ_ДокументыПоДоговорам.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПервыеДатыПоДоговорам
	|ИЗ
	|	ВТ_ДокументыПоДоговорам КАК ВТ_ДокументыПоДоговорам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДокументыПоДоговорам.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПервыеДатыПоДоговорам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ПервыеДатыПоДоговорам.Период КАК Период,
	|	МИНИМУМ(ВТ_ДокументыПоДоговорам.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_ПервыеДокументыПоДоговорам
	|ИЗ
	|	ВТ_ПервыеДатыПоДоговорам КАК ВТ_ПервыеДатыПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыПоДоговорам КАК ВТ_ДокументыПоДоговорам
	|		ПО ВТ_ПервыеДатыПоДоговорам.ДоговорКонтрагента = ВТ_ДокументыПоДоговорам.ДоговорКонтрагента
	|			И ВТ_ПервыеДатыПоДоговорам.Период = ВТ_ДокументыПоДоговорам.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПервыеДатыПоДоговорам.ДоговорКонтрагента,
	|	ВТ_ПервыеДатыПоДоговорам.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ВТ_ПервыеДокументыПоДоговорам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ПервыеДокументыПоДоговорам.Период КАК Дата,
	|	ВТ_ПервыеДокументыПоДоговорам.Регистратор КАК Документ
	|ИЗ
	|	ВТ_ПервыеДокументыПоДоговорам КАК ВТ_ПервыеДокументыПоДоговорам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_ПервыеДокументыПоДоговорам.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаРеглУчета
	|	И ДоговорыКонтрагентов.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.Прочее))
	|;
	|
	|УНИЧТОЖИТЬ ВТ_Хозрасчетный;
	|
	|УНИЧТОЖИТЬ ВТ_ДокументыПоДоговорам;
	|
	|УНИЧТОЖИТЬ ВТ_ПервыеДатыПоДоговорам;
	|
	|УНИЧТОЖИТЬ ВТ_ПервыеДокументыПоДоговорам;
	|";
	
	// Отмечаем в регистре РасчетыСКонтрагентамиОтложенныеРасчеты найденные договоры как требующие актуализации.
	НаборЗаписей = РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение.СоздатьНаборЗаписей();
	
	// Если выполняется первичное включение, то будем записывать порциями по 1000 записей в наборе, иначе по отдельным записям.
	ПервичноеВключение = НЕ ЕстьЗаписиРегистраРасчетыСКонтрагентамиОтложенноеПроведение(Организация);
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	ЭтоПерваяПорция = Истина;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Заполняется в ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами().
	КешДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами = Новый Соответствие;

	ШаблонОшибки = НСтр("ru = 'Ошибка при регистрации отложенных расчетов по организации %1: %2.'");
	
	Пока Выборка.Следующий() Цикл

		Попытка

			Если ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами(Выборка.Документ, КешДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами) Тогда

				ДатаРегистрации = РаботаСПоследовательностями.ДатаРегистрацииДокументаВПоследовательности(
					Выборка.Документ, Выборка.Дата, Организация);

				Движение = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, Выборка);
				
				Движение.Дата				= ДатаРегистрации;
				Движение.Организация 		= Организация;
				Движение.СостояниеРасчетов 	= Перечисления.СостоянияОтложенныхРасчетов.КВыполнению;

			Иначе
				// Проводку по договору сформировал документ, который не входит в состав типов измерения Документ регистра сведений.
				// Попробуем найти следующий по времени документ, который сможем зарегистрировать в регистре.
				НайтиИУстановитьКВыполнениюСледующийДокументПоДоговору(
					Организация,
					Выборка.Контрагент,
					Выборка.ДоговорКонтрагента,
					Выборка.Дата,
					КешДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами,
					НаборЗаписей);
			КонецЕсли;
			
			Если ПервичноеВключение Тогда
				// Записываем порциями.
				Если НаборЗаписей.Количество() >= 1000 Тогда
					НаборЗаписей.Записать(ЭтоПерваяПорция);
					ЭтоПерваяПорция = Ложь;
					НаборЗаписей.Очистить();
				КонецЕсли;
			Иначе
				// Записываем по отдельным записям.
				Если НаборЗаписей.Количество() > 0 Тогда
					НаборЗаписей.Отбор.Документ.Установить(НаборЗаписей[0].Документ);
					НаборЗаписей.Отбор.Контрагент.Установить(НаборЗаписей[0].Контрагент);
					НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(НаборЗаписей[0].ДоговорКонтрагента);
					НаборЗаписей.Записать();
					НаборЗаписей.Очистить();
				КонецЕсли;
			КонецЕсли;
		
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Отказ = Истина;
			
			КраткийТекстОшибки = СтрШаблон(
				ШаблонОшибки,
				Организация,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

			ПодробныйТекстОшибки = СтрШаблон(
				ШаблонОшибки,
				Организация,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткийТекстОшибки, Организация);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение,
				Организация,
				ПодробныйТекстОшибки);
			
		КонецПопытки;
	
	КонецЦикла;
	
	// Запись последней порции.
	Если ПервичноеВключение И НаборЗаписей.Количество() > 0 Тогда
		Попытка
			НаборЗаписей.Записать(ЭтоПерваяПорция);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Отказ = Истина;
			
			КраткийТекстОшибки = СтрШаблон(
				ШаблонОшибки,
				Организация,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));

			ПодробныйТекстОшибки = СтрШаблон(
				ШаблонОшибки,
				Организация,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткийТекстОшибки, Организация);
			
			ЗаписьЖурналаРегистрации(
				СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение,
				Организация,
				ПодробныйТекстОшибки);
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Выбирает следующий по хронологии документ по текущему договору и устанавливает для него состояние "К выполнению".
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, по которой производится поиск.
//	Контрагент 	- СправочникСсылка.Контрагенты - Контрагент, по которому производится поиск.
//	ДоговорКонтрагента 	- СправочникСсылка.ДоговорыКонтрагентов - Договор, по которому производится поиск.
//	ПослеДаты 	- Дата+Время - Дата, начиная с которой производится поиск следующих документов (сама дата не включается).
//	КешДокументы - Неопределено, Соответствие - Вспомогательный кеш типов документов,
//		которые поддерживают отложенное проведение. Заполняется внутри процедуры.
//	НаборЗаписей - Неопределено, РегистрСведенийНаборЗаписей.РасчетыСКонтрагентамиОтложенноеПроведение - Набор записей
//		регистра сведений, в который необходимо записывать изменения.
//
Процедура НайтиИУстановитьКВыполнениюСледующийДокументПоДоговору(
	Организация,
	Контрагент,
	ДоговорКонтрагента,
	ПослеДаты,
	КешДокументов = Неопределено,
	НаборЗаписей = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ПослеДаты",          ПослеДаты);
	Запрос.УстановитьПараметр("Контрагент",         Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);

	Если КешДокументов = Неопределено Тогда
		КешДокументов = КешДокументовПоддерживающихОтложенныеРасчетыСКонтрагентами();
	КонецЕсли;

	МассивТипов = Новый Массив;
	Для Каждого КлючИЗначение Из КешДокументов Цикл
		МассивТипов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	Запрос.УстановитьПараметр("ТипыДокументовПоддерживающихОтложенноеПроведение", МассивТипов);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйСубконто.Период КАК Период,
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйСубконто.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйСубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|ГДЕ
	|	ХозрасчетныйСубконто.Период > &ПослеДаты
	|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И ХозрасчетныйСубконто.Значение = &ДоговорКонтрагента
	|	И ТИПЗНАЧЕНИЯ(ХозрасчетныйСубконто.Регистратор) В (&ТипыДокументовПоддерживающихОтложенноеПроведение)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ХозрасчетныйСубконто.Период КАК Дата,
	|	ВТ_ХозрасчетныйСубконто.Регистратор КАК Документ,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.Выполнено) КАК СостояниеРасчетов
	|ИЗ
	|	ВТ_ХозрасчетныйСубконто КАК ВТ_ХозрасчетныйСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_ХозрасчетныйСубконто.Период = Хозрасчетный.Период
	|			И ВТ_ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|			И ВТ_ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|			И (Хозрасчетный.Организация = &Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов
	|ИЗ
	|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|ГДЕ
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация
	|	И РасчетыСКонтрагентамиОтложенноеПроведение.Дата > &ПослеДаты
	|	И РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент = &Контрагент
	|	И РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента = &ДоговорКонтрагента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;

	Если Выборка.СостояниеРасчетов <> Перечисления.СостоянияОтложенныхРасчетов.Выполнено Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьНовыйНабор = (НаборЗаписей = Неопределено);
		
	Если ИспользоватьНовыйНабор Тогда

		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение");
		ЭлементБлокировки.УстановитьЗначение("Документ", Выборка.Документ);
		
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
		НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(ДоговорКонтрагента);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
		НаборЗаписей.Прочитать();
	КонецЕсли;
	
	Если ИспользоватьНовыйНабор И НаборЗаписей.Количество() > 0 Тогда
		Для Каждого Движение Из НаборЗаписей Цикл
			Если Движение.СостояниеРасчетов = Перечисления.СостоянияОтложенныхРасчетов.Выполнено Тогда
				Движение.СостояниеРасчетов = Перечисления.СостоянияОтложенныхРасчетов.КВыполнению;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДатаРегистрации = РаботаСПоследовательностями.ДатаРегистрацииДокументаВПоследовательности(
			Выборка.Документ, Выборка.Дата, Организация);
	
		Движение = НаборЗаписей.Добавить();
		Движение.Организация        = Организация;
		Движение.СостояниеРасчетов  = Перечисления.СостоянияОтложенныхРасчетов.КВыполнению;
		Движение.Дата               = ДатаРегистрации;
		Движение.Документ           = Выборка.Документ;
		Движение.Контрагент         = Контрагент;
		Движение.ДоговорКонтрагента = ДоговорКонтрагента;
	КонецЕсли;
	
	Если ИспользоватьНовыйНабор И НаборЗаписей.Модифицированность() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтложенныеРасчеты

// Возвращает Истина, если переданный тип документов
// поддерживается в рамках механизма отложенных расчетов с контрагентами.
//
// Параметры:
//	СсылкаИлиТипДокумента - ДокументСсылка.*, Тип - Ссылка на документ или его тип.
//	КешДокументов - Соответствие, Неопределено - Если передано соответствие,
// 		то в нем кешируются типы документов, которые поддерживают отложенные расчеты с контрагентами.
//		Если ничего не передано, то кеш не создается.
//
// Возвращаемое значение:
//	Булево.
//
Функция ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами(СсылкаИлиТипДокумента, КешДокументов = Неопределено) Экспорт

	Результат = Ложь;
	
	Если ТипЗнч(СсылкаИлиТипДокумента) = Тип("Тип") Тогда
		ТипДокумента = СсылкаИлиТипДокумента;
	Иначе
		ТипДокумента = ТипЗнч(СсылкаИлиТипДокумента);
	КонецЕсли;

	Если КешДокументов = Неопределено Тогда
		// Кеш документов не передан, считаем, что проверка однократная и кеш не требуется.
		Результат = Метаданные.ОпределяемыеТипы.ДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами.Тип.СодержитТип(ТипДокумента);
	Иначе
		Если КешДокументов.Количество() = 0 Тогда
			// Проинициализируем кеш.
			КешДокументов = КешДокументовПоддерживающихОтложенныеРасчетыСКонтрагентами();
		КонецЕсли;
		Результат = КешДокументов[ТипДокумента] <> Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает Истина, если для документа поддерживается восстановление отложенных расчетов.
//
// Параметры:
//	СсылкаИлиМетаданныеДокумента - ДокументСсылка.*, Метаданные - Ссылка на документ или метаданные документа,
//		для которого необходимо определить, поддерживается ли восстановление отложенных расчетов.
//
// Возвращаемое значение:
//	Булево - Истина, если поддерживает отложенные расчеты с контрагентами, иначе Ложь.
//
Функция ДокументПоддерживаетВосстановлениеОтложенныхРасчетовСКонтрагентами(СсылкаИлиМетаданныеДокумента) Экспорт

	Результат = Ложь;

	Если ТипЗнч(СсылкаИлиМетаданныеДокумента) = Тип("ОбъектМетаданных") Тогда
		ТипДокумента = Тип("Документ." + СсылкаИлиМетаданныеДокумента.Имя);
	Иначе
		ТипДокумента = ТипЗнч(СсылкаИлиМетаданныеДокумента);
	КонецЕсли;

	ТипыДокументовИсключения = Новый Массив;
	
	ИменаДокументов = ДокументыНеТребующиеВосстановленияОтложенныхРасчетов();
	Для Каждого КлючИЗначение Из ИменаДокументов Цикл
		ТипыДокументовИсключения.Добавить(Тип("ДокументСсылка." + КлючИЗначение.Ключ));
	КонецЦикла;
	
	Если ТипыДокументовИсключения.Найти(ТипДокумента) = Неопределено
		И ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами(ТипДокумента) Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Инициализирует структуру, содержащую параметры для выполнения отложенных расчетов с контрагентами.
//
Функция НовыеПараметрыРасчета() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка()); // Организация, по которой выполняется расчет.
	
	// Дата, до которой выполняется расчет.
	// Начальная дата определяется по данным регистра РасчетыСКонтрагентамиОтложенноеПроведение.
	Результат.Вставить("ДатаОкончания", '0001-01-01');

	Результат.Вставить("Контрагент");         // Ссылка или массив ссылок на контрагента(-ов).
	Результат.Вставить("ДоговорКонтрагента"); // Ссылка или массив ссылок на договор(-ы) с контрагентом(-ами).
	Результат.Вставить("Документ");           // Ссылка или массив ссылок на документы, договоры из которых рассчитывать.

	// Адрес временного хранилища для хранения отчета по ошибкам.
	// Необходимо создавать его в том же сеансе, в котором требуется получение отчета,
	// т.к. при создании внутри фонового задания оно будет закрыто после завершения
	// самого фонового задания.
	// Если не указан, то ошибки во временное хранилище не помещаются.
	Результат.Вставить("АдресХранилищаСОшибками", "");
	
	Результат.Вставить("ОстанавливатьсяПоОшибке",    Ложь); // Если Истина, то после возникновения первой ошибки расчет прекращается.
	Результат.Вставить("СообщатьПрогрессВыполнения", Ложь); // Если Истина, то в ходе расчета будут выдаваться сообщения с прогрессом выполнения.
	
	Возврат Результат;
	
КонецФункции

// Выполняет восстановление отложенных расчетов с контрагентами.
//
// Параметры:
//	Параметры - Структура - структура, см НовыеПараметрыРасчета()
//					
// Возвращаемое значение:
//	Структура - см. переменную Результат
//
Функция ВыполнитьОтложенныеРасчеты(ПараметрыРасчета) Экспорт

	// Актуализация отложенных расчетов выполняется следующим образом:
	// 1. По данным регистра "РасчетыСКонтрагентамиОтложенноеПроведение" определяются договоры, 
	// по которым требуется восстановить расчеты.
	//
	// 2. По всем договорам определяется дата самого первого документа, с которого требуется восстановление.
	//
	// 3. На 1 число месяца найденной даты из регистра бухгалтерии определяются остатки по всем счетам, 
	// содержащим субконто Контрагенты и Договоры, по всем договорам, участвующим в расчете.
	//
	// 4. В цикле по каждому договору:
	//	a. Из результата запроса шага3 выбираются остатки по текущему договору 
	//	   и запоминаются в оперативной памяти в таблице значений.
	//	b. Остатки взаиморасчетов дополняются оборотами по текущему договору за период с 1 числа самого первого месяца (шаг 3) 
	//	   по времени первого документа текущего документа договора.
	//	c. Для следующих документов по этому же договору остатки из базы не получаются,
	//     а рассчитываются по данным таблицы значений в памяти.
	//  d. В зависимости от вида документа формируются или изменяются проводки по зачету авансов и погашению задолженности.
	//  e. После чего наборы регистра бухгалтерии и других регистров записываются в базу.
	//  f. Одновременно с этим производится перерасчет таблицы оперативных остатков в памяти.
	//  g. Для документов, проводки по которым были успешно рассчитаны, 
	//	   в регистре "РасчетыСКонтрагентамиОтложенноеПроведение" состояние переводится в "Выполнено".

	Результат = Новый Структура();
	Результат.Вставить("УспешноОбработаноДоговоров", 	0); // Количество успешно обработанных договоров
	Результат.Вставить("КоличествоДоговоровСОшибками", 	0); // Количество обработанных договоров с ошибками
	Результат.Вставить("УспешноОбработаноДокументов", 	0); // Количество успешно обработанных документов
	Результат.Вставить("КоличествоДокументовСОшибками", 0); // Количество обработанных документов с ошибками
	Результат.Вставить("Сообщения", 					ПроведениеСервер.НовыеСообщенияПользователю()); // Таблица сообщений пользователю по результатам расчета
	Результат.Вставить("ДатаНачала",					'0001-01-01'); 					// Дата начала расчета
	Результат.Вставить("ДатаОкончания",					ПараметрыРасчета.ДатаОкончания);// Дата окончания расчета
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		Возврат Результат;
	КонецЕсли;
	
	// В этой функции фактически выполняется логика проведения документов. Она в конфигурации выполняется привилегированно.
	УстановитьПривилегированныйРежим(Истина);
	
	// Структура, хранящая все данные, используемые в процессе расчета.
	Параметры = Новый Структура();
	Параметры.Вставить("ПараметрыРасчета",			ПараметрыРасчета);
	Параметры.Вставить("Организация",				ПараметрыРасчета.Организация);
	Параметры.Вставить("ДатаНачала",				'0001-01-01'); 	// Начальная дата, с которой выполняется расчет.
	Параметры.Вставить("ДатаОкончания",				ПараметрыРасчета.ДатаОкончания);
	Параметры.Вставить("КоличествоДоговоров", 		0); 			// Количество договоров, которые требуется рассчитать.
	Параметры.Вставить("РезультатРасчета", 			Результат); 	// Структура с результатом расчета.
	Параметры.Вставить("МенеджерВременныхТаблиц", 	Новый МенеджерВременныхТаблиц);
	
	// Сообщения о прогрессе выполнения расчетов.
	Параметры.Вставить("СообщенияПрогресса",		ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыСообщенийПрогресса());
	Параметры.СообщенияПрогресса.Организация		= Параметры.Организация;
	Параметры.СообщенияПрогресса.Месяц				= КонецМесяца(Параметры.ДатаОкончания);
	Параметры.СообщенияПрогресса.ИмяЭтапа			= ЗакрытиеМесяцаКлиентСервер.ИмяЭтапаАктуализацияРасчетовСКонтрагентами();
	Параметры.СообщенияПрогресса.НачальноеЗначение	= 0; // 0 - Начальное значение диапазона прогресса.
	Параметры.СообщенияПрогресса.КонечноеЗначение	= 0; // Число договоров, которые необходимо рассчитать.
	Параметры.СообщенияПрогресса.ДостигнутоеЗначение= 0; // Текущее число уже рассчитанных договоров.

	// Оперативные данные, меняющиеся в цикле при переходе к следующему договору.
	Параметры.Вставить("Контрагент", 				Справочники.Контрагенты.ПустаяСсылка()); 			// Текущий контрагент.
	Параметры.Вставить("ДоговорКонтрагента", 		Справочники.ДоговорыКонтрагентов.ПустаяСсылка()); 	// Текущий договор.
	Параметры.Вставить("ОперативныеОстатки", 		НоваяТаблицаОперативныхОстатков()); // Таблица оперативных остатков по договору.

	// Оперативные данные, меняющиеся в цикле при переходе к следующему документу.
	Параметры.Вставить("ИмяДокумента",				""); 			// Имя текущего документа.
	Параметры.Вставить("Движения"); 								// Структура с наборами записей текущего документа.
	Параметры.Вставить("Регистратор"); 								// Текущий документ.
	Параметры.Вставить("НомерРегистратора", 		""); 			// Системный номер текущего документа.
	Параметры.Вставить("Период",					'0001-01-01'); 	// Системная дата текущего документа.
	Параметры.Вставить("НомерВходящегоДокумента",	""); 			// Входящий номер текущего документа (если есть).
	Параметры.Вставить("ДатаВходящегоДокумента", 	'0001-01-01'); 	// Входящая дата текущего документа (если есть).
	Параметры.Вставить("РучнаяКорректировка",		Ложь);			// Признак ручной корректировки текущего документа.
	Параметры.Вставить("ВидОперации",				Неопределено);	// Вид операции документа (если есть).
	Параметры.Вставить("СостояниеРасчетов", 		Перечисления.СостоянияОтложенныхРасчетов.ПустаяСсылка());
	Параметры.Вставить("ЭтоВозврат", 				Ложь);			// Признак того, что операция является возвратом.
	
	// Используется только в документах поступления / реализации.
	Параметры.Вставить("СпособЗачетаАвансов", 		Неопределено);

	// Используется только в кассовых и банковских документах.
	Параметры.Вставить("БезЗакрывающихДокументов",  Ложь);

	// Строки "Поступление", "Выбытие" (в смысле направление движения активов в/из организации).
	// Возвращаются функциями НаправлениеДвиженияПоступления() и НаправлениеДвиженияВыбытие().
	// Используются аналогично процедурам общего модуля УчетВзаиморасчетов.
	Параметры.Вставить("НаправлениеДвижения", 				"");
	Параметры.Вставить("УчитыватьЗадолженностьУСН",			Ложь);
	Параметры.Вставить("УчитыватьЗадолженностьУСНПатент",	Ложь);

	// Используются только для документов реализации. 
	Параметры.Вставить("ДеятельностьНаПатенте",			Ложь);	// Истина - деятельность на патенте.
	Параметры.Вставить("ДеятельностьНаТорговомСборе",	Ложь);	// Истина - деятельность, облагаемая торговым сбором.
	
	// Данные сохраняемые из старых движений перед их удалением.
	Параметры.Вставить("СохраняемыеДанныеДвижений",		НовыеСохраняемыеДанныеДвижений());
	

	// Данные выборок из запросов. Ключ - имя выборки, значение - НовыеДанныеВыборки().
	
	// Полный список документов для расчета, отсортированный по договорам и в хронологическом порядке.
	Параметры.Вставить("ВсеДокументы");
	// Остатки из регистра бухгалтерии на первое число месяца начала расчетов.
	Параметры.Вставить("ХозрасчетныйОстатки");
	
	// Кешируем часто используемые данные.
	Параметры.Вставить("ВалютаРегламентированногоУчета",	ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	Параметры.Вставить("СчетаВыручкиЕНВД", 					БухгалтерскийУчетПовтИсп.СчетаВыручкиЕНВД()); // 90.01.2
	Параметры.Вставить("СчетаУСН", 
		БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета)); // УСН.*
	
	// Массив документов, которые входят в состав типов документов, поддерживающих отложенное проведение,
	// но сами по себе движения этих документов актуализировать не требуется, т.к. они не используют остатки.
	Параметры.Вставить("ДокументыНеТребующихВосстановленияРасчетов", ДокументыНеТребующиеВосстановленияОтложенныхРасчетов());

	// Ключ - счет, значение - Истина.
	// Используется в СчетПоддерживаетОтложенныеРасчеты()
	Параметры.Вставить("КешСчетаВзаиморасчетов", Новый Соответствие);

	// Инициализируется и используется в ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами().
	Параметры.Вставить("КешДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами", Новый Соответствие);
	
	// Ключ - счет, значение - результат БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета()
	Параметры.Вставить("КешСвойстваСчета", 	Новый Соответствие);

	// Ключ - месяц, Значение - структура, результат УчетнаяПолитикаИзКеша()
	// См. УчетнаяПолитикаИзКеша().
	Параметры.Вставить("КешУчетнаяПолитика",Новый Соответствие);
	
	// Ключ - тип значения ссылки, значение - МетаданныеОбъекта.
	// См. МетаданныеОбъекта().
	Параметры.Вставить("КешМетаданные", 	Новый Соответствие);
	
	Параметры.Движения = НовыеДвижения(Параметры);
	
	ВыполнитьОтложенныеРасчетыПоДоговорам(Параметры);
	
	// Освобождаем ресурсы
	Параметры.МенеджерВременныхТаблиц.Закрыть();

	Возврат Результат;

КонецФункции

// Выполняет отложенные расчеты с контрагентами внутри фонового задания.
//
// Параметры:
//	ПараметрыРасчета - Структура - Содержит параметры расчета, см. НовыеПараметрыРасчета()
//	АдресХранилища - Строка - Адрес временного хранилища, в которое поместить 
//							результат выполнения функции ВыполнитьОтложенныеРасчеты()
//
Процедура ВыполнитьОтложенныеРасчетыВФоне(ПараметрыРасчета, АдресХранилища) Экспорт

	Если ЗначениеЗаполнено(ПараметрыРасчета.Организация) Тогда
		РезультатРасчета = ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
	Иначе
		
		Организации = Справочники.Организации.Выбрать();
		Пока Организации.Следующий() Цикл
			
			ПараметрыРасчета.Организация = Организации.Ссылка;
			РезультатРасчета = ВыполнитьОтложенныеРасчеты(ПараметрыРасчета);
			Если РезультатРасчета.КоличествоДоговоровСОшибками <> 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресХранилища);

КонецПроцедуры

// Запускает фоновое задание по восстановлению отложенных расчетов.
//
// Параметры:
//	ИдентификаторФормы - УникальныйИдентификатор или Неопределено - Идентификатор формы, из которой вызвано задание
//	ПараметрыРасчета - Структура - см. НовыеПараметрыРасчета()
//	КлючФоновогоЗадания - Произвольный - Ключ фонового задания
//
// Возвращаемое значение:
//	Структура - см. ДлительныеОперации.ВыполнитьВФоне()
//
Функция ЗапуститьОтложенныеРасчетыВФоне(Знач ИдентификаторФормы, ПараметрыРасчета, КлючФоновогоЗадания = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ИдентификаторФормы) Тогда
		ИдентификаторФормы = Новый УникальныйИдентификатор();
	КонецЕсли;

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение 				= 0; // Не ожидать завершения.
	ПараметрыВыполнения.НаименованиеФоновогоЗадания 	= НаименованиеФоновогоЗадания();
	ПараметрыВыполнения.КлючФоновогоЗадания 			= КлючФоновогоЗадания;

	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"УчетВзаиморасчетовОтложенноеПроведение.ВыполнитьОтложенныеРасчетыВФоне",
		ПараметрыРасчета,
		ПараметрыВыполнения);
		
	Возврат Результат;

КонецФункции

// Возвращает момент времени, с которого требуется восстановление отложенных расчетов.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, по которой проверяется актуальность расчетов.
//	ДатаОкончания - Дата - Дата, до которой проверять актуальность расчетов.
//	Контрагенты - СправочникСсылка.Контрагенты, Массив - Ссылка или массив контрагентов, по которым проверять актуальность.
//	Договоры - СправочникСсылка.ДоговорыКонтрагентов, Массив - Ссылка или массив договоры, по которым проверять актуальность.
//	ДатаНачала - Дата - Дата, начиная с которой необходимо анализировать состояние расчетов.
//						Если не передана, то без ограничения периода в прошлом.
//
// Возвращаемое значение:
//	МоментВремени - Момент времени, с которого требуется восстановить расчеты, 
//		или Неопределено, если актуализация до ДатыОкончания не требуется.
//
Функция МоментАктуальностиОтложенныхРасчетов(Организация, ДатаОкончания, Контрагенты = Неопределено, Договоры = Неопределено, ДатаНачала = Неопределено) Экспорт

	Результат = Неопределено;

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение") Тогда
		Возврат Результат;
	КонецЕсли;

	Если РаботаСПоследовательностями.ЕстьЗаписиВРегистреИсключенныеИзПерепроведенияМесяцы(Организация) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ДатаНачала",		ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагенты",	Контрагенты);
	Запрос.УстановитьПараметр("Договоры",		Договоры);
	
	// В подзапросах используем отбор по равенству для СостоянияРасчетов, чтобы поиск гарантировано работал по индексу.
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата КАК Дата,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|ГДЕ
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания
	|	И РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению)
	|	И &Организация
	|	И &ДатаНачала
	|	И &Контрагенты
	|	И &Договоры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ
	|ИЗ
	|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|ГДЕ
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания
	|	И РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов)
	|	И &Организация
	|	И &ДатаНачала
	|	И &Контрагенты
	|	И &Договоры
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДатаНачала",
			?(ЗначениеЗаполнено(ДатаНачала), "И РасчетыСКонтрагентамиОтложенноеПроведение.Дата >= &ДатаНачала", ""));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Организация", 
			?(ЗначениеЗаполнено(Организация), "И РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация", ""));
	
	Если ЗначениеЗаполнено(Контрагенты) Тогда
		Если ЕстьГруппыСправочника(Контрагенты) Тогда
			ОператорСравнения = "В ИЕРАРХИИ";
		Иначе
			ОператорСравнения = "В";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"&Контрагенты", 
			"РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент " + ОператорСравнения + " (&Контрагенты)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Контрагенты", "");
	КонецЕсли;

	Если ЗначениеЗаполнено(Договоры) Тогда
		Если ЕстьГруппыСправочника(Договоры) Тогда
			ОператорСравнения = "В ИЕРАРХИИ";
		Иначе
			ОператорСравнения = "В";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"&Договоры",
			"РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента " + ОператорСравнения + " (&Договоры)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Договоры", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Новый МоментВремени(Выборка.Дата, Выборка.Документ);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает дату актуальности отложенных расчетов по всем организациям.
//
Функция ДатаАктуальностиОтложенныхРасчетовПоВсемОрганизациям() Экспорт

	Результат = Неопределено;

	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(РасчетыСКонтрагентамиОтложенноеПроведение.Дата) КАК Дата
	|ИЗ
	|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|ГДЕ
	|	РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов))";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Дата;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСФормами

// Запускает фоновое задание по актуализации расчетов с контрагентами и возвращает признак его выполнения.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, из которой вызвана актуализация.
//	Организация - СправочникСсылка.Организации - Организация, для которой вызывается актуализация.
//	ДатаОкончания - Дата - Дата, на которой необходимо окончить расчеты.
//
// Возвращаемое значение:
//	Булево - Истина, если задание сразу же было выполнено, иначе Ложь.
//
Функция ЗапуститьОтложенныеРасчетыИзФормы(Форма, Организация, ДатаОкончания) Экспорт

	ЗаданиеВыполнено = Ложь;

	Форма.ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
	Форма.АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(Неопределено, Форма.УникальныйИдентификатор);
	
	ПараметрыРасчета = НовыеПараметрыРасчета();
	ПараметрыРасчета.Организация                = Организация;
	ПараметрыРасчета.ДатаОкончания              = ДатаОкончания;
	ПараметрыРасчета.АдресХранилищаСОшибками    = Форма.АдресХранилищаСОшибками;
	ПараметрыРасчета.СообщатьПрогрессВыполнения = Истина;
	
	РезультатЗадания = ЗапуститьОтложенныеРасчетыВФоне(
		Форма.УникальныйИдентификатор, 
		ПараметрыРасчета);

	Форма.АдресХранилищаОтложенныеРасчеты = РезультатЗадания.АдресРезультата;
	Форма.ИдентификаторЗаданияОтложенныеРасчеты = РезультатЗадания.ИдентификаторЗадания;
	
	Если РезультатЗадания.Статус <> "Выполняется" Тогда
		ЗаданиеВыполнено = Истина;
		ЗагрузитьДанныеПослеОтложенногоРасчета(Форма, Организация, ДатаОкончания);
	Иначе
		УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(Форма, ДатаОкончания, Истина);
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;

КонецФункции

// Получает из фонового задания результат отложенных расчетов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, из которой вызываны отложенные расчеты.
//	Организация - СправочникСсылка.Организация - Организация из формы.
//	ДатаОкончания - Дата - Дата .
//
Процедура ЗагрузитьДанныеПослеОтложенногоРасчета(Форма, Организация, ДатаОкончания) Экспорт

	ОбработатьРезультатВыполненияАктуализацияРасчетов(Форма);
	
	ОпределитьМоментАктуальностиОтложенныхРасчетов(Форма, Организация, ДатаОкончания, Истина);

КонецПроцедуры

// Получает из фонового задания результат отложенных расчетов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, из которой вызываны отложенные расчеты.
//	ОбновлятьМоментАктуальности - Булево - Если Истина, то будет заново получен
//		и сохранен в реквизите формы момент актуальности отложенных расчетов.
//
Процедура ОбработатьРезультатВыполненияАктуализацияРасчетов(Форма) Экспорт

	Если ЭтоАдресВременногоХранилища(Форма.АдресХранилищаОтложенныеРасчеты) Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Форма.АдресХранилищаОтложенныеРасчеты);
	КонеЦЕсли;
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура();
	КонецЕсли;

	// Сообщения, возникшие в процессе восстановления расчетов, будут показаны на общей форме сообщений.
	ЕстьСообщения = Ложь;
	
	Если РезультатВыполнения.Свойство("Сообщения")
		И РезультатВыполнения.Сообщения.Количество() > 0 Тогда
		ЕстьСообщения = Истина;
	КонецЕсли;

	Если НЕ ЕстьСообщения Тогда
		Если ЭтоАдресВременногоХранилища(Форма.АдресХранилищаСОшибками) Тогда
			УдалитьИзВременногоХранилища(Форма.АдресХранилищаСОшибками);
		КонецЕсли;
		Форма.АдресХранилищаСОшибками = "";
	КонецЕсли;
	
	Форма.ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
	Если ЭтоАдресВременногоХранилища(Форма.АдресХранилищаОтложенныеРасчеты) Тогда
		УдалитьИзВременногоХранилища(Форма.АдресХранилищаОтложенныеРасчеты);
	КонецЕсли;
	Форма.АдресХранилищаОтложенныеРасчеты = "";
	
КонецПроцедуры

// Определяет момент актуализации в целом по организации и настраивает элементы формы
// для актуализации расчетов с контрагентами.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, из которой вызывается актуализация.
//	Организация - СправочникСсылка.Организация - Организация, выбранная в форме.
//	ДатаОкончания - Дата - Дата, до которой проверять актуальность расчетов.
//	БылаПопыткаАктуализации - Булево - Истина, если ранее уже вызывалась актуализация из формы. 
//
Процедура ОпределитьМоментАктуальностиОтложенныхРасчетов(Форма, Организация, ДатаОкончания, БылаПопыткаАктуализации) Экспорт

	Форма.МоментАктуальностиОтложенныхРасчетов = Неопределено;

	Если НЕ Форма.ИспользуетсяОтложенноеПроведение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Форма.МоментАктуальностиОтложенныхРасчетов = МоментАктуальностиОтложенныхРасчетов(Организация, ДатаОкончания);
		Форма.Элементы.ТекстПриНеобходимостиАктуализации.Заголовок =
			ТекстПриНеобходимостиАктуализации(Форма.МоментАктуальностиОтложенныхРасчетов);
			
	КонецЕсли;
		
	УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(Форма, ДатаОкончания, БылаПопыткаАктуализации);
		
КонецПроцедуры

// Возвращает текст с предупреждения о неактуальности расчетов с контрагентами
// для отображения на панели формы.
//
// Параметры:
//	МоментАктуальности - МоментВремени - Момент актуальности отложенных расчетов.
//
// Возвращаемое значение:
//	ФормированнаяСтрока - Текст предупреждения о неактуальности расчетов с контрагентами.
//
Функция ТекстПриНеобходимостиАктуализации(МоментАктуальности) Экспорт

	Если МоментАктуальности = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Данные учета неактуальны с'") + " ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(МоментАктуальности.Дата, "ДЛФ=Д"), Новый Шрифт( , , Истина)));
	МассивСтрок.Добавить(".");
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);

КонецФункции

// Устанавливает видимость элементов управления на форме, связанных с актуализацией отложенных расчетов с контрагентами.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, из которой вызывалась актуализация.
//	ДатаАктуальности - Дата - Если момент актуальности отложенных расчетов будет раньше этой даты,
//		то считается, что требуется актуализация.
//	БылаПопыткаАктуализации - Булево - Истина, если ранее уже вызывалась актуализация из формы.
//
Процедура УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(Форма, ДатаАктуальности, БылаПопыткаАктуализации) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.Актуализация.Видимость = Форма.ИспользуетсяОтложенноеПроведение;
	
	Если Не Форма.ИспользуетсяОтложенноеПроведение Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяАктуализация = Форма.МоментАктуальностиОтложенныхРасчетов <> Неопределено
		И Форма.МоментАктуальностиОтложенныхРасчетов.Дата <= КонецДня(ДатаАктуальности);

	ОжидаетсяВыполнение = ТребуетсяАктуализация И ЗначениеЗаполнено(Форма.ИдентификаторЗаданияОтложенныеРасчеты);
	
	Организация = Справочники.Организации.ПустаяСсылка();
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Организация") Тогда
		Организация = Форма.Организация;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Организация = Форма.Объект.Организация;
	КонецЕсли;

	// Отображаем одну из страниц на форме в зависимости от текущего состояния актуализации.
	Элементы.ТребуетсяАктуализация.Видимость = ТребуетсяАктуализация И НЕ ОжидаетсяВыполнение;
	Элементы.ИдетАктуализация.Видимость		 = ОжидаетсяВыполнение;
	
	// Кнопку "Актуализировать" показывает только пользователям, которые могут ее нажать.
	Элементы.Актуализировать.Видимость = НЕ Форма.ТолькоПросмотр
										И Обработки.ЗакрытиеМесяца.ПравоИзмененияРегламентныхОпераций(Организация);
	
	Если Элементы.Найти("ДанныеАктуализированы") <> Неопределено Тогда
		Элементы.ДанныеАктуализированы.Видимость = БылаПопыткаАктуализации И Не (ТребуетсяАктуализация Или ОжидаетсяВыполнение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыборкаДанныхДокументов

// Выбирает список контрагентов и договоров для расчета.
//
Процедура ПодготовитьДоговорыДляРасчетов(Параметры)

	ОтборДокумент 			= Ложь;
	ОтборКонтрагент 		= Ложь;
	ОтборДоговорКонтрагента = Ложь;
	ОтборДатаОкончания		= Ложь;
	
	// Документы ввод начальных остатков могут быть записаны в регистре РасчетыСКонтрагентамиОтложенноеПроведение
	// либо своей датой, либо началом следующего месяца.
	// При этом период в проводках у них всегда совпадает с датой документа.
	// Поэтому, чтобы корректно учесть ввод остатков, тех договоров, которые требуется актуализировать 
	// с первого дня начала учета, сдвигаем дату дату ввода остатков.
	
	ДатаВводаОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Параметры.Организация);
	Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		НачалоПервогоДняУчета = КонецМесяца(ДатаВводаОстатков) + 1;
	Иначе
		НачалоПервогоДняУчета = '0001-01-01';
	КонецЕсли;
	
	НомераТаблиц = Новый Структура();

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Параметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", 	Параметры.Организация);
	Запрос.УстановитьПараметр("ДатаОкончания", 	Параметры.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаВводаОстатков", 		ДатаВводаОстатков);
	Запрос.УстановитьПараметр("НачалоПервогоДняУчета", 	НачалоПервогоДняУчета);
	
	ПараметрыРасчета = Параметры.ПараметрыРасчета;

	Если ПараметрыРасчета.Свойство("Документ") 
		И ЗначениеЗаполнено(ПараметрыРасчета.Документ) Тогда
		Запрос.УстановитьПараметр("Документ", ПараметрыРасчета.Документ);
		ОтборДокумент = Истина;
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("Контрагент")
		И ЗначениеЗаполнено(ПараметрыРасчета.Контрагент) Тогда
		Запрос.УстановитьПараметр("Контрагент", ПараметрыРасчета.Контрагент);
		ОтборКонтрагент = Истина;
	КонецЕсли;
	
	Если ПараметрыРасчета.Свойство("ДоговорКонтрагента")
		И ЗначениеЗаполнено(ПараметрыРасчета.ДоговорКонтрагента) Тогда
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ПараметрыРасчета.ДоговорКонтрагента);
		ОтборДоговорКонтрагента = Истина;
	КонецЕсли;

	Если ОтборДокумент Тогда
	
		НомераТаблиц.Вставить("ВТ_ДоговорыДокументов", НомераТаблиц.Количество());
		НомераТаблиц.Вставить("ВТ_ДоговорыДляРасчета", НомераТаблиц.Количество());
	
		// Отбираем все договоры, которые зарегистрированы для указанного документа.
		// Определяем именно по Хозрасчетному, т.к. при включении режима отложенного проведения
		// в регистре сведений РасчетыСКонтрагентамиОтложенноеПроведение не регистрируются все 
		// ранее проведенные документы, только первый, с которого требуется актуализировать, поэтому его состав может быть неполный.
		// В подзапросах используем отбор по равенству для СостоянияРасчетов, чтобы поиск гарантировано работал по индексу.
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(ХозрасчетныйСубконто.Значение КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента
		|ПОМЕСТИТЬ ВТ_ДоговорыДокументов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
		|ГДЕ
		|	ХозрасчетныйСубконто.Регистратор В(&Документ)
		|	И ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачальныеДатыРасчетаПоДоговорам.Контрагент КАК Контрагент,
		|	НачальныеДатыРасчетаПоДоговорам.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(НачальныеДатыРасчетаПоДоговорам.Дата) = &НачалоПервогоДняУчета
		|			ТОГДА &ДатаВводаОстатков
		|		ИНАЧЕ МИНИМУМ(НачальныеДатыРасчетаПоДоговорам.Дата)
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ ВТ_ДоговорыДляРасчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент КАК Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		МИНИМУМ(РасчетыСКонтрагентамиОтложенноеПроведение.Дата) КАК Дата
		|	ИЗ
		|		ВТ_ДоговорыДокументов КАК ВТ_ДоговорыДокументов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
		|			ПО (РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента = ВТ_ДоговорыДокументов.ДоговорКонтрагента)
		|				И (РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация)
		|				И (РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению))
		|				И (РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания)
		|				И (&Контрагент)
		|				И (&ДоговорКонтрагента)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента,
		|		МИНИМУМ(РасчетыСКонтрагентамиОтложенноеПроведение.Дата)
		|	ИЗ
		|		ВТ_ДоговорыДокументов КАК ВТ_ДоговорыДокументов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
		|			ПО (РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента = ВТ_ДоговорыДокументов.ДоговорКонтрагента)
		|				И (РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация)
		|				И (РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов))
		|				И (РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания)
		|				И (&Контрагент)
		|				И (&ДоговорКонтрагента)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента) КАК НачальныеДатыРасчетаПоДоговорам
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеДатыРасчетаПоДоговорам.Контрагент,
		|	НачальныеДатыРасчетаПоДоговорам.ДоговорКонтрагента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДоговорКонтрагента";
		
	Иначе

		НомераТаблиц.Вставить("ВТ_ДоговорыДляРасчета", НомераТаблиц.Количество());

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НачальныеДатыРасчетаПоДоговорам.Контрагент,
		|	НачальныеДатыРасчетаПоДоговорам.ДоговорКонтрагента,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(НачальныеДатыРасчетаПоДоговорам.Дата) = &НачалоПервогоДняУчета
		|			ТОГДА &ДатаВводаОстатков
		|		ИНАЧЕ МИНИМУМ(НачальныеДатыРасчетаПоДоговорам.Дата)
		|	КОНЕЦ КАК Дата
		|ПОМЕСТИТЬ ВТ_ДоговорыДляРасчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент КАК Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		МИНИМУМ(РасчетыСКонтрагентамиОтложенноеПроведение.Дата) КАК Дата
		|	ИЗ
		|		РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
		|	ГДЕ
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация
		|		И РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению)
		|		И РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания
		|		И &Контрагент
		|		И &ДоговорКонтрагента
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента,
		|		МИНИМУМ(РасчетыСКонтрагентамиОтложенноеПроведение.Дата)
		|	ИЗ
		|		РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
		|	ГДЕ
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация
		|		И РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов)
		|		И РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания
		|		И &Контрагент
		|		И &ДоговорКонтрагента
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент,
		|		РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента) КАК НачальныеДатыРасчетаПоДоговорам
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеДатыРасчетаПоДоговорам.Контрагент,
		|	НачальныеДатыРасчетаПоДоговорам.ДоговорКонтрагента
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачальныеДатыРасчетаПоДоговорам.ДоговорКонтрагента";

	КонецЕсли;
	
	НомераТаблиц.Вставить("ВТ_ХозрасчетныйСубконто", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВТ_Проводки",             НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВсеДокументы",            НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ДатаНачалаРасчета",       НомераТаблиц.Количество());
	
	// Для всех договоров, подлежащих расчету, выбираем все документы, в проводках которых встречаются договоры,
	// за период с первой даты по договору и до конца периода расчета.
	// Сортируем список договоров сначала по контрагентам, потом по договорам.
	// Порядок должен быть такой же как и при получении остатков из Хозрасчетного в ПодготовитьОстаткиПоДоговорам().
	
	Запрос.Текст = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() +
	"ВЫБРАТЬ
	|	ВТ_ДоговорыДляРасчета.Контрагент КАК Контрагент,
	|	ВТ_ДоговорыДляРасчета.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ХозрасчетныйСубконто.Период КАК Период,
	|	ХозрасчетныйСубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйСубконто.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйСубконто
	|ИЗ
	|	ВТ_ДоговорыДляРасчета КАК ВТ_ДоговорыДляРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО ВТ_ДоговорыДляРасчета.ДоговорКонтрагента = ХозрасчетныйСубконто.Значение
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|			И (ХозрасчетныйСубконто.Период >= ВТ_ДоговорыДляРасчета.Дата)
	|			И (ХозрасчетныйСубконто.Период <= &ДатаОкончания)
	|ГДЕ
	|	НЕ ХозрасчетныйСубконто.Регистратор ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ХозрасчетныйСубконто.Контрагент КАК Контрагент,
	|	ВТ_ХозрасчетныйСубконто.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ХозрасчетныйСубконто.Период КАК Период,
	|	ВТ_ХозрасчетныйСубконто.Регистратор КАК Регистратор,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт
	|ПОМЕСТИТЬ ВТ_Проводки
	|ИЗ
	|	ВТ_ХозрасчетныйСубконто КАК ВТ_ХозрасчетныйСубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_ХозрасчетныйСубконто.Период = Хозрасчетный.Период
	|			И ВТ_ХозрасчетныйСубконто.Регистратор = Хозрасчетный.Регистратор
	|			И ВТ_ХозрасчетныйСубконто.НомерСтроки = Хозрасчетный.НомерСтроки
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Проводки.Контрагент КАК Контрагент,
	|	ВТ_Проводки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.Владелец КАК КонтрагентВладелец,
	|	ВТ_Проводки.Период КАК Период,
	|	ВТ_Проводки.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ВТ_Проводки.Контрагент = ДоговорыКонтрагентов.Владелец
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов)
	|	КОНЕЦ КАК СостояниеРасчетов
	|ИЗ
	|	ВТ_Проводки КАК ВТ_Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведениеДт
	|		ПО ВТ_Проводки.СчетДт = ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведениеДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_Проводки.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Проводки.Контрагент,
	|	ВТ_Проводки.ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.Владелец,
	|	ВТ_Проводки.Период,
	|	ВТ_Проводки.Регистратор,
	|	ВЫБОР
	|		КОГДА ВТ_Проводки.Контрагент = ДоговорыКонтрагентов.Владелец
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов)
	|	КОНЕЦ КАК СостояниеРасчетов
	|ИЗ
	|	ВТ_Проводки КАК ВТ_Проводки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведениеКт
	|		ПО ВТ_Проводки.СчетКт = ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведениеКт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_Проводки.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ДоговорыДляРасчета.Контрагент,
	|	ВТ_ДоговорыДляРасчета.ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.Владелец,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов
	|ИЗ
	|	ВТ_ДоговорыДляРасчета КАК ВТ_ДоговорыДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|		ПО ВТ_ДоговорыДляРасчета.Контрагент = РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент
	|			И ВТ_ДоговорыДляРасчета.ДоговорКонтрагента = РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация)
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов))
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.Дата >= ВТ_ДоговорыДляРасчета.Дата)
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_ДоговорыДляРасчета.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_ДоговорыДляРасчета.Контрагент,
	|	ВТ_ДоговорыДляРасчета.ДоговорКонтрагента,
	|	ДоговорыКонтрагентов.Владелец,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Дата,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ,
	|	РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов
	|ИЗ
	|	ВТ_ДоговорыДляРасчета КАК ВТ_ДоговорыДляРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|		ПО ВТ_ДоговорыДляРасчета.Контрагент = РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент
	|			И ВТ_ДоговорыДляРасчета.ДоговорКонтрагента = РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация)
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.СостояниеРасчетов = ЗНАЧЕНИЕ(Перечисление.СостоянияОтложенныхРасчетов.КВыполнению))
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.Дата >= ВТ_ДоговорыДляРасчета.Дата)
	|			И (РасчетыСКонтрагентамиОтложенноеПроведение.Дата <= &ДатаОкончания)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ВТ_ДоговорыДляРасчета.ДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_ДоговорыДляРасчета.Дата) КАК Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_ДоговорыДляРасчета.ДоговорКонтрагента) КАК КоличествоДоговоров
	|ИЗ
	|	ВТ_ДоговорыДляРасчета КАК ВТ_ДоговорыДляРасчета";
	
	Если ОтборКонтрагент Тогда
		Если ЕстьГруппыСправочника(ПараметрыРасчета.Контрагент) Тогда
			ОператорСравнения = "В ИЕРАРХИИ";
		Иначе
			ОператорСравнения = "В";
		КонецЕсли;
	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"(&Контрагент)",
			"РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент " + ОператорСравнения + " (&Контрагент)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&Контрагент",
			"РасчетыСКонтрагентамиОтложенноеПроведение.Контрагент " + ОператорСравнения + " (&Контрагент)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Контрагент", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (&Контрагент)", "");
	КонецЕсли;

	Если ОтборДоговорКонтрагента Тогда
		Если ЕстьГруппыСправочника(ПараметрыРасчета.ДоговорКонтрагента) Тогда
			ОператорСравнения = "В ИЕРАРХИИ";
		Иначе
			ОператорСравнения = "В";
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"(&ДоговорКонтрагента)",
			"РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента " + ОператорСравнения + " (&ДоговорКонтрагента)");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"&ДоговорКонтрагента",
			"РасчетыСКонтрагентамиОтложенноеПроведение.ДоговорКонтрагента " + ОператорСравнения + " (&ДоговорКонтрагента)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ДоговорКонтрагента", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (&ДоговорКонтрагента)", "");
	КонецЕсли;

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаВсеДокументы 	= РезультатЗапроса[НомераТаблиц.ВсеДокументы].Выбрать();
	Параметры.ВсеДокументы 	= НовыеДанныеВыборки(ВыборкаВсеДокументы);
	
	ВыборкаДатаНачала = РезультатЗапроса[НомераТаблиц.ДатаНачалаРасчета].Выбрать();
	Если ВыборкаДатаНачала.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаДатаНачала.Дата) Тогда
			Параметры.КоличествоДоговоров					= ВыборкаДатаНачала.КоличествоДоговоров;
			Параметры.ДатаНачала 							= ВыборкаДатаНачала.Дата;
			// Установим количество договоров к расчету как максимальное значение диапазона для индикатора прогресса.
			Параметры.СообщенияПрогресса.КонечноеЗначение 	= Параметры.КоличествоДоговоров;
			Параметры.РезультатРасчета.ДатаНачала			= Параметры.ДатаНачала;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру с данными о выборке из результата запроса.
//
Функция НовыеДанныеВыборки(Выборка)

	Результат = Новый Структура();
	Результат.Вставить("Выборка", 	Выборка); 				// Собственно выборка
	Результат.Вставить("ЕстьДанные",Выборка.Следующий()); 	// Признак наличия необработанных записей в выборке
	
	Возврат Результат;

КонецФункции

// Переход к следующей записи в выборке (если она есть).
//
Функция ВыборкаСледующий(ДанныеВыборки)
	
	Если НЕ ДанныеВыборки.ЕстьДанные Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеВыборки.ЕстьДанные = ДанныеВыборки.Выборка.Следующий();
	
	Возврат ДанныеВыборки.ЕстьДанные;

КонецФункции

#КонецОбласти

#Область ЦиклРасчета

// Процедура выполняет цикл по все обрабатываемым договора
// рассчитывает операции по каждому документу в хронологическом порядке.
//
Процедура ВыполнитьОтложенныеРасчетыПоДоговорам(Параметры)

	ПодготовитьСчетаВзаиморасчетов(Параметры.МенеджерВременныхТаблиц, Истина);

	ПодготовитьДоговорыДляРасчетов(Параметры);

	Если НЕ Параметры.ВсеДокументы.ЕстьДанные Тогда
		Возврат;
	КонецЕсли;
	
	// Сбор статистики по времени выполнения актуализации расчетов с контрагентами.
	Если Параметры.КоличествоДоговоров > 99 Тогда
		ИмяКлючевойОперации = "АктуализацияРасчетовСКонтрагентамиОт100Договоров";
	ИначеЕсли Параметры.КоличествоДоговоров > 9 Тогда
		ИмяКлючевойОперации = "АктуализацияРасчетовСКонтрагентамиОт10До99Договоров";
	ИначеЕсли Параметры.КоличествоДоговоров > 1 Тогда
		ИмяКлючевойОперации = "АктуализацияРасчетовСКонтрагентамиОт2До9Договоров";
	Иначе
		ИмяКлючевойОперации = "АктуализацияРасчетовСКонтрагентамиПоДоговору";
	КонецЕсли;
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПодготовитьОстаткиПоДоговорам(Параметры);
	
	ВыборкаДокументы = Параметры.ВсеДокументы.Выборка;

	Пока Параметры.ВсеДокументы.ЕстьДанные Цикл

		// Признак наличия ошибок в любом из документов по текущему договору.
		Отказ = Ложь;

		// Инициализируем параметры договора.
		ПриИзмененииДоговора(Параметры, Отказ);
		
		// По каждому документу договора с контрагентом.
		Пока Параметры.ВсеДокументы.ЕстьДанные 
			И ВыборкаДокументы.Контрагент 			= Параметры.Контрагент
			И ВыборкаДокументы.ДоговорКонтрагента 	= Параметры.ДоговорКонтрагента Цикл

			ВыполнитьОтложенныеРасчетыПоДокументу(Параметры, Отказ, Истина);

			Если Отказ Тогда
				// При обработке документа возникла ошибка, поэтому пропускаем обработку текущего договора,
				// к нему потребуется вернуться еще раз.
				// Переходим к следующему контрагенту/договору.
				ПерейтиКСледующемуДоговору(Параметры);
			Иначе
				// Переходим к следующему документу в выборке.
				ВыборкаСледующий(Параметры.ВсеДокументы);
			КонецЕсли;
			
			// Подсчитываем общее количество обработанных документов.
			ОтметитьОтработанныйДокумент(Параметры, Отказ);

		КонецЦикла; // По документу.

		// Т.к. выполняем расчеты до определенной даты, то, возможно, в будущем после этой даты
		// тоже есть документы по текущему контрагенту / договору. Причем у них может быть состояние "Выполнено".
		// Установим для первого такого документа состояние "К выполнению", чтобы в следующий раз начать с него.
		ОтметитьКВыполнениюСледующийДокументПоДоговору(Параметры, Отказ);

		// Подсчитываем общее количество обработанных договоров.
		ОтметитьОтработанныйДоговор(Параметры, Отказ);
		
		Если Отказ И Параметры.ПараметрыРасчета.ОстанавливатьсяПоОшибке Тогда
			// Завершаем текущий цикла расчета.
			Прервать;
		КонецЕсли;
		
	КонецЦикла; // По договору с контрагентом.
	
	// После восстановления отложенных расчетов с контрагентами необходимо
	// повторно выполнить регламентные операции по закрытию месяца,
	// которые зависят от состояния взаиморасчетов.
	СдвинутьГраницуАктуальностиРегламентныхОперацийНазад(Параметры);

	СформироватьОтчетПоСообщениямПользователю(Параметры);
	
	// Сбор статистики по времени выполнения актуализации расчетов с контрагентами.
	КомментарийЗамера = СтрШаблон(НСтр("ru = 'договоров = %1'"), Параметры.КоличествоДоговоров);
	ОценкаПроизводительности.ЗакончитьЗамерВремени(ИмяКлючевойОперации, ВремяНачалаЗамера, КомментарийЗамера);

КонецПроцедуры

// Процедура выполняет расчеты по текущему документу.
//
Процедура ВыполнитьОтложенныеРасчетыПоДокументу(Параметры, Отказ, ПроверятьВозможностьОтложенныхРасчетов)

	ДокументЗаблокирован = Ложь;

	// Инициализируем параметры документа.
	ПриИзмененииДокумента(Параметры, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	БлокировкаДанных = НоваяБлокировкаДанных(Параметры);

	// Выполняем расчеты с транзакции.
	НачатьТранзакцию();

	Попытка

		БлокировкаДанных.Заблокировать();

		ДокументЗаблокирован = Истина;

		Если Параметры.СостояниеРасчетов = Перечисления.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов Тогда
			// Сам документ более не относится к расчетам по текущему контрагенту / договору.
			// Исключим запись о нем из регистра РасчетыСКонтрагентамиОтложенноеПроведение.
			УдалитьДокументИзРегистраРасчетыСКонтрагентамиОтложенноеПроведение(Параметры);

		Иначе

			ДокументПоддерживаетОтложенныеРасчеты = ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами(
				Параметры.Регистратор,
				Параметры.КешДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами);
				
			ДокументНеТребуетВосстановленияРасчетов = Параметры.ДокументыНеТребующихВосстановленияРасчетов.Свойство(Параметры.ИмяДокумента);
			
			Если НЕ ДокументПоддерживаетОтложенныеРасчеты
				ИЛИ ДокументНеТребуетВосстановленияРасчетов Тогда
				// По договору введен документ, который не поддерживает механизм отложенных расчетов с контрагентами,
				// его движения не меняем, только обновим по ним оперативные остатки.
				ОбновитьОперативныеОстаткиРучнаяКорректировка(Параметры);
				
			Иначе

				// После успешной блокировки закешируем часто используемые реквизиты документа.
				ЗапомнитьЧастоИспользуемыеРеквизитыДокумента(Параметры);

				Если Параметры.РучнаяКорректировка
					ИЛИ Параметры.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда

					// У документа с ручной корректировкой и т.п. только считываем движения 
					// и корректируем по ним таблицу оперативных остатков.
					ОбновитьОперативныеОстаткиРучнаяКорректировка(Параметры);

				Иначе	
				
					ПрочитатьДвиженияДокумента(Параметры);
					
					Если ПроверятьВозможностьОтложенныхРасчетов Тогда
						// В некоторых случаях движения документа не могут быть актуализированы отложенно,
						// в этом случае требуется обычное проведение документа.
						Если НЕ ПроверитьВозможностьВыполненияОтложенныхРасчетов(Параметры) Тогда
							// Освобождаем документ и проводим его обычным образом, после чего снова вернемся к отложенным расчетам.
							ОтменитьТранзакцию();
							ВыполнитьПолноеПроведение(Параметры, Отказ);
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
					// Сами действия при отложенных расчетах определяются документом.
					Документы[Параметры.ИмяДокумента].ОбработкаОтложенногоПроведения(Параметры, Отказ);
					
					// Записываем движения.
					ЗаписатьДвиженияДокумента(Параметры, Отказ);
					
					// Перерассчитываем оперативные остатки.
					ОбновитьОперативныеОстаткиПоДвижениям(Параметры, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
				
			Если НЕ Отказ И ДокументПоддерживаетОтложенныеРасчеты Тогда
				// Обновляем состояние для успешно актуализированного документа.
				УстановитьСостояниеРасчетовСКонтрагентамиПоДокументу(
					Параметры,
					Перечисления.СостоянияОтложенныхРасчетов.Выполнено,
					Истина);
			КонецЕсли;

		КонецЕсли;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;

	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОтменитьТранзакцию();

		ТекстПричины = "";
		Если НЕ ДокументЗаблокирован Тогда
			ТекстПричины = НСтр("ru = 'Документ редактируется другим пользователем, выполните актуализацию расчетов с контрагентами еще раз позже.'");
		КонецЕсли;
		
		ПроведениеСервер.ЗапомнитьСообщенияПользователю(
			Параметры.РезультатРасчета.Сообщения,
			Параметры.Организация,
			ТекстПричины,
			Параметры.Регистратор,
			Параметры.Период);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет сначала обычное проведение документа, а затем сразу вызывает выполнение отложенных расчетов.
//
Процедура ВыполнитьПолноеПроведение(Параметры, Отказ)

	Попытка

		ДокументОбъект = Параметры.Регистратор.ПолучитьОбъект();
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда

			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			ДокументОбъект = Неопределено;
		
			ВыполнитьОтложенныеРасчетыПоДокументу(Параметры, Отказ, Ложь);
			
		Иначе
			Отказ = Истина;
			ПроведениеСервер.ЗапомнитьСообщенияПользователю(
				Параметры.РезультатРасчета.Сообщения,
				Параметры.Организация,
				"",
				Параметры.Регистратор,
				Параметры.Период,
				Истина);
			
		КонецЕсли;
	
	Исключение
		Отказ = Истина;
		ИнформацияОбОшибке = ИнформацияОбОшибке();
			
		ПроведениеСервер.ЗапомнитьСообщенияПользователю(
			Параметры.РезультатРасчета.Сообщения,
			Параметры.Организация,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			Параметры.Регистратор,
			Параметры.Период);
			
	КонецПопытки;

КонецПроцедуры

// Выполняет инциализацию внутренних переменных при переходе к новому договору.
//
Процедура ПриИзмененииДоговора(Параметры, Отказ)

	ВыборкаДокументы = Параметры.ВсеДокументы.Выборка;

	Параметры.Контрагент 			= ВыборкаДокументы.Контрагент;
	Параметры.ДоговорКонтрагента 	= ВыборкаДокументы.ДоговорКонтрагента;
	Параметры.ОперативныеОстатки.Очистить();

	// Обновим другие зависящие от текущего положения выборки данные.
	ПриИзмененииДокумента(Параметры, Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПодготовитьОперативныеОстаткиПоДоговору(Параметры);

КонецПроцедуры

// Выполняет инциализацию внутренних переменных при переходе к новому документу.
//
Процедура ПриИзмененииДокумента(Параметры, Отказ)

	ВыборкаДокументы = Параметры.ВсеДокументы.Выборка;

	ОчиститьПараметрыПоДокументу(Параметры);
	
	Параметры.Регистратор 		= ВыборкаДокументы.Регистратор;
	Параметры.ИмяДокумента		= МетаданныеОбъекта(Параметры, Параметры.Регистратор).Имя;
	Параметры.Период 			= ВыборкаДокументы.Период;
	Параметры.СостояниеРасчетов = ВыборкаДокументы.СостояниеРасчетов;

	ПроверитьЗаполнениеПараметровПоДокументу(Параметры, Отказ);

КонецПроцедуры

Процедура ПроверитьЗаполнениеПараметровПоДокументу(Параметры, Отказ)

	// В пользовательских базах могут встречаться ошибочные ситуации, когда субконто
	// контрагент и договор по одной стороне проводки не соответствуют друг другу
	// (выбран договор не того контрагента).
	// Отложенное проведение опирается на договор при получении различных данных,
	// поэтому проверим соответствие между контрагентом и владельцем договора.
	// Если они не соответствуют друг другу и при этом не являются отмеченными к исключению из расчетов,
	// то сообщим пользователю.
	
	КонтрагентВладелец = Параметры.ВсеДокументы.Выборка.КонтрагентВладелец;
	
	Если Параметры.Контрагент <> КонтрагентВладелец 
		И Параметры.СостояниеРасчетов <> Перечисления.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов Тогда
		Отказ = Истина;

		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для контрагента ""%1"" указан договор ""%2"", заключенный с другим контрагентом ""%3"".
				|Необходимо указать правильный договор и выполнить актуализацию еще раз.'"),
			Параметры.Контрагент,
			Параметры.ДоговорКонтрагента,
			КонтрагентВладелец);
		
		ДобавитьСообщениеПользователю(Параметры, Параметры.Регистратор, ТекстСообщения, Истина);
	КонецЕсли;

КонецПроцедуры

// Кеширует в структуре Параметры значения наиболее общих реквизитов документа, 
// которые используются в нескольких местах в ходе расчета.
//
Процедура ЗапомнитьЧастоИспользуемыеРеквизитыДокумента(Параметры)

	МетаданныеДокумента = МетаданныеОбъекта(Параметры, Параметры.Регистратор);

	ИменаРеквизитов = Новый Массив;
	ИменаРеквизитов.Добавить("Дата");
	ИменаРеквизитов.Добавить("Номер");
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("РучнаяКорректировка");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("НомерВходящегоДокумента");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("ДатаВходящегоДокумента");
	КонецЕсли;
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВидОперации", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("ВидОперации");
	КонецЕсли;
	
	// В документах поступлении и реализации может быть реквизит "Способ зачета аванса".
	// Если он выставлен в "Не зачитывать", то переформировать проводки по авансу не требуется
	// и документ можно не обрабатывать.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособЗачетаАвансов", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("СпособЗачетаАвансов");
	КонецЕсли;

	// Кассовые и банковские документы могут работать в особом режиме "Без закрывающих документов".
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("БезЗакрывающихДокументов", МетаданныеДокумента) Тогда
		ИменаРеквизитов.Добавить("БезЗакрывающихДокументов");
	КонецЕсли;

	СписокРеквизитов = СтрСоединить(ИменаРеквизитов, ", ");
	
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Параметры.Регистратор, СписокРеквизитов);

	ЗаполнитьЗначенияСвойств(Параметры, РеквизитыДокумента);
	
	Параметры.Период 			= РеквизитыДокумента.Дата;
	Параметры.НомерРегистратора = РеквизитыДокумента.Номер;

КонецПроцедуры

// Сбрасывает значения в структуре Параметры, меняющиеся при смене документа.
//
Процедура ОчиститьПараметрыПоДокументу(Параметры)

	// После смены договора очистим все параметры, относящиеся к текущему документу.
	Параметры.Регистратор 				= Неопределено;
	Параметры.Период 					= '0001-01-01';

	// Заполняются после успешного блокирования документа для обновления его движений.	
	Параметры.НомерРегистратора			= "";
	Параметры.НомерВходящегоДокумента	= "";
	Параметры.ДатаВходящегоДокумента	= '0001-01-01';
	Параметры.РучнаяКорректировка   	= Ложь;
	Параметры.ВидОперации   			= Неопределено;
	
	// Для документов поступления и реализации запоминаем значение реквизита "Способ зачет авансов".
	// Для других документов не используется.
	Параметры.СпособЗачетаАвансов		= Неопределено;
	
	// Для кассовых и банковских документов запоминаем значение реквизита "Без закрывающих документов".
	// Для других документов не используется.
	Параметры.БезЗакрывающихДокументов = Ложь;
	
	// Устанавливаются в процедурах типа СформироватьДвиженияЗачетАвансов(), СформироватьДвиженияПогашениеЗадолженности()
	// после того как будут выбраны данные из документа.
	Параметры.НаправлениеДвижения  				= "";
	Параметры.УчитыватьЗадолженностьУСН 		= Ложь;
	Параметры.УчитыватьЗадолженностьУСНПатент 	= Ложь;
	Параметры.ДеятельностьНаПатенте 			= Ложь;
	Параметры.ДеятельностьНаТорговомСборе 		= Ложь;
	Параметры.ЭтоВозврат 						= Ложь;

	// Очищаем наборы записей регистров.
	Для Каждого КлючИЗначение Из Параметры.Движения Цикл
		КлючИЗначение.Значение.Очистить();
	КонецЦикла;

	// Обнуляем сохраняемые данные.
	СохраняемыеДанныеДвижений = Параметры.СохраняемыеДанныеДвижений;
	Для Каждого КлючИЗначение Из СохраняемыеДанныеДвижений Цикл

		Если ТипЗнч(КлючИЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			СохраняемыеДанныеДвижений[КлючИЗначение.Ключ].Очистить();
		Иначе
			СохраняемыеДанныеДвижений[КлючИЗначение.Ключ] = Неопределено
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Пролистывает все выборки по текущему контрагенту / договору до следующего договора.
//
Процедура ПерейтиКСледующемуДоговору(Параметры)
	
	ДанныеВыборок = Новый Массив;
	ДанныеВыборок.Добавить(Параметры.ВсеДокументы);
	ДанныеВыборок.Добавить(Параметры.ХозрасчетныйОстатки);

	Для Каждого ДанныеВыборки Из ДанныеВыборок Цикл

		Пока ДанныеВыборки.ЕстьДанные
			И ДанныеВыборки.Выборка.Контрагент = Параметры.Контрагент
			И ДанныеВыборки.Выборка.ДоговорКонтрагента = Параметры.ДоговорКонтрагента Цикл
			
			ВыборкаСледующий(ДанныеВыборки);
			
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

// Возвращает структуру для сохранения отдельных данных старых движений (до выполнения отложенных расчетов).
//
Функция НовыеСохраняемыеДанныеДвижений()

	Результат = Новый Структура();

	// Для формирования движений зачета авансов
	// определяем суммы по проводкам, чтобы при восстановлении расчетов не делать чтение 
	// из всех табличных частей всех документов.
	ОписаниеТиповЧисло = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	Результат.Вставить("СуммыВзаиморасчетов", Новый ТаблицаЗначений);
	Результат.СуммыВзаиморасчетов.Колонки.Добавить("СчетРасчетов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.СуммыВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов", 			ОписаниеТиповЧисло);
	Результат.СуммыВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовКомитента", 	ОписаниеТиповЧисло);
	Результат.СуммыВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовЕНВД", 		ОписаниеТиповЧисло);
	Результат.СуммыВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор",ОписаниеТиповЧисло);
	Результат.СуммыВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовПатент",		ОписаниеТиповЧисло);
	Результат.СуммыВзаиморасчетов.Индексы.Добавить("СчетРасчетов");
	
	// При погашении задолженности в КорректировкеДолга запоминаем в отдельной таблице кор.счет и аналитику
	// для использования при проведении взаимозачета.
	Результат.Вставить("КорДвижения", Новый ТаблицаЗначениЙ);
	Результат.КорДвижения.Колонки.Добавить("ДтКт", 			ОбщегоНазначения.ОписаниеТипаСтрока(2));
	Результат.КорДвижения.Колонки.Добавить("Счет", 			Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.КорДвижения.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Результат.КорДвижения.Колонки.Добавить("Валюта", 		Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Результат.КорДвижения.Колонки.Добавить("Субконто1");
	Результат.КорДвижения.Колонки.Добавить("Субконто2");
	Результат.КорДвижения.Колонки.Добавить("Субконто3");
	Результат.КорДвижения.Колонки.Добавить("Сумма", 		ОписаниеТиповЧисло);
	Результат.КорДвижения.Колонки.Добавить("ВалютнаяСумма", ОписаниеТиповЧисло);
	Результат.КорДвижения.Колонки.Добавить("СуммаНУ", 		ОписаниеТиповЧисло);
	
	Результат.КорДвижения.Индексы.Добавить("ДтКт, Счет, Подразделение, Валюта, Субконто1, Субконто2, Субконто3");
	
	Возврат Результат;
	
КонецФункции

// Подсчитывает общее количество обработанных договоров.
//
Процедура ОтметитьОтработанныйДоговор(Параметры, Отказ)

	РезультатРасчета = Параметры.РезультатРасчета;

	Если Отказ Тогда
		РезультатРасчета.КоличествоДоговоровСОшибками = РезультатРасчета.КоличествоДоговоровСОшибками + 1;
	Иначе
		РезультатРасчета.УспешноОбработаноДоговоров = РезультатРасчета.УспешноОбработаноДоговоров + 1;
	КонецЕсли;
	
	// Сообщим прогресс выполнения.
	Если Параметры.ПараметрыРасчета.СообщатьПрогрессВыполнения Тогда
		НаименованиеКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.Контрагент, "Наименование");
	
		Параметры.СообщенияПрогресса.ДостигнутоеЗначение = 
			РезультатРасчета.УспешноОбработаноДоговоров + РезультатРасчета.КоличествоДоговоровСОшибками;
		ПроцентВыполнения = Окр(Параметры.СообщенияПрогресса.ДостигнутоеЗначение / Параметры.СообщенияПрогресса.КонечноеЗначение * 100, 0);

		ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, НаименованиеКонтрагента, Параметры.СообщенияПрогресса);
	КонецЕсли;
	
КонецПроцедуры

// Подсчитывает общее количество обработанных документов.
//
Процедура ОтметитьОтработанныйДокумент(Параметры, Отказ)

	РезультатРасчета = Параметры.РезультатРасчета;

	Если Отказ Тогда
		РезультатРасчета.КоличествоДокументовСОшибками = РезультатРасчета.КоличествоДокументовСОшибками + 1;
	Иначе
		РезультатРасчета.УспешноОбработаноДокументов = РезультатРасчета.УспешноОбработаноДокументов + 1;
	КонецЕсли;

КонецПроцедуры

// Помечает как неактуальные регламентные операции по закрытию месяца, которые зависят от 
// состояния взаиморасчетов с контрагентами.
//
Процедура СдвинутьГраницуАктуальностиРегламентныхОперацийНазад(Параметры)

	Если Параметры.РезультатРасчета.УспешноОбработаноДоговоров = 0 Тогда
		// Расчет ни по одному договору не был успешен,
		// потребуется выполнить еще раз, сейчас сдвигать границу регламентных операций не будем.
		Возврат;
	КонецЕсли;

	// Отложенное проведение поддерживается только для договоров в рублях.
	// От состояния рублевых расчетов зависит регламентная операция по расчету
	// резервов по сомнительным долгам и все, лежащие после нее.
	ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетРезервовПоСомнительнымДолгам;

	Если НЕ ЗакрытиеМесяца.ОперацияТребуетВыполнениеПослеАктуализацииРасчетовСКонтрагентами(
				ВидОперации,
				Параметры.ДатаНачала,
				Параметры.Организация) Тогда
		// Если организация не формирует резервы по сомнительным долгам, но применяет УСН,
		// тогда сбрасываем актуальность операции РасчетНалогаУСН.
		// При уплате налога на прибыль актуализация расчетов с контрагентами не влияет на другие операции 
		// закрытия месяца.
		Если ПрименяетсяУСН(Параметры) Тогда
			ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетНалогаУСН;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ДатаНачала = НачалоМесяца(Параметры.ДатаНачала);	
	Если ДатаНачала > КонецМесяца(Параметры.ДатаОкончания) Тогда
		// Изменять актуальность рег.операции не требуется.
		Возврат;
	КонецЕсли;

	НомерГруппы = ЗакрытиеМесяца.ГруппаПоВидуОперации(ВидОперации);
	
	РегистрыСведений.НеактуальныеРегламентныеОперации.СдвинутьГраницуАктуальностиНазад(
		Параметры.Организация,
		НачалоМесяца(ДатаНачала),
		НомерГруппы,
		ВидОперации,
		Истина);

КонецПроцедуры

// Возвращает Истина, если для текущего документа могут быть выполнены отложенные расчеты.
//
Функция ПроверитьВозможностьВыполненияОтложенныхРасчетов(Параметры)

	// При УСН в процессе обновления ИБ не для всех документов могли быть однозначно идентифицированы
	// договоры, к которым относятся записи регистров накопления КнигаУчетаДоходовИРасходов и КнигаУчетаДоходовПатент.
	// Если текущий документ один из них, то для него требуется выполнить полное проведение, а не только 
	// актуализацию отложенных расчетов.

	// В отчете о розничных продажах могут быть записи с пустыми договорами при оплате наличными,
	// поэтому проверяем по типу оплаты, в остальных документах - по договору.
	
	Если НЕ РегистрыУСНФормируютсяПоДоговорам(Параметры) Тогда
		Возврат Истина;
	КонецЕсли;

	ИменаРегистровУСН = ИменаРегистровУСН();
	
	ВсеЗаписиОбработаны = Истина;
	
	ЭтоОтчетОРозничныхПродажах = ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах");
	
	Для Каждого ИмяРегистра Из ИменаРегистровУСН Цикл
	
		НаборЗаписей = Неопределено;
		Если НЕ Параметры.Движения.Свойство(ИмяРегистра, НаборЗаписей) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Движение Из НаборЗаписей Цикл
			Если ЭтоОтчетОРозничныхПродажах Тогда
				Если НЕ ЗначениеЗаполнено(Движение.ТипОплаты) Тогда
					ВсеЗаписиОбработаны = Ложь;
					Прервать;
				КонецЕсли;
			Иначе
				Если НЕ ЗначениеЗаполнено(Движение.ДоговорКонтрагента) Тогда
					ВсеЗаписиОбработаны = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВсеЗаписиОбработаны Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Возврат ВсеЗаписиОбработаны;

КонецФункции

#КонецОбласти

#Область РаботаСРегистромОтложенныхРасчетов

// Удаляет из регистра РасчетыСКонтрагентамиОтложенноеПроведение запись о текущем документе.
//
Процедура УдалитьДокументИзРегистраРасчетыСКонтрагентамиОтложенноеПроведение(Параметры)

	НаборЗаписей = РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Параметры.Организация);
	НаборЗаписей.Отбор.Контрагент.Установить(Параметры.Контрагент);
	НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(Параметры.ДоговорКонтрагента);
	НаборЗаписей.Отбор.Документ.Установить(Параметры.Регистратор);

	НаборЗаписей.Прочитать();
	
	Счетчик = НаборЗаписей.Количество() - 1;
	Пока Счетчик >= 0 Цикл
	
		Движение = НаборЗаписей[Счетчик];
		Если Движение.СостояниеРасчетов = Перечисления.СостоянияОтложенныхРасчетов.КИсключениюИзРасчетов Тогда
			// Состояние документа не изменилось с момента выполнения запроса, 
			// он так и остается к исключению из расчетов, удаляем такую запись.
			НаборЗаписей.Удалить(Счетчик);
		КонецЕсли;
		
		Счетчик = Счетчик - 1;
	КонецЦикла;

	Если НаборЗаписей.Модифицированность() Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

// Устанавливает в регистре РасчетыСКонтрагентамиОтложенноеПроведение для текущего документа новое состояние.
//
Процедура УстановитьСостояниеРасчетовСКонтрагентамиПоДокументу(Параметры, НовоеСостояние, БлокировкаНаложена)

	Если НЕ БлокировкаНаложена Тогда
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение");
		ЭлементБлокировки.УстановитьЗначение("Документ", Параметры.Регистратор);
		БлокировкаДанных.Заблокировать();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РасчетыСКонтрагентамиОтложенноеПроведение.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Параметры.Регистратор);
	НаборЗаписей.Отбор.Организация.Установить(Параметры.Организация);
	
	НаборЗаписей.Прочитать();
	
	Счетчик = НаборЗаписей.Количество() - 1;

	Пока Счетчик >= 0 Цикл
		Движение = НаборЗаписей[Счетчик];
		Если Движение.Контрагент = Параметры.Контрагент
			И Движение.ДоговорКонтрагента = Параметры.ДоговорКонтрагента Тогда
			НаборЗаписей.Удалить(Счетчик);
			Прервать;
		КонецЕсли;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	ДатаРегистрации = РаботаСПоследовательностями.ДатаРегистрацииДокументаВПоследовательности(
		Параметры.Регистратор, Параметры.Период, Параметры.Организация);
	
	Движение = НаборЗаписей.Добавить();
	
	Движение.Организация 		= Параметры.Организация;
	Движение.Дата 				= ДатаРегистрации;
	Движение.Контрагент			= Параметры.Контрагент;
	Движение.ДоговорКонтрагента	= Параметры.ДоговорКонтрагента;
	Движение.Документ			= Параметры.Регистратор;
	Движение.СостояниеРасчетов	= НовоеСостояние;

	НаборЗаписей.Записать();

КонецПроцедуры

// Устанавливает состояние "К выполнению" для документа по договору, с которого в следующий раз необходимо начинать расчет.
//
Процедура ОтметитьКВыполнениюСледующийДокументПоДоговору(Параметры, Отказ)

	НачатьТранзакцию();
	Попытка
	
		ДокументПоддерживаетОтложенныеРасчеты = ДокументПоддерживаетОтложенныеРасчетыСКонтрагентами(
			Параметры.Регистратор,
			Параметры.КешДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами);
	
		Если Отказ И ДокументПоддерживаетОтложенныеРасчеты Тогда
			// Из-за возникшей ошибки в ходе текущего расчета в следующий раз необходимо повторить, 
			// начиная с того документа, на котором остановились сейчас.
			УстановитьСостояниеРасчетовСКонтрагентамиПоДокументу(
				Параметры,
				Перечисления.СостоянияОтложенныхРасчетов.КВыполнению,
				Ложь);
		Иначе
			НайтиИУстановитьКВыполнениюСледующийДокументПоДоговору(
				Параметры.Организация,
				Параметры.Контрагент,
				Параметры.ДоговорКонтрагента,
				Параметры.ДатаОкончания);
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		ОтменитьТранзакцию();
		
		ТекстПричины = СтрШаблон(
			НСтр("ru = 'Не удалось отметить документ к выполнению в регистре ""Расчеты с контрагентами отложенное проведение"" по договору ""%1"" с ""%2""'"),
			Параметры.ДоговорКонтрагента,
			Параметры.Контрагент);
		
		ДобавитьСообщениеПользователю(
			Параметры,
			Параметры.ДоговорКонтрагента,
			ТекстПричины,
			ИнформацияОбОшибке);
	
	КонецПопытки;

КонецПроцедуры

// Возвращает Истина, если по указанной организации есть записи в регистре сведений
// РасчетыСКонтрагентамиОтложенноеПроведение.
//
Функция ЕстьЗаписиРегистраРасчетыСКонтрагентамиОтложенноеПроведение(Организация)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Документ
	|ИЗ
	|	РегистрСведений.РасчетыСКонтрагентамиОтложенноеПроведение КАК РасчетыСКонтрагентамиОтложенноеПроведение
	|ГДЕ
	|	РасчетыСКонтрагентамиОтложенноеПроведение.Организация = &Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

#КонецОбласти

#Область ОперативныеОстаткиПоСчетам

// Возвращает массив со счетами взаиморасчетов, для которых поддерживается отложенные расчеты с контрагентами.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, Неопределено - Если передан, то должен содержать
//		временную таблицу ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение
//		с полями как готовится в ПодготовитьСчетаВзаиморасчетов().
//
Функция СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение(МенеджерВременныхТаблиц = Неопределено) Экспорт

	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ПодготовитьСчетаВзаиморасчетов(МенеджерВременныхТаблиц, Ложь);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет КАК Счет
	|ИЗ
	|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

// Возвращает массив с видами договоров, для которых поддерживаются отложенные расчеты с контрагентами.
//
Функция ВидыДоговоровОтложенногоПроведения() Экспорт
	
	ВидыДоговоров = Новый Массив;
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	ВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	Возврат ВидыДоговоров;
	
КонецФункции

// Заполняет временные таблицы списками счетов взаиморасчетов с учетом наличиях субконто "Документы расчетов".
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер, в котором будет создана временная таблица.
//	ОтдельныеТаблицыПоСубконтоДокументыРасчетов - Булево - Истина, 
//			если требуются отдельные таблицы счетов с документами и без документов расчетов.
//
Процедура ПодготовитьСчетаВзаиморасчетов(МенеджерВременныхТаблиц, ОтдельныеТаблицыПоСубконтоДокументыРасчетов)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Счета, которые имеют субконто Контрагенты и Договоры, но имеют особенности 
	// и не предназначены для использования в документах расчетов с контрагентами.
	// Т.к. отложенное проведение поддерживается только для рублевых договоров, 
	// то рассматриваются только рублевые субсчета.
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные); 					// 60.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные); 					// 62.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РезервыПоСомнительнымДолгам); 		// 63
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам); 					// 68
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАренднымОбязательствам);			// 76.07.9
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);// 76.К
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);			// 76.НА
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДоходыПолученныеВСчетБудущихПериодов);// 98.01
	
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	ВЫБОР
	|		КОГДА ВидыСубконтоДокументРасчетов.ВидСубконто ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДокументРасчетов
	|ПОМЕСТИТЬ ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоКонтрагент
	|		ПО Хозрасчетный.Ссылка = ВидыСубконтоКонтрагент.Ссылка
	|			И (ВидыСубконтоКонтрагент.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДоговор
	|		ПО Хозрасчетный.Ссылка = ВидыСубконтоДоговор.Ссылка
	|			И (ВидыСубконтоДоговор.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоДокументРасчетов
	|		ПО Хозрасчетный.Ссылка = ВидыСубконтоДокументРасчетов.Ссылка
	|			И (ВидыСубконтоДокументРасчетов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|ГДЕ
	|	НЕ Хозрасчетный.Валютный
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (&СчетаИсключения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	
	Если ОтдельныеТаблицыПоСубконтоДокументыРасчетов Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + 
		"ВЫБРАТЬ
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
		|ПОМЕСТИТЬ ВТ_СчетаВзаиморасчетовПоДокументам
		|ИЗ
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение
		|ГДЕ
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.ЕстьДокументРасчетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
		|ПОМЕСТИТЬ ВТ_СчетаВзаиморасчетовБезДокументов
		|ИЗ
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение
		|ГДЕ
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.ЕстьДокументРасчетов = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();

КонецПроцедуры

// Выбирает остатки из регистра бухгалтерии Хозрасчетного по всем рассчитываем договорам на начало первого месяца.
//
Процедура ПодготовитьОстаткиПоДоговорам(Параметры)

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Параметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", 		Параметры.Организация);
	Запрос.УстановитьПараметр("ПервоеЧислоМесяца", 	НачалоМесяца(Параметры.ДатаНачала));

	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ВидыСубконтоКонтрагентыДоговорыДокументы = Новый Массив;
	ВидыСубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", 			ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговорыДокументы", 	ВидыСубконтоКонтрагентыДоговорыДокументы);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныеОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныеОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ВЫРАЗИТЬ(ХозрасчетныеОстатки.Субконто1 КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(ХозрасчетныеОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ХозрасчетныеОстатки.Субконто3, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов,
	|	ХозрасчетныеОстатки.СуммаОстаток,
	|	ХозрасчетныеОстатки.СуммаНУОстаток
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОстаткиДокументыРасчетов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ПервоеЧислоМесяца,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаВзаиморасчетовПоДокументам.Счет
	|				ИЗ
	|					ВТ_СчетаВзаиморасчетовПоДокументам),
	|			&ВидыСубконтоКонтрагентыДоговорыДокументы,
	|			Организация = &Организация
	|				И (Субконто1, Субконто2) В
	|					(ВЫБРАТЬ
	|						ВТ_ДоговорыДляРасчета.Контрагент,
	|						ВТ_ДоговорыДляРасчета.ДоговорКонтрагента
	|					ИЗ
	|						ВТ_ДоговорыДляРасчета КАК ВТ_ДоговорыДляРасчета)) КАК ХозрасчетныеОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов.Счет КАК Счет,
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов.Подразделение,
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов.Контрагент КАК Контрагент,
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов.ДокументРасчетов КАК ДокументРасчетов,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.НомерРегистратора, """") КАК НомерДокументаРасчетов,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаРасчетов,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента,
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов.СуммаОстаток,
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов.СуммаНУОстаток
	|ИЗ
	|	ВТ_ХозрасчетныйОстаткиДокументыРасчетов КАК ВТ_ХозрасчетныйОстаткиДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТ_ХозрасчетныйОстаткиДокументыРасчетов.ДокументРасчетов = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныеОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныеОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	ВЫРАЗИТЬ(ХозрасчетныеОстатки.Субконто1 КАК Справочник.Контрагенты),
	|	ВЫРАЗИТЬ(ХозрасчетныеОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов),
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ХозрасчетныеОстатки.СуммаОстаток,
	|	ХозрасчетныеОстатки.СуммаНУОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ПервоеЧислоМесяца,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаВзаиморасчетовБезДокументов.Счет
	|				ИЗ
	|					ВТ_СчетаВзаиморасчетовБезДокументов),
	|			&ВидыСубконтоКонтрагентыДоговоры,
	|			Организация = &Организация
	|				И (Субконто1, Субконто2) В
	|					(ВЫБРАТЬ
	|						ВТ_ДоговорыДляРасчета.Контрагент,
	|						ВТ_ДоговорыДляРасчета.ДоговорКонтрагента
	|					ИЗ
	|						ВТ_ДоговорыДляРасчета КАК ВТ_ДоговорыДляРасчета)) КАК ХозрасчетныеОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	Счет,
	|	ДатаДокументаРасчетов,
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ХозрасчетныйОстаткиДокументыРасчетов";

	РезультатЗапроса = Запрос.Выполнить();

	Параметры.ХозрасчетныйОстатки = НовыеДанныеВыборки(РезультатЗапроса.Выбрать());

КонецПроцедуры

// Заполняет таблицу оперативных остатков по договору на момент первого документа.
// Вызывается один раз в начале цикла по каждому договору для заполнения оперативных остатков.
// Далее остатки перерассчитываются по сформированным движениям без обращения к базе данных.
//
Процедура ПодготовитьОперативныеОстаткиПоДоговору(Параметры)

	Параметры.ОперативныеОстатки.Очистить();
	
	// Заполним по остаткам Хозрасчетного на первое число первого месяца расчета.
	ЗаполнитьОперативныеОстаткиПоДоговору(Параметры);

	// Добавляем обороты за период с первого числа первого месяца по всем договорам 
	// до момента первого документа по текущему договору.
	МоментПервогоДокументаПоДоговору = Новый МоментВремени(Параметры.Период, Параметры.Регистратор);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Параметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", 			Параметры.Организация);
	Запрос.УстановитьПараметр("ПервоеЧислоМесяца", 		НачалоМесяца(Параметры.ДатаНачала));

	Запрос.УстановитьПараметр("МоментПервогоДокументаПоДоговору", 	Новый Граница(МоментПервогоДокументаПоДоговору, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Контрагент", 			Параметры.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", 	Параметры.ДоговорКонтрагента);
	
	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ВидыСубконтоКонтрагентыДоговорыДокументы = Новый Массив;
	ВидыСубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоКонтрагентыДоговорыДокументы.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", 			ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговорыДокументы", 	ВидыСубконтоКонтрагентыДоговорыДокументы);
	
	Запрос.Текст = ТекстЗапросаОборотыПоДоговору();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Счет");
	Отбор.Вставить("Подразделение");
	Отбор.Вставить("ДокументРасчетов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
	
		Если ЗначениеЗаполнено(Выборка.ДокументРасчетов) Тогда
			ДокументРасчетов = Выборка.ДокументРасчетов;
		Иначе
			// Отбор по пустому документу расчетов как по Неопределено.
			ДокументРасчетов 		= Неопределено;
			Отбор.ДокументРасчетов 	= Неопределено;
		КонецЕсли;
		
		НайденныеСтроки = Параметры.ОперативныеОстатки.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			// Изменяем суммы оперативного остатка на величину.
			// Сумму всегда рассчитаем как СН + ДО - КО. 
			// Для пассивных счетов знак будет инвертирован в ОперативныеОстаткиПоСчетам().
			НайденнаяСтрока = НайденныеСтроки[0];
			НайденнаяСтрока.СуммаОстаток 	= НайденнаяСтрока.СуммаОстаток + Выборка.СуммаОборот;
			НайденнаяСтрока.СуммаНУОстаток 	= НайденнаяСтрока.СуммаНУОстаток + Выборка.СуммаНУОборот;
			
			Если НайденнаяСтрока.СуммаОстаток = 0 И НайденнаяСтрока.СуммаНУОстаток = 0 Тогда
				// Удалим обнулившиеся остатки.
				Параметры.ОперативныеОстатки.Удалить(НайденнаяСтрока);
			КонецЕсли;
		Иначе
			// Добавляем новую строку остатков.
			НоваяСтрока = Параметры.ОперативныеОстатки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			// Пустой документ расчетов заменяем на Неопределено.
			НоваяСтрока.ДокументРасчетов = ДокументРасчетов;
			НоваяСтрока.СуммаОстаток 	= Выборка.СуммаОборот;
			НоваяСтрока.СуммаНУОстаток 	= Выборка.СуммаНУОборот;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Переносит в таблицу оперативных остатков данные из выборки ХозрасчетныйОстатки по текущему договору.
// Не выгружаем полностью всю таблицу из запроса сразу, чтобы не занимать лишнюю память.
//
Процедура ЗаполнитьОперативныеОстаткиПоДоговору(Параметры)

	Выборка = Параметры.ХозрасчетныйОстатки.Выборка;

	Пока Параметры.ХозрасчетныйОстатки.ЕстьДанные
		И Выборка.Контрагент 			= Параметры.Контрагент
		И Выборка.ДоговорКонтрагента 	= Параметры.ДоговорКонтрагента Цикл
		
		НоваяСтрока = Параметры.ОперативныеОстатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ВыборкаСледующий(Параметры.ХозрасчетныйОстатки);
		
	КонецЦикла;

КонецПроцедуры

// Возвращает текст запроса к оборотам регистра бухгалтерии по текущему договору
// за период с первого числа первого месяца расчета до момента времени первого документа по договору.
// 
Функция ТекстЗапросаОборотыПоДоговору()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныеОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныеОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ЕСТЬNULL(ХозрасчетныеОбороты.Субконто3, НЕОПРЕДЕЛЕНО) КАК ДокументРасчетов,
	|	ХозрасчетныеОбороты.СуммаОборот,
	|	ХозрасчетныеОбороты.СуммаНУОборот
	|ПОМЕСТИТЬ ВТ_ХозрасчетныйОборотыДокументыРасчетов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ПервоеЧислоМесяца,
	|			&МоментПервогоДокументаПоДоговору,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаВзаиморасчетовПоДокументам.Счет
	|				ИЗ
	|					ВТ_СчетаВзаиморасчетовПоДокументам),
	|			&ВидыСубконтоКонтрагентыДоговорыДокументы,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента,
	|			,
	|			) КАК ХозрасчетныеОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ХозрасчетныйОборотыДокументыРасчетов.Счет КАК Счет,
	|	ВТ_ХозрасчетныйОборотыДокументыРасчетов.Подразделение,
	|	ВТ_ХозрасчетныйОборотыДокументыРасчетов.ДокументРасчетов КАК ДокументРасчетов,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.НомерРегистратора, """") КАК НомерДокументаРасчетов,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаРасчетов,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокумента,
	|	ВТ_ХозрасчетныйОборотыДокументыРасчетов.СуммаОборот КАК СуммаОборот,
	|	ВТ_ХозрасчетныйОборотыДокументыРасчетов.СуммаНУОборот КАК СуммаНУОборот
	|ИЗ
	|	ВТ_ХозрасчетныйОборотыДокументыРасчетов КАК ВТ_ХозрасчетныйОборотыДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВТ_ХозрасчетныйОборотыДокументыРасчетов.ДокументРасчетов = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныеОбороты.Счет,
	|	ЕСТЬNULL(ХозрасчетныеОбороты.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	НЕОПРЕДЕЛЕНО,
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	ХозрасчетныеОбороты.СуммаОборот,
	|	ХозрасчетныеОбороты.СуммаНУОборот
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ПервоеЧислоМесяца,
	|			&МоментПервогоДокументаПоДоговору,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ
	|					ВТ_СчетаВзаиморасчетовБезДокументов.Счет
	|				ИЗ
	|					ВТ_СчетаВзаиморасчетовБезДокументов),
	|			&ВидыСубконтоКонтрагентыДоговоры,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента,
	|			,
	|			) КАК ХозрасчетныеОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	ДатаДокументаРасчетов,
	|	ДокументРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ХозрасчетныйОборотыДокументыРасчетов";

	Возврат ТекстЗапроса;

КонецФункции

// Возвращает таблицу значений для хранения оперативных остатков по договору.
//
Функция НоваяТаблицаОперативныхОстатков()

	ОписаниеТиповЧисло = БухгалтерскийУчетКлиентСервер.ТипСумма();

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Счет", 					Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("Подразделение", 		Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Результат.Колонки.Добавить("ДокументРасчетов", 		Документы.ТипВсеСсылки());
	Результат.Колонки.Добавить("НомерДокументаРасчетов",	ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("ДатаДокументаРасчетов", 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("НомерВходящегоДокумента",	ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("ДатаВходящегоДокумента", 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("СуммаОстаток", 			ОписаниеТиповЧисло);
	Результат.Колонки.Добавить("СуммаНУОстаток", 		ОписаниеТиповЧисло);
	
	Результат.Индексы.Добавить("Счет, Подразделение, ДокументРасчетов");
	Результат.Индексы.Добавить("ДокументРасчетов");

	Возврат Результат;

КонецФункции

// Возвращает таблицу значений с остатками по счетам из массива.
//
Функция ОперативныеОстаткиПоСчетам(Параметры, СчетаОстатков)

	// Включаем общие колонки и для зачета авансов и для погашения задолженности.
	
	ОписаниеТиповЧисло = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	ТаблицаОстатков = Новый ТаблицаЗначений;

	ТаблицаОстатков.Колонки.Добавить("Счет", 					Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОстатков.Колонки.Добавить("Валюта",					Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаОстатков.Колонки.Добавить("Контрагент", 				Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаОстатков.Колонки.Добавить("ДоговорКонтрагента", 		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаОстатков.Колонки.Добавить("ДокументРасчетов", 		Документы.ТипВсеСсылки());
	ТаблицаОстатков.Колонки.Добавить("ДатаДокументаРасчетов", 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ТаблицаОстатков.Колонки.Добавить("Подразделение", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));

	ТаблицаОстатков.Колонки.Добавить("СуммаВзаиморасчетов",			ОписаниеТиповЧисло);
	ТаблицаОстатков.Колонки.Добавить("СуммаБУ", 					ОписаниеТиповЧисло);
	ТаблицаОстатков.Колонки.Добавить("СуммаНУ", 					ОписаниеТиповЧисло);

	ТаблицаОстатков.Колонки.Добавить("СуммаВзаиморасчетовЕНВД", 	ОписаниеТиповЧисло);
	ТаблицаОстатков.Колонки.Добавить("СуммаБУ_ЕНВД", 				ОписаниеТиповЧисло);

	ТаблицаОстатков.Колонки.Добавить("СуммаВзаиморасчетовПатент", 	ОписаниеТиповЧисло);
	ТаблицаОстатков.Колонки.Добавить("СуммаБУ_Патент", 				ОписаниеТиповЧисло);

	ТаблицаОстатков.Колонки.Добавить("СуммаВзаиморасчетовКомитента", 	ОписаниеТиповЧисло);
	ТаблицаОстатков.Колонки.Добавить("СуммаБУ_Комитента", 				ОписаниеТиповЧисло);

	ТаблицаОстатков.Колонки.Добавить("СуммаВзаиморасчетовТорговыйСбор", ОписаниеТиповЧисло);
	ТаблицаОстатков.Колонки.Добавить("СуммаБУ_ТорговыйСбор", 			ОписаниеТиповЧисло);

	ТаблицаОстатков.Индексы.Добавить("Контрагент, ДоговорКонтрагента, ДокументРасчетов, Подразделение");

	Если СчетаОстатков.Количество() = 0 Тогда
		Возврат ТаблицаОстатков;
	КонецЕсли;

	ЗаписьУчетнойПолитики = УчетнаяПолитикаИзКеша(Параметры);
	
	ОтборПоСчету 		= Новый Структура("Счет");
	ОтборПоАналитике 	= Новый Структура("Контрагент, ДоговорКонтрагента, ДокументРасчетов, Подразделение");
	
	Множитель = ?(Параметры.НаправлениеДвижения = НаправлениеДвиженияВыбытие(), -1, 1);
	
	СчетаДляОтбора = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаОстатков);
	
	// Добавляем счета для УСН.
	// Отложенное проведение только в рублях, учитываем только рублевые субсчета.
	УСНРасчетыСПокупателямиЕНВД 		= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД; 		// УСН.01
	УСНРасчетыСПокупателямиКомитент 	= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент; 	// УСН.02
	УСНРасчетыСПокупателямиПатент 		= ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиПатент; 		// УСН.03
	УСНРасчетыСПокупателямиТорговыйСбор = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор; // УСН.04
	
	Если Параметры.УчитыватьЗадолженностьУСН ИЛИ Параметры.УчитыватьЗадолженностьУСНПатент Тогда
		СчетаДляОтбора.Добавить(УСНРасчетыСПокупателямиЕНВД);
		СчетаДляОтбора.Добавить(УСНРасчетыСПокупателямиКомитент);
		СчетаДляОтбора.Добавить(УСНРасчетыСПокупателямиПатент);
		СчетаДляОтбора.Добавить(УСНРасчетыСПокупателямиТорговыйСбор);
	КонецЕсли;
	
	Для Каждого Счет Из СчетаДляОтбора Цикл

		ОтборПоСчету.Счет = Счет;
		НайденныеСтроки = Параметры.ОперативныеОстатки.НайтиСтроки(ОтборПоСчету);

		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
			СуммаОстаток 	= НайденнаяСтрока.СуммаОстаток * Множитель;
			ЭтоСчетБУ 		= СчетаОстатков.Найти(Счет) <> Неопределено;
			НоваяСтрока		= Неопределено;
		
			Если ЭтоСчетБУ Тогда
				// Суммы закрываем только в том случае, если это действительно авансы / задолженность
				Если СуммаОстаток <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				// Суммы по счетам УСН добавляем отдельными колонками для строки со счетом взаиморасчетов, потом свернем в одну строку,
				// поэтому поищем сначала такую строку со счетом взаиморасчетов.
				ОтборПоАналитике.Контрагент 		= Параметры.Контрагент;
				ОтборПоАналитике.ДоговорКонтрагента	= Параметры.ДоговорКонтрагента;
				ОтборПоАналитике.ДокументРасчетов	= НайденнаяСтрока.ДокументРасчетов;
				ОтборПоАналитике.Подразделение		= НайденнаяСтрока.Подразделение;
				
				НайденныеСтрокиОстатковБУ = ТаблицаОстатков.НайтиСтроки(ОтборПоАналитике);
				Если НайденныеСтрокиОстатковБУ.Количество() > 0 Тогда
					НоваяСтрока = НайденныеСтрокиОстатковБУ[0];
				КонецЕсли;
				
			КонецЕсли;

			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ТаблицаОстатков.Добавить();
				
				НоваяСтрока.Счет 					= ?(ЭтоСчетБУ, Счет, СчетаОстатков[0]);
				НоваяСтрока.Валюта 					= Параметры.ВалютаРегламентированногоУчета;  // Отложенное проведение только в рублях.
				НоваяСтрока.Контрагент 				= Параметры.Контрагент;
				НоваяСтрока.ДоговорКонтрагента 		= Параметры.ДоговорКонтрагента;
				НоваяСтрока.ДокументРасчетов 		= НайденнаяСтрока.ДокументРасчетов;
				НоваяСтрока.ДатаДокументаРасчетов	= НайденнаяСтрока.ДатаДокументаРасчетов;
				НоваяСтрока.Подразделение			= НайденнаяСтрока.Подразделение;
			КонецЕсли;
			
			Если ЭтоСчетБУ Тогда

				НоваяСтрока.СуммаВзаиморасчетов	= НоваяСтрока.СуммаВзаиморасчетов + СуммаОстаток;
				НоваяСтрока.СуммаБУ				= НоваяСтрока.СуммаБУ + СуммаОстаток;
				НоваяСтрока.СуммаНУ				= НоваяСтрока.СуммаНУ + НайденнаяСтрока.СуммаНУОстаток * Множитель;
				
			ИначеЕсли Счет = УСНРасчетыСПокупателямиЕНВД Тогда

				НоваяСтрока.СуммаВзаиморасчетовЕНВД = НоваяСтрока.СуммаВзаиморасчетовЕНВД + СуммаОстаток;
				НоваяСтрока.СуммаБУ_ЕНВД 			= НоваяСтрока.СуммаБУ_ЕНВД + СуммаОстаток;

			ИначеЕсли Счет = УСНРасчетыСПокупателямиКомитент Тогда

				НоваяСтрока.СуммаВзаиморасчетовКомитента= НоваяСтрока.СуммаВзаиморасчетовКомитента + СуммаОстаток;
				НоваяСтрока.СуммаБУ_Комитента 			= НоваяСтрока.СуммаБУ_Комитента + СуммаОстаток;

			ИначеЕсли Счет = УСНРасчетыСПокупателямиПатент Тогда

				НоваяСтрока.СуммаВзаиморасчетовПатент 	= НоваяСтрока.СуммаВзаиморасчетовПатент + СуммаОстаток;
				НоваяСтрока.СуммаБУ_Патент 				= НоваяСтрока.СуммаБУ_Патент + СуммаОстаток;

			ИначеЕсли Счет = УСНРасчетыСПокупателямиТорговыйСбор Тогда

				НоваяСтрока.СуммаВзаиморасчетовТорговыйСбор = НоваяСтрока.СуммаВзаиморасчетовТорговыйСбор + СуммаОстаток;
				НоваяСтрока.СуммаБУ_ТорговыйСбор 			= НоваяСтрока.СуммаБУ_ТорговыйСбор + СуммаОстаток;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;
	
	ТаблицаОстатков.Свернуть(
		"Счет, Валюта, Контрагент, ДоговорКонтрагента, Подразделение, ДокументРасчетов, ДатаДокументаРасчетов",
		"СуммаВзаиморасчетов, СуммаБУ, СуммаНУ, 
		|СуммаВзаиморасчетовЕНВД, СуммаБУ_ЕНВД,
		|СуммаВзаиморасчетовПатент, СуммаБУ_Патент,
		|СуммаВзаиморасчетовКомитента, СуммаБУ_Комитента,
		|СуммаВзаиморасчетовТорговыйСбор, СуммаБУ_ТорговыйСбор");

	ТаблицаОстатков.Сортировать("ДатаДокументаРасчетов, ДокументРасчетов", Новый СравнениеЗначений);
	
	Возврат ТаблицаОстатков;

КонецФункции

// Пересчитывает оперативные остатки по договору по данным из проводок.
//
Процедура ОбновитьОперативныеОстаткиПоДвижениям(Параметры, Отказ)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Регистратор			= Параметры.Регистратор;
	Контрагент			= Параметры.Контрагент;
	ДоговорКонтрагента	= Параметры.ДоговорКонтрагента;
	
	Проводки 			= Параметры.Движения.Хозрасчетный;

	ВидСубконтоКонтрагенты 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидСубконтоДокументыРасчетов = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
	
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();

	Отбор = Новый Структура("Счет, Подразделение, ДокументРасчетов");
	
	МассивДтКт = Новый Массив(2);
	МассивДтКт[0] = "Дт";
	МассивДтКт[1] = "Кт";

	Для Каждого Проводка Из Проводки Цикл
		
		Для Каждого СуффиксДтКт Из МассивДтКт Цикл
		
			Счет 						= Проводка["Счет" + СуффиксДтКт];
			Субконто 					= Проводка["Субконто" + СуффиксДтКт];
			КонтрагентПроводки 			= Субконто[ВидСубконтоКонтрагенты];
			ДоговорКонтрагентаПроводки 	= Субконто[ВидСубконтоДоговоры];
			
			Если КонтрагентПроводки <> Контрагент 
				ИЛИ ДоговорКонтрагентаПроводки <> ДоговорКонтрагента Тогда
				// Проводка не относится к текущему контрагенту и договору, пропускаем ее.
				Продолжить;
			КонецЕсли;
			
			ПодразделениеПроводки 		= Проводка["Подразделение" + СуффиксДтКт];
			ДокументРасчетовПроводки 	= Субконто[ВидСубконтоДокументыРасчетов];
			СвойстваСчета				= СвойстваСчета(Параметры, Счет);

			Если СвойстваСчета.НалоговыйУчет Тогда
				СуммаНУ = Проводка["СуммаНУ" + СуффиксДтКт];
			Иначе
				СуммаНУ = 0;
			КонецЕсли;
			
			Отбор.Счет = Счет;

			// Подразделения может не быть на счете, в этом случае отбор все равно делаем по пустой ссылке.
			Если ЗначениеЗаполнено(ПодразделениеПроводки) Тогда
				Отбор.Подразделение = ПодразделениеПроводки;
			Иначе
				Отбор.Подразделение = ПустоеПодразделение;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументРасчетовПроводки) Тогда
				Отбор.ДокументРасчетов = ДокументРасчетовПроводки;
			Иначе
				Отбор.ДокументРасчетов = Неопределено;
			КонецЕсли;
			
			НайденныеСтроки = Параметры.ОперативныеОстатки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				// Всегда рассчитываем как СН + ДО - КО. 
				// Если счет пассивный, то знак будет изменен при подготовке таблицы остатков.
				НайденнаяСтрока.СуммаОстаток = НайденнаяСтрока.СуммаОстаток 
					+ ?(СуффиксДтКт = "Дт", Проводка.Сумма, 0)
					- ?(СуффиксДтКт = "Кт", Проводка.Сумма, 0);
					
				Если СвойстваСчета.НалоговыйУчет Тогда
					НайденнаяСтрока.СуммаНУОстаток = НайденнаяСтрока.СуммаНУОстаток
						+ ?(СуффиксДтКт = "Дт", СуммаНУ, 0)
						- ?(СуффиксДтКт = "Кт", СуммаНУ, 0);
				КонецЕсли;
				
				Если НайденнаяСтрока.СуммаОстаток = 0 И НайденнаяСтрока.СуммаНУОстаток = 0 Тогда
					Параметры.ОперативныеОстатки.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			Иначе
				// Новый остаток.
				НомерДокументаРасчетов 	= "";
				ДатаДокументаРасчетов 	= '0001-01-01';
				НомерВходящегоДокумента	= "";
				ДатаВходящегоДокумента 	= '0001-01-01';
				
				// Определим номер и дату для документа расчетов.
				Если ЗначениеЗаполнено(ДокументРасчетовПроводки) Тогда
					Если ДокументРасчетовПроводки = Параметры.Регистратор Тогда
						// Совпадает с текущим документом, его реквизиты определяем из Параметров.
						НомерДокументаРасчетов 	= Параметры.НомерРегистратора;
						ДатаДокументаРасчетов 	= Параметры.Период;
						НомерВходящегоДокумента	= Параметры.НомерВходящегоДокумента;
						ДатаВходящегоДокумента 	= Параметры.ДатаВходящегоДокумента;
					Иначе
						// Ищем реквизиты документа сначала в остатках, т.к. по ним происходил зачет авансов  / погашение задолженности.
						НайденнаяСтрока = Параметры.ОперативныеОстатки.Найти(ДокументРасчетовПроводки, "ДокументРасчетов");
						Если НайденнаяСтрока <> Неопределено Тогда
							НомерДокументаРасчетов 	= НайденнаяСтрока.НомерДокументаРасчетов;
							ДатаДокументаРасчетов 	= НайденнаяСтрока.ДатаДокументаРасчетов;
							НомерВходящегоДокумента	= НайденнаяСтрока.НомерВходящегоДокумента;
							ДатаВходящегоДокумента 	= НайденнаяСтрока.ДатаВходящегоДокумента;
						Иначе
							// Если не нашли, то обращаемся к базе данных.
							МетаданныеДокумента = МетаданныеОбъекта(Параметры, ДокументРасчетовПроводки);
							Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокумента)
								И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", МетаданныеДокумента) Тогда
								РеквизитыДокумента 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетовПроводки, 
									"Дата, Номер, ДатаВходящегоДокумента, НомерВходящегоДокумента");
								НомерДокументаРасчетов 	= РеквизитыДокумента.Номер;
								ДатаДокументаРасчетов 	= РеквизитыДокумента.Дата;
								НомерВходящегоДокумента = РеквизитыДокумента.НомерВходящегоДокумента;
								ДатаВходящегоДокумента 	= РеквизитыДокумента.ДатаВходящегоДокумента;
							Иначе
								РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументРасчетовПроводки, "Дата, Номер");
								НомерДокументаРасчетов 	= РеквизитыДокумента.Номер;
								ДатаДокументаРасчетов 	= РеквизитыДокумента.Дата;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока = Параметры.ОперативныеОстатки.Добавить();
				НоваяСтрока.Счет 					= Счет;
				НоваяСтрока.Подразделение 			= ПодразделениеПроводки;
				НоваяСтрока.ДокументРасчетов 		= ДокументРасчетовПроводки;
				НоваяСтрока.НомерДокументаРасчетов	= НомерДокументаРасчетов;
				НоваяСтрока.ДатаДокументаРасчетов	= ДатаДокументаРасчетов;
				НоваяСтрока.НомерВходящегоДокумента	= НомерВходящегоДокумента;
				НоваяСтрока.ДатаВходящегоДокумента	= ДатаВходящегоДокумента;
				НоваяСтрока.СуммаОстаток			= Проводка.Сумма * ?(СуффиксДтКт = "Дт", 1, -1); // Всегда рассчитываем как ДО - КО.
				Если СвойстваСчета.НалоговыйУчет Тогда
					НоваяСтрока.СуммаНУОстаток		= СуммаНУ *?(СуффиксДтКт = "Дт", 1, -1);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// Пересчитывает оперативные остатки по договору по данным движений
// документа с ручной корректировкой.
//
Процедура ОбновитьОперативныеОстаткиРучнаяКорректировка(Параметры)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Параметры.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", 		Параметры.Организация);
	Запрос.УстановитьПараметр("Регистратор", 		Параметры.Регистратор);
	Запрос.УстановитьПараметр("Период",		 		Параметры.Период);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",	Параметры.ДоговорКонтрагента);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Период,
	|	Хозрасчетный.СчетДт,
	|	ЕСТЬNULL(Хозрасчетный.ПодразделениеДт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеДт,
	|	Хозрасчетный.СубконтоДт1,
	|	Хозрасчетный.СубконтоДт2,
	|	Хозрасчетный.СубконтоДт3,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоДт1
	|		КОГДА Хозрасчетный.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоДт2
	|		КОГДА Хозрасчетный.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоДт3
	|	КОНЕЦ КАК ДокументРасчетовДт,
	|	Хозрасчетный.СчетКт,
	|	ЕСТЬNULL(Хозрасчетный.ПодразделениеКт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеКт,
	|	Хозрасчетный.СубконтоКт1,
	|	Хозрасчетный.СубконтоКт2,
	|	Хозрасчетный.СубконтоКт3,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоКт1
	|		КОГДА Хозрасчетный.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоКт2
	|		КОГДА Хозрасчетный.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоКт3
	|	КОНЕЦ КАК ДокументРасчетовКт,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаНУДт, 0)) КАК СуммаНУДт,
	|	СУММА(ЕСТЬNULL(Хозрасчетный.СуммаНУКт, 0)) КАК СуммаНУКт,
	|	Хозрасчетный.ВидСубконтоДт1,
	|	Хозрасчетный.ВидСубконтоДт2,
	|	Хозрасчетный.ВидСубконтоДт3,
	|	Хозрасчетный.ВидСубконтоКт1,
	|	Хозрасчетный.ВидСубконтоКт2,
	|	Хозрасчетный.ВидСубконтоКт3
	|ПОМЕСТИТЬ ВТ_ДвиженияССубконто
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&Период,
	|			&Период,
	|			Регистратор = &Регистратор
	|				И Счет В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
	|					ИЗ
	|						ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение)
	|				И Организация = &Организация
	|				И Активность
	|				И (Субконто1 = &ДоговорКонтрагента
	|					ИЛИ Субконто2 = &ДоговорКонтрагента
	|					ИЛИ Субконто3 = &ДоговорКонтрагента),
	|			,
	|			) КАК Хозрасчетный
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Период,
	|	Хозрасчетный.СчетДт,
	|	ЕСТЬNULL(Хозрасчетный.ПодразделениеДт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	Хозрасчетный.СубконтоДт1,
	|	Хозрасчетный.СубконтоДт2,
	|	Хозрасчетный.СубконтоДт3,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоДт1
	|		КОГДА Хозрасчетный.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоДт2
	|		КОГДА Хозрасчетный.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоДт3
	|	КОНЕЦ,
	|	Хозрасчетный.СчетКт,
	|	ЕСТЬNULL(Хозрасчетный.ПодразделениеКт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|	Хозрасчетный.СубконтоКт1,
	|	Хозрасчетный.СубконтоКт2,
	|	Хозрасчетный.СубконтоКт3,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоКт1
	|		КОГДА Хозрасчетный.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоКт2
	|		КОГДА Хозрасчетный.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ТОГДА Хозрасчетный.СубконтоКт3
	|	КОНЕЦ,
	|	Хозрасчетный.ВидСубконтоДт1,
	|	Хозрасчетный.ВидСубконтоДт2,
	|	Хозрасчетный.ВидСубконтоДт3,
	|	Хозрасчетный.ВидСубконтоКт1,
	|	Хозрасчетный.ВидСубконтоКт2,
	|	Хозрасчетный.ВидСубконтоКт3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДвиженияССубконто.Период,
	|	ВТ_ДвиженияССубконто.СчетДт,
	|	ВТ_ДвиженияССубконто.ПодразделениеДт,
	|	ВТ_ДвиженияССубконто.СубконтоДт1,
	|	ВТ_ДвиженияССубконто.СубконтоДт2,
	|	ВТ_ДвиженияССубконто.СубконтоДт3,
	|	ВТ_ДвиженияССубконто.ВидСубконтоДт1,
	|	ВТ_ДвиженияССубконто.ВидСубконтоДт2,
	|	ВТ_ДвиженияССубконто.ВидСубконтоДт3,
	|	ВТ_ДвиженияССубконто.ДокументРасчетовДт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовДт.НомерРегистратора, """") КАК НомерДокументаРасчетовДт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовДт.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаРасчетовДт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовДт.Номер, """") КАК НомерВходящегоДокументаРасчетовДт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовДт.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокументаРасчетовДт,
	|	ВТ_ДвиженияССубконто.СчетКт,
	|	ВТ_ДвиженияССубконто.ПодразделениеКт,
	|	ВТ_ДвиженияССубконто.СубконтоКт1,
	|	ВТ_ДвиженияССубконто.СубконтоКт2,
	|	ВТ_ДвиженияССубконто.СубконтоКт3,
	|	ВТ_ДвиженияССубконто.ВидСубконтоКт1,
	|	ВТ_ДвиженияССубконто.ВидСубконтоКт2,
	|	ВТ_ДвиженияССубконто.ВидСубконтоКт3,
	|	ВТ_ДвиженияССубконто.ДокументРасчетовКт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовКт.НомерРегистратора, """") КАК НомерДокументаРасчетовКт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовКт.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаРасчетовКт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовКт.Номер, """") КАК НомерВходящегоДокументаРасчетовКт,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовКт.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВходящегоДокументаРасчетовКт,
	|	ВТ_ДвиженияССубконто.Сумма,
	|	ВТ_ДвиженияССубконто.СуммаНУДт,
	|	ВТ_ДвиженияССубконто.СуммаНУКт
	|ИЗ
	|	ВТ_ДвиженияССубконто КАК ВТ_ДвиженияССубконто
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовДт
	|		ПО ВТ_ДвиженияССубконто.ДокументРасчетовДт = ДанныеПервичныхДокументовДт.Документ
	|			И (ДанныеПервичныхДокументовДт.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовКт
	|		ПО ВТ_ДвиженияССубконто.ДокументРасчетовКт = ДанныеПервичныхДокументовКт.Документ
	|			И (ДанныеПервичныхДокументовКт.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДвиженияССубконто";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидСубконтоКонтрагенты 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	
	Отбор = Новый Структура("Счет, Подразделение, ДокументРасчетов");
	
	МассивДтКт = Новый Массив(2);
	МассивДтКт[0] = "Дт";
	МассивДтКт[1] = "Кт";
	
	Пока Выборка.Следующий() Цикл
	
		Для Каждого СуффиксДтКт Из МассивДтКт Цикл
		
			Контрагент 			= Неопределено;
			ДоговорКонтрагента 	= Неопределено;
			
			ВидСубконто1 	= Выборка["ВидСубконто" + СуффиксДтКт + "1"];
			Субконто1 		= Выборка["Субконто" + СуффиксДтКт + "1"];

			ВидСубконто2 	= Выборка["ВидСубконто" + СуффиксДтКт + "2"];
			Субконто2 		= Выборка["Субконто" + СуффиксДтКт + "2"];
			
			ВидСубконто3 	= Выборка["ВидСубконто" + СуффиксДтКт + "3"];
			Субконто3 		= Выборка["Субконто" + СуффиксДтКт + "3"];
			
			// Определяем контрагента и договор по субконто.
			Если ВидСубконто1 = ВидСубконтоКонтрагенты Тогда
				Контрагент = Субконто1;
			ИначеЕсли ВидСубконто2 = ВидСубконтоКонтрагенты Тогда
				Контрагент = Субконто2;
			ИначеЕсли ВидСубконто3 = ВидСубконтоКонтрагенты Тогда
				Контрагент = Субконто3
			КонецЕсли;
			
			Если ВидСубконто1 = ВидСубконтоДоговоры Тогда
				ДоговорКонтрагента = Субконто1;
			ИначеЕсли ВидСубконто2 = ВидСубконтоДоговоры Тогда
				ДоговорКонтрагента = Субконто2;
			ИначеЕсли ВидСубконто3 = ВидСубконтоДоговоры Тогда
				ДоговорКонтрагента = Субконто3;
			КонецЕсли;
			
			Если Контрагент <> Параметры.Контрагент
				ИЛИ ДоговорКонтрагента <> Параметры.ДоговорКонтрагента Тогда
				// Движение по другому контрагенту/договору либо вообще другая сторона проводки с другой аналитикой, пропускаем.
				Продолжить;
			КонецЕсли;
			
			Счет				= Выборка["Счет" + СуффиксДтКт];
			СвойстваСчета		= СвойстваСчета(Параметры, Счет);
			Подразделение		= Выборка["Подразделение" + СуффиксДтКт];
			// Всегда рассчитаем сальдо как СН + ДО - КО.
			// Для пассивных счетов инверсия знака выполняется в ОперативныеОстаткиПоСчету().
			Сумма				= Выборка.Сумма * ?(СуффиксДтКт = "Дт", 1, -1);
			СуммаНУ				= Выборка["СуммаНУ" + СуффиксДтКт] * ?(СуффиксДтКт = "Дт", 1, -1);
			
			Отбор.Счет 			= Счет;
			Отбор.Подразделение = Подразделение;
			
			ДокументРасчетов 	= Выборка["ДокументРасчетов" + СуффиксДтКт];
			Если НЕ ЗначениеЗаполнено(ДокументРасчетов) Тогда
				// В качестве пустого значения документа расчетов всегда используем Неопределено.
				ДокументРасчетов = Неопределено;
			КонецЕсли;
			Отбор.ДокументРасчетов = ДокументРасчетов;
			
			НайденныеСтроки = Параметры.ОперативныеОстатки.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Пересчитаем суммы в текущей строке.
				НайденнаяСтрока = НайденныеСтроки[0];
				
				НайденнаяСтрока.СуммаОстаток = НайденнаяСтрока.СуммаОстаток + Сумма;
				Если СвойстваСчета.НалоговыйУчет Тогда
					НайденнаяСтрока.СуммаНУОстаток = НайденнаяСтрока.СуммаНУОстаток + СуммаНУ;
				КонецЕсли;
				
				Если НайденнаяСтрока.СуммаОстаток = 0 И НайденнаяСтрока.СуммаНУОстаток = 0 Тогда
					// Удалим нулевые остатки.
					Параметры.ОперативныеОстатки.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			Иначе
				// Добавляем новую строку.
				НоваяСтрока = Параметры.ОперативныеОстатки.Добавить();
				НоваяСтрока.Счет 				= Счет;
				НоваяСтрока.Подразделение 		= Подразделение;
				НоваяСтрока.ДокументРасчетов	= ДокументРасчетов;
				НоваяСтрока.НомерДокументаРасчетов	= Выборка["НомерДокументаРасчетов" 	+ СуффиксДтКт];
				НоваяСтрока.ДатаДокументаРасчетов	= Выборка["ДатаДокументаРасчетов" 	+ СуффиксДтКт];
				НоваяСтрока.НомерВходящегоДокумента	= Выборка["НомерВходящегоДокументаРасчетов" + СуффиксДтКт];
				НоваяСтрока.ДатаВходящегоДокумента	= Выборка["ДатаВходящегоДокументаРасчетов"  + СуффиксДтКт];
				НоваяСтрока.СуммаОстаток 		= Сумма;
				Если СвойстваСчета.НалоговыйУчет Тогда
					НоваяСтрока.СуммаНУОстаток	= СуммаНУ;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗачетАвансов

// Готовится таблица для формирования проводок зачета авансов по расчетам с поставщиками и покупателями
// на основании подготовленных функцией ПодготовитьПараметрыЗачетАванса данных документа
// и остатков по счету авансов на момент проведения.
// Таблица содержит как данные по зачтенным авансам, так и данные о возникшей по документу-регистратору задолженности.
// Вызывается при проведении документов поступления и реализации.
//
// Параметры
//	Параметры - Структура - Содержит параметры выполнения отложенных расчетов.
//  ТаблицаДокумента  - <ТаблицаЗначений> - данные документа, по которым определяется, какие движения будут сформированы.
//  ТаблицаДокументыАвансов - <ТаблицаЗначений> - данные документа о документах расчетов, авансы по которым зачитываются, и о суммах зачета.
//                      Используется только при способе зачета авансов "По документу".
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//  Отказ  - <Булево> - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовЗачетАвансов(Параметры, ТаблицаДокумента, ТаблицаДокументыАвансов, ТаблицаРеквизиты, Отказ) Экспорт

	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовЗачетАвансов();

	Если Не ЗначениеЗаполнено(ТаблицаДокумента)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
	    Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	СчетаРасчетов = ВыгрузитьЗаполненныеЗначенияКолонки(ТаблицаДокумента, "СчетРасчетов");
	СчетаАвансов  = ВыгрузитьЗаполненныеЗначенияКолонки(ТаблицаДокумента, "СчетАвансов");
	Если Не ЕстьСчетаПоддерживающиеОтложенныеРасчеты(Параметры, СчетаРасчетов, СчетаАвансов) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	// Запомним в Параметры данные из документа, используемые в других местах расчета.
	Реквизиты = ПодготовитьТаблицуРеквизитыЗачетАвансов(ТаблицаРеквизиты);

	ЗаполнитьЗначенияСвойств(Параметры, Реквизиты[0], 
		"ВидОперации, ЭтоВозврат, СпособЗачетаАвансов, УчитыватьЗадолженностьУСН, УчитыватьЗадолженностьУСНПатент,
		|НаправлениеДвижения, ДеятельностьНаПатенте, ДеятельностьНаТорговомСборе");

	// Вспомогательные таблицы, используемые при зачете авансов и погашении задолженности.
	ТаблицыЗачетАвансов = УчетВзаиморасчетов.ПодготовитьПараметрыТаблицыВзаиморасчетовЗачетАвансов(
		ТаблицаДокумента, ТаблицаДокументыАвансов, ТаблицаРеквизиты);

	// Обработаем старые проводки по зачету авансов.
	ОбработатьСтарыеДвиженияЗачетАвансов(Параметры, СчетаРасчетов, СчетаАвансов);

	// Восстановим сохраняемые данных из старых проводок.
	ВосстановитьСохраняемыеДанныеДвиженийЗачетАвансов(Параметры, ТаблицыЗачетАвансов);

	// Авансы по данным оперативных остатков.
	ОстаткиАвансов = ПолучитьОстаткиАвансов(Параметры, СчетаАвансов);
	
	// Зачитываем авансы.
	УчетВзаиморасчетов.ЗаполнитьТаблицуВзаиморасчетовЗачетАвансов(
		ТаблицыЗачетАвансов.ТаблицаДокумента,
		ТаблицыЗачетАвансов.ДокументыАвансов,
		ТаблицыЗачетАвансов.Реквизиты[0],
		ТаблицаВзаиморасчетов,
		ОстаткиАвансов,
		Истина,
		Отказ);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Формирует движения зачета авансов для документов поступления / реализации.
//
Процедура СформироватьДвиженияЗачетАвансов(Параметры, ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Отказ)  Экспорт

	УчетВзаиморасчетов.СформироватьДвиженияЗачетАвансов(
		ТаблицаВзаиморасчетов,
		ТаблицаРеквизиты, 
		Параметры.Движения, 
		Отказ);

	// В процессе формирования движений могут возникнуть сообщения пользователю, запомним их.
	ПроведениеСервер.ЗапомнитьСообщенияПользователю(
		Параметры.РезультатРасчета.Сообщения,
		Параметры.Организация,
		НСтр("ru = 'Не актуализированы движения по зачету авансов'"),
		Параметры.Регистратор,
		Параметры.Период,
		Отказ);

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// По результату зачета авансов заполним в подчиненных счетах-фактурах выданных номера 
	// и даты платежно-расчетных документов, если они не заполнены.
	ЗаполнитьПлатежноРасчетныеДокументыСчетаФактуры(Параметры, ТаблицаВзаиморасчетов);

КонецПроцедуры

// Подготовка параметров для функции СформироватьДвиженияЗачетАвансов()
// на основании переданных документом таблиц.
//
// Параметры
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                      Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПодготовитьТаблицуРеквизитыЗачетАвансов(ТаблицаРеквизиты)

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ВидОперации," 				// <ПеречислениеСсылка.*> - Вид операции документа или Неопределено
	+ "ЭтоВозврат," 				// <Булево> - Истина, если операция является возвратом
	+ "СпособЗачетаАвансов,"       	// <ПеречислениеСсылка.СпособыЗачетаАвансов>
	+ "УчитыватьЗадолженностьУСН," 	// <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения,"		// <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
									//          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	+ "ДеятельностьНаПатенте,"	   	// <Булево> - Истина для расчетов с покупателями по деятельности на патенте
	+ "ДеятельностьНаТорговомСборе"	// <Булево> - Истина для расчетов с покупателями по деятельности, облагаемой торговым сбором
	;

	Результат = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок);

	Возврат Результат;

КонецФункции

// Заполняет в таблицах для проведения поля данными, которые не считываются заново из документа,
// а определяются из предыдущего набора движений.
//
Процедура ВосстановитьСохраняемыеДанныеДвиженийЗачетАвансов(Параметры, ТаблицыЗачетАвансов)

	// Для проводок по погашению задолженности сохраняем суммы взаиморасчетов УСН 
	// из старых движений.
	СохраняемыеДанныеДвижений 	= Параметры.СохраняемыеДанныеДвижений;
	
	Если СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Количество() = 0 Тогда
		// Нет данных для восстановления.
		Возврат;
	КонецЕсли;
	
	ЭтоВозвратОтПокупателя = Параметры.ЭтоВозврат И Параметры.НаправлениеДвижения = НаправлениеДвиженияПоступление();
	
	Для Каждого СтрокаТаблицы Из ТаблицыЗачетАвансов.ТаблицаДокумента Цикл
	
		ИскомыйСчетРасчетов = ?(ЭтоВозвратОтПокупателя, СтрокаТаблицы.СчетАвансов, СтрокаТаблицы.СчетРасчетов);
	
		СтрокаРасчетов = СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Найти(ИскомыйСчетРасчетов, "СчетРасчетов");
		Если СтрокаРасчетов = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаРасчетов.СуммаВзаиморасчетов;
		
		Если Параметры.УчитыватьЗадолженностьУСН ИЛИ Параметры.УчитыватьЗадолженностьУСНПатент Тогда
		
			// Для УСН относим сумму взаиморасчетов по текущей строке к одному из видов деятельности
			// в том же порядке, как и при подготовке таблиц взаиморасчетов при оперативном проведении документов.
			//	1. комиссия по продаже;
			//	2. деятельность на патенте;
			//	3. деятельность, облагаемая торговым сбором;
			//	4. деятельность в рамках ЕНВД.
			
			СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов;
			
			Если СтрокаРасчетов.СуммаВзаиморасчетовКомитента <> 0 И СуммаВзаиморасчетов <> 0 Тогда
				СтрокаТаблицы.СуммаВзаиморасчетовКомитента 	= Мин(СуммаВзаиморасчетов, СтрокаРасчетов.СуммаВзаиморасчетовКомитента);
				СуммаВзаиморасчетов 						= СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВзаиморасчетовКомитента;
				СтрокаРасчетов.СуммаВзаиморасчетовКомитента = СтрокаРасчетов.СуммаВзаиморасчетовКомитента - СтрокаТаблицы.СуммаВзаиморасчетовКомитента;
			КонецЕсли;
			
			Если СтрокаРасчетов.СуммаВзаиморасчетовПатент <> 0 И СуммаВзаиморасчетов <> 0 Тогда
				СтрокаТаблицы.СуммаВзаиморасчетовПатент 	= Мин(СуммаВзаиморасчетов, СтрокаРасчетов.СуммаВзаиморасчетовПатент);
				СуммаВзаиморасчетов 						= СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВзаиморасчетовПатент;
				СтрокаРасчетов.СуммаВзаиморасчетовПатент 	= СтрокаРасчетов.СуммаВзаиморасчетовПатент - СтрокаТаблицы.СуммаВзаиморасчетовПатент;
			КонецЕсли;
			
			Если СтрокаРасчетов.СуммаВзаиморасчетовТорговыйСбор <> 0 И СуммаВзаиморасчетов <> 0 Тогда
				СтрокаТаблицы.СуммаВзаиморасчетовТорговыйСбор 	= Мин(СуммаВзаиморасчетов, СтрокаРасчетов.СуммаВзаиморасчетовТорговыйСбор);
				СуммаВзаиморасчетов 							= СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВзаиморасчетовТорговыйСбор;
				СтрокаРасчетов.СуммаВзаиморасчетовТорговыйСбор 	= СтрокаРасчетов.СуммаВзаиморасчетовТорговыйСбор 
					- СтрокаТаблицы.СуммаВзаиморасчетовТорговыйСбор;
			КонецЕсли;
			
			Если СтрокаРасчетов.СуммаВзаиморасчетовЕНВД <> 0 И СуммаВзаиморасчетов <> 0 Тогда
				СтрокаТаблицы.СуммаВзаиморасчетовЕНВД 	= Мин(СуммаВзаиморасчетов, СтрокаРасчетов.СуммаВзаиморасчетовЕНВД);
				СуммаВзаиморасчетов 					= СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВзаиморасчетовЕНВД;
				СтрокаРасчетов.СуммаВзаиморасчетовЕНВД 	= СтрокаРасчетов.СуммаВзаиморасчетовЕНВД - СтрокаТаблицы.СуммаВзаиморасчетовЕНВД;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Удаляет из движений документа проводки по зачету авансов, сделанные ранее.
// Одновременно определяем сохраняемые данные из движений.
//
Процедура ОбработатьСтарыеДвиженияЗачетАвансов(Параметры, Знач СчетаРасчетов, Знач СчетаАвансов)

	Регистратор				= Параметры.Регистратор;
	Контрагент 				= Параметры.Контрагент;
	ДоговорКонтрагента 		= Параметры.ДоговорКонтрагента;
	ЗаписьУчетнойПолитики 	= УчетнаяПолитикаИзКеша(Параметры);
	
	Если Параметры.НаправлениеДвижения = НаправлениеДвиженияВыбытие() Тогда
		// "Выбытие" + возврат - это возврат от поставщика.
		ЭтоРасчетыСПокупателями = НЕ Параметры.ЭтоВозврат;
	Иначе
		// "Поступление" + возврат - это возврат от покупателя.
		ЭтоРасчетыСПокупателями = Параметры.ЭтоВозврат;
	КонецЕсли;
	
	Если Параметры.ЭтоВозврат Тогда
		Если ЭтоРасчетыСПокупателями Тогда
			// В возврате от покупателя при подготовке таблиц документов в счете расчетов указываются счет аванса и наоборот.
			// Обменяем счета местами.
			ИсходныеСчетаРасчетов 	= СчетаРасчетов;
			СчетаРасчетов 		 	= СчетаАвансов;
			СчетаАвансов		 	= ИсходныеСчетаРасчетов;
		Иначе
			// При возврате поставщику нет счета авансов, вместо него используется счет по претензиям.
			// В этом случае переменные содержат: СчетаРасчетов - 76.02, СчетаАвансов - 60.01.
			// Запомним их в соответствующих переменных.
			СчетаПретензий 	= СчетаРасчетов;
			СчетаРасчетов	= СчетаАвансов;
		КонецЕсли;
	КонецЕсли;
	
	СохраняемыеДанныеДвижений = Параметры.СохраняемыеДанныеДвижений;
	СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Очистить();

	ВидСубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	
	Счет91_02 = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;

	Проводки = Параметры.Движения.Хозрасчетный;
	
	Счетчик = Проводки.Количество();
	Пока Счетчик > 0 Цикл
		
		Счетчик = Счетчик - 1;
		Проводка = Проводки[Счетчик];
		
		// Прочитаем контрагента и договор из проводки, если там субконто другого вида, то будет Неопределено.
		КонтрагентДт 			= Проводка.СубконтоДт[ВидСубконтоКонтрагенты];
		ДоговорКонтрагентаДт 	= Проводка.СубконтоДт[ВидСубконтоДоговоры];

		КонтрагентКт 			= Проводка.СубконтоКт[ВидСубконтоКонтрагенты];
		ДоговорКонтрагентаКт 	= Проводка.СубконтоКт[ВидСубконтоДоговоры];

		// Сначала проверим и очистим счета УСН, они забалансовые и могут не иметь кор.счета,
		// и поэтому дальнейшие условия для них выполнять не имеет смысла.
		Если ЗаписьУчетнойПолитики.ПрименяетсяУСН ИЛИ ЗаписьУчетнойПолитики.ПрименяетсяУСНПатент Тогда
			Если Параметры.СчетаУСН.Найти(Проводка.СчетДт) <> Неопределено
				И КонтрагентДт = Контрагент
				И ДоговорКонтрагентаДт = ДоговорКонтрагента Тогда
				Проводки.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
			
			Если Параметры.СчетаУСН.Найти(Проводка.СчетКт) <> Неопределено
				И КонтрагентКт = Контрагент
				И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
				Проводки.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим и очистим старые проводки по зачету авансов.
		Если ЭтоРасчетыСПокупателями Тогда
			// Зачет авансов покупателя вида Дт 62.02 - Кт 62.01
			Если СчетаАвансов.Найти(Проводка.СчетДт) <> Неопределено
				И КонтрагентДт = Контрагент
				И ДоговорКонтрагентаДт = ДоговорКонтрагента
				И СчетаРасчетов.Найти(Проводка.СчетКт) <> Неопределено
				И КонтрагентКт = Контрагент
				И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
				Проводки.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
		Иначе
			Если Параметры.ЭтоВозврат Тогда
				// Возврат поставщику, уменьшение кредиторской задолженности на сумму возврата.
				// Дт 60.01 - Кт 76.02
				Если СчетаРасчетов.Найти(Проводка.СчетДт) <> Неопределено
					И КонтрагентДт = Контрагент
					И ДоговорКонтрагентаДт = ДоговорКонтрагента
					И СчетаПретензий.Найти(Проводка.СчетКт) <> Неопределено
					И КонтрагентКт = Контрагент
					И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
					Проводки.Удалить(Счетчик);
					Продолжить;
				КонецЕсли;
			Иначе
				// Зачет авансов поставщику вида Дт 60.01 - Кт 60.02
				Если СчетаРасчетов.Найти(Проводка.СчетДт) <> Неопределено
					И КонтрагентДт = Контрагент
					И ДоговорКонтрагентаДт = ДоговорКонтрагента
					И СчетаАвансов.Найти(Проводка.СчетКт) <> Неопределено
					И КонтрагентКт = Контрагент
					И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
					Проводки.Удалить(Счетчик);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Подсчитываем суммы взаиморасчетов по проводкам образования задолженности.
		Если ЭтоРасчетыСПокупателями Тогда
			// Продажа покупателю, проводки вида:
			// 	Дт 62.01 - Кт 90.01, 91.01 собственных товаров, услуг
			// 	Дт 62.01 - Кт 76.* комиссионных товаров, услуг
			СчетРасчетов 		= Неопределено;
			СуммаВзаиморасчетов = 0;
			Если СчетаРасчетов.Найти(Проводка.СчетДт) <> Неопределено
				И КонтрагентДт = Контрагент
				И ДоговорКонтрагентаДт = ДоговорКонтрагента Тогда

				СчетРасчетов 		= Проводка.СчетДт;
				СуммаВзаиморасчетов = Проводка.Сумма;

			ИначеЕсли ТипЗнч(Параметры.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации")
				И Проводка.СчетДт = Счет91_02
				И СчетаРасчетов.Найти(Проводка.СчетКт) <> Неопределено
				И КонтрагентКт = Контрагент
				И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
				
				// Корректировка реализации на уменьшение за прошлый год формирует проводки вида Дт 91.02 - Кт 62.01
				СчетРасчетов		= Проводка.СчетКт;
				СуммаВзаиморасчетов = - Проводка.Сумма;
				
			КонецЕсли;
				
			Если СуммаВзаиморасчетов <> 0 Тогда
				НоваяСтрока = СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Добавить();
				НоваяСтрока.СчетРасчетов 		= СчетРасчетов;
				НоваяСтрока.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
				
				Если Параметры.УчитыватьЗадолженностьУСН ИЛИ Параметры.УчитыватьЗадолженностьУСНПатент Тогда
				
					// Рассчитаем суммы взаиморасчетов для счетов УСН при расчетах с покупателями.
					Если ЗначениеЗаполнено(КонтрагентКт)
						И ЗначениеЗаполнено(ДоговорКонтрагентаКт)
						И (КонтрагентКт <> Контрагент
							ИЛИ ДоговорКонтрагентаКт <> ДоговорКонтрагента) Тогда
						
						// Корреспонденция с расчетами с другим контрагентом / договором, такое может быть в случае комиссии.
						НоваяСтрока.СуммаВзаиморасчетовКомитента = СуммаВзаиморасчетов;
						
					ИначеЕсли Параметры.ДеятельностьНаПатенте Тогда
						НоваяСтрока.СуммаВзаиморасчетовПатент = СуммаВзаиморасчетов;
						
					ИначеЕсли Параметры.ДеятельностьНаТорговомСборе Тогда
						НоваяСтрока.СуммаВзаиморасчетовТорговыйСбор = СуммаВзаиморасчетов;
						
					ИначеЕсли Параметры.СчетаВыручкиЕНВД.Найти(Проводка.СчетКт) <> Неопределено Тогда
						НоваяСтрока.СуммаВзаиморасчетовЕНВД = СуммаВзаиморасчетов;
						
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			Если Параметры.ЭтоВозврат Тогда
				// Возврат поставщику списывает себестоимость возвращаемого товара на счет претензий,
				// а разницу между себестоимостью и возвращаемой суммой поставщику относит на прочие доходы или расходы.
				// Дт 76.02 - Кт 41
				// Дт 76.02 - Кт 91.01 или Дт 91.02 - Кт 76.02
				Если СчетаПретензий.Найти(Проводка.СчетДт) <> Неопределено
					И КонтрагентДт = Контрагент
					И ДоговорКонтрагентаДт = ДоговорКонтрагента Тогда
					НоваяСтрока = СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Добавить();
					НоваяСтрока.СчетРасчетов 		= Проводка.СчетДт;
					НоваяСтрока.СуммаВзаиморасчетов = Проводка.Сумма;
				Иначе
					// Отрицательное отклонение стоимости возврата по сравнению с себестоимостью, 
					// отнесено на расходы Дт 91.02 - Кт 76.02
					Если СчетаПретензий.Найти(Проводка.СчетКт) <> Неопределено
						И КонтрагентКт = Контрагент
						И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
						НоваяСтрока = СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Добавить();
						НоваяСтрока.СчетРасчетов 		= Проводка.СчетКт;
						НоваяСтрока.СуммаВзаиморасчетов = - Проводка.Сумма;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Покупка у поставщика, проводки вида Дт 10, 19, 20, 44, 91 ... - Кт 60.01
				Если СчетаРасчетов.Найти(Проводка.СчетКт) <> Неопределено
					И КонтрагентКт = Контрагент
					И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
					
					НоваяСтрока = СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Добавить();
					НоваяСтрока.СчетРасчетов 		= Проводка.СчетКт;
					НоваяСтрока.СуммаВзаиморасчетов = Проводка.Сумма;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Свернем суммы по счету.
	Если ЭтоРасчетыСПокупателями И Параметры.ЭтоВозврат Тогда
		// При возврате от покупателя в проводках суммы отрицательные (сторно), в документе - положительные.
		Для Каждого СтрокаТаблицы Из СохраняемыеДанныеДвижений.СуммыВзаиморасчетов Цикл
			СтрокаТаблицы.СуммаВзаиморасчетов 				= - СтрокаТаблицы.СуммаВзаиморасчетов;
			СтрокаТаблицы.СуммаВзаиморасчетовКомитента 		= - СтрокаТаблицы.СуммаВзаиморасчетовКомитента;
			СтрокаТаблицы.СуммаВзаиморасчетовПатент 		= - СтрокаТаблицы.СуммаВзаиморасчетовПатент;
			СтрокаТаблицы.СуммаВзаиморасчетовТорговыйСбор 	= - СтрокаТаблицы.СуммаВзаиморасчетовТорговыйСбор;
			СтрокаТаблицы.СуммаВзаиморасчетовЕНВД 			= - СтрокаТаблицы.СуммаВзаиморасчетовЕНВД;
		КонецЦикла;
	КонецЕсли;
	СохраняемыеДанныеДвижений.СуммыВзаиморасчетов.Свернуть("СчетРасчетов",
		"СуммаВзаиморасчетов, СуммаВзаиморасчетовКомитента, СуммаВзаиморасчетовПатент, 
		|СуммаВзаиморасчетовТорговыйСбор, СуммаВзаиморасчетовЕНВД");	

КонецПроцедуры

// Формирует таблицу ОстаткиАвансов аналогично запросу из УчетВзаиморасчетов.ТекстЗапросаОстаткиАвансов().
//
Функция ПолучитьОстаткиАвансов(Параметры, СчетаАвансов)

	Если Параметры.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать Тогда
		Возврат УчетВзаиморасчетов.ПустаяТаблицаОстаткиАвансов();
	КонецЕсли;

	Если СчетаАвансов.Количество() = 0 Тогда
		Возврат УчетВзаиморасчетов.ПустаяТаблицаОстаткиАвансов();
	КонецЕсли;

	ОстаткиАвансов = ОперативныеОстаткиПоСчетам(Параметры, СчетаАвансов);
	Возврат ОстаткиАвансов;

КонецФункции

// Заполняет номера и даты платежно-расчетных документов в табличной части счетов-фактур выданных
// по результату зачета авансов.
//
Процедура ЗаполнитьПлатежноРасчетныеДокументыСчетаФактуры(Параметры, ТаблицаВзаиморасчетов)

	Если Параметры.НаправлениеДвижения <> НаправлениеДвиженияВыбытие() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаВзаиморасчетов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПлатежноРасчетныеДокументы = ПодготовитьПлатежноРасчетныеДокументыЗачетАвансов(Параметры, ТаблицаВзаиморасчетов);
	
	Если ПлатежноРасчетныеДокументы.Количество() = 0 Тогда
		// Нет зачтенных авансов.
		Возврат;
	КонецЕсли;
	
	СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(Параметры.Регистратор);
	
	Если НЕ ЗначениеЗаполнено(СчетФактура) Тогда
		// Счет-фактура не выписан.
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПлатежноРасчетныеДокументы.НомерСтроки
	|ИЗ
	|	Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК ПлатежноРасчетныеДокументы
	|ГДЕ
	|	ПлатежноРасчетныеДокументы.Ссылка = &СчетФактура";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Заполненные данные не меняем.
		Возврат;
	КонецЕсли;
	
	Попытка
		СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
		СчетФактураОбъект.ПлатежноРасчетныеДокументы.Загрузить(ПлатежноРасчетныеДокументы);
		
		Если СчетФактураОбъект.Проведен Тогда
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			СчетФактураОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();

		ТекстПричины = СтрШаблон(
			НСтр("ru = 'Не удалось записать номера и даты платежно-расчетных документов для счета-фактура выданного после зачета авансов по договору ""%1"" с ""%2""'"),
			Параметры.ДоговорКонтрагента,
			Параметры.Контрагент);
		
		ДобавитьСообщениеПользователю(
			Параметры,
			СчетФактура,
			ТекстПричины,
			ИнформацияОбОшибке);
	КонецПопытки;

КонецПроцедуры

// Составляет таблицу с номерами и датами платежно-расчетных документов
// по результату зачета авансов.
//
Функция ПодготовитьПлатежноРасчетныеДокументыЗачетАвансов(Параметры, ТаблицаВзаиморасчетов)

	// Составим список зачтенных авансов. 
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерДокумента", 	ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Результат.Колонки.Добавить("ДатаДокумента", 	ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));

	Для Каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаВзаиморасчетов.ДокументРасчетов) Тогда
			Продолжить;
		КонецЕсли;
	
		Если (СтрокаВзаиморасчетов.ДокументРасчетов <> Параметры.Регистратор) Тогда
			НомерПлатежноРасчетногоДокумента 	= "";
			ДатаПлатежноРасчетногоДокумента 	= '0001-01-01';
			
			// Пробуем найти номер и дату документа расчетов в таблице оперативных остатков.
			НайденнаяСтрока = Параметры.ОперативныеОстатки.Найти(СтрокаВзаиморасчетов.ДокументРасчетов, "ДокументРасчетов");
			Если НайденнаяСтрока <> Неопределено Тогда

				МетаданныеДокумента = МетаданныеОбъекта(Параметры, СтрокаВзаиморасчетов.ДокументРасчетов);
				
				// Если есть реквизиты входящего документа, то используем их, иначе - стандартные реквизиты. 
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НомерВходящегоДокумента", МетаданныеДокумента)
					И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаВходящегоДокумента", МетаданныеДокумента) Тогда
					НомерПлатежноРасчетногоДокумента    = НайденнаяСтрока.НомерВходящегоДокумента;
					ДатаПлатежноРасчетногоДокумента 	= НайденнаяСтрока.ДатаВходящегоДокумента;
				Иначе
					НомерПлатежноРасчетногоДокумента	= ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
						НайденнаяСтрока.НомерДокументаРасчетов, Истина, Ложь);
					ДатаПлатежноРасчетногоДокумента = НайденнаяСтрока.ДатаДокументаРасчетов;
				КонецЕсли;
			Иначе
				// Обращаемся к базе данных.
				ДатаНомер = УчетНДСПереопределяемый.ДатаНомерПлатежноРасчетногоДокумента(СтрокаВзаиморасчетов.ДокументРасчетов);
				НомерПлатежноРасчетногоДокумента 	= ДатаНомер.НомерПлатежноРасчетногоДокумента;
				ДатаПлатежноРасчетногоДокумента 	= ДатаНомер.ДатаПлатежноРасчетногоДокумента;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НомерПлатежноРасчетногоДокумента)
				И НЕ ЗначениеЗаполнено(ДатаПлатежноРасчетногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.НомерДокумента 	= НомерПлатежноРасчетногоДокумента;
			НоваяСтрока.ДатаДокумента 	= ДатаПлатежноРасчетногоДокумента;
			
		КонецЕсли;

	КонецЦикла;

	Результат.Сортировать("ДатаДокумента,НомерДокумента");

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ПогашениеЗадолженности

// Готовится таблица для формирования проводок погашения задолженности по расчетам с поставщиками и покупателями,
// на основании данных документа и остатков по счету расчетов на момент проведения.
// Вызывается при проведении документов движения денежных средств,
// а также других документов, погашающих задолженность.
//
// Параметры
//	Параметры - Структура - Параметры выполнения отложенных расчетов.
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//  Отказ  - <Булево> - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности(Параметры, РасшифровкаПлатежа, ТаблицаРеквизиты, Отказ, ВидДокумента = Неопределено) Экспорт

	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(ВидДокумента);

	Если Не ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	СчетаРасчетов = ВыгрузитьЗаполненныеЗначенияКолонки(РасшифровкаПлатежа, "СчетРасчетов");
	СчетаАвансов  = ВыгрузитьЗаполненныеЗначенияКолонки(РасшифровкаПлатежа, "СчетАвансов");
	Если Не ЕстьСчетаПоддерживающиеОтложенныеРасчеты(Параметры, СчетаРасчетов, СчетаАвансов) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	// Запомним в Параметры данные из документа, используемые в других местах расчета.	
	Реквизиты = ПодготовитьТаблицуРеквизитыПогашениеЗадолженности(ТаблицаРеквизиты);
	ЗаполнитьЗначенияСвойств(Параметры, Реквизиты[0], 
		"ВидОперации, ЭтоВозврат, УчитыватьЗадолженностьУСН, УчитыватьЗадолженностьУСНПатент, НаправлениеДвижения");

	// Вспомогательные таблицы, используемые при зачете авансов и погашении задолженности.
	ТаблицыПогашениеЗадолженности = УчетВзаиморасчетов.ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности(
		РасшифровкаПлатежа, 
		ТаблицаРеквизиты,
		ВидДокумента);

	// Обработаем старые проводки по погашению задолженности.
	ОбработатьСтарыеДвиженияПогашениеЗадолженности(Параметры, СчетаРасчетов, СчетаАвансов);
	
	ОстаткиЗадолженности = ПолучитьОстаткиЗадолженности(Параметры, СчетаРасчетов);
	
	// Погашаем задолженность.
	УчетВзаиморасчетов.ЗаполнитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ТаблицыПогашениеЗадолженности.РасшифровкаПлатежа,
		ТаблицыПогашениеЗадолженности.Реквизиты[0],
		ТаблицаВзаиморасчетов,
		ОстаткиЗадолженности,
		Истина,
		Отказ);
		
	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Формирует движения погашения задолженности по документу оплаты.
//
Процедура СформироватьДвиженияПогашениеЗадолженности(Параметры, ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Отказ) Экспорт

	УчетВзаиморасчетов.СформироватьДвиженияПогашениеЗадолженности(
		ТаблицаВзаиморасчетов,
		ТаблицаРеквизиты,
		Параметры.Движения,
		Отказ);

	// В процессе формирования движений могут возникнуть сообщения пользователю, запомним их.
	ПроведениеСервер.ЗапомнитьСообщенияПользователю(
		Параметры.РезультатРасчета.Сообщения,
		Параметры.Организация,
		НСтр("ru = 'Не актуализированы движения по погашению задолженности'"),
		Параметры.Регистратор,
		Параметры.Период,
		Отказ);

КонецПроцедуры

// Подготовка параметров для функции ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженности()
// на основании переданных документом таблиц.
//
// Параметры
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                      Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПодготовитьТаблицуРеквизитыПогашениеЗадолженности(ТаблицаРеквизиты)

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ВидОперации," 				// <ПеречислениеСсылка.*> - Вид операции документа или Неопределено
	+ "ЭтоВозврат," 				// <Булево> - Истина, если операция является возвратом
	+ "УчитыватьЗадолженностьУСН," 	// <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения"			// <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
									//          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	;

	Результат = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок);

	Возврат Результат;

КонецФункции

// Формирует таблицу ОстаткиЗадолженности аналогично запросу из УчетВзаиморасчетов.ТекстЗапросаОстаткиЗадолженности().
//
Функция ПолучитьОстаткиЗадолженности(Параметры, СчетаВзаиморасчетов)

	Если СчетаВзаиморасчетов.Количество() = 0 Тогда
		Возврат УчетВзаиморасчетов.ПустаяТаблицаОстаткиЗадолженности();
	КонецЕсли;

	ОстаткиЗадолженности = ОперативныеОстаткиПоСчетам(Параметры, СчетаВзаиморасчетов);
	
	// Приведем таблицу к виду, который используется в УчетВзаиморасчетов.ПустаяТаблицаОстаткиЗадолженности()
	// Переименование колонки Счет в СчетРасчетов
	ОстаткиЗадолженности.Колонки.Счет.Имя = "СчетРасчетов";
	
	// Добавление колонки ОстатокВзаиморасчетов, изначально равной СуммаВзаиморасчетов.
	ОстаткиЗадолженности.Колонки.Добавить("ОстатокВзаиморасчетов", БухгалтерскийУчетКлиентСервер.ТипСумма());
	МассивСумм = ОстаткиЗадолженности.ВыгрузитьКолонку("СуммаВзаиморасчетов");
	ОстаткиЗадолженности.ЗагрузитьКолонку(МассивСумм, "ОстатокВзаиморасчетов");
	
	// Добавление колонки НомерСтроки.
	ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(ОстаткиЗадолженности, "НомерСтроки");

	Возврат ОстаткиЗадолженности;

КонецФункции

// Удаляет из движений документа проводки по погашению задолженности, сделанные ранее.
//
Процедура ОбработатьСтарыеДвиженияПогашениеЗадолженности(Параметры, СчетаРасчетов, СчетаАвансов)

	Регистратор				= Параметры.Регистратор;
	Контрагент 				= Параметры.Контрагент;
	ДоговорКонтрагента 		= Параметры.ДоговорКонтрагента;
	ЗаписьУчетнойПолитики 	= УчетнаяПолитикаИзКеша(Параметры);
	
	ВидСубконтоКонтрагенты 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

	Проводки = Параметры.Движения.Хозрасчетный;

	Счетчик = Проводки.Количество();
	Пока Счетчик > 0 Цикл
		
		Счетчик = Счетчик - 1;
		Проводка = Проводки[Счетчик];
		
		// Прочитаем контрагента и договор из проводки, если там субконто другого вида, то будет Неопределено.
		КонтрагентДт 			= Проводка.СубконтоДт[ВидСубконтоКонтрагенты];
		ДоговорКонтрагентаДт 	= Проводка.СубконтоДт[ВидСубконтоДоговоры];

		КонтрагентКт 			= Проводка.СубконтоКт[ВидСубконтоКонтрагенты];
		ДоговорКонтрагентаКт 	= Проводка.СубконтоКт[ВидСубконтоДоговоры];

		// Сначала проверим и очистим счета УСН, они забалансовые и могут не иметь кор.счета,
		// и поэтому дальнейшие условия для них выполнять не имеет смысла.
		Если ЗаписьУчетнойПолитики.ПрименяетсяУСН ИЛИ ЗаписьУчетнойПолитики.ПрименяетсяУСНПатент Тогда
			Если Параметры.СчетаУСН.Найти(Проводка.СчетДт) <> Неопределено
				И КонтрагентДт = Контрагент
				И ДоговорКонтрагентаДт = ДоговорКонтрагента Тогда
				Проводки.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
			
			Если Параметры.СчетаУСН.Найти(Проводка.СчетКт) <> Неопределено
				И КонтрагентКт = Контрагент
				И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
				Проводки.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим и очистим старые проводки по погашению задолженности.
		Если Параметры.НаправлениеДвижения = НаправлениеДвиженияПоступление() Тогда
			// Оплата от покупателя вида Дт 50, 51 - Кт 62.01, 62.02
			Если (СчетаРасчетов.Найти(Проводка.СчетКт) <> Неопределено 
				ИЛИ СчетаАвансов.Найти(Проводка.СчетКт) <> Неопределено)
				И КонтрагентКт = Контрагент
				И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
				Проводки.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
		Иначе
			// Оплата поставщику вида Дт 60.01, 60.02 - Кт 50, 51
			Если (СчетаРасчетов.Найти(Проводка.СчетДт) <> Неопределено 
					ИЛИ СчетаАвансов.Найти(Проводка.СчетДт) <> Неопределено)
				И КонтрагентДт = Контрагент
				И ДоговорКонтрагентаДт = ДоговорКонтрагента Тогда
				Проводки.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОтчетОРозничныхПродажах

// Таблица для формирования проводок зачета авансов по безналичным оплатам, поступившим от розничных покупателей
// на основании данных о полученных безналичных оплатах по видам и остатков по аналитике оплат на момент проведения.
// Таблица содержит как данные по зачтенным авансам, так и данные о возникшей по документу-регистратору задолженности.
// Вызывается при проведении документов получения оплаты от розничных покупателей
//
// Параметры
//	Параметры - Структура - Параметры выполнения отложенных расчетов.
//  ТаблицаБезналичныхОплат  - <ТаблицаЗначений> - данные об оплатах, по которым определяется, какие движения будут сформированы.
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//  Отказ  - <Булево> - флаг отказа от проведения
//
// Возвращаемое значение:
//	ТаблицаЗначений - см. УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовБезналичнаяРозничнаяВыручка()
//
Функция ПодготовитьТаблицуВзаиморасчетовБезналичнаяРозничнаяВыручка(Параметры, ТаблицаБезналичныхОплат, ТаблицаРеквизиты, Отказ) Экспорт

	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовБезналичнаяРозничнаяВыручка();
	
	Если Не ЗначениеЗаполнено(ТаблицаБезналичныхОплат)
	 Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	СчетаРасчетов = ВыгрузитьЗаполненныеЗначенияКолонки(ТаблицаБезналичныхОплат, "СчетРасчетов");
	СчетаАвансов  = ВыгрузитьЗаполненныеЗначенияКолонки(ТаблицаБезналичныхОплат, "СчетАвансов");
	Если Не ЕстьСчетаПоддерживающиеОтложенныеРасчеты(Параметры, СчетаРасчетов, СчетаАвансов) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	// Запомним в Параметры данные из документа, используемые в других местах расчета.	
	Реквизиты = ПодготовитьТаблицуРеквизитыПогашениеЗадолженности(ТаблицаРеквизиты);

	ЗаполнитьЗначенияСвойств(Параметры, Реквизиты[0], 
		"ВидОперации, ЭтоВозврат, УчитыватьЗадолженностьУСН, УчитыватьЗадолженностьУСНПатент, НаправлениеДвижения");

	ТаблицыБезналичныхОплат = УчетВзаиморасчетов.ПодготовитьПараметрыТаблицыВзаиморасчетовБезналичнаяРозничнаяВыручка(
		ТаблицаБезналичныхОплат,
		ТаблицаРеквизиты);
	
	Реквизиты    = ТаблицыБезналичныхОплат.Реквизиты[0];
	ТаблицаОплат = ТаблицыБезналичныхОплат.ТаблицаОплат;

	// Обработаем старые проводки по погашению задолженности.
	ОбработатьСтарыеДвиженияПогашениеЗадолженности(Параметры, СчетаРасчетов, СчетаАвансов);
	
	ОстаткиАвансов = ПолучитьОстаткиАвансов(Параметры, СчетаАвансов);

	УчетВзаиморасчетов.ЗаполнитьТаблицуВзаиморасчетовБезналичнаяРозничнаяВыручка(
		ТаблицаОплат,
		Реквизиты,
		ТаблицаВзаиморасчетов,
		ОстаткиАвансов,
		Отказ);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Формирует движения поступления оплаты от розничных покупателей.
//
Процедура СформироватьДвиженияПоступленияОтРозничныхПокупателей(Параметры, ТаблицаБезналичныеОплаты, ТаблицаНаличнаяОплата, ТаблицаРеквизиты, Отказ) Экспорт

	УчетВзаиморасчетов.СформироватьДвиженияПоступленияОтРозничныхПокупателей(
		ТаблицаБезналичныеОплаты,
		ТаблицаНаличнаяОплата, 
		ТаблицаРеквизиты, 
		Параметры.Движения,
		Отказ);

	// В процессе формирования движений могут возникнуть сообщения пользователю, запомним их.
	ПроведениеСервер.ЗапомнитьСообщенияПользователю(
		Параметры.РезультатРасчета.Сообщения,
		Параметры.Организация,
		НСтр("ru = 'Не актуализированы движения по поступлению от розничных покупателей'"),
		Параметры.Регистратор,
		Параметры.Период,
		Отказ);

КонецПроцедуры

#КонецОбласти

#Область КорректировкаДолга

// Готовится таблица для формирования проводок погашения задолженности по расчетам с поставщиками и покупателями,
// на основании данных документа и остатков по счету расчетов на момент проведения.
// Вызывается при проведении документов движения денежных средств,
// а также других документов, погашающих задолженность.
//
// Параметры
//	Параметры - Структура - Параметры выполнения отложенных расчетов.
//  РасшифровкаПлатежа - <ТаблицаЗначений> - данные табличной части документа, по которым определяется, какие движения будут сформированы.
//                       Создается в модуле менеджера документа
//  ТаблицаРеквизиты   - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                       Создается в модуле менеджера документа
//  Отказ  - <Булево> - флаг отказа от проведения
//
Функция ПодготовитьТаблицуВзаиморасчетовПогашениеЗадолженностиКорректировкаДолга(Параметры, РасшифровкаПлатежа, ТаблицаРеквизиты, Отказ, ВидДокумента = Неопределено) Экспорт

	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности(ВидДокумента);

	Если Не ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;

	// В КорректировкеДолга используется только один счет. 
	// В зависимости от настроек из шапки документа он является либо счетом расчетов, либо счетом авансов.
	СчетаРасчетов = ВыгрузитьЗаполненныеЗначенияКолонки(РасшифровкаПлатежа, "СчетРасчетов");
	Если Не ЕстьСчетаПоддерживающиеОтложенныеРасчеты(Параметры, СчетаРасчетов) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	// Запомним в Параметры данные из документа, используемые в других местах расчета.
	Реквизиты = ПодготовитьТаблицуРеквизитыПогашениеЗадолженности(ТаблицаРеквизиты);
	ЗаполнитьЗначенияСвойств(Параметры, Реквизиты[0], 
		"ВидОперации, ЭтоВозврат, УчитыватьЗадолженностьУСН, УчитыватьЗадолженностьУСНПатент, НаправлениеДвижения");

	// Вспомогательные таблицы, используемые при зачете авансов и погашении задолженности.
	ТаблицыПогашениеЗадолженности = УчетВзаиморасчетов.ПодготовитьПараметрыТаблицыВзаиморасчетовПогашениеЗадолженности(
		РасшифровкаПлатежа, 
		ТаблицаРеквизиты,
		ВидДокумента);

	// Обработаем старые проводки по погашению задолженности.
	ОбработатьСтарыеДвиженияПогашениеЗадолженностиКорректировкаДолга(Параметры, СчетаРасчетов);
	
	ОстаткиЗадолженности = ПолучитьОстаткиЗадолженности(Параметры, СчетаРасчетов);
	
	// Погашаем задолженность.
	УчетВзаиморасчетов.ЗаполнитьТаблицуВзаиморасчетовПогашениеЗадолженности(
		ТаблицыПогашениеЗадолженности.РасшифровкаПлатежа,
		ТаблицыПогашениеЗадолженности.Реквизиты[0],
		ТаблицаВзаиморасчетов,
		ОстаткиЗадолженности,
		Истина,
		Отказ);
		
	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Удаляет из движений документа проводки по погашению задолженности, сделанные ранее.
//
Процедура ОбработатьСтарыеДвиженияПогашениеЗадолженностиКорректировкаДолга(Параметры, СчетаРасчетов)

	Регистратор				= Параметры.Регистратор;
	Контрагент 				= Параметры.Контрагент;
	ДоговорКонтрагента 		= Параметры.ДоговорКонтрагента;
	ЗаписьУчетнойПолитики 	= УчетнаяПолитикаИзКеша(Параметры);
	
	ВидСубконтоКонтрагенты 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;

	Проводки 					= Параметры.Движения.Хозрасчетный;
	СохраняемыеДанныеДвижений 	= Параметры.СохраняемыеДанныеДвижений;

	// Чтобы сохранить порядок следования кор.движений, обходим набор проводок с начала,
	// запоминая проводки, которые необходимо удалить, в отдельном массиве.
	ПроводкиКУдалению = Новый Массив;

	Для Каждого Проводка Из Проводки Цикл
		
		// Прочитаем контрагента и договор из проводки, если там субконто другого вида, то будет Неопределено.
		КонтрагентДт 			= Проводка.СубконтоДт[ВидСубконтоКонтрагенты];
		ДоговорКонтрагентаДт 	= Проводка.СубконтоДт[ВидСубконтоДоговоры];

		КонтрагентКт 			= Проводка.СубконтоКт[ВидСубконтоКонтрагенты];
		ДоговорКонтрагентаКт 	= Проводка.СубконтоКт[ВидСубконтоДоговоры];
		
		КорДтКт 				= "";

		// Сначала проверим и очистим счета УСН, они забалансовые и могут не иметь кор.счета,
		// и поэтому дальнейшие условия для них выполнять не имеет смысла.
		Если ЗаписьУчетнойПолитики.ПрименяетсяУСН ИЛИ ЗаписьУчетнойПолитики.ПрименяетсяУСНПатент Тогда
			Если Параметры.СчетаУСН.Найти(Проводка.СчетДт) <> Неопределено
				И КонтрагентДт = Контрагент
				И ДоговорКонтрагентаДт = ДоговорКонтрагента Тогда
				ПроводкиКУдалению.Добавить(Проводка);
				Продолжить;
			КонецЕсли;
			
			Если Параметры.СчетаУСН.Найти(Проводка.СчетКт) <> Неопределено
				И КонтрагентКт = Контрагент
				И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
				ПроводкиКУдалению.Добавить(Проводка);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Проверим и очистим старые проводки по погашению задолженности.
		УдалитьПроводку = Ложь;
		Если Параметры.НаправлениеДвижения = НаправлениеДвиженияПоступление() Тогда
			// Корректировка задолженности покупателя вида Дт ХХ - Кт 62.01
			// или аванса поставщику Дт ХХ - Кт 60.02
			Если СчетаРасчетов.Найти(Проводка.СчетКт) <> Неопределено 
				И КонтрагентКт = Контрагент
				И ДоговорКонтрагентаКт = ДоговорКонтрагента Тогда
				УдалитьПроводку = Истина;
				КорДтКт = "Дт";
			КонецЕсли;
		Иначе
			// Корректировка задолженности поставщику вида Дт 60.01 - Кт ХХ
			// или аванса покупателя Дт ХХ - Кт 62.02
			Если СчетаРасчетов.Найти(Проводка.СчетДт) <> Неопределено 
				И КонтрагентДт = Контрагент
				И ДоговорКонтрагентаДт = ДоговорКонтрагента Тогда
				УдалитьПроводку = Истина;
				КорДтКт = "Кт";
			КонецЕсли;
		КонецЕсли;
		
		Если УдалитьПроводку Тогда
			// Запомним кор.счет и его аналитику для использования при формировании новых проводок по взаимозачету.
			// Эти данные не могут быть получены из самого документа, т.к. они могут относиться к другому договору,
			// расчеты по которому были восстановлены ранее по данным из остатков.
			КорСчет = Проводка["Счет" + КорДтКт];
			КоллекцияСубконто = Проводка["Субконто" + КорДтКт];
			
			Если СчетПоддерживаетОтложенныеРасчеты(Параметры, КорСчет)
				И КоллекцияСубконто[ВидСубконтоКонтрагенты] = Параметры.Контрагент
				И КоллекцияСубконто[ВидСубконтоДоговоры] 	= Параметры.ДоговорКонтрагента Тогда
				// Это взаимозачет между разными счетам/аналитиками по текущему договору, 
				// такое кор.движение не учитываем, т.к. оно может быть переформировано на текущем шаге по договору.
			Иначе
				КорДвижение = СохраняемыеДанныеДвижений.КорДвижения.Добавить();
				КорДвижение.ДтКт	= КорДтКт;
				КорДвижение.Счет 	= КорСчет;
				КорДвижение.Сумма 	= Проводка.Сумма;
				
				СвойстваКорСчета = СвойстваСчета(Параметры, КорСчет);

				Если СвойстваКорСчета.УчетПоПодразделениям Тогда
					КорДвижение.Подразделение = Проводка["Подразделение" + КорДтКт];
				КонецЕсли;

				Для НомерСубконто = 1 По СвойстваКорСчета.КоличествоСубконто Цикл
					ЗначениеСубконто = КоллекцияСубконто[СвойстваКорСчета["ВидСубконто" + НомерСубконто]];
					КорДвижение["Субконто" + НомерСубконто] = ЗначениеСубконто;
				КонецЦикла;
				
				Если СвойстваКорСчета.Валютный Тогда
					КорДвижение.Валюта 			= Проводка["Валюта" + КорДтКт];
					КорДвижение.ВалютнаяСумма 	= Проводка["ВалютнаяСумма" + КорДтКт];
				КонецЕсли;
				
				Если СвойстваКорСчета.НалоговыйУчет Тогда
					КорДвижение.СуммаНУ = Проводка["СуммаНУ" + КорДтКт];
				КонецЕсли;
			КонецЕсли;
			
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого Проводка Из ПроводкиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;

	// Свернем данные кор.движений.
	СохраняемыеДанныеДвижений.КорДвижения.Свернуть(
		"ДтКт, Счет, Подразделение, Валюта, Субконто1, Субконто2, Субконто3",
		"Сумма, ВалютнаяСумма, СуммаНУ");
		
КонецПроцедуры

// Возвращает структуру с подготовленными таблицами для формирования движений по взаимозачету задолженности.
//
Функция ПодготовитьСтруктуруТаблицВзаимозачета(Параметры, ТаблицаДебиторскаяЗадолженность, ТаблицаДебиторскаяЗадолженностьВозвратАванса,
	ТаблицаКредиторскаяЗадолженность, ТаблицаКредиторскаяЗадолженностьВозвратАванса, ТаблицаРеквизиты, Отказ) Экспорт

	СтруктураТаблицВзаимозачета = УчетВзаиморасчетов.ПодготовитьСтруктуруТаблицВзаимозачета(
		ТаблицаДебиторскаяЗадолженность,
		ТаблицаДебиторскаяЗадолженностьВозвратАванса,
		ТаблицаКредиторскаяЗадолженность,
		ТаблицаКредиторскаяЗадолженностьВозвратАванса,
		ТаблицаРеквизиты,
		Отказ,
		Истина);

	// Отложенное проведение выполняется по одному из договоров, участвующих в корректировке долга.
	// Поэтому, возможно, что таблицы взаимозачета содержат данные только по одной стороне проводки,
	// в этом случае кор.счет и его аналитику восстановим из ранее сохраненных данных движений.
	
	ВосстановитьСохраняемыеДанныеДвиженийВзаимозачетКорректировкаДолга(
		Параметры,
		СтруктураТаблицВзаимозачета.ТаблицаДебиторскаяЗадолженность,
		"Дт");

	ВосстановитьСохраняемыеДанныеДвиженийВзаимозачетКорректировкаДолга(
		Параметры,
		СтруктураТаблицВзаимозачета.ТаблицаДебиторскаяЗадолженностьВозвратАванса,
		"Дт");

	ВосстановитьСохраняемыеДанныеДвиженийВзаимозачетКорректировкаДолга(
		Параметры,
		СтруктураТаблицВзаимозачета.ТаблицаКредиторскаяЗадолженность,
		"Кт");

	ВосстановитьСохраняемыеДанныеДвиженийВзаимозачетКорректировкаДолга(
		Параметры,
		СтруктураТаблицВзаимозачета.ТаблицаКредиторскаяЗадолженностьВозвратАванса,
		"Кт");
	
	Возврат СтруктураТаблицВзаимозачета;

КонецФункции

// Заполняет в таблицах для проведения поля данными, которые не считываются заново из документа,
// а определяются из предыдущего набора движений.
//
Процедура ВосстановитьСохраняемыеДанныеДвиженийВзаимозачетКорректировкаДолга(Параметры, ТаблицаЗадолженность, КорДтКт)

	// В процедуре обрабатывается следующая ситуация в учете.
	//
	// В документе "Корректировки долга" с видом "Зачет аванса покупателя" введены строки кредиторской задолженности:
	//	62.02 Договор3 710 руб.
	//	62.02 Договор1 20 руб.
	// Итого 730 руб.
	// А также строки дебиторской задолженности:
	//  62.01 Договор1 30 руб.
	//	62.01 Договор2 700 руб.
	// Итого 730 руб.
	//
	// При первоначальном проведении документа были сформированы проводки,
	// исходя из порядка следования строк в табличных частях:
	//	Дт 62.02 Договор3 - Кт 62.01 Договор1  30 руб.
	//	Дт 62.02 Договор3 - Кт 62.01 Договор2  680 руб.
	//  Дт 62.02 Договор1 - Кт 62.01 Договор2  20 руб.
	//
	// Т.к. актуализация отложенных расчетов выполняется по каждому договору в отдельности, то при актуализации Договора1
	// дебиторская и кредиторская задолженность по нему будет зачтена друг с другом
	// (первая строка из ТаблицаЗадолженность):
	// 	Дт 62.02 Договор1 - Кт 62.01 Договор1  20 руб.
	//
	// Вторая строка из ТаблицаЗадолженность содержит остаток 10 руб. на 62.01 по Договору1 без данных о кор.счете,
	// т.к. актуализация выполняется только по Договору1.
	// Поэтому используем данные о кор.счете и его аналитике по данным из сохраненных движений до начала актуализации 
	// (таблица КорДвижения):
	// 	Дт 62.02 Договор3 - Кт 62.01 Договор1  10 руб.
	//
	// При этом остается еще 700 руб. на 62.01 по Договору2 и 700 руб. на 62.02 по Договору3,
	// их зачитываем между собой:
	// 	Дт 62.02 Договор3 - Кт 62.01 Договор2  700 руб. 

	Если ТаблицаЗадолженность.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	КорДвижения = Параметры.СохраняемыеДанныеДвижений.КорДвижения;
	
	// Числовые колонки, которые относятся к текущему договору (не являются данными кор.счета и его аналитики). 
	ЧисловыеКолонки = Новый Массив;
	Для Каждого Колонка Из ТаблицаЗадолженность.Колонки Цикл
		Если НЕ СтрНачинаетсяС(Колонка.Имя, "Кор") Тогда
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				ЧисловыеКолонки.Добавить(Колонка.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиЗадолженностиКУдалению = Новый Массив;
	КорДвиженияКУдалению = Новый Массив;
	
	// Для строк задолженности, где не указан кор.счет, подставим ранее сохраненные данные движений.

	Счетчик = -1; // В цикле возможно добавление строк в ТаблицуЗадолженности, поэтому ведем счетчик самостоятельно.

	Пока Счетчик < ТаблицаЗадолженность.Количество() - 1 Цикл

		Счетчик = Счетчик + 1;
		СтрокаЗадолженности = ТаблицаЗадолженность[Счетчик];

		Если ЗначениеЗаполнено(СтрокаЗадолженности.КорСчет) Тогда
			Если НЕ АналитикиДтКтСовпадают(Параметры, СтрокаЗадолженности) Тогда
				// Если кор.счет и аналитика определены, то уменьшим текущие суммы по ним в таблице КорДвижений.
				УменьшитьКорДвижения(Параметры, КорДтКт, СтрокаЗадолженности);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИндексНовойСтроки = Счетчик;
		Для Каждого КорДвижение Из КорДвижения Цикл
		
			// Учитываем только движения по требуемой стороне проводки.
			Если КорДвижение.ДтКт <> КорДтКт Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСуммаБУ 	= Мин(СтрокаЗадолженности.СуммаБУ, КорДвижение.Сумма);
			Коэффициент 	= ?(СтрокаЗадолженности.СуммаБУ <> 0, НоваяСуммаБУ / СтрокаЗадолженности.СуммаБУ, 0);
			КорКоэффициент	= ?(КорДвижение.Сумма <> 0, НоваяСуммаБУ / КорДвижение.Сумма, 0);
			
			// Добавляем новую строку задолженности, а в старой уменьшаем суммы.
			// Поля таблицы описаны в УчетВзаиморасчетов.ПустаяТаблицаВзаимозачет().
			НоваяСтрокаЗадолженности = ТаблицаЗадолженность.Вставить(ИндексНовойСтроки);
			ИндексНовойСтроки = ИндексНовойСтроки + 1;
			Счетчик = Счетчик + 1;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗадолженности, СтрокаЗадолженности);
			
			// Пересчитываем суммы в новой строке по коэффициенту.
			НоваяСтрокаЗадолженности.ОстатокВзаиморасчетов 	= Окр(СтрокаЗадолженности.ОстатокВзаиморасчетов * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаВзаиморасчетов	= НоваяСуммаБУ; // Отложенное проведение поддерживается только для договоров в рублях.
			НоваяСтрокаЗадолженности.СуммаБУ				= НоваяСуммаБУ;
			НоваяСтрокаЗадолженности.СуммаРуб				= Окр(НоваяСтрокаЗадолженности.СуммаРуб * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаНУ				= Окр(СтрокаЗадолженности.СуммаНУ * Коэффициент, 2);
			НоваяСтрокаЗадолженности.Разница				= НоваяСтрокаЗадолженности.СуммаБУ - НоваяСтрокаЗадолженности.СуммаНУ;
			
			НоваяСтрокаЗадолженности.СуммаВзаиморасчетовЕНВД 	= Окр(НоваяСтрокаЗадолженности.СуммаВзаиморасчетовЕНВД * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаБУ_ЕНВД 				= Окр(НоваяСтрокаЗадолженности.СуммаБУ_ЕНВД * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаВзаиморасчетовПатент	= Окр(НоваяСтрокаЗадолженности.СуммаВзаиморасчетовПатент * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаБУ_Патент				= Окр(НоваяСтрокаЗадолженности.СуммаБУ_Патент * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаВзаиморасчетовКомитента= Окр(НоваяСтрокаЗадолженности.СуммаВзаиморасчетовКомитента * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаБУ_Комитента			= Окр(НоваяСтрокаЗадолженности.СуммаБУ_Комитента * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаВзаиморасчетовТорговыйСбор= Окр(НоваяСтрокаЗадолженности.СуммаВзаиморасчетовТорговыйСбор * Коэффициент, 2);
			НоваяСтрокаЗадолженности.СуммаБУ_ТорговыйСбор		= Окр(НоваяСтрокаЗадолженности.СуммаБУ_ТорговыйСбор * Коэффициент, 2);
			
			// Заполняем поля кор.счета
			НоваяСтрокаЗадолженности.КорВалютаВзаиморасчетов 	= КорДвижение.Валюта;
			НоваяСтрокаЗадолженности.КорСуммаВзаиморасчетов 	= Окр(КорДвижение.ВалютнаяСумма * КорКоэффициент, 2);
			НоваяСтрокаЗадолженности.КорСуммаНУ					= Окр(КорДвижение.СуммаНУ * КорКоэффициент, 2);
			НоваяСтрокаЗадолженности.КорРазница					= НоваяСуммаБУ - НоваяСтрокаЗадолженности.КорСуммаНУ;
			НоваяСтрокаЗадолженности.КорСчет					= КорДвижение.Счет;
			НоваяСтрокаЗадолженности.КорПодразделение			= КорДвижение.Подразделение;
			
			Для Ном = 1 По 3 Цикл
				НоваяСтрокаЗадолженности["КорСубконто" + Ном]	= КорДвижение["Субконто" + Ном];
			КонецЦикла;
			
			// Уменьшаем суммы в старой строке. 
			ВсеКолонкиНулевые = Истина;
			Для Каждого ИмяКолонки Из ЧисловыеКолонки Цикл
				СтрокаЗадолженности[ИмяКолонки] = СтрокаЗадолженности[ИмяКолонки] - НоваяСтрокаЗадолженности[ИмяКолонки];
				Если СтрокаЗадолженности[ИмяКолонки] <> 0 Тогда
					// Запоминаем факт того, что есть ненулевые колонки, но цикл не прерываем,
					// т.к. необходимо перерассчитать все ЧисловыеКолонки.
					ВсеКолонкиНулевые = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			КорДвижение.Сумма 			= КорДвижение.Сумма - НоваяСуммаБУ;
			КорДвижение.ВалютнаяСумма 	= КорДвижение.ВалютнаяСумма - НоваяСтрокаЗадолженности.КорСуммаВзаиморасчетов;
			КорДвижение.СуммаНУ			= КорДвижение.СуммаНУ - НоваяСтрокаЗадолженности.КорСуммаНУ;
			
			Если КорДвижение.Сумма = 0
				И КорДвижение.ВалютнаяСумма = 0 
				И КорДвижение.СуммаНУ = 0 Тогда
				КорДвиженияКУдалению.Добавить(КорДвижение);
			КонецЕсли;

			// Удалим обнулившуюся строку.
			Если ВсеКолонкиНулевые Тогда
				СтрокиЗадолженностиКУдалению.Добавить(СтрокаЗадолженности);
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		Для Каждого КорДвижение Из КорДвиженияКУдалению Цикл
			КорДвижения.Удалить(КорДвижение);
		КонецЦикла;
		КорДвиженияКУдалению.Очистить();
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиЗадолженностиКУдалению Цикл
		ТаблицаЗадолженность.Удалить(СтрокаКУдалению);
	КонецЦикла;

КонецПроцедуры

// Уменьшает суммы в таблице КорДвижения сохраняемых данных на величину 
// погашаемой задолженности из СтрокаЗадолженности.
//
Процедура УменьшитьКорДвижения(Параметры, ДтКт, СтрокаЗадолженности)

	// Найдем в таблице КорДвижений запись, совпадающую с кор.аналитиков из СтрокаЗадолженности
	// и уменьшим суммы.

	КорДвижения = Параметры.СохраняемыеДанныеДвижений.КорДвижения;

	ОтборКорДвижений = Новый Структура();
	ОтборКорДвижений.Вставить("ДтКт", ДтКт);
	ОтборКорДвижений.Вставить("Счет");
	ОтборКорДвижений.Вставить("Валюта");
	ОтборКорДвижений.Вставить("Подразделение");
	ОтборКорДвижений.Вставить("Субконто1");
	ОтборКорДвижений.Вставить("Субконто2");
	ОтборКорДвижений.Вставить("Субконто3");
	
	СвойстваКорСчета = СвойстваСчета(Параметры, СтрокаЗадолженности.КорСчет);
	
	ОтборКорДвижений.Счет = СтрокаЗадолженности.КорСчет;

	Если СвойстваКорСчета.Валютный Тогда
		ОтборКорДвижений.Валюта = СтрокаЗадолженности.КорВалютаВзаиморасчетов;
	Иначе
		ОтборКорДвижений.Валюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;

	Если СвойстваКорСчета.УчетПоПодразделениям Тогда
		ОтборКорДвижений.Подразделение = СтрокаЗадолженности.КорПодразделение;
	Иначе
		ОтборКорДвижений.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;

	ВидСубконтоДокументы = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;

	Для Счетчик = 1 По 3 Цикл
		Если Счетчик > СвойстваКорСчета.КоличествоСубконто Тогда
			ОтборКорДвижений.Удалить("Субконто" + Счетчик);
			Продолжить;
		КонецЕсли;
	
		Если СвойстваКорСчета["ВидСубконто" + Счетчик] = ВидСубконтоДокументы
			И СтрокаЗадолженности["КорСубконто" + Счетчик] = Параметры.Регистратор Тогда
			// Если кор.субконто "Документы расчетов с контрагентами" содержит ссылку на сам текущий документ,
			// то его не учитываем при поиске, 
			// т.к. возможно, что из-за того, что не получали остатков по кор.договору, то это значение неактуально.
			ОтборКорДвижений.Удалить("Субконто" + Счетчик);
			Продолжить;
		КонецЕсли;

		ОтборКорДвижений["Субконто" + Счетчик] = СтрокаЗадолженности["КорСубконто" + Счетчик];
	КонецЦикла;
	
	НайденныеСтроки = КорДвижения.НайтиСтроки(ОтборКорДвижений);

	Для Каждого КорДвижение Из НайденныеСтроки Цикл

		КорДвижение.Сумма = КорДвижение.Сумма - СтрокаЗадолженности.СуммаБУ;

		Если СвойстваКорСчета.Валютный Тогда
			КорДвижение.ВалютнаяСумма = КорДвижение.ВалютнаяСумма - СтрокаЗадолженности.КорСуммаВзаиморасчетов;
		КонецЕсли;

		Если СвойстваКорСчета.НалоговыйУчет Тогда
			КорДвижение.СуммаНУ	= КорДвижение.СуммаНУ - СтрокаЗадолженности.КорСуммаНУ;
		КонецЕсли;
		
		// Удалим обнулившуюся строку
		Если КорДвижение.Сумма = 0 
			И КорДвижение.ВалютнаяСумма = 0
			И КорДвижение.СуммаНУ = 0 Тогда
			КорДвижения.Удалить(КорДвижение);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает Истина, если в строке задолженности аналитика по счету расчетов
// и по кор.счету полностью совпадает.
//
Функция АналитикиДтКтСовпадают(Параметры, СтрокаЗадолженности)

	// В некоторых случаях в документе КорректировкаДолга пользователи могут указать
	// одинаковые счета и аналитики по Дт и Кт.
	// Определим, относится ли текущая строка к таким.

	Если СтрокаЗадолженности.СчетРасчетов <> СтрокаЗадолженности.КорСчет
		ИЛИ СтрокаЗадолженности.Подразделение <> СтрокаЗадолженности.КорПодразделение
		ИЛИ (ЗначениеЗаполнено(СтрокаЗадолженности.КорВалютаВзаиморасчетов) 
				И СтрокаЗадолженности.ВалютаВзаиморасчетов <> СтрокаЗадолженности.КорВалютаВзаиморасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;

	СвойстваКорСчета = СвойстваСчета(Параметры, СтрокаЗадолженности.КорСчет);
	
	ВидСубконтоКонтрагенты 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	ВидСубконтоДокументы 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
	
	КорКонтрагент 			= Неопределено;
	КорДоговорКонтрагента 	= Неопределено;
	КорДокументРасчетов 	= Неопределено;
	
	Для Счетчик = 1 По СвойстваКорСчета.КоличествоСубконто Цикл
		ВидСубконто = СвойстваКорСчета["ВидСубконто" + Счетчик];
		Если ВидСубконто = ВидСубконтоКонтрагенты Тогда
			КорКонтрагент = СтрокаЗадолженности["КорСубконто" + Счетчик];
		ИначеЕсли ВидСубконто = ВидСубконтоДоговоры Тогда
			КорДоговорКонтрагента = СтрокаЗадолженности["КорСубконто" + Счетчик];
		ИначеЕсли ВидСубконто = ВидСубконтоДокументы Тогда
			КорДокументРасчетов = СтрокаЗадолженности["КорСубконто" + Счетчик];
		КонецЕсли;
	КонецЦикла;

	Возврат СтрокаЗадолженности.Контрагент = КорКонтрагент
		И СтрокаЗадолженности.ДоговорКонтрагента = КорДоговорКонтрагента
		И СтрокаЗадолженности.ДокументРасчетов = КорДокументРасчетов;

КонецФункции

// Возвращает структуру с подготовленными таблицами для формирования движений по списанию задолженности.
//
Функция ПодготовитьТаблицуВзаиморасчетовСписаниеЗадолженности(Параметры, РасшифровкаПлатежа, ТаблицаРеквизиты, Отказ) Экспорт

	ТаблицаВзаиморасчетов = УчетВзаиморасчетов.ПустаяТаблицаВзаиморасчетовПогашениеЗадолженности();

	Если Не ЗначениеЗаполнено(РасшифровкаПлатежа) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	// При списании задолженности используется только один счет - либо счет расчетов либо счет авансов 
	// в зависимости от того, что списывается.
	СчетаРасчетов = ВыгрузитьЗаполненныеЗначенияКолонки(РасшифровкаПлатежа, "СчетРасчетов");
	Если Не ЕстьСчетаПоддерживающиеОтложенныеРасчеты(Параметры, СчетаРасчетов) Тогда
		Возврат ТаблицаВзаиморасчетов;
	КонецЕсли;
	
	// Запомним в Параметры данные из документа, используемые в других местах расчета.
	Реквизиты = ПодготовитьТаблицуРеквизитыСписаниеЗадолженности(ТаблицаРеквизиты);
	ЗаполнитьЗначенияСвойств(Параметры, Реквизиты[0], 
		"ВидОперации, ЭтоВозврат, УчитыватьЗадолженностьУСН, УчитыватьЗадолженностьУСНПатент, НаправлениеДвижения");

	// Вспомогательные таблицы, используемые при списании задолженности.
	ТаблицыСписаниеЗадолженности = УчетВзаиморасчетов.ПодготовитьПараметрыТаблицыВзаиморасчетовСписаниеЗадолженности(
		РасшифровкаПлатежа, 
		ТаблицаРеквизиты);

	// Обработаем старые проводки по списанию задолженности.
	ОбработатьСтарыеДвиженияПогашениеЗадолженности(Параметры, СчетаРасчетов, СчетаРасчетов);
	
	ОстаткиЗадолженности = ПолучитьОстаткиЗадолженности(Параметры, СчетаРасчетов);
	
	// Погашаем задолженность.
	УчетВзаиморасчетов.ЗаполнитьТаблицуВзаиморасчетовСписаниеЗадолженности(
		ТаблицыСписаниеЗадолженности.РасшифровкаПлатежа,
		ТаблицыСписаниеЗадолженности.Реквизиты[0],
		ТаблицаВзаиморасчетов,
		ОстаткиЗадолженности,
		Истина,
		Отказ);
		
	Возврат ТаблицаВзаиморасчетов;

КонецФункции

// Подготовка параметров для функции ПодготовитьТаблицуВзаиморасчетовСписаниеЗадолженности()
// на основании переданных документом таблиц.
//
// Параметры
//  ТаблицаРеквизиты  - <ТаблицаЗначений> - реквизиты, необходимые для формирования движений.
//                      Создается в модуле менеджера документа
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ПодготовитьТаблицуРеквизитыСписаниеЗадолженности(ТаблицаРеквизиты)

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "ВидОперации," 				// <ПеречислениеСсылка.*> - Вид операции документа или Неопределено
	+ "ЭтоВозврат," 				// <Булево> - Истина, если операция является возвратом
	+ "УчитыватьЗадолженностьУСН," 	// <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН
	+ "УчитыватьЗадолженностьУСНПатент," // <Булево> - Истина для расчетов с покупателями по организации, применяющей УСН патент
	+ "НаправлениеДвижения"			// <Строка> - "Поступление" при зачете авансов, выданных поставщикам (при поступлении материальных ценностей)
									//          - "Выбытие" при зачете авансов, полученных от покупателей (при выбытии материальных ценностей)
	;

	Результат = ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок);

	Возврат Результат;

КонецФункции

// Формирует движения списания задолженности.
//
Процедура СформироватьДвиженияСписаниеЗадолженности(Параметры, ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Отказ) Экспорт

	УчетВзаиморасчетов.СформироватьДвиженияСписаниеЗадолженности(
		ТаблицаВзаиморасчетов,
		ТаблицаРеквизиты,
		Параметры.Движения,
		Отказ);

	// В процессе формирования движений могут возникнуть сообщения пользователю, запомним их.
	ПроведениеСервер.ЗапомнитьСообщенияПользователю(
		Параметры.РезультатРасчета.Сообщения,
		Параметры.Организация,
		НСтр("ru = 'Не актуализированы движения по списанию задолженности'"),
		Параметры.Регистратор,
		Параметры.Период,
		Отказ);

КонецПроцедуры

// Формирует движения взаимозачета задолженности.
//
Процедура СформироватьДвиженияВзаимозачет(Параметры, ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Отказ) Экспорт

	УчетВзаиморасчетов.СформироватьДвиженияВзаимозачет(
		ТаблицаВзаиморасчетов,
		ТаблицаРеквизиты,
		Параметры.Движения,
		Отказ);

	// В процессе формирования движений могут возникнуть сообщения пользователю, запомним их.
	ПроведениеСервер.ЗапомнитьСообщенияПользователю(
		Параметры.РезультатРасчета.Сообщения,
		Параметры.Организация,
		НСтр("ru = 'Не актуализированы движения по взаимозачету задолженности'"),
		Параметры.Регистратор,
		Параметры.Период,
		Отказ);

КонецПроцедуры

// Формирует движения взаимозачета задолженности при наличии остатков ранее сохраненных кор.движений,
// которые не были закрыты в процессе выполнения отложенных расчетов по текущему договору.
//
Процедура СформироватьДвиженияВзаимозачетОстатокКорДвижений(Параметры, СтруктураТаблицВзаимозачета, Отказ) Экспорт

	// При выполнении взаимозачета в сохраненных данных КорДвижений могут остаться суммы,
	// если распределение сумм зачитываемой задолженности в процессе оперативного и отложенного проведения
	// выполнилось по-разному из-за закрытия при отложенном проведении в разрезе документов расчетов.
	// Например, указаны несколько договоров, между которым производится взаимозачет, 
	// при этом по одному из договоров есть одновременно и дебиторская и кредиторская задолженность.
	// В этом случае остатки из КорДвижений отразим как отдельную проводку друг с другом.

	Если НЕ ЕстьДанныеВТаблицах(СтруктураТаблицВзаимозачета) Тогда
		// В исходных таблицах взаимозачета нет данных, корректировка не требуется.
		Возврат;
	КонецЕсли;

	КорДвижения = Параметры.СохраняемыеДанныеДвижений.КорДвижения;
	Если КорДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Разделим движения по Дт и Кт на разные таблицы.
	Отбор = Новый Структура("ДтКт");
	Отбор.ДтКт = "Дт";
	ДвиженияДт = КорДвижения.Скопировать(Отбор);
	Отбор.ДтКт = "Кт";
	ДвиженияКт = КорДвижения.Скопировать(Отбор);
	
	СуммаДт = ДвиженияДт.Итог("Сумма");
	СуммаКт = ДвиженияКт.Итог("Сумма");
	
	// Проверим, чтобы суммы Дт и Кт оборотов по КорДвижениям совпадали.
	Если СуммаДт <> СуммаКт Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'При выполнении отложенных расчетов по договору ""%1"" с контрагентом ""%2""
				|обнаружено расхождение суммы дебетовых (%3) и кредитовых оборотов (%4) для кор.движений.'"),
				Параметры.ДоговорКонтрагента,
				Параметры.Контрагент,
				Формат(СуммаДт, "ЧН="),
				Формат(СуммаКт, "ЧН="));
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Проводки = Параметры.Движения.Хозрасчетный;
	
	Для Каждого СторонаДт Из ДвиженияДт Цикл
	
		Счетчик = ДвиженияКт.Количество();
		Пока Счетчик > 0 Цикл

			Счетчик = Счетчик - 1;
			СторонаКт = ДвиженияКт[Счетчик];
			
			// Определим суммы проводки
			СуммаПроводки = Мин(СторонаДт.Сумма, СторонаКт.Сумма);

			Если СторонаДт.Сумма <> 0 Тогда
				Коэффициент 	= СуммаПроводки / СторонаДт.Сумма;
				ВалютнаяСуммаДт = Окр(СторонаДт.ВалютнаяСумма * Коэффициент, 2);
				СуммаНУДт		= Окр(СторонаДт.СуммаНУ * Коэффициент, 2);
			Иначе
				ВалютнаяСуммаДт = 0;
				СуммаНУДт 		= 0;
			КонецЕсли;
			
			Если СторонаКт.Сумма <> 0 Тогда
				Коэффициент 	= СуммаПроводки / СторонаКт.Сумма;
				ВалютнаяСуммаКт	= Окр(СторонаКт.ВалютнаяСумма * Коэффициент, 2);
				СуммаНУКт		= Окр(СторонаКт.СуммаНУ * Коэффициент, 2);
			Иначе
				ВалютнаяСуммаКт = 0;
				СуммаНУКт 		= 0;
			КонецЕсли;
			
			// Добавляем проводку.
			Проводка = Проводки.Добавить();

			// Свойства         
			Проводка.Период 		= Параметры.Период;
			Проводка.Регистратор	= Параметры.Регистратор;
			Проводка.Организация	= Параметры.Организация;
			Проводка.Сумма			= СуммаПроводки;
			Проводка.Содержание		= "Взаимозачет";
			
			// Дт
			СвойстваСчета			= СвойстваСчета(Параметры, СторонаДт.Счет);
			Проводка.СчетДт 		= СторонаДт.Счет;
			Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Проводка.СубконтоДт[СвойстваСчета["ВидСубконто" + НомерСубконто]] = СторонаДт["Субконто" + НомерСубконто];
			КонецЦикла;
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СторонаДт.Подразделение;
			КонецЕсли;
			Если СвойстваСчета.Валютный Тогда
				Проводка.ВалютнаяСуммаДт= ВалютнаяСуммаДт;
				Проводка.ВалютаДт		= СторонаДт.Валюта;
			КонецЕсли;
			Если СвойстваСчета.НалоговыйУчет Тогда
				Проводка.СуммаНУДт		= СуммаНУДт;
			КонецЕсли;
			
			// Кт
			СвойстваСчета			= СвойстваСчета(Параметры, СторонаКт.Счет);
			Проводка.СчетКт			= СторонаКт.Счет;
			Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				Проводка.СубконтоКт[СвойстваСчета["ВидСубконто" + НомерСубконто]] = СторонаКт["Субконто" + НомерСубконто];
			КонецЦикла;
			Если СвойстваСчета.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СторонаКт.Подразделение;
			КонецЕсли;
			Если СвойстваСчета.Валютный Тогда
				Проводка.ВалютнаяСуммаКт= ВалютнаяСуммаКт;
				Проводка.ВалютаКт		= СторонаКт.Валюта;
			КонецЕсли;
			Если СвойстваСчета.НалоговыйУчет Тогда
				Проводка.СуммаНУКт		= СуммаНУКт;
			КонецЕсли;
			
			// Уменьшаем остатки.
			СторонаДт.Сумма 		= СторонаДт.Сумма - СуммаПроводки;
			СторонаДт.ВалютнаяСумма = СторонаДт.ВалютнаяСумма - ВалютнаяСуммаДт;
			СторонаДт.СуммаНУ 		= СторонаДт.СуммаНУ - СуммаНУДт;
			
			СторонаКт.Сумма 		= СторонаКт.Сумма - СуммаПроводки;
			СторонаКт.ВалютнаяСумма = СторонаКт.ВалютнаяСумма - ВалютнаяСуммаКт;
			СторонаКт.СуммаНУ 		= СторонаКт.СуммаНУ - СуммаНУКт;
			
			Если СторонаКт.Сумма = 0
				И СторонаКт.ВалютнаяСумма = 0
				И СторонаКт.СуммаНУ = 0 Тогда
				// Удалим обнулившуюся строку, чтобы в следующий раз ее не анализировать.
				ДвиженияКт.Удалить(СторонаКт);
			КонецЕсли;
			
			Если СторонаДт.Сумма = 0
				И СторонаДт.ВалютнаяСумма = 0
				И СторонаДт.СуммаНУ = 0 Тогда
				// Переходим к следующей строке движений по Дт.
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

	// Сохраненные кор.движения обработали, очистим таблицу.
	Параметры.СохраняемыеДанныеДвижений.КорДвижения.Очистить();

КонецПроцедуры

// Формирует движения переноса взаимозачета.
//
Процедура СформироватьДвиженияПереносЗадолженности(Параметры, ТаблицаВзаиморасчетов, ТаблицаРеквизиты, Отказ) Экспорт

	УчетВзаиморасчетов.СформироватьДвиженияПереносЗадолженности(
		ТаблицаВзаиморасчетов,
		ТаблицаРеквизиты,
		Параметры.Движения,
		Отказ);

	// В процессе формирования движений могут возникнуть сообщения пользователю, запомним их.
	ПроведениеСервер.ЗапомнитьСообщенияПользователю(
		Параметры.РезультатРасчета.Сообщения,
		Параметры.Организация,
		НСтр("ru = 'Не актуализированы движения по взаимозачету задолженности'"),
		Параметры.Регистратор,
		Параметры.Период,
		Отказ);

КонецПроцедуры

#КонецОбласти

#Область УСН

// Возвращает Истина, если для текущей организации, по которой выполняется актуализация
// установлено в учетной политике применение УСН.
//
Функция ПрименяетсяУСН(Параметры) Экспорт

	ЗаписьУчетнойПолитики = УчетнаяПолитикаИзКеша(Параметры);
	
	Возврат ЗаписьУчетнойПолитики.ПрименяетсяУСН;

КонецФункции

// Возвращает Истина, если для текущей организации, по которой выполняется актуализация
// установлено в учетной политике применение УСН.
//
Функция ПрименяетсяУСНПатент(Параметры) Экспорт

	ЗаписьУчетнойПолитики = УчетнаяПолитикаИзКеша(Параметры);
	
	Возврат ЗаписьУчетнойПолитики.ПрименяетсяУСНПатент;

КонецФункции

// Формирует движения по регистрам УСН.
//
Процедура СформироватьДвиженияУСН(Параметры, СтруктураТаблицУСН) Экспорт

	Если НЕ РегистрыУСНФормируютсяПоДоговорам(Параметры) Тогда
		// Движения текущего документа не требуется отражать в разрезе договоров,
		// поэтому при восстановлении отложенных расчетов движения не меняются.
		Возврат;
	КонецЕсли;

	// В процессе отложенного проведения вызов текущей процедуры СформироватьДвиженияУСН()
	// может осуществляться несколько раз для проверки разных видов операций документа.
	// Фактически же движения могут меняться, если есть данные в переданных таблицах.
	// Проверим это перед очисткой старых движений.
	
	Если НЕ ЕстьДанныеВТаблицах(СтруктураТаблицУСН) Тогда
		Возврат;
	КонецЕсли;

	ОбработатьСтарыеДвиженияУСН(Параметры);

	ДокументОбъект = ДокументОбъектУСН(Параметры);

	НалоговыйУчетУСН.СформироватьДвиженияУСН(
		ДокументОбъект, 
		СтруктураТаблицУСН, 
		Ложь,
		Параметры.ДоговорКонтрагента);

КонецПроцедуры

// Возвращает Истина, если для текущего документа формирование движений по регистрам УСН
// осуществляется в разрезе договоров.
//
Функция РегистрыУСНФормируютсяПоДоговорам(Параметры)

	ЗаписьУчетнойПолитики = УчетнаяПолитикаИзКеша(Параметры);
	
	Если НЕ ЗаписьУчетнойПолитики.ПрименяетсяУСН
		И НЕ ЗаписьУчетнойПолитики.ПрименяетсяУСНПатент Тогда
		// Организация не применяет УСН.
		Возврат Ложь;
	КонецЕсли;
	
	// Некоторые операции в УСН отражаются по данным специализированных реквизитов
	// из шапки документа, которые не связаны явно с договорами.
	// Такие движения не меняем при восстановлении отложенных расчетов.
	МетаданныеДокумента = МетаданныеОбъекта(Параметры, Параметры.Регистратор);
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Графа4_УСН", МетаданныеДокумента) Тогда
	
		// Структура параметров для функции НалоговыйУчетУСН.ВидОперацииДДС()
		СтруктураШапкиДокумента = Новый Структура();
		СтруктураШапкиДокумента.Вставить("Дата", 								Параметры.Период);
		СтруктураШапкиДокумента.Вставить("Ссылка", 								Параметры.Регистратор);
		СтруктураШапкиДокумента.Вставить("ВидОперации", 						Параметры.ВидОперации);
		СтруктураШапкиДокумента.Вставить("БезЗакрывающихДокументов",			Параметры.БезЗакрывающихДокументов);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", 	ЗаписьУчетнойПолитики.ПрименяетсяУСНДоходы);
		
		ВидОперацииДДС = НалоговыйУчетУСН.ВидОперацииДДС(СтруктураШапкиДокумента);
		
		Если ВидОперацииДДС = "ПрочееДДС"
			ИЛИ ВидОперацииДДС = "ПродажаВалюты"
			ИЛИ ВидОперацииДДС = "ПокупкаВалюты"
			ИЛИ ВидОперацииДДС = "ОплатаОтПокупателяБезЗакрывающихДокументов"
			ИЛИ ВидОперацииДДС = "ОплатаОтЭквайераБезЗакрывающихДокументов"
			ИЛИ ВидОперацииДДС = "РозничнаяВыручкаБезЗакрывающихДокументов"
			ИЛИ ВидОперацииДДС = "ВозвратПокупателюБезЗакрывающихДокументов" Тогда
			// Не связано с восстановлением состояния расчетов по договорам.
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Удаляет из регистров УСН записи по текущему договору.
// Они будут созданы заново в результате зачета авансов / погашения задолженности.
//
Процедура ОбработатьСтарыеДвиженияУСН(Параметры)

	ИменаРегистровУСН = ИменаРегистровУСН();
	
	Для Каждого ИмяРегистра Из ИменаРегистровУСН Цикл
	
		НаборЗаписей = Неопределено;
		Если НЕ Параметры.Движения.Свойство(ИмяРегистра, НаборЗаписей) Тогда
			Продолжить;
		КонецЕсли;
	
		Счетчик = НаборЗаписей.Количество();
		Пока Счетчик > 0 Цикл
			Счетчик = Счетчик - 1;
			Движение = НаборЗаписей[Счетчик];
			Если Движение.Контрагент = Параметры.Контрагент
				И Движение.ДоговорКонтрагента = Параметры.ДоговорКонтрагента Тогда
				НаборЗаписей.Удалить(Счетчик);
				Продолжить;
			КонецЕсли;
			
			// Этап проведения используется для зачистки движений набора регистра
			// в ходе одной процедуры проведения.
			// Сейчас начинается новая итерация уже отложенных расчетов, 
			// поэтому сбросим для всех записей регистров, которые остаются с предыдущих итераций,
			// этап проведения в 0, чтобы они не очищались при записи изменений по актуализируемому договору.
			Движение.ЭтапПроведения = 0;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ИменаРегистровУСН()

	Результат = Новый Массив;
	Результат.Добавить("КнигаУчетаДоходовИРасходов");
	Результат.Добавить("КнигаУчетаДоходовПатент");

	Возврат Результат;

КонецФункции

Процедура ОчиститьДвиженияУСН(Параметры) Экспорт

	ИменаРегистровУСН = ИменаРегистровУСН();
	
	Для Каждого ИмяРегистра Из ИменаРегистровУСН Цикл
	
		НаборЗаписей = Неопределено;
		Если НЕ Параметры.Движения.Свойство(ИмяРегистра, НаборЗаписей) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей.Очистить();
		
	КонецЦикла;

КонецПроцедуры

// В процедурах УСН используется ДокументОбъект, при этом в отложенных расчетов документ не меняется
// и объект не получается, поэтому подготовим структуру с аналогичными реквизитами.
//
Функция ДокументОбъектУСН(Параметры) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Ссылка", 		Параметры.Регистратор);
	Результат.Вставить("Регистратор", 	Параметры.Регистратор);
	Результат.Вставить("Движения", 		Параметры.Движения);
	Результат.Вставить("Имя", 			Параметры.ИмяДокумента);
	Результат.Вставить("Дата", 			Параметры.Период);
	Результат.Вставить("Организация", 	Параметры.Организация);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДвиженийРегистров

// Возвращает структуру с наборами записей регистров, которые изменяются при восстановлении отложеных расчетов.
//
Функция НовыеДвижения(Параметры)

	// Период расчета может относится к нескольким месяцам,
	// поэтому получим настройки за весь период.
	ПрименяетсяУСНДоходыЗаПериод = УчетнаяПолитика.ПрименяетсяУСНДоходыЗаПериод(
		Параметры.Организация, Параметры.ДатаНачала, Параметры.ДатаОкончания);

	ПрименяетсяУСНПатентЗаПериод = УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(
		Параметры.Организация, Параметры.ДатаНачала, Параметры.ДатаОкончания);

	Движения = Новый Структура(); // Ключ - имя регистра, значение - набор записей.

	Движения.Вставить("Хозрасчетный", РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());
	
	Если ПрименяетсяУСНДоходыЗаПериод ИЛИ ПрименяетсяУСНПатентЗаПериод Тогда
		Движения.Вставить("КнигаУчетаДоходовИРасходов", РегистрыНакопления.КнигаУчетаДоходовИРасходов.СоздатьНаборЗаписей());
		Движения.Вставить("КнигаУчетаДоходовПатент", 	РегистрыНакопления.КнигаУчетаДоходовПатент.СоздатьНаборЗаписей());
	КонецЕсли;
	
	Возврат Движения;

КонецФункции

// Читает из базы ранее сформированные движения текущего документа.
//
Процедура ПрочитатьДвиженияДокумента(Параметры)
	
	Для Каждого КлючИЗначение Из Параметры.Движения Цикл
		НаборЗаписей = КлючИЗначение.Значение;
		НаборЗаписей.Отбор.Регистратор.Установить(Параметры.Регистратор);
		Если ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
			// Не все документы могут являться регистраторами для всех регистров, поэтому проверяем перед чтением.
			НаборЗаписей.Прочитать();
		Иначе
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает движения текущего документа в базу после расчета.
//
Процедура ЗаписатьДвиженияДокумента(Параметры, Отказ)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Для Каждого КлючИЗначение Из Параметры.Движения Цикл
		НаборЗаписей = КлючИЗначение.Значение;
		Если ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
			// Не все документы могут являться регистраторам для всех регистров, поэтому проверяем перед чтением.
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает объект управляемой блокировки данных, настроенный для блокирования
// данных используемых в ходе отложенных расчетов.
//
Функция НоваяБлокировкаДанных(Параметры)

	БлокировкаДанных = Новый БлокировкаДанных;

	// Документ-регистратор
	ЭлементБлокировки= БлокировкаДанных.Добавить("Документ." + Параметры.ИмяДокумента);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Параметры.Регистратор);

	// Наборы записей всех регистров, которые могут меняться.
	Для Каждого КлючИЗначение Из Параметры.Движения Цикл
		НаборЗаписей = КлючИЗначение.Значение;
		НаборЗаписей.Отбор.Регистратор.Установить(Параметры.Регистратор);
		Если ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение) Тогда
			// Не все документы могут являться регистраторам для всех регистров, поэтому проверяем перед установкой.
			МетаданныеНабора = МетаданныеОбъекта(Параметры, НаборЗаписей);
			ЭлементБлокировки = БлокировкаДанных.Добавить(МетаданныеНабора.ПолноеИмя() + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Параметры.Регистратор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат БлокировкаДанных;

КонецФункции

#КонецОбласти

#Область КешированиеДанных

// Возвращает кешированные настройки учетной политики.
//
Функция УчетнаяПолитикаИзКеша(Параметры)

	Месяц = НачалоМесяца(Параметры.Период);
	
	ЗаписьУчетнойПолитики = Параметры.КешУчетнаяПолитика[Месяц];

	Если ЗаписьУчетнойПолитики = Неопределено Тогда
		ЗаписьУчетнойПолитики = Новый Структура();

		ЗаписьУчетнойПолитики.Вставить("Существует", 
			УчетнаяПолитика.Существует(Параметры.Организация, Параметры.Период));

		ЗаписьУчетнойПолитики.Вставить("ПрименяетсяУСН", 
			УчетнаяПолитика.ПрименяетсяУСН(Параметры.Организация, Параметры.Период));

		ЗаписьУчетнойПолитики.Вставить("ПрименяетсяУСНДоходы", 
			УчетнаяПолитика.ПрименяетсяУСНДоходы(Параметры.Организация, Параметры.Период));

		ЗаписьУчетнойПолитики.Вставить("ПрименяетсяУСНПатент", 
			УчетнаяПолитика.ПрименяетсяУСНПатент(Параметры.Организация, Параметры.Период));

		Параметры.КешУчетнаяПолитика.Вставить(Месяц, ЗаписьУчетнойПолитики);
	КонецЕсли;

	Возврат ЗаписьУчетнойПолитики;

КонецФункции

// Возвращает кешированные настройки для счета.
//
Функция СвойстваСчета(Параметры, Счет)

	СвойстваСчета = Параметры.КешСвойстваСчета[Счет];
	
	Если СвойстваСчета = Неопределено Тогда
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
		Параметры.КешСвойстваСчета.Вставить(Счет, СвойстваСчета);
	КонецЕсли;
	
	Возврат СвойстваСчета;

КонецФункции

// Возвращает метаданные для переданного объекта.
//
Функция МетаданныеОбъекта(Параметры, Объект)

	Если Объект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТипОбъекта = ТипЗнч(Объект);
	
	Результат = Параметры.КешМетаданные[ТипОбъекта];
	Если Результат = Неопределено Тогда
		Результат = Метаданные.НайтиПоТипу(ТипОбъекта);
		Параметры.КешМетаданные.Вставить(ТипОбъекта, Результат);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает Истина, если переданный счет является счетов расчетов с контрагентами,
// обрабатываемом в механизме отложенных расчетов.
//
Функция СчетПоддерживаетОтложенныеРасчеты(Параметры, Счет)

	Если Параметры.КешСчетаВзаиморасчетов.Количество() = 0 Тогда
		СчетаВзаиморасчетов = СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение(Параметры.МенеджерВременныхТаблиц);
		Для Каждого СчетВзаиморасчетов Из СчетаВзаиморасчетов Цикл
			Параметры.КешСчетаВзаиморасчетов.Вставить(СчетВзаиморасчетов, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Параметры.КешСчетаВзаиморасчетов[Счет] <> Неопределено;

КонецФункции

// Возвращает Истина, если среди счетов есть хоть один счет расчетов с контрагентами,
// обрабатываемый в механизме отложенных расчетов.
//
Функция ЕстьСчетаПоддерживающиеОтложенныеРасчеты(Параметры, СчетаРасчетов, СчетаАвансов = Неопределено)
	
	Если СчетаАвансов = Неопределено Тогда
		СчетаПроверкиОтложенныхРасчетов = СчетаРасчетов;
	Иначе
		СчетаПроверкиОтложенныхРасчетов = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СчетаРасчетов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаПроверкиОтложенныхРасчетов, СчетаАвансов, Истина);
	КонецЕсли;
	
	Для каждого Счет Из СчетаПроверкиОтложенныхРасчетов Цикл
		Если СчетПоддерживаетОтложенныеРасчеты(Параметры, Счет) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает соответствие с типами документов, которые поддерживают отложенные расчеты с контрагентами.
//
Функция КешДокументовПоддерживающихОтложенныеРасчетыСКонтрагентами()

	Результат = Новый Соответствие;
	ТипыДокументов = Метаданные.ОпределяемыеТипы.ДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами.Тип.Типы();
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		Результат.Вставить(ТипДокумента, Истина);
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Отложенные расчеты с контрагентами'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Добавляет новое сообщение для вывода пользователю.
//
// Параметры:
//	Параметры - Структура - Параметры расчета.
//	СсылкаНаОбъект - Произвольный - Ссылка на объект, к которому относится сообщение.
//	ТекстПричины - Строка - Текстовое описание причины сообщения.
//	ИнформацияОбОшибке - ИнформацияОбОшибке, Булево - Значение, возвращенное платформенной функцией ИнформацияОбОшибке(),
//						 либо Истина, если пользовательская ошибка.
//	АвтоматическиФормироватьТекстСообщения - Булево - Истина - если необходимо автоматически собрать текст сообщения.
//													  Ложь - Будет использован только ТекстПричины.
//
Процедура ДобавитьСообщениеПользователю(Параметры, СсылкаНаОбъект, ТекстПричины, ИнформацияОбОшибке = Ложь)

	ЭтоОшибка = ИнформацияОбОшибке <> Ложь;

	Если ЗначениеЗаполнено(ТекстПричины) Тогда
		ТекстСообщения = ТекстПричины + " ";
	Иначе
		ТекстСообщения = "";
	КонецЕсли;

	Если ЭтоОшибка И ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ПодробноеПредставление	= ТекстСообщения + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	Иначе
		ПодробноеПредставление	= ТекстСообщения;
	КонецЕсли;

	Если ЭтоОшибка Тогда
		// Сохраним в журнале регистрации.
		ЗаписьЖурналаРегистрации(
			СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеОбъекта(Параметры, СсылкаНаОбъект),
			СсылкаНаОбъект,
			ПодробноеПредставление)
	КонецЕсли;

	НовоеСообщение = Новый СообщениеПользователю();
	НовоеСообщение.Текст = ПодробноеПредставление;

	ПроведениеСервер.ДобавитьСообщениеПользователю(
		Параметры.РезультатРасчета.Сообщения,
		Параметры.Организация,
		НовоеСообщение,
		СсылкаНаОбъект,
		Параметры.Период,
		ЭтоОшибка);

КонецПроцедуры

// Формирует и сохраняет во временное хранилище отчет с сообщениями в процессе расчета.
//
Процедура СформироватьОтчетПоСообщениямПользователю(Параметры)

	Если НЕ ЭтоАдресВременногоХранилища(Параметры.ПараметрыРасчета.АдресХранилищаСОшибками) Тогда
		// Вызывающая процедура не передала адрес для сохранения ошибок.
		Возврат;
	КонецЕсли;

	РезультатРасчета = Параметры.РезультатРасчета;

	Если РезультатРасчета.Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОтчета = ПроведениеСервер.НовыеПараметрыОтчетаССообщениямиПользователю(
		"АктуализацияРасчетовСКонтрагентами",
		РезультатРасчета.Сообщения);
	ПараметрыОтчета.ДатаНачала 			= РезультатРасчета.ДатаНачала;
	ПараметрыОтчета.ДатаОкончания 		= РезультатРасчета.ДатаОкончания;
	Если ЗначениеЗаполнено(Параметры.ПараметрыРасчета.Документ) Тогда
		ПараметрыОтчета.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'Актуализация расчетов из %1'"), Параметры.ПараметрыРасчета.Документ);
	КонецЕсли;
	ПараметрыОтчета.АктуализированоДоговоров = РезультатРасчета.УспешноОбработаноДоговоров;
	ПараметрыОтчета.НеУдалосьАктуализировать = РезультатРасчета.КоличествоДоговоровСОшибками;
	
	ТабДокумент = ПроведениеСервер.ВывестиСообщенияПользователю(ПараметрыОтчета);
	ПроведениеСервер.ПоместитьСообщенияПользователюВоВременноеХранилищеДляФормыОшибок(
		РезультатРасчета.Сообщения,
		ТабДокумент,
		Параметры.ПараметрыРасчета.АдресХранилищаСОшибками);

КонецПроцедуры

#КонецОбласти

#Область ФоновоеВыполнение

// Возвращает наименование фонового задания актуализации отложенных расчетов с контрагентами.
//
Функция НаименованиеФоновогоЗадания()

	Возврат НСтр("ru = 'Актуализация расчетов с контрагентами'");

КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

Функция ПодготовитьПараметрыОтложенныеРасчетыСКонтрагентами(ТаблицаОтложенныеРасчетыСКонтрагентами)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ОтложенныеРасчетыСКонтрагентами

	СписокОбязательныхКолонок = ""
	+ "Дата,"      				// <Дата> - дата документа
	+ "Контрагент,"      		// <СправочникСсылка.Контрагент> - контрагент
	+ "ДоговорКонтрагента,"    	// <СправочникСсылка.ДоговорКонтрагента> - договор контрагента
	+ "ВалютаВзаиморасчетов,"   // <СправочникСсылка.Валюты> - валюта взаиморасчетов по договору
	+ "ВидДоговора"             // <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> - вид договора с контрагентом
	;

	Параметры.Вставить("ОтложенныеРасчетыСКонтрагентами", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаОтложенныеРасчетыСКонтрагентами, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ВыгрузитьЗаполненныеЗначенияКолонки(Таблица, ИмяКолонки)

	Результат = ОбщегоНазначения.ВыгрузитьКолонку(Таблица, ИмяКолонки, Истина);
	
	Счетчик = Результат.ВГраница();
	Пока Счетчик >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(Результат[Счетчик]) Тогда
			Результат.Удалить(Счетчик);
		КонецЕсли;
		Счетчик = Счетчик - 1;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Возвращает структуру с именами документов, которые входят в состав
// определяемого типа ДокументыПоддерживающиеОтложенныеРасчетыСКонтрагентами и регистрируются
// в регистре РасчетыСКонтрагентамиОтложенноеПроведение, но при этом сами по себе 
// не требуют восстановление отложенных расчетов, т.к. при проведении не обращаются к остаткам регистров.
//
Функция ДокументыНеТребующиеВосстановленияОтложенныхРасчетов()

	Результат = Новый Структура;
	Результат.Вставить("ВводНачальныхОстатков");
	Результат.Вставить("ОперацияБух");
	Результат.Вставить("НачислениеПеней");
	Результат.Вставить("ПередачаЗадолженностиНаФакторинг");
	Результат.Вставить("ПередачаТоваров");
	Результат.Вставить("ПутевойЛист");

	Если Метаданные.Документы.Найти("АвизоРасчетыВходящее") <> Неопределено Тогда
		// Документы присутствуют только в КОРП-версии.
		Результат.Вставить("АвизоРасчетыВходящее");
		Результат.Вставить("АвизоРасчетыИсходящее");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция НаправлениеДвиженияВыбытие()

	Возврат "Выбытие";

КонецФункции

Функция НаправлениеДвиженияПоступление()

	Возврат "Поступление";

КонецФункции

Процедура ЗаполнитьДоговорыПоНаборуПроводок(ТаблицаДоговоры, Проводки, МенеджерВременныхТаблиц)

	Если Проводки.Количество() = 0 Тогда
		// Нет данных для регистрации отложенных расчетов.
		Возврат;
	КонецЕсли;
	
	ПерваяПроводка = Проводки[0];
	Если НЕ ПерваяПроводка.Активность Тогда
		// Если у набора отключена активность (отключается сразу для всех записей набора),
		// то по такому документу необходимо отметить к исключению из расчетов существующие в 
		// регистре сведений договоры, сам набор можно не обрабатывать.
		Возврат;
	КонецЕсли;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	ВидСубконтоКонтрагенты 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоДоговоры 	= ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Контрагент");
	Отбор.Вставить("ДоговорКонтрагента");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	СчетаВзаиморасчетов = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
	|ИЗ
	|	ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СчетаВзаиморасчетов.Вставить(Выборка.Счет, Истина);
	КонецЦикла;
	
	ВидыДоговоровОтложенногоПроведения = ВидыДоговоровОтложенногоПроведения();
	
	МассивДтКт = Новый Массив(2);
	МассивДтКт[0] = "Дт";
	МассивДтКт[1] = "Кт";
	
	Для Каждого Проводка Из Проводки Цикл
	
		Для Каждого СуффиксДтКт Из МассивДтКт Цикл
		
			Счет = Проводка["Счет" + СуффиксДтКт];
		
			Если НЕ ЗначениеЗаполнено(Счет)
				ИЛИ СчетаВзаиморасчетов[Счет] = Неопределено Тогда
				// Не является счетом взаиморасчетов, поддерживающим отложенное проведение.
				Продолжить;
			КонецЕсли;
			
			Субконто = Проводка["Субконто" + СуффиксДтКт];
			Контрагент         = Субконто[ВидСубконтоКонтрагенты];
			ДоговорКонтрагента = Субконто[ВидСубконтоДоговоры];
			
			Если НЕ ЗначениеЗаполнено(Контрагент) 
			 Или НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Продолжить;
			КонецЕсли;

			// Проверяем договор, если такого там еще нет.
			Отбор.Контрагент = Контрагент;
			Отбор.ДоговорКонтрагента = ДоговорКонтрагента;
			
			НайденныеСтроки = ТаблицаДоговоры.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговора");
			Если ВидыДоговоровОтложенногоПроведения.Найти(ВидДоговора) = Неопределено Тогда
				// Не является видом договора, поддерживающим отложенное проведение.
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока 					 = ТаблицаДоговоры.Добавить();
			НоваяСтрока.Дата				 = Проводка.Период;
			НоваяСтрока.Контрагент 			 = Контрагент;
			НоваяСтрока.ДоговорКонтрагента 	 = ДоговорКонтрагента;
			// Отложенное проведение поддерживается только для договоров в рублях.
			НоваяСтрока.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
			// Отложенное проведение поддерживается только для видов договоров без расчетов по комиссионной схеме.
			НоваяСтрока.ВидДоговора          = ВидДоговора;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьДоговорыПоПроводкамИзРегистраБухгалтерии(ТаблицаДоговоры, Регистратор, МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор",            Регистратор);
	Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ВидСубконтоДоговоры",    ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 = &ВидСубконтоКонтрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 = &ВидСубконтоКонтрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 = &ВидСубконтоКонтрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|	КОНЕЦ КАК КонтрагентДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 = &ВидСубконтоДоговоры
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 = &ВидСубконтоДоговоры
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 = &ВидСубконтоДоговоры
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
	|	КОНЕЦ КАК ДоговорКонтрагентаДт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоКонтрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоКонтрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоКонтрагенты
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|	КОНЕЦ КАК КонтрагентКт,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоДоговоры
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоДоговоры
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоДоговоры
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|	КОНЕЦ КАК ДоговорКонтрагентаКт
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И Счет В
	|					(ВЫБРАТЬ
	|						ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение.Счет
	|					ИЗ
	|						ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение КАК ВТ_СчетаВзаиморасчетовПоддерживающиеОтложенноеПроведение),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Договоры.Период КАК Период,
	|	ВТ_Договоры.Организация КАК Организация,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Договоры.КонтрагентДт КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентДт,
	|	ЕСТЬNULL(ДоговорыКонтрагентовДт.Ссылка, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагентаДт,
	|	ДоговорыКонтрагентовДт.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовДт,
	|	ДоговорыКонтрагентовДт.ВидДоговора КАК ВидДоговораДт,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ВТ_Договоры.КонтрагентКт КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентКт,
	|	ЕСТЬNULL(ДоговорыКонтрагентовКт.Ссылка, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагентаКт,
	|	ДоговорыКонтрагентовКт.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетовКт,
	|	ДоговорыКонтрагентовКт.ВидДоговора КАК ВидДоговораКт
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентовДт
	|		ПО ВТ_Договоры.ДоговорКонтрагентаДт = ДоговорыКонтрагентовДт.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентовКт
	|		ПО ВТ_Договоры.ДоговорКонтрагентаКт = ДоговорыКонтрагентовКт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Договоры";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Отбор = Новый Структура();
	Отбор.Вставить("Контрагент");
	Отбор.Вставить("ДоговорКонтрагента");
	
	МассивДтКт = Новый Массив(2);
	МассивДтКт[0] = "Дт";
	МассивДтКт[1] = "Кт";
	
	Пока Выборка.Следующий() Цикл
	
		Для Каждого СуффиксДтКт Из МассивДтКт Цикл
		
			Контрагент           = Выборка["Контрагент" + СуффиксДтКт];
			ДоговорКонтрагента   = Выборка["ДоговорКонтрагента" + СуффиксДтКт];
			ВалютаВзаиморасчетов = Выборка["ВалютаВзаиморасчетов" + СуффиксДтКт];
			ВидДоговора          = Выборка["ВидДоговора" + СуффиксДтКт];
			
			Если НЕ ЗначениеЗаполнено(Контрагент)
				Или НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор.Контрагент = Контрагент;
			Отбор.ДоговорКонтрагента = ДоговорКонтрагента;
			
			НайденныеСтроки = ТаблицаДоговоры.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				НайденнаяСтрока.Дата = Мин(НайденнаяСтрока.Дата, Выборка.Период);
			Иначе
				НоваяСтрока = ТаблицаДоговоры.Добавить();
				НоваяСтрока.Дата 					= Выборка.Период;
				НоваяСтрока.Организация				= Выборка.Организация;
				НоваяСтрока.Контрагент 				= Контрагент;
				НоваяСтрока.ДоговорКонтрагента 		= ДоговорКонтрагента;
				НоваяСтрока.ВалютаВзаиморасчетов	= ВалютаВзаиморасчетов;
				НоваяСтрока.ВидДоговора	            = ВидДоговора;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

Функция ЕстьДанныеВТаблицах(СтруктураТаблиц)

	Результат = Ложь;
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		Таблица = КлючИЗначение.Значение;
		Если Таблица = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат = Таблица.Количество() > 0;
		Если Результат Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ЕстьГруппыСправочника(СсылкиНаОбъекты)

	Если НЕ ЗначениеЗаполнено(СсылкиНаОбъекты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(СсылкиНаОбъекты);
	
	Если ТипСсылки = Тип("Массив") ИЛИ ТипСсылки = Тип("ФиксированныйМассив") Тогда
		ТипСправочника = ТипЗнч(СсылкиНаОбъекты[0]);
		
	ИначеЕсли ТипСсылки = Тип("СписокЗначений") Тогда
		ТипСправочника = ТипЗнч(СсылкиНаОбъекты[0].Значение);
		
	Иначе
		ТипСправочника = ТипСсылки;
	
	КонецЕсли;

	МетаданныеСправочника = Метаданные.НайтиПоТипу(ТипСправочника);
	Если МетаданныеСправочника = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяСправочника = МетаданныеСправочника.Имя;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкиНаОбъекты", СсылкиНаОбъекты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спр.Ссылка
	|ИЗ
	|	&ИмяСправочника КАК Спр
	|ГДЕ
	|	Спр.ЭтоГруппа
	|	И Спр.Ссылка В (&СсылкиНаОбъекты)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

// Возвращает таблицу значений, содержащую только строки исходной таблицы с указанным договором.
//
Функция СкопироватьСтрокиТаблицыПоДоговору(ИсходнаяТаблица, ДоговорКонтрагента) Экспорт

	Отбор = Новый Структура();
	Отбор.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);

	Возврат ИсходнаяТаблица.Скопировать(Отбор);

КонецФункции

#КонецОбласти
