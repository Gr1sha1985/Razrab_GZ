////////////////////////////////////////////////////////////////////////////////
// Подсистема "Бизнес-сеть".
// ОбщийМодуль.БизнесСеть.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды

// Выполняет проверку наличия новых документов в сервисе, с оповещением пользователю, в случае их появления.
// Также, если был передан параметр ГруппаФормы, на форме появляется гиперссылка с уведомлением.
// При нажатии на оповещение или гиперссылку открывается форма списка входящих документов "1С:Бизнес-сеть".
//  Вызывается из обработчика события формы ПриСозданииНаСервере.
//  Обработчик см. БизнесСетьКлиент.ПодобратьДокументыИзСервисаБизнесСеть.
//
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма списка документов, из обработчика события которой происходит вызов процедуры.
//  ВидыДокументов - Массив       - массив перечислений типа Перечисление.ВидыЭД.
//  ГруппаФормы    - ЭлементФормы - группа формы для размещения гиперссылки. Если параметр не задан, гиперссылка размещаться на форме не будет.
//
Процедура ПодключитьОповещениеОНовыхДокументахВСервисе(Форма, ВидыДокументов, ГруппаФормы = Неопределено) Экспорт
	
	// Добавление служебных реквизитов формы.
	НовыеРеквизитыФормы = Новый Массив;
	
	ИмяРеквизитаИспользованияПодсистемы = БизнесСетьКлиентСервер.ИмяРеквизитаИспользоватьОбменБизнесСеть();
	РеквизитИспользованияПодсистемы = Новый РеквизитФормы(ИмяРеквизитаИспользованияПодсистемы,
		Новый ОписаниеТипов("Булево"));
	НовыеРеквизитыФормы.Добавить(РеквизитИспользованияПодсистемы);
	
	ИмяРеквизитаОперации = БизнесСетьКлиентСервер.ИмяРеквизитаОперацииПодбораДокументовИзСервиса();
	РеквизитОперации = Новый РеквизитФормы(ИмяРеквизитаОперации, Новый ОписаниеТипов("Неопределено"));
	НовыеРеквизитыФормы.Добавить(РеквизитОперации);
	
	ИмяРеквизитаВидаДокумента = БизнесСетьКлиентСервер.ИмяРеквизитаВидаДокументаСервиса();
	РеквизитВидаДокумента = Новый РеквизитФормы(ИмяРеквизитаВидаДокумента,
		Новый ОписаниеТипов("СписокЗначений"));
		
	НовыеРеквизитыФормы.Добавить(РеквизитВидаДокумента);
	
	Форма.ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ВидДокумента Из ВидыДокументов Цикл
		Если ВидыДокументовСервиса().НайтиПоЗначению(ВидДокумента) = Неопределено Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Вид документа ""%1"" не найден в сервисе ""1С:Бизнес-сеть"".'"), ВидДокумента);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;
	
	Если ГруппаФормы <> Неопределено Тогда
		СоздатьГиперссылкуПодбораДокументовИзСервиса(Форма, ГруппаФормы);
	КонецЕсли;
	
	// Создание и запуск фонового задания для актуализации данных.
	ПараметрыОбновления = Новый Структура;
	ПараметрыОбновления.Вставить("ИдентификаторФормы", Форма.УникальныйИдентификатор);
	ПараметрыОбновления.Вставить("ВидыДокументов",     ВидыДокументов);
	
	Операция = ОбновитьИнформациюОНовыхДокументахВСервисеАсинхронно(ПараметрыОбновления);
	
	// Сохранение служебной информации в данных формы.
	Форма[ИмяРеквизитаИспользованияПодсистемы] = Истина;
	Форма[ИмяРеквизитаОперации]                = Операция;
	Форма[ИмяРеквизитаВидаДокумента].ЗагрузитьЗначения(ВидыДокументов);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСпискамиПрикладныхОбъектов

// Добавляет в текст запроса динамического списка колонку ПодключенКБизнесСети (Булево).
//  Данный признак заполнен для контрагентов, зарегистрированных в сервисе 1С:Бизнес-сеть.
//
// Параметры:
//  ДинамическийСписок - ДинамическийСписок - Список, в который требуется добавить признак.
//  ИмяПоляСсылка      - Строка             - Имя поля-ссылки на контрагента.
//
Процедура ДобавитьПризнакПодключенияКонтрагентаКБизнесСети(ДинамическийСписок, ИмяПоляСсылка) Экспорт
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ДинамическийСписок.ТекстЗапроса);
	
	Запрос = СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество() - 1];
	
	КолонкаСсылки = Запрос.Колонки.Найти(ИмяПоляСсылка);
	
	Если КолонкаСсылки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексКолонки     = Запрос.Колонки.Индекс(КолонкаСсылки);
	КоличествоКолонок = Запрос.Колонки.Количество();
	
	Для каждого ОператорЗапроса Из Запрос.Операторы Цикл
		
		ИсточникКонтрагентыБС = ОператорЗапроса.Источники.Добавить(Метаданные.РегистрыСведений.КонтрагентыБизнесСеть.ПолноеИмя(),
			"КонтрагентыБизнесСеть");
		ИсточникКонтрагентыБС.Соединения.Добавить(ОператорЗапроса.Источники[0]);
		
		Соединение = ИсточникКонтрагентыБС.Соединения[ИсточникКонтрагентыБС.Соединения.Количество() - 1];
		Соединение.ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
		Соединение.Условие = Новый ВыражениеСхемыЗапроса(СтрШаблон("%1 = КонтрагентыБизнесСеть.Контрагент", 
			Строка(ОператорЗапроса.ВыбираемыеПоля[ИндексКолонки])));
		
		ОператорЗапроса.ВыбираемыеПоля.Добавить(
		"ВЫБОР
		|	КОГДА КонтрагентыБизнесСеть.Идентификатор ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|	ИНАЧЕ ИСТИНА
		|КОНЕЦ", КоличествоКолонок);
		
	КонецЦикла;
	
	Запрос.Колонки[КоличествоКолонок].Псевдоним = "ПодключенКБизнесСети";
	
	ДинамическийСписок.УстановитьОбязательноеИспользование("ПодключенКБизнесСети", Истина);
	
	ДинамическийСписок.ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСQRКодамиВДокументах

// Возвращает признак включения опции выводить QR-код на печатных формах документов.
//
// Возвращаемое значение:
//  Булево - признак включения опции.
//
Функция ВыводитьQRКодНаПечатныхФормахДокументов() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВыводитьQRКодНаПечатныхФормахДокументов");
	
КонецФункции

// Получает QR-коды с публичной временной ссылкой на документ в сервисе 1С:Бизнес-сеть.
// Ссылка активна в течение 3 месяцев со дня последней активации документа.
// Метод рекомендуется вызывать для асинхронного выполнения.
//
// Параметры:
//  ДанныеПоДокументам       - Массив из ДокументСсылка - ссылки на документы-источники.
//  АдресХранилищаРезультата - Строка                   - адрес хранилища контейнера QR-кодов по документам:
//   * Неопределено - возвращается в случае возникновения ошибки при формировании QR-кода.
//     Соответствие - содержит данные:
//     ** Ключ     - ДокументСсылка - ссылка на документ-источника.
//     ** Значение - Структура      - см. БизнесСеть.НовыйДанныеQRКода.
//
Процедура ПолучитьQRКодыПоДокументам(Знач ДанныеПоДокументам, АдресХранилищаРезультата) Экспорт
	
	Отказ                     = Ложь;
	ДанныеQRКодовПоДокументам = Новый Соответствие;
	
	Для Каждого ЭлементКоллекции Из ДанныеПоДокументам Цикл
		
		СсылкаНаДокумент = ЭлементКоллекции.СсылкаНаДокумент;
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("Организация", ЭлементКоллекции.Организация);
		ПараметрыКоманды.Вставить("Идентификатор", СсылкаНаДокумент.УникальныйИдентификатор());
		ПараметрыКоманды.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
		
		ПараметрыВызова = ПараметрыКомандыПолученияQRКода(ПараметрыКоманды);
		Результат = ВыполнитьКомандуСервиса(ПараметрыВызова, Отказ);
		
		Если Результат = Неопределено Или Отказ
			Или ТипЗнч(Результат) <> Тип("Структура")
			Или Не Результат.Свойство("hookId") Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеQRКода = НовыйДанныеQRКода();
		ДанныеQRКода.Идентификатор         = Результат.hookId;
		ДанныеQRКода.ПубличнаяСсылкаQRкода = Результат.shortLine;
		ДанныеQRКода.ИзображениеQRКода     = Base64Значение(Результат.QRCode);
		
		ДанныеQRКодовПоДокументам.Вставить(СсылкаНаДокумент, ДанныеQRКода);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеQRКодовПоДокументам, АдресХранилищаРезультата);
		
КонецПроцедуры

#КонецОбласти

#Область ПроверкаНастроек

// Возвращает признак установки функциональной опции 1С:Бизнес-сеть.
//
// Возвращаемое значение:
//  Булево - признак установки функциональной опции 1С:Бизнес-сеть.
//
Функция ИспользоватьОбменБизнесСеть() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОбменБизнесСеть");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбменДанными

// Выполнение команды сервиса.
//
// Параметры:
//   ПараметрыКоманды - Структура - параметры вызова или имя команды, см. ОписаниеПараметровКомандыСервиса.
//   Отказ            - Булево - признак ошибки выполнения.
//   ТекстОшибки      - Строка - текст ошибки при выполнении команды.
//
// Возврат
//   Строка, Массив, Структура - возвращаемые данные сервиса.
//
Функция ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ, ТекстОшибки = Неопределено) Экспорт
	
	// Проверка отказа заполнения параметров.
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Определение имени сервиса.
	ИмяСервиса = "БизнесСеть";
	Если Не ПустаяСтрока(ПараметрыКоманды.Сервис) Тогда
		ИмяСервиса = ПараметрыКоманды.Сервис;
	КонецЕсли;
		
	// Установка параметров соединения.
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения(ИмяСервиса);

	ПараметрыКоманды.Вставить("ИдентификаторПрограммы", ПараметрыСоединения.ИдентификаторПрограммы);
	
	// СтрокаАутентификации формируется заранее, поскольку может быть обращение к сервису
	СтрокаАутентификации = СтрокаАутентификацииДляВыполненияКомандыСервиса(ПараметрыКоманды, ПараметрыСоединения, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка времени ожидания ответа.
	Если ПараметрыКоманды.Свойство("Таймаут") И ПараметрыКоманды.Таймаут <> 0 Тогда
		Таймаут = ПараметрыКоманды.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
		
	// Инициализация соединения с сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = НСтр("ru='Отсутствует соединение с сервисом 1С:Бизнес-сеть'")
			+ БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации();
		Если ВыводитьПользователюСообщениеОбОшибках(ПараметрыКоманды) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		Иначе
			Отказ = Истина;
		КонецЕсли;
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ПараметрыКоманды.Адрес);
	
	Если ПараметрыКоманды.Метод = "GET" Тогда
		Запрос.Заголовки.Вставить("Accept", ПараметрыКоманды.ТипКонтента);
	Иначе
		Запрос.Заголовки.Вставить("Content-Type", ПараметрыКоманды.ТипКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		Запрос.Заголовки.Вставить("Authorization", СтрокаАутентификации);
	КонецЕсли;
	
	// Установка заголовков.
	Если ПараметрыКоманды.Свойство("Заголовки") Тогда
		Для Каждого ПараметрЗаголовка Из ПараметрыКоманды.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка данных.
	Если ЗначениеЗаполнено(ПараметрыКоманды.Данные) Тогда
		Если ТипЗнч(ПараметрыКоманды.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ПараметрыКоманды.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ПараметрыКоманды.Данные);
		КонецЕсли;
	КонецЕсли;
	
	РезультатВыполнения = ВыполнитьHTTPМетодСервиса(Соединение, Запрос, ПараметрыСоединения, ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РезультатВыполнения.КодСостояния = 401 И ЗначениеЗаполнено(СтрокаАутентификации) Тогда // истек срок токена доступа
		
		ЗаполнитьАутентификациюПоШаблону = Истина;
		Если ПараметрыКоманды.Свойство("ЗаполнитьАутентификациюПоШаблону") Тогда
			ЗаполнитьАутентификациюПоШаблону = ПараметрыКоманды.ЗаполнитьАутентификациюПоШаблону;
		КонецЕсли;

		СтрокаАутентификации = СтрокаАутентификации(ПараметрыКоманды.ИдентификаторОрганизации, Истина, Отказ, ЗаполнитьАутентификациюПоШаблону);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;

		Запрос.Заголовки.Вставить("Authorization", СтрокаАутентификации);
		
		РезультатВыполнения = ВыполнитьHTTPМетодСервиса(Соединение, Запрос, ПараметрыСоединения, ПараметрыКоманды, Отказ);
		
		Если РезультатВыполнения.КодСостояния = 401 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
			ПодробныйТекстОшибки = ТекстОшибкиСервисаИзДанныхОтвета(РезультатВыполнения.КодСостояния,
																	ОписаниеОшибки,
																	ПараметрыКоманды,
																	ПараметрыСоединения,
																	РезультатВыполнения.ДанныеСервиса);
			
			Если ВыводитьПользователюСообщениеОбОшибках(ПараметрыКоманды) Тогда
				ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
					ПодробныйТекстОшибки, ОписаниеОшибки, "БизнесСеть");
			Иначе
				ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ПодробныйТекстОшибки, "БизнесСеть");
			КонецЕсли;
			
			Возврат Неопределено;
			
		ИначеЕсли Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыКоманды.КодСостояния = РезультатВыполнения.КодСостояния;
	Данные                        = РезультатВыполнения.ДанныеСервиса;

	Результат = ОбработатьОтветСервиса(
		ПараметрыСоединения, 
		ПараметрыКоманды, 
		ПараметрыКоманды.КодСостояния, 
		Данные, 
		Отказ);
	
	Если Отказ = Истина И ТипЗнч(Результат) = Тип("Строка") Тогда
		ТекстОшибки = Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Адрес соединения URL.
//
// Параметры:
//  Сервер		 - Строка - имя сервера.
//  Порт		 - Число  - порт сервера.
//  Адрес		 - Строка - адрес сервера.
//  Защищенное	 - Булево - признак защищенного соединения.
// 
// Возвращаемое значение:
//  Строка - строка соединения, например "https://1c.ru:80/trade".
//
Функция АдресСоединенияURL(Сервер, Порт, Адрес, Защищенное) Экспорт
	
	Результат = ?(Защищенное, "https://", "http://") + Сервер + ":" + Формат(Порт, "ЧГ=")
		+ ?(Лев(Адрес, 1) = "/", "", "/") + Адрес;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОперацииСервиса

Функция СтрокаАутентификации(ИдентификаторОрганизации, ПринудительноОбновлятьКлючДоступа = Ложь,
		Отказ = Ложь, ЗаполнитьАутентификациюПоШаблону = Истина) Экспорт
	
	Результат = "";
	
	КлючДоступа = КлючДоступаБизнесСети(ИдентификаторОрганизации, ПринудительноОбновлятьКлючДоступа, Отказ);
	
	Если Не ЗначениеЗаполнено(КлючДоступа) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗаполнитьАутентификациюПоШаблону Тогда
		Результат = СтрокаАутентификацииПоШаблону(КлючДоступа.ТокенДоступа);
	Иначе
		Результат = КлючДоступа.ТокенДоступа;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПодключитьОрганизациюПоКодуАктивацииВФоне(ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	Организация  = ПараметрыМетода.Организация;
	КодАктивации = ПараметрыМетода.КодАктивации;
	
	Отказ = Ложь;
	
	ПодключитьОрганизациюПоКодуАктивации(Организация, КодАктивации, Отказ);
	
	Результат = ОписаниеРезультатаПодключенияОрганизацииКСервису(Организация);
	
	Если Не Отказ Тогда
		
		Результат.СтатусПодключения = СтатусыПодключения().Подключена;
		Результат.Идентификатор     = ИдентификаторОрганизации(Организация);
		
		ВключитьИспользованиеОбменаБизнесСети();
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ПодключитьОрганизациюПоТикетуИТСВФоне(ПараметрыМетода, Знач АдресРезультата) Экспорт
	
	Организация = ПараметрыМетода.Организация;
	
	Результат = ОписаниеРезультатаПодключенияОрганизацииКСервису(Организация);
	
	ИдентификаторОрганизации = ИдентификаторОрганизации(Организация);
	
	Результат.Идентификатор = ИдентификаторОрганизации;
	
	Отказ = Ложь;
	
	ПодключитьОрганизациюПоТикетуИТС(ИдентификаторОрганизации, Отказ);
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиПодключенияОрганизации());
		Возврат;
	КонецЕсли;
	
	Результат.СтатусПодключения = СтатусыПодключения().Подключена;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Возвращает данные организаций по идентификаторам Бизнес-сети.
//
// Параметры:
//  ИдентификаторыОрганизаций	 - Массив из Строка - массив идентификаторов.
//  Отказ						 - Булево - признак отказа
// 
// Возвращаемое значение:
//  Массив из Структура - см. ДанныеОрганизацийИзJSON
//
Функция ДанныеОрганизацийПоИдентификаторам(ИдентификаторыОрганизаций, Отказ = Ложь) Экспорт
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ИдентификаторыОрганизаций", ИдентификаторыОрганизаций);
	
	ПараметрыКоманды = ПараметрыКомандыДанныеОрганизацийПоИдентификаторам(ПараметрыМетода);
	ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ДанныеОрганизацийИзJSON(ДанныеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку аутентификации, для выполнения команд сервиса.
//
// Параметры:
//  ПараметрыКоманды	 - Структура - параметры команды сервиса.
//  ПараметрыСоединения	 - Структура - параметры соединения.
//  Отказ				 - Булево - признак отказа.
// 
// Возвращаемое значение:
//  Строка - строка аутентификации.
//
Функция СтрокаАутентификацииДляВыполненияКомандыСервиса(ПараметрыКоманды, ПараметрыСоединения, Отказ) Экспорт
	
	Если ПараметрыКоманды.Аутентификация = Неопределено Тогда
		ТребуетсяАутентификация = ПараметрыСоединения.Аутентификация;
	Иначе
		ТребуетсяАутентификация = ПараметрыКоманды.Аутентификация;
	КонецЕсли;
		
	Результат = "";
	
	Если Не ТребуетсяАутентификация Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьАутентификациюПоШаблону = Истина;
	Если ПараметрыКоманды.Свойство("ЗаполнитьАутентификациюПоШаблону") Тогда
		ЗаполнитьАутентификациюПоШаблону = ПараметрыКоманды.ЗаполнитьАутентификациюПоШаблону;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.ВременныйТокен) Тогда
		
		Результат = ПараметрыКоманды.ВременныйТокен;
		
		Если ЗаполнитьАутентификациюПоШаблону Тогда
			Результат = СтрокаАутентификацииПоШаблону(Результат);
		КонецЕсли;
		
	Иначе
		
		ПроверитьЗаполнитьИдентификаторОрганизации(ПараметрыКоманды, Отказ);
		
		Если Отказ Тогда
			Возврат Результат;
		КонецЕсли;

		Результат = СтрокаАутентификации(ПараметрыКоманды.ИдентификаторОрганизации, Ложь, Отказ, ЗаполнитьАутентификациюПоШаблону);

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список контрагентов, зарегистрированных в Бизнес-сети.
//
// Параметры:
//  Контрагенты	 - Массив - контрагенты.
//  Отказ		 - Булево - признак отказа.
// 
// Возвращаемое значение:
//  Массив - список контрагентов, зарегистрированных в Бизнес-сети.
//
Функция КонтрагентыВБизнесСети(Контрагенты, Отказ) Экспорт
	
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	
	ДанныеКонтрагентов.Колонки.Добавить("Ссылка");
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	
	Для каждого ЭлементКоллекции Из Контрагенты Цикл
		
		НоваяСтрока = ДанныеКонтрагентов.Добавить();
		НоваяСтрока.Ссылка = ЭлементКоллекции;
		
	КонецЦикла;
	
	ЗаполнитьРеквизитыКонтрагентов(ДанныеКонтрагентов);
	
	НатуральныеИдентификаторы = Новый Массив;
	
	Для каждого РеквизитыКонтрагента Из ДанныеКонтрагентов Цикл
		
		ТекстОшибки = "";
		
		Идентификаторы = ИдентификаторыУчастника(РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП,
			РеквизитыКонтрагента.Ссылка, Отказ, ТекстОшибки);
			
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Прервать;
		КонецЕсли;

		ЭлементЗапроса = Новый Структура;
		
		ЭлементЗапроса.Вставить("ИНН", Идентификаторы.ИНН);
		ЭлементЗапроса.Вставить("КПП", Идентификаторы.КПП);
		
		НатуральныеИдентификаторы.Добавить(НатуральныйИдентификаторОрганизации(ЭлементЗапроса));
		
	КонецЦикла;
	
	ДанныеСервиса = ДанныеОрганизацийПоНатуральнымИдентификаторам(НатуральныеИдентификаторы, Отказ);
		
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из ДанныеСервиса Цикл
		
		Отбор = Новый Структура("ИНН, КПП", ЭлементКоллекции.ИНН, ЭлементКоллекции.КПП);
		
		СтрокиДанных = ДанныеКонтрагентов.НайтиСтроки(Отбор);
		
		Если Не ЗначениеЗаполнено(СтрокиДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(СтрокиДанных[0].Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Данные организации из сервиса 1С:Бизнес-сеть.
//
// Параметры:
//  НатуральныеИдентификаторы	 - Строка - см. НатуральныйИдентификаторОрганизации.
//  Отказ						 - Булево - признак отказа.
// 
// Возвращаемое значение:
//  Массив из Структура - данные об организациях.
//
Функция ДанныеОрганизацийПоНатуральнымИдентификаторам(НатуральныеИдентификаторы, Отказ = Ложь) Экспорт
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("НатуральныеИдентификаторы", НатуральныеИдентификаторы);
	
	ПараметрыКоманды = ПараметрыКомандыДанныеОрганизацииПоНатуральномуИдентификатору(ПараметрыМетода);
	ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ДанныеОрганизацийИзJSON(ДанныеСервиса);
	
	Возврат Результат;
	
КонецФункции

// Возвращает натуральный идентификатор организации.
//
// Параметры:
//  Организация	 - ОпределяемыйТип.Организация - ссылка на организацию.
// 
// Возвращаемое значение:
//  Строка - натуральный идентификатор организации.
//
Функция НатуральныйИдентификаторОрганизации(Организация) Экспорт
	
	Если ТипЗнч(Организация) = Тип("Структура") Тогда
		ДанныеОрганизации = Организация;
	Иначе
		ДанныеОрганизации = ДанныеОрганизации(Организация);	
	КонецЕсли;
	
	ДлинаИНН = СтрДлина(СокрЛП(ДанныеОрганизации.ИНН));
	
	Если ДлинаИНН = 10 Тогда
		Результат = СтрШаблон("%1:%2", ДанныеОрганизации.ИНН, ДанныеОрганизации.КПП);
	ИначеЕсли ДлинаИНН = 12 Тогда
		Результат = ДанныеОрганизации.ИНН;
	Иначе
		ВызватьИсключение НСтр("ru = 'Передан некорректный ИНН'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает токен доступа организации и срок его действия.
//
// Параметры:
//  Организация	 - ОпределяемыйТип.Организация - ссылка на организацию.
// 
// Возвращаемое значение:
//  Структура - содержит ключи:
//    * ТокенДоступа - Строка - токен доступа.
//    * СрокДействияТокенаДоступа - Дата - срок действия токена.
//
Функция ТокенДоступаОрганизации(Организация) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТокенДоступа",              "");
	Результат.Вставить("СрокДействияТокенаДоступа", Дата(1,1,1));
	
	ИдентификаторОрганизации = ИдентификаторОрганизации(Организация);
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючДоступа = КлючДоступаБизнесСети(ИдентификаторОрганизации, Ложь, Отказ);
	
	Если Не Отказ Тогда
		ЗаполнитьЗначенияСвойств(Результат, КлючДоступа);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ИдентификаторыКонтрагентов

Процедура АктуализироватьКэшДанныхКонтрагентов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеИдентификаторовКонтрагентовБизнесСети);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начало обновления идентификаторов контрагентов Бизнес-сети'", ОбщегоНазначения.КодОсновногоЯзыка()));
	
	Результат = РегистрыСведений.КонтрагентыБизнесСеть.РезультатАктуализацииКешаКонтрагентов();
	
	ШаблонСообщения = НСтр("ru = 'Окончание обновления идентификаторов контрагентов Бизнес-сети. Обновлено записей - %1. %2'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТекстОшибки = ?(Не Результат.Успешно, НСтр("ru = 'Выполнено с ошибками.'",ОбщегоНазначения.КодОсновногоЯзыка()),"");
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.КоличествоЗаписей, ТекстОшибки);
	
	УровеньЖурнала = ?(Результат.Успешно, УровеньЖурналаРегистрации.Информация, УровеньЖурналаРегистрации.Ошибка);
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), 
		УровеньЖурнала, , ,
		ТекстСообщения);
	
КонецПроцедуры

Функция ИдентификаторыКонтрагентов(Знач Контрагенты, ИспользоватьТолькоКэш = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", НовыйДанныеКонтрагентовБизнесСети());
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("Ошибки", Новый Соответствие);
	
	ДанныеКонтрагентов = Результат.Данные.СкопироватьКолонки();
	ДанныеКонтрагентов.Колонки.Добавить("КонтрагентНайден", Новый ОписаниеТипов("Булево"));
	ДанныеКонтрагентов.Индексы.Добавить("КонтрагентНайден");
	
	Для Каждого Контрагент Из Контрагенты Цикл
		НоваяСтрока = ДанныеКонтрагентов.Добавить();
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.КонтрагентНайден = Ложь;
	КонецЦикла;
	
	// Попытаемся найти контрагентов в локальном хранилище
	НайтиИдентификаторыКонтрагентовВКэшеБизнесСети(ДанныеКонтрагентов);
	
	Результат.Данные = ДанныеКонтрагентов.Скопировать(
		ДанныеКонтрагентов.НайтиСтроки(Новый Структура("КонтрагентНайден", Истина)),
		"Контрагент, Идентификатор");
		
	// Найденные идентификаторы обрабатывать больше не нужно.
	ДанныеКонтрагентов = ДанныеКонтрагентов.Скопировать(
		ДанныеКонтрагентов.НайтиСтроки(Новый Структура("КонтрагентНайден", Ложь)));
		
	ТребуетсяЗапросКСервису = ДанныеКонтрагентов.Количество() > 0;
	Если Не ТребуетсяЗапросКСервису Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если не требуется обновлять локальный кэш - возвращаем только то, что нашли в
	//  в информационной базе
	Если ИспользоватьТолькоКэш Тогда
		Результат.ЕстьОшибки = Истина;
		
		Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
			Результат.Ошибки.Вставить(ДанныеКонтрагента.Контрагент,
				НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибкиСервисНеДоступен(),
					НСтр("ru = 'Не удалось получить данные контрагента из сервиса.'")));
		КонецЦикла;
	
		Возврат Результат;
	КонецЕсли;
	
	// Если в локальном кэше есть не все контрагенты - запрашиваем данные в сервисе
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	
	// Заполним ИНН/КПП по данным информационной базы
	ЗаполнитьНатуральныеИдентификаторыКонтрагентов(ДанныеКонтрагентов);
	
	// Подготовим параметры запроса данных организаций Бизнес Сети
	НекорректныеЗаписи = Новый Массив;
	НатуральныеИдентификаторы = Новый Массив;
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		ТекстОшибки = "";
		Отказ = Ложь;
		КортежИдентификаторов = ИдентификаторыУчастника(
			ДанныеКонтрагента.ИНН, ДанныеКонтрагента.КПП,
			ДанныеКонтрагента.Контрагент, Отказ, ТекстОшибки);
			
		Если Отказ Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.Ошибки.Вставить(
				ДанныеКонтрагента.Контрагент,
				НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибкиСервисНеДоступен(), ТекстОшибки));
			НекорректныеЗаписи.Добавить(ДанныеКонтрагента);
			
			Продолжить;
		КонецЕсли;
		
		НатуральныеИдентификаторы.Добавить(НатуральныйИдентификаторОрганизации(КортежИдентификаторов));
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НатуральныеИдентификаторы) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Записи с некорректными / не заполненными натуральными идентификаторами обрабатывать бессмысленно
	Для Каждого НекорректнаяЗапись Из НекорректныеЗаписи Цикл
		ДанныеКонтрагентов.Удалить(НекорректнаяЗапись);
	КонецЦикла;
	
	// Выполним запрос к сервису Бизнес Сеть
	Отказ = Ложь;
	ДанныеСервиса = ДанныеОрганизацийПоНатуральнымИдентификаторам(НатуральныеИдентификаторы, Отказ);
	Если Отказ Тогда
		Результат.ЕстьОшибки = Истина;
		
		Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
			Результат.Ошибки.Вставить(
				ДанныеКонтрагента.Контрагент,
				НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибкиСервисНеДоступен(),
					НСтр("ru = 'Не удалось получить данные контрагента из сервиса.'")));
		КонецЦикла;
	
		Возврат Результат;
	КонецЕсли;
	
	// Обработаем ответ от сервиса
	Для Каждого ЗаписьСервиса Из ДанныеСервиса Цикл
		Отбор = Новый Структура("ИНН, КПП",
			XMLСтрока(ЗаписьСервиса.ИНН), XMLСтрока(ЗаписьСервиса.КПП));
		
		ЗаписиПоКонтрагенту = ДанныеКонтрагентов.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеКонтрагента Из ЗаписиПоКонтрагенту Цикл
			ДанныеКонтрагента.Идентификатор = ЗаписьСервиса.Идентификатор;
			ДанныеКонтрагента.КонтрагентНайден = Истина;
			
			ЗаполнитьЗначенияСвойств(Результат.Данные.Добавить(), ДанныеКонтрагента);
		КонецЦикла;
	КонецЦикла;
	
	НекорректныеЗаписи = ДанныеКонтрагентов.НайтиСтроки(Новый Структура("КонтрагентНайден", Ложь));
	Если ЗначениеЗаполнено(НекорректныеЗаписи) Тогда
		Результат.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru = 'Контрагент не подключен к Бизнес Сети.'");
		Для Каждого НекорректнаяЗапись Из НекорректныеЗаписи Цикл
			Результат.Ошибки.Вставить(
				НекорректнаяЗапись.Контрагент,
				НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибкиОтсутствуетРегистрацияВБизнесСети(), ТекстОшибки));
			
			ДанныеКонтрагентов.Удалить(НекорректнаяЗапись);
		КонецЦикла;
	КонецЕсли;
	
	// Обновим кэш данных Бизнес Сети
	Отказ = Ложь;
	ТекстОшибки = "";
	РегистрыСведений.КонтрагентыБизнесСеть.ОбновитьКэшДанныхКонтрагентаБизнесСети(ДанныеКонтрагентов, Отказ, ТекстОшибки);
	
	// С точки зрения поиска контрагентов это не ошибка.
	Если Отказ Тогда
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, "БизнесСеть");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КонтрагентыПоИдентификаторам(Знач ИдентификаторыКонтрагентов) Экспорт
	
	ИдентификаторыКонтрагентов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИдентификаторыКонтрагентов);
	
	Результат = Новый Структура;
	Результат.Вставить("Данные", НовыйДанныеКонтрагентовБизнесСети());
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("Ошибки", Новый Соответствие);
	
	ДанныеКонтрагентов = Результат.Данные.СкопироватьКолонки();
	ДанныеКонтрагентов.Колонки.Добавить("КонтрагентНайден", Новый ОписаниеТипов("Булево"));
	ДанныеКонтрагентов.Индексы.Добавить("КонтрагентНайден");
	
	Для Каждого Идентификатор Из ИдентификаторыКонтрагентов Цикл
		Если Не ЗначениеЗаполнено(Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеКонтрагентов.Добавить();
		НоваяСтрока.Идентификатор = Идентификатор;
		НоваяСтрока.КонтрагентНайден = Ложь;
	КонецЦикла;

	// Попытаемся найти контрагентов в локальном хранилище
	НайтиКонтрагентовПоИдентификаторамВКэшеБизнесСети(ДанныеКонтрагентов);
	
	Результат.Данные = ДанныеКонтрагентов.Скопировать(
		ДанныеКонтрагентов.НайтиСтроки(Новый Структура("КонтрагентНайден", Истина)),
		"Контрагент, Идентификатор");
		
	// Найденные идентификаторы обрабатывать больше не нужно.
	ДанныеКонтрагентов = ДанныеКонтрагентов.Скопировать(
		ДанныеКонтрагентов.НайтиСтроки(Новый Структура("КонтрагентНайден", Ложь)));
		
	ТребуетсяЗапросКСервису = ДанныеКонтрагентов.Количество() > 0;
	Если Не ТребуетсяЗапросКСервису Тогда
		Возврат Результат;
	КонецЕсли;
		
	// По идентификаторам получим в сервисе Бизнес Сеть натуральные ключи
	ДанныеКонтрагентов.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(12)));
	ДанныеКонтрагентов.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(9)));
	ДанныеКонтрагентов.Колонки.Добавить("НатуральныеКлючиЗаполнены", Новый ОписаниеТипов("Булево"));
	
	ДанныеКонтрагентов.ЗаполнитьЗначения(Ложь, "НатуральныеКлючиЗаполнены");
	
	Идентификаторы = ДанныеКонтрагентов.ВыгрузитьКолонку("Идентификатор");
	
	Отказ = Ложь;
	ДанныеСервиса = ДанныеОрганизацийПоИдентификаторам(Идентификаторы, Отказ);
	
	Если Отказ Тогда
		Результат.ЕстьОшибки = Истина;
		
		ТекстОшибки = НСтр("ru='Не удалось получить ИНН/КПП из сервиса.'");
		Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
			Результат.Ошибки.Вставить(
				ДанныеКонтрагента.Идентификатор,
				НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибкиСервисНеДоступен(), ТекстОшибки));
		КонецЦикла;
		
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЗаписьСервиса Из ДанныеСервиса Цикл
		ДанныеКонтрагента = ДанныеКонтрагентов.Найти(ЗаписьСервиса.Идентификатор);
		Если ДанныеКонтрагента = Неопределено Или Не ЗначениеЗаполнено(ЗаписьСервиса.ИНН) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ЗаписьСервиса, "ИНН,КПП");
		ДанныеКонтрагента.НатуральныеКлючиЗаполнены = Истина;
	КонецЦикла;
	
	// Если по идентификатору не удалось получить данные от сервиса - контрагент не зарегистрирован
	//   или идентификатор не корректен.
	// Такие записи дальше не обрабатываем.
	ОшибочныеЗаписи = ДанныеКонтрагентов.НайтиСтроки(Новый Структура("НатуральныеКлючиЗаполнены", Ложь));
	Если ЗначениеЗаполнено(ОшибочныеЗаписи) Тогда
		Результат.ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='Идентификатор отсутствует в сервисе Бизнес Сеть.'");
		Для Каждого ДанныеКонтрагента Из ОшибочныеЗаписи Цикл
			Результат.Ошибки.Вставить(
				ДанныеКонтрагента.Идентификатор,
				НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибкиОтсутствуетРегистрацияВБизнесСети(), ТекстОшибки));
			
			ДанныеКонтрагентов.Удалить(ДанныеКонтрагента);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеКонтрагентов.Колонки.Удалить("НатуральныеКлючиЗаполнены");
	
	Если ДанныеКонтрагентов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Ищем контрагентов в базе данных по кортежу ИНН + КПП
	НайтиКонтрагентовПоНатуральнымКлючам(ДанныеКонтрагентов);
	
	НеНайденныеЗаписи = ДанныеКонтрагентов.НайтиСтроки(Новый Структура("КонтрагентНайден", Ложь));
	Если ЗначениеЗаполнено(НеНайденныеЗаписи) Тогда
		Результат.ЕстьОшибки = Истина;
		ШаблонТекстаОшибки = 
			НСтр("ru='По %1, полученным от Бизнес Сети, не найдена запись в базе данных.'");
			
		Для Каждого ДанныеКонтрагента Из НеНайденныеЗаписи Цикл
			ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, "ИНН: " + ДанныеКонтрагента.ИНН
				 + ?(Не ПустаяСтрока(ДанныеКонтрагента.КПП), " КПП:" + ДанныеКонтрагента.КПП, ""));
			
			Результат.Ошибки.Вставить(
				ДанныеКонтрагента.Идентификатор,
				НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибкиКонтрагентНеНайденВБазе(), ТекстОшибки));
			
			ДанныеКонтрагентов.Удалить(ДанныеКонтрагента);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		ЗаполнитьЗначенияСвойств(Результат.Данные.Добавить(), ДанныеКонтрагента);
	КонецЦикла;
	
	// Обновим кэш данных Бизнес Сети
	Отказ = Ложь;
	ТекстОшибки = "";
	РегистрыСведений.КонтрагентыБизнесСеть.ОбновитьКэшДанныхКонтрагентаБизнесСети(ДанныеКонтрагентов, Отказ, ТекстОшибки);
	
	// С точки зрения поиска контрагентов это не ошибка.
	Если Отказ Тогда
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ТекстОшибки, "БизнесСеть");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТипОшибкиОтсутствуетРегистрацияВБизнесСети() Экспорт
	
	Возврат "ОтсутствуетРегистрация"
	
КонецФункции

Функция ТипОшибкиСервисНеДоступен() Экспорт
	
	Возврат "СервисНеДоступен"
	
КонецФункции

Функция ТипОшибкиКонтрагентНеНайденВБазе() Экспорт
	
	Возврат "КонтрагентНеНайден"
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПараметрыКоманд

Функция РеквизитыУчастника(ПараметрыМетода, Отказ = Неопределено) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	Если ПараметрыМетода.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыМетода.Ссылка) Тогда
		Если ТипЗнч(ПараметрыМетода.Ссылка) = Метаданные.ОпределяемыеТипы.Организация.Тип.Типы()[0] Тогда
			ПараметрыМетода.ЭтоОрганизация = Истина;
			
			Если Не ЗначениеЗаполнено(ПараметрыМетода.Организация) Тогда
				ПараметрыМетода.Организация = ПараметрыМетода.Ссылка;
			КонецЕсли;
			
			ЗаполнитьРеквизитыОрганизаций(ПараметрыМетода);
			ПараметрыКоманды.Наименование = НСтр("ru = 'Получение профиля организации'");
		ИначеЕсли ТипЗнч(ПараметрыМетода.Ссылка) = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.Типы()[0] Тогда
			ПараметрыМетода.ЭтоКонтрагент = Истина;
			ЗаполнитьРеквизитыКонтрагентов(ПараметрыМетода);
			ПараметрыКоманды.Наименование = НСтр("ru = 'Получение профиля контрагента'");
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
	
	Если ПараметрыМетода.ЭтоОрганизация = Ложь И ПараметрыМетода.ЭтоКонтрагент = Ложь Тогда
		// Если не передан параметр, то считаем что это контрагент.
		ПараметрыМетода.ЭтоКонтрагент = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыМетода.ИНН) Тогда
		Если ПараметрыМетода.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыМетода.Ссылка) Тогда
			ТестСообщения = НСтр("ru = 'Не заполнено свойство ""ИНН"" для ""%1"".'");
			ТестСообщения = СтрШаблон(ТестСообщения, ПараметрыМетода.Ссылка);
		Иначе
			ТестСообщения = НСтр("ru = 'Не заполнено свойство ""ИНН"".'");
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТестСообщения,,,, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(ПараметрыМетода.ИНН, ПараметрыМетода.КПП,
		ПараметрыМетода.Ссылка, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка чтения данных в 1С:Бизнес-сеть:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;

	НатуральныйИдентификатор = НатуральныйИдентификаторОрганизации(ПараметрыМетода);
	
	ДанныеОрганизации = ДанныеОрганизацийПоНатуральнымИдентификаторам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НатуральныйИдентификатор), Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДанныеОрганизации) Тогда
		Результат = ДанныеОрганизации[0]; 
	Иначе
		Результат = Неопределено;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Параметры команды отправить документ.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//   * Получатель     - Ссылка - ссылка на контрагента получателя документа.
//   * Отправитель    - Ссылка - ссылка на организацию отправителя документа.
//   * АдресХранилища - Строка - адрес временного хранилища контейнера электронного документа.
//   * АдресХранилищаПредставления - Строка - адрес временного хранилища файла с представлением документа PDF.
//   * ВидЭД          - Строка - вид электронного документа см. ВидыДокументовСервиса.
//   * Заголовок      - Строка - заголовок электронного документа, например "Товарная накладная 134 от 01.01.2000".
//   * Ссылка         - Ссылка - ссылка на учетный документ.
//   * СопроводительнаяИнформация - Строка - произвольная текстовая информация для получателя.
//   * Сумма          - Число - сумма документа
//   * КонтактноеЛицо    - Строка - контактное лицо отправителя.
//   * Телефон           - Строка - номер телефона отправителя.
//   * ЭлектроннаяПочта  - Строка - адрес электронной почты отправителя.
//   * УведомлятьПоПочте - Булево - признак необходимости уведомления отправителя об изменении статуса
//                                  обработки документа получателем.
//   * ИдентификаторыПредложений - Массив из Строка - идентификаторы торговых предложения сервиса 1С:Торговая площадка.
//  Отказ                - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыОтправитьДокумент(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Отправитель);
	
	ПараметрыПолучатель  = Неопределено;
	ПараметрыОтправитель = Неопределено;
	
	Если ТипЗнч(ПараметрыМетода.Получатель) = Тип("Структура") Тогда
		ПараметрыПолучатель = ПараметрыМетода.Получатель;
	Иначе
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Получатель, ПараметрыПолучатель);
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Отправитель, ПараметрыОтправитель);
	
	ТекстОшибки = "";
	ИдентификаторыОтправителя = ИдентификаторыУчастника(ПараметрыОтправитель.ИНН, ПараметрыОтправитель.КПП,
		ПараметрыМетода.Отправитель, Отказ, ТекстОшибки);
	ИдентификаторыПолучателя = ИдентификаторыУчастника(ПараметрыПолучатель.ИНН, ПараметрыПолучатель.КПП,
		ПараметрыМетода.Получатель, Отказ, ТекстОшибки);

	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка отправки документов через 1С:Бизнес-сеть:'") + " "
			+ ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОрганизации = Новый Структура;
	СтруктураПолучателя = Новый Структура("inn, kpp", ИдентификаторыПолучателя.ИНН, ИдентификаторыПолучателя.КПП);
	СтруктураОтправителя = Новый Структура("inn, kpp", ИдентификаторыОтправителя.ИНН, ИдентификаторыОтправителя.КПП);
		
	СтрокаДвоичныхДанных = Base64Строка(ПараметрыМетода.ДвоичныеДанныеПакета);
	ДанныеОрганизации.Вставить("destinationOrganization", СтруктураПолучателя);
	ДанныеОрганизации.Вставить("sourceOrganization", СтруктураОтправителя);
	ДанныеОрганизации.Вставить("documentDataType", "v8." + XMLСтрока(ПараметрыМетода.ВидЭД)); // Тип документа.
	ДанныеОрганизации.Вставить("documentData",  СтрокаДвоичныхДанных);
	ДанныеОрганизации.Вставить("documentTitle", ПараметрыМетода.Заголовок);
	ДанныеОрганизации.Вставить("documentGuid",  Строка(ПараметрыМетода.Ссылка.УникальныйИдентификатор()));
	ДанныеОрганизации.Вставить("info",          ПараметрыМетода.СопроводительнаяИнформация);
	ДанныеОрганизации.Вставить("moneyAmount",   ПараметрыМетода.Сумма * 100); // Сумма документа в копейках.
	ДанныеОрганизации.Вставить("metaData",      ПараметрыМетода.Ссылка.Метаданные().Имя); // Доп. информация.

	// Добавление представление документа PDF.
	Если ПараметрыМетода.Свойство("ДвоичныеДанныеПредставления") 
		И ЗначениеЗаполнено(ПараметрыМетода.ДвоичныеДанныеПредставления) Тогда
		ДвоичныеДанные = Base64Строка(ПараметрыМетода.ДвоичныеДанныеПредставления);
		Если ДвоичныеДанные <> Неопределено Тогда
			ДанныеОрганизации.Вставить("documentPresentationData", ДвоичныеДанные);
			ДанныеОрганизации.Вставить("documentPresentationDataType", "pdf");
		КонецЕсли;
	КонецЕсли;
	
	ПерсональныеДанные = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыМетода.КонтактноеЛицо) Тогда
		ПерсональныеДанные.Вставить("name", ПараметрыМетода.КонтактноеЛицо);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыМетода.Телефон) Тогда
		ПерсональныеДанные.Вставить("phone", ПараметрыМетода.Телефон);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыМетода.ЭлектроннаяПочта) Тогда
		ПерсональныеДанные.Вставить("email", ПараметрыМетода.ЭлектроннаяПочта);
	КонецЕсли;
	Если ПараметрыМетода.Свойство("УведомлятьПоПочте") Тогда
		ПерсональныеДанные.Вставить("notifyByEmail", ПараметрыМетода.УведомлятьПоПочте);
	КонецЕсли;
	ДанныеОрганизации.Вставить("person", ПерсональныеДанные);
	
	Если ПараметрыМетода.Свойство("ИдентификаторыПредложений") Тогда
		ДанныеОрганизации.Вставить("contextName", "CAMPAIGN"); // Служебное наименование типа.
		ДанныеОрганизации.Вставить("contextIds", ПараметрыМетода.ИдентификаторыПредложений);
	КонецЕсли;
	
	ИдентификаторОснования = ИдентификаторОтправленногоДокументаОснование(ПараметрыМетода);
	Если ИдентификаторОснования <> Неопределено Тогда
		ДанныеОрганизации.Вставить("ancestorId", ИдентификаторОснования);
	КонецЕсли;
	
	Данные = ЗначениеВJSON(ДанныеОрганизации);
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка документа'");
	ПараметрыКоманды.Данные = Данные;
	// Перенаправление через сервис 1С:EDI для вызова метода сервиса 1С:Бизнес-сеть "api/edi/v1/documents"
	ПараметрыКоманды.Адрес = СтрШаблон("/api/%1/legacyDocuments", ПараметрыКоманды.ИдентификаторОрганизации);
	ПараметрыКоманды.ТипКонтента = "application/vnd-1cbn-legacy-doc.v1+json";
	ПараметрыКоманды.Сервис = "EDI";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404,
		СтрШаблон(НСтр("ru = 'Ошибка отправки документа %1.'"), ПараметрыМетода.Заголовок));
	ПараметрыКоманды.ЗаполнитьАутентификациюПоШаблону = Ложь;
	
	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти

#Область ОписаниеПараметров

// Описание контактной информации пользователя.
//
Функция ОписаниеКонтактнойИнформацииПользователя() Экспорт
	
	СтруктураКонтактов = Новый Структура;
	СтруктураКонтактов.Вставить("ФИО", "");
	СтруктураКонтактов.Вставить("ЭлектроннаяПочта", "");
	СтруктураКонтактов.Вставить("Телефон", "");
	
	Возврат СтруктураКонтактов;
	
КонецФункции

// Описание параметров команды сервиса.
//
// Возвращаемое значение:
//  Структура - содержит стандартный набор параметров для выполнения команд сервиса:
//    * Сервис       - Строка - имя сервиса, например, "Рубрикатор", по умолчанию "БизнесСеть".
//    * Наименование - Строка - полное наименование метода.
//    * Адрес        - Строка - адрес URI метода.
//    * Метод        - Строка - метод HTTP соединения, например POST.
//    * Права        - Строка - необходимые права команды bn_user, bn_its.
//    * Данные       - ДвоичныеДанные, Строка - передаваемые данные.
//    * Ошибки       - Соответствие - соответствие ошибок, например "404", "Не найдено".
//    * БлокироватьСообщенияОбОшибках - Булево - блокировка вывода сообщения об ошибках.
//    * ОбработкаРезультата    - Произвольный - описание конвертации данных результата.
//    * РазрешенныеСостояния   - Массив из Число - коды состояний ответа сервиса, отличные от 200, при
//                                       получении которых обработка результата будет продолжена.
//                                       Коды состояний не должны быть указаны в ключе Ошибки.
//
Функция ОписаниеПараметровКомандыСервиса() Экспорт
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Сервис",       "");
	ПараметрыКоманды.Вставить("Наименование", "");
	ПараметрыКоманды.Вставить("Адрес",        "");
	ПараметрыКоманды.Вставить("Метод",        "");
	ПараметрыКоманды.Вставить("Права",        "");
	ПараметрыКоманды.Вставить("Данные",       Неопределено);
	ПараметрыКоманды.Вставить("РазрешенныеСостояния", Новый Массив);
	ПараметрыКоманды.Вставить("Ошибки",               Новый Соответствие);
	ПараметрыКоманды.Вставить("БлокироватьСообщенияОбОшибках", Неопределено);
	ПараметрыКоманды.Вставить("ОбработкаРезультата",           Неопределено);
	ПараметрыКоманды.Вставить("Страница",       0);  // page
	ПараметрыКоманды.Вставить("РазмерСтраницы", 0);  // size
	ПараметрыКоманды.Вставить("ИдентификаторОрганизации", "");
	ПараметрыКоманды.Вставить("ВременныйТокен", ""); // используется для выполнения запросов по токенам, не сохраненных в ИБ
	ПараметрыКоманды.Вставить("Аутентификация", Неопределено); // для некоторых методов, аутентификация может быть не нужна
	ПараметрыКоманды.Вставить("ТипКонтента",   "application/json"); // для некоторых методов нужен свой тип контента
	ПараметрыКоманды.Вставить("КодСостояния",  0); // для анализа после выполнения запроса
	ПараметрыКоманды.Вставить("ЗаполнитьАутентификациюПоШаблону", Истина); // По умолчанию дополняет строку аутентификации по шаблону.
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Получение значения в формате строки JSON.
//
// Параметры:
//  Данные			 - Произвольный - значение записи JSON.
//  ПараметрыЗаписи	 - ПараметрыЗаписиJSON  - параметры записи JSON.
// 
// Возвращаемое значение:
//  Строка - значение в строке JSON.
//
Функция ЗначениеВJSON(Данные, ПараметрыЗаписи = Неопределено) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Результат = ЗаписьJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Корректировка идентификаторов ИНН и КПП участника для сервиса, "0" если не заполнено.
//
// Параметры:
//   ИНН          - Строка - ИНН участника.
//   КПП          - Строка - КПП участника.
//   Наименование - Строка - наименование участника.
//   Отказ        - Булево - признак ошибки данных.
//   ТекстОшибки  - Строка - текст возвращаемой ошибки.
//
// Возвращаемое значение:
//   Структура - результат корректировки:
//     * ИНН - Строка - ИНН участника.
//     * КПП - Строка - КПП участника.
//
Функция ИдентификаторыУчастника(Знач ИНН, Знач КПП, Знач Наименование = Неопределено, Отказ = Неопределено,
	ТекстОшибки = "") Экспорт

	Идентификаторы = Новый Структура("ИНН, КПП");
	
	Идентификаторы.ИНН = СокрЛП(ИНН);
	Если ПустаяСтрока(Идентификаторы.ИНН) Тогда
		Идентификаторы.ИНН = "0";
	КонецЕсли;
	
	Идентификаторы.КПП = СокрЛП(КПП);
	Если ПустаяСтрока(Идентификаторы.КПП) Тогда
		Идентификаторы.КПП = "0";
	КонецЕсли;
	
	Если (СтрДлина(Идентификаторы.КПП) <> 9 И СтрДлина(Идентификаторы.ИНН) <> 12)
		ИЛИ (СтрДлина(Идентификаторы.КПП) <> 1 И СтрДлина(Идентификаторы.ИНН) <> 10) Тогда
		
		Если ЗначениеЗаполнено(Наименование) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректное значение ИНН ""%1"" или КПП ""%2"" для ""%3""'"), 
				ИНН, КПП, Наименование);
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Некорректное значение ИНН ""%1"" или КПП ""%2""'"), 
				ИНН, КПП);
		КонецЕсли;
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Идентификаторы;

КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет необходимость повторного подключения организации к Бизнес-сети.
// Проверку можно произвести или по ссылке на организацию, или по идентификатору.
//
// Параметры:
//  Организация  - ОпределяемыйТип.Организация - ссылка на организацию.
//  ИдентификаторОрганизации - Строка - идентификатор организации.
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется повторное подключение, иначе Ложь.
//
Функция ТребуетсяПовторноеПодключениеОрганизации(Организация = Неопределено, ИдентификаторОрганизации = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|ГДЕ
		|	(ОрганизацииБизнесСеть.Организация = &Организация
		|			ИЛИ ОрганизацииБизнесСеть.Идентификатор = &ИдентификаторОрганизации)
		|	И ОрганизацииБизнесСеть.ТребуетсяПовторноеПодключение";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Не РезультатЗапроса.Пустой();
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу подключенных к Бизнес-сети организаций с идентификаторами и признаком необходимости повторного подключения. 
// Если организация была подключена, но доступ к сервису был потерян (например, закончился срок жизни токена обновления),
// для такой организации значение поля ТребуетсяПовторноеПодключение будет Истина.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - 
//
Функция ПодключенныеОрганизации() Экспорт

	ИмяСправочникаОрганизации = СтрШаблон("Справочник.%1", 
		ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизацииБизнесСеть.Организация КАК Организация,
		|	ОрганизацииБизнесСеть.Идентификатор КАК Идентификатор,
		|	ОрганизацииБизнесСеть.ТребуетсяПовторноеПодключение КАК ТребуетсяПовторноеПодключение
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Организации КАК Организации
		|		ПО ОрганизацииБизнесСеть.Организация = Организации.Ссылка
		|ГДЕ
		|	НЕ Организации.Ссылка ЕСТЬ NULL
		|	И НЕ ОрганизацииБизнесСеть.Организация.ПометкаУдаления
		|	И ОрганизацииБизнесСеть.Идентификатор <> """"";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник_Организации", ИмяСправочникаОрганизации);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;
	
КонецФункции

Функция ИдентификаторыОрганизаций(Организации = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОрганизацииБизнесСеть.Идентификатор КАК Идентификатор,
		|	ОрганизацииБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|ГДЕ
		|	(&ОрганизацииНеЗаполнены
		|			ИЛИ ОрганизацииБизнесСеть.Организация В (&Организации))";
	
	Запрос.УстановитьПараметр("ОрганизацииНеЗаполнены", Организации = Неопределено);
	Запрос.УстановитьПараметр("Организации",            Организации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУдалитьИзВременногоХранилища(Адрес) Экспорт
	
	Результат = Неопределено;
	
	Если Не ЭтоАдресВременногоХранилища(Адрес) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Адрес);
	
	УдалитьИзВременногоХранилища(Адрес);
	
	Возврат Результат;
	
КонецФункции

// Получение данных из строки в формате JSON.
//
Функция ЗначениеИзСтрокиJSON(Значение, ПрочитатьВСоответствие = Ложь) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка")
		Или ПустаяСтрока(Значение)
		Или Лев(Значение, 1) = "<" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
		ЧтениеJSON.Закрыть();
	Исключение
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "БизнесСеть");
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает идентификатор организации по ссылке.
//
// Параметры:
//  Организация	 - ОпределяемыйТип.Организация - ссылка на организацию.
// 
// Возвращаемое значение:
//  Строка - идентификатор организации.
//
Функция ИдентификаторОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОрганизацииБизнесСеть.Идентификатор КАК Идентификатор
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|ГДЕ
		|	ОрганизацииБизнесСеть.Организация = &Организация
		|	И ОрганизацииБизнесСеть.Идентификатор <> """"";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Идентификатор;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак подключения  организации к Бизнес-сети.
// 
// Параметры:
//  Организация	 - ОпределяемыйТип.Организация - ссылка на проверяемую организацию. Если не задано, 
//                                               в ИБ должна быть хотя бы одна подключенная организация, чтобы вернулось Истина.
// 
// Возвращаемое значение:
//  Булево - если Истина, интерактивное подключение не требуется.
//
Функция ОрганизацияПодключена(Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		СтатусыПодключенияОрганизаций = СтатусыПодключенияОрганизаций().ВыгрузитьКолонку("СтатусПодключения");
	Иначе
		СтатусыПодключенияОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			СтатусПодключениеОрганизацииКСервису(Организация));
	КонецЕсли;
	
	Результат = Ложь;
	
	Для каждого ЭлементКоллекции Из СтатусыПодключенияОрганизаций Цикл
		Если ЭлементКоллекции <> СтатусыПодключения().ТребуетсяИнтерактивноеПодключение Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

// Возврат списка доступных для обмена видов документов со строковым представлением.
//
// Возвращаемое значение:
//   СписокЗначений - список с видами электронных документов.
//
Функция ВидыДокументовСервиса() Экспорт
	
	СписокВидовЭД = Новый СписокЗначений;
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктИсполнитель,          НСтр("ru = 'Акт выполненных работ'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.АктНаПередачуПрав,       НСтр("ru = 'Акт передачи прав'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ,            НСтр("ru = 'Заказ покупателя'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ЗаказТовара,             НСтр("ru = 'Заказ поставщику'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель,
		НСтр("ru = 'Корректировка стоимости'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец,          НСтр("ru = 'Товарная накладная'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара,
		НСтр("ru = 'Отчет о продажах комиссионного товара'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара,
		НСтр("ru = 'Отчет о списании комиссионного товара'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ПрайсЛист,               НСтр("ru = 'Прайс-лист'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.СчетНаОплату,            НСтр("ru = 'Счет на оплату'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.КоммерческоеПредложение, НСтр("ru = 'Коммерческое предложение'"));
	СписокВидовЭД.Добавить(Перечисления.ВидыЭД.ЗапросКоммерческихПредложений,
		НСтр("ru = 'Запрос коммерческих предложений'"));
	
	Возврат СписокВидовЭД;
	
КонецФункции

// Изменение использования регламентного задания.
//
// Параметры:
//  ИмяЗадания			- Строка - наименование регламентного задания.
//  ИмяПараметра		- Строка - наименование параметра, например "Использование".
//  ЗначениеПараметра	- Произвольный - признак использования регламентного задания.
//
Процедура ИзменитьРегламентноеЗадание(ИмяЗадания, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	ПараметрыПоиска = Новый Структура("Метаданные", ИмяЗадания);
	МассивРегламентныхЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	
	Если МассивРегламентныхЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегламентноеЗадание = МассивРегламентныхЗаданий[0];
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить(ИмяПараметра, ЗначениеПараметра);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);

КонецПроцедуры

// Заполнение реквизитов контрагентов.
//
// Параметры:
//   Данные - Структура, ТаблицаЗначений:
//     * Ссылка - СправочникСсылка - ссылка контрагента (обязательный).
//     * Наименование - Строка - полное наименование контрагента.
//     * ИНН - Строка - ИНН.
//     * КПП - Строка - КПП.
//
Процедура ЗаполнитьРеквизитыКонтрагентов(Данные) Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ИЗ
	|	&Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка В(&СписокСсылок)";
	
	ИмяСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	РеквизитНаименование = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеКонтрагента");
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Контрагенты", "Справочник." + ИмяСправочникаКонтрагенты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.Наименование", "Контрагенты." + РеквизитНаименование);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.ИНН", "Контрагенты." + РеквизитИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.КПП", "Контрагенты." + РеквизитКПП);
	Запрос.Текст = ТекстЗапроса;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СписокСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные.Ссылка);
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		СписокСсылок = Данные.ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Данные.Вставить("Наименование", Выборка.Наименование);
			Данные.Вставить("ИНН", Выборка.ИНН);
			Данные.Вставить("КПП", Выборка.КПП);
			Прервать;
		ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
			ЗаполнитьЗначенияСвойств(Данные.Найти(Выборка.Ссылка, "Ссылка"), Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получение организаций, зарегистрированных в сервисе.
//
// Возвращаемое значение:
//   Массив - зарегистрированные организации в сервисе.
//
Функция ЗарегистрированныеОрганизации() Экспорт

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник_Организации КАК Организации
	|		ПО ОрганизацииБизнесСеть.Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ Организации.Ссылка ЕСТЬ NULL
	|	И НЕ ОрганизацииБизнесСеть.Организация.ПометкаУдаления";

	ИмяСправочникаОрганизации = СтрШаблон("Справочник.%1", 
		ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации"));
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.НайтиПоПолномуИмени(ИмяСправочникаОрганизации));
	
	Результат = Новый Массив;
	Если ЕстьПраво Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник_Организации", ИмяСправочникаОрганизации);
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Условное оформление гиперссылки таблицы "Показать еще".
//
// Параметры:
//  УсловноеОформление	- УсловноеОформлениеКомпоновкиДанных - условное оформление формы.
//  ТаблицаФормы		- ТаблицаФормы - элемент формы таблицы списка.
//  ПолеФормы 			- ПолеФормы - элемент формы колонки "Показать еще".
//
Процедура УсловноеОформлениеГиперссылкиПоказатьЕще(УсловноеОформление, ТаблицаФормы, ПолеФормы) Экспорт
	
	ИмяКолонкиПоказатьЕще  = ПолеФормы.Имя;
	ПутьКДаннымПоказатьЕще = ПолеФормы.ПутьКДанным;
	
	// Скрытие колонок с данными для гиперссылки "Показать еще".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказатьЕще);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ДобавитьПоляТаблицыПоКоллекции(ТаблицаФормы.ПодчиненныеЭлементы,
		ЭлементУсловногоОформления.Поля.Элементы, ПолеФормы);
		
	// Скрытие гиперссылки "Показать еще".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказатьЕще);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиПоказатьЕще);
	
	// Отображение гиперссылки "Показать еще".
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Показать еще'"));
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоказатьЕще);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонкиПоказатьЕще);
	
КонецПроцедуры

#КонецОбласти

#Область Права

// Проверяет возможность настройки взаимодействия в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Возвращаемое значение:
//  Булево - наличие права на настройку обмена документами.
//
Функция ПравоНастройкиОбменаДокументами(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОрганизацииБизнесСеть);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет возможность чтения данных обмена документами в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на чтение настроек обмена документами.
//
Функция ПравоЧтенияНастроекОбменаДокументами(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ОрганизацииБизнесСеть);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

// Проверяет возможность выполнения обмена документами в сервисе 1С:Бизнес-сеть для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права на выполнение обмена.
//
Функция ПравоВыполненияОбменаДокументами(Пользователь = Неопределено, ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = УправлениеДоступом.ЕстьРоль("ВыполнениеОбменаДокументамиБизнесСеть", , Пользователь)
		И ПравоЧтенияНастроекОбменаДокументами();
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область ДанныеДляОтправкиВСервис

Функция ДанныеОрганизацииВBase64(Организация) Экспорт
	
	ДанныеДляРегистрации = ДанныеДляРегистрацииОрганизацииВБизнесСети(Организация);
	
	КонтактныеДанныеВJSON = Новый Структура;
	
	КонтактныеДанныеВJSON.Вставить("phone",         ДанныеДляРегистрации.Телефон);
	КонтактныеДанныеВJSON.Вставить("email",         ДанныеДляРегистрации.ЭлектроннаяПочта);
	КонтактныеДанныеВJSON.Вставить("address",       ДанныеДляРегистрации.Адрес);
	КонтактныеДанныеВJSON.Вставить("addressFiasId", ДанныеДляРегистрации.АдресИдентификатор);
	
	ДанныеОрганизацииВJSON = Новый Структура;
	
	ДанныеОрганизацииВJSON.Вставить("cid",      ДанныеДляРегистрации.ИдентификаторКлиента);
	ДанныеОрганизацииВJSON.Вставить("app",      ДанныеДляРегистрации.НаименованиеКлиентскогоПриложения);
	ДанныеОрганизацииВJSON.Вставить("name",     ДанныеДляРегистрации.НаименованиеОрганизации);
	ДанныеОрганизацииВJSON.Вставить("legalId",  ДанныеДляРегистрации.ИдентификаторОрганизации);
	ДанныеОрганизацииВJSON.Вставить("contacts", КонтактныеДанныеВJSON);
	
	СтрокаJSON = ЗначениеВJSON(ДанныеОрганизацииВJSON, Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	
	Результат = СтрокаBase64БезBOM(СтрокаJSON);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторИнформационнойБазы() Экспорт
	
	Возврат СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы();
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзЭлектронногоВзаимодействия

// См. ЭлектронноеВзаимодействие.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОбновлениеИдентификаторовКонтрагентовБизнесСети.Имя);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбновлениеИдентификаторовКонтрагентовБизнесСети.ИмяМетода);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ОбновлениеИдентификаторовКонтрагентовБизнесСети"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменБизнесСеть"];
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// ТехнологияСервиса.УправлениеТарифами
// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг.
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ПоставщикПортал1СИТС = Неопределено;
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ЭлектронноеВзаимодействиеКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для каждого ЗначениеМассива Из ПоставщикиУслуг Цикл
		Если ЗначениеМассива.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			ПоставщикПортал1СИТС = ЗначениеМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоставщикПортал1СИТС = Неопределено Тогда
		ПоставщикПортал1СИТС = Новый Структура;
		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	КонецЕсли;
	
	Услуги = ПоставщикПортал1СИТС.Услуги;
	
	// Оператор [] используется для исключения ошибки компиляции,
	// если не внедрена Библиотека "Технология сервиса".
	ТипУслугиБезлимитная = Перечисления["ТипыУслуг"]["Безлимитная"];
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", "1c-bn-access");
	НоваяУслуга.Вставить("Наименование" , НСтр("ru = 'ЭДО без электронной подписи для участников 1С:Бизнес-сеть'"));
	НоваяУслуга.Вставить("ТипУслуги"    , ТипУслугиБезлимитная);
	Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры
// Конец ТехнологияСервиса.УправлениеТарифами

// СтандартныеПодсистемы.БазоваяФункциональность
// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.АдминистрированиеАбонентаБизнесСеть",
		"Роль.ДобавлениеИзменениеНастроекБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.ВыполнениеОбменаБизнесСеть",
		"Роль.ВыполнениеОбменаДокументамиБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.ОтчетыТорговыеПредложения",
		"Роль.ЧтениеТорговыхПредложенийБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.14",
		"Роль.СопоставлениеНоменклатуры1СБизнесСеть",
		"Роль.ДобавлениеИзменениеТорговыхПредложенийБизнесСеть",
		"БиблиотекаЭлектронныхДокументов");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.29",
		"Роль.ДобавлениеИзменениеТорговыхПредложенийБизнесСеть",
		"Роль.ДобавлениеИзменениеНастроекТорговыхПредложений",
		"БиблиотекаЭлектронныхДокументов");
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.4.1.29",
		"Роль.ЧтениеТорговыхПредложенийБизнесСеть",
		"Роль.ЧтениеНастроекТорговыхПредложений",
		"БиблиотекаЭлектронныхДокументов");
		
КонецПроцедуры
// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ПрофилиБезопасности
// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	ДобавитьРазрешенияВнешнихРесурсов("БизнесСеть", ЗапросыРазрешений);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

#КонецОбласти

#Область РегионыЗакупкиПродажиТоваров

Функция АдресаОрганизации(Организация) Экспорт
	
	Результат = ОписаниеАдресаАбонента();
	
	БизнесСетьПереопределяемый.ЗаполнитьАдресаОрганизации(Организация, Результат);
		
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРегионыПоиска(КлючНастроек, Организация, РегионПоиска, ЗаголовокРегиона, ИдентификаторыРегионов) Экспорт
	
	РегионПоиска = ОписаниеРегионаПоиска();
	
	НастройкиРегионов = НастройкиАдресовИРегионовПоиска(КлючНастроек, Организация);
		
	ЗаполнитьЗначенияСвойств(РегионПоиска, НастройкиРегионов);
	
	ОбновитьСведенияАдресовИРегионовПоискаНаФорме(Организация, НастройкиРегионов, ЗаголовокРегиона, ИдентификаторыРегионов);
		
КонецПроцедуры

Процедура СохранитьНастройкиРегионовПоиска(
			ДанныеДляСохранения, 
			КлючНастроек,
			Организация, 
			ЗаголовокЭлементаФормы, 
			ИдентификаторыРегионов) Экспорт
		
	НастройкиАдресовРегионов = НастройкиАдресовИРегионовПоиска(КлючНастроек, Организация);
		
	НастройкиАдресовРегионов.РежимОтбора   = ДанныеДляСохранения.РежимОтбора;
	НастройкиАдресовРегионов.Представление = ДанныеДляСохранения.Представление;
	НастройкиАдресовРегионов.ЗначенияПолей = ДанныеДляСохранения.ЗначенияПолей;
	
	СохранитьНастройкиАдресовИРегионовПоиска(КлючНастроек, Организация, НастройкиАдресовРегионов);
	
	ОбновитьСведенияАдресовИРегионовПоискаНаФорме(
		Организация, 
		НастройкиАдресовРегионов, 
		ЗаголовокЭлементаФормы, 
		ИдентификаторыРегионов);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДокументамиБизнесСетиЧерезСервисEDI

Процедура ОбработатьРезультатПолученныхДокументовЧерезБизнесСеть(Знач Результат, Знач РежимИсходящихДокументов, ТаблицаДокументов = Неопределено) Экспорт
	
	Если ТаблицаДокументов = Неопределено Тогда
		ТаблицаДокументов = Новый ТаблицаЗначений;
		ТаблицаДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("КонтрагентНаименование", Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("КонтрагентИНН",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("КонтрагентКПП",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ОрганизацияИНН",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ОрганизацияКПП",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ФайлАрхива",  Новый ОписаниеТипов("Булево"));
		ТаблицаДокументов.Колонки.Добавить("Сумма",  Новый ОписаниеТипов("Число"));
		ТаблицаДокументов.Колонки.Добавить("Информация",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("Идентификатор",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("НаправлениеЭД",  Новый ОписаниеТипов("ПеречислениеСсылка.НаправленияЭД"));
		ТаблицаДокументов.Колонки.Добавить("ТипОбъекта",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ДатаДокумента",  Новый ОписаниеТипов("Дата"));
		ТаблицаДокументов.Колонки.Добавить("Загружен",  Новый ОписаниеТипов("Булево"));
		ТаблицаДокументов.Колонки.Добавить("ИдентификаторВнутренний",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("Источник");
		ТаблицаДокументов.Колонки.Добавить("Статус",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ПредставлениеДокумента",  Новый ОписаниеТипов("Булево"));
		ТаблицаДокументов.Колонки.Добавить("КонтактноеЛицо",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("Телефон",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ЭлектроннаяПочта",  Новый ОписаниеТипов("Строка"));
		ТаблицаДокументов.Колонки.Добавить("ВозможныеТипыОбъекта",  Новый ОписаниеТипов("СписокЗначений"));
		ТаблицаДокументов.Колонки.Добавить("ВидДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	КонецЕсли;
		
	Для Каждого ЗначениеМассива Из Результат Цикл
		
		Если ТипЗнч(ЗначениеМассива) <> Тип("Структура") ИЛИ Не ЗначениеМассива.Свойство("documentTitle") Тогда
			ВидОперации = НСтр("ru = 'Чтение списка документов'");
			ПодробныйТекстОшибки = НСтр("ru = 'Внутренняя ошибка чтения данных 1С:Бизнес-сеть. Ошибка формата.'");
			ТекстОшибки = НСтр("ru = 'Внутренняя ошибка чтения данных 1С:Бизнес-сеть.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДокументов.Добавить();
		НоваяСтрока.Документ = ЗначениеМассива.documentTitle;
		Если РежимИсходящихДокументов Тогда
			НоваяСтрока.КонтрагентНаименование = ЗначениеМассива.destinationOrganization.title;
			НоваяСтрока.КонтрагентИНН  = ЗначениеМассива.destinationOrganization.Inn;
			НоваяСтрока.КонтрагентКПП  = ЗначениеИдентификатора(ЗначениеМассива.destinationOrganization.Kpp);
			НоваяСтрока.ОрганизацияИНН = ЗначениеМассива.sourceOrganization.Inn;
			НоваяСтрока.ОрганизацияКПП = ЗначениеИдентификатора(ЗначениеМассива.sourceOrganization.Kpp);
		Иначе
			НоваяСтрока.КонтрагентНаименование = ЗначениеМассива.sourceOrganization.title;
			НоваяСтрока.КонтрагентИНН  = ЗначениеМассива.sourceOrganization.Inn;
			НоваяСтрока.КонтрагентКПП  = ЗначениеИдентификатора(ЗначениеМассива.sourceOrganization.Kpp);
			НоваяСтрока.ОрганизацияИНН = ЗначениеМассива.destinationOrganization.Inn;
			НоваяСтрока.ОрганизацияКПП = ЗначениеИдентификатора(ЗначениеМассива.destinationOrganization.Kpp);
		КонецЕсли;
		
		НоваяСтрока.ФайлАрхива    = Истина;
		НоваяСтрока.Сумма         = ЗначениеМассива.moneyAmount / 100; // Сервис хранит данные в копейках.
		НоваяСтрока.Информация    = ЗначениеМассива.info;
		НоваяСтрока.Идентификатор = ЗначениеМассива.id;
		НоваяСтрока.НаправлениеЭД = ?(РежимИсходящихДокументов, ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий"),
			ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий"));
		НоваяСтрока.ТипОбъекта    = ?(НоваяСтрока.ВозможныеТипыОбъекта.Количество() > 0,
			НоваяСтрока.ВозможныеТипыОбъекта[0].Представление, "");
			
		ЗаполнитьИнформациюОЗагружаемомДокументеИБ(НоваяСтрока, ЗначениеМассива, РежимИсходящихДокументов);
		Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторВнутренний) Тогда
			НоваяСтрока.ИдентификаторВнутренний = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		НоваяСтрока.Источник  = ЗначениеМассива;
	
		Если ЗначениеМассива.documentPresentationDataType = "pdf" Тогда
			НоваяСтрока.ПредставлениеДокумента = Истина;
		КонецЕсли;
		
		// Контактная информация.
		НоваяСтрока.КонтактноеЛицо   = ЗначениеМассива.person.name;
		НоваяСтрока.Телефон          = ЗначениеМассива.person.phone;
		НоваяСтрока.ЭлектроннаяПочта = ЗначениеМассива.person.email;
		
		Если ЗначениеЗаполнено(ЗначениеМассива.contextIds) Тогда
			Для каждого ТекущийПрайсЛист Из ЗначениеМассива.contextIds Цикл
				НоваяСтрока.ИдентификаторыПрайсЛистов.Добавить(ТекущийПрайсЛист);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СсылкаДокументаИБПоДаннымСервиса(Знач ВидЭДСервиса, Знач ИдентификаторВнутренний, Знач РежимИсходящихДокументов,
																ВидДокумента = Неопределено, СписокТипов = Неопределено) Экспорт
	
	Если НРег(Лев(ВидЭДСервиса, 3)) = "v8." Тогда
		ВидЭДСервиса = Сред(ВидЭДСервиса, 4);
	КонецЕсли;
	
	СсылкаНаДокумент = Неопределено;
	Если Метаданные.Перечисления.ВидыЭД.ЗначенияПеречисления.Найти(ВидЭДСервиса) <> Неопределено Тогда
		
		Если Не РежимИсходящихДокументов Тогда
			
			// Поиск документа основания по предопределенному типу.
			ВидДокумента = Перечисления.ВидыЭД[ВидЭДСервиса];
			СписокТипов = ОбменСКонтрагентамиСлужебный.СписокТиповДокументовПоВидуЭД(ВидДокумента);
			Если ЗначениеЗаполнено(ИдентификаторВнутренний) И СписокТипов.Количество()>0 Тогда
				Для Счетчик = 0 По СписокТипов.Количество()-1 Цикл
					НаименованиеТипа = СписокТипов.Получить(Счетчик).Значение.Метаданные().Имя;
					ВладелецЭД = Документы[НаименованиеТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторВнутренний));
					Если ОбщегоНазначения.СсылкаСуществует(ВладелецЭД) Тогда
						СсылкаНаДокумент = ВладелецЭД;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			ОснованияЭлектронныхДокументов = Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументов.Тип.Типы();
			
			// Поиск документа основания ЭД по всем доступным типам.
			Для Каждого ТипОснования Из ОснованияЭлектронныхДокументов Цикл
				Ссылка = Новый(ТипОснования);
				СсылкаМетаданные = Ссылка.Метаданные();
				Если Метаданные.Документы.Содержит(СсылкаМетаданные) Тогда
					ВладелецЭД = Документы[СсылкаМетаданные.Имя].ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторВнутренний));
					Если ОбщегоНазначения.СсылкаСуществует(ВладелецЭД) Тогда
						СсылкаНаДокумент = ВладелецЭД;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СсылкаНаДокумент;
	
КонецФункции

Функция ТаблицаЭлектронныхДокументовСформированныхЧерезБизнесСеть(Знач СсылкиНаДокументы, Знач ОрганизацияЗарегистрирована, УникальныйИдентификатор, Отказ) Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("МассивСсылокНаОбъект", СсылкиНаДокументы);
	ПараметрыЗадания.Вставить("ОтправкаЧерезБС", Истина);
	ПараметрыЗадания.Вставить("ОрганизацияПодключенаБС", ОрганизацияЗарегистрирована);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Обработки.ОбменСКонтрагентами.ПодготовитьДанныеДляЗаполненияДокументов(ПараметрыЗадания, АдресХранилища);
	
	Если АдресХранилища = "" Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаЭД = ПолучитьУдалитьИзВременногоХранилища(АдресХранилища);
	
	Если НЕ ЗначениеЗаполнено(ТаблицаЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыДокументов = ВидыДокументовСервиса();
	
	Для Каждого СтрокаТаблицы Из ТаблицаЭД Цикл
		
		СтрокаТаблицы.АдресХранилища = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ДвоичныеДанныеПакета, УникальныйИдентификатор);
		СтрокаТаблицы.АдресХранилищаПредставления = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ДвоичныеДанныеПредставления,
			УникальныйИдентификатор);
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИзображениеQRКода) Тогда
			СтрокаТаблицы.АдресХранилищаКартинкиQRКода = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ИзображениеQRКода,
				УникальныйИдентификатор);
		КонецЕсли;

		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.ВладелецЭД, "Номер, Дата");
		ШаблонНаименования = НСтр("ru = '%1 %2 от %3'");
		
		Тип = ТипыДокументов.НайтиПоЗначению(СтрокаТаблицы.ВидЭД);
		Если Тип = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Отправка данного вида документа не поддерживается.'"));
			Возврат Неопределено;
		КонецЕсли;
		
		НомерДокумента = ""; 
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьПечатныйНомерДокумента(СтрокаТаблицы.ВладелецЭД, НомерДокумента);
		
		СтрокаТаблицы.НаименованиеФайла = СтрШаблон(ШаблонНаименования,
			Тип.Представление, СокрП(НомерДокумента), Формат(СтруктураРеквизитов.Дата, "ДЛФ=Д"));
			
	КонецЦикла;
		
	Возврат ТаблицаЭД;

КонецФункции

// Отправляет документ в сервисе 1С:Бизнес-сеть.
//
// Параметры:
//  ДополнительныеПараметры        - Структура - содержит:
//   * ТаблицаДокументов - ТаблицаЗначений, Массив из Структура - данные для отправки документа:
//     ** УникальныйИдентификатор      -
//     ** Контрагент                   -
//     ** Организация                  -
//     ** ВладелецЭД                   - ЛюбаяСсылка - ссылка на учетный документ
//     ** ВидЭД                        -
//     ** НаименованиеФайла            - Строка - наименование файла представления.
//     ** Сумма                        - Число - сумма документа
//     ** ДвоичныеДанныеПакета         - ДвоичныеДанные - контейнер электронного документа.
//     ** ДвоичныеДанныеПредставления  - ДвоичныеДанные - файл представления электронного документа.
//     ** ИдентификаторВременнойСсылки - Строка - идентификатор временной ссылки в сервисе 1C:EDI.
//     ** ПубличнаяСсылкаQRКода        - Строка - короткая ссылка на публичную временную ссылку.
//     ** ИзображениеQRКода            - ДвоичныеДанные -  двоичные данные, содержащие байты PNG-изображения QR-кода с короткой публичной ссылкой.
//   * ДополнительнаяИнформация - Структура - содержит единую информацию для всех отправляемых документов:
//     ** КонтактноеЛицо             - Строка - контактное лицо отправителя.
//     ** Телефон                    - Строка - номер телефона отправителя.
//     ** ЭлектроннаяПочта           - Строка - адрес электронной почты отправителя
//     ** УведомлятьПоПочте          - Булево - признак необходимости уведомления отправителя об изменении статуса
//                                              обработки документа получателем.
//     ** СопроводительнаяИнформация - Строка - произвольная текстовая информация для получателя.
//  АдресХранилищаРезультата - Строка - адрес временного хранилища, в который будет помещен результат выполнения:
//   * ДанныеQRКодовПоДокументам         - Соответствие - данные по QR-кодам по документам:
//      ** Ключ     - ЛюбаяСсылка - ссылка на документ учета.
//      ** Значение - Структура   - см. БизнесСеть.НовыйДанныеQRКода.
//   * ИдентификаторыСервисаПоДокументам - Соответствие - идентификаторы документов в сервисе 1С:Бизнес-сеть:
//      ** Ключ     - ЛюбаяСсылка - ссылка на документ учета.
//      ** Значение - Число       - идентификатор документа в сервисе 1С:Бизнес-сеть.
//
Процедура ОтправитьДанныеДокументовЧерезБизнесСеть(Знач ДополнительныеПараметры, АдресХранилищаРезультата) Экспорт
	
	ТаблицаДокументов = ДополнительныеПараметры.ТаблицаДокументов;
	
	ДополнительнаяИнформация = Неопределено;
	ДополнительныеПараметры.Свойство("ДополнительнаяИнформация", ДополнительнаяИнформация);
	
	Отказ                             = Ложь;
	ИдентификаторыСервисаПоДокументам = Новый Соответствие;
	ДанныеQRКодовПоДокументам         = Новый Соответствие;
	Для Каждого СтрокаТаблицы Из ТаблицаДокументов Цикл

		СсылкаНаДокумент = СтрокаТаблицы.ВладелецЭД;
		Организация      = СтрокаТаблицы.Организация;
		ВидЭД            = СтрокаТаблицы.ВидЭД;
		
		ПараметрыКоманды = Новый Структура;
		ПараметрыКоманды.Вставить("УникальныйИдентификатор",     СтрокаТаблицы.УникальныйИдентификатор);
		ПараметрыКоманды.Вставить("Отправитель",                 Организация);
		ПараметрыКоманды.Вставить("Получатель",                  СтрокаТаблицы.Контрагент);
		ПараметрыКоманды.Вставить("Заголовок",                   СтрокаТаблицы.НаименованиеФайла);
		ПараметрыКоманды.Вставить("Ссылка",                      СсылкаНаДокумент);
		ПараметрыКоманды.Вставить("ВидЭД",                       ВидЭД);
		ПараметрыКоманды.Вставить("Сумма",                       СтрокаТаблицы.Сумма);
		ПараметрыКоманды.Вставить("ДвоичныеДанныеПакета",        СтрокаТаблицы.ДвоичныеДанныеПакета);
		ПараметрыКоманды.Вставить("ДвоичныеДанныеПредставления", СтрокаТаблицы.ДвоичныеДанныеПредставления);
		
		Если ДополнительнаяИнформация <> Неопределено Тогда
			ПараметрыКоманды.Вставить("КонтактноеЛицо",             ДополнительнаяИнформация.КонтактноеЛицо);
			ПараметрыКоманды.Вставить("Телефон",                    ДополнительнаяИнформация.Телефон);
			ПараметрыКоманды.Вставить("ЭлектроннаяПочта",           ДополнительнаяИнформация.ЭлектроннаяПочта);
			ПараметрыКоманды.Вставить("УведомлятьПоПочте",          ДополнительнаяИнформация.УведомлятьПоПочте);
			ПараметрыКоманды.Вставить("СопроводительнаяИнформация", ДополнительнаяИнформация.СопроводительнаяИнформация);
		Иначе
			ПараметрыКоманды.Вставить("КонтактноеЛицо",              "");
			ПараметрыКоманды.Вставить("Телефон",                     "");
			ПараметрыКоманды.Вставить("ЭлектроннаяПочта",            "");
			ПараметрыКоманды.Вставить("УведомлятьПоПочте",           "");
			ПараметрыКоманды.Вставить("СопроводительнаяИнформация",  "");
		КонецЕсли;
		
		ПараметрыВызова = ПараметрыКомандыОтправитьДокумент(ПараметрыКоманды, Отказ);
		Результат = ВыполнитьКомандуСервиса(ПараметрыВызова, Отказ);

		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыСервисаПоДокументам.Вставить(СсылкаНаДокумент, Результат.id);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторВременнойСсылки) Тогда
			ДанныеQRКода = НовыйДанныеQRКода(СтрокаТаблицы.ИдентификаторВременнойСсылки,
											СтрокаТаблицы.ПубличнаяСсылкаQRКода,
											СтрокаТаблицы.ИзображениеQRКода);
			
			ДанныеQRКодовПоДокументам.Вставить(СсылкаНаДокумент, ДанныеQRКода);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИдентификаторыСервисаПоДокументам) Тогда
		ДанныеОтвета = Новый Структура;
		ДанныеОтвета.Вставить("ДанныеQRКодовПоДокументам", ДанныеQRКодовПоДокументам);
		ДанныеОтвета.Вставить("ИдентификаторыСервисаПоДокументам", ИдентификаторыСервисаПоДокументам);
	Иначе
		ДанныеОтвета = Неопределено;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(ДанныеОтвета, АдресХранилищаРезультата);
		
КонецПроцедуры

#КонецОбласти

#Область QRКоды

// Возвращает данные QR-кода.
//
// Параметры:
//  Идентификатор         - Строка - внутренний идентификатор публичной ссылки.
//  ПубличнаяСсылкаQRкода - Строка - короткая публичная ссылка.
//  ИзображениеQRКода     - Строка - двоичные данные, содержащие байты PNG-изображения QR-кода с короткой публичной ссылкой.
//
// Возвращаемое значение:
//  Структура - содержит:
//  Идентификатор         - Строка - внутренний идентификатор публичной ссылки.
//  ПубличнаяСсылкаQRкода - Строка - короткая публичная ссылка.
//  ИзображениеQRКода     - Строка - двоичные данные, содержащие байты PNG-изображения QR-кода с короткой публичной ссылкой.
//
Функция НовыйДанныеQRКода(Знач Идентификатор = Неопределено, Знач ПубличнаяСсылкаQRкода = Неопределено, Знач ИзображениеQRКода = Неопределено) Экспорт
	
	ДанныеQRКода = Новый Структура;
	ДанныеQRКода.Вставить("Идентификатор"        , Идентификатор);
	ДанныеQRКода.Вставить("ПубличнаяСсылкаQRкода", ПубличнаяСсылкаQRкода);
	ДанныеQRКода.Вставить("ИзображениеQRКода"    , ИзображениеQRКода);
	
	Возврат ДанныеQRКода;
	
КонецФункции

Функция ДанныеQRКодаПоДокументу(Знач СсылкаНаДокумент, Знач Организация, Отказ = Ложь) Экспорт
	
	ДанныеQRКода = НовыйДанныеQRКода();
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("Организация", Организация);
	ПараметрыКоманды.Вставить("Идентификатор", СсылкаНаДокумент.УникальныйИдентификатор());
	ПараметрыКоманды.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
	
	ПараметрыВызова = ПараметрыКомандыСозданияQRКода(ПараметрыКоманды);
	Результат = ВыполнитьКомандуСервиса(ПараметрыВызова, Отказ);
	
	Если Результат <> Неопределено И Не Отказ Тогда
		ДанныеQRКода.Идентификатор         = Результат.hookId;
		ДанныеQRКода.ПубличнаяСсылкаQRкода = Результат.shortLine;
		ДанныеQRКода.ИзображениеQRКода     = Base64Значение(Результат.QRCode);
	КонецЕсли;
	
	Возврат ДанныеQRКода;
		
КонецФункции

Процедура ОтправитьДокументИПолучитьQRКодЧерезБизнесСеть(Знач СсылкиНаДокументы, АдресХранилищаРезультата) Экспорт
	
	Отказ = Ложь;
	
	ТаблицаЭД = ТаблицаЭлектронныхДокументовСформированныхЧерезБизнесСеть(СсылкиНаДокументы, Истина, Новый УникальныйИдентификатор, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТаблицаДокументов", ТаблицаЭД);
	ОтправитьДанныеДокументовЧерезБизнесСеть(ДополнительныеПараметры, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура ПолучитьДанныеДокументаПоQRКоду(Знач АдресРесурса, АдресХранилищаРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыВызова = ПараметрыКомандыПолученияПолнойПубличнойСсылки(АдресРесурса);
	Результат = ВыполнитьКомандуСервиса(ПараметрыВызова, Отказ);
	
	Если Не ЗначениеЗаполнено(Результат) Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВызова = ПараметрыКомандыВыполненияПубличнойСсылки(Результат);
	Результат = ВыполнитьКомандуСервиса(ПараметрыВызова, Отказ);
	
	Если Результат = Неопределено Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов = Неопределено;
	ОбработатьРезультатПолученныхДокументовЧерезБизнесСеть(Результат, Ложь, ТаблицаДокументов);
	
	Если ТаблицаДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("ДатаДокумента УБЫВ");
	
	СтрокаТаблицы = ТаблицаДокументов[0];
	ДанныеДокумента = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
	ДанныеДокумента.Вставить("Дата", СтрокаТаблицы.ДатаДокумента);
	ДанныеДокумента.Вставить("УникальныйИдентификатор");
	ДанныеДокумента.Вставить("ВладелецЭД");
	
	Контрагент = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеДокумента.КонтрагентИНН, 
		ДанныеДокумента.КонтрагентКПП, Контрагент, , ДанныеДокумента.ДатаДокумента);
	ДанныеДокумента.Вставить("Контрагент", Контрагент);
	
	Организация = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации",
		ДанныеДокумента.ОрганизацияИНН, ДанныеДокумента.ОрганизацияКПП, Организация, , ДанныеДокумента.ДатаДокумента);
	ДанныеДокумента.Вставить("Организация", Организация);
	
	Если ПустаяСтрока(ДанныеДокумента.КонтрагентНаименование) И ЗначениеЗаполнено(ДанныеДокумента.Контрагент) Тогда
		ДанныеДокумента.КонтрагентНаименование = Строка(ДанныеДокумента.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОрганизацияПодключена = ОрганизацияПодключена(Организация);
		Если ОрганизацияПодключена Тогда
			ПолучитьПоИдентификаторуИсходящегоДокументаВходящийДокументПоQRКоду(Организация, СтрокаТаблицы.Идентификатор, ДанныеДокумента, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура ПолучитьПоИдентификаторуИсходящегоДокументаВходящийДокументПоQRКоду(Знач Организация, Знач ИдентификаторСервиса,
						ДанныеДокумента, Отказ = Ложь, ДокументУчета = Неопределено) Экспорт
	
	ИдентификаторыСервиса = Новый Массив;
	ИдентификаторыСервиса.Добавить(ИдентификаторСервиса);
	ДанныеДокумента.Вставить("МассивСсылокНаОбъект", ИдентификаторыСервиса);
	ДанныеДокумента.Вставить("РежимВходящихДокументов", Истина);
	
	ИдентификаторОрганизации = ИдентификаторОрганизации(ДанныеДокумента.Организация);
	ДанныеДокумента.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	
	ПараметрыВызова = ПараметрыКомандыПолучитьДокументы(ДанныеДокумента, Истина, Отказ);
	Результат = ВыполнитьКомандуСервиса(ПараметрыВызова, Отказ);
	
	Если Не ЗначениеЗаполнено(Результат) Или Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьИнформациюОЗагружаемомДокументеИБ(ДанныеДокумента, Результат[0], Ложь);
	
	ВидЭДСервиса = ДанныеДокумента.Источник.DocumentDataType;
	
	ОтобразитьПолученныйДокумент = Ложь;
	Если Не ЗначениеЗаполнено(ДокументУчета) Тогда
		
		ВладелецЭД = СсылкаДокументаИБПоДаннымСервиса(ВидЭДСервиса,
													ДанныеДокумента.ИдентификаторВнутренний,
													Ложь,
													ДанныеДокумента.ВидДокумента,
													ДанныеДокумента.ВозможныеТипыОбъекта);
		Если ЗначениеЗаполнено(ВладелецЭД) Тогда
			ОтобразитьПолученныйДокумент = Истина;
		КонецЕсли;
	Иначе
		ВладелецЭД = ДокументУчета;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("ОтобразитьПолученныйДокумент", ОтобразитьПолученныйДокумент);
	ДанныеДокумента.Вставить("ВладелецЭД", ВладелецЭД);
	ДанныеДокумента.Вставить("СсылкаНаДокумент", ВладелецЭД);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеQRКодаВПоляхТабличногоДокумента(ДанныеQRКода, ДанныеТабличногоДокумента) Экспорт
	
	ТабличныйДокумент = ДанныеТабличногоДокумента.ТабличныйДокумент;
	ДанныеQRКода_ПодсказкаQRКода = ДанныеТабличногоДокумента.ДанныеQRКода_ПодсказкаQRКода;
	ДанныеQRКода_ПубличнаяСсылкаQRКода = ДанныеТабличногоДокумента.ДанныеQRКода_ПубличнаяСсылкаQRКода;
	КартинкаQRКода = ДанныеТабличногоДокумента.КартинкаQRКода;
	
	ПодсказкаQRКода_ЯчейкаВверх = ДанныеQRКода_ПодсказкаQRКода.Верх;
	ПодсказкаQRКода_ЯчейкаЛево  = ДанныеQRКода_ПодсказкаQRКода.Лево;
	
	ТабличныйДокумент.Область(ПодсказкаQRКода_ЯчейкаВверх,
								ПодсказкаQRКода_ЯчейкаЛево,
								ПодсказкаQRКода_ЯчейкаВверх,
								ПодсказкаQRКода_ЯчейкаЛево).Текст = НСтр("ru = 'Скачать документ'");
	
	ПубличнаяСсылкаQRКода_ЯчейкаВверх = ДанныеQRКода_ПубличнаяСсылкаQRКода.Верх;
	ПубличнаяСсылкаQRКода_ЯчейкаЛево  = ДанныеQRКода_ПубличнаяСсылкаQRКода.Лево;
	
	ТабличныйДокумент.Область(ПубличнаяСсылкаQRКода_ЯчейкаВверх,
							ПубличнаяСсылкаQRКода_ЯчейкаЛево,
							ПубличнаяСсылкаQRКода_ЯчейкаВверх,
							ПубличнаяСсылкаQRКода_ЯчейкаЛево).Текст = ДанныеQRКода.ПубличнаяСсылкаQRкода;
	
	КартинкаQRКода.Картинка = Новый Картинка(ДанныеQRКода.ИзображениеQRКода);
	
КонецПроцедуры

Функция ФайлПредставленияПрикладногоДокументаСQRКодом(СсылкаНаДокумент, Организация, ВидЭД, НаименованиеФайла, ДанныеQRКодовПоДокументам) Экспорт
	
	ПечатнаяФорма = Неопределено;
	
	Если ТипЗнч(ДанныеQRКодовПоДокументам) = Тип("Структура") Тогда
		СоответствиеДанныхQRКодов = Новый Соответствие;
		СоответствиеДанныхQRКодов.Вставить(СсылкаНаДокумент, ДанныеQRКодовПоДокументам);
	ИначеЕсли ТипЗнч(ДанныеQRКодовПоДокументам) = Тип("Соответствие") Тогда
		СоответствиеДанныхQRКодов = ДанныеQRКодовПоДокументам;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
	БизнесСетьПереопределяемый.СформироватьПредставлениеПрикладногоДокументаСQRКодом(СсылкаНаДокумент,
																						ВидЭД,
																						СоответствиеДанныхQRКодов,
																						ПечатнаяФорма);
																							
	Если ПечатнаяФорма = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗаписатьТабличныйДокумент(ПечатнаяФорма, "PDF", НаименованиеФайла);
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КомандыСервиса

#Область ПодключениеОрганизацийКСервису

Процедура ПодключитьОрганизациюПоТикетуИТС(ИдентификаторОрганизации, Отказ)
	
	ДанныеИТС = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки("1c-bn-access");
	
	Если Не ЗначениеЗаполнено(ДанныеИТС.Тикет) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВременныйКлючДоступа = КлючДоступаПоТикетуИТС(ДанныеИТС.Тикет, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КодАктивации = КодАктивацииВБизнесСети(ВременныйКлючДоступа.ТокенДоступа, ИдентификаторОрганизации, Отказ);
			
	Если Отказ Тогда
		Возврат;	
	КонецЕсли;
	
	Организация = ОрганизацияПоИдентификатору(ИдентификаторОрганизации);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	КлючДоступа = КлючДоступаПоКодуАктивации(КодАктивации, НатуральныйИдентификаторОрганизации(Организация), Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьКлючДоступаВЛокальноеХранилище(ИдентификаторОрганизации, КлючДоступа);
	
КонецПроцедуры

Процедура ПодключитьОрганизациюПоКодуАктивации(Организация, КодАктивации, Отказ)
	
	// Порядок регистрации:
	// - получение ключа доступа БЕЗ записи в ИБ
	// - получение идентификатора организации по натуральному ключу
	// - запись идентификатора в ИБ
	// - запись ключа доступа в ИБ
	
	НатуральныйИдентификаторОрганизации = НатуральныйИдентификаторОрганизации(Организация);
	
	КлючДоступа = КлючДоступаПоКодуАктивации(КодАктивации, НатуральныйИдентификаторОрганизации, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НатуральныеИдентификаторы = 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НатуральныйИдентификаторОрганизации);
	
	ДанныеОрганизации = ДанныеОрганизацийПоНатуральнымИдентификаторам(НатуральныеИдентификаторы, Отказ);
		
	Если Отказ ИЛИ Не ЗначениеЗаполнено(ДанныеОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОрганизации = ДанныеОрганизации[0].Идентификатор;
	
	ПодключитьОрганизациюЛокально(Организация, ИдентификаторОрганизации, КлючДоступа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеКлючаДоступа

Функция ОбновитьКлючДоступа(ИдентификаторОрганизации, ТокенОбновления, Отказ = Ложь)
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ТокенОбновления", ТокенОбновления);

	ПараметрыКоманды = ПараметрыКомандыОбновитьКлючДоступа(ПараметрыМетода);
	ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если ПараметрыКоманды.КодСостояния = 403 Тогда
		ПриостановитьДоступКСервису(ИдентификаторОрганизации);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Результат = ДанныеКлючаДоступаИзJSON(ДанныеСервиса);
		
	ЗаписатьКлючДоступаВЛокальноеХранилище(ИдентификаторОрганизации, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыОбновитьКлючДоступа(ПараметрыМетода)
	
	Данные = ТелоЗапросаОбновленияКлючаДоступа(ПараметрыМетода.ТокенОбновления);
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Обновление ключа доступа'");
	ПараметрыКоманды.Адрес          = "/auth/token/refresh";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Данные         = ЗначениеВJSON(Данные);
	ПараметрыКоманды.Аутентификация = Ложь;
	ПараметрыКоманды.ТипКонтента    = ТипКонтентаПриРаботеСТокенами();
		
	ПараметрыКоманды.Ошибки.Вставить(403, ТекстОшибкиПотериДоступа());

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ТелоЗапросаОбновленияКлючаДоступа(ТокенОбновления)
	
	Результат = Новый Структура;
	
	Результат.Вставить("refresh_token", ТокенОбновления);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолученияКодаАктивации

Функция КодАктивацииВБизнесСети(ТокенДоступа, ИдентификаторОрганизации, Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ВызватьИсключение НСтр("ru = 'Организация не зарегистрирована Бизнес-сети'");
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ПараметрыМетода.Вставить("ТокенДоступа",             ТокенДоступа);
	ПараметрыМетода.Вставить("Комментарий",              СтрШаблон(НСтр("ru = 'Ключ выдан пользователю 1С:Предприятия %1'"), Пользователи.ТекущийПользователь()));
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьКодАктивацииВБизнесСети(ПараметрыМетода);
	ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ДанныеКодаАктивацииИзJSON(ДанныеСервиса);
	
	Возврат Результат.КодАктивации;
	
КонецФункции

Функция ПараметрыКомандыПолучитьКодАктивацииВБизнесСети(ПараметрыМетода)
	
	Данные = ТелоЗапросаПолученияКодаАктивацииВБизнесСети(ПараметрыМетода.ИдентификаторОрганизации, ПараметрыМетода.Комментарий);
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Получение кода активации'");
	ПараметрыКоманды.Адрес          = "/access-keys";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Данные         = ЗначениеВJSON(Данные);
	ПараметрыКоманды.ВременныйТокен = ПараметрыМетода.ТокенДоступа;
	ПараметрыКоманды.ТипКонтента    = ТипКонтентаПриРаботеСТокенами();
	
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для выполнения операции.'"));
	ПараметрыКоманды.Ошибки.Вставить(422, НСтр("ru = 'Ошибка данных, переданных в теле запроса.'"));

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ТелоЗапросаПолученияКодаАктивацииВБизнесСети(ИдентификаторОрганизации, Комментарий)
	
	Результат = Новый Структура;
	
	Результат.Вставить("organizationId", ИдентификаторОрганизации);
	Результат.Вставить("app",            ПредставлениеПрикладногоРешения());
	Результат.Вставить("notes",          Комментарий);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеКлючаДоступаПоКодуАктивации

Функция КлючДоступаПоКодуАктивации(КодАктивации, НатуральныйИдентификаторОрганизации, Отказ = Ложь)
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("КодАктивации",                        КодАктивации);
	ПараметрыМетода.Вставить("НатуральныйИдентификаторОрганизации", НатуральныйИдентификаторОрганизации);
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьКлючДоступаПоКодуАктивации(ПараметрыМетода);
	ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ДанныеКлючаДоступаИзJSON(ДанныеСервиса);
		
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыПолучитьКлючДоступаПоКодуАктивации(ПараметрыМетода)
	
	Данные = ТелоЗапросаПолученияКлючаДоступаПоКодуАктивации(
		ПараметрыМетода.КодАктивации, 
		ПараметрыМетода.НатуральныйИдентификаторОрганизации);
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Получение токена по коду активации'");
	ПараметрыКоманды.Адрес          = "/auth/token/by-access-code";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Данные         = ЗначениеВJSON(Данные);
	ПараметрыКоманды.Аутентификация = Ложь;
	ПараметрыКоманды.ТипКонтента    = ТипКонтентаПриРаботеСТокенами();
	
	ПараметрыКоманды.Ошибки.Вставить(422, НСтр("ru = 'Одноразовый пароль не прошел проверку на корректность.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Одноразовый пароль уже был использован.'"));

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ТелоЗапросаПолученияКлючаДоступаПоКодуАктивации(КодАктивации, НатуральныйИдентификаторОрганизации)
	
	Результат = Новый Структура;
	
	Результат.Вставить("accessCode", КодАктивации);
	Результат.Вставить("cid",        ИдентификаторИнформационнойБазы());
	Результат.Вставить("legalId",    НатуральныйИдентификаторОрганизации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеКлючаДоступаПоТикетуИТС

Функция КлючДоступаПоТикетуИТС(ТикетИТС, Отказ = Ложь)
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("ТикетИТС", ТикетИТС);
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьКлючДоступаПоТикетуИТС(ПараметрыМетода);
	ДанныеСервиса = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Не ЗначениеЗаполнено(ДанныеСервиса) Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ДанныеКлючаДоступаИзJSON(ДанныеСервиса);
		
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыПолучитьКлючДоступаПоТикетуИТС(ПараметрыМетода)
	
	Данные = ТелоЗапросаПолученияКлючаДоступаПоТикетуИТС(ПараметрыМетода.ТикетИТС);
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Наименование   = НСтр("ru = 'Получение токена по тикету Интернет-поддержки'");
	ПараметрыКоманды.Адрес          = "/auth/token/by-its-onetime-ticket";
	ПараметрыКоманды.Метод          = "POST";
	ПараметрыКоманды.Данные         = ЗначениеВJSON(Данные);
	ПараметрыКоманды.Аутентификация = Ложь;
	ПараметрыКоманды.ТипКонтента    = ТипКонтентаПриРаботеСТокенами();
	
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для выполнения операции.'"));
	ПараметрыКоманды.Ошибки.Вставить(429, НСтр("ru = 'Превышено максимальное количество запросов.'"));

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ТелоЗапросаПолученияКлючаДоступаПоТикетуИТС(ТикетИТС)
	
	Результат = Новый Структура;
	
	Результат.Вставить("itsOnetimeTicket", ТикетИТС);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхОрганизацийПоНатуральнымИдентификаторам

Функция ПараметрыКомандыДанныеОрганизацииПоНатуральномуИдентификатору(ПараметрыМетода)
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	НатуральныеИдентификаторы = СтрСоединить(ПараметрыМетода.НатуральныеИдентификаторы, ", ");
	
	ПараметрыКоманды.Наименование             = НСтр("ru = 'Получение данных организации по натуральному идентификатору'");
	ПараметрыКоманды.Адрес                    = СтрШаблон("/organizations/search/by-legal-ids?legalIds=%1", НатуральныеИдентификаторы);
	ПараметрыКоманды.Метод                    = "GET";
	ПараметрыКоманды.Аутентификация           = Ложь;
	ПараметрыКоманды.ТипКонтента              = ТипКонтентаПриРаботеОрганизациями();
	
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена учетная запись для программы.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для выполнения операции.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Пользователь принадлежит другой учетной записи.'"));

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ДанныеОрганизацийИзJSON(ДанныеСервиса)
	
	Результат = Новый Массив;
	
	Для каждого ЭлементКоллекции Из ДанныеСервиса._embedded.items Цикл
		
		ТекущиеДанные = ДанныеОрганизацииИзJSON(ЭлементКоллекции);
		
		Результат.Добавить(ТекущиеДанные);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхОрганизацийПоИдентификатору

Функция ПараметрыКомандыДанныеОрганизацийПоИдентификаторам(ПараметрыМетода)
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ИдентификаторыОрганизаций = СтрСоединить(ПараметрыМетода.ИдентификаторыОрганизаций, ", ");;
	
	ПараметрыКоманды.Наименование             = НСтр("ru = 'Получение данных организации по натуральному идентификатору'");
	ПараметрыКоманды.Адрес                    = СтрШаблон("/organizations/search/by-ids?ids=%1", ИдентификаторыОрганизаций);
	ПараметрыКоманды.Метод                    = "GET";
	ПараметрыКоманды.Аутентификация           = Ложь;
	ПараметрыКоманды.ТипКонтента              = ТипКонтентаПриРаботеОрганизациями();
	
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена учетная запись для программы.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для выполнения операции.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Пользователь принадлежит другой учетной записи.'"));

	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ДанныеОрганизацииИзJSON(ДанныеСервиса)

	Результат = Новый Структура;
	
	// Основные сведения
	
	Результат.Вставить("Идентификатор",    ДанныеСервиса.id);
	Результат.Вставить("Наименование",     ДанныеСервиса.name);
	Результат.Вставить("Описание",         ЗначениеСервиса(ДанныеСервиса, "description"));
	Результат.Вставить("ИНН",              ЗначениеСервиса(ДанныеСервиса, "legalRequisites.inn"));
	Результат.Вставить("КПП",              ЗначениеСервиса(ДанныеСервиса, "legalRequisites.kpp"));
	
	// Дополнительные сведения
	
	Результат.Вставить("ДатаРегистрации",  Дата(1,1,1));
	Результат.Вставить("Факс",             "");
	Результат.Вставить("ОГРН",             "");
	Результат.Вставить("НаименованиеЕГРН", "");
	
	// Контактная информация
	
	Результат.Вставить("ЭлектроннаяПочта", ЗначениеСервиса(ДанныеСервиса, "contacts.email"));
	Результат.Вставить("Телефон",          ЗначениеСервиса(ДанныеСервиса, "contacts.phone"));
	Результат.Вставить("Сайт",             ЗначениеСервиса(ДанныеСервиса, "contacts.website"));
	Результат.Вставить("Адрес",            ЗначениеСервиса(ДанныеСервиса, "contacts.address"));

	Для каждого ЭлементКоллекции Из Результат Цикл
		Если ЭлементКоллекции.Значение = Неопределено Тогда
			Результат[ЭлементКоллекции.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхОрганизацийДоступныхПользователю

Функция ДанныеОрганизацииДоступныхПользователю(НатуральныйИдентификатор, Отказ = Ложь) Экспорт
	
	ПараметрыКоманды = ПараметрыКомандыДанныеОрганизацииДоступныхПользователю();
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыКомандыДанныеОрганизацииДоступныхПользователю()
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение данных организаций, доступных пользователю'");
	ПараметрыКоманды.Адрес        = "/organization-profiles";
	ПараметрыКоманды.Метод        = "GET";
	ПараметрыКоманды.ТипКонтента  = ТипКонтентаПриРаботеОрганизациями();
	
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена учетная запись для программы.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для выполнения операции.'"));
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Пользователь принадлежит другой учетной записи.'"));

	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

Процедура ВключитьИспользованиеОбменаБизнесСети()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Константы.ИспользоватьОбменБизнесСеть.Получить() Тогда
		Константы.ИспользоватьОбменБизнесСеть.Установить(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОписаниеРезультатаПодключенияОрганизацииКСервису(Организация = Неопределено)
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтатусПодключения", СтатусыПодключения().ТребуетсяИнтерактивноеПодключение);
	Результат.Вставить("Организация",       Организация);
	Результат.Вставить("Идентификатор",     "");
		
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьHTTPМетодСервиса(Соединение, Запрос, ПараметрыСоединения, ПараметрыКоманды, Отказ)
	
	Результат = Неопределено;
	
	Попытка
		
		Если ПараметрыКоманды.Метод = "DELETE" Тогда
			Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
		КонецЕсли;
		
		Ответ = Соединение.ВызватьHTTPМетод(ПараметрыКоманды.Метод, Запрос);
		
		КодСостояния = Ответ.КодСостояния;
		Данные = Ответ.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(Данные) Тогда
			Данные = ЗначениеИзСтрокиJSON(Данные);
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("КодСостояния",  КодСостояния);
		Результат.Вставить("ДанныеСервиса", Данные);
		
		Если КодСостояния = 302 Тогда
			АдресаРесурсаРедиректа = Ответ.Заголовки.Получить("Location");
			Если АдресаРесурсаРедиректа <> Неопределено Тогда
				Результат.Вставить("ДанныеСервиса", АдресаРесурсаРедиректа);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС
			+ ПараметрыКоманды.Метод + " "
			+ АдресСоединенияURL(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,
			ПараметрыКоманды.Адрес, ПараметрыСоединения.ЗащищенноеСоединение <> Неопределено)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
			
	КонецПопытки;

	Возврат Результат;
	
КонецФункции

// Отправка уведомления контрагенту об отправке электронного документа.
//
// Параметры:
//   ПараметрыУдаления - Структура - состав:
//     * Организация           - ОпределяемыйТип.Организация - организация документа.
//     * МассивИдентификаторов - Массив из Строка - идентификаторы ГУИД удаляемых документов.
//   Результат         - Структура - возвращаемые данные.
//   Отказ             - Булево - признак отказа выполнения.
//
Функция ОтправитьУведомлениеОбОтправке(Организация, Контрагент, МассивИдентификаторов, АдресПочты, Отказ) Экспорт
	
	ПараметрыМетода = Новый Структура;
	
	ПараметрыМетода.Вставить("Отправитель",           Организация);
	ПараметрыМетода.Вставить("Получатель",            Контрагент);
	ПараметрыМетода.Вставить("МассивИдентификаторов", МассивИдентификаторов);
	ПараметрыМетода.Вставить("ЭлектроннаяПочта",      АдресПочты);
	
	ПараметрыКоманды = ПараметрыКомандыОтправитьУведомлениеОбОтправке(ПараметрыМетода);
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Возврат Результат;
	
КонецФункции

Функция ОбновитьИнформациюОНовыхДокументахВСервисеАсинхронно(Знач ПараметрыОбновления) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Обновление информации о новых документах в сервисе ""1С:Бизнес-сеть"".'");
	ИмяПроцедуры        = "БизнесСеть.ОбновитьИнформациюОНовыхДокументахВСервисе";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыОбновления.ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыОбновления, ПараметрыВыполнения);
	
КонецФункции

Процедура ОбновитьИнформациюОНовыхДокументахВСервисе(Знач ПараметрыОбновления, Знач АдресРезультата) Экспорт
	
	НовыеДокументы = Новый Массив;
	
	ПодключенныеОрганизации = ПодключенныеОрганизации();
	
	Для каждого ВидДокумента Из ПараметрыОбновления.ВидыДокументов Цикл
		
		КоличествоДокументов = 0;
		
		Для каждого ТекущаяОрганизация Из ПодключенныеОрганизации Цикл
			
			КоличествоДокументовТекущегоВида = НовыеДокументыВСервисе(ТекущаяОрганизация.Организация, ВидДокумента).Количество();
			
			КоличествоДокументов = КоличествоДокументов + КоличествоДокументовТекущегоВида;
			
		КонецЦикла;
		
		Если КоличествоДокументов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеДокументы.Добавить(
			Новый Структура("ВидДокумента, КоличествоДокументов", 
				ВидДокумента, КоличествоДокументов));
				
	КонецЦикла;

	ПоместитьВоВременноеХранилище(НовыеДокументы, АдресРезультата);
	
КонецПроцедуры

// Фоновое задание Получение документов сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - см. ПараметрыКомандыСписокВходящихДокументов.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучениеДокументовСервиса(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	ПараметрыКоманды = ПараметрыКомандыСписокВходящихДокументов(ПараметрыЗапроса, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	Если Отказ Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция НовыеДокументыВСервисе(Организация, ВидДокумента)
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("Организация",    Организация);
	ПараметрыЗапроса.Вставить("ВидДокумента",   ВидДокумента);
	ПараметрыЗапроса.Вставить("ТолькоНовые",    Истина);
	ПараметрыЗапроса.Вставить("Страница",       1);
	ПараметрыЗапроса.Вставить("РазмерСтраницы", 101);
	ПараметрыЗапроса.Вставить("ДатаНачала",     Неопределено);
	ПараметрыЗапроса.Вставить("ДатаОкончания",  Неопределено);
	
	Отказ = Ложь;	
		
	ПараметрыКоманды = ПараметрыКомандыСписокВходящихДокументов(ПараметрыЗапроса, Отказ);
	
	НовыеДокументы = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Или Не ТипЗнч(НовыеДокументы) = Тип("Массив") Тогда
		
		ПолучитьСообщенияПользователю(Истина);
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	Возврат НовыеДокументы;
	
КонецФункции

#КонецОбласти

#Область ПараметрыКоманд

// Параметры команды получения документов
//
// Параметры:
//  ПараметрыМетода - Структура - состав:
//    * МассивСсылокНаОбъект    - Массив из Строка - идентификаторы документов сервиса.
//                              - Массив из ДокументСсылка - ссылки на документы.
//    * РежимВходящихДокументов - Булево - Истина для получения входящих документов, Ложь для исходящих.
//    * ВозвращатьДанные        - Булево - признак передачи данных документов.
//  Отказ           - Булево - признак ошибки.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса
//
Функция ПараметрыКомандыПолучитьДокументы(ПараметрыМетода, Пропускать404, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ПараметрыМетода.ИдентификаторОрганизации;
	
	ИдентификаторыДокументов = Новый Соответствие;
	Если ПараметрыМетода.Свойство("МассивСсылокНаОбъект") Тогда
		МассивДокументов = Новый Массив;
		
		Для каждого ЗначениеМассива Из ПараметрыМетода.МассивСсылокНаОбъект Цикл
			Если ТипЗнч(ЗначениеМассива) = Тип("Число") ИЛИ ТипЗнч(ЗначениеМассива) = Тип("Строка") Тогда
				УникальныйИдентификатор = ЗначениеМассива;
			Иначе
				УникальныйИдентификатор = Строка(ЗначениеМассива.УникальныйИдентификатор());
			КонецЕсли;
			МассивДокументов.Добавить(УникальныйИдентификатор);
			ИдентификаторыДокументов.Вставить(УникальныйИдентификатор, ЗначениеМассива);
		КонецЦикла; 
		Данные = ЗначениеВJSON(МассивДокументов);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыМетода.Вставить("ИдентификаторыДокументов", ИдентификаторыДокументов);
	
	Адрес = СтрШаблон("api/edi/v1/documents/byIdOrGuid?direction=%1",
		?(ПараметрыМетода.РежимВходящихДокументов, "INBOUND", "OUTBOUND"));
	Если ПараметрыМетода.Свойство("ВозвращатьДанные") Тогда
		Адрес = Адрес + СтрШаблон("&withData=%1", Формат(ПараметрыМетода.ВозвращатьДанные, "БЛ=false; БИ=true"));
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение документов по списку'");
	ПараметрыКоманды.Адрес  = Адрес;
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на получение документа.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, Пропускать404);
	
	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды удаления документов.
//
// Параметры:
//  ПараметрыМетода - Структура - состав:
//    * Организация              - ОпределяемыйТип.Организация - ссылка на организация.
//                               - Структура - реквизиты организации:
//                                   ** ИНН           - Строка - ИНН организации.
//                                   ** КПП           - Строка - КПП организации.
//                                   ** Наименование  - Строка - наименование организации.
//                                   ** Идентификатор - Строка - идентификатор организации в сервисе.
//    * РежимИсходящихДокументов - Булево - удаление среди входящих или исходящих документов.
//    * ИдентификаторыДокументов - Массив из Строка - список идентификаторов документов.
//  Отказ           - Булево - признак ошибки выполнения..
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыУдалитьДокументы(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	Если ТипЗнч(ПараметрыМетода.Организация) = Тип("Структура") Тогда
		ПараметрыКоманды.ИдентификаторОрганизации = ПараметрыМетода.Организация.Идентификатор;
		РеквизитыОрганизации = ПараметрыМетода.Организация;
	Иначе
		РеквизитыОрганизации = Неопределено;
		ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
		ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, РеквизитыОрганизации);
	КонецЕсли;
	
	Адрес = "api/edi/v1/organizations/%1/%2/documents?direction=%3";
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);

	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка удаления документов в 1С:Бизнес-сеть:'") + " " + ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыКоманды.Адрес = СтрШаблон(Адрес, Идентификаторы.ИНН, Идентификаторы.КПП,
		?(ПараметрыМетода.РежимИсходящихДокументов, "OUTBOUND", "INBOUND"));
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Удаление документов в сервисе'");
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Данные = ЗначениеВJSON(ПараметрыМетода.ИдентификаторыДокументов);
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на документ.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Организация или документ в сервисе не найден.'"));

	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды изменения статусов документов.
//
// Параметры:
//  ПараметрыМетода - Структура - состав:
//    * МассивДанных - Массив из Структура - где:
//      ** Идентификатор - Строка - идентификатор документа.
//      ** Ссылка        - Ссылка - ссылка документа.
//    * Статус       - Строка - новый статус "Загружен", "Отклонен".
//  Отказ           - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыИзменитьСтатусыДокументов(ПараметрыМетода, Отказ = Неопределено) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
	
	Данные = Неопределено;
	Если ПараметрыМетода.Свойство("МассивДанных") Тогда
		
		МассивДокументов = Новый Массив;
		Для каждого ЗначениеМассива Из ПараметрыМетода.МассивДанных Цикл
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("id", ЗначениеМассива.Идентификатор);
			Если ВРег(ПараметрыМетода.Статус) = ВРег("Отклонен") Тогда
				Если ЗначениеЗаполнено(ЗначениеМассива.Ссылка) Тогда
					СтруктураСтатуса.Вставить("documentGuid", Строка(ЗначениеМассива.Ссылка.УникальныйИдентификатор()));
				КонецЕсли;
				СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата отклонения:'") + ТекущаяДатаСеанса());
				СтруктураСтатуса.Вставить("deliveryStatus", "REJECTED");
			Иначе // По умолчанию статус "Загружен".
				СтруктураСтатуса.Вставить("documentGuid", Строка(ЗначениеМассива.Ссылка.УникальныйИдентификатор()));
				СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата загрузки:'") + ТекущаяДатаСеанса());
				СтруктураСтатуса.Вставить("deliveryStatus", "DELIVERED");
			КонецЕсли;
			МассивДокументов.Добавить(СтруктураСтатуса);
		КонецЦикла;
		Данные = ЗначениеВJSON(МассивДокументов);
		
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Изменение статусов документов'");
	ПараметрыКоманды.Адрес  = "api/edi/v1/documents/status";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа или документ в сервисе не найден.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Документ в сервисе не найден.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Параметры команды отправки приглашений контрагентам.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//   * Организация     - Ссылка - организация отправитель приглашения.
//   * Данные          - ТаблицаЗначений - список данных приглашаемых контрагентов:
//     ** ИНН          - Строка - ИНН контрагента.
//     ** КПП          - Строка - КПП контрагента.
//     ** Наименование - Строка - наименование контрагента.
//   * РольОтправителя - Строка - "Продавец", "Покупатель"
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыОтправкаПриглашенийКонтрагентам(ПараметрыМетода, Отказ = Неопределено) Экспорт
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
	
	РеквизитыОрганизации = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, РеквизитыОрганизации);
	
	СписокПриглашений = Новый Массив;
	ТекстОшибки = "";
	Для каждого РеквизитыКонтрагента Из ПараметрыМетода.Данные Цикл
		ДанныеПриглашения = Новый Структура;
		
		Идентификаторы = ИдентификаторыУчастника(РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП,
			РеквизитыКонтрагента.Наименование, Отказ, ТекстОшибки);
			
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				НСтр("ru = 'Ошибка отправки приглашения в 1С:Бизнес-сеть:'") + " " + ТекстОшибки, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеПриглашения.Вставить("inn",   Идентификаторы.ИНН);
		ДанныеПриглашения.Вставить("kpp",   Идентификаторы.КПП);
		ДанныеПриглашения.Вставить("title", РеквизитыКонтрагента.Наименование);
		ДанныеПриглашения.Вставить("email", РеквизитыКонтрагента.ЭлектроннаяПочта);
		СписокПриглашений.Добавить(ДанныеПриглашения);
	КонецЦикла;
	
	Если ПараметрыМетода.РольОтправителя = "Продавец" Тогда
		РольОтправителя = "shipper";
	ИначеЕсли ПараметрыМетода.РольОтправителя = "Покупатель" Тогда
		РольОтправителя = "customer";
	Иначе
		РольОтправителя = "general";
	КонецЕсли;
	
	ТекстОшибки = "";
	Идентификаторы = ИдентификаторыУчастника(РеквизитыОрганизации.ИНН, РеквизитыОрганизации.КПП,
		ПараметрыМетода.Организация, Отказ, ТекстОшибки);
		
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;

	Адрес = СтрШаблон("api/core/v1/organization/%1/%2/invitations?role=%3",
		Идентификаторы.ИНН, Идентификаторы.КПП, РольОтправителя);
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка приглашений контрагентам для регистрации в сервисе'");
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Адрес  = Адрес;
	ПараметрыКоманды.Данные = ЗначениеВJSON(СписокПриглашений);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Превышено максимальное количество приглашений или ошибка параметров.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для отправки приглашения.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена организация в сервисе.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

// Параметры команды отправки приглашения контрагенту.
//
// Параметры:
//  ПараметрыМетода	 - Структура - состав:
//   * Организация      - Ссылка - организация отправитель приглашения.
//   * Контрагент       - Ссылка - контрагент получатель приглашения.
//   * ЭлектроннаяПочта - Строка - адрес электронной почты контрагента для отправки приглашения.
//  Отказ			 - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыОтправкаПриглашения(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
		
	ПараметрыОрганизации = Неопределено;
	ПараметрыКонтрагента = Неопределено;
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Организация, ПараметрыОрганизации);
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Контрагент,  ПараметрыКонтрагента);
	
	Если Не ЗначениеЗаполнено(ПараметрыМетода.ЭлектроннаяПочта) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан адрес электронной почты контрагента.'")
			+ " " + ПараметрыМетода.Контрагент,,,, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	ИдентификаторыОрганизации = ИдентификаторыУчастника(ПараметрыОрганизации.ИНН,
		ПараметрыОрганизации.КПП, ПараметрыМетода.Организация, Отказ, ТекстОшибки);
	ИдентификаторыКонтрагента = ИдентификаторыУчастника(ПараметрыКонтрагента.ИНН,
		ПараметрыКонтрагента.КПП, ПараметрыМетода.Контрагент, Отказ, ТекстОшибки);
		
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Ошибка отправки приглашения в 1С:Бизнес-сеть:'") + " " + ТекстОшибки, "БизнесСеть");
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка приглашения регистрации в сервисе'");
	Адрес = СтрШаблон("api/core/v1/organizations/%1/%2/invitation?dstEmail=%3&dstTitle=%4&srcInn=%5&srcKpp=%6",
		ИдентификаторыКонтрагента.ИНН, ИдентификаторыКонтрагента.КПП,
		ПараметрыМетода.ЭлектроннаяПочта,
		КодироватьСтроку(ПараметрыКонтрагента.ОфициальноеНаименование, СпособКодированияСтроки.КодировкаURL),
		ИдентификаторыОрганизации.ИНН, ИдентификаторыОрганизации.КПП);
	ПараметрыКоманды.Адрес = Адрес;
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав для отправки приглашения.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найдена организация в сервисе.'"));
	
	Возврат ПараметрыКоманды;
	
КонецФункции

Функция ПараметрыКомандыОбновитьСтатус(ПараметрыМетода)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
	
	Если ПараметрыМетода.Свойство("МассивДанных") Тогда
		МассивДокументов = Новый Массив;
		Для каждого ЭлементМассива Из ПараметрыМетода.МассивДанных Цикл
			СтруктураСтатуса = Новый Структура;
			СтруктураСтатуса.Вставить("id", ЭлементМассива.Идентификатор);
			СтруктураСтатуса.Вставить("documentGuid", Строка(ЭлементМассива.Ссылка.УникальныйИдентификатор()));
			СтруктураСтатуса.Вставить("metaData", НСтр("ru = 'Дата загрузки:'") + ТекущаяДатаСеанса());
			МассивДокументов.Добавить(СтруктураСтатуса);
		КонецЦикла;
		Данные = ЗначениеВJSON(МассивДокументов);
	КонецЕсли;
	
	ПараметрыКоманды.Наименование = НСтр("ru = 'Обновление статуса документа'");
	ПараметрыКоманды.Адрес  = "api/edi/v1/documents/statusDelivered";
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа или документ в сервисе не найден.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Документ в сервисе не найден.'"));
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыОтправитьУведомлениеОбОтправке(ПараметрыМетода)

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Отправитель);
	
	РеквизитыКонтрагента = Неопределено; 
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(ПараметрыМетода.Получатель, РеквизитыКонтрагента);
	
	Адрес = "api/core/v1/organization/invitation/?dstEmail=%1&dstTitle=%2&attachDoc=true";
	ПараметрыКоманды.Наименование = НСтр("ru = 'Отправка уведомления об отправке документа'");
	ПараметрыКоманды.Адрес = СтрШаблон(Адрес, ПараметрыМетода.ЭлектроннаяПочта,
		КодироватьСтроку(РеквизитыКонтрагента.ОфициальноеНаименование, СпособКодированияСтроки.КодировкаURL));
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Права  = "bn_user";
	ПараметрыКоманды.Данные = ЗначениеВJSON(ПараметрыМетода.МассивИдентификаторов);
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка формирования приглашений.'"));
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав доступа к документу в сервисе.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найден документ в сервисе.'"));

	Возврат ПараметрыКоманды;

КонецФункции

// Параметры команды получения списка входящих документов.
//
// Параметры:
//  ПараметрыМетода - Структура - состав:
//    * Организация    - Ссылка - организация (используется для проверки прав).
//    * Контрагент     - Ссылка - ссылка на отбор по контрагенту.
//    * ВидДокумента   - Строка - вид документа отбора, например "ЗаказТовара", см. ВидыДокументовСервиса.
//    * ТолькоНовые    - Булево - режим получения только незагруженных электронных документов.
//    * ДатаНачала     - Дата   - начало выборки.
//    * ДатаОкончания  - Дата   - окончание выборки.
//    * РежимИсходящихДокументов - Булево - режим получения исходящих документов.
//    * Страница       - Число - номер страницы запрашиваемой в сервисе.
//    * РазмерСтраницы - Число - количество записей в странице.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровКомандыСервиса.
//
Функция ПараметрыКомандыСписокВходящихДокументов(ПараметрыМетода, Отказ = Неопределено) Экспорт

	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
	
	// Ограничение списка организаций по переданному параметру.
	Если ПараметрыМетода.Свойство("Организация") Тогда
		СписокОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыМетода.Организация);
	Иначе
		СписокОрганизаций = ПодключенныеОрганизации().ВыгрузитьКолонку("Организация");
		Если СписокОрганизаций.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Информационная база не подключена к сервису 1С:Бизнес-сеть.'"),,,, Отказ);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;

	РеквизитыОрганизации = Неопределено;
	
	МассивСтруктурыДанных = Новый Массив;
	Для каждого ЗначениеМассива Из СписокОрганизаций Цикл
		
		ТекстОшибки = "";
		
		Если ТипЗнч(ЗначениеМассива) = Тип("Структура") Тогда
			Идентификаторы = ИдентификаторыУчастника(ЗначениеМассива.ИНН, ЗначениеМассива.КПП,
				ЗначениеМассива.Наименование, Отказ, ТекстОшибки);
		Иначе
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации) Тогда
				РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокОрганизаций, "ИНН, КПП");
			КонецЕсли;
			
			Идентификаторы = ИдентификаторыУчастника(РеквизитыОрганизации.Получить(ЗначениеМассива).ИНН,
				РеквизитыОрганизации.Получить(ЗначениеМассива).КПП, ЗначениеМассива, Отказ, ТекстОшибки);
			КонецЕсли;
			
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				НСтр("ru = 'Ошибка чтения данных 1С:Бизнес-сеть по организации:'") + " "
				+ ТекстОшибки, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("inn", Идентификаторы.ИНН);
		СтруктураДанных.Вставить("kpp", Идентификаторы.КПП);
		МассивСтруктурыДанных.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Данные = ЗначениеВJSON(МассивСтруктурыДанных);
	
	ПараметрыЗапроса = Новый Структура;
	Если ПараметрыМетода.Свойство("Контрагент") Тогда
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыМетода.Контрагент, "ИНН, КПП");
		ТекстОшибки = "";
		Идентификаторы = ИдентификаторыУчастника(РеквизитыКонтрагента.ИНН, РеквизитыКонтрагента.КПП,
			ПараметрыМетода.Контрагент, Отказ, ТекстОшибки);
		Если Отказ Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
				НСтр("ru = 'Ошибка отбора по контрагенту при чтении документов 1С:Бизнес-сеть:'") + " "
				+ ТекстОшибки, "БизнесСеть");
			Возврат Неопределено;
		КонецЕсли;
		ПараметрыЗапроса.Вставить("senderInn", Идентификаторы.ИНН);
		ПараметрыЗапроса.Вставить("senderKpp", Идентификаторы.КПП);
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("ВидДокумента") Тогда
		ВидДокумента = КодироватьСтроку(XMLСтрока(ПараметрыМетода.ВидДокумента),
			СпособКодированияСтроки.КодировкаURL);
		ПараметрыЗапроса.Вставить("docType", "v8." + ВидДокумента);
	КонецЕсли;
	
	// Получение списка документов без данных.
	ПараметрыЗапроса.Вставить("withData", "false");

	Если ПараметрыМетода.Свойство("РежимИсходящихДокументов") Тогда
		ПараметрыЗапроса.Вставить("inbound", ?(ПараметрыМетода.РежимИсходящихДокументов,"false", "true"));
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("ТолькоНовые") Тогда
		ПараметрыЗапроса.Вставить("deliveryStatus", "SENT");
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("Страница") Тогда
		ПараметрыЗапроса.Вставить("page", ПараметрыМетода.Страница);
		ПараметрыЗапроса.Вставить("pageSize", ПараметрыМетода.РазмерСтраницы);
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("ДатаНачала") И ЗначениеЗаполнено(ПараметрыМетода.ДатаНачала) Тогда
		ПараметрыЗапроса.Вставить("fromTime ", Формат(ПараметрыМетода.ДатаНачала, "ДФ=dd-MM-yyyy-HH-mm-ss"));
	КонецЕсли;
	
	Если ПараметрыМетода.Свойство("ДатаОкончания") И ЗначениеЗаполнено(ПараметрыМетода.ДатаОкончания) Тогда
		ПараметрыЗапроса.Вставить("toTime ", Формат(ПараметрыМетода.ДатаОкончания, "ДФ=dd-MM-yyyy-HH-mm-ss"));
	КонецЕсли;
	
	СтрокаПараметровЗапроса = ПреобразоватьВСтрокуПараметровHTML(ПараметрыЗапроса);
	
	ПараметрыКоманды.Адрес  = СтрШаблон("api/edi/v1/organizations/documents%1", СтрокаПараметровЗапроса);
	ПараметрыКоманды.Метод  = "POST";
	ПараметрыКоманды.Данные = Данные;
	ПараметрыКоманды.Ошибки.Вставить(404, Истина);
		
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение списка документов'");
	ПараметрыКоманды.Ошибки.Вставить(403, НСтр("ru = 'Недостаточно прав на получение данных организации в сервисе 1С:Бизнес-сеть.'"));
	ПараметрыКоманды.Права = "bn_user";
	
	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДанных

// Формирует строку параметров для HTTP запроса в формате "?Параметр1=Значение1&Параметр2...".
//
// Параметры:
//   ПараметрыЗапроса - Структура - данные для строки, ключ - имя параметра, значение - устанавливаемое значение,
//                                  кириллические символы необходимо закодировать по алгоритму Base64.
//
Функция ПреобразоватьВСтрокуПараметровHTML(ПараметрыЗапроса)
	
	Результат = "";
	Для каждого ЭлементСтруктуры Из ПараметрыЗапроса Цикл
		Результат = Результат + ?(Результат = "", "?", "&") + ЭлементСтруктуры.Ключ + "=" + ЭлементСтруктуры.Значение;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Установка статус загрузки документа в информационную базы в сервисе.
//
Процедура УстановитьСтатусЗагружен(Организация, Идентификатор, Ссылка, Отказ) Экспорт
	
	МассивДанных = Новый Массив;
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Ссылка", Ссылка);
	СтруктураДанных.Вставить("Идентификатор", Идентификатор);
	МассивДанных.Добавить(СтруктураДанных);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("МассивДанных", МассивДанных);
	ПараметрыМетода.Вставить("Статус", "Загружен");
	ПараметрыМетода.Вставить("Организация", Организация);
	
	ПараметрыКоманды = ПараметрыКомандыОбновитьСтатус(ПараметрыМетода);
	ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
КонецПроцедуры

// Обработка ответа сервиса.
//
// Параметры:
//  ПараметрыКоманды - Структура         - параметры команды, см. БизнесСеть.ОписаниеПараметровКомандыСервиса.
//  КодСостояния     - Число             - код состояния ответа HTTP-соединения.
//  Данные           - Структура, Строка - возвращаемые данные сервиса.
//  Отказ            - Булево            - результат проверки.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемый результат обработки.
//
Функция ОбработатьОтветСервиса(ПараметрыСоединения, ПараметрыКоманды, КодСостояния, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	
	ДопустимыеКодыСостояния = Новый Массив;
	
	ДопустимыеКодыСостояния.Добавить(200);
	ДопустимыеКодыСостояния.Добавить(201);
	
	ПараметрыКоманды.Ошибки.Вставить(503, НСтр("ru = 'Сервис временно недоступен. Попробуйте выполнить действие позднее.'"));

	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) = Неопределено
		И ДопустимыеКодыСостояния.Найти(КодСостояния) = Неопределено
		И ПараметрыКоманды.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		
		Если КодСостояния >= 500 Тогда
			ПараметрыКоманды.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Внутренняя ошибка сервиса'"));
		ИначеЕсли КодСостояния >= 400 Тогда
			ПараметрыКоманды.Ошибки.Вставить(КодСостояния, НСтр("ru = 'Ошибка параметров запроса'"));
		КонецЕсли
	КонецЕсли;
	
	Если ПараметрыКоманды.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		
		ОписаниеОшибки = ПараметрыКоманды.Ошибки.Получить(КодСостояния);
		Если ОписаниеОшибки = Ложь Тогда
			Если ЗначениеЗаполнено(Данные) Тогда
				ОписаниеОшибки = НСтр("ru = 'Ошибка сервиса'");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		ИначеЕсли ОписаниеОшибки = Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Отказ = Истина;
		
		ПодробныйТекстОшибки = 
			ТекстОшибкиСервисаИзДанныхОтвета(КодСостояния, ОписаниеОшибки, ПараметрыКоманды, ПараметрыСоединения, Данные);
				
		Если ВыводитьПользователюСообщениеОбОшибках(ПараметрыКоманды) Тогда
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ПараметрыКоманды.Наименование,
				ПодробныйТекстОшибки, ОписаниеОшибки, "БизнесСеть");
		Иначе
			ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(ПодробныйТекстОшибки, "БизнесСеть");
		КонецЕсли;
			
		Результат = ОписаниеОшибки;
		
	Иначе
		
		Если ЗначениеЗаполнено(ПараметрыКоманды.ОбработкаРезультата) Тогда
			
			Если Не ЗначениеЗаполнено(Данные) Тогда
				Результат = Неопределено;
				Отказ = Истина;
			Иначе
				
				// Метод конвертации данных будет переработан в отдельный рекурсивный метод.
				Если ТипЗнч(ПараметрыКоманды.ОбработкаРезультата) = Тип("Структура")
					И ТипЗнч(Данные) = Тип("Структура") Тогда
					
					// Ожидается, что возвращается структура, которую необходимо привести к определенному составу.
					НовыеДанные = Новый Структура;
					Для каждого ЭлементСтруктуры Из ПараметрыКоманды.ОбработкаРезультата Цикл
						Если Данные.Свойство(ЭлементСтруктуры.Значение) Тогда
							НовыеДанные.Вставить(ЭлементСтруктуры.Ключ, Данные[ЭлементСтруктуры.Значение]);
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(ПараметрыКоманды.ОбработкаРезультата) = Тип("ТаблицаЗначений")
					И ТипЗнч(Данные) = Тип("Массив") Тогда
					
					// Ожидается таблица значений.
					НовыеДанные = ПараметрыКоманды.ОбработкаРезультата.Скопировать();
					Для каждого ЗначениеМассива Из Данные Цикл
						НоваяСтрока = НовыеДанные.Добавить();
						Для каждого КолонкаТаблицы Из НовыеДанные.Колонки Цикл
							Если ЗначениеМассива.Свойство(КолонкаТаблицы.Заголовок) Тогда
								НоваяСтрока[КолонкаТаблицы.Имя] = ЗначениеМассива[КолонкаТаблицы.Заголовок];
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
				ИначеЕсли ТипЗнч(ПараметрыКоманды.ОбработкаРезультата) = Тип("Массив")
					И ПараметрыКоманды.ОбработкаРезультата.Количество() = 1
					И ТипЗнч(Данные) = Тип("Массив") Тогда
					
					// В первой строке содержится структура массива.
					СоставСвойств = ПараметрыКоманды.ОбработкаРезультата[0];
					НовыеДанные = Новый Массив;
					Для каждого ЗначениеМассива Из Данные Цикл
						НовыйЭлемент = Новый Структура;
						Для каждого ЭлементСтруктуры Из СоставСвойств Цикл
							Если ЗначениеМассива.Свойство(ЭлементСтруктуры.Значение) Тогда
								НовыйЭлемент.Вставить(ЭлементСтруктуры.Ключ, ЗначениеМассива[ЭлементСтруктуры.Значение]);
							КонецЕсли;
						КонецЦикла;
						НовыеДанные.Добавить(НовыйЭлемент);
					КонецЦикла;
					
				КонецЕсли;
				
				Результат = НовыеДанные;
				
			КонецЕсли;
			
		Иначе
			Результат = Данные;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОшибкиСервисаИзДанныхОтвета(КодСостояния, ОписаниеОшибки, ПараметрыКоманды, ПараметрыСоединения, Данные)
	
	ТекстОшибкиСервиса = "";
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		
		Если Данные.Свойство("message") Тогда
			ТекстОшибкиСервиса = Данные.message;
		ИначеЕсли Данные.Свойство("error_description") Тогда
			ТекстОшибкиСервиса = Данные.error_description;
		ИначеЕсли Данные.Свойство("detail") Тогда
			ТекстОшибкиСервиса = Данные.detail;
		ИначеЕсли Данные.Свойство("title") Тогда
			ТекстОшибкиСервиса = Данные.title;
		КонецЕсли;
		
		ТекстОшибкиСервиса = НСтр("ru = 'Описание ошибки'") + ": " + ТекстОшибкиСервиса;
		
		ДанныеПоОшибке = Новый Массив;
		
		ДанныеПоОшибке.Добавить(ТекстОшибкиСервиса);
		
		Если Данные.Свойство("validationError") И ТипЗнч(Данные.validationError) = Тип("Массив") Тогда
			
			ДополнительноеОписание = "";
			
			Для каждого СтрокаОшибки Из Данные.validationError Цикл
				
				ПредставлениеПоля = "";
				
				Если СтрокаОшибки.Свойство("field") Тогда
					ПредставлениеПоля = " (" + СтрокаОшибки.field + ")";
				КонецЕсли;

				ДополнительноеОписание = ДополнительноеОписание + ?(ПустаяСтрока(ДополнительноеОписание), "", Символы.ПС)
					+ " - " 
					+ СтрокаОшибки.message 
					+ ПредставлениеПоля;
					
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДополнительноеОписание) Тогда
				ДанныеПоОшибке.Добавить(НСтр("ru = 'Дополнительное описание'") + ": " + ДополнительноеОписание);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Данные.Свойство("requestTraceId") Тогда
			ДанныеПоОшибке.Добавить(НСтр("ru = 'Идентификатор запроса'") + ": " + Данные.requestTraceId);
		ИначеЕсли Данные.Свойство("traceId") Тогда
			ДанныеПоОшибке.Добавить(НСтр("ru = 'Идентификатор запроса'") + ": " + Данные.traceId);
		КонецЕсли;
		
		Если Данные.Свойство("type") Тогда
			ДанныеПоОшибке.Добавить(НСтр("ru = 'Тип запроса'") + ": " + Данные.type);
		КонецЕсли;
		
		ТекстОшибкиСервиса = СтрСоединить(ДанныеПоОшибке, Символы.ПС);
		
	КонецЕсли;
	
	Результат = ОписаниеОшибки
		+ Символы.ПС + ПараметрыКоманды.Метод + " "
		+ АдресСоединенияURL(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,
			ПараметрыКоманды.Адрес, ПараметрыСоединения.ЗащищенноеСоединение <> Неопределено)
		+ Символы.ПС
		+ СтрШаблон(НСтр("ru = 'Код состояния: %1'"), КодСостояния)
		+ ?(ТекстОшибкиСервиса = "", "", Символы.ПС + ТекстОшибкиСервиса);
	
	Возврат Результат;
	
КонецФункции

// Преобразование данных документа сервиса во временном хранилище из Base64.
//
// Параметры:
//   МассивДокументов        - Массив из Структура - электронные документы.
//   ИмяСвойства             - Строка - наименование свойства.
//   УникальныйИдентификатор - УникальныйИдентификатор, Строка - идентификатор для сохранения хранилища.
//   Отказ                   - Булево - признак ошибки чтения данных.
//
// Возвращаемое значение:
//   Массив из Строка - список адресов временного хранилища с конвертированными данными.
//
Функция КонвертацияДанныхВХранилищеBase64(МассивДокументов, ИмяСвойства, УникальныйИдентификатор, Отказ)
	
	Если Не ЗначениеЗаполнено(МассивДокументов) ИЛИ ТипЗнч(МассивДокументов) <> Тип("Массив") Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
	Для Каждого ЭлементМассива Из МассивДокументов Цикл
		Если Не ЭлементМассива.Свойство(ИмяСвойства) Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		ДанныеДокумента = ЭлементМассива[ИмяСвойства];
		МассивВозврата.Добавить(ПоместитьВоВременноеХранилище(Base64Значение(ДанныеДокумента), УникальныйИдентификатор));
	КонецЦикла;
		
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДокументов

// Загрузить документы в информационную базу в фоне.
//
// Параметры:
//  ПараметрыЗапроса - ТаблицаЗначений - см. БизнесСеть.ДокументыОбмена, реквизит ЗагружаемыеДокументы.
//  АдресРезультата	 - Строка - адрес хранилища для сохранения результата загрузки.
//
Процедура ЗагрузитьДокументы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	ТекстОшибки = "";
	Отказ = Ложь;
	
	Для каждого СтрокаЗагрузки Из ПараметрыЗапроса Цикл
		
		// Упаковка по временные хранилища.
		Если ЭтоАдресВременногоХранилища(СтрокаЗагрузки.АдресХранилища) Тогда
			СтрокаЗагрузки.АдресХранилища = ПоместитьВоВременноеХранилище(СтрокаЗагрузки.АдресХранилищаЗначение);
			СтрокаЗагрузки.АдресХранилищаЗначение = Неопределено;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(СтрокаЗагрузки.ДанныеФайлаРазбора) Тогда
			СтрокаЗагрузки.ДанныеФайлаРазбора = ПоместитьВоВременноеХранилище(СтрокаЗагрузки.ДанныеФайлаРазбораЗначение);
			СтрокаЗагрузки.ДанныеФайлаРазбораЗначение = Неопределено;
		КонецЕсли;
	
		Если ЭтоАдресВременногоХранилища(СтрокаЗагрузки.ДанныеФайлаДопДанных) Тогда
			СтрокаЗагрузки.ДанныеФайлаДопДанных = ПоместитьВоВременноеХранилище(СтрокаЗагрузки.ДанныеФайлаДопДанныхЗначение);
			СтрокаЗагрузки.ДанныеФайлаДопДанныхЗначение = Неопределено;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(СтрокаЗагрузки.ДанныеФайлаКартинок) Тогда
			СтрокаЗагрузки.ДанныеФайлаКартинок = ПоместитьВоВременноеХранилище(СтрокаЗагрузки.ДанныеФайлаКартинокЗначение);
			СтрокаЗагрузки.ДанныеФайлаКартинокЗначение = Неопределено;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(СтрокаЗагрузки.АдресСтруктурыРазбораЭД) Тогда
			СтруктураРазбораЭД = СтрокаЗагрузки.АдресСтруктурыРазбораЭДЗначение;
			СтруктураРазбораЭД.Вставить("СтрокаОбъекта", СтрокаЗагрузки.АдресСтруктурыРазбораЭДЗначение.ДеревоРазбора.Строки[0].Строки[0]);
			
			ЗаполнитьПрайсЛистВДереве(СтруктураРазбораЭД.СтрокаОбъекта, СтрокаЗагрузки.ИдентификаторыПрайсЛистов);

			СтрокаЗагрузки.АдресСтруктурыРазбораЭД = ПоместитьВоВременноеХранилище(СтруктураРазбораЭД);
			СтрокаЗагрузки.АдресСтруктурыРазбораЭДЗначение = Неопределено;
		КонецЕсли;
		
		ОбменСКонтрагентамиВнутренний.СформироватьДокументИБ(СтрокаЗагрузки, СтрокаЗагрузки.СсылкаНаДокумент,
			ТекстОшибки, Истина, Ложь, Отказ);
		Если Не Отказ Тогда
			УстановитьСтатусЗагружен(СтрокаЗагрузки.Организация, СтрокаЗагрузки.Идентификатор, СтрокаЗагрузки.СсылкаНаДокумент, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗапроса, АдресРезультата);
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка загрузки документа %1:
			|%2'"), СтрокаЗагрузки.Документ, ТекстОшибки);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации());
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			ТекстСообщения, "БизнесСеть");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОЗагружаемомДокументеИБ(СтрокаДанных, ДанныеСервиса, РежимИсходящихДокументов)
	
	Если ЗначениеЗаполнено(ДанныеСервиса.sentDate) Тогда
		СтрокаДанных.ДатаДокумента = БизнесСетьКлиентСервер.ДатаИзUnixTime(ДанныеСервиса.sentDate);
	КонецЕсли;
	СтрокаДанных.Загружен = ?(ДанныеСервиса.deliveryStatus = "SENT", Истина, Ложь);
	СтрокаДанных.ИдентификаторВнутренний = ДанныеСервиса.documentGuid;
	
	Если РежимИсходящихДокументов Тогда
		Если ДанныеСервиса.deliveryStatus = "SENT" Тогда
			СтрокаДанных.Статус = БизнесСетьКлиентСервер.Статусы().Отправлен;
		ИначеЕсли ДанныеСервиса.deliveryStatus = "DELIVERED" Тогда
			СтрокаДанных.Статус = БизнесСетьКлиентСервер.Статусы().Доставлен;
		ИначеЕсли ДанныеСервиса.deliveryStatus = "REJECTED" Тогда
			СтрокаДанных.Статус = БизнесСетьКлиентСервер.Статусы().Отклонен;
		КонецЕсли;
	Иначе
		Если ДанныеСервиса.deliveryStatus = "SENT" Тогда
			СтрокаДанных.Статус = БизнесСетьКлиентСервер.Статусы().Новый;
		ИначеЕсли ДанныеСервиса.deliveryStatus = "DELIVERED" Тогда
			СтрокаДанных.Статус = БизнесСетьКлиентСервер.Статусы().Загружен;
		ИначеЕсли ДанныеСервиса.deliveryStatus = "REJECTED" Тогда
			СтрокаДанных.Статус = БизнесСетьКлиентСервер.Статусы().Отклонен;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПрайсЛистВДереве(ДанныеДерева, ИдентификаторыПрайсЛистов)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторыПрайсЛистов) Тогда
		Возврат;
	КонецЕсли;	
	
	ОбщийМодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложения");
	
	ПрайсЛисты = ОбщийМодульТорговыеПредложения.ПрайсЛистыПоИдентификаторам(ИдентификаторыПрайсЛистов);
	
	Если Не ЗначениеЗаполнено(ПрайсЛисты) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПрайсЛиста = ДанныеДерева.Строки.Найти("ПрайсЛист", "Реквизит");
	
	Если СтрокаПрайсЛиста = Неопределено Тогда
		ЭлектронноеВзаимодействиеСлужебный.ДобавитьРеквизитШапкиОбъекта(
			ДанныеДерева,
			"ПрайсЛист",
			ПрайсЛисты[0]);
	Иначе
		СтрокаПрайсЛиста.ЗначениеРеквизита = ПрайсЛисты[0];
	КонецЕсли;
	
КонецПроцедуры

Функция АдресаВременныхХранилищПолученныхДокументов(Знач Результат, Знач УникальныйИдентификатор, Знач ЗагрузкаПредставления, Отказ) Экспорт
	
	Если Не ЗагрузкаПредставления Тогда // Открытие документов представления.
		АдресаВременныхХранилищДокументов = КонвертацияДанныхВХранилищеBase64(Результат, "documentData", УникальныйИдентификатор, Отказ);
	Иначе
		АдресаВременныхХранилищДокументов = КонвертацияДанныхВХранилищеBase64(Результат, "documentPresentationData", УникальныйИдентификатор, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Чтение электронного документа'");
		ПодробныйТекстОшибки = НСтр("ru = 'Внутренняя ошибка чтения данных 1С:Бизнес-сеть. Ошибка формата.'");
		ТекстОшибки = НСтр("ru = 'Внутренняя ошибка чтения данных 1С:Бизнес-сеть.'");
		ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат АдресаВременныхХранилищДокументов;
	
КонецФункции

#КонецОбласти

#Область РаботаСКлючамиДоступа

#Область ЛокальноеХранение

Функция КлючДоступаИзЛокальногоХранилища(ИдентификаторОрганизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИдентификаторОрганизации, 
		ИдентификаторХраненияКлючаДоступа());
		
	Если ЗначениеЗаполнено(Результат) 
		И Не ИдентификаторБазыКлючаДоступаАктуален(Результат, ИдентификаторОрганизации) Тогда
		
		Результат = Неопределено;
	КонецЕсли;	
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторБазыКлючаДоступаАктуален(КлючДоступа, ИдентификаторОрганизации)
	
	Если Не ЗначениеЗаполнено(КлючДоступа) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не КлючДоступа.Свойство("ИдентификаторИнформационнойБазы") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИдентификаторИнформационнойБазы() <> КлючДоступа.ИдентификаторИнформационнойБазы Тогда
		УдалитьКлючДоступаИзЛокальногоХранилища(ИдентификаторОрганизации);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьКлючДоступаИзЛокальногоХранилища(ИдентификаторОрганизации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(
		ИдентификаторОрганизации, 
		ИдентификаторХраненияКлючаДоступа());
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаписатьКлючДоступаВЛокальноеХранилище(ИдентификаторОрганизации, ДанныеТокена)
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан идентификатор организации'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
		ИдентификаторОрганизации, 
		ДанныеТокена, 
		ИдентификаторХраненияКлючаДоступа());
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция СрокТокенаДоступаАктуален(КлючДоступа)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(КлючДоступа) Тогда
		Результат = КлючДоступа.СрокДействияТокенаДоступа > ТекущаяДатаСеанса();
	КонецЕсли;
			
	Возврат Результат;
	
КонецФункции

Функция СрокТокенаОбновленияАктуален(КлючДоступа)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(КлючДоступа) Тогда
		Результат = КлючДоступа.СрокДействияТокенаОбновления > ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКлючаДоступаИзJSON(ДанныеСервиса)
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТокенДоступа",                    ДанныеСервиса.access_token);
	Результат.Вставить("ТокенОбновления",                 ДанныеСервиса.refresh_token);
	Результат.Вставить("СрокДействияТокенаДоступа",       ТекущаяДатаСеанса() + ДанныеСервиса.access_token_expires);
	Результат.Вставить("СрокДействияТокенаОбновления",    ТекущаяДатаСеанса() + ДанныеСервиса.refresh_token_expires);
	Результат.Вставить("ТипТокена",                       ДанныеСервиса.token_type);
	Результат.Вставить("ИдентификаторИнформационнойБазы", ИдентификаторИнформационнойБазы());
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКодаАктивацииИзJSON(СтрокаJSON)
	
	ДанныеСервиса = ЗначениеИзСтрокиJSON(СтрокаJSON);
	
	Результат = Новый Структура;
	
	Результат.Вставить("КодАктивации",     ДанныеСервиса.accessCode);
	Результат.Вставить("ДатаАктуальности", ПрочитатьДатуJSON(ДанныеСервиса.accessCodeExpirationDate, ФорматДатыJSON.ISO));
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторХраненияКлючаДоступа()
	
	Возврат "БизнесСетьТокенОрганизации";
	
КонецФункции

Функция КлючДоступаБизнесСети(
			ИдентификаторОрганизации, 
			ПринудительноОбновлятьКлючДоступа = Ложь, 
			Отказ = Ложь)
		
	Организация = ОрганизацияПоИдентификатору(ИдентификаторОрганизации);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ВызватьИсключение НСтр("ru = 'Не найдена организация по идентификатору.'");
	КонецЕсли;
		
	НачатьТранзакцию();
	
	Попытка
		
		// Блокировка необходима для монопольного доступа к токену, при его обновлении.
		// Напрямую заблокировать регистр безопасного хранилище возможности нет. Поэтому блокировку
		// приходится устанавливать на библиотечный регистр и работать одновременно с двумя регистрами.
		// Библиотечный регистр используется для управления блокировкой. 
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОрганизацииБизнесСеть");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		КлючДоступа = ПолучитьОбновитьКлючДоступа(ИдентификаторОрганизации, ПринудительноОбновлятьКлючДоступа, Отказ);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		СообщитьОбОшибкеЗаписатьВЖурнал("НеУдалосьПрочитатьОбновитьКлючДоступа", Отказ);
	КонецПопытки;

	Возврат КлючДоступа;
	
КонецФункции

Функция ПолучитьОбновитьКлючДоступа(ИдентификаторОрганизации, ПринудительноОбновлятьКлючДоступа, Отказ)
	
	Результат = Неопределено;
	
	КлючДоступа = КлючДоступаИзЛокальногоХранилища(ИдентификаторОрганизации);
	
	Если ЗначениеЗаполнено(КлючДоступа) Тогда
		
		Если ТребуетсяПовторноеПодключениеОрганизации(Неопределено, ИдентификаторОрганизации) Тогда
			СообщитьОбОшибкеЗаписатьВЖурнал("ТокенОбновленияИнвалидирован", Отказ);
			Возврат Результат;
		КонецЕсли;
		
		Если Не СрокТокенаОбновленияАктуален(КлючДоступа) Тогда
			СообщитьОбОшибкеЗаписатьВЖурнал("ЗакончилсяСрокТокенаОбновления", Отказ);
			Возврат Результат;
		КонецЕсли;
		
		Если Не СрокТокенаДоступаАктуален(КлючДоступа) 
			ИЛИ ПринудительноОбновлятьКлючДоступа Тогда
			
			КлючДоступа = ОбновитьКлючДоступа(ИдентификаторОрганизации, КлючДоступа.ТокенОбновления, Отказ);
		КонецЕсли;
		
	Иначе
		
		ПодключитьОрганизациюПоТикетуИТС(ИдентификаторОрганизации, Отказ);
		
		Если Отказ Тогда
			Возврат Результат;
		КонецЕсли;
		
		КлючДоступа = КлючДоступаИзЛокальногоХранилища(ИдентификаторОрганизации);
		
	КонецЕсли;
	
	Результат = КлючДоступа;
	
	Возврат Результат; 
	
КонецФункции

Функция СтрокаАутентификацииПоШаблону(ТокенДоступа)
	
	Результат = СтрШаблон("Bearer %1", ТокенДоступа);
	
	Возврат Результат;
	
КонецФункции

Процедура ПриостановитьДоступКСервису(ИдентификаторОрганизации)
	
	Организация = ОрганизацияПоИдентификатору(ИдентификаторОрганизации);
	
	ИзменитьПризнакПовторногоПодключения(Организация, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыПодключенияОрганизации

Функция СтатусПодключениеОрганизацииКСервису(Организация) Экспорт
	
	ИдентификаторОрганизации = ИдентификаторОрганизации(Организация);
	
	ЕстьИдентификаторБизнесСети = ЗначениеЗаполнено(ИдентификаторОрганизации);
	
	Если Не ЕстьИдентификаторБизнесСети Тогда
		Возврат СтатусыПодключения().ТребуетсяИнтерактивноеПодключение;
	КонецЕсли;
	
	КлючДоступа = КлючДоступаИзЛокальногоХранилища(ИдентификаторОрганизации);
	
	Если ТребуетсяПовторноеПодключениеОрганизации(Организация) Тогда
		Возврат СтатусыПодключения().ТребуетсяПовторноеПодключение;
	КонецЕсли;
	
	Если СрокТокенаОбновленияАктуален(КлючДоступа) Тогда
		Возврат СтатусыПодключения().Подключена;
	КонецЕсли;
		
	Если ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Возврат СтатусыПодключения().ТребуетсяОбращениеКСервису;
	Иначе
		Возврат СтатусыПодключения().ТребуетсяИнтерактивноеПодключение;
	КонецЕсли;
	
КонецФункции

Функция СтатусыПодключения()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТребуетсяИнтерактивноеПодключение", "ТребуетсяИнтерактивноеПодключение");
	Результат.Вставить("Подключена",                        "Подключена");
	Результат.Вставить("ТребуетсяОбращениеКСервису",        "ТребуетсяОбращениеКСервису");
	Результат.Вставить("ТребуетсяПовторноеПодключение",     "ТребуетсяПовторноеПодключение");
	
	Возврат Результат;
	
КонецФункции

Функция ТребуетсяИнтерактивноеПодключениеОрганизации(Организация) Экспорт
	
	СтатусПодключениеОрганизации = СтатусПодключениеОрганизацииКСервису(Организация);
	
	Результат = СтатусПодключениеОрганизации = СтатусыПодключения().ТребуетсяИнтерактивноеПодключение;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусыПодключенияОрганизаций()
	
	ЗаполненыДанныеАутентификацииПользователя = 
		ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();

	ПодключенныеОрганизации = ПодключенныеОрганизации();
	
	ПодключенныеОрганизации.Колонки.Добавить("СтатусПодключения", Новый ОписаниеТипов("Строка"));
	
	Для каждого ЭлементКоллекции Из ПодключенныеОрганизации Цикл
		
		КлючДоступа = КлючДоступаИзЛокальногоХранилища(ЭлементКоллекции.Идентификатор);
		
		Если ТребуетсяПовторноеПодключениеОрганизации(ЭлементКоллекции.Организация) Тогда
			ЭлементКоллекции.СтатусПодключения = СтатусыПодключения().ТребуетсяПовторноеПодключение;
			Продолжить;
		КонецЕсли;
		
		Если СрокТокенаОбновленияАктуален(КлючДоступа) Тогда
			ЭлементКоллекции.СтатусПодключения = СтатусыПодключения().Подключена;
			Продолжить;
		КонецЕсли;
		
		Если ЗаполненыДанныеАутентификацииПользователя Тогда
			ЭлементКоллекции.СтатусПодключения = СтатусыПодключения().ТребуетсяОбращениеКСервису;
		Иначе
			ЭлементКоллекции.СтатусПодключения = СтатусыПодключения().ТребуетсяИнтерактивноеПодключение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодключенныеОрганизации;
	
КонецФункции

Процедура УдалитьИдентификаторОрганизации(Организация)
	
	НаборЗаписей = РегистрыСведений.ОрганизацииБизнесСеть.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Отключение организаций от сервиса.
//
// Параметры:
//  СписокОрганизаций			 - Массив из ОпределяемыйТип.Организация - ссылки на отключаемые организации.
//  РежимУдаления				 - Булево - Истина - отключение в сервисе, Ложь - только локально.
//  Отказ						 - Булево - результат исполнения.
//
Процедура ОтключитьОрганизации(СписокОрганизаций, Отказ = Ложь) Экспорт
	
	ИдентификаторыОрганизаций = ИдентификаторыОрганизаций(СписокОрганизаций);
	
	НачатьТранзакцию();
	
	Попытка
		
		Для каждого ЭлементКоллекции Из ИдентификаторыОрганизаций Цикл
			
			УдалитьИдентификаторОрганизации(ЭлементКоллекции.Организация);
			
			Если ЗначениеЗаполнено(ЭлементКоллекции.Идентификатор) Тогда
				УдалитьКлючДоступаИзЛокальногоХранилища(ЭлементКоллекции.Идентификатор);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеОрганизации

Функция ДанныеОрганизации(Организация)
	
	Результат = Новый Структура;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьДанныеЮрФизЛица(Организация, Результат);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеДляРегистрацииОрганизацииВБизнесСети(Организация)
	
	ДанныеОрганизации = ДанныеОрганизации(Организация);
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИдентификаторКлиента",              ИдентификаторИнформационнойБазы());
	Результат.Вставить("НаименованиеКлиентскогоПриложения", ПредставлениеПрикладногоРешения());
	Результат.Вставить("ИдентификаторОрганизации",          НатуральныйИдентификаторОрганизации(ДанныеОрганизации));
	Результат.Вставить("НаименованиеОрганизации",           ДанныеОрганизации.ПолноеНаименование);
	Результат.Вставить("Телефон",                           ДанныеОрганизации.Телефоны);
	Результат.Вставить("Адрес",                             ДанныеОрганизации.ФактическийАдрес);
	
	Результат.Вставить("ЭлектроннаяПочта",                  "");
	ДанныеОрганизации.Свойство("ЭлектроннаяПочта", Результат.ЭлектроннаяПочта);
	
	Результат.Вставить("АдресИдентификатор",                "");
	ДанныеОрганизации.Свойство("ФактическийАдресИдентификатор", Результат.АдресИдентификатор);
	
	Для каждого ЭлементКоллекции Из Результат Цикл
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			Результат[ЭлементКоллекции.Ключ] = "";
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыКонтрагентов

Функция НовыйДанныеКонтрагентовБизнесСети()
	
	ДанныеКонтрагентов = Новый ТаблицаЗначений;
	ДанныеКонтрагентов.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентEDI.Тип);
	ДанныеКонтрагентов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));

	Возврат ДанныеКонтрагентов;
	
КонецФункции

Процедура НайтиИдентификаторыКонтрагентовВКэшеБизнесСети(ДанныеКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Данные", ДанныеКонтрагентов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Идентификатор КАК Идентификатор,
	|	Данные.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&Данные КАК Данные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыБизнесСеть.Идентификатор КАК Идентификатор,
	|	Данные.Контрагент КАК Контрагент
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыБизнесСеть КАК КонтрагентыБизнесСеть
	|		ПО (КонтрагентыБизнесСеть.Контрагент = Данные.Контрагент)";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКэша = Результат.Выгрузить();
	ДанныеКэша.Индексы.Добавить("Контрагент");
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		ЗаписьКэша = ДанныеКэша.Найти(ДанныеКонтрагента.Контрагент, "Контрагент");
		Если ЗаписьКэша = Неопределено Или ПустаяСтрока(ЗаписьКэша.Идентификатор) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКонтрагента.КонтрагентНайден = Истина;
		ДанныеКонтрагента.Идентификатор = ЗаписьКэша.Идентификатор;
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиКонтрагентовПоИдентификаторамВКэшеБизнесСети(ДанныеКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Данные", ДанныеКонтрагентов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Идентификатор КАК Идентификатор,
	|	Данные.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&Данные КАК Данные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыБизнесСеть.Контрагент КАК Контрагент,
	|	Данные.Идентификатор КАК Идентификатор
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыБизнесСеть КАК КонтрагентыБизнесСеть
	|		ПО (КонтрагентыБизнесСеть.Идентификатор = Данные.Идентификатор)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКэша = Результат.Выгрузить();
	ДанныеКэша.Индексы.Добавить("Идентификатор");
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		ЗаписьКэша = ДанныеКэша.Найти(ДанныеКонтрагента.Идентификатор, "Идентификатор");
		Если ЗаписьКэша = Неопределено Или Не ЗначениеЗаполнено(ЗаписьКэша.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКонтрагента.КонтрагентНайден = Истина;
		ДанныеКонтрагента.Контрагент = ЗаписьКэша.Контрагент;
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиКонтрагентовПоНатуральнымКлючам(ДанныеКонтрагентов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Данные", ДанныеКонтрагентов);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.Идентификатор КАК Идентификатор,
	|	Данные.ИНН КАК ИНН,
	|	Данные.КПП КАК КПП
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&Данные КАК Данные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИНН,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Данные.ИНН КАК ИНН,
	|	Данные.КПП КАК КПП,
	|	Данные.Идентификатор КАК Идентификатор
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.ИНН = Данные.ИНН)
	|			И (Контрагенты.КПП = Данные.КПП)
	|";
	
	ИмяСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Контрагенты", "Справочник." + ИмяСправочникаКонтрагенты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.ИНН", "Контрагенты." + РеквизитИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.КПП", "Контрагенты." + РеквизитКПП);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИнформационнойБазы = Результат.Выгрузить();
	ДанныеИнформационнойБазы.Индексы.Добавить("Идентификатор");
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		ЗаписьИнформационнойБазы = ДанныеИнформационнойБазы.Найти(ДанныеКонтрагента.Идентификатор, "Идентификатор");
		Если ЗаписьИнформационнойБазы = Неопределено
			Или Не ЗначениеЗаполнено(ЗаписьИнформационнойБазы.Контрагент) Тогда
			ДанныеКонтрагента.КонтрагентНайден = Ложь;
		Иначе
			ДанныеКонтрагента.КонтрагентНайден = Истина;
			ДанныеКонтрагента.Контрагент = ЗаписьИнформационнойБазы.Контрагент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНатуральныеИдентификаторыКонтрагентов(ДанныеКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Данные", ДанныеКонтрагентов);
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	&Данные КАК Данные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП
	|ИЗ
	|	Данные КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Ссылка = Данные.Контрагент)";
	
	ИмяСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Контрагенты", "Справочник." + ИмяСправочникаКонтрагенты);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.ИНН", "Контрагенты." + РеквизитИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.КПП", "Контрагенты." + РеквизитКПП);
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИнформационнойБазы = Результат.Выгрузить();
	ДанныеИнформационнойБазы.Индексы.Добавить("Контрагент");
	
	Для Каждого ДанныеКонтрагента Из ДанныеКонтрагентов Цикл
		ЗаписьИнформационнойБазы = ДанныеИнформационнойБазы.Найти(ДанныеКонтрагента.Контрагент, "Контрагент");
		Если ЗаписьИнформационнойБазы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, ЗаписьИнформационнойБазы);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйОписаниеОшибкиПоискаКонтрагентов(ТипОшибки, ТекстОшибки)

	Возврат Новый Структура("ТипОшибки, ТекстОшибки", ТипОшибки, ТекстОшибки);
	
КонецФункции

#КонецОбласти

#Область КонстантыДляРаботыССервисом

Функция ДлинаСтрокиПредставленияПрикладногоРешения()
	
	Возврат 70;
	
КонецФункции

Функция ТипКонтентаПриРаботеСТокенами()
	
	Результат = "application/vnd.1cbn.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ТипКонтентаПриРаботеОрганизациями()
	
	Результат = "application/vnd.1cbn.v1+json";
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеПрикладногоРешения()
	
	МаксимальнаяДлинаСтроки = ДлинаСтрокиПредставленияПрикладногоРешения();
	
	ВерсияПрикладногоРешения = Метаданные.Версия;
	ИмяПрикладногоРешения    = Лев(Метаданные.Синоним, МаксимальнаяДлинаСтроки - (СтрДлина(ВерсияПрикладногоРешения) + 1));
	
	Результат = СтрШаблон("%1 %2", ИмяПрикладногоРешения, ВерсияПрикладногоРешения);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОшибкиПодключенияОрганизации()
	
	Результат = НСтр("ru = 'Не удалось подключить организацию к Бизнес-сети.'") 
		+ БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации();
		
	Возврат Результат;	
		
КонецФункции

Функция ТекстОшибкиПотериДоступа(Расширенный = Ложь)
	
	Результат = НСтр("ru = 'Доступ к сервису 1С:Бизнес-сеть приостановлен.
		|Необходимо повторное подключение организации к Бизнес-сети.'");
	
	Если Расширенный Тогда
		Результат = Результат + БизнесСетьКлиентСервер.ПодробностиВЖурналеРегистрации();
	КонецЕсли;
	
	Возврат Результат;	
		
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Получить регионы контактной информации
//
// Параметры:
//  ЗначенияПолей - Строка - контактная информация в XML.
//  Представление - Строка - представление адреса.
//
Процедура ПолучитьРегионыКонтактнойИнформации(ЗначенияПолей, Представление) Экспорт
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначенияПолей);
	
	Если ВРег(СведенияОбАдресе.ТипАдреса) = ВРег("ВСвободнойФорме") Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОбАдресе.МуниципальноеПредставление = "";
	СведенияОбАдресе.Представление = "";
	СведенияОбАдресе.Индекс = "";
	СведенияОбАдресе.Улица = "";
	СведенияОбАдресе.Здание = Новый Структура("ТипЗдания, Номер");
	СведенияОбАдресе.Корпуса.Очистить();
	СведенияОбАдресе.Помещения.Очистить();
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
		РаботаСАдресами.ПоляАдресаВJSON(СведенияОбАдресе),, Перечисления.ТипыКонтактнойИнформации.Адрес);

	Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЗначенияПолей,
		Новый Структура("ВключатьСтрануВПредставление, ФорматАдреса", Истина, "ФИАС"));
	Если ПустаяСтрока(Представление) Тогда
		Представление = СведенияОбАдресе.Страна;
	КонецЕсли;

КонецПроцедуры

// Представление последнего региона в адресе.
//
// Параметры:
//  Адрес - Строка - адрес во внутреннем формате JSON, XML.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Строка - значение последнего заполненного уровня региона.
//
Функция ПредставлениеПоследнегоРегионаАдреса(Адрес, Ошибка) Экспорт
	
	Сведения = РаботаСАдресами.СведенияОбАдресе(Адрес);
	Если Не ЗначениеЗаполнено(Сведения) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	Если Сведения.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Сведения.НаселенныйПункт) Тогда
		Результат = Сведения.НаселенныйПункт + " " + Сведения.НаселенныйПунктСокращение;
	ИначеЕсли Сведения.Свойство("Город") И ЗначениеЗаполнено(Сведения.Город) Тогда
		Результат =  Сведения.Город + " " + Сведения.ГородСокращение;
	ИначеЕсли Сведения.Свойство("Район") И ЗначениеЗаполнено(Сведения.Район) Тогда
		Результат =  Сведения.Район + " " + Сведения.РегионСокращение;
	ИначеЕсли Сведения.Свойство("Регион") И ЗначениеЗаполнено(Сведения.Регион) Тогда
		Результат =  Сведения.Регион + " " + Сведения.РегионСокращение;
	ИначеЕсли Сведения.Свойство("Страна") И ЗначениеЗаполнено(Сведения.Страна) Тогда
		Результат =  Сведения.Страна;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Идентификатор последнего региона в адресе.
//
// Параметры:
//  Адрес - Строка - адрес во внутреннем формате JSON, XML.
//  Отказ - Булево - признак ошибки выполнения.
// 
// Возвращаемое значение:
//  Строка - значение последнего заполненного уровня региона.
//
Функция ИдентификаторПоследнегоРегионаАдреса(Адрес, КодСтраны)
	
	Сведения = РаботаСАдресами.СведенияОбАдресе(Адрес, Новый Структура("КодыАдреса", Истина));
	Если Не ЗначениеЗаполнено(Сведения) ИЛИ НЕ ЗначениеЗаполнено(Сведения.Идентификаторы) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сведения.КодСтраны) Тогда
		КодСтраны = Сведения.КодСтраны;
	Иначе
		КодСтраны = "643"; // Россия
	КонецЕсли;
	
	Идентификаторы = Сведения.Идентификаторы;
	
	Результат = "";
	Если Идентификаторы.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Идентификаторы.НаселенныйПункт) Тогда
		Результат =  Идентификаторы.НаселенныйПункт;
	ИначеЕсли Идентификаторы.Свойство("Город") И ЗначениеЗаполнено(Идентификаторы.Город) Тогда
		Результат =  Идентификаторы.Город;
	ИначеЕсли Идентификаторы.Свойство("Район") И ЗначениеЗаполнено(Идентификаторы.Район) Тогда
		Результат =  Идентификаторы.Район;
	ИначеЕсли Идентификаторы.Свойство("Регион") И ЗначениеЗаполнено(Идентификаторы.Регион) Тогда
		Результат =  Идентификаторы.Регион;
	КонецЕсли;
	
	Возврат Строка(Результат);

КонецФункции

#КонецОбласти

#Область РегионыЗакупкиПродажиТоваров

// Получение сведения регионов из профиля абонента
//
// Параметры:
//  Представление			 - Строка - представление региона.
//  ИдентификаторыРегионов	 - Строка - идентификатор адресного классификатора.
//  Отказ					 - Булево - результат метода.
//
Процедура ЗаполнитьДанныеАдресовИРегионовПоискаНаФорме(Организация, Представление, ИдентификаторыРегионов, НастройкиРегионов)
	
	ИдентификаторыРегионов.Очистить();
	
	Представление = "";
			
	// Поиск идентификаторов регионов закупки.
	Если НастройкиРегионов.ИспользоватьРегионы Тогда
		Для каждого Адрес Из НастройкиРегионов.Регионы Цикл
			
			ОписаниеАдреса = ОписаниеЗаписиАдреса();
			ЗаполнитьЗначенияСвойств(ОписаниеАдреса, Адрес);
			
			НоваяСтрока = ИдентификаторыРегионов.Добавить();
			
			НоваяСтрока.Идентификатор = ОписаниеАдреса.Идентификатор;
			НоваяСтрока.КодСтраны     = ОписаниеАдреса.КодСтраны;
			НоваяСтрока.ДляСамовывоза = Истина;
			Представление             = Адрес.Представление;
			
		КонецЦикла;
	КонецЕсли;
		
	// Поиск идентификаторов адресов закупки.
	Если НастройкиРегионов.ИспользоватьАдреса Тогда
		Для каждого Адрес Из НастройкиРегионов.Адреса Цикл
			
			ОписаниеАдреса = ОписаниеЗаписиАдреса();
			ЗаполнитьЗначенияСвойств(ОписаниеАдреса, Адрес);
			
			НоваяСтрока = ИдентификаторыРегионов.Добавить();
			
			НоваяСтрока.Идентификатор = ОписаниеАдреса.Идентификатор;
			НоваяСтрока.КодСтраны     = ОписаниеАдреса.КодСтраны;
			НоваяСтрока.ДляДоставки   = Истина;
			Представление             = Адрес.Представление;
			
		КонецЦикла;
	КонецЕсли;
	
	// Представление адреса.
	КоличествоАдресов = ИдентификаторыРегионов.Количество();
	
	Если КоличествоАдресов <> 1 Тогда		
		Представление = Строка(КоличествоАдресов);
	КонецЕсли;
		
КонецПроцедуры

// Обновление сведений о регионе поиска.
//
// Параметры:
//  РегионПоиска			 - Структура - описание региона поиска вызываемой формы:
//    * РежимОтбора - Число - режим региона поиска формы (0 - без отбора, 1 - из профиля, 2 - введенный адрес).
//    * ЗначенияПолей - Строка - служебное значение адреса в JSON или XML.
//  РегионЗаголовок			 - Строка - возвращаемое значение представления.
//  ИдентификаторыРегионов	 - ТаблицаЗначений - возвращаемые значения идентификаторов регионов, колонки:
//    * Идентификатор - Строка - значение идентификатора региона.
//    * КодСтраны     - Строка - код страны региона.
//    * ДляСамовывоза - Булево - применять отбор для самовывоза.
//    * ДляДоставки   - Булево - применять отбор для доставки.
//
Процедура ОбновитьСведенияАдресовИРегионовПоискаНаФорме(
			Знач Организация, 
			Знач НастройкиРегионов, 
			РегионЗаголовок, 
			ИдентификаторыРегионов) Экспорт
	
	ЗаголовокПриОтсутствииОтбора = НСтр("ru = 'Все регионы'");
	
	Если НастройкиРегионов.РежимОтбора = 0 Тогда
		
		РегионЗаголовок = ЗаголовокПриОтсутствииОтбора;
		
	ИначеЕсли НастройкиРегионов.РежимОтбора = 1 Тогда
		
		ПредставлениеАдресовРегионов = "";
		
		ЗаполнитьДанныеАдресовИРегионовПоискаНаФорме(Организация, ПредставлениеАдресовРегионов, ИдентификаторыРегионов, НастройкиРегионов);
		
		Если ПустаяСтрока(ПредставлениеАдресовРегионов) Тогда
			РегионЗаголовок = НСтр("ru = 'Регионы профиля (не выбраны)'");
		Иначе
			РегионЗаголовок = СтрШаблон(НСтр("ru = 'Регионы профиля (%1)'"), ПредставлениеАдресовРегионов);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(НастройкиРегионов.ЗначенияПолей) Тогда
		
		Отказ = Ложь;
		РегионЗаголовок = ПредставлениеПоследнегоРегионаАдреса(НастройкиРегионов.ЗначенияПолей, Отказ);
		
		КодСтраны = "";
		ИдентификаторыРегионов.Очистить();
		Идентификатор = ИдентификаторПоследнегоРегионаАдреса(НастройкиРегионов.ЗначенияПолей, КодСтраны);
		Если ЗначениеЗаполнено(Идентификатор) Или ЗначениеЗаполнено(КодСтраны) Тогда
			НоваяСтрока = ИдентификаторыРегионов.Добавить();
			НоваяСтрока.Идентификатор = Идентификатор;
			НоваяСтрока.КодСтраны = КодСтраны;
			НоваяСтрока.ДляСамовывоза = Истина;
			НоваяСтрока.ДляДоставки = Истина;
		КонецЕсли;
		
		Если Отказ Тогда
			РегионЗаголовок = ЗаголовокПриОтсутствииОтбора;
		КонецЕсли;
		
	Иначе
		
		РегионЗаголовок = ЗаголовокПриОтсутствииОтбора;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиАдресовИРегионовПоиска(КлючНастроек, Организация, ДанныеДляСохранения) Экспорт
	
	КлючНастроекРегионов = КлючНастроекРегионов(КлючНастроек);
		
	ИдентификаторОрганизации = Организация.УникальныйИдентификатор();
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючНастроекРегионов, ИдентификаторОрганизации, ДанныеДляСохранения);
	
КонецПроцедуры

Функция НастройкиАдресовИРегионовПоиска(КлючНастроек, Организация) Экспорт
	
	КлючНастроекРегионов = КлючНастроекРегионов(КлючНастроек);
	
	ИдентификаторОрганизации = Организация.УникальныйИдентификатор();
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючНастроекРегионов, ИдентификаторОрганизации);
	
	Результат = ОписаниеНастройкиАдресовИРегионовПоиска();
	
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, Настройки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючНастроекРегионов(КлючНастроек)
	
	Если КлючНастроек <> "ЗапросыКоммерческихПредложений" 
		И КлючНастроек <> "ТорговыеПредложения" Тогда
		
		ВызватьИсключение НСтр("ru = 'Недопустимые объекты поиска'");
	КонецЕсли;
	
	Результат = СтрШаблон("БизнесСеть.НастройкиАдресовИРегионовПоиска.%1", КлючНастроек);
	
	Возврат Результат;
	
КонецФункции

// Описание региона поиска.
// 
// Возвращаемое значение:
//  Структура - описание переменной для отбора по региону поиска:
//    * РежимОтбора - Число - режим отбора (0 - без отбора, 1 - отбор по регионам профиля, 2 - указанный регион).
//    * Представление - Строка - представление региона поиска.
//    * ЗначенияПолей - Строка - внутреннее представление региона поиска введенного вручную.
//
Функция ОписаниеРегионаПоиска() Экспорт
		
	Результат = Новый Структура;
	
	Результат.Вставить("РежимОтбора",   0);
	Результат.Вставить("Представление", "");
	Результат.Вставить("ЗначенияПолей", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеАдресаАбонента()
	
	АдресаАбонента = Новый ТаблицаЗначений;
	АдресаАбонента.Колонки.Добавить("Представление");
	АдресаАбонента.Колонки.Добавить("ЗначенияПолей");
	АдресаАбонента.Колонки.Добавить("Описание");
	АдресаАбонента.Колонки.Добавить("Ссылка");
	АдресаАбонента.Колонки.Добавить("Вид");
	
	Возврат АдресаАбонента;
	
КонецФункции

Функция ОписаниеНастройкиАдресовИРегионовПоиска()
	
	Результат = Новый Структура;
	
	Результат.Вставить("РежимОтбора",         0); // 0 - без отбора, 1 - настройки регионов/адресов, 2 - выбран регион
	Результат.Вставить("Представление",       "");
	Результат.Вставить("ЗначенияПолей",       Неопределено);
	Результат.Вставить("Регионы",             Новый Массив);
	Результат.Вставить("Адреса",              Новый Массив);
	Результат.Вставить("ИспользоватьРегионы", Ложь);
	Результат.Вставить("ИспользоватьАдреса",  Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеЗаписиАдреса() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Представление", "");
	Результат.Вставить("ЗначенияПолей", "");
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("КодСтраны",     "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ЗначениеСервиса(Знач ДанныеСервиса, Знач ПутьКДанным)
	
	Результат = Неопределено;
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСервиса) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;	
		
	Если СтрНайти(ПутьКДанным, ".") > 0 Тогда
		
		ПоляПути = СтрРазделить(ПутьКДанным, ".", Ложь);
		
		Результат = ДанныеСервиса;
		
		Для каждого ТекущееПоле Из ПоляПути Цикл
			Результат = ЗначениеСервиса(Результат, ТекущееПоле);
		КонецЦикла;
		
	Иначе
		
		ДанныеСервиса.Свойство(ПутьКДанным, Результат);
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура СообщитьОбОшибкеЗаписатьВЖурнал(ТипСообщения, Отказ = Ложь)
	
	Если ТипСообщения = "ТокенОбновленияИнвалидирован" Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Токен обновления Бизнес-сети инвалидирован.'"), "БизнесСеть");
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиПотериДоступа(Истина));
		
	ИначеЕсли ТипСообщения = "ЗакончилсяСрокТокенаОбновления" Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Закончен период действия токена обновления Бизнес-сети.'"), "БизнесСеть");
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиПотериДоступа(Истина));
		
	ИначеЕсли ТипСообщения = "НеУдалосьПрочитатьОбновитьКлючДоступа" Тогда
		
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(
			НСтр("ru = 'Не удалось прочитать или обновить ключ доступа Бизнес-сети.'"), "БизнесСеть");
			
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не удалось выполнить запрос к сервису.'") 
				+ Символы.ПС 
				+ НСтр("ru = 'Попробуйте повторить действие позднее.'"));
		
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

// Заполнение реквизитов организаций.
//
// Параметры:
//   Данные - Структура, ТаблицаЗначений:
//     * Ссылка - СправочникСсылка - ссылка организации (обязательный).
//     * Наименование - Строка - полное наименование организации.
//     * ИНН - Строка - ИНН.
//     * КПП - Строка - КПП.
//
Процедура ЗаполнитьРеквизитыОрганизаций(Данные)

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Наименование КАК Наименование,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП
	|ИЗ
	|	&Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокСсылок)";
	
	ИмяСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
	РеквизитНаименование = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("НаименованиеОрганизации");
	РеквизитИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	РеквизитКПП = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППОрганизации");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организации", "Справочник." + ИмяСправочникаОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организации.Наименование", "Организации." + РеквизитНаименование);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организации.ИНН",          "Организации." + РеквизитИНН);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Организации.КПП",          "Организации." + РеквизитКПП);
	Запрос.Текст = ТекстЗапроса;
	
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		СписокСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Данные.Ссылка);
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		СписокСсылок = Данные.ВыгрузитьКолонку("Ссылка");
		Если Данные.Колонки.Найти("Наименование") = Неопределено Тогда
			Данные.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		Если Данные.Колонки.Найти("ИНН") = Неопределено Тогда
			Данные.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
		Если Данные.Колонки.Найти("КПП") = Неопределено Тогда
			Данные.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Данные) = Тип("Структура") Тогда
			Данные.Вставить("Наименование", Выборка.Наименование);
			Данные.Вставить("ИНН", Выборка.ИНН);
			Данные.Вставить("КПП", Выборка.КПП);
			Прервать;
		ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
			ЗаполнитьЗначенияСвойств(Данные.Найти(Выборка.Ссылка, "Ссылка"), Выборка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьПравоПросмотраПрофиляОрганизации() Экспорт
	
	Результат = ЕстьДоступККоманде(Метаданные.Обработки.БизнесСеть.Команды.ОткрытьПрофильУчастника, Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьДоступККоманде(КомандаМетаданные, ВыводитьСообщение = Ложь, ТекстСообщения = "")
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = Истина;
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ЭлектронноеВзаимодействиеСлужебный.СообщитьПользователюОНарушенииПравДоступа();
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьПраво;	
	
КонецФункции

Процедура ПроверитьЗаполнитьИдентификаторОрганизации(ПараметрыКоманды, Отказ)
	
	Если ЗначениеЗаполнено(ПараметрыКоманды.ИдентификаторОрганизации) Тогда
		Возврат;
	КонецЕсли;	
		
	ЗарегистрированныеОрганизации = ПодключенныеОрганизации();
	Если ЗначениеЗаполнено(ЗарегистрированныеОрганизации) Тогда
		ПараметрыКоманды.ИдентификаторОрганизации = ЗарегистрированныеОрганизации[0].Идентификатор;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИдентификаторОрганизации(Организация, Идентификатор)
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОрганизацииБизнесСеть");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ОрганизацииБизнесСеть.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Организация   = Организация;
		НоваяЗапись.Идентификатор = Идентификатор;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение НСтр("ru = 'Не удалось записать идентификатор организации'");
	КонецПопытки;
		
КонецПроцедуры

Процедура ИзменитьПризнакПовторногоПодключения(Организация, ТребуетсяПовторноеПодключение)
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОрганизацииБизнесСеть");
		ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();

		// Корректировка записей
		
		НаборЗаписей = РегистрыСведений.ОрганизацииБизнесСеть.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей[0];
		
		НоваяЗапись.Организация = Организация;
		
		НоваяЗапись.ТребуетсяПовторноеПодключение = Истина;
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура ПодключитьОрганизациюЛокально(Организация, ИдентификаторОрганизации, КлючДоступа)
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаписатьИдентификаторОрганизации(Организация, ИдентификаторОрганизации);
		
		ЗаписатьКлючДоступаВЛокальноеХранилище(ИдентификаторОрганизации, КлючДоступа);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ТекстОшибкиПодключенияОрганизации();
	КонецПопытки;

КонецПроцедуры

Функция СтрокаBase64БезBOM(СтрокаДанных)

	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти, КодировкаТекста.UTF8, , Символы.ПС);
	Текст.Записать(СтрокаДанных);
	Текст.Закрыть();
	ДвоичныеДанные = ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные();
	СтрокаФорматBase64 = Base64Строка(ДвоичныеДанные);
	
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ВК, "");
	СтрокаФорматBase64 = СтрЗаменить(СтрокаФорматBase64, Символы.ПС, "");
	
	Возврат СтрокаФорматBase64;

КонецФункции

Функция ОрганизацияПоИдентификатору(Идентификатор)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОрганизацииБизнесСеть.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
		|ГДЕ
		|	ОрганизацииБизнесСеть.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Организация;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура СоздатьГиперссылкуПодбораДокументовИзСервиса(Форма, ГруппаФормы)
		
	ИмяКоманды = БизнесСетьКлиентСервер.ИмяКомандыПодбораДокументовИзСервиса();
	
	НоваяКомандаФормы           = Форма.Команды.Добавить(ИмяКоманды);
	НоваяКомандаФормы.Действие  = СтрШаблон("Подключаемый_%1", ИмяКоманды);
	НоваяКомандаФормы.Картинка  = БиблиотекаКартинок.БизнесСетьЗагрузка;
	НоваяКомандаФормы.Подсказка = НСтр("ru = 'Подобрать новые документы из сервиса ""1С:Бизнес-сеть""'");
	
	НовыйЭлемент            = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ГруппаФормы);
	НовыйЭлемент.Вид        = ВидКнопкиФормы.Гиперссылка;
	НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	НовыйЭлемент.Видимость  = Ложь;
	
КонецПроцедуры

Процедура ДобавитьРазрешенияВнешнихРесурсов(ИмяСервиса, ЗапросыРазрешений)
	
	ПараметрыСоединения = БизнесСетьПовтИсп.ПараметрыСоединения(ИмяСервиса);
	
	Протокол = ?(ПараметрыСоединения.ЗащищенноеСоединение <> Неопределено, "HTTPS", "HTTP");
	Адрес    = ПараметрыСоединения.Сервер;
	Порт     = ПараметрыСоединения.Порт;
	
	Если ИмяСервиса = "БизнесСеть" Тогда
		Описание = НСтр("ru = 'Обмен документами без электронной подписи в сервисе 1С:Бизнес-сеть.'");
	Иначе
		Описание = НСтр("ru = 'Рубрикатор номенклатуры в сервисе 1С:Бизнес-сеть.'");
	КонецЕсли;
	
	Разрешения = Новый Массив;
	Разрешения.Добавить(РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(Протокол, Адрес, Порт, Описание));
	ВладелецРазрешения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.РегистрыСведений.ОрганизацииБизнесСеть.ПолноеИмя());
	
	ЗапросРазрешений = РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ВладелецРазрешения, Истина);
	
	ЗапросыРазрешений.Добавить(ЗапросРазрешений);

КонецПроцедуры

Процедура ДобавитьПоляТаблицыПоКоллекции(КоллекцияДляОбхода, КоллекцияДляДобавления, ЭлементИсключения)
	
	Для каждого ЭлементКоллекции Из КоллекцияДляОбхода Цикл
		
		Если ЭлементКоллекции = ЭлементИсключения Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементКоллекции) = Тип("ГруппаФормы") Тогда
			
			ДобавитьПоляТаблицыПоКоллекции(ЭлементКоллекции.ПодчиненныеЭлементы, КоллекцияДляДобавления, ЭлементИсключения);
		
		ИначеЕсли ТипЗнч(ЭлементКоллекции) = Тип("ПолеФормы") Тогда
			
			ПолеЭлемента = КоллекцияДляДобавления.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементКоллекции.Имя);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Подготовка значения идентификатора сервиса.
//
// Параметры:
//  Значение - Строка - ИНН, КПП юридического лица в сервисе, где "0" - пустое значение.
//
// Возвращаемое значение:
//  Строка - значение идентификатора сервиса.
//
Функция ЗначениеИдентификатора(Знач Значение)
	
	Результат = Строка(Значение);
	Если Результат = "0" Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция ВыводитьПользователюСообщениеОбОшибках(ПараметрыКоманды)
	
	Возврат НЕ (ПараметрыКоманды.Свойство("БлокироватьСообщенияОбОшибках")
			И ПараметрыКоманды.БлокироватьСообщенияОбОшибках = Истина);
	
КонецФункции

// Возвращает имя события журнала регистрации подсистемы Бизнес-сеть.
//
// Возвращаемое значение:
//   Строка   - имя события.
//
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'БизнесСеть'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ЗаписатьТабличныйДокумент(ТабличныйДокумент, ТипФайла, ИмяФайла)
	
	Если ТабличныйДокумент <> Неопределено Тогда
		ИмяКаталога = ЭлектронноеВзаимодействиеСлужебный.РабочийКаталог();
		ФайлСохранения = ИмяКаталога + ИмяФайла +"." + НРег(ТипФайла);
		ТабличныйДокумент.Записать(ФайлСохранения, ТипФайла);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось сформировать табличный документ.
									|Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ФайлСохранения = Неопределено;
	КонецЕсли;
	
	Возврат ФайлСохранения;
	
КонецФункции

#КонецОбласти

#Область ОснованияДокументов

Функция ИдентификаторОтправленногоДокументаОснование(ПараметрыОтправки)
	
	Основания = ОснованияОбъекта(ПараметрыОтправки.Ссылка);
	Если Основания.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Загрузка истории отправки документа.
	ПараметрыМетода = Новый Структура;
	
	ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыОтправки.Отправитель);
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыМетода.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ПараметрыМетода.Вставить("МассивСсылокНаОбъект",    ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Основания[0]));
	ПараметрыМетода.Вставить("РежимВходящихДокументов", Ложь);
	ПараметрыМетода.Вставить("ВозвращатьДанные",        Ложь);
	
	Отказ = Ложь;
	
	ПараметрыКоманды = ПараметрыКомандыПолучитьДокументы(ПараметрыМетода, Истина, Отказ);
	ДанныеСервиса    = ВыполнитьКомандуСервиса(ПараметрыКоманды, Отказ);
	
	Если Отказ Или ДанныеСервиса = Неопределено Или ТипЗнч(ДанныеСервиса) <> Тип("Массив")
		Или ДанныеСервиса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторОснования = ДанныеСервиса[ДанныеСервиса.Количество()-1].id;
	Возврат ИдентификаторОснования;
	
КонецФункции

Функция ОснованияОбъекта(Ссылка, ИскатьВТабличныхЧастях = Ложь)
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	Результат = Новый Массив;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
			
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
			Если МетаданныеРеквизита = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРеквизита) 
				Или Не ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Если Не Метаданные.Документы.Содержит(МетаданныеРеквизита)
				И Не Метаданные.Справочники.Содержит(МетаданныеРеквизита)
				И Не Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
				
			ЗначениеРеквизита = Ссылка[Реквизит.Имя];
			Если ЗначениеЗаполнено(ЗначениеРеквизита)
				И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
				И ЗначениеРеквизита <> Ссылка
				И Результат.Найти(ЗначениеРеквизита) = Неопределено Тогда
				
				Результат.Добавить(ЗначениеРеквизита);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИскатьВТабличныхЧастях Тогда
		
		Для Каждого Таблица Из МетаданныеОбъекта.ТабличныеЧасти Цикл
			
			ИменаРеквизитов = "";
			СодержимоеТаблицы = Ссылка[Таблица.Имя].Выгрузить(); // ТаблицаЗначений
			Для Каждого Реквизит Из Таблица.Реквизиты Цикл

				Если Не Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
					Продолжить;
				КонецЕсли;
					
				Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
					
					МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					Если МетаданныеРеквизита = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРеквизита) 
						Или Не ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
						Продолжить;
					КонецЕсли;
					
					Если Не Метаданные.Документы.Содержит(МетаданныеРеквизита)
						И Не Метаданные.Справочники.Содержит(МетаданныеРеквизита)
						И Не Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеРеквизита) Тогда
						Продолжить;
					КонецЕсли;
					
					ИменаРеквизитов = ИменаРеквизитов + ?(ИменаРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
					
				КонецЦикла;
				
			КонецЦикла;

			СодержимоеТаблицы.Свернуть(ИменаРеквизитов);
			Для Каждого КолонкаТЧ Из СодержимоеТаблицы.Колонки Цикл

				Для Каждого СтрокаТЧ Из СодержимоеТаблицы Цикл

					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
					МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
					Если МетаданныеЗначения = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеЗначения) 
						Или Не ПравоДоступа("Чтение", МетаданныеЗначения) Тогда
						Продолжить;
					КонецЕсли;
					Если ЗначениеРеквизита = Ссылка
						Или Результат.Найти(ЗначениеРеквизита) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ЯвляетсяДокументом  = ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения);
					Если Не ЯвляетсяДокументом И Не Метаданные.Справочники.Содержит(МетаданныеЗначения)
						И Не Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеЗначения) Тогда
						Продолжить;
					КонецЕсли;
					
					Результат.Добавить(ЗначениеРеквизита);
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область QRКоды

Функция ПараметрыКомандыСозданияQRКода(ПараметрыМетода)
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
	
	ПараметрыКоманды.Адрес = СтрШаблон("/api/%1/legacyDocuments/QRCode?guid=%2", ПараметрыКоманды.ИдентификаторОрганизации,
																						ПараметрыМетода.Идентификатор);
	ПараметрыКоманды.ТипКонтента = "";
	ПараметрыКоманды.Наименование = НСтр("ru = 'Создание QR-кода'");
	ПараметрыКоманды.Сервис = "EDI";
	ПараметрыКоманды.Метод = "POST";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Ошибки.Вставить(404,
		СтрШаблон(НСтр("ru = 'Ошибка создания QR-кода по документу %1.'"), ПараметрыМетода.СсылкаНаДокумент));
	ПараметрыКоманды.ЗаполнитьАутентификациюПоШаблону = Ложь;
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолученияQRКода(ПараметрыМетода)
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.ИдентификаторОрганизации = ИдентификаторОрганизации(ПараметрыМетода.Организация);
	
	ПараметрыКоманды.Адрес = СтрШаблон("/api/%1/legacyDocuments/QRCode/byGuid/%2", ПараметрыКоманды.ИдентификаторОрганизации,
																							ПараметрыМетода.Идентификатор);
	ПараметрыКоманды.ТипКонтента = "application/vnd-1cbn-legacy-doc-qrcode-v1+json";
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получение QR-кода'");
	ПараметрыКоманды.Сервис = "EDI";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(404);
	ПараметрыКоманды.Ошибки.Вставить(400,
		СтрШаблон(НСтр("ru = 'Ошибка получения QR-кода по документу %1.'"), ПараметрыМетода.СсылкаНаДокумент));
	ПараметрыКоманды.ЗаполнитьАутентификациюПоШаблону = Ложь;
		
	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыПолученияПолнойПубличнойСсылки(Знач АдресРесурса)
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	ПараметрыКоманды.Адрес = СтрШаблон("/m/%1", АдресРесурса);
	ПараметрыКоманды.Наименование = НСтр("ru = 'Получить полную публичную ссылку на документ по ссылке с QR-кодом.'");
	ПараметрыКоманды.Сервис = "КороткихСсылок";
	ПараметрыКоманды.Аутентификация = Ложь;
	ПараметрыКоманды.ТипКонтента = "";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.РазрешенныеСостояния.Добавить(302);
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найден документ по ссылке QR-кода.'"));

	Возврат ПараметрыКоманды;

КонецФункции

Функция ПараметрыКомандыВыполненияПубличнойСсылки(Знач ПолныйАдресРесурса)
	
	ПараметрыКоманды = ОписаниеПараметровКомандыСервиса();
	СхемаАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдресРесурса);

	ПараметрыКоманды.Адрес = СхемаАдреса.ПутьНаСервере;
	ПараметрыКоманды.ТипКонтента = "application/vnd-1cbn-legacy-doc-list.v1+json";
	ПараметрыКоманды.Наименование = НСтр("ru = 'Поиск документа по QR-коду'");
	ПараметрыКоманды.Сервис = "EDI";
	ПараметрыКоманды.Метод = "GET";
	ПараметрыКоманды.Права = "bn_user";
	ПараметрыКоманды.Аутентификация = Ложь;
	ПараметрыКоманды.Ошибки.Вставить(400, НСтр("ru = 'Ошибка получения документа по ссылке QR-кода.'"));
	ПараметрыКоманды.Ошибки.Вставить(404, НСтр("ru = 'Не найден документ по ссылке QR-кода.'"));
	ПараметрыКоманды.Ошибки.Вставить(500, НСтр("ru = 'Внутренняя ошибка сервиса.'"));

	Возврат ПараметрыКоманды;

КонецФункции

#КонецОбласти

#КонецОбласти




