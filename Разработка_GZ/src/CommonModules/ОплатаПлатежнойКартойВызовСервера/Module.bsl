#Область СлужебныеПроцедурыИФункции

// Преобразует таблицу значений, полученную по адресу, в массив структур.
//
// Параметры:
//   АдресХранилищаРасшифровкаПлатежа - строка.
//
// Возвращаемое значение:
//   Массив, значение - структура.
//
Функция ДанныеРасшифровкиПлатежа(АдресХранилищаРасшифровкаПлатежа) Экспорт

	ТаблицаДанных = ПолучитьИзВременногоХранилища(АдресХранилищаРасшифровкаПлатежа);
	Если ТаблицаДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаДанных);
	
КонецФункции

// Возвращает настройки системы с документом ОплатаПлатежнойКартой.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Дата        - Дата - Дата, для которой получается опция УчетБезЗакрывающихДокументов.
//
// Возвращаемое значение: 
//   Структура с ключами: РозницаДоступна, РозницаВключена, УчетБезЗакрывающихДокументов, НапечататьЧек - Булево.
//
Функция ПараметрыНастроекДокумента(Организация, Дата) Экспорт
	
	ПараметрыРезультат = Новый Структура;
	ПараметрыРезультат.Вставить("ПростойИнтерфейс",ОбщегоНазначенияБП.ЭтоПростойИнтерфейс());
	ПараметрыРезультат.Вставить("РозницаДоступна", РозничнаяВыручкаДоступна());
	ПараметрыРезультат.Вставить("РозницаВключена", ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля"));
	ПараметрыРезультат.Вставить("УчетБезЗакрывающихДокументов",
		УчетКассовымМетодом.УчетБезЗакрывающихДокументовВозможен(Организация, Дата));
	ПараметрыРезультат.Вставить("НапечататьЧек", ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование));
	
	Возврат ПараметрыРезультат;
	
КонецФункции

// Возвращает результат настройки функциональности.
// Схема розничной торговли НТТ доступна только в полном интерфейсе.
//
// Возвращаемое значение:
//   Булево.
//
Функция РозничнаяВыручкаДоступна() Экспорт
	
	ВедетсяРозничнаяТорговля = ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля");
	ЭтоПростойИнтерфейс = ОбщегоНазначенияБП.ЭтоПростойИнтерфейс();
	
	Возврат ВедетсяРозничнаяТорговля И Не ЭтоПростойИнтерфейс
		Или Не ВедетсяРозничнаяТорговля;
	
КонецФункции

// Возвращает данные строки документа.
//
// Параметры:
//   ПараметрыПлатежа - Структура.
//   ПолучатьДоговор  - Булево.
//
// Возвращаемое значение:
//   Структура - состав см. ОплатаПлатежнойКартойКлиентСервер.НоваяСтруктураСвойстваПлатежа().
//
Функция СвойстваСтрокРасшифровкиПлатежа(Знач ПараметрыПлатежа, Знач ПолучатьДоговор) Экспорт
	
	СвойстваПлатежа = ОплатаПлатежнойКартойКлиентСервер.НоваяСтруктураСвойстваПлатежа();
	
	Если ПолучатьДоговор Тогда
		ПараметрыПлатежа.ДоговорКонтрагента = УчетДенежныхСредствБП.ПолучитьДоговорКонтрагента(ПараметрыПлатежа);
	КонецЕсли;
	
	СвойстваПлатежа.УслугаНПД                     = ПараметрыПлатежа.УслугаНПД;
	СвойстваПлатежа.ДоговорКонтрагента            = ПараметрыПлатежа.ДоговорКонтрагента;
	СвойстваПлатежа.СпособПогашенияЗадолженности  =
		ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.Автоматически");
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") 
		И Не ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		УстановитьРеквизитыРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа);
		
	ИначеЕсли ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
		
		УстановитьРеквизитыРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа);
		
		СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ПараметрыПлатежа.ДоговорКонтрагента, "ВалютаВзаиморасчетов,РасчетыВУсловныхЕдиницах");
			
		СвойстваПлатежа.ДоговорКонтрагентаВалютаВзаиморасчетов     = СвойстваДоговора.ВалютаВзаиморасчетов;
		СвойстваПлатежа.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах = СвойстваДоговора.РасчетыВУсловныхЕдиницах;
		
		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
			СвойстваДоговора.ВалютаВзаиморасчетов, ПараметрыПлатежа.Дата);
		СвойстваПлатежа.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СвойстваПлатежа.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
		
	КонецЕсли;
	
	СвойстваПлатежа.ПорядокОтраженияАванса = УчетКассовымМетодом.ОтражениеДоходовПоУмолчанию(
		ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата);
	
	Возврат СвойстваПлатежа;
	
КонецФункции

// Возвращает счета учета с контрагентом.
//
// Параметры:
//   ПараметрыПлатежа - Структура с ключами: Организация, Контрагент, ДоговорКонтрагента
//
// Возвращаемое значение:
//   Структура с ключами: СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам.
//
Функция СчетаУчетаРасчетовСКонтрагентом(ПараметрыОбъекта)
	
	СчетаУчета = Новый Структура("СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам");
	
	СтруктураСчетов = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
		ПараметрыОбъекта.Организация, ПараметрыОбъекта.Контрагент, ПараметрыОбъекта.ДоговорКонтрагента);
	
	СчетаУчета.Вставить("СчетУчетаРасчетовСКонтрагентом", СтруктураСчетов.СчетРасчетовПокупателя);
	СчетаУчета.Вставить("СчетУчетаРасчетовПоАвансам",     СтруктураСчетов.СчетАвансовПокупателя);
	
	Возврат СчетаУчета;
	
КонецФункции

// Устанавливает реквизиты: СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам, СтавкаНДС.
//
// Параметры:
//   ПараметрыПлатежа - Структура с ключами: Организация, Контрагент, ДоговорКонтрагента, ВидОперации, Дата
//   СвойстваПлатежа  - Структура с ключами: СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовПоАвансам
//
Процедура УстановитьРеквизитыРасчетовСКонтрагентом(ПараметрыПлатежа, СвойстваПлатежа) Экспорт
	
	СчетаУчета = СчетаУчетаРасчетовСКонтрагентом(ПараметрыПлатежа);
	ЗаполнитьЗначенияСвойств(СвойстваПлатежа, СчетаУчета);
	
	Если ОплатаПлатежнойКартойКлиентСервер.ЭтоРасчетыСКонтрагентом(ПараметрыПлатежа.ВидОперации) Тогда
		
		СвойстваПлатежа.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		ПлательщикНДС = ПараметрыПлатежа.ПлательщикНДС;
		СвойстваПлатежа.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ПараметрыПлатежа.Дата, ПлательщикНДС);
		
	КонецЕсли;

КонецПроцедуры

#Область ЧекиНПД

// Выполняет запись в журнал регистрации и вызывает исключение для пользователя.
//
// Параметры:
//   КраткоеПредставлениеОшибки   - Строка
//   ПодробноеПредставлениеОшибки - Строка
//
Процедура ПоказатьОшибкуАннулированияЧека(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		?(ПодробноеПредставлениеОшибки <> Неопределено, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки));
	
	ВызватьИсключение КраткоеПредставлениеОшибки;
	
КонецПроцедуры

// Возвращает сведения о чеке документа-основания.
//
// Параметры:
//   ДокументОснование - ДокументСсылка - Ссылка на документ-основание.
//
// Возвращаемое значение:
//   Структура - Сведения о чеке. См. НовыйСведенияОЧеке().
//
Функция СведенияОЧекеНПД(СсылкаНаДокумент) Экспорт
	
	Возврат РегистрыСведений.ЧекиНПД.СведенияОЧеке(СсылкаНаДокумент);
	
КонецФункции

// Возвращает надпись-пояснение ставки НПД.
//
// Параметры:
//   Контрагент - СправочникСсылка.Контрагенты - контрагент-покупатель.
//
// Возвращаемое значение:
//   Строка - заголовок для реквизита.
//
Функция ОписаниеСтавкиНПД(Контрагент) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = 'Ставка налога: %1%%'"),
				ИнтеграцияСПлатформойСамозанятые.СтавкаНПД(Контрагент));
	
КонецФункции

#КонецОбласти

#КонецОбласти

