#Область СлужебныеПроцедурыИФункции

Функция СервисИспользуется() Экспорт

	Используется = ПолучитьФункциональнуюОпцию("ИспользоватьСервисМониторингБанков")
		И ИнтернетПоддержкаПользователей.УслугаПодключена(ИдентификаторУслугиМониторингБанков())
		И ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СобытияНадежностьБанков);
	
	Возврат Используется;
	
КонецФункции

Функция ИнформацияОКритичномСобытии(БИК) Экспорт
	
	Результат = НоваяИнформацияОСобытии();
	Результат.БИК = БИК;
	
	Результат.Используется = СервисИспользуется();
	Если НЕ Результат.Используется Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбновитьСобытияВФоне(Результат);
	
	РезультатЗапроса = РезультатЗапросаПоследниеСобытия(БИК, Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат.Событие, Выборка);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ИнформацияОКритичныхСобытиях(МассивБИК) Экспорт
	
	Результат = НоваяИнформацияОСобытиях();
	
	Результат.Используется = СервисИспользуется();
	Если НЕ Результат.Используется Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если МассивБИК.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбновитьСобытияВФоне(Результат);
	
	РезультатЗапроса = РезультатЗапросаПоследниеСобытия(МассивБИК, Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Событие = НовоеСобытие();
			ЗаполнитьЗначенияСвойств(Событие, Выборка);
			Результат.События.Вставить(Выборка.БИК, Событие);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИнформацияОСобытияхБанковОрганизаций() Экспорт
	
	Результат = НоваяИнформацияОСобытиях();
	
	Результат.Используется = СервисИспользуется();
	Если НЕ Результат.Используется Тогда
		Возврат Результат;
	КонецЕсли;
	
	БИКБанковОрганизаций = Новый Массив;
	НадежностьБанковПереопределяемый.ЗаполнитьБИКБанковОрганизаций(БИКБанковОрганизаций);
	Если БИКБанковОрганизаций.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОбновитьСобытия(Результат);
	
	РезультатЗапроса = РезультатЗапросаПоследниеСобытия(БИКБанковОрганизаций, Истина);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ПоказанныеСобытия = ПоказанныеСобытия();
		НачалоТекущегоДня = НачалоДня(ТекущаяДатаСеанса());
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МаксимальнаяРазницаДат = ?(Выборка.Событие = Перечисления.СобытияНадежностьБанков.Информация, 
				30 * 60 * 60* 24,
				15 * 60 * 60* 24);
			ЭтоСвежееСобытие = НачалоТекущегоДня - НачалоДня(Выборка.ДатаПоявленияСобытия) < МаксимальнаяРазницаДат;
			Если НЕ ЭтоСвежееСобытие Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСобытия = НовоеСобытие();
			ЗаполнитьЗначенияСвойств(ДанныеСобытия, Выборка);
			ДанныеСобытия.Показано = ПоказанныеСобытия.Найти(ДанныеСобытия.Идентификатор) <> Неопределено;
			
			Если ДанныеСобытия.Критичное Тогда
				НадежностьБанковПереопределяемый.ЗаполнитьДополнительнуюИнформациюОСобытии(ДанныеСобытия);
			КонецЕсли;
			
			Результат.События.Вставить(Выборка.БИК, ДанныеСобытия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьОбновлениеСобытий(Результат) Экспорт

	Если ОбновлениеСобытийВыполняется(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Актуальность = Истина;
	СтарыйИдентификатор = Результат.ПоследнийИдентификатор;
	ПолучитьПоследнийИдентификаторСобытий(Результат);
	Если СтарыйИдентификатор = Результат.ПоследнийИдентификатор Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса = РезультатЗапросаПоследниеСобытия(Результат.БИК, Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(Результат.Событие, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Функция КодыБанковПоИдентификаторуСобытия(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СобытияНадежностьБанков.РегистрационныйНомер КАК РегистрационныйНомер
	|ПОМЕСТИТЬ СобытияНадежностьБанков
	|ИЗ
	|	РегистрСведений.СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|ГДЕ
	|	СобытияНадежностьБанков.Идентификатор = &Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрационныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыНомераБанков.Код КАК Код
	|ИЗ
	|	СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыНомераБанков КАК КодыНомераБанков
	|		ПО СобытияНадежностьБанков.РегистрационныйНомер = КодыНомераБанков.РегистрационныйНомер
	|ГДЕ
	|	КодыНомераБанков.Код ЕСТЬ НЕ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыНомераФилиалов.Код
	|ИЗ
	|	СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыНомераБанков КАК КодыНомераФилиалов
	|		ПО СобытияНадежностьБанков.РегистрационныйНомер = КодыНомераФилиалов.РегистрационныйНомерФилиала
	|ГДЕ
	|	КодыНомераФилиалов.Код ЕСТЬ НЕ NULL ";
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
	Возврат Результат;

КонецФункции

Функция НовоеСобытие() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Событие");
	Результат.Вставить("ТекстСобытия");
	Результат.Вставить("ДатаСобытия");
	Результат.Вставить("ДатаПоявленияСобытия");
	Результат.Вставить("Идентификатор");
	Результат.Вставить("Критичное");
	Результат.Вставить("ИсточникИнформации");
	Результат.Вставить("ТекстПояснения");
	Результат.Вставить("Показано");
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("ЕстьОстатки", Истина);
	ДополнительнаяИнформация.Вставить("ЕстьСчетаЮридическихЛиц", Истина);
	ДополнительнаяИнформация.Вставить("ЕстьСчетаФизическихЛиц", Истина);
	Результат.Вставить("ДополнительнаяИнформация", ДополнительнаяИнформация);
	
	Возврат Результат;

КонецФункции

Процедура ПолучитьНовыеСобытияИзСервиса(ПараметрыПроцедуры, АдресРезультата) Экспорт
	
	ЗначенияКлюча = Новый Структура;
	КлючЗаписи = РегистрыСведений.ПараметрыОбновленияНадежностьБанков.СоздатьКлючЗаписи(ЗначенияКлюча);
	Попытка
		ИдентификаторБлокировки = Новый УникальныйИдентификатор;
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи, , ИдентификаторБлокировки);
	Исключение
		Возврат;
	КонецПопытки;
	
	ПоследнийИдентификатор = ПараметрыПроцедуры.ПоследнийИдентификатор;

	СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСервиса());
	ИнтернетПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(СтруктураАдреса.Схема);
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Соединение = СоединениеССервисом(СтруктураАдреса, ИнтернетПрокси, РазделениеВключено);
	Если Соединение = Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(КлючЗаписи, ИдентификаторБлокировки);
		Возврат;
	КонецЕсли;
	
	// Получаем новые события из сервиса.
	Запрос = Новый HTTPЗапрос;
	Запрос.АдресРесурса = АдресРесурсаСобытияБанков(ПараметрыПроцедуры.ПоследнийИдентификатор);
	Ответ = Соединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
	
		ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(ТекстОтвета);
		ВсеРезультаты = ПрочитатьJSON(Чтение, , "eventDate,createdAt");
		ТипыСобытий = СоответствиеТиповСобытий();
		ОбновитьКлассификаторБанков = ПоследнийИдентификатор = 0;
		УстановитьПривилегированныйРежим(Истина);
		УдаленияСобытий = Новый Массив;
		
		Для каждого Результат Из ВсеРезультаты Цикл
			Событие = ТипыСобытий[Результат.eventType];
			
			МенеджерЗаписи = РегистрыСведений.СобытияНадежностьБанков.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Идентификатор = Результат.uid;
			МенеджерЗаписи.РегистрационныйНомер = Результат.regn;
			МенеджерЗаписи.ДатаСобытия = Результат.eventDate;
			МенеджерЗаписи.ДатаПоявленияСобытия = Результат.createdAt;
			МенеджерЗаписи.Событие = Событие;
			МенеджерЗаписи.ТекстСобытия = Результат.message;
			МенеджерЗаписи.ИсточникИнформации = Результат.sourceLink;
			
			МенеджерЗаписи.Записать();
			
			Если МенеджерЗаписи.Идентификатор > ПоследнийИдентификатор Тогда
				ПоследнийИдентификатор = МенеджерЗаписи.Идентификатор;
			КонецЕсли;
			
			Если Событие = Перечисления.СобытияНадежностьБанков.КодыБанковИзменены Тогда
				ОбновитьКлассификаторБанков = Истина;
			ИначеЕсли Событие = Перечисления.СобытияНадежностьБанков.СобытиеУдалено Тогда
				УдаленияСобытий.Добавить(Результат);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого УдалениеСобытия Из УдаленияСобытий Цикл
			МенеджерЗаписи = РегистрыСведений.СобытияНадежностьБанков.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Идентификатор = УдалениеСобытия.deletedUid;
			МенеджерЗаписи.РегистрационныйНомер = УдалениеСобытия.regn;
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.СобытиеУдалено = Истина;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		// Получаем классификатор банков из сервиса.
		Если ОбновитьКлассификаторБанков Тогда
			
			Если РазделениеВключено Тогда
				// Требуется новый токен для каждого вызова сервиса.
				Соединение = СоединениеССервисом(СтруктураАдреса, ИнтернетПрокси, РазделениеВключено);
			КонецЕсли;
			
			Запрос = Новый HTTPЗапрос;
			Запрос.АдресРесурса = АдресРесурсаКлассификаторБанков();
			Ответ = Соединение.Получить(Запрос);
			
			Если Ответ.КодСостояния = 200 Тогда
				
				ТекстОтвета = Ответ.ПолучитьТелоКакСтроку();
				Чтение = Новый ЧтениеJSON;
				Чтение.УстановитьСтроку(ТекстОтвета);
				ВсеРезультаты = ПрочитатьJSON(Чтение);
				УстановитьПривилегированныйРежим(Истина);
				Набор = РегистрыСведений.КодыНомераБанков.СоздатьНаборЗаписей();
				Для каждого Результат Из ВсеРезультаты Цикл
					НоваяЗапись = Набор.Добавить();
					НоваяЗапись.Код = Результат.bik;
					ЧастиНомера = СтрРазделить(Результат.regn, "/");
					НоваяЗапись.РегистрационныйНомер = ЧастиНомера[0];
					Если ЧастиНомера.Количество() > 1 Тогда
						НоваяЗапись.РегистрационныйНомерФилиала = Результат.regn;
					КонецЕсли;
					НоваяЗапись.ИНН = Результат.inn;
					НоваяЗапись.ОГРН = Результат.ogrn;
				КонецЦикла;
				Набор.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
			Иначе
				
				ЗаписатьОшибкуВЖурналРегистрации(
					"" + Ответ.КодСостояния + ": " + Ответ.ПолучитьТелоКакСтроку(),
					НСтр("ru='Получение классификатора'", ОбщегоНазначения.КодОсновногоЯзыка()));
				РазблокироватьДанныеДляРедактирования(КлючЗаписи, ИдентификаторБлокировки);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЗаписатьОшибкуВЖурналРегистрации(
			"" + Ответ.КодСостояния + ": " + Ответ.ПолучитьТелоКакСтроку(),
			НСтр("ru='Получение событий'", ОбщегоНазначения.КодОсновногоЯзыка()));
		РазблокироватьДанныеДляРедактирования(КлючЗаписи, ИдентификаторБлокировки);
		Возврат;
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи = РегистрыСведений.ПараметрыОбновленияНадежностьБанков.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ДатаОбновления = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	ЗначенияКлюча = Новый Структура;
	КлючЗаписи = РегистрыСведений.ПараметрыОбновленияНадежностьБанков.СоздатьКлючЗаписи(ЗначенияКлюча);
	РазблокироватьДанныеДляРедактирования(КлючЗаписи, ИдентификаторБлокировки);
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		Результат = Новый Структура;
		Результат.Вставить("ПоследнийИдентификатор", ПоследнийИдентификатор);
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСобытияБанковОрганизаций(ПараметрыПроцедуры, АдресРезультата) Экспорт

	Результат = ИнформацияОСобытияхБанковОрганизаций();

	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Процедура ОбновитьСобытияВФоне(Результат)
	
	ПолучитьПоследнийИдентификаторСобытий(Результат);
	
	Если ДанныеСобытийАктуальны(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновлениеСобытийВыполняется(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьНовыеСобытияВФоне(Результат);

КонецПроцедуры

Процедура ОбновитьСобытия(Результат)
	
	ПолучитьПоследнийИдентификаторСобытий(Результат);
	
	Если ДанныеСобытийАктуальны(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбновлениеСобытийВыполняется(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьНовыеСобытияИзСервиса(Результат, Неопределено);

КонецПроцедуры

Функция РезультатЗапросаПоследниеСобытия(БИКБанков, ВключатьНекритичные)
	
	Запрос = Новый Запрос;
	МассивБИК = Новый Массив;
	Если ТипЗнч(БИКБанков) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивБИК, БИКБанков, Истина);
	Иначе
		МассивБИК.Добавить(БИКБанков);
	КонецЕсли;
	Запрос.УстановитьПараметр("БИКБанков", МассивБИК);
	Запрос.УстановитьПараметр("ДеятельностьВозобновлена", Перечисления.СобытияНадежностьБанков.ДеятельностьВозобновлена);
	
	КритичныеСобытия = Новый Массив;
	КритичныеСобытия.Добавить(Перечисления.СобытияНадежностьБанков.ДеятельностьПриостановлена);
	КритичныеСобытия.Добавить(Перечисления.СобытияНадежностьБанков.ЛицензияОтозвана);
	Запрос.УстановитьПараметр("КритичныеСобытия", КритичныеСобытия);
	
	НекритичныеСобытия = Новый Массив;
	НекритичныеСобытия.Добавить(Перечисления.СобытияНадежностьБанков.БанкПривлеченКОтветственности);
	НекритичныеСобытия.Добавить(Перечисления.СобытияНадежностьБанков.НормативыНеСоответствуютТребуемым);
	НекритичныеСобытия.Добавить(Перечисления.СобытияНадежностьБанков.КапиталНижеТребуемого);
	НекритичныеСобытия.Добавить(Перечисления.СобытияНадежностьБанков.Информация);
	Запрос.УстановитьПараметр("НекритичныеСобытия", НекритичныеСобытия);
	Запрос.УстановитьПараметр("ВключатьНекритичные", ВключатьНекритичные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КодыНомераБанков.Код КАК Код,
	|	КодыНомераБанков.РегистрационныйНомер КАК РегистрационныйНомер
	|ПОМЕСТИТЬ КодыНомераБанков
	|ИЗ
	|	РегистрСведений.КодыНомераБанков КАК КодыНомераБанков
	|ГДЕ
	|	КодыНомераБанков.Код В(&БИКБанков)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрационныйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыНомераБанков.Код КАК Код,
	|	МАКСИМУМ(СобытияНадежностьБанков.Идентификатор) КАК ИдентификаторКритичноеСобытие,
	|	0 КАК ИдентификаторДеятельностьВозобновлена,
	|	0 КАК ИдентификаторНекритичноеСобытие
	|ПОМЕСТИТЬ ПоследниеСобытияДетально
	|ИЗ
	|	КодыНомераБанков КАК КодыНомераБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|		ПО КодыНомераБанков.РегистрационныйНомер = СобытияНадежностьБанков.РегистрационныйНомер
	|ГДЕ
	|	СобытияНадежностьБанков.Событие В(&КритичныеСобытия)
	|	И НЕ СобытияНадежностьБанков.СобытиеУдалено
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыНомераБанков.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыНомераБанков.Код,
	|	0,
	|	МАКСИМУМ(СобытияНадежностьБанков.Идентификатор),
	|	0
	|ИЗ
	|	КодыНомераБанков КАК КодыНомераБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|		ПО КодыНомераБанков.РегистрационныйНомер = СобытияНадежностьБанков.РегистрационныйНомер
	|ГДЕ
	|	СобытияНадежностьБанков.Событие = &ДеятельностьВозобновлена
	|	И НЕ СобытияНадежностьБанков.СобытиеУдалено
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыНомераБанков.Код
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыНомераБанков.Код,
	|	0,
	|	0,
	|	МАКСИМУМ(СобытияНадежностьБанков.Идентификатор)
	|ИЗ
	|	КодыНомераБанков КАК КодыНомераБанков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|		ПО (&ВключатьНекритичные)
	|			И КодыНомераБанков.РегистрационныйНомер = СобытияНадежностьБанков.РегистрационныйНомер
	|ГДЕ
	|	&ВключатьНекритичные
	|	И СобытияНадежностьБанков.Событие В(&НекритичныеСобытия)
	|	И НЕ СобытияНадежностьБанков.СобытиеУдалено
	|
	|СГРУППИРОВАТЬ ПО
	|	КодыНомераБанков.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеСобытияДетально.Код КАК Код,
	|	МАКСИМУМ(ПоследниеСобытияДетально.ИдентификаторКритичноеСобытие) КАК ИдентификаторКритичноеСобытие,
	|	МАКСИМУМ(ПоследниеСобытияДетально.ИдентификаторДеятельностьВозобновлена) КАК ИдентификаторДеятельностьВозобновлена,
	|	МАКСИМУМ(ПоследниеСобытияДетально.ИдентификаторНекритичноеСобытие) КАК ИдентификаторНекритичноеСобытие
	|ПОМЕСТИТЬ ПоследниеСобытия
	|ИЗ
	|	ПоследниеСобытияДетально КАК ПоследниеСобытияДетально
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоследниеСобытияДетально.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоследниеСобытия.Код КАК БИК,
	|	ВЫБОР
	|		КОГДА ПоследниеСобытия.ИдентификаторКритичноеСобытие > ПоследниеСобытия.ИдентификаторДеятельностьВозобновлена
	|			ТОГДА ПоследниеСобытия.ИдентификаторКритичноеСобытие
	|		ИНАЧЕ ПоследниеСобытия.ИдентификаторНекритичноеСобытие
	|	КОНЕЦ КАК Идентификатор,
	|	ПоследниеСобытия.ИдентификаторКритичноеСобытие > ПоследниеСобытия.ИдентификаторДеятельностьВозобновлена КАК Критичное
	|ПОМЕСТИТЬ НужныеСобытия
	|ИЗ
	|	ПоследниеСобытия КАК ПоследниеСобытия
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПоследниеСобытия.ИдентификаторКритичноеСобытие > ПоследниеСобытия.ИдентификаторДеятельностьВозобновлена
	|				ТОГДА ПоследниеСобытия.ИдентификаторКритичноеСобытие
	|			ИНАЧЕ ПоследниеСобытия.ИдентификаторНекритичноеСобытие
	|		КОНЕЦ > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НужныеСобытия.БИК КАК БИК,
	|	НужныеСобытия.Идентификатор КАК Идентификатор,
	|	СобытияНадежностьБанков.Событие КАК Событие,
	|	СобытияНадежностьБанков.ТекстСобытия КАК ТекстСобытия,
	|	СобытияНадежностьБанков.ДатаСобытия КАК ДатаСобытия,
	|	СобытияНадежностьБанков.ДатаПоявленияСобытия КАК ДатаПоявленияСобытия,
	|	СобытияНадежностьБанков.ИсточникИнформации КАК ИсточникИнформации,
	|	НужныеСобытия.Критичное КАК Критичное
	|ИЗ
	|	НужныеСобытия КАК НужныеСобытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|		ПО НужныеСобытия.Идентификатор = СобытияНадежностьБанков.Идентификатор";
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;

КонецФункции

Процедура ПолучитьНовыеСобытияВФоне(Результат)
	
	ИдентификаторФормы = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, КлючНаименованиеЗаданияНовыеСобытия());
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПоследнийИдентификатор", Результат.ПоследнийИдентификатор);
	
	ПараметрыЗадания = ДлительныеОперации.ВыполнитьВФоне("НадежностьБанков.ПолучитьНовыеСобытияИзСервиса", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры
	
Функция ПолучитьСобытияБанковОрганизацийВФоне() Экспорт
	
	ИдентификаторФормы = Новый УникальныйИдентификатор;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, КлючНаименованиеЗаданияПоследниеСобытияБанковОрганизаций());
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыЗадания = ДлительныеОперации.ВыполнитьВФоне("НадежностьБанков.ПолучитьСобытияБанковОрганизаций", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
	Возврат ПараметрыЗадания;

КонецФункции

Процедура ПриСохраненииДанныхАутентификацииПользователяИнтернетПоддержки(ДанныеАутентификации) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьСервисМониторингБанков.Установить(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПриУдаленииДанныхАутентификацииПользователяИнтернетПоддержки() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьСервисМониторингБанков.Установить(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НоваяИнформацияОСобытии()

	Результат = Новый Структура;
	Результат.Вставить("БИК", "");
	Результат.Вставить("Используется", Ложь);
	Результат.Вставить("Актуальность", Истина);
	Результат.Вставить("ПараметрыОбработчикаОжидания");
	Результат.Вставить("ПоследнийИдентификатор", 0);
	Результат.Вставить("Событие", НовоеСобытие());
	Результат.Вставить("КритичноеСобытиеЦветТекста", ЦветаСтиля.КритичноеСобытиеНадежностьБанковЦветТекста);
	
	Возврат Результат;

КонецФункции

Функция НоваяИнформацияОСобытиях()

	Результат = Новый Структура;
	Результат.Вставить("Используется", Ложь);
	Результат.Вставить("Актуальность", Истина);
	Результат.Вставить("ПараметрыОбработчикаОжидания");
	Результат.Вставить("ПоследнийИдентификатор", 0);
	Результат.Вставить("События", Новый Соответствие); // Ключ - БИК, значение - см. НовоеСобытие.
	
	Возврат Результат;

КонецФункции

Функция ДанныеСобытийАктуальны(Результат)
	
	Отбор = Новый Структура("ОбластьДанныхВспомогательныеДанные", 
		ИнтернетПоддержкаПользователей.ЗначениеРазделителяСеанса());
	ПараметрыОбновления = РегистрыСведений.ПараметрыОбновленияНадежностьБанков.Получить(, Отбор);
	ПоследнееОбновление = ?(ТипЗнч(ПараметрыОбновления.ДатаОбновления) = Тип("Дата") 
		И ПараметрыОбновления.ДатаОбновления < ТекущаяДатаСеанса(), 
		ПараметрыОбновления.ДатаОбновления, 
		'00010101');
	Если НЕ ЗначениеЗаполнено(ПоследнееОбновление) Тогда
		Результат.Актуальность = Ложь;
	Иначе
		Результат.Актуальность = (ТекущаяДатаСеанса() - ПоследнееОбновление) < 15 * 60;
	КонецЕсли;
	
	Возврат Результат.Актуальность;

КонецФункции

Функция СоединениеССервисом(СтруктураАдреса, ИнтернетПрокси, РазделениеВключено)

	Если РазделениеВключено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатПолученияТикета = ИнтернетПоддержкаПользователейВМоделиСервиса.ТикетАутентификацииНаПорталеПоддержки(
			СтруктураАдреса.Хост);
		УстановитьПривилегированныйРежим(Ложь);
		
		ДанныеАутентификации = Новый Структура("Логин,Пароль");
		Если Не ПустаяСтрока(РезультатПолученияТикета.КодОшибки) Тогда
			ДанныеАутентификации.Логин  = "fresh";
			ДанныеАутентификации.Пароль = "fresh";
		Иначе
			ДанныеАутентификации.Логин  = "AUTH_TOKEN";
			ДанныеАутентификации.Пароль = РезультатПолученияТикета.Тикет;
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ДанныеАутентификации = Неопределено Тогда
			ЗаписатьОшибкуВЖурналРегистрации(
				НСтр("ru = 'Интернет-поддержка пользователей не подключена.'"),
				НСтр("ru='Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	Соединение = Новый HTTPСоединение(
		СтруктураАдреса.Хост,
		СтруктураАдреса.Порт,
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль,
		ИнтернетПрокси,
		20,
		?(НРег(СтруктураАдреса.Схема) = "http", Неопределено, Новый ЗащищенноеСоединениеOpenSSL));
		
	Возврат Соединение;

КонецФункции

Функция АдресСервиса()
	
	Возврат "https://api.bankinformation.1c.ru:443";

КонецФункции

Функция АдресРесурсаСобытияБанков(ПоследнийИдентификатор)

	Возврат СтрШаблон("/rest/bank_event/v1?lastLoadedEventUid=%1", Формат(ПоследнийИдентификатор, "ЧН=; ЧГ="));
	
КонецФункции

Функция АдресРесурсаКлассификаторБанков()

	Возврат "/rest/bank_classifier/v1";

КонецФункции

Процедура ПолучитьПоследнийИдентификаторСобытий(Результат)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СобытияНадежностьБанков.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.СобытияНадежностьБанков КАК СобытияНадежностьБанков
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор УБЫВ";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Результат.ПоследнийИдентификатор = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Результат.ПоследнийИдентификатор = Выборка.Идентификатор;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновлениеСобытийВыполняется(Результат)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ключ", КлючНаименованиеЗаданияНовыеСобытия().КлючФоновогоЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	НайденныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Возврат НайденныеЗадания.Количество() > 0;

КонецФункции

Процедура ЗаписатьОшибкуВЖурналРегистрации(Сообщение, ДополнительноеСобытие = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации() 
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Сообщение);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Мониторинг банков'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция КлючНаименованиеЗаданияНовыеСобытия()
	
	Результат = Новый Структура;
	Результат.Вставить("КлючФоновогоЗадания", "НадежностьБанковНовыеСобытия");
	Результат.Вставить("НаименованиеФоновогоЗадания", 
		НСтр("ru='Сервис ""Мониторинг банков"": получение новых событий'"));
	Возврат Результат;

КонецФункции

Функция КлючНаименованиеЗаданияПоследниеСобытияБанковОрганизаций()
	
	Результат = Новый Структура;
	Результат.Вставить("КлючФоновогоЗадания", "НадежностьБанковПоследниеСобытияБанковОрганизаций");
	Результат.Вставить("НаименованиеФоновогоЗадания", 
		НСтр("ru='Сервис ""Мониторинг банков"": получение последних событий банков организаций'"));
	Возврат Результат;

КонецФункции

Функция СоответствиеТиповСобытий()

	Результат = Новый Соответствие;
	Результат.Вставить("LICENSE_RECALL", Перечисления.СобытияНадежностьБанков.ЛицензияОтозвана);
	Результат.Вставить("BANK_ACTIVITY_SUSPENDED", Перечисления.СобытияНадежностьБанков.ДеятельностьПриостановлена);
	Результат.Вставить("BANK_ACTIVITY_RESTORED", Перечисления.СобытияНадежностьБанков.ДеятельностьВозобновлена);
	Результат.Вставить("ADMIN_LIABILITY", Перечисления.СобытияНадежностьБанков.БанкПривлеченКОтветственности);
	Результат.Вставить("LIMITS_VIOLATION", Перечисления.СобытияНадежностьБанков.НормативыНеСоответствуютТребуемым);
	Результат.Вставить("FUND_LIMIT_VIOLATION", Перечисления.СобытияНадежностьБанков.КапиталНижеТребуемого);
	Результат.Вставить("BIK_DICTIONARY_CHANGED", Перечисления.СобытияНадежностьБанков.КодыБанковИзменены);
	Результат.Вставить("EVENT_DELETED", Перечисления.СобытияНадежностьБанков.СобытиеУдалено);
	Результат.Вставить("BANK_COMMENT", Перечисления.СобытияНадежностьБанков.Информация);
	
	Возврат Результат;

КонецФункции

Функция ПоказанныеСобытия()

	ПоказанныеСобытия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НадежностьБанков",
		"ПоказанныеСобытия");
	Если ТипЗнч(ПоказанныеСобытия) <> Тип("Массив") Тогда
		ПоказанныеСобытия = Новый Массив;
	КонецЕсли;
	Возврат ПоказанныеСобытия;
	
КонецФункции

Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	ПоставщикПортал1СИТС = Неопределено;
	ИдентификаторПоставщикаУслугПортал1СИТС =
		ИнтернетПоддержкаПользователейКлиентСервер.ИдентификаторПоставщикаУслугПортал1СИТС();
	Для каждого ЗначениеМассива Из ПоставщикиУслуг Цикл
		Если ЗначениеМассива.Идентификатор = ИдентификаторПоставщикаУслугПортал1СИТС Тогда
			ПоставщикПортал1СИТС = ЗначениеМассива;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоставщикПортал1СИТС = Неопределено Тогда
		ПоставщикПортал1СИТС = Новый Структура;
		ПоставщикПортал1СИТС.Вставить("Идентификатор", ИдентификаторПоставщикаУслугПортал1СИТС);
		ПоставщикПортал1СИТС.Вставить("Наименование" , НСтр("ru = 'Портал 1С:ИТС'"));
		ПоставщикПортал1СИТС.Вставить("Услуги"       , Новый Массив);
		ПоставщикиУслуг.Добавить(ПоставщикПортал1СИТС);
	КонецЕсли;
	
	НоваяУслуга = Новый Структура;
	НоваяУслуга.Вставить("Идентификатор", ИдентификаторУслугиМониторингБанков());
	НоваяУслуга.Вставить("Наименование",  НСтр("ru = 'Сервис 1С:Мониторинг банков'"));
	НоваяУслуга.Вставить("ТипУслуги",     Перечисления.ТипыУслуг.Безлимитная);
	
	ПоставщикПортал1СИТС.Услуги.Добавить(НоваяУслуга);
	
КонецПроцедуры

Функция ИдентификаторУслугиМониторингБанков()
	
	Возврат "1c-bank-monitoring";
	
КонецФункции

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	НовыеРазрешения = Новый Массив;
	
	Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
		"HTTPS",
		"api.bankinformation.1c.ru",
		443,
		НСтр("ru = 'Сервис Мониторинг банков'"));
	НовыеРазрешения.Добавить(Разрешение);
	
	ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
	
КонецПроцедуры

#КонецОбласти
