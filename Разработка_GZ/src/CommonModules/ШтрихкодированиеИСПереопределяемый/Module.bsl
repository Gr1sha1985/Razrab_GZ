#Область ПрограммныйИнтерфейс

//Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида.
//
//Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
Процедура ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Заполняет соответствие штрихкодов данными по номенклатуре, характеристике, маркируемой продукции.
// 
// Параметры:
//  Штрихкоды            - Соответствие - Спискок штрихкодов.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ЗаполнитьИнформациюПоШтрихкодам(Штрихкоды, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Соответствие;
	КонецЕсли;
	
	СписокШтрихкодов = Новый Массив;
	Для Каждого КлючЗначение Из Штрихкоды Цикл
		Если КэшированныеЗначения[КлючЗначение.Ключ] = Неопределено Тогда
			СписокШтрихкодов.Добавить(КлючЗначение.Ключ);
		КонецЕсли; 
	КонецЦикла;
	
	ТаблицаНоменклатурыПоШтрикходам = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкодам(СписокШтрихкодов, Истина);
	
	Для Каждого ШтрикходНоменклатуры Из Штрихкоды Цикл
		КэшированноеЗначение = КэшированныеЗначения[ШтрикходНоменклатуры.Ключ];
		Если КэшированноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ШтрикходНоменклатуры.Значение, КэшированноеЗначение);
		Иначе
			СтрокаНоменклатура = ТаблицаНоменклатурыПоШтрикходам.Найти(КлючЗначение.Ключ, "Штрихкод");
			Если СтрокаНоменклатура <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ШтрикходНоменклатуры.Значение, СтрокаНоменклатура);
				
				// Дополним кэш найденным значением.
				КэшированныеЗначения.Вставить(ШтрикходНоменклатуры.Ключ, ШтрикходНоменклатуры.Значение);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

//В процедуре нужно реализовать подготовку данных для дальнейшей обработки штрихкодов.
//
//Параметры:
//   Форма - УправляемаяФорма - форма документа, в которой происходит обработка,
//   ДанныеШтрихкодов - Массив - полученные штрихкоды,
//   ПараметрыЗаполнения - см. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
//   СтруктураДействий - Структура - подготовленные данные.

Процедура ПодготовитьДанныеДляОбработкиШтрихкодов(Форма, ДанныеШтрихкодов, ПараметрыЗаполнения, СтруктураДействий) Экспорт
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
		Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	
	Если ШтрихкодированиеИС.ПрисутствуетАлкогольнаяПродукция(ПараметрыЗаполнения.ВидыПродукцииИС) Тогда
		
		ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
		
		Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьИндексАкцизнойМарки");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ПараметрыЗаполнения.ВидыПродукцииИС)
		Или ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыЗаполнения.ВидыПродукцииИС) Тогда
		
		Если ПараметрыЗаполнения.ЗаполнитьGTIN Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьGTINВСтроке",
			
			Новый Структура("ДобавлятьЛидирующиеНули", Истина));
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыБПКлиентСервер.ПараметрыОбработкиШтрихкодов();
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Структура") Тогда
		СтруктураДействий.Штрихкоды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеШтрихкодов);
	Иначе
		СтруктураДействий.Штрихкоды = ДанныеШтрихкодов;
	КонецЕсли;
	
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ШтрихкодыВТЧ                           = ПараметрыЗаполнения.ШтрихкодыВТЧ;
	СтруктураДействий.МаркируемаяПродукцияВТЧ                = ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ;

	
КонецПроцедуры

// В процедуре нужно реализовать обработку штрихкодов.
// Параметры:
//   Форма - УправляемаяФорма - форма для которой будут обработаны введенные штрихкоды.
//   ДанныеДляОбработки - Структура - структура параметров обработки штрихкодов.
//									   и заполняется данными из формы.
//   КэшированныеЗначения - Структура - кэш формы.
//
Процедура ОбработатьШтрихкоды(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	Перем ДанныеКИЗ_ГИСМ;
	
	Объект = Форма.Объект;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Структура;
	КонецЕсли; 
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("Дата",             ОбщегоНазначения.РабочаяДатаПользователя());
	ДанныеОбъекта.Вставить("Организация",      Справочники.Организации.ПустаяСсылка());
	ДанныеОбъекта.Вставить("Склад",            Справочники.Склады.ПустаяСсылка());
	ДанныеОбъекта.Вставить("ТипЦен",           Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Истина);
	ДанныеОбъекта.Вставить("ДокументБезНДС",   Ложь);
	
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ТипЦен) Тогда
		ДанныеОбъекта.Вставить("СпособЗаполненияЦены", Перечисления.СпособыЗаполненияЦен.ПоПродажнымЦенам);
	КонецЕсли;
			
	ДанныеОбъекта.Вставить("Реализация", Истина);
	
	КолонкиТабличнойЧасти =  Объект[ДанныеДляОбработки.ИмяТЧ].Выгрузить().Колонки;
	
	УказыватьКИЗПоСтрокам        = КолонкиТабличнойЧасти.Найти("КиЗ_ГИСМ") <> Неопределено;
	УказыватьЦенуПоСтрокам       = КолонкиТабличнойЧасти.Найти("Цена") <> Неопределено;
	УказыватьКоличествоПоСтрокам = КолонкиТабличнойЧасти.Найти("Количество") <> Неопределено;
	
	Для каждого ДанныеШтрихкода Из ДанныеДляОбработки.Штрихкоды Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользоватьКонтрольныеЗнакиГИСМ")
			И Форма.ИспользоватьКонтрольныеЗнакиГИСМ
			И ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(ДанныеШтрихкода.Штрихкод) Тогда
			ДанныеКИЗ_ГИСМ = Справочники.КонтрольныеЗнакиГИСМ.ДанныеКИЗ_ГИСМПоНомеру(ДанныеШтрихкода.Штрихкод);
		КонецЕсли;
		
		НоменклатураПоШтрихкоду = Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("СоответветствиеШтрихкодыНоменклатуры") Тогда
			КэшированныеЗначения.Вставить("СоответветствиеШтрихкодыНоменклатуры", Новый Соответствие);
		Иначе
			НоменклатураПоШтрихкоду = КэшированныеЗначения.СоответветствиеШтрихкодыНоменклатуры[ДанныеШтрихкода.Штрихкод];
		КонецЕсли; 
		
		Если НоменклатураПоШтрихкоду = Неопределено Тогда
			ТаблицаНоменклатурыПоШтрикоду = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкоду(ДанныеШтрихкода.Штрихкод);
			
			Если ТаблицаНоменклатурыПоШтрикоду.Количество() > 0 Тогда
				НоменклатураПоШтрихкоду = ТаблицаНоменклатурыПоШтрикоду[0].Номенклатура;
				КэшированныеЗначения.СоответветствиеШтрихкодыНоменклатуры.Вставить(ДанныеШтрихкода.Штрихкод, НоменклатураПоШтрихкоду);
			КонецЕсли; 
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоменклатураПоШтрихкоду) Тогда
			Если ЗначениеЗаполнено(ДанныеКИЗ_ГИСМ) Тогда
				НоменклатураПоШтрихкоду = ДанныеКИЗ_ГИСМ.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоменклатураПоШтрихкоду) Тогда
			СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(НоменклатураПоШтрихкоду, ДанныеОбъекта, Ложь, Истина);
			
			Если СведенияОНоменклатуре.ТабачнаяПродукция Тогда
				ДанныеДляОбработки.ШтрихкодыТабачнойПродукции.Добавить(НоменклатураПоШтрихкоду);
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки = Новый Структура;
			ДанныеСтроки.Вставить("Номенклатура", НоменклатураПоШтрихкоду);
			ДанныеСтроки.Вставить("Количество",   ДанныеШтрихкода.Количество);
			
			Если СведенияОНоменклатуре <> Неопределено Тогда
				ДанныеСтроки.Вставить("Цена",      СведенияОНоменклатуре.Цена);
			Иначе
				ДанныеСтроки.Вставить("Цена",      0);
			КонецЕсли;
			
			ДанныеСтроки.Вставить("КиЗ_ГИСМ", ?(ЗначениеЗаполнено(ДанныеКИЗ_ГИСМ),ДанныеКИЗ_ГИСМ.КиЗ_ГИСМ, Справочники.КонтрольныеЗнакиГИСМ.ПустаяСсылка()));
			ДанныеСтроки.Вставить("Штрихкод", ДанныеШтрихкода.Штрихкод);
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", ДанныеСтроки.Номенклатура);
			
			Если УказыватьЦенуПоСтрокам Тогда
				СтруктураОтбора.Вставить("Цена",         Окр(ДанныеСтроки.Цена,2,1));
			КонецЕсли; 
			
			Если УказыватьКИЗПоСтрокам Тогда
				СтруктураОтбора.Вставить("КиЗ_ГИСМ", ДанныеСтроки.КиЗ_ГИСМ);
			КонецЕсли; 
				
			СтрокиТабличнойЧасти = Объект[ДанныеДляОбработки.ИмяТЧ].НайтиСтроки(СтруктураОтбора);
			Если НЕ СведенияОНоменклатуре.АлкогольнаяПродукция 
				И НЕ СведенияОНоменклатуре.ТабачнаяПродукция 
				И УказыватьКоличествоПоСтрокам
				И СтрокиТабличнойЧасти.Количество() > 0 Тогда
				
				// Нашли - увеличиваем количество.
				СтрокаТабличнойЧасти = СтрокиТабличнойЧасти[0];
				СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + ДанныеСтроки.Количество;
			Иначе
				СтрокаТабличнойЧасти = Объект[ДанныеДляОбработки.ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
			КонецЕсли;
			
			ИдентификаторСтроки = СтрокаТабличнойЧасти.ПолучитьИдентификатор();
			
			ДанныеДляОбработки.ТекущаяСтрока = ИдентификаторСтроки;
			
			Если СведенияОНоменклатуре.АлкогольнаяПродукция Тогда
				ДанныеДляОбработки.МассивСтрокСАкцизнымиМарками.Добавить(ИдентификаторСтроки);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

// В процедуре требуется реализовать алгоритм обработки полученных штрихкодов из ТСД.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма документа, в которой происходит обработка,
//  ДанныеДляОбработки - Структура - подготовленные ранее данные для обработки,
//  КэшированныеЗначения - Структура - используется механизмом обработки изменения реквизитов ТЧ.
Процедура ОбработатьДанныеИзТСД(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы ДанныеПоEAN на основании заполненной колонки ШтрихкодEAN.
// 
// Параметры:
//  ДанныеПоШтрихкодамEAN - ТаблицаЗначений - передается с обязательной колонкой ШтрихкодEAN, возвращает:
//   * Номенклатура - ОпределяемыйТип.Номенклатура
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры
//   * Характеристика - ОпределяемыйТип.Характеристика
//   * ШтрихкодEAN - Строка - Штрихкод
//   * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//   * МаркируемаяПродукция - Булево - Признак маркируемой продукции
Процедура ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	МассивСтрокКУдалению = Новый Массив;

	МассивШтрихкодов = Новый Массив;
	Для каждого СтрокаПоШтрихкоду Из ДанныеПоШтрихкодамEAN Цикл
		МассивШтрихкодов.Добавить(СтрокаПоШтрихкоду.ШтрихкодEAN);
		
		// Код может быть записан в базе как GTIN
		МассивШтрихкодов.Добавить(ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаПоШтрихкоду.ШтрихкодEAN));
		
		// EAN-13 с ведущим нулем, может быть закодирован как UPC-A
		Если Лев(СтрокаПоШтрихкоду.ШтрихкодEAN, 1) = "0"  Тогда
			МассивШтрихкодов.Добавить(Прав(СтрокаПоШтрихкоду.ШтрихкодEAN, 12));
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаНоменклатурыПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.НоменклатураПоШтрихкодам(МассивШтрихкодов, Истина);
	Для каждого СтрокаТаблицы Из ДанныеПоШтрихкодамEAN Цикл
		СтрокаСоответствия = ТаблицаНоменклатурыПоШтрихкодам.Найти(СтрокаТаблицы.ШтрихкодEAN, "Штрихкод");
		
		// Возможно код записан в формате GTIN
		Если СтрокаСоответствия = Неопределено Тогда
			СтрокаСоответствия = ТаблицаНоменклатурыПоШтрихкодам.Найти(ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаТаблицы.ШтрихкодEAN), "Штрихкод");
		КонецЕсли; 
		
		// Возможно код записан в формате UPC-A
		Если СтрокаСоответствия = Неопределено 
			И Лев(СтрокаТаблицы.ШтрихкодEAN, 1) = "0" Тогда
			
			СтрокаСоответствия = ТаблицаНоменклатурыПоШтрихкодам.Найти(Прав(СтрокаТаблицы.ШтрихкодEAN, 12), "Штрихкод");
		КонецЕсли; 
		
		Если СтрокаСоответствия <> Неопределено Тогда
			СтрокаТаблицы.Номенклатура              = СтрокаСоответствия.Номенклатура;
			СтрокаТаблицы.ПредставлениеНоменклатуры = СтрокаСоответствия.ПредставлениеНоменклатура;
			СтрокаТаблицы.МаркируемаяПродукция      = СтрокаСоответствия.МаркируемаяПродукция;
			
			Если СтрокаСоответствия.ТабачнаяПродукция Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак;
			ИначеЕсли СтрокаСоответствия.ОбувнаяПродукция Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь;
			ИначеЕсли СтрокаСоответствия.Велосипеды Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Велосипеды;
			ИначеЕсли СтрокаСоответствия.Духи Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи;
			ИначеЕсли СтрокаСоответствия.КреслаКоляски Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски;
			ИначеЕсли СтрокаСоответствия.ЛегкаяПромышленность Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность;
			ИначеЕсли СтрокаСоответствия.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
			ИначеЕсли СтрокаСоответствия.МолочнаяПродукцияБезВЕТИС Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС;
			ИначеЕсли СтрокаСоответствия.Фотоаппараты Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты;
			ИначеЕсли СтрокаСоответствия.Шины Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Шины;
			ИначеЕсли СтрокаСоответствия.АльтернативныйТабак Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак;
			ИначеЕсли СтрокаСоответствия.УпакованнаяВода Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода;
			ИначеЕсли СтрокаСоответствия.АлкогольнаяПродукция Тогда
				СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная;
			КонецЕсли; 
		Иначе
			МассивСтрокКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли; 
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрокКУдалению Цикл
		ДанныеПоШтрихкодамEAN.Удалить(СтрокаТаблицы);
	КонецЦикла;
		
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы "ОстаткиМаркируемойПродукции" (по данным информационной базы).
//   На основании данных таблицы будет происходить контроль остатков, если в параметрах сканирования свойство
//   "ОперацияКонтроляАкцизныхМарок" будет заполнено значением "Продажа" или "Возврат", а прочий контроль выключен
//     (сейчас это продажа продукции ИС МП с выключенным контролем статусов).
// Первая операция контролю не подлежит (ранее не участвовавший в товародвижении КМ можно и продать, и вернуть).
// Отсутствие переопределения соответствует отсутствию контроля.
// 
// Параметры:
//  ОстаткиМаркируемойПродукции - (См. ШтрихкодированиеИС.ИнициализацияТаблицыПроверкиОстатков).
//  ПараметрыСканирования - (См. ШтрихкодированиеИС.ПараметрыСканирования).
Процедура ПриОпределенииОстатковМаркируемойПродукции(ОстаткиМаркируемойПродукции, ПараметрыСканирования) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение колонки Штрихкод на основании заполненных колонок Номенклатура и Характеристика.
//
// Параметры:
//   ДанныеПоШтрихкодамEAN - ТаблицаЗначений - содержит колонки:
//    * Номенклатура   - ОпределяемыйТип.Номенклатура               - входящий
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - входящий
//    * Штрихкод       - Строка                                     - исходящий
//  ИмяКолонкиЗаполнения - Строка - Имя колонки таблицы значений, которую требуется заполнить значением штрихкода.
Процедура ЗаполнитьШтрихкоды(ДанныеПоШтрихкодам, ИмяКолонкиЗаполнения = "Штрихкод") Экспорт
	
	СписокНоменклатура = ОбщегоНазначения.ВыгрузитьКолонку(ДанныеПоШтрихкодам, "Номенклатура", Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатура", СписокНоменклатура);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура В(&СписокНоменклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатуры.Номенклатура";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", РезультатЗапроса.Номенклатура);
		
		СтрокиНоменклатуры = ДанныеПоШтрихкодам.НайтиСтроки(Отбор);
		Для каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
			СтрокаНоменклатуры[ИмяКолонкиЗаполнения] = РезультатЗапроса.Штрихкод;
		КонецЦикла; 
		
	КонецЦикла; 
КонецПроцедуры

// В процедуре необходимо реализовать проверку необходимости выбора серии для номенклатуры.
// 
// Параметры:
//  ДанныеДляРасчетаСерии  - Структура - Данные для расчета серий.
//  ПараметрыУказанияСерий - Структура - Параметры указания серий.
//  ТребуетсяВыбор         - Булево - исходящий, признак необходимости выбора серии.
//  КэшированныеЗначения   - Произвольный - кэшированные значения
//
Процедура ПриОпределенииНеобходимостиВыбораСерии(ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор, КэшированныеЗначения = Неопределено) Экспорт
	
	ТребуетсяВыбор = Ложь;
	
КонецПроцедуры

// Выполняет заполнение параметра "ШтрихкодыУпаковок" значениями штрихкодов документа.
// 
// Параметры:
//  Документ - ДокументСсылка - Документ, для которого выполняется обработка штрихкодов.
//  ШтрихкодыУпаковок - Массив из Строка - Коллекция значений штрихкодов.
Процедура ЗаполнитьШтрихкодыУпаковокДокумента(ДокументСсылка, ШтрихкодыУпаковок) Экспорт
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	МетаданныеТабличнойЧасти = МетаданныеДокумента.ТабличныеЧасти.Найти("ШтрихкодыУпаковок");
	Если МетаданныеТабличнойЧасти = НЕОПРЕДЕЛЕНО Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ИмяПоляЗначениеШтрихкода КАК ЗначениеШтрихкода
	|ИЗ
	|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &ДокументСсылка";
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЗначениеШтрихкода", МетаданныеТабличнойЧасти) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляЗначениеШтрихкода", "ШтрихкодыУпаковок.ЗначениеШтрихкода");
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Штрихкод", МетаданныеТабличнойЧасти) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляЗначениеШтрихкода", "ШтрихкодыУпаковок.Штрихкод");
	
	Иначе
		
		Возврат;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "ВходящаяТранспортнаяОперацияВЕТИС", МетаданныеДокумента.Имя));
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ШтрихкодыУпаковок = ОбщегоНазначения.ВыгрузитьКолонку(Запрос.Выполнить().Выгрузить(), "ЗначениеШтрихкода");
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение таблицы данных данными документа основания.
// 
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ТаблицаДанных - ТаблицаЗначений - Данные из документа основания.
Процедура СформироватьДанныеДокументаОснования(ПараметрыСканирования, ТаблицаДанных) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать обработку данных штрихкода для общей формы. результат обработки штрихкода следует
// вернуть в параметре РезультатОбработки.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Общая форма.
//  ДанныеШтрихкода - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьДанныеШтрихкода).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ВложенныеШтрихкоды - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
//  РезультатОбработки - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
Процедура ОбработатьДанныеШтрихкодаДляОбщейФормы(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды, РезультатОбработки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В этой процедуре при необходимости следует реализовать дополнительные проверки на ошибки данных по штрихкодам.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка штрихкодов.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам). 
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В данной процедуре требуется переопределить текст запроса, определяющий свойства маркируемой продукции.
// Номенклатура для запроса лежить во временной таблице "ДанныеШтрихкодовУпаковок". (ДанныеШтрихкодовУпаковок.Номенклатура).
// "ВидПродукции". Поле "Номенклатура" желательно индексировать.
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * Номенклатура   - ОпределяемыйТип.Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры
//   Ожидаемые действия:
//   * Создание временной таблицы "СвойстваМаркируемойПродукции" с колонками:
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура
//     ** МаркируемаяПродукция - Булево
//     ** ВидПродукции         - ПеречислениеСсылка.ВидыПродукцииИС
// Параметры:
//  ТекстЗапросаСвойстваМаркируемойПродукции - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапросаСвойстваМаркируемойПродукции) Экспорт
	
	ТекстЗапросаСвойстваМаркируемойПродукции =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|			ИЛИ &УсловиеМаркируемаяПродукция) КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА НЕ ВидыАлкогольнойПродукции.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ЛегкаяПромышленность
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.МолочнаяПродукцияПодконтрольнаяВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.МолочнаяПродукцияБезВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Шины
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АльтернативныйТабак
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.УпакованнаяВода
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Духи
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Велосипеды
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.КреслаКоляски
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Фотоаппараты
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции
	|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СведенияОбАлкогольнойПродукции.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (СведенияОбАлкогольнойПродукции.КодВида169 = ВидыАлкогольнойПродукции.Код)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ ВидыАлкогольнойПродукции.Ссылка ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ОбувнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ЛегкаяПромышленность
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.МолочнаяПродукцияПодконтрольнаяВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.МолочнаяПродукцияБезВЕТИС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Шины
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АльтернативныйТабак
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.УпакованнаяВода
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Духи
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Велосипеды
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.КреслаКоляски
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.Фотоаппараты
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	ВидыМаркируемойПродукции = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	ИнтеграцияИСМПБП.УстановитьУсловиеПоМаркируемойПродукции(ТекстЗапросаСвойстваМаркируемойПродукции, ВидыМаркируемойПродукции);
	
КонецПроцедуры

// В данной процедуре требуется переопределить сочетание клавиш для команды "Добавить без маркировки" в форме сканирования.
// 
// Параметры:
//  СочетаниеКлавиш - СочетаниеКлавиш - По умолчанию "Ctr + Z".
Процедура ПриОпределенииСочетанияКлавишДобавитьБезМаркировкиВФормеСканирования(СочетаниеКлавиш) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В случае учета серий в данной процедуре необходимо реализовать заполнение таблицы значений "ДанныеТаблицыТовары", содержащей колонки: 
//     "Номенклатура", "Характеристика", "Серия", "Количество". Таблицу необходимо положить во временное хранилище, адрес хранилища
//     - в ПараметрыСканирования.ДанныеТаблицыТовары. Если учет серий не ведется - заполнение не требуется.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, для которой происходит обработка штрихкодов.
//  ДанныеТаблицыТовары - См. ШтрихкодированиеИС.ИнициализицияТаблицыДанныхДокумента.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//  СтандартнаяОбработка - Булево, Ложь - если требуется заполнение таблицы в данной процедуре, Истина - заполнение произойдет
//      по стандартному алгоритму.
Процедура ПриФормированииДанныхТабличнойЧастиТовары(Форма, ДанныеТаблицыТовары, ПараметрыСканирования, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В данной процедуре необходимо определить модуль для обработки данных штрихкода. Если модуль не будет определен оббработка
// будет выполнена в модуле менеджера. Процедура, в которой будует выполнена обработка должна называться "ОбработатьДанныеШтрихкода"
// с параметрами: "Форма", "ДанныеШтрихкода", "ПараметрыСканирования", "ВложенныеШтрихкоды".
// 
// Параметры:
// 	Форма - УправляемаяФорма - форма объекта.
// 	МодульДляОбработки - Произвольный - Модуль, в котором будет выполнена обработка.
// 	СтандартнаяОбработка - Булево - Если требуется переопределеить модуль для обработки - требуется установить флаг в Ложь.
Процедура ОпределитьМодульДляОбработкиДанныхШтрихкода(Форма, МодульДляОбработки, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Контрагент.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
//
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН    КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В (&КоллекцияИНН)");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре необходимо определить вычисление вида продукции для текста запроса.
//
// Параметры:
//  ТекстЗапроса - Строка - исходящий, дополняемый текст запроса.
//
Процедура ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса) Экспорт
	
	ОпределениеВидаПродукции =
	"	Выбор
	|		Когда Номенклатура В (ВЫБРАТЬ РАЗЛИЧНЫЕ Номенклатура ИЗ РегистрСведений.СоответствиеНоменклатурыЕГАИС)
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		Когда Номенклатура.ТабачнаяПродукция
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Табак)
	|		Когда Номенклатура.ОбувнаяПродукция
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Обувь)
	|		Когда Номенклатура.ЛегкаяПромышленность
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|		Когда Номенклатура.МолочнаяПродукцияПодконтрольнаяВЕТИС
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		Когда Номенклатура.МолочнаяПродукцияБезВЕТИС
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|		Когда Номенклатура.Шины
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Шины)
	|		Когда Номенклатура.АльтернативныйТабак
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|		Когда Номенклатура.УпакованнаяВода
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|		Когда Номенклатура.Фотоаппараты
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|		Когда Номенклатура.Духи
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Духи)
	|		Когда Номенклатура.Велосипеды
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.Велосипеды)
	|		Когда Номенклатура.КреслаКоляски
	|			Тогда Значение(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|		Иначе Значение(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	Конец ";
	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеВидаПродукции", ОпределениеВидаПродукции);
	
КонецПроцедуры

// В процедуре необходимо определить вычисление вида продукции для текста запроса построения дерева.
//
// Параметры:
//  ТекстЗапроса    - Строка - исходящий, дополняемый текст запроса.
//  УровнейВЗапросе - Число - количество уровней вложений.
//
Процедура ОпределитьВидПродукцииТекстаЗапросаДереваУпаковок(ТекстЗапроса, УровнейВЗапросе) Экспорт
	
	
	Для Уровень = 0 По УровнейВЗапросе Цикл
		
		ОпределениеВидаПродукции = 
		"ВЫБОР
		|	КОГДА ДанныеУпаковок.УпаковкаУровень"+Уровень+".Номенклатура <> НЕОПРЕДЕЛЕНО
		|		ТОГДА ВЫБОР
		|			КОГДА ДанныеУпаковок.УпаковкаУровень"+Уровень+".Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ РегистрСведений.СоответствиеНоменклатурыЕГАИС ГДЕ Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|				ТОГДА Значение(Перечисление.ВидыПродукцииИС.Алкогольная)
		|			КОГДА ДанныеУпаковок.УпаковкаУровень"+Уровень+".Номенклатура.ТабачнаяПродукция
		|				ТОГДА Значение(Перечисление.ВидыПродукцииИС.Табак)
		|			КОНЕЦ
		|	КОНЕЦ"; 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеВидаПродукции" + Уровень , ОпределениеВидаПродукции);
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы ДанныеПоEAN на основании заполненной колонки ЗначениеШтрихкодаEAN.
// 
// Параметры:
//	ДанныеПоШтрихкодамEAN - ТаблицаЗначений - передается с обязательной колонкой ШтрихкодEAN, возвращает:
//	* Номенклатура
//	* Характеристика
//	* ШтрихкодEAN
//	* ПредставлениеНоменклатуры
//	* ВидПродукции
Процедура ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	Если ДанныеПоШтрихкодамEAN.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеПоШтрихкодамEAN.ШтрихкодEAN КАК ШтрихкодEAN
	|ПОМЕСТИТЬ ВТ_ШтрихкодыEAN
	|ИЗ
	|	&ДанныеПоШтрихкодамEAN КАК ДанныеПоШтрихкодамEAN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВТ_АлкогольнаяПродукция
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Номенклатура.НаименованиеПолное, """") КАК ПредставлениеНоменклатуры,
	|	ВТ_ШтрихкодыEAN.ШтрихкодEAN КАК ШтрихкодEAN,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|		КОГДА НЕ ВТ_АлкогольнаяПродукция.Номенклатура ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА ШтрихкодыНоменклатуры.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА ШтрихкодыНоменклатуры.Номенклатура.ОбувнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ОбувнаяПродукция)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПродукции
	|ИЗ
	|	ВТ_ШтрихкодыEAN КАК ВТ_ШтрихкодыEAN
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ((ВЫРАЗИТЬ(ВТ_ШтрихкодыEAN.ШтрихкодEAN КАК СТРОКА(200))) = ШтрихкодыНоменклатуры.Штрихкод)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АлкогольнаяПродукция КАК ВТ_АлкогольнаяПродукция
	|		ПО (ШтрихкодыНоменклатуры.Номенклатура = ВТ_АлкогольнаяПродукция.Номенклатура)";
	
	Запрос.УстановитьПараметр("ДанныеПоШтрихкодамEAN", ДанныеПоШтрихкодамEAN);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДанныеПоШтрихкодамEAN.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса, ДанныеПоШтрихкодамEAN);
	
КонецПроцедуры

// В процедуре необходимо реализовать проверку необходимости выбора серии для данных по штрихкодам.
// 
// Параметры:
// 	ДанныеШтрихкода       - Структура - данные штрихкода.
// 	ПараметрыСканирования - Структура - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
// 	ТребуетсяВыбор        - Булево - исходящий, признак необходимости выбора серии.
//
Процедура ОпределитьНеобходимостьВыбораСерииДляДанныхШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, ТребуетсяВыбор) Экспорт
	
	ТребуетсяВыбор = Ложь;
	
КонецПроцедуры

// Добавляет в текст запроса определение признака "Маркируемая продукция".
// 
// Параметры:
// 	ТекстЗапроса - Строка - Текст запроса.
// 	ПутьКПолюНоменклатура - Строка - Путь к полю номенклатуры в тексте запроса.
// 	Параметр - Строка - параметр запроса, который будет заменен на фрагмент определения признака "Маркиремая продукция".
Процедура ОпределитьПризнакМаркируемаяПродукцияТекстаЗапроса(ТекстЗапроса, ПутьКПолюНоменклатура, Параметр) Экспорт
	
	
КонецПроцедуры

// В процедуре необходимо реализовать замену значений неопределено на пустые ссылки в строке дерева.
// 
// Параметры:
// 	СтрокаДерева - СтрокаДереваЗначений - строка дерева значений для заполнения.
//
Процедура ЗаменитьЗначенияНеопределеноНаПустыеСсылкиВСтрокеДерева(СтрокаДерева) Экспорт
	
	Если СтрокаДерева.Номенклатура = Неопределено Тогда
		СтрокаДерева.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаДерева.Характеристика = Неопределено Тогда
		СтрокаДерева.Характеристика = "";
	КонецЕсли;
	
	Если СтрокаДерева.Серия = Неопределено Тогда
		СтрокаДерева.Серия = "";
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
