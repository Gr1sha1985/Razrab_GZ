////////////////////////////////////////////////////////////////////////////////////////
// СопоставлениеНоменклатурыКонтрагентовСлужебный: 
// механизм сопоставления номенклатуры контрагентов с номенклатурой информационной базы.
//
///////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область РаботаСНоменклатуройКонтрагентов

// Возвращает признак наличия у пользователя прав на сопоставление номенклатуры.
//
// Возвращаемое значение:
//  Булево - признак наличия прав.
//
Функция ЕстьПравоСопоставленияНоменклатуры() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.НоменклатураКонтрагентов);
	
КонецФункции

// Возвращает владельца номенклатуры, которой пользуется контрагент.
//
// Параметры:
//  Контрагент - ОпределяемыйТип.КонтрагентБЭД - контрагент, владельца номенклатуры которого нужно получить.
//
// Возвращаемое значение:
//  ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры контрагента.
//
Функция ВладелецНоменклатурыКонтрагента(Знач Контрагент) Экспорт
	
	Владелец = Контрагент;
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииВладельцаНоменклатурыКонтрагента(Контрагент, Владелец);
	Возврат Владелец;
	
КонецФункции

// Возвращает первую найденную ссылку номенклатуры контрагента по владельцу и идентификатору.
//
// Параметры:
//  ВладелецНоменклатуры - ОпределяемыйТип.ВладелецНоменклатурыБЭД - владелец номенклатуры.
//  Идентификатор        - Строка                                  - идентификатор номенклатуры контрагента.
//
// Возвращаемое значение:
//  СправочникСсылка.НоменклатураКонтрагентов - ссылка номенклатуры контрагента.
//
Функция НоменклатураКонтрагентаПоВладельцуИИдентификатору(Знач ВладелецНоменклатуры, Знач Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.ВладелецНоменклатуры = &ВладелецНоменклатуры
		|	И НоменклатураКонтрагентов.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("ВладелецНоменклатуры", ВладелецНоменклатуры);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ Локализация

#Область РаботаСПоискомВариантовСопоставленияНоменклатуры

Функция ВариантыСопоставленияНоменклатуры(НаборНоменклатурыКонтрагентов, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(НаборНоменклатурыКонтрагентов) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ПроцентТочностиПоискаНоменклатуры = 50;
	ТребуетсяПоискНоменклатуры        = Истина;
	ИспользоватьСервис                = Неопределено;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ПроцентТочностиПоискаНоменклатуры") Тогда
			ПроцентТочностиПоискаНоменклатуры = ДополнительныеПараметры.ПроцентТочностиПоискаНоменклатуры;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ТребуетсяПоискНоменклатуры") Тогда
			ТребуетсяПоискНоменклатуры = ДополнительныеПараметры.ТребуетсяПоискНоменклатуры;
		КонецЕсли;
		ДополнительныеПараметры.Свойство("ИспользоватьСервис", ИспользоватьСервис);
	КонецЕсли;
	
	Если ИспользоватьСервис = Неопределено Тогда
		ИспользоватьСервис = ИспользоватьСервисРаботаСНоменклатурой();
	КонецЕсли;
	
	ТаблицаНоменклатурыКонтрагентов = ПреобразоватьНаборНоменклатурыКонтрагентовВТаблицу(НаборНоменклатурыКонтрагентов, Истина, Ложь);
	
	Если ИспользоватьСервис Тогда
		НайтиВариантыСопоставленияНоменклатурыПоИдентификаторам(ТаблицаНоменклатурыКонтрагентов);
	КонецЕсли;
	
	НайденныеВарианты = ПодобратьВариантыСопоставленияНоменклатуры(
		ТаблицаНоменклатурыКонтрагентов, ПроцентТочностиПоискаНоменклатуры, ТребуетсяПоискНоменклатуры);
		
	Возврат НайденныеВарианты;
		
КонецФункции

// Возвращает таблицу сопоставлений номенклатуры преобразованную из набора сопоставленных номенклатур.
//
// Параметры:
//  НаборСопоставленнойНоменклатуры - Массив из Структура - набор сопоставленной номенклатуры контрагента:
//   * НоменклатураКонтрагента - См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//   * НоменклатураИБ          - См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаСопоставленнойНоменклатуры - содержит сопоставленные номенклатуры.
//
Функция ТаблицаСопоставленнойНоменклатуры(Знач НаборСопоставленнойНоменклатуры) Экспорт
	
	ТаблицаСопоставленнойНоменклатуры = НоваяТаблицаСопоставленнойНоменклатуры();
	ТаблицаСопоставленнойНоменклатуры.Индексы.Добавить("Владелец, Идентификатор");
	
	Для Каждого НаборНоменклатурыКонтрагента Из НаборСопоставленнойНоменклатуры Цикл
		
		НоваяСтрока = ТаблицаСопоставленнойНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НаборНоменклатурыКонтрагента.НоменклатураКонтрагента);

	КонецЦикла;
	
	Возврат ТаблицаСопоставленнойНоменклатуры;
	
КонецФункции

// Возвращает таблицу сопоставленной номенклатуры из набора не сопоставленных номенклатур.
//
// Параметры:
//  ТаблицаСопоставления             - ТаблицаЗначений из см. НоваяТаблицаСопоставленнойНоменклатуры  - набор сопоставленной номенклатуры контрагента.
//  НаборНеСопоставленныхНоменклатур - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//  ВсеСтрокиСопоставлены            - Булево - признак всех сопоставленных строк переданных в параметре НаборНеСопоставленныхНоменклатур.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаСопоставленнойНоменклатуры - содержит сопоставленные номенклатуры.
//
Функция ТаблицаСопоставленнойНоменклатурыИзНабораНеСопоставленныхНоменклатур(Знач ТаблицаСопоставления,
																			Знач НаборНеСопоставленныхНоменклатур,
																			ВсеСтрокиСопоставлены = Истина) Экспорт
	
	ТаблицаСопоставленнойНоменклатуры = НоваяТаблицаСопоставленнойНоменклатуры();
	Для Каждого ЭлементКоллекции Из НаборНеСопоставленныхНоменклатур Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Идентификатор", ЭлементКоллекции.Идентификатор);
		ПараметрыОтбора.Вставить("Владелец"     , ЭлементКоллекции.Владелец);
		
		СопоставленныеСтроки = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
		Если ЗначениеЗаполнено(СопоставленныеСтроки) Тогда
			НоваяСтрока = ТаблицаСопоставленнойНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СопоставленныеСтроки[0]);
		Иначе
			ВсеСтрокиСопоставлены = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаСопоставленнойНоменклатуры;

КонецФункции

// Возвращает таблицу однозначных сопоставлений по номенклатуре контрагентов или нашей номенклатуре с номенклатурой информационной базы.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//  ДополнительныеПараметры       - Структура - содержит дополнительные параметры:
//   * ИспользоватьСервис                - Булево - признак использования сервиса 1С:Номенклатура.
//                                                  Если признак не заполнен - проверяется использование сервиса.
//   * ПроцентТочностиПоискаНоменклатуры - Число  - процент точности поиска номенклатуры и характеристики по словарю в терминах контрагента.
//   * ТребуетсяПоискНоменклатуры        - Булево - признак необходимости поиска номенклатуры в терминах контрагента.
//   Отказ                        - Булево    - при выполнении произошла ошибка.
//   ТекстОшибки                  - Строка    - краткое представление ошибки для пользователя.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаСопоставленнойНоменклатуры - содержит сопоставленные номенклатуры из НаборНоменклатуры:
//
Функция СопоставленнаяНоменклатураСНоменклатуройИБ(Знач НаборНоменклатурыКонтрагентов, Знач ДополнительныеПараметры = Неопределено,
													Отказ = Ложь, ТекстОшибки = "") Экспорт
	
	Если Не ЗначениеЗаполнено(НаборНоменклатурыКонтрагентов) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ОтобратьУникальныеЗаписиНоменклатурыКонтрагентов(НаборНоменклатурыКонтрагентов);
	
	ВариантУказанияНоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента();
	НоменклатураНаКонтрольСопоставления    = Новый Массив;
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		Если НоменклатураКонтрагента.ВариантУказанияНоменклатуры = ВариантУказанияНоменклатураКонтрагента Тогда
			НоменклатураНаКонтрольСопоставления.Добавить(НоменклатураКонтрагента);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаСопоставленнойНоменклатуры = НоваяТаблицаСопоставленнойНоменклатуры();
	
	ДополнительныеПараметры = Неопределено;
	
	Если ЗначениеЗаполнено(НоменклатураНаКонтрольСопоставления) Тогда
		НоменклатураНаСопоставление = КонтрольСопоставленияНоменклатурыКонтрагентовДляДокументов(НоменклатураНаКонтрольСопоставления, ТаблицаСопоставленнойНоменклатуры);
		НайденныеВарианты = ВариантыСопоставленияНоменклатуры(НоменклатураНаСопоставление, ДополнительныеПараметры);
		ДополнительныеПараметры = СопоставлениеНоменклатурыКонтрагентов.НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов();
		ДополнительныеПараметры.ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ = Ложь;
	Иначе
		НоменклатураНаСопоставление = ПоискНашейНоменклатурыПоВнутреннимИдентификаторам(НаборНоменклатурыКонтрагентов, ТаблицаСопоставленнойНоменклатуры);
		НайденныеВарианты = ВариантыСопоставленияНоменклатуры(НоменклатураНаСопоставление, ДополнительныеПараметры);
	КонецЕсли;
	
	Для Каждого ВариантСопоставления Из НайденныеВарианты Цикл
		
		КоличествоВариантовНоменклатуры   = ВариантСопоставления.ВариантыСопоставленияНоменклатурыБЭД.Количество();
		КоличествоВариантовХарактеристики = ВариантСопоставления.ВариантыСопоставленияХарактеристикиБЭД.Количество();
		КоличествоВариантовУпаковки       = ВариантСопоставления.ВариантыСопоставленияУпаковкиБЭД.Количество();
		
		// Поиск однозначного сопоставления.
		Если КоличествоВариантовНоменклатуры = 1 И (КоличествоВариантовХарактеристики = 1 ИЛИ НЕ ВариантСопоставления.ИспользоватьХарактеристики
			ИЛИ ВариантСопоставления.ИспользоватьХарактеристики И НЕ ВариантСопоставления.ОбязательноеЗаполнениеХарактеристики)
			И (КоличествоВариантовУпаковки = 1 ИЛИ НЕ ВариантСопоставления.ИспользоватьУпаковки) Тогда
			
			НоваяСтрока = ТаблицаСопоставленнойНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВариантСопоставления);
			НоваяСтрока.НоменклатураИБ = ВариантСопоставления.ВариантыСопоставленияНоменклатурыБЭД[0].НоменклатураИБ;
			Если КоличествоВариантовХарактеристики = 1 И ВариантСопоставления.ИспользоватьХарактеристики Тогда
				НоваяСтрока.ХарактеристикаИБ = ВариантСопоставления.ВариантыСопоставленияХарактеристикиБЭД[0];
			КонецЕсли;
			Если ВариантСопоставления.ИспользоватьУпаковки Тогда
				НоваяСтрока.УпаковкаИБ = ВариантСопоставления.ВариантыСопоставленияУпаковкиБЭД[0];
			Иначе
				Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураИБ)
					И Не ЗначениеЗаполнено(НоваяСтрока.УпаковкаИБ) Тогда
					НоваяСтрока.УпаковкаИБ = ВариантСопоставления.ЕдиницаИзмеренияПоУмолчанию;
				КонецЕсли;
			КонецЕсли;
			
			Если ВариантСопоставления.ВариантУказанияНоменклатуры = ВариантУказанияНоменклатураКонтрагента
				И Не ЗначениеЗаполнено(ВариантСопоставления.НоменклатураКонтрагента) Тогда
				НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагентаИнформационнойБазы(
					НоваяСтрока.НоменклатураИБ, НоваяСтрока.ХарактеристикаИБ, НоваяСтрока.УпаковкаИБ);
					
				СопоставлениеНоменклатурыКонтрагентов.СоздатьОбновитьНоменклатуруКонтрагента(ВариантСопоставления, НоменклатураИБ, Отказ, ТекстОшибки, ДополнительныеПараметры);
				Если Отказ Тогда
					Возврат Новый ТаблицаЗначений;
				КонецЕсли;
				НоваяСтрока.НоменклатураКонтрагента = ВариантСопоставления.НоменклатураКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаСопоставленнойНоменклатуры;
	
КонецФункции

Процедура ОтобратьУникальныеЗаписиНоменклатурыКонтрагентов(НаборНоменклатурыКонтрагентов) Экспорт
	
	Если Не ЗначениеЗаполнено(НаборНоменклатурыКонтрагентов) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Владелец"     , ОписаниеТиповВладельцаНоменклатурыСопоставленияБЭД());
	ТаблицаНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300)));
	
	ТаблицаНоменклатуры.Индексы.Добавить("Владелец, Идентификатор");
	
	НоменклатураКонтрагентовДляПроверки = НаборНоменклатурыКонтрагентов;
	НаборНоменклатурыКонтрагентов       = Новый Массив;

	Для Каждого ЭлементКоллекции Из НоменклатураКонтрагентовДляПроверки Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Владелец"     , ЭлементКоллекции.Владелец);
		ПараметрыОтбора.Вставить("Идентификатор", ЭлементКоллекции.Идентификатор);
		НайденныеСтроки = ТаблицаНоменклатуры.НайтиСтроки(ПараметрыОтбора);
		
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Владелец      = ЭлементКоллекции.Владелец;
			НоваяСтрока.Идентификатор = ЭлементКоллекции.Идентификатор;
			
			НаборНоменклатурыКонтрагентов.Добавить(ЭлементКоллекции);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РаботаССопоставлениеНоменклатурыПриФормированииЭлектронногоДокумента

// Проверяет сопоставление номенклатуры контрагентов в документах.
//
// Параметры:
//  НаборДокументов - ДокументСсылка, Массив из ДокументСсылка - документы, в которых необходимо проверить сопоставление номенклатуры в терминах контрагента.
//
// Возвращаемое значение:
//  Структура - содержит результат проверки:
//   * НаборСопоставлений                     - Массив из Структура - набор сопоставления номенклатуры контрагентов по данным документов.
//      * Владелец                             - ОпределяемыйТип.ВладелецНоменклатурыБЭД       - владелец номенклатуры в документе.
//      * НомерСтроки                          - Число                                         - номер строки в документе
//      * Номенклатура                         - ОпределяемыйТип.НоменклатураБЭД               - ссылка номенклатуры в документе.
//      * Характеристика                       - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка характеристики номенклатуры в документе.
//      * Упаковка                             - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - ссылка упаковки номенклатуры в документе.
//      * НоменклатураКонтрагента              - СправочникСсылка.НоменклатураКонтрагентов     - ссылка номенклатуры контрагента.
//      * КоличествоНоменклатурыКонтрагентов   - Число                                         - количество найденных номенклатур контрагента по данным документа.
//      * СсылкаНаДокумент                     - ДокументСсылка                                - ссылка на документ, в котором проверяется сопоставление.
//      * ИмяТабличнойЧасти                    - Строка                                        - имя табличной части, где расположена колонке с типом Справочник.НоменклатураКонтрагентов в документе.
//      * ИмяКолонкиНоменклатурыКонтрагента    - Строка                                        - имя колонки с типом Справочник.НоменклатураКонтрагентов в документе. 
//      * ПредставлениеНоменклатурыКонтрагента - Строка                                        - представление колонки с типом Справочник.НоменклатураКонтрагентов в документе,
//                                                                                               которое необходимо вывести пользователю.
//      * Сопоставлено                         - Булево                                        - признак корректного сопоставления номенклатуры контрагента.
//   * ОткрыватьФормуДляИзмененияСопоставления - Булево             - признак необходимости открыть форму для редактирования
//                                                                    сопоставления номенклатуры контрагента при наличии неоднозначного
//                                                                    сопоставления или неверного.По умолчанию установлено Истина.
//   * ЕстьОшибкиСопоставления                 - Булево             - признак наличия ошибок в сопоставление номенклатуры контрагента.
//
Функция ПроверкаСопоставленияНоменклатурыКонтрагентовВДокументах(Знач НаборДокументов) Экспорт
	
	ОткрыватьФормуДляИзмененияСопоставления = Истина;
	ТаблицаСопоставления                    = Новый ТаблицаЗначений;
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.СформироватьТаблицуСопоставленияНоменклатурыКонтрагентовВДокументах(
		НаборДокументов, ТаблицаСопоставления, ОткрыватьФормуДляИзмененияСопоставления);
		
	РезультатПроверки = РезультатПроверкиКорректностиСопоставленияНоменклатуры(ТаблицаСопоставления, ОткрыватьФормуДляИзмененияСопоставления);
		
	Возврат РезультатПроверки;
	
КонецФункции

Функция РезультатПроверкиКорректностиСопоставленияНоменклатуры(ТаблицаСопоставления, ОткрыватьФормуДляИзмененияСопоставления = Истина) Экспорт
	
	НаборСопоставлений      = Новый Массив;
	ЕстьОшибкиСопоставления = Ложь;
	ПроверитьКорректностьСопоставленияНоменклатурыКонтрагентовВДокументах(ТаблицаСопоставления, ЕстьОшибкиСопоставления, НаборСопоставлений);
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("НаборСопоставлений"                     , НаборСопоставлений);
	РезультатПроверки.Вставить("ОткрыватьФормуДляИзмененияСопоставления", ОткрыватьФормуДляИзмененияСопоставления);
	РезультатПроверки.Вставить("ЕстьОшибкиСопоставления"                , ЕстьОшибкиСопоставления);
	
	Возврат РезультатПроверки;

КонецФункции

#КонецОбласти

#Область Конструкторы 

// Копирует колонки структуры сопоставления в таблицу значений.
//
// Параметры:
//  СтруктураТаблицы                       - Структура -
//    См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента, дополнительно могут передаваться ключи:
//   * НоменклатураИБ              - ОпределяемыйТип.НоменклатураБЭД
//   * ХарактеристикаИБ            - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД
//   * УпаковкаИБ                  - ОпределяемыйТип.УпаковкаНоменклатурыБЭД
//   * ЕдиницаИзмеренияПоУмолчанию - ОпределяемыйТип.УпаковкаНоменклатурыБЭД
//  Таблица                                - ТаблицаЗначений - содержит колонки из ключей параметра СтруктураТаблицы.
//  УчитыватьТолькоНоменклатуруКонтрагента - Булево          - признак необходимости у колонки Владелец учитывать только номенклатуру контрагента, 
//                                                             иначе учитывается номенклатура контрагента и организации.
//                                                             По умолчанию Истина.
//
Процедура СкопироватьКолонкиСтруктурыСопоставленияБЭДВТаблицу(СтруктураТаблицы, Таблица, Знач УчитыватьТолькоНоменклатуруКонтрагента = Истина) Экспорт
	
	ТипСтрока300 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300));
	ТипЧисло15   = Новый ОписаниеТипов("Число",, Новый КвалификаторыЧисла(15, 3));
	
	Для Каждого Элемент Из СтруктураТаблицы Цикл
		
		ИмяКолонки = Элемент.Ключ;
		ТипКолонки = ТипСтрока300;
		Если Элемент.Ключ = "Владелец" Тогда
			Если УчитыватьТолькоНоменклатуруКонтрагента Тогда
				ТипКолонки = Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип;
			Иначе
				ТипКолонки = ОписаниеТиповВладельцаНоменклатурыСопоставленияБЭД();
			КонецЕсли;
		ИначеЕсли Элемент.Ключ = "НоменклатураИБ" Тогда
			ТипКолонки = Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип;
		ИначеЕсли Элемент.Ключ = "ХарактеристикаИБ" Тогда
			ТипКолонки = Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип;
		ИначеЕсли Элемент.Ключ = "УпаковкаИБ"
			Или Элемент.Ключ = "ЕдиницаИзмеренияПоУмолчанию" Тогда
			ТипКолонки = Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип;
		ИначеЕсли Элемент.Ключ = "ВариантУказанияНоменклатуры" Тогда
			ТипКолонки = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУказанияНоменклатурыБЭД");
		ИначеЕсли Элемент.Ключ = "НоменклатураКонтрагента" Тогда
			ТипКолонки = Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов");
		ИначеЕсли Элемент.Ключ = "КоличествоУпаковок"
			Или Элемент.Ключ = "КоличествоБазовойЕдиницыИзмерения" Тогда
				ТипКолонки = ТипЧисло15;
		КонецЕсли;
		Таблица.Колонки.Добавить(ИмяКолонки, ТипКолонки);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СинхронизацияНоменклатурыКонтрагентов

Процедура ВыполнитьДействияПриЗаписиНоменклатурыКонтрагента(Источник, Отказ) Экспорт
	
	ТребуетсяЗаписьПриОбновлении = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ТребуетсяЗаписьПриОбновленииНоменклатурыКонтрагентов", ТребуетсяЗаписьПриОбновлении);
	
	Если Источник.ОбменДанными.Загрузка И ТребуетсяЗаписьПриОбновлении <> Истина
		Или Источник.ДополнительныеСвойства.Свойство("Синхронизация")
		Или Не ЗначениеЗаполнено(Источник.ВладелецНоменклатуры) Или Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНоменклатуруКонтрагентовСРегистромБЭД(Источник, Отказ);
	
КонецПроцедуры

Процедура ВыполнитьДействияПриЗаписиНоменклатураКонтрагентовБЭД(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Или Источник.ДополнительныеСвойства.Свойство("Синхронизация") Тогда
		Возврат;
	КонецЕсли;
	
	НеУдалятьЗапись = Ложь;
	Если Источник.ДополнительныеСвойства.Свойство("НеУдалятьЗапись") Тогда
		НеУдалятьЗапись = Источник.ДополнительныеСвойства.НеУдалятьЗапись;
	КонецЕсли;

	Если Источник.Количество() = 0 И Не НеУдалятьЗапись Тогда
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента(
			Источник.Отбор.Владелец.Значение, Источник.Отбор.Идентификатор.Значение);
		ПометкаНаУдаление = Истина;
		НоменклатураИБ    = Неопределено;
	ИначеЕсли Источник.Количество() > 0 Тогда
		НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Источник[0]);
		НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
		ЗаполнитьЗначенияСвойств(НоменклатураИБ, Источник[0]);
		ПометкаНаУдаление = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = СопоставлениеНоменклатурыКонтрагентов.НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов();
	ДополнительныеПараметры.ТребуетсяЗаписьВРегистр                = Ложь;
	ДополнительныеПараметры.ДанныеРегистраНоменклатурыКонтрагентов = Истина;
	
	ТекстОшибки = "";
	СопоставлениеНоменклатурыКонтрагентов.СоздатьОбновитьНоменклатуруКонтрагента(
		НоменклатураКонтрагента, НоменклатураИБ, Отказ, ТекстОшибки, ДополнительныеПараметры, ПометкаНаУдаление);
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСОпределяемымиТипамиСопоставленияНоменклатуры

Функция ОписаниеТиповВладельцаНоменклатурыСопоставленияБЭД() Экспорт
	
	МассивТипов = Новый Массив;
	
	Для Каждого ТипВладельца Из Метаданные.ОпределяемыеТипы.Организация.Тип.Типы() Цикл
		МассивТипов.Добавить(ТипВладельца);
	КонецЦикла;
	
	Для Каждого ТипВладельца Из Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип.Типы() Цикл
		МассивТипов.Добавить(ТипВладельца);
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

#КонецОбласти

#Область РаботаСоСловаремСопоставленияНоменклатуры

Процедура НачатьПерезаполнениеСловаряСопоставленияНоменклатуры(ПараметрыПроцедуры, Знач АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьОшибки = Ложь;
	ТипыМетаданных = Метаданные.ОпределяемыеТипы.ДанныеСопоставленияБЭД.Тип.Типы();
	Для Каждого ТипМетаданного Из ТипыМетаданных Цикл
		
		СсылкаНаОбъект = "";
		ОтработаныВсеДанные = Ложь;
		
		ОбъектТипаМетаданных = Метаданные.НайтиПоТипу(ТипМетаданного);
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ТаблицаОпределяемогоТипа.Ссылка КАК СсылкаНаОбъект
		|ИЗ
		|	Справочник.&ИмяСправочника КАК ТаблицаОпределяемогоТипа
		|ГДЕ
		|	ТаблицаОпределяемогоТипа.Ссылка > &Ссылка
		|	И &ИерархическийСправочник
		|	И НЕ ТаблицаОпределяемогоТипа.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ОбъектТипаМетаданных.Имя);
		Если ОбъектТипаМетаданных.Иерархический Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИерархическийСправочник", "НЕ ТаблицаОпределяемогоТипа.ЭтоГруппа");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИерархическийСправочник", "Истина");
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		
		Пока НЕ ОтработаныВсеДанные Цикл
			
			Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
			Выгрузка = Запрос.Выполнить().Выгрузить();
			
			КоличествоСтрок = Выгрузка.Количество();
			Если КоличествоСтрок < 1000 Тогда
				ОтработаныВсеДанные = Истина;
			КонецЕсли;
			
			Если КоличествоСтрок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если КоличествоСтрок > 0 Тогда
				СсылкаНаОбъект = Выгрузка[КоличествоСтрок - 1].СсылкаНаОбъект;
			КонецЕсли;
			
			ТипОбъекта = ТипОбъектаСопоставленияНоменклатурыБЭД(СсылкаНаОбъект);
			
			Результат = ПолучитьСловаДляЗаписиВСловарьСопоставленияНоменклатурыБЭД(Выгрузка.ВыгрузитьКолонку("СсылкаНаОбъект"), ТипОбъекта);
			
			ПерезаполнитьСловарьСопоставленияНоменклатурыБЭД(Результат, ТипОбъекта, ЕстьОшибки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПерезаполнитьСтатистикуСловСловаряСопоставления(Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Номенклатура, ЕстьОшибки);
	ПерезаполнитьСтатистикуСловСловаряСопоставления(Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Характеристика, ЕстьОшибки);

	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ВыполненоСОшибками", ЕстьОшибки);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресРезультата);

КонецПроцедуры

Функция ПолучитьСловаДляЗаписиВСловарьСопоставленияНоменклатурыБЭД(Знач НаборСсылок, Знач ТипОбъекта) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НаборСсылок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеЗначенийНаименований = Неопределено;
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ЗначенияНаименованийДанныхСопоставленияНоменклатурыБЭД(НаборСсылок, СоответствиеЗначенийНаименований);
	
	ТаблицаСлов = НоваяТаблицаСлов(Ложь, Истина);
	
	Для Каждого ЗначениеНаименования Из СоответствиеЗначенийНаименований Цикл
		
		СсылкаНаОбъект       = ЗначениеНаименования.Ключ;
		НаименованиеДанныхИБ = ЗначениеНаименования.Значение;
		РазобратьНаименованиеДанныхСопоставленияНоменклатурыНаОтдельныеСлова(НаименованиеДанныхИБ, ТаблицаСлов, Неопределено, СсылкаНаОбъект);
		
	КонецЦикла;
	
	Возврат ИсключитьИзТаблицыСловНезначимые(ТаблицаСлов, ТипОбъекта, Ложь);

КонецФункции

Функция ПолучитьНесоответствияСтатистикиСловИспользованияВСловареСопоставленияНоменклатурыБЭД(Знач ТипОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект) КАК Количество,
	|	СловарьСопоставленияНоменклатурыБЭД.ХешСлова КАК ХешСлова,
	|	ВЫРАЗИТЬ(СловарьСопоставленияНоменклатурыБЭД.Слово КАК СТРОКА(300)) КАК Слово
	|ПОМЕСТИТЬ КоличествоИспользуемыхСлов
	|ИЗ
	|	РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	|ГДЕ
	|	СловарьСопоставленияНоменклатурыБЭД.Позиция > 0
	|	И СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъекта
	|
	|СГРУППИРОВАТЬ ПО
	|	СловарьСопоставленияНоменклатурыБЭД.ХешСлова,
	|	СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта,
	|	ВЫРАЗИТЬ(СловарьСопоставленияНоменклатурыБЭД.Слово КАК СТРОКА(300))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХешСлова,
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоИспользуемыхСлов.Количество КАК Количество,
	|	КоличествоИспользуемыхСлов.ХешСлова КАК ХешСлова,
	|	КоличествоИспользуемыхСлов.Слово КАК Слово
	|ИЗ
	|	КоличествоИспользуемыхСлов КАК КоличествоИспользуемыхСлов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД КАК СтатистикаСловСловаряСопоставленияНоменклатурыБЭД
	|		ПО КоличествоИспользуемыхСлов.ХешСлова = СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ХешСлова
	|			И (СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъекта)
	|			И КоличествоИспользуемыхСлов.Количество <> СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.Количество
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КоличествоИспользуемыхСлов.Количество,
	|	КоличествоИспользуемыхСлов.ХешСлова,
	|	КоличествоИспользуемыхСлов.Слово
	|ИЗ
	|	КоличествоИспользуемыхСлов КАК КоличествоИспользуемыхСлов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД КАК СтатистикаСловСловаряСопоставленияНоменклатурыБЭД
	|		ПО КоличествоИспользуемыхСлов.ХешСлова = СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ХешСлова
	|			И (СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъекта)
	|			И КоличествоИспользуемыхСлов.Количество = СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.Количество
	|ГДЕ
	|	СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ХешСлова ЕСТЬ NULL";
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция ЗаполнитьНаборЗаписейСтатистикиСловВСловаре(Знач Выборка, Знач ТипОбъекта) Экспорт
	
	ХешСлова = Выборка.ХешСлова;
	Слово    = Выборка.Слово;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ХешСлова", ХешСлова);
	ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
	Блокировка.Заблокировать();
	
	НаборЗаписейСтатистикиСлов = РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
	НаборЗаписейСтатистикиСлов.Отбор.ХешСлова.Установить(ХешСлова);
	НаборЗаписейСтатистикиСлов.Отбор.ТипОбъекта.Установить(ТипОбъекта);
	НаборЗаписейСтатистикиСлов.Прочитать();
	
	Если НаборЗаписейСтатистикиСлов.Количество() = 0 Тогда
		ЗаписьСтатистикиСлов = НаборЗаписейСтатистикиСлов.Добавить();
		ЗаписьСтатистикиСлов.ХешСлова   = ХешСлова;
		ЗаписьСтатистикиСлов.ТипОбъекта = ТипОбъекта;
		ЗаписьСтатистикиСлов.Слово      = Слово;
	Иначе
		ЗаписьСтатистикиСлов = НаборЗаписейСтатистикиСлов[0];
	КонецЕсли;
	
	ЗаписьСтатистикиСлов.Количество = Выборка.Количество;
	
	Возврат НаборЗаписейСтатистикиСлов;
	
КонецФункции

#КонецОбласти

//-- Локализация

#Область Прочее

// Возвращает пустую ссылку номенклатуры БЭД.
//
// Возвращаемое значение:
//  ОпределяемыйТип.НоменклатураБЭД - пустая ссылка номенклатуры.
//
Функция ПустаяСсылкаНоменклатурыБЭД() Экспорт
	
	Если Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип.Типы().Количество() > 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип.Типы()[0]) <> Неопределено Тогда
		Возврат Справочники[Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип.Типы()[0]).Имя].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Возвращает описание и взаимосвязь объектов, составляющих номенклатуру информационной базы.
// Результат базируется на определяемых типах и переопределяемых методах.
//
// Возвращаемое значение:
//  Структура - данные о структуре номенклатуры информационной базы:
//   * ВладелецНоменклатурыПредставлениеОбъекта - Строка - представление единичного объекта владельца номенклатуры.
//   * НоменклатураПредставлениеОбъекта - Строка - представление единичного объекта номенклатуры.
//   * ХарактеристикаПредставлениеОбъекта - Строка - представление единичного объекта характеристики.
//   * УпаковкаПредставлениеОбъекта - Строка - представление единичного объекта упаковки.
//   * НоменклатураКонтрагентаПредставлениеСписка - Строка - представление списка номенклатуры контрагента.
//   * ВладелецНоменклатурыВРодительномПадеже - Строка - представление владельца номенклатуры в родительном падеже.
//   * ИмяПараметраСвязиХарактеристики - Строка - имя параметра связи характеристики от номенклатуры.
//   * ИмяПараметраСвязиУпаковки - Строка - имя параметра связи упаковки от номенклатуры.
//
Функция МетаданныеСопоставленияНоменклатуры() Экспорт
	
	МетаданныеСопоставления = Новый Структура;
	
	Представления = ПредставленияНоменклатурыКонтрагентов();

	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииПредставленийСопоставленияНоменклатуры(Представления);
	
	МетаданныеСопоставления.Вставить("ВладелецНоменклатурыПредставлениеОбъекта", Представления.ВладелецНоменклатурыПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("НоменклатураПредставлениеОбъекта", Представления.НоменклатураПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("ХарактеристикаПредставлениеОбъекта", Представления.ХарактеристикаПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("УпаковкаПредставлениеОбъекта", Представления.УпаковкаПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("НоменклатураКонтрагентаПредставлениеСписка", Представления.НоменклатураКонтрагентаПредставлениеСписка);
	МетаданныеСопоставления.Вставить("НоменклатураКонтрагентаПредставлениеОбъекта", Представления.НоменклатураКонтрагентаПредставлениеОбъекта);
	МетаданныеСопоставления.Вставить("ВладелецНоменклатурыВРодительномПадеже", Представления.ВладелецНоменклатурыВРодительномПадеже);
	
	СтруктураНоменклатурыИБ = Новый Структура;
	СтруктураНоменклатурыИБ.Вставить("ИмяПараметраСвязиХарактеристики", "Отбор.Владелец");
	СтруктураНоменклатурыИБ.Вставить("ИмяПараметраСвязиУпаковки", "Отбор.Владелец");
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииСтруктурыНоменклатурыИнформационнойБазы(СтруктураНоменклатурыИБ);
	
	МетаданныеСопоставления.Вставить("ИмяПараметраСвязиХарактеристики", СтруктураНоменклатурыИБ.ИмяПараметраСвязиХарактеристики);
	МетаданныеСопоставления.Вставить("ИмяПараметраСвязиУпаковки", СтруктураНоменклатурыИБ.ИмяПараметраСвязиУпаковки);
	
	Возврат МетаданныеСопоставления;
	
КонецФункции

Функция ПредставленияНоменклатурыКонтрагентов() Экспорт
	
	Представления = Новый Структура;
	Представления.Вставить("ВладелецНоменклатурыПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.ВладелецНоменклатурыБЭД.Тип, "Владелец"));
	Представления.Вставить("НоменклатураПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип, "Номенклатура"));
	Представления.Вставить("ХарактеристикаПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип, "Характеристика"));
	Представления.Вставить("УпаковкаПредставлениеОбъекта", 
		ПредставлениеОбъектаПоТипу(Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип, "Упаковка"));
	Представления.Вставить("ВладелецНоменклатурыВРодительномПадеже", НСтр("ru = 'Контрагента'"));
	
	Представления.Вставить("НоменклатураКонтрагентаПредставлениеСписка",
		Метаданные.Справочники.НоменклатураКонтрагентов.Синоним);
	Представления.Вставить("НоменклатураКонтрагентаПредставлениеОбъекта",
		Метаданные.Справочники.НоменклатураКонтрагентов.ПредставлениеОбъекта);
	
	Возврат Представления;
	
КонецФункции

// Возвращает свойства набора номенклатур информационной базы.
// Определяет обязательность использования характеристики и упаковки.
//
// Параметры:
//  НаборНоменклатуры - Массив из ОпределяемыйТип.НоменклатураБЭД, ОпределяемыйТип.НоменклатураБЭД - ссылки на номенклатуру ИБ,
//   для которой требуется определить свойства. Если передается ссылка, преобразуется в массив.
//
// Возвращаемое значение:
// Соответствие, Неопределено - в случае незаполненного набора номенклатуры возвращается Неопределено. Соответствие содержит:
//  * Ключ     - ОпределяемыйТип.НоменклатураБЭД - ссылка на номенклатуру ИБ.
//  * Значение - Структура                       - содержит свойства номенклатуры ИБ.
//                                                 См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеСвойстваНоменклатурыИБ.
//
Функция СвойстваНоменклатурыИнформационнойБазы(Знач НаборНоменклатуры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НаборНоменклатуры) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваНоменклатурИБ = Новый Соответствие;
	
	Если ТипЗнч(НаборНоменклатуры) <> Тип("Массив") Тогда
		НаборНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаборНоменклатуры) Тогда
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриОпределенииСвойствНоменклатурыИнформационнойБазы(НаборНоменклатуры, СвойстваНоменклатурИБ);
	КонецЕсли;
	
	Возврат СвойстваНоменклатурИБ;
	
КонецФункции

// Возвращает единицу измерения по умолчанию.
//
// Возвращаемое значение:
//  Структура - содержит:
//   * Наименование - Строка - наименование единицы измерения шт
//   * КодОКЕИ      - Строка - код ОКЕИ 796.
//
Функция ЕдиницаИзмеренияПоУмолчанию() Экспорт
	
	СвойстваЕдиницыИзмерения = Новый Структура;
	СвойстваЕдиницыИзмерения.Вставить("Наименование", "шт");
	СвойстваЕдиницыИзмерения.Вставить("КодОКЕИ"     , "796");
	
	Возврат СвойстваЕдиницыИзмерения;
	
КонецФункции

// Возвращает хеш сумму строки по алгоритму MD5.
//
// Параметры:
//  Данные - Строка - строка, по которой необходимо вычислить хеш.
//
// Возвращаемое значение:
//  Число - хеш, максимальная длина 20.
//
Функция Хеш_MD5_64(Знач Данные) Экспорт
	
	// Вычисляем хеш сумму по алгоритму MD5. Размер - 128 бит или 16 байт.
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(Данные);
	ДвоичныеДанныеХешСуммы = Хеш.ХешСумма;
	
	// Заберем 8 байт из середины.
	Поток = ДвоичныеДанныеХешСуммы.ОткрытьПотокДляЧтения();
	ЧтениеДанных = Новый ЧтениеДанных(Поток);
	
	// Первые 4 байта нам не интересны, пропустим.
	ЧтениеДанных.Пропустить(4);
	
	// Преобразует двоичные данные в int 64.
	Результат = ЧтениеДанных.ПрочитатьЦелое64(ПорядокБайтов.BigEndian);
	
	// Подчищаем за собой.
	ЧтениеДанных.Закрыть();
	Поток.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторТовараПоСтроке(Знач СтрокаТовара, Знач МаксимальнаяДлина = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(МаксимальнаяДлина) Тогда
		МаксимальнаяДлина = 110;
	КонецЕсли;
	
	Идентификатор = СтрокаТовара;
	Идентификатор = ВРег(Идентификатор);
	Идентификатор = СтрЗаменить(Идентификатор, " ", "");
	
	Длина = СтрДлина(Идентификатор);
	
	Если Длина > МаксимальнаяДлина Тогда
		
		Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
		Хеширование.Добавить(Идентификатор);
		
		ХешСтрока = Строка(Хеширование.ХешСумма);
		ХешСтрока = СтрЗаменить(ХешСтрока, " ", "");
		
		ДлинаХешСтроки = СтрДлина(ХешСтрока);
		
		Идентификатор = Лев(Идентификатор, МаксимальнаяДлина - ДлинаХешСтроки) + ХешСтрока;
		
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

//++ Локализация

Функция СозданиеПерезаполнениеНоменклатурыКонтрагентаИзДерева(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		ОбъектЭлемента = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		Попытка 
			ОбъектЭлемента.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить данные номенклатуры контрагента ""%1"".
			|Возможно, номенклатура контрагента редактируется другим пользователем'"),
			ОбъектЭлемента.Наименование);
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		ОбъектЭлемента = Справочники.НоменклатураКонтрагентов.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, ОбъектЭлемента);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОбъектЭлемента.Номенклатура = СсылкаНаОбъектНоменклатура;
		// Заполняем идентификатор номенклатуры поставщика, если он получен в реквизите Ид
		СтрокаИд = СтрокаОбъекта.Строки.Найти("Ид", "Реквизит", Истина);
		Если Не ЗначениеЗаполнено(ОбъектЭлемента.Идентификатор) И ЗначениеЗаполнено(СтрокаИд) Тогда
			ОбъектЭлемента.Идентификатор = СтрокаИд.ЗначениеРеквизита;
		КонецЕсли;
		СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ЗаполнитьВладельцаНоменклатурыКонтрагентаИзДереваРазбора(ДеревоРазбора, ОбъектЭлемента.Владелец);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектЭлемента.Код) Тогда
		ОбъектЭлемента.УстановитьНовыйКод();
	КонецЕсли;
	
	ОбъектЭлемента.ОбменДанными.Загрузка = Истина;
	Попытка
		ОбъектЭлемента.Записать();
		ОбъектЭлемента.Разблокировать();
	Исключение
		Текст = НСтр("ru = 'Создание элемента справочника ""Номенклатура контрагентов""'", ОбщегоНазначения.КодОсновногоЯзыка());
		ПараметрыЗаписи = НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписи.Данные = Метаданные.Справочники.НоменклатураКонтрагентов;
		ЗаписатьВЖурналРегистрации(Текст, "ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов",, ПараметрыЗаписи);
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = ОбъектЭлемента.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

//-- Локализация

#КонецОбласти

#Область ЖурналРегистрации

// Возвращает параметры записи в журнал регистрации, см. ЗаписатьВЖурналРегистрации.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ОбъектМетаданных - ОбъектМетаданных - см. синтакс-помощник к методу ЗаписьЖурналаРегистрации
// * Данные - Произвольный - см. синтакс-помощник к методу ЗаписьЖурналаРегистрации
// * РежимТранзакции - РежимТранзакцииЗаписиЖурналаРегистрации - см. синтакс-помощник к методу ЗаписьЖурналаРегистрации
Функция НовыеПараметрыЗаписиВЖурналРегистрации() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОбъектМетаданных", Неопределено);
	Параметры.Вставить("Данные", Неопределено);
	Параметры.Вставить("РежимТранзакции", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Данная процедура используется для стандартизации всех записей событий подсистемы ЭлектронноеВзаимодействие
// в журнал регистрации. В результате в журнал добавляется группировка записей с иерархией.
//  Электронное взаимодействие:
//    |_ Общая подсистема
//    |_ Обмен с банками
//    |_ Обмен с контрагентами
//    |_ Обмен с сайтами
//    |_ Регламентные задания
//    |_ Сопоставление номенклатуры контрагентов
//    |_ Бизнес-сеть.
// Параметры:
//   Комментарий - Строка - см. синтакс-помощник к методу ЗаписьЖурналаРегистрации
//   Подсистема - Строка - имя подсистемы, см. ПодсистемыБЭД, будет добавлена к имени события
//   Уровень - УровеньЖурналаРегистрации - см. синтакс-помощник к методу ЗаписьЖурналаРегистрации, значение по
//                                         умолчанию УровеньЖурналаРегистрации.Ошибка.
//   ПараметрыЗаписи - см. НовыеПараметрыЗаписиВЖурналРегистрации
//
Процедура ЗаписатьВЖурналРегистрации(Комментарий, Подсистема, Уровень = Неопределено, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = НовыеПараметрыЗаписиВЖурналРегистрации();
	КонецЕсли;
	
	ПредставлениеОбщаяПодсистема = НСтр("ru = 'Общая подсистема'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если Подсистема = "ЭлектронноеВзаимодействие" Тогда
		ПредставлениеПодсистемы = ПредставлениеОбщаяПодсистема;
	Иначе
		Если ОбщегоНазначения.ПодсистемаСуществует(Подсистема) Тогда
			ПолноеИмяПодсистемы = "Подсистема." + СтрЗаменить(Подсистема, ".", ".Подсистема.");
			ОбъектМетаданныхПодсистема = Метаданные.НайтиПоПолномуИмени(ПолноеИмяПодсистемы);
			ПредставлениеПодсистемы = СтрШаблон(НСтр("ru = '%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				ОбщегоНазначения.ПредставлениеОбъекта(ОбъектМетаданныхПодсистема));
		Иначе
			ПредставлениеПодсистемы = ПредставлениеОбщаяПодсистема;
		КонецЕсли;
	КонецЕсли;
	
	УровеньВажностиСобытия = ?(ТипЗнч(Уровень) = Тип("УровеньЖурналаРегистрации"),
		Уровень, УровеньЖурналаРегистрации.Ошибка);
		
	ПолноеИмяСобытия = СтрШаблон(НСтр("ru = 'Электронное взаимодействие.%1'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ПредставлениеПодсистемы);
	
	ЗаписьЖурналаРегистрации(ПолноеИмяСобытия, УровеньВажностиСобытия, ПараметрыЗаписи.ОбъектМетаданных,
		ПараметрыЗаписи.Данные, Комментарий, ПараметрыЗаписи.РежимТранзакции);
	
КонецПроцедуры

#КонецОбласти

#Область Блокировка

// Устанавливает управляемую блокировку по значениям полей.
//
// Параметры:
//  Пространство - Строка - пространство блокировки.
//  Поля - Структура - ключ задает имя поля пространства блокировки, а значение:
//                     1. Источник задан: соответствующее поле источника, содержащее значения для блокировки.
//                     2. Источник не задан: непосредственно значение для блокировки.
//  Источник - РезультатЗапроса, ТабличнаяЧасть, ТаблицаЗначений  - источник данных.
//  Режим - РежимБлокировкиДанных - режим блокировки.
//        - Неопределено - значение по умолчанию "Исключительный".
//
Процедура УстановитьУправляемуюБлокировку(Знач Пространство, Знач Поля = Неопределено, Знач Источник = Неопределено, Знач Режим = Неопределено) Экспорт
	
	Если Режим = Неопределено Тогда
		Режим = РежимБлокировкиДанных.Исключительный;
	КонецЕсли;
	
	Если Поля = Неопределено Тогда
		Поля = Новый Структура;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(Пространство);
	Если Источник = Неопределено Тогда
		Для каждого КлючЗначение Из Поля Цикл
			ЭлементБлокировки.УстановитьЗначение(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	Иначе
		ЭлементБлокировки.ИсточникДанных = Источник;
		Для каждого КлючЗначение Из Поля Цикл
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ЭлементБлокировки.Режим = Режим;
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Устанавливает управляемую блокировку по набору записей.
// Используются установленные отборы в наборе.
//
// Параметры:
//  Набор - РегистрСведенийНаборЗаписей - набор, по которому нужно установить блокировку.
//  Режим - РежимБлокировкиДанных       - режим блокировки.
//        - Строка                      - допустимые значения "Разделяемый" и "Исключительный".
//        - Неопределено                - значение по умолчанию "Исключительный".
//
Процедура УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Знач Набор, Знач Режим = Неопределено) Экспорт
	
	МетаданныеОбъекта = Набор.Метаданные();
	ПространствоБлокировки = МетаданныеОбъекта.ПолноеИмя();
	
	Поля = Новый Структура;
	Для каждого ЭлементОтбора Из Набор.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			Поля.Вставить(ЭлементОтбора.ПутьКДанным, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьУправляемуюБлокировку(ПространствоБлокировки, Поля,, Режим);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

#Область Конструкторы

// Возвращает структуру варианта сопоставления номенклатуры.
//
// Возвращаемое значение:
//  Структура - варианты сопоставления номенклатуры:
//   * НоменклатураИБ      - ОпределяемыйТип.НоменклатураБЭД - ссылка номенклатуры 
//   * ПриоритетныйВариант - Булево                          - приоритетный варианте сопоставления.
//   * ШтрихкодСопоставлен - Булево                          - штрихкод номенклатуры сопоставлен в варианте сопоставления.
//   * АртикулСопоставлен  - Булево                          - артикул номенклатуры сопоставлен в варианте сопоставления.
//
Функция НовыйВариантСопоставленияНоменклатурыБЭД()
	
	ВариантСопоставления = Новый Структура;
	ВариантСопоставления.Вставить("НоменклатураИБ"     , Неопределено);
	ВариантСопоставления.Вставить("ПриоритетныйВариант", Ложь);
	ВариантСопоставления.Вставить("ШтрихкодСопоставлен", Ложь);
	ВариантСопоставления.Вставить("АртикулСопоставлен" , Ложь);
	
	Возврат ВариантСопоставления;
	
КонецФункции

// Возвращает таблицу сопоставлений номенклатуры.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит сопоставленные номенклатуры из НаборНоменклатуры:
//   * Идентификатор           - Строка                                               - идентификатор записи.
//   * Владелец                - ОпределяемыйТип.ВладелецНоменклатурыБЭД, ОпределяемыйТип.Организация - владелец номенклатуры ИБ.
//   * НоменклатураКонтрагента - СправочникСсылка.НоменклатураКонтрагентов            - ссылка номенклатуры контрагента.
//                                                                                      Заполняется, если номенклатура в терминах контрагента, иначе пустая.
//   * НоменклатураИБ          - ОпределяемыйТип.НоменклатураБЭД                      - ссылка номенклатура ИБ.
//   * ХарактеристикаИБ        - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД        - ссылка характеристики номенклатуры ИБ.
//   * УпаковкаИБ              - ОпределяемыйТип.УпаковкаНоменклатурыБЭД              - ссылка упаковки номенклатуры ИБ.
//
Функция НоваяТаблицаСопоставленнойНоменклатуры()
	
	ТаблицаСопоставлений = Новый ТаблицаЗначений;
	ТаблицаСопоставлений.Колонки.Добавить("Владелец", ОписаниеТиповВладельцаНоменклатурыСопоставленияБЭД());
	ТаблицаСопоставлений.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(300)));
	ТаблицаСопоставлений.Колонки.Добавить("НоменклатураИБ", Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
	ТаблицаСопоставлений.Колонки.Добавить("ХарактеристикаИБ", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
	ТаблицаСопоставлений.Колонки.Добавить("УпаковкаИБ", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
	ТаблицаСопоставлений.Колонки.Добавить("НоменклатураКонтрагента", Новый ОписаниеТипов("СправочникСсылка.НоменклатураКонтрагентов"));

	Возврат ТаблицаСопоставлений;

КонецФункции

Функция НовоеСопоставлениеНоменклатурыКонтрагентов()
	
	СопоставлениеНоменклатуры = Новый Структура;
	СопоставлениеНоменклатуры.Вставить("Владелец");
	СопоставлениеНоменклатуры.Вставить("Номенклатура");
	СопоставлениеНоменклатуры.Вставить("Характеристика");
	СопоставлениеНоменклатуры.Вставить("Упаковка");
	СопоставлениеНоменклатуры.Вставить("СсылкаНаДокумент");
	СопоставлениеНоменклатуры.Вставить("НоменклатураКонтрагента");
	СопоставлениеНоменклатуры.Вставить("НомерСтроки");
	СопоставлениеНоменклатуры.Вставить("КоличествоНоменклатурыКонтрагентов");
	СопоставлениеНоменклатуры.Вставить("ИмяТабличнойЧасти");
	СопоставлениеНоменклатуры.Вставить("ИмяКолонкиНоменклатурыКонтрагента");
	СопоставлениеНоменклатуры.Вставить("ПредставлениеНоменклатурыКонтрагента");
	СопоставлениеНоменклатуры.Вставить("Сопоставлено");
	СопоставлениеНоменклатуры.Вставить("НоменклатураПоиск");
	СопоставлениеНоменклатуры.Вставить("ХарактеристикаПоиск");
	СопоставлениеНоменклатуры.Вставить("УпаковкаПоиск");
	
	Возврат СопоставлениеНоменклатуры;

КонецФункции

// Возвращает таблицу натуральных ключей.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки:
//   * Штрихкод                  - Строка - штрихкод номенклатуры  по данным контрагента.
//   * ИдентификаторНоменклатуры - Строка - идентификатор номенклатуры  по данным контрагента.
//   * ЭтоВнутреннийШтрихкод     - Булево - внутренний штрихкод номенклатуры.
//   * Артикул                   - Строка - артикул номенклатуры по данным контрагента.
//   * ЭтоНашаНоменклатура       - Булево - признак нашей номенклатуры, иначе номенклатура контрагента.
//
Функция НоваяТаблицаНатуральныхКлючей()
	
	ТипСтрока300 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(300));
	
	ТаблицаДанныхИБ = Новый ТаблицаЗначений;
	ТаблицаДанныхИБ.Колонки.Добавить("Штрихкод"                 , ТипСтрока300);
	ТаблицаДанныхИБ.Колонки.Добавить("ИдентификаторНоменклатуры", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаДанныхИБ.Колонки.Добавить("ЭтоВнутреннийШтрихкод"    , Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхИБ.Колонки.Добавить("Артикул"                  , ТипСтрока300);
	ТаблицаДанныхИБ.Колонки.Добавить("ЭтоНашаНоменклатура"      , Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхИБ.Колонки.Добавить("Наименование"             , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	
	Возврат ТаблицаДанныхИБ;
	
КонецФункции

Функция НоваяТаблицаНаименованийПоСловам()
	
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("ХешСлова"     , Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(20)));
	ТаблицаСлов.Колонки.Добавить("Позиция"      , Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(2)));
	ТаблицаСлов.Колонки.Добавить("ВсегоСлов"    , Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(4)));
	ТаблицаСлов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	
	Возврат ТаблицаСлов;
	
КонецФункции

// Описание новой таблицы слов.
//
// Параметры:
//  НужнаКолонкаИдентификатор  - Булево - признак добавления в таблицу колонки "Идентификатор".
//  НужнаКолонкаСсылкаНаОбъект - Булево - признак добавления в таблицу колонки "СсылкаНаОбъект".
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит колонки:
//   * Слово           - Строка                                - целое наименование или слово из наименования.
//   * СловоЧисло      - Булево                                - признак является ли слово числом.
//   * ДлинаСлова      - Число                                 - длина слова.
//   * ХешНаименования - Число                                 - хеш наименования.
//   * ЭтоНаименование - Булево                                - признак строки с полным наименованием.
//   * Идентификатор   - Строка                                - идентификатор номенклатуры или характеристики.
//   * СсылкаНаОбъект - ОпределяемыйТип.ДанныеСопоставленияБЭД - ссылка на объект из определяемого типа.
//
Функция НоваяТаблицаСлов(Знач ТребуетсяКолонкаИдентификатор = Истина, Знач ТребуетсяКолонкаСсылкаНаОбъект = Ложь)
	
	ТаблицаСлов = Новый ТаблицаЗначений;
	ТаблицаСлов.Колонки.Добавить("Слово"          , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024)));
	ТаблицаСлов.Колонки.Добавить("СловоЧисло"     , Новый ОписаниеТипов("Булево"));
	ТаблицаСлов.Колонки.Добавить("ДлинаСлова"     , Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(4)));
	ТаблицаСлов.Колонки.Добавить("ХешНаименования", Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(20)));
	ТаблицаСлов.Колонки.Добавить("ЭтоНаименование", Новый ОписаниеТипов("Булево"));
	ТаблицаСлов.Колонки.Добавить("СловоИзЛатиницы", Новый ОписаниеТипов("Булево"));
	
	Если ТребуетсяКолонкаИдентификатор Тогда
		ТаблицаСлов.Колонки.Добавить("Идентификатор" , Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	КонецЕсли;
	Если ТребуетсяКолонкаСсылкаНаОбъект Тогда
		ТаблицаСлов.Колонки.Добавить("СсылкаНаОбъект", Метаданные.ОпределяемыеТипы.ДанныеСопоставленияБЭД.Тип);
	КонецЕсли;
	
	Возврат ТаблицаСлов;
	
КонецФункции

#КонецОбласти

#Область РаботаСоСловаремСопоставленияНоменклатуры

// Процедура-обработчик события "ПриЗаписи" справочника Номенклатура для механизма сопоставления.
//
// Параметры:
//  Источник - ОпределяемыйТип.ОбъектДанныхСопоставленияБЭД - источник события.
//  Отказ    - Булево                                       - флаг отказа от выполнения обработчика.
// 
Процедура ЗаполнитьСловарьНоменклатурыБЭДПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ПометкаУдаления Тогда
		УдалитьСловаИзСловаряСопоставленияНоменклатурыБЭД(Источник.Ссылка, Отказ);
	Иначе
		ЗаполнитьСловарьСопоставленияНоменклатурыБЭД(Источник.Ссылка, Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Разбирает наименование на отдельные слова и записывает в таблицу слов.
//
// Параметры:
//  НаименованиеНоменклатурыИБ - Строка                                  - наименование, которое необходимо разложить на слова и обработать.
//  ТаблицаСлов                - ТаблицаЗначений из см. НоваяТаблицаСлов - содержит таблицу слов наименований.
//
Процедура РазобратьНаименованиеДанныхСопоставленияНоменклатурыНаОтдельныеСлова(Знач НаименованиеИБ, ТаблицаСлов = Неопределено,
		Идентификатор = Неопределено, СсылкаНаОбъект = Неопределено)
	
	Если ТаблицаСлов = Неопределено Тогда
		ТребуетсяКолонкаИдентификатор  = Идентификатор <> Неопределено;
		ТребуетсяКолонкаСсылкаНаОбъект = СсылкаНаОбъект <> Неопределено;
		ТаблицаСлов = НоваяТаблицаСлов(ТребуетсяКолонкаИдентификатор, ТребуетсяКолонкаСсылкаНаОбъект);
	КонецЕсли;

	НаименованиеИБ = НРег(СокрЛП(НаименованиеИБ));
	НаименованиеИБ = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("ё", НаименованиеИБ, "е");

	ХешНаименования = Хеш_MD5_64(НаименованиеИБ);
	
	НоваяСтрока = ТаблицаСлов.Добавить();
	НоваяСтрока.Слово           = НаименованиеИБ;
	НоваяСтрока.СловоЧисло      = Ложь;
	НоваяСтрока.ДлинаСлова      = СтрДлина(НаименованиеИБ);
	НоваяСтрока.ХешНаименования = ХешНаименования;
	НоваяСтрока.ЭтоНаименование = Истина;

	Наименование = УдалитьНезначимыеСимволы(НаименованиеИБ);
	
	НаборСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Наименование, " ");
	
	Если Идентификатор <> Неопределено Тогда
		НоваяСтрока.Идентификатор  = Идентификатор;
	КонецЕсли;
	Если СсылкаНаОбъект <> Неопределено Тогда
		НоваяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
	КонецЕсли;
	
	Для Каждого Слово Из НаборСлов Цикл
		
		Слово = СокрЛП(Слово);
		ДлинаСлова = СтрДлина(Слово);
		СловоЧисло = ЭтоЧисло(Слово);
		
		СловоИзЛатиницы = Ложь;
		Если ДлинаСлова < 3 Тогда
			СловоИзЛатиницы = СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Слово);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Слово) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаСлов.Добавить();
		НоваяСтрока.Слово           = Слово;
		НоваяСтрока.СловоЧисло      = СловоЧисло;
		НоваяСтрока.ДлинаСлова      = ДлинаСлова;
		НоваяСтрока.ХешНаименования = ХешНаименования;
		НоваяСтрока.СловоИзЛатиницы = СловоИзЛатиницы;
		Если Идентификатор <> Неопределено Тогда
			НоваяСтрока.Идентификатор  = Идентификатор;
		КонецЕсли;
		Если СсылкаНаОбъект <> Неопределено Тогда
			НоваяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Разбирает наименование определяемого типа ДанныеСопоставленияБЭД на отдельные слова
// и записывает их в регистр сведений СловарьСопоставленияНоменклатурыБЭД.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДанныеСопоставленияБЭД - ссылка данных сопоставления.
//  Отказ          - Булево                                 - признак наличия ошибки при выполнении операции.
//
Процедура ЗаполнитьСловарьСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, Отказ)
	
	НаименованиеДанныхИБ = Неопределено;
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ЗначениеНаименованияДанныхСопоставленияНоменклатурыБЭД(СсылкаНаОбъект, НаименованиеДанныхИБ);
	
	Если НЕ ЗначениеЗаполнено(НаименованиеДанныхИБ) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипОбъектаСопоставленияНоменклатурыБЭД(СсылкаНаОбъект);

	ТаблицаСлов = Неопределено;
	РазобратьНаименованиеДанныхСопоставленияНоменклатурыНаОтдельныеСлова(НаименованиеДанныхИБ, ТаблицаСлов, Неопределено, СсылкаНаОбъект);
	ЗаписатьНаборСловВСловарьСопоставленияНоменклатурыБЭД(ТаблицаСлов, ТипОбъекта, Отказ);
	
КонецПроцедуры

Процедура УдалитьСловаИзСловаряСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СловарьСопоставленияНоменклатурыБЭД.ХешСлова КАК ХешСлова,
	               |	СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта КАК ТипОбъекта
	               |ИЗ
	               |	РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД КАК СтатистикаСловСловаряСопоставленияНоменклатурыБЭД
	               |		ПО СловарьСопоставленияНоменклатурыБЭД.ХешСлова = СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ХешСлова
	               |			И СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта = СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ТипОбъекта
	               |ГДЕ
	               |	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект = &СсылкаНаОбъект
	               |	И СловарьСопоставленияНоменклатурыБЭД.Позиция > 0";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("СсылкаНаОбъект", СсылкаНаОбъект);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
		
		Пока Выборка.Следующий() Цикл
			
			ТипОбъекта = Выборка.ТипОбъекта;
			ХешСлова   = Выборка.ХешСлова;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ПолноеИмя());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("ХешСлова", ХешСлова);
			ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ХешСлова.Установить(ХешСлова);
			НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
			НаборЗаписей.Прочитать();
			
			ЗаписьСлова = НаборЗаписей[0];
			ЗаписьСлова.Количество = ЗаписьСлова.Количество - 1;
			
			Если ЗаписьСлова.Количество = 0 Тогда
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
	Исключение
		ТекстОшибки  = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		ПараметрыЗаписи = НовыеПараметрыЗаписиВЖурналРегистрации();
		ПараметрыЗаписи.Данные = СсылкаНаОбъект;
		ЗаписатьВЖурналРегистрации(ТекстОшибки, "ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов",, ПараметрыЗаписи);
		
	КонецПопытки;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Записывает таблицу слов в регистр сведений СловарьСопоставленияНоменклатурыБЭД, предварительно исключая незначимые слова.
//
// Параметры:
//  ТаблицаСлов - ТаблицаЗначений из см. НоваяТаблицаСлов - содержит таблицу слов наименований.
//  ТипОбъекта  - ПеречислениеСсылка.ТипОбъектаСопоставленияНоменклатурыБЭД - тип объекта сопоставления: номенклатура или характеристика.
//  Отказ       - Булево                                  - признак наличия ошибки при выполнении операции.
//
Процедура ЗаписатьНаборСловВСловарьСопоставленияНоменклатурыБЭД(ТаблицаСлов, ТипОбъекта, Отказ)
	
	Если НЕ ТаблицаСлов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ИсключитьИзТаблицыСловНезначимые(ТаблицаСлов, ТипОбъекта, Ложь, Истина);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	ПоследнийПакет = Результат.Количество()-1;
	
	ВыборкаНаименований = Результат[ПоследнийПакет].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаНаименований.Следующий() Тогда
		
		СсылкаНаОбъект = ВыборкаНаименований.ПолеГруппировкиСсылкаИлиИдентификатор;
		ВсегоСлов      = ВыборкаНаименований.Слово - 1;
		
		Попытка
			
			ЗаписатьСловаВСловарьСопоставленияНоменклатуры(ВыборкаНаименований, СсылкаНаОбъект, ВсегоСлов, ТипОбъекта);
			ИзменитьСтатистикуСловСловаряСопоставленияНоменклатуры(Результат[ПоследнийПакет-1], ТипОбъекта);
			
		Исключение
			ТекстОшибки  = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

			ПараметрыЗаписи = НовыеПараметрыЗаписиВЖурналРегистрации();
			ПараметрыЗаписи.Данные = СсылкаНаОбъект;
			ЗаписатьВЖурналРегистрации(ТекстОшибки, "ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов",, ПараметрыЗаписи);
			
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаписатьСловаВСловарьСопоставленияНоменклатуры(ВыборкаНаименований, СсылкаНаОбъект, ВсегоСлов, ТипОбъекта)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("СсылкаНаОбъект", СсылкаНаОбъект);
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НаборСловНаименований = Новый СписокЗначений;
	
	Индекс = 1;
	ВыборкаСлов = ВыборкаНаименований.Выбрать();
	Пока ВыборкаСлов.Следующий() Цикл
		
		Если ВыборкаСлов.ЭтоНаименование Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
			НоваяЗапись.Слово          = ВыборкаСлов.Слово;
			НоваяЗапись.ХешСлова       = ВыборкаСлов.ХешНаименования;
			НоваяЗапись.Позиция        = 0;
			НоваяЗапись.ТипОбъекта     = ТипОбъекта;
			НоваяЗапись.ВсегоСлов      = ВсегоСлов;
		Иначе
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
			НоваяЗапись.Слово          = ВыборкаСлов.Слово;
			НоваяЗапись.ХешСлова       = ВыборкаСлов.ХешСлова;
			НоваяЗапись.Позиция        = Индекс;
			НоваяЗапись.ТипОбъекта     = ТипОбъекта;
			НоваяЗапись.ВсегоСлов      = ВсегоСлов;
			
			НаборСловНаименований.Добавить(НоваяЗапись.Слово);
			
			Индекс = Индекс + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	НаборСловНаименований.СортироватьПоЗначению();
	СортированныйНаборСлов = НаборСловНаименований.ВыгрузитьЗначения();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Слово          = СтрСоединить(СортированныйНаборСлов, " ");
	НоваяЗапись.ХешСлова       = Хеш_MD5_64(НоваяЗапись.Слово);
	НоваяЗапись.Позиция        = -1;
	НоваяЗапись.ТипОбъекта     = ТипОбъекта;
	НоваяЗапись.ВсегоСлов      = ВсегоСлов;
	НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;

	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ИзменитьСтатистикуСловСловаряСопоставленияНоменклатуры(РезультатЗапроса, ТипОбъекта)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ПолноеИмя());
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ТипОбъекта", ТипОбъекта);
	ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХешСлова", "ХешСлова");
	Блокировка.Заблокировать();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
		НаборЗаписей.Отбор.ХешСлова.Установить(Выборка.ХешСлова);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ТипОбъекта = ТипОбъекта;
			НоваяЗапись.ХешСлова   = Выборка.ХешСлова;
			НоваяЗапись.Слово      = Выборка.Слово;
		Иначе
			НоваяЗапись = НаборЗаписей[0];
		КонецЕсли;
		
		Если Выборка.ДобавитьВСтатистику Тогда
			НоваяЗапись.Количество = НоваяЗапись.Количество + 1;
		ИначеЕсли Выборка.УдалитьИзСтатистики Тогда
			НоваяЗапись.Количество = НоваяЗапись.Количество - 1;
		КонецЕсли;
		
		Если НоваяЗапись.Количество = 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьСловарьСопоставленияНоменклатурыБЭД(Знач Результат, Знач ТипОбъекта, ЕстьОшибки)
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
				
		ВыборкаНаименований = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНаименований.Следующий() Цикл
			
			СсылкаНаОбъект = ВыборкаНаименований.ПолеГруппировкиСсылкаИлиИдентификатор;
			ВсегоСлов      = ВыборкаНаименований.Слово - 1;
			
			НаборСловНаименований = Новый СписокЗначений;
			
			НаборЗаписей = РегистрыСведений.СловарьСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
			НаборЗаписей.Прочитать();

			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Очистить();
			КонецЕсли;
			
			Индекс = 1;
			ВыборкаСлов = ВыборкаНаименований.Выбрать();
			Пока ВыборкаСлов.Следующий() Цикл
				
				Если ВыборкаСлов.ЭтоНаименование Тогда
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
					НоваяЗапись.Слово          = ВыборкаСлов.Слово;
					НоваяЗапись.ХешСлова       = ВыборкаСлов.ХешНаименования;
					НоваяЗапись.Позиция        = 0;
					НоваяЗапись.ТипОбъекта     = ТипОбъекта;
					НоваяЗапись.ВсегоСлов      = ВсегоСлов;
				Иначе
					
					ХешСлова = ВыборкаСлов.ХешСлова;
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;
					НоваяЗапись.Слово          = ВыборкаСлов.Слово;
					НоваяЗапись.ХешСлова       = ХешСлова;
					НоваяЗапись.Позиция        = Индекс;
					НоваяЗапись.ТипОбъекта     = ТипОбъекта;
					НоваяЗапись.ВсегоСлов      = ВсегоСлов;
					
					НаборСловНаименований.Добавить(НоваяЗапись.Слово);
					
					Индекс = Индекс + 1;
				КонецЕсли;
				
			КонецЦикла;
			
			НаборСловНаименований.СортироватьПоЗначению();
			СортированныйНаборСлов = НаборСловНаименований.ВыгрузитьЗначения();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Слово          = СтрСоединить(СортированныйНаборСлов, " ");
			НоваяЗапись.ХешСлова       = Хеш_MD5_64(НоваяЗапись.Слово);
			НоваяЗапись.Позиция        = -1;
			НоваяЗапись.ТипОбъекта     = ТипОбъекта;
			НоваяЗапись.ВсегоСлов      = ВсегоСлов;
			НоваяЗапись.СсылкаНаОбъект = СсылкаНаОбъект;

			НаборЗаписей.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурналРегистрации(ТекстОшибки, "ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов");
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;

КонецПроцедуры

Процедура ПерезаполнитьСтатистикуСловСловаряСопоставления(ТипОбъекта, ЕстьОшибки)
	
	Результат = ПолучитьНесоответствияСтатистикиСловИспользованияВСловареСопоставленияНоменклатурыБЭД(ТипОбъекта);
		
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки       = Блокировка.Добавить(Метаданные.РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипОбъекта.Установить(ТипОбъекта);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурналРегистрации(ТекстОшибки, "ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов");
		
		ЕстьОшибки = Истина;
		
		Возврат;
		
	КонецПопытки;

	Выборка = Результат.Выбрать();

	НачатьТранзакцию();
	Попытка
		
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей = ЗаполнитьНаборЗаписейСтатистикиСловВСловаре(Выборка, ТипОбъекта);
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписатьВЖурналРегистрации(ТекстОшибки, "ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов");
		
		ЕстьОшибки = Истина;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьЗначенияПервойКолонкиИзМакетаВМассив(Знач Макет)
		
	НаборЗначений = Новый Массив;
	
	НомерСтроки = 1;
	Пока Истина Цикл
		Адрес = "R" + Формат(НомерСтроки, "ЧГ=") + "C1";
		Значение = Макет.Область(Адрес).Текст;
		Если ПустаяСтрока(Значение) Тогда
			Прервать;
		КонецЕсли;
		
		НаборЗначений.Добавить(Значение);
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Возврат НаборЗначений;
	
КонецФункции

Функция ЭтоЧисло(Знач СтрокаПроверки)
	
	Для НомерСимвола = 1 По СтрДлина(СтрокаПроверки) Цикл
		
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, НомерСимвола, 1));
		
		Если НЕ ((КодСимвола >= 48 И КодСимвола <= 57)
			ИЛИ КодСимвола = 44 ИЛИ КодСимвола = 46) Тогда
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьНезначимыеСимволы(Знач СтрокаПроверки)
	
	ДопустимыеСимволы = Новый Соответствие;
	
	// Цифры.
	Для Код = 48 По 57 Цикл
		ДопустимыеСимволы.Вставить(Код, Истина);
	КонецЦикла;
	
	// Латиница маленькие.
	Для Код = 97 По 122 Цикл
		ДопустимыеСимволы.Вставить(Код, Истина);
	КонецЦикла;
	
	// Кириллица маленькие.
	Для Код = 1072 По 1103 Цикл
		ДопустимыеСимволы.Вставить(Код, Истина);
	КонецЦикла;
	
	ДопустимыеСимволы.Вставить(32, Истина); // Пробел.
	
	ДопустимыеСимволыТолькоДляЧисел = Новый Соответствие;
	ДопустимыеСимволыТолькоДляЧисел.Вставить(44, Истина); // Точка.
	ДопустимыеСимволыТолькоДляЧисел.Вставить(46, Истина); // Запятая.
	ДопустимыеСимволыТолькоДляЧисел.Вставить(47, Истина); // Слеш.
	
	// Тире и дефисы.
	ДопустимыеСимволыТолькоДляЧисел.Вставить(45, Истина);
	ДопустимыеСимволыТолькоДляЧисел.Вставить(8208, Истина);
	ДопустимыеСимволыТолькоДляЧисел.Вставить(8210, Истина);
	ДопустимыеСимволыТолькоДляЧисел.Вставить(8211, Истина);
	ДопустимыеСимволыТолькоДляЧисел.Вставить(8212, Истина);
	ДопустимыеСимволыТолькоДляЧисел.Вставить(8213, Истина);
	ДопустимыеСимволыТолькоДляЧисел.Вставить(8259, Истина);
	ДопустимыеСимволыТолькоДляЧисел.Вставить(8722, Истина);
	
	Результат = "";
	ПредыдущийКодСимвола = 0;
	Для НомерСимвола = 1 По СтрДлина(СтрокаПроверки) Цикл
		
		СимволПроверки = Сред(СтрокаПроверки, НомерСимвола, 1);
		КодСимвола = КодСимвола(СимволПроверки);
		
		СледующийКодСимвола = КодСимвола(Сред(СтрокаПроверки, НомерСимвола + 1, 1));
		
		Если ДопустимыеСимволы.Получить(КодСимвола) = Неопределено
			И ДопустимыеСимволыТолькоДляЧисел.Получить(КодСимвола) = Неопределено Тогда
			Результат = Результат + " ";
		ИначеЕсли ДопустимыеСимволыТолькоДляЧисел.Получить(КодСимвола) <> Неопределено
			И НЕ (ПредыдущийКодСимвола >= 48 И ПредыдущийКодСимвола <= 57
			И СледующийКодСимвола >= 48 И СледующийКодСимвола <= 57) Тогда
			Результат = Результат + " ";
		Иначе
			Результат = Результат + СимволПроверки;
		КонецЕсли;
		
		ПредыдущийКодСимвола = КодСимвола;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список отобранных слов.
//
// Параметры:
//  ТаблицаСлов                - ТаблицаЗначений из см. НоваяТаблицаСлов                   - содержит таблицу слов наименований.
//  ТипОбъекта                 - ПеречислениеСсылка.ТипОбъектаСопоставленияНоменклатурыБЭД - тип объекта сопоставления: номенклатура или характеристика.
//  ИсключитьНезначимыеСловаИБ - Булево                                                    - признак исключения незначимых слов по данным статистики использования слов словаря.
//  ПроверитьИзменениеСлов     - Булево                                                    - признак необходимости проверить изменение слов относительно слов в словаре
//                                                                                           по номенклатуре или характеристике.
//
// Возвращаемое значение:
//  РезультатЗапроса, Массив из РезультатЗапроса - если установлен параметр ПроверитьИзменениеСлов - Истина, возвращается массив. 
//                                                 В предпоследнем пакете - слова, которые нужно добавить или удалить из статистики слов словаря.
//                                                 В последнем пакете     - слова, группируемые по колонке СсылкаНаОбъект или Идентификатор.
//                                                 Если установлен параметр ПроверитьИзменениеСлов - Ложь,
//                                                 возвращает результат слова, группируемые по колонке СсылкаНаОбъект или Идентификатор.
//
Функция ИсключитьИзТаблицыСловНезначимые(ТаблицаСлов, ТипОбъекта, Знач ИсключитьНезначимыеСловаИБ = Истина, Знач ПроверитьИзменениеСлов = Ложь)
	
	Если ТаблицаСлов.Колонки.Найти("СсылкаНаОбъект") <> Неопределено Тогда
		ПолеГруппировки = "СсылкаНаОбъект";
	ИначеЕсли ТаблицаСлов.Колонки.Найти("Идентификатор") <> Неопределено Тогда
		ПолеГруппировки = "Идентификатор";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СписокИсключенийСловМеньше3Букв = СловаИсключенияМеньше3Букв();
	СписокИсключенийНезначимыхСлов  = ИсключенияНезначимыхСлов();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПроверкиСлов"            , ТаблицаСлов);
	Запрос.УстановитьПараметр("СписокИсключенийНезначимыхСлов" , СписокИсключенийНезначимыхСлов);
	Запрос.УстановитьПараметр("СписокИсключенийСловМеньше3Букв", СписокИсключенийСловМеньше3Букв);
	Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаПроверкиСлов.Слово КАК Слово,
		|	ТаблицаПроверкиСлов.СловоИзЛатиницы КАК СловоИзЛатиницы,
		|	ТаблицаПроверкиСлов.СловоЧисло КАК СловоЧисло,
		|	ТаблицаПроверкиСлов.ДлинаСлова КАК ДлинаСлова,
		|	ТаблицаПроверкиСлов.ХешНаименования КАК ХешНаименования,
		|	&ИмяПолеГруппировки КАК ПолеГруппировкиСсылкаИлиИдентификатор,
		|	ТаблицаПроверкиСлов.ЭтоНаименование КАК ЭтоНаименование
		|ПОМЕСТИТЬ СписокСлов
		|ИЗ
		|	&ТаблицаПроверкиСлов КАК ТаблицаПроверкиСлов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокСлов.ХешНаименования КАК ХешНаименования,
		|	СписокСлов.ПолеГруппировкиСсылкаИлиИдентификатор КАК ПолеГруппировкиСсылкаИлиИдентификатор,
		|	СписокСлов.ЭтоНаименование КАК ЭтоНаименование,
		|	СписокСлов.Слово КАК Слово
		|ИЗ
		|	СписокСлов КАК СписокСлов
		|ГДЕ
		|	НЕ СписокСлов.Слово В (&СписокИсключенийНезначимыхСлов)
		|	И (СписокСлов.ДлинаСлова > 2
		|			ИЛИ СписокСлов.Слово В (&СписокИсключенийСловМеньше3Букв)
		|			ИЛИ СписокСлов.СловоЧисло
		|			ИЛИ СписокСлов.СловоИзЛатиницы)
		|ИТОГИ ПО
		|	ПолеГруппировкиСсылкаИлиИдентификатор";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяПолеГруппировки", СтрШаблон("ТаблицаПроверкиСлов.%1", ПолеГруппировки));
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтфильтрованнаяТаблицаСлов = ТаблицаСлов.СкопироватьКолонки("Слово, ХешНаименования, ЭтоНаименование, " + ПолеГруппировки + "");
	ОтфильтрованнаяТаблицаСлов.Колонки.Добавить("ХешСлова", Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(20)));
	ОтфильтрованнаяТаблицаСлов.Колонки.Добавить("ПорядокСлов", Новый ОписаниеТипов("Число", , Новый КвалификаторыЧисла(4)));

	ВыборкаГруппировки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГруппировки.Следующий() Цикл
		
		ПорядокСлов = 1;
		Выборка = ВыборкаГруппировки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ОтфильтрованнаяТаблицаСлов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если ПолеГруппировки = "СсылкаНаОбъект" Тогда
				НоваяСтрока.СсылкаНаОбъект = Выборка.ПолеГруппировкиСсылкаИлиИдентификатор;
			ИначеЕсли ПолеГруппировки = "Идентификатор" Тогда
				НоваяСтрока.Идентификатор = Выборка.ПолеГруппировкиСсылкаИлиИдентификатор;
			КонецЕсли;
			
			НоваяСтрока.ХешСлова = Хеш_MD5_64(Выборка.Слово);
			НоваяСтрока.ПорядокСлов = ПорядокСлов;
			
			ПорядокСлов = ПорядокСлов + 1;

		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПроверкиСлов", ОтфильтрованнаяТаблицаСлов);
	Запрос.УстановитьПараметр("ТипОбъекта", ТипОбъекта);
	
	Запрос.Текст = ТекстЗапросаПроверкиСловПоСтатистикиИспользованияВСловаре(ПроверитьИзменениеСлов, ПолеГруппировки, ИсключитьНезначимыеСловаИБ);
	
	Если ПроверитьИзменениеСлов Тогда
		Возврат Запрос.ВыполнитьПакет();
	Иначе
		Возврат Запрос.Выполнить();
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаПроверкиСловПоСтатистикиИспользованияВСловаре(Знач ПроверитьИзменениеСлов, Знач ПолеГруппировки, Знач ИсключитьНезначимыеСловаИБ)
	
	ТаблицаЗаполнена = Ложь;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаПроверкиСлов.Слово КАК Слово,
	|	ТаблицаПроверкиСлов.ХешНаименования КАК ХешНаименования,
	|	&ИмяПолеГруппировки КАК ПолеГруппировкиСсылкаИлиИдентификатор,
	|	ТаблицаПроверкиСлов.ХешСлова КАК ХешСлова,
	|	ТаблицаПроверкиСлов.ЭтоНаименование КАК ЭтоНаименование,
	|	ТаблицаПроверкиСлов.ПорядокСлов КАК ПорядокСлов
	|&ПомещениеВоВременнуюТаблицу
	|ИЗ
	|	&ТаблицаПроверкиСлов КАК ТаблицаПроверкиСлов
	|
	|&ИндексированиеТаблицы";
	
	Если ИсключитьНезначимыеСловаИБ Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПомещениеВоВременнуюТаблицу", "ПОМЕСТИТЬ СписокСлов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндексированиеТаблицы", "
			|ИНДЕКСИРОВАТЬ ПО
			|	ХешСлова");
		
		ТекстЗапросаИсключенияНезначимыхСловИБ = "ВЫБРАТЬ
		|	СписокСлов.ХешНаименования КАК ХешНаименования,
		|	СписокСлов.ПолеГруппировкиСсылкаИлиИдентификатор КАК ПолеГруппировкиСсылкаИлиИдентификатор,
		|	СписокСлов.ХешСлова КАК ХешСлова,
		|	СписокСлов.ЭтоНаименование КАК ЭтоНаименование,
		|	СписокСлов.Слово КАК Слово,
		|	СписокСлов.ПорядокСлов КАК ПорядокСлов
		|&ПомещениеВоВременнуюТаблицу
		|ИЗ
		|	СписокСлов КАК СписокСлов
		|ГДЕ
		|	НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД КАК СтатистикаСловСловаряСопоставленияНоменклатурыБЭД
		|				ГДЕ
		|					СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ХешСлова = СписокСлов.ХешСлова
		|					И СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъекта
		|					И СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.Количество > 100000)
		|
		|&ИндексированиеТаблицы";

		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаИсключенияНезначимыхСловИБ;

		ТаблицаЗаполнена = Истина;
		
	КонецЕсли;
		
	Если ПроверитьИзменениеСлов И ПолеГруппировки = "СсылкаНаОбъект" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПомещениеВоВременнуюТаблицу", "ПОМЕСТИТЬ ТаблицаОтобранныхСлов");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндексированиеТаблицы", "
			|ИНДЕКСИРОВАТЬ ПО
			|	ХешСлова,
			|	ПолеГруппировкиСсылкаИлиИдентификатор");
		
		ТекстЗамены = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОтобранныхСлов.ХешСлова КАК ХешСлова,
		|	ТаблицаОтобранныхСлов.ПолеГруппировкиСсылкаИлиИдентификатор КАК ПолеГруппировкиСсылкаИлиИдентификатор,
		|	ИСТИНА КАК ДобавитьВСтатистику,
		|	ЛОЖЬ КАК УдалитьИзСтатистики,
		|	ТаблицаОтобранныхСлов.Слово КАК Слово,
		|	ТаблицаОтобранныхСлов.ПорядокСлов КАК ПорядокСлов
		|ИЗ
		|	ТаблицаОтобранныхСлов КАК ТаблицаОтобранныхСлов
		|ГДЕ
		|	НЕ ТаблицаОтобранныхСлов.ЭтоНаименование
		|	И НЕ ИСТИНА В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					ИСТИНА
		|				ИЗ
		|					РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
		|				ГДЕ
		|					СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект = ТаблицаОтобранныхСлов.ПолеГруппировкиСсылкаИлиИдентификатор
		|					И СловарьСопоставленияНоменклатурыБЭД.ХешСлова = ТаблицаОтобранныхСлов.ХешСлова
		|					И СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъекта
		|					И СловарьСопоставленияНоменклатурыБЭД.Позиция > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СловарьСопоставленияНоменклатурыБЭД.ХешСлова,
		|	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	"""",
		|	0
		|ИЗ
		|	РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтобранныхСлов КАК ТаблицаОтобранныхСлов
		|		ПО СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект = ТаблицаОтобранныхСлов.ПолеГруппировкиСсылкаИлиИдентификатор
		|			И СловарьСопоставленияНоменклатурыБЭД.ХешСлова = ТаблицаОтобранныхСлов.ХешСлова
		|			И (СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъекта)
		|			И (НЕ ТаблицаОтобранныхСлов.ЭтоНаименование)
		|ГДЕ
		|	ТаблицаОтобранныхСлов.ХешСлова ЕСТЬ NULL
		|	И СловарьСопоставленияНоменклатурыБЭД.Позиция > 0
		|	И ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				ТаблицаОтобранныхСлов КАК ТаблицаОтобранныхСлов
		|			ГДЕ
		|				ТаблицаОтобранныхСлов.ПолеГруппировкиСсылкаИлиИдентификатор = СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтобранныхСлов.ХешНаименования КАК ХешНаименования,
		|	ТаблицаОтобранныхСлов.ПолеГруппировкиСсылкаИлиИдентификатор КАК ПолеГруппировкиСсылкаИлиИдентификатор,
		|	ТаблицаОтобранныхСлов.ХешСлова КАК ХешСлова,
		|	ТаблицаОтобранныхСлов.ЭтоНаименование КАК ЭтоНаименование,
		|	ТаблицаОтобранныхСлов.Слово КАК Слово
		|ИЗ
		|	ТаблицаОтобранныхСлов КАК ТаблицаОтобранныхСлов";
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗамены;
		
		ТаблицаЗаполнена = Истина;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндексированиеТаблицы", "");
	
	Если НЕ ТаблицаЗаполнена Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПомещениеВоВременнуюТаблицу", "ПОМЕСТИТЬ СписокСлов");
			
		ТекстЗапросаВывод = "ВЫБРАТЬ
		|	СписокСлов.Слово КАК Слово,
		|	СписокСлов.ХешНаименования КАК ХешНаименования,
		|	СписокСлов.ПолеГруппировкиСсылкаИлиИдентификатор КАК ПолеГруппировкиСсылкаИлиИдентификатор,
		|	СписокСлов.ХешСлова КАК ХешСлова,
		|	СписокСлов.ЭтоНаименование КАК ЭтоНаименование
		|ИЗ
		|	СписокСлов КАК СписокСлов";
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаВывод;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПомещениеВоВременнуюТаблицу", "");
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокСлов
	|
	|ИТОГИ
	|	КОЛИЧЕСТВО(Слово)
	|ПО
	|	ПолеГруппировкиСсылкаИлиИдентификатор";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПолеГруппировки", СтрШаблон("ТаблицаПроверкиСлов.%1", ПолеГруппировки));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает список слов исключений, которые состоят из менее 3 букв
//
// Возвращаемое значение:
//  Массив из Строка - строки слов исключений.
//
Функция СловаИсключенияМеньше3Букв()
	
	МакетСловИсключения = Обработки.СопоставлениеНоменклатурыБЭД.ПолучитьМакет("СписокИсключенийСловМеньше3Букв");

	НаборСловИсключений = ПолучитьЗначенияПервойКолонкиИзМакетаВМассив(МакетСловИсключения);
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.СписокИсключенийСловМеньше3БуквДляСопоставленияБЭД(НаборСловИсключений);
	
	Возврат НаборСловИсключений;
		
КонецФункции

// Возвращает список незначимых слов исключений.
//
// Возвращаемое значение:
//  Массив из Строка - строки слов исключений.
//
Функция ИсключенияНезначимыхСлов()
	
	МакетСловИсключения = Обработки.СопоставлениеНоменклатурыБЭД.ПолучитьМакет("СписокИсключенийНезначимыхСлов");

	НаборСловИсключений = ПолучитьЗначенияПервойКолонкиИзМакетаВМассив(МакетСловИсключения);
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.СписокИсключенийНезначимыхСловДляСопоставленияБЭД(НаборСловИсключений);
	
	Возврат НаборСловИсключений;
	
КонецФункции

// Возвращает значение типа объекта сопоставления номенклатуры БЭД: номенклатура или характеристика.
//
// Параметры:
//  СсылкаНаОбъект - ОпределяемыйТип.ДанныеСопоставленияБЭД - ссылка данных сопоставления: номенклатура или характеристика.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипОбъектаСопоставленияНоменклатурыБЭД - тип объекта сопоставления.
//
Функция ТипОбъектаСопоставленияНоменклатурыБЭД(Знач СсылкаНаОбъект)
	
	НаименованиеТипаОбъекта = Неопределено;
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ОпределитьНаименованиеТипаОбъектаСопоставленияНоменклатурыБЭД(СсылкаНаОбъект, НаименованиеТипаОбъекта);
	
	Если НаименованиеТипаОбъекта = "Номенклатура" Тогда
		Возврат Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Номенклатура;
	ИначеЕсли НаименованиеТипаОбъекта = "Характеристика" Тогда
		Возврат Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Характеристика;
	Иначе
		Возврат Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСПоискомВариантовСопоставленияНоменклатуры

#Область ПравилоПоискаВариантовИЗаполнения

// Возвращает варианты сопоставления номенклатуры контрагентов номенклатуре ИБ.
//
// Параметры:
//  ТаблицаНоменклатурыКонтрагентов   - ТаблицаЗначений из см. ПреобразоватьНаборНоменклатурыКонтрагентовВТаблицу
//  ПроцентТочностиПоискаНаименований - Число  - процент точности поиска для вычисления поиска наименований по словарю.
//  ТребуетсяПоискНоменклатуры        - Булево - признак неоходимости выполнять поиск номенклатуры.
// 
// Возвращаемое значение:
//  ТаблицаЗначений из см. ПреобразоватьНаборНоменклатурыКонтрагентовВТаблицу
//
Функция ПодобратьВариантыСопоставленияНоменклатуры(Знач ТаблицаНоменклатурыКонтрагентов,
			Знач ПроцентТочностиПоискаНаименований, Знач ТребуетсяПоискНоменклатуры = Истина)
	
	Если ТребуетсяПоискНоменклатуры Тогда
		
		// 1. Поиск по штрихкоду комбинации.
		ПодобратьВариантыСопоставленияПоШтрихкодамКомбинаций(ТаблицаНоменклатурыКонтрагентов);
		
		// 2. Поиск по идентификаторам: номенклатура+характеристика, номенклатура.
		ПодобратьВариантыСопоставленияПоИдентификаторамНоменклатурыХарактеристики(ТаблицаНоменклатурыКонтрагентов);
		
		// 3. Поиск номенклатуры по натуральным ключам в информационной базе: словарю, штрихкодам, артикулам.
		ПодобратьВариантыСопоставленияПоНатуральнымКлючам(ТаблицаНоменклатурыКонтрагентов, ПроцентТочностиПоискаНаименований);
		
	КонецЕсли;
	
	СвойстваНоменклатурИБ = СвойстваНоменклатурыИнформационнойБазы(ТаблицаНоменклатурыКонтрагентов.ВыгрузитьКолонку("НоменклатураИБ"));
	
	ПреобразоватьСтруктуруСвойствНоменклатурыВТаблицу(СвойстваНоменклатурИБ, ТаблицаНоменклатурыКонтрагентов);
	
	// 4. Поиск характеристики номенклатуры по найденной номенклатуре в информационной базе.
	ПодобратьВариантыСопоставленияХарактеристикиНоменклатуры(ТаблицаНоменклатурыКонтрагентов, ПроцентТочностиПоискаНаименований);
	
	// 5. Поиск упаковки номенклатуры ИБ.
	ПодобратьВариантыСопоставленияУпаковкиНоменклатуры(ТаблицаНоменклатурыКонтрагентов);
	
	Возврат ТаблицаНоменклатурыКонтрагентов;
	
КонецФункции

Процедура ЗаполнитьВариантСопоставленияНоменклатуры(НовыйВариантСопоставления, ВариантыСопоставленияНоменклатурыБЭД, Номенклатура)
	
	Если ЗначениеЗаполнено(ВариантыСопоставленияНоменклатурыБЭД) Тогда
		ЕстьВариантНоменклатуры = Ложь;
		Для Каждого Вариант Из ВариантыСопоставленияНоменклатурыБЭД Цикл
			Если Номенклатура = Вариант.НоменклатураИБ Тогда
				ЕстьВариантНоменклатуры = Истина;
				Если НЕ Вариант.ПриоритетныйВариант Тогда
					Вариант.ПриоритетныйВариант = НовыйВариантСопоставления.ПриоритетныйВариант;
				КонецЕсли;
				Если НЕ Вариант.ШтрихкодСопоставлен Тогда
					Вариант.ШтрихкодСопоставлен = НовыйВариантСопоставления.ШтрихкодСопоставлен;
				КонецЕсли;
				Если НЕ Вариант.АртикулСопоставлен Тогда
					Вариант.АртикулСопоставлен  = НовыйВариантСопоставления.АртикулСопоставлен;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьВариантНоменклатуры Тогда
			ВариантыСопоставленияНоменклатурыБЭД.Добавить(НовыйВариантСопоставления);
		КонецЕсли;
	Иначе
		ВариантыСопоставленияНоменклатурыБЭД.Добавить(НовыйВариантСопоставления);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискВСервисе1СНоменклатура

Функция ИспользоватьСервисРаботаСНоменклатурой()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		
		ИспользоватьСервисРаботаСНоменклатурой = МодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы();
		
		ИспользоватьСервис = ИспользоватьСервисРаботаСНоменклатурой
		И МодульРаботаСНоменклатурой.ПравоИзмененияДанных();
		
	Иначе
		ИспользоватьСервис         = Ложь;
	КонецЕсли;
	
	Возврат ИспользоватьСервис;
	
КонецФункции

// Поиск номенклатуры в сервисе 1С:Номенклатура по идентификаторам для последующего сопоставления.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив из Структура- набор номенклатуры контрагентов, для которой нужно найти варианты.
//                                              См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента.
//
Процедура НайтиВариантыСопоставленияНоменклатурыПоИдентификаторам(ТаблицаНоменклатурыКонтрагентов)
	
	ИдентификаторыОбъектов = Новый Массив;
	
	Для Каждого ЭлементКоллекции Из ТаблицаНоменклатурыКонтрагентов Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементКоллекции.ИдентификаторНоменклатурыСервиса) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторыОбъектов.Добавить(
			Новый Структура("ИдентификаторНоменклатуры, ИдентификаторХарактеристики",
			ЭлементКоллекции.ИдентификаторНоменклатурыСервиса, ЭлементКоллекции.ИдентификаторХарактеристикиСервиса));
	КонецЦикла;

	НайденныеСсылки = Новый Массив;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		
		НайденныеСсылки = МодульРаботаСНоменклатурой.НоменклатураИХарактеристикиПоИдентификаторамСПроверкойВСервисе(ИдентификаторыОбъектов);
		
		ОбработатьВариантыСопоставленияПоИдентификаторамСервиса(НайденныеСсылки, ТаблицаНоменклатурыКонтрагентов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВариантыСопоставленияПоИдентификаторамСервиса(СсылкиПоИдентификаторам, ТаблицаНоменклатурыКонтрагентов)
	
	Если СсылкиПоИдентификаторам = Неопределено
		ИЛИ НЕ СсылкиПоИдентификаторам.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ПоискРазличныхСсылокПоИдентификаторамСервиса(СсылкиПоИдентификаторам);
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСсылокПоИдентификаторам = Результат.Выгрузить();
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("ИдентификаторНоменклатурыСервиса,ИдентификаторХарактеристикиСервиса");

	Для Каждого ЭлементКоллекции Из ТаблицаСсылокПоИдентификаторам Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторНоменклатурыСервиса"  , ЭлементКоллекции.ИдентификаторНоменклатурыСервиса);
		ПараметрыОтбора.Вставить("ИдентификаторХарактеристикиСервиса", ЭлементКоллекции.ИдентификаторХарактеристикиСервиса);
		НайденныеСтроки = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НоменклатураКонтрагента Из НайденныеСтроки Цикл
			
			Если ЭлементКоллекции.ОбъектУдален Тогда
				НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса   = "";
				НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса = "";
			Иначе
				ПриоритетныйВариантНоменклатуры = Ложь;
				Если ЭлементКоллекции.КоличествоНоменклатур = 1
					И НЕ ЗначениеЗаполнено(НоменклатураКонтрагента.НоменклатураИБ) Тогда
					НоменклатураКонтрагента.НоменклатураИБ = ЭлементКоллекции.Номенклатура;
					ПриоритетныйВариантНоменклатуры  = Истина;
				КонецЕсли;
				
				ВариантыСопоставленияНоменклатурыБЭД = НоменклатураКонтрагента.ВариантыСопоставленияНоменклатурыБЭД;
				
				ВариантСопоставления = НовыйВариантСопоставленияНоменклатурыБЭД();
				ВариантСопоставления.НоменклатураИБ      = ЭлементКоллекции.Номенклатура;
				ВариантСопоставления.ПриоритетныйВариант = ПриоритетныйВариантНоменклатуры;
				
				Если ЗначениеЗаполнено(ВариантыСопоставленияНоменклатурыБЭД) Тогда
					ЕстьВариантНоменклатуры = Ложь;
					КоличествоНоменклатур = ВариантыСопоставленияНоменклатурыБЭД.Количество() - 1;
					Для Индекс = 0 По КоличествоНоменклатур Цикл
						Вариант = ВариантыСопоставленияНоменклатурыБЭД[Индекс];
						Если ЭлементКоллекции.Номенклатура = Вариант.НоменклатураИБ Тогда
							ЕстьВариантНоменклатуры = Истина;
							ВариантыСопоставленияНоменклатурыБЭД.Удалить(Индекс);
							ВариантыСопоставленияНоменклатурыБЭД.Вставить(0, Вариант);
							Если ПриоритетныйВариантНоменклатуры Тогда
								Вариант.ПриоритетныйВариант = Истина;
							КонецЕсли;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ЕстьВариантНоменклатуры Тогда
						ВариантыСопоставленияНоменклатурыБЭД.Добавить(ВариантСопоставления);
					КонецЕсли;
				Иначе
					ВариантыСопоставленияНоменклатурыБЭД.Добавить(ВариантСопоставления);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлементКоллекции.Характеристика) Тогда
					Если ЭлементКоллекции.КоличествоХарактеристик = 1 Тогда
						НоменклатураКонтрагента.ХарактеристикаИБ = ЭлементКоллекции.Характеристика;
					КонецЕсли;
					Если НоменклатураКонтрагента.ВариантыСопоставленияХарактеристикиБЭД.Найти(ЭлементКоллекции.Характеристика) = Неопределено Тогда
						НоменклатураКонтрагента.ВариантыСопоставленияХарактеристикиБЭД.Добавить(ЭлементКоллекции.Характеристика);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
КонецПроцедуры

Функция ПоискРазличныхСсылокПоИдентификаторамСервиса(Знач СсылкиПоИдентификаторам)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСсылокПоИдентификаторам", СсылкиПоИдентификаторам);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСсылокПоИдентификаторам.Номенклатура КАК Номенклатура,
		|	ТаблицаСсылокПоИдентификаторам.Характеристика КАК Характеристика,
		|	ТаблицаСсылокПоИдентификаторам.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатурыСервиса,
		|	ТаблицаСсылокПоИдентификаторам.ИдентификаторХарактеристики КАК ИдентификаторХарактеристикиСервиса,
		|	ТаблицаСсылокПоИдентификаторам.ОбъектУдален КАК ОбъектУдален
		|ПОМЕСТИТЬ ТаблицыСсылок
		|ИЗ
		|	&ТаблицаСсылокПоИдентификаторам КАК ТаблицаСсылокПоИдентификаторам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторНоменклатурыСервиса,
		|	ИдентификаторХарактеристикиСервиса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицыСсылок.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицыСсылок.Номенклатура) КАК КоличествоНоменклатур,
		|	ТаблицыСсылок.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицыСсылок.Характеристика) КАК КоличествоХарактеристик
		|ПОМЕСТИТЬ ГруппировкаРазличныхСсылок
		|ИЗ
		|	ТаблицыСсылок КАК ТаблицыСсылок
		|ГДЕ
		|	НЕ ТаблицыСсылок.ОбъектУдален
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицыСсылок.ИдентификаторНоменклатурыСервиса,
		|	ТаблицыСсылок.ИдентификаторХарактеристикиСервиса
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторНоменклатурыСервиса,
		|	ИдентификаторХарактеристикиСервиса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицыСсылок.Номенклатура КАК Номенклатура,
		|	ТаблицыСсылок.Характеристика КАК Характеристика,
		|	ТаблицыСсылок.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
		|	ТаблицыСсылок.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса,
		|	ТаблицыСсылок.ОбъектУдален КАК ОбъектУдален,
		|	ГруппировкаРазличныхСсылок.КоличествоНоменклатур КАК КоличествоНоменклатур,
		|	ГруппировкаРазличныхСсылок.КоличествоХарактеристик КАК КоличествоХарактеристик
		|ИЗ
		|	ТаблицыСсылок КАК ТаблицыСсылок
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГруппировкаРазличныхСсылок КАК ГруппировкаРазличныхСсылок
		|		ПО ТаблицыСсылок.ИдентификаторНоменклатурыСервиса = ГруппировкаРазличныхСсылок.ИдентификаторНоменклатурыСервиса
		|			И ТаблицыСсылок.ИдентификаторХарактеристикиСервиса = ГруппировкаРазличныхСсылок.ИдентификаторХарактеристикиСервиса";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ПоискПоШтрихкодам

Процедура ПодобратьВариантыСопоставленияПоШтрихкодамКомбинаций(ТаблицаНоменклатурыКонтрагентов)
	
	ТекстЗапросаИБ = "";
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияПоШтрихкодамКомбинаций(ТекстЗапросаИБ);
	
	Если ПустаяСтрока(ТекстЗапросаИБ) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ПустаяСсылкаНоменклатурыБЭД());
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ТаблицаНоменклатурыКонтрагентов);
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаНоменклатурыКонтрагентов.ШтрихкодКомбинации КАК ШтрихкодКомбинации
	|ПОМЕСТИТЬ ТаблицаШтрихкодовКомбинации
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|ГДЕ
	|	ТаблицаНоменклатурыКонтрагентов.НоменклатураИБ = &ПустаяНоменклатура
	|	И ТаблицаНоменклатурыКонтрагентов.ШтрихкодКомбинации <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодКомбинации";
	
	Запрос.Выполнить();
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.СопоставлениеНоменклатурыКонтрагентовСлужебный.ПодобратьВариантыСопоставленияПоШтрихкодамКомбинаций");

	Запрос.Текст = ТекстЗапросаИБ;
	
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 0);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();

	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество()/100, "ЗапросПоШтрихкодамКомбинации");
	
	КоличествоПовторяющихсяДанных = 0;
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("ШтрихкодКомбинации,НоменклатураИБ");
	Пока Выборка.Следующий() Цикл
		
		ШтрихкодКомбинации = Выборка.ШтрихкодКомбинации;
		
		Отбор = Новый Структура;
		Отбор.Вставить("ШтрихкодКомбинации", ШтрихкодКомбинации);
		Отбор.Вставить("НоменклатураИБ"    , ПустаяСсылкаНоменклатурыБЭД());
		НайденныеСтроки = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(Отбор);
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
			
			ЗаполнитьЗначенияСвойств(Строка, Выборка);
		
			ВариантСопоставления = НовыйВариантСопоставленияНоменклатурыБЭД();
			ВариантСопоставления.НоменклатураИБ      = Выборка.НоменклатураИБ;
			ВариантСопоставления.ПриоритетныйВариант = Истина;
			ВариантСопоставления.ШтрихкодСопоставлен = Истина;
			ЗаполнитьВариантСопоставленияНоменклатуры(ВариантСопоставления, Строка.ВариантыСопоставленияНоменклатурыБЭД, Выборка.НоменклатураИБ);
			Если ЗначениеЗаполнено(Выборка.ХарактеристикаИБ) Тогда
				Если Строка.ВариантыСопоставленияХарактеристикиБЭД.Найти(Выборка.ХарактеристикаИБ) = Неопределено Тогда
					Строка.ВариантыСопоставленияХарактеристикиБЭД.Добавить(Выборка.ХарактеристикаИБ);
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.УпаковкаИБ) Тогда
				Строка.ВариантыСопоставленияУпаковкиБЭД.Добавить(Выборка.УпаковкаИБ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоПовторяющихсяДанных/100);

КонецПроцедуры

#КонецОбласти

#Область ПоискПоИдентификаторамНоменклатурыКонтрагентов

Процедура ПодобратьВариантыСопоставленияПоИдентификаторамНоменклатурыХарактеристики(ТаблицаНоменклатурыКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаНоменклатурыКонтрагентов);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ПустаяСсылкаНоменклатурыБЭД());
	Запрос.УстановитьПараметр("ВариантУказанияНоменклатуры", СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента());
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Владелец КАК Владелец,
	|	ТаблицаТоваров.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ТаблицаТоваров.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ НесопоставленныеТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.НоменклатураИБ = &ПустаяНоменклатура
	|	И ТаблицаТоваров.ВариантУказанияНоменклатуры = &ВариантУказанияНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	ИдентификаторХарактеристики";
	
	Запрос.Выполнить();

	Запрос.Текст = ТекстЗапросаПоискаПоИдентификаторамНоменклатурыХарактеристики();
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.СопоставлениеНоменклатурыКонтрагентовСлужебный.ПодобратьВариантыСопоставленияПоИдентификаторамНоменклатурыХарактеристики");

	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 0);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество(), "ЗапросПоИдентификаторам");
	
	КоличествоПовторяющихсяДанных = 0;
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("Владелец,ИдентификаторНоменклатуры,НоменклатураИБ,ИдентификаторХарактеристики");
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("Владелец,ИдентификаторНоменклатуры,НоменклатураИБ");
	
	Пока Выборка.Следующий() Цикл
		
		ОтборПоиска = Новый Структура;
		ОтборПоиска.Вставить("Владелец", Выборка.Владелец);
		ОтборПоиска.Вставить("ИдентификаторНоменклатуры", Выборка.ИдентификаторНоменклатуры);
		ОтборПоиска.Вставить("НоменклатураИБ"           , ПустаяСсылкаНоменклатурыБЭД());
		
		Если Выборка.ИдентификаторХарактеристики <> Неопределено Тогда
			ОтборПоиска.Вставить("ИдентификаторХарактеристики", Выборка.ИдентификаторХарактеристики);
			НайденныеСтроки = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ОтборПоиска);
			Для Каждого СтрокаПоиска Из НайденныеСтроки Цикл
				
				КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
				
				СтрокаПоиска.НоменклатураИБ   = Выборка.Номенклатура;
				СтрокаПоиска.ХарактеристикаИБ = Выборка.Характеристика;
				
				ВариантСопоставления = НовыйВариантСопоставленияНоменклатурыБЭД();
				ВариантСопоставления.НоменклатураИБ      = СтрокаПоиска.НоменклатураИБ;
				ВариантСопоставления.ПриоритетныйВариант = Истина;
				ЗаполнитьВариантСопоставленияНоменклатуры(ВариантСопоставления,
					СтрокаПоиска.ВариантыСопоставленияНоменклатурыБЭД, Выборка.Номенклатура);
				Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					Если СтрокаПоиска.ВариантыСопоставленияХарактеристикиБЭД.Найти(Выборка.Характеристика) = Неопределено Тогда
						СтрокаПоиска.ВариантыСопоставленияХарактеристикиБЭД.Добавить(Выборка.Характеристика);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			НайденныеСтроки = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ОтборПоиска);
			Для Каждого СтрокаПоиска Из НайденныеСтроки Цикл
				
				КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
				
				СтрокаПоиска.НоменклатураИБ = Выборка.Номенклатура;
				
				ВариантСопоставления = НовыйВариантСопоставленияНоменклатурыБЭД();
				ВариантСопоставления.НоменклатураИБ      = СтрокаПоиска.НоменклатураИБ;
				ВариантСопоставления.ПриоритетныйВариант = Истина;
				ЗаполнитьВариантСопоставленияНоменклатуры(ВариантСопоставления,
					СтрокаПоиска.ВариантыСопоставленияНоменклатурыБЭД, Выборка.Номенклатура);

			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоПовторяющихсяДанных);
		
КонецПроцедуры

Функция ТекстЗапросаПоискаПоИдентификаторамНоменклатурыХарактеристики()
	
	Возврат "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НесопоставленныеТовары.Владелец КАК Владелец,
	|	НесопоставленныеТовары.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	НесопоставленныеТовары.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентовБЭД.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НайденныеТовары
	|ИЗ
	|	НесопоставленныеТовары КАК НесопоставленныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ПО НесопоставленныеТовары.ИдентификаторНоменклатуры = НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатуры
	|			И НесопоставленныеТовары.ИдентификаторХарактеристики = НоменклатураКонтрагентовБЭД.ИдентификаторХарактеристики
	|			И НесопоставленныеТовары.Владелец = НоменклатураКонтрагентовБЭД.Владелец
	|ГДЕ
	|	НоменклатураКонтрагентовБЭД.Номенклатура <> &ПустаяНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	ИдентификаторНоменклатуры,
	|	ИдентификаторХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеТовары.Владелец КАК Владелец,
	|	НайденныеТовары.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	НайденныеТовары.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики
	|ПОМЕСТИТЬ ГруппировкаПоНоменклатуреИХарактеристики
	|ИЗ
	|	НайденныеТовары КАК НайденныеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденныеТовары.Владелец,
	|	НайденныеТовары.ИдентификаторНоменклатуры,
	|	НайденныеТовары.ИдентификаторХарактеристики
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НайденныеТовары.Номенклатура) = 1 И
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НайденныеТовары.Характеристика) = 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	ИдентификаторНоменклатуры,
	|	ИдентификаторХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НайденныеТовары.Владелец КАК Владелец,
	|	НайденныеТовары.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	НайденныеТовары.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	НайденныеТовары.Номенклатура КАК Номенклатура,
	|	НайденныеТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СопоставленныеДанные
	|ИЗ
	|	НайденныеТовары КАК НайденныеТовары
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ГруппировкаПоНоменклатуреИХарактеристики КАК ГруппировкаПоНоменклатуреИХарактеристики
	|			ГДЕ
	|				ГруппировкаПоНоменклатуреИХарактеристики.Владелец = НайденныеТовары.Владелец
	|				И ГруппировкаПоНоменклатуреИХарактеристики.ИдентификаторНоменклатуры = НайденныеТовары.ИдентификаторНоменклатуры
	|				И ГруппировкаПоНоменклатуреИХарактеристики.ИдентификаторХарактеристики = НайденныеТовары.ИдентификаторХарактеристики)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	ИдентификаторНоменклатуры,
	|	ИдентификаторХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НайденныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГруппировкаПоНоменклатуреИХарактеристики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НесопоставленныеТовары.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	НоменклатураКонтрагентовБЭД.Владелец КАК Владелец,
	|	НоменклатураКонтрагентовБЭД.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентовБЭД.ИспользоватьХарактеристики КАК ИспользоватьХарактеристики
	|ПОМЕСТИТЬ НайденныеТоварыНоменклатуры
	|ИЗ
	|	НесопоставленныеТовары КАК НесопоставленныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураКонтрагентовБЭД КАК НоменклатураКонтрагентовБЭД
	|		ПО НесопоставленныеТовары.ИдентификаторНоменклатуры = НоменклатураКонтрагентовБЭД.ИдентификаторНоменклатуры
	|			И НесопоставленныеТовары.Владелец = НоменклатураКонтрагентовБЭД.Владелец
	|ГДЕ
	|	НоменклатураКонтрагентовБЭД.Номенклатура <> &ПустаяНоменклатура
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					СопоставленныеДанные КАК СопоставленныеДанные
	|				ГДЕ
	|					СопоставленныеДанные.Владелец = НесопоставленныеТовары.Владелец
	|					И СопоставленныеДанные.ИдентификаторНоменклатуры = НесопоставленныеТовары.ИдентификаторНоменклатуры
	|					И СопоставленныеДанные.ИдентификаторХарактеристики = НесопоставленныеТовары.ИдентификаторХарактеристики)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Владелец,
	|	ИдентификаторНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НесопоставленныеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставленныеДанные.Владелец КАК Владелец,
	|	СопоставленныеДанные.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	СопоставленныеДанные.Номенклатура КАК Номенклатура,
	|	СопоставленныеДанные.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	СопоставленныеДанные.Характеристика КАК Характеристика
	|ИЗ
	|	СопоставленныеДанные КАК СопоставленныеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыНоменклатуры.Владелец,
	|	ТоварыНоменклатуры.ИдентификаторНоменклатуры,
	|	ТоварыНоменклатуры.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	НайденныеТоварыНоменклатуры КАК ТоварыНоменклатуры
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				НайденныеТоварыНоменклатуры КАК НайденныеТоварыНоменклатуры
	|			ГДЕ
	|				НайденныеТоварыНоменклатуры.Владелец = ТоварыНоменклатуры.Владелец
	|				И НайденныеТоварыНоменклатуры.ИдентификаторНоменклатуры = ТоварыНоменклатуры.ИдентификаторНоменклатуры
	|			СГРУППИРОВАТЬ ПО
	|				НайденныеТоварыНоменклатуры.Владелец,
	|				НайденныеТоварыНоменклатуры.ИдентификаторНоменклатуры
	|			ИМЕЮЩИЕ
	|				(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НайденныеТоварыНоменклатуры.Номенклатура) = 1
	|					И КОЛИЧЕСТВО(НайденныеТоварыНоменклатуры.Номенклатура) > 1)
	|					ИЛИ (КОЛИЧЕСТВО(НайденныеТоварыНоменклатуры.Номенклатура) = 1
	|					И МИНИМУМ(НайденныеТоварыНоменклатуры.ИспользоватьХарактеристики) = ИСТИНА))";
	
КонецФункции

#КонецОбласти

#Область ПоискНоменклатурыПоНатуральнымКлючам

Процедура ПодобратьВариантыСопоставленияПоНатуральнымКлючам(ТаблицаНоменклатурыКонтрагентов, Знач ПроцентТочностиПоискаНоменклатуры)
		
	КолонкиОтбора = "ИдентификаторНоменклатуры,ШтрихкодыНоменклатуры,Артикул,Наименование,ВариантУказанияНоменклатуры,Владелец";
	
	Отбор = Новый Структура;
	Отбор.Вставить("НоменклатураИБ", ПустаяСсылкаНоменклатурыБЭД());
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("НоменклатураИБ");
	ТаблицаНоменклатуры = ТаблицаНоменклатурыКонтрагентов.Скопировать(Отбор, КолонкиОтбора);
	ТаблицаНоменклатуры.Свернуть(КолонкиОтбора);
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ТаблицаНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНатуральныхКлючей    = НоваяТаблицаНатуральныхКлючей();
	ТаблицаНаименованийПоСловам = НоваяТаблицаНаименованийПоСловам();
	НаборИдентификаторов        = Новый Массив;
	
	ЗаполнитьДополнительныеТаблицыНоменклатурыКонтрагентов(ТаблицаНоменклатуры, ТаблицаНатуральныхКлючей,
		ТаблицаНаименованийПоСловам, НаборИдентификаторов);
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНатуральныхКлючей", ТаблицаНатуральныхКлючей);
	
	ИнициализироватьЗапросПоискаПоНатуральнымКлючам(Запрос);
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("ИдентификаторНоменклатуры,НоменклатураИБ");
	
	ПоискВариантовСопоставленияНоменклатурыСНашейНоменклатурой(Запрос, ТаблицаНоменклатурыКонтрагентов, ТаблицаНатуральныхКлючей);
	
	ПоискВариантовСопоставленияНоменклатурыСНоменклатуройКонтрагентов(Запрос, ТаблицаНоменклатурыКонтрагентов, ТаблицаНатуральныхКлючей,
		ТаблицаНаименованийПоСловам, НаборИдентификаторов, ПроцентТочностиПоискаНоменклатуры);
		
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеТаблицыНоменклатурыКонтрагентов(ТаблицаНоменклатуры, ТаблицаНатуральныхКлючей,
			ТаблицаНаименованийПоСловам, НаборИдентификаторов)
	
	ТаблицаСлов = НоваяТаблицаСлов();
	
	ВариантУказанияНоменклатураОрганизации = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации();
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		ИдентификаторНоменклатуры = СтрокаНоменклатуры.ИдентификаторНоменклатуры;
		Артикул                   = СтрокаНоменклатуры.Артикул;
		
		ЭтоНашаНоменклатура = СтрокаНоменклатуры.ВариантУказанияНоменклатуры = ВариантУказанияНоменклатураОрганизации;

		Если ЗначениеЗаполнено(СтрокаНоменклатуры.ШтрихкодыНоменклатуры) Тогда
			
			НаборШтрихкодов = СтрРазделить(СтрокаНоменклатуры.ШтрихкодыНоменклатуры, ",");
			Если ЗначениеЗаполнено(НаборШтрихкодов) Тогда
				Для Каждого Штрихкод Из НаборШтрихкодов Цикл
					НоваяСтрока = ТаблицаНатуральныхКлючей.Добавить();
					НоваяСтрока.Штрихкод                  = Штрихкод;
					НоваяСтрока.ИдентификаторНоменклатуры = ИдентификаторНоменклатуры;
					НоваяСтрока.ЭтоВнутреннийШтрихкод     = НЕ ЭтоВалидныйШтрихкод(Штрихкод);
					НоваяСтрока.Артикул                   = Артикул;
					НоваяСтрока.Наименование              = СтрокаНоменклатуры.Наименование;
					НоваяСтрока.ЭтоНашаНоменклатура       = ЭтоНашаНоменклатура;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Артикул) Тогда
			НоваяСтрока = ТаблицаНатуральныхКлючей.Добавить();
			НоваяСтрока.ИдентификаторНоменклатуры = ИдентификаторНоменклатуры;
			НоваяСтрока.Артикул                   = Артикул;
			НоваяСтрока.Наименование              = СтрокаНоменклатуры.Наименование;
			НоваяСтрока.ЭтоНашаНоменклатура       = ЭтоНашаНоменклатура;
		ИначеЕсли ЭтоНашаНоменклатура Тогда
			НоваяСтрока = ТаблицаНатуральныхКлючей.Добавить();
			НоваяСтрока.ИдентификаторНоменклатуры = ИдентификаторНоменклатуры;
			НоваяСтрока.Наименование              = СтрокаНоменклатуры.Наименование;
			НоваяСтрока.ЭтоНашаНоменклатура       = Истина;
		КонецЕсли;
		
		Если НЕ ЭтоНашаНоменклатура Тогда
		
			РазобратьНаименованиеДанныхСопоставленияНоменклатурыНаОтдельныеСлова(
				СтрокаНоменклатуры.Наименование, ТаблицаСлов, ИдентификаторНоменклатуры);
		КонецЕсли;
		
	КонецЦикла;
		
	ТипОбъекта = Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Номенклатура;

	ЗаполнитьТаблицуНаименованийПоСловам(ТаблицаСлов, ТаблицаНаименованийПоСловам, НаборИдентификаторов, ТипОбъекта);
	
КонецПроцедуры

Процедура ИнициализироватьЗапросПоискаПоНатуральнымКлючам(Запрос)
	
	МассивЗапросов = Новый Массив;
	
	ТекстВременнойТаблицыНатуральныхКлючей = 
	"ВЫБРАТЬ
	|	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ТаблицаНатуральныхКлючей.Штрихкод КАК Штрихкод,
	|	ТаблицаНатуральныхКлючей.ЭтоВнутреннийШтрихкод КАК ЭтоВнутреннийШтрихкод,
	|	ТаблицаНатуральныхКлючей.Артикул КАК Артикул,
	|	ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура КАК ЭтоНашаНоменклатура,
	|	ТаблицаНатуральныхКлючей.Наименование КАК Наименование
	|ПОМЕСТИТЬ ТаблицаНатуральныхКлючей
	|ИЗ
	|	&ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей";
	
	МассивЗапросов.Добавить(ТекстВременнойТаблицыНатуральныхКлючей);
	
	ТекстЗапросаИБ = "";
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ИнициализацияТекстаЗапросаПоискаСопоставленияПоНатуральнымКлючам(ТекстЗапросаИБ);
	
	Если ПустаяСтрока(ТекстЗапросаИБ) Тогда
		ТекстЗапросаИБ = "
		|ВЫБРАТЬ
		|	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
		|	ТаблицаНатуральныхКлючей.Штрихкод КАК Штрихкод,
		|	ТаблицаНатуральныхКлючей.ЭтоВнутреннийШтрихкод КАК ЭтоВнутреннийШтрихкод,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	ЛОЖЬ КАК ШтрихкодСопоставлен,
		|	ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура
		|ПОМЕСТИТЬ ТаблицаСопоставленныхПоШтрихкодам
		|ИЗ
		|	ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
		|
		|ГДЕ
		|	ТаблицаНатуральныхКлючей.Штрихкод <> """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНатуральныхКлючей.Артикул КАК Артикул,
		|	ТаблицаНатуральныхКлючей.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	ЛОЖЬ КАК АртикулСопоставлен,
		|	ТаблицаНатуральныхКлючей.ЭтоНашаНоменклатура
		|ПОМЕСТИТЬ ТаблицаСопоставленныхПоАртикулам
		|ИЗ
		|	ТаблицаНатуральныхКлючей КАК ТаблицаНатуральныхКлючей
		|ГДЕ
		|	ТаблицаНатуральныхКлючей.Артикул <> """"";
		
	КонецЕсли;
	
	МассивЗапросов.Добавить(ТекстЗапросаИБ);
	
	УничтожитьТаблицу = "УНИЧТОЖИТЬ ТаблицаНатуральныхКлючей ";
	МассивЗапросов.Добавить(УничтожитьТаблицу);
	
	Запрос.Текст = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Проверяет валидность штрихкода.
//
// Параметры:
//  Штрихкод - Строка - штрихкод товара.
//
// Возвращаемое значение:
//   Булево - признак валидности штрихкода. Истина - внешний штрихкод, Ложь - внутренний штрихкод.
//
Функция ЭтоВалидныйШтрихкод(Знач Штрихкод)
	
	Штрихкод = СокрЛП(Штрихкод);
	
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Штрихкод) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Пока Лев(Штрихкод, 1) = "0" Цикл
		Штрихкод = Сред(Штрихкод, 2);
	КонецЦикла;
	
	ДлинаШтрихкода = СтрДлина(Штрихкод);
	
	Если Лев(Штрихкод, 1) = "2" И ДлинаШтрихкода <> 11 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ДлинаШтрихкода < 6 ИЛИ ДлинаШтрихкода > 14
		ИЛИ ДлинаШтрихкода = 9 ИЛИ ДлинаШтрихкода = 10
		ИЛИ (ДлинаШтрихкода = 14 И Лев(Штрихкод, 1) = "9") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Штрихкод не валидный, если начинается на любой из префиксов: 959, 96-976,98,99.
	// Исключение: 9600 - 9604 были присвоены GS1 UK под номера GTIN-8, они валидные.
	Если ДлинаШтрихкода = 8 ИЛИ ДлинаШтрихкода = 13 Тогда
		Если Лев(Штрихкод, 3) = "959"
			ИЛИ Лев(Штрихкод, 2) = "98"
			ИЛИ Лев(Штрихкод, 2) = "99"
			ИЛИ Лев(Штрихкод, 2) = "99"
			ИЛИ (Лев(Штрихкод, 2) = "97" И Лев(Штрихкод, 3) <> "977" И Лев(Штрихкод, 3) <> "978" И Лев(Штрихкод, 3) <> "979")
			ИЛИ (Лев(Штрихкод, 2) = "96" И Лев(Штрихкод, 4) <> "9600" И Лев(Штрихкод, 4) <> "9601"
				И Лев(Штрихкод, 4) <> "9602" И Лев(Штрихкод, 4) <> "9604") Тогда

			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Прав(Штрихкод, 1) = РассчитатьКонтрольныйСимволGTIN(Штрихкод);
	
КонецФункции

// Возвращает контрольный символ.
//
// Параметры:
//  GTIN - Строка - штрихкод.
//
// Возвращаемое значение:
//  Строка - контрольный символ штрихкода.
//
Функция РассчитатьКонтрольныйСимволGTIN(Знач GTIN)
	
	Сумма = 0;
	ДлиннаGTIN = СтрДлина(GTIN);
	Коэффициент = ?(ДлиннаGTIN % 2 = 0, 3, 1); 
	
	Для Сч = 1 По ДлиннаGTIN - 1 Цикл
		ВремКодСимвола = КодСимвола(GTIN, Сч);
		Сумма  = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма = (10 - Сумма % 10) % 10;
	КонтрольныйСимвол = Символ(Сумма + 48);
	
	Возврат КонтрольныйСимвол;
	
КонецФункции

#Область ПоискНоменклатурыКонтрагента

Процедура ПоискВариантовСопоставленияНоменклатурыСНоменклатуройКонтрагентов(Знач Запрос, ТаблицаНоменклатурыКонтрагентов, Знач ТаблицаНатуральныхКлючей,
		Знач ТаблицаНаименованийПоСловам, Знач НаборИдентификаторов, Знач ПроцентТочностиПоискаНоменклатуры)
		
	КоличествоИдентификаторов = НаборИдентификаторов.Количество();
		
	Запрос.УстановитьПараметр("ТаблицаНаименованийПоСловам", ТаблицаНаименованийПоСловам);
	Запрос.УстановитьПараметр("ПроцентТочностиПоиска"      , ПроцентТочностиПоискаНоменклатуры);
	Запрос.УстановитьПараметр("ТипОбъектаСопоставления"    , Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Номенклатура);
	
	ТекстЗапросаВариантовСопоставленияПоНоменклатуреКонтрагентов(Запрос.Текст);

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.СопоставлениеНоменклатурыКонтрагентовСлужебный.ПодобратьВариантыСопоставленияПоНатуральнымКлючам");

	Запрос.Выполнить();
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, КоличествоИдентификаторов, "ЗапросПоНатуральнымКлючам");
	
	ИнициализацияТекстаЗапросаПоискаВСловареСопоставленияПоНоменклатуры(Запрос.Текст);
		
	КоличествоПовторяющихсяДанных = 0;
	Для Каждого Идентификатор Из НаборИдентификаторов Цикл
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторНоменклатуры", Идентификатор);
		ПараметрыОтбора.Вставить("НоменклатураИБ", ПустаяСсылкаНоменклатурыБЭД());
		СтрокиНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
		
		ВыборкаВариантов = Результат.Выбрать();
		ВсегоНайденоВариантов = ВыборкаВариантов.Количество();
		
		Для Каждого НоменклатураКонтрагентов Из СтрокиНоменклатурыКонтрагентов Цикл
			
			Пока ВыборкаВариантов.Следующий() Цикл
				
				КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
				
				ПриоритетныйВариант = Ложь;
				Если ВсегоНайденоВариантов = 1 Тогда
					НоменклатураКонтрагентов.НоменклатураИБ = ВыборкаВариантов.Номенклатура;
					ПриоритетныйВариант = Истина;
				КонецЕсли;
				
				ВариантСопоставления = НовыйВариантСопоставленияНоменклатурыБЭД();
				ВариантСопоставления.НоменклатураИБ      = ВыборкаВариантов.Номенклатура;
				ВариантСопоставления.ПриоритетныйВариант = ПриоритетныйВариант;
				ВариантСопоставления.ШтрихкодСопоставлен = ВыборкаВариантов.ШтрихкодСопоставлен;
				ВариантСопоставления.АртикулСопоставлен  = ВыборкаВариантов.АртикулСопоставлен;
				ЗаполнитьВариантСопоставленияНоменклатуры(ВариантСопоставления,
					НоменклатураКонтрагентов.ВариантыСопоставленияНоменклатурыБЭД, ВариантСопоставления.НоменклатураИБ);
				
			КонецЦикла;
			ВыборкаВариантов.Сбросить();
		КонецЦикла;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоПовторяющихсяДанных);
	
КонецПроцедуры

Процедура ИнициализацияТекстаЗапросаПоискаВСловареСопоставленияПоНоменклатуры(ТекстЗапроса)
	
	МассивЗапросов = Новый Массив;
	
	ТекстВременнойТаблицыНатуральныхКлючей = "ВЫБРАТЬ ПЕРВЫЕ 20
	|	ВариантыПоНатуральнымКлючам.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ВариантыПоНатуральнымКлючам.Номенклатура КАК Номенклатура,
	|	ВариантыПоНатуральнымКлючам.АртикулСопоставлен КАК АртикулСопоставлен,
	|	ВариантыПоНатуральнымКлючам.ШтрихкодСопоставлен КАК ШтрихкодСопоставлен,
	|	ВариантыПоНатуральнымКлючам.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВариантыСопоставления
	|ИЗ
	|	ВариантыПоНатуральнымКлючам КАК ВариантыПоНатуральнымКлючам
	|ГДЕ
	|	ВариантыПоНатуральнымКлючам.ИдентификаторНоменклатуры = &Идентификатор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	МассивЗапросов.Добавить(ТекстВременнойТаблицыНатуральныхКлючей);
	
	ТекстЗапроса = ТекстЗапросаПоискаВариантовСопоставленияВСловареПоНаименованию();
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВыводаВариантовСопоставленияНоменклатуры();
	МассивЗапросов.Добавить(ТекстЗапроса);

	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоИсключениюНоменклатуры", "НЕ ИСТИНА В
	|(ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	ВариантыСопоставления КАК ВариантыСопоставления
	|ГДЕ
	|	ВариантыСопоставления.Номенклатура = СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект)");
	
КонецПроцедуры

Процедура ТекстЗапросаВариантовСопоставленияПоНоменклатуреКонтрагентов(ТекстЗапроса)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.АртикулСопоставлен, ЛОЖЬ) КАК АртикулСопоставлен,
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоШтрихкодам.ЭтоВнутреннийШтрихкод, ЛОЖЬ) КАК ЭтоВнутреннийШтрихкод,
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоШтрихкодам.ШтрихкодСопоставлен, ЛОЖЬ) КАК ШтрихкодСопоставлен,
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры, ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры) КАК ИдентификаторНоменклатуры,
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.Номенклатура, ТаблицаСопоставленныхПоШтрихкодам.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ВариантыСопоставленияПоАртикуламШтрихкодам
	|ИЗ
	|	ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСопоставленныхПоАртикулам КАК ТаблицаСопоставленныхПоАртикулам
	|		ПО ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры = ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры
	|			И ТаблицаСопоставленныхПоШтрихкодам.Номенклатура = ТаблицаСопоставленныхПоАртикулам.Номенклатура
	|ГДЕ
	|	НЕ ТаблицаСопоставленныхПоШтрихкодам.ЭтоНашаНоменклатура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.АртикулСопоставлен, ЛОЖЬ),
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоШтрихкодам.ЭтоВнутреннийШтрихкод, ЛОЖЬ),
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоШтрихкодам.ШтрихкодСопоставлен, ЛОЖЬ),
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры, ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры),
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.Номенклатура, ТаблицаСопоставленныхПоШтрихкодам.Номенклатура)
	|ИЗ
	|	ТаблицаСопоставленныхПоАртикулам КАК ТаблицаСопоставленныхПоАртикулам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	|		ПО ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры = ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры
	|			И ТаблицаСопоставленныхПоАртикулам.Номенклатура = ТаблицаСопоставленныхПоШтрихкодам.Номенклатура
	|ГДЕ
	|	НЕ ТаблицаСопоставленныхПоАртикулам.ЭтоНашаНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСопоставленныхПоАртикулам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСопоставленныхПоШтрихкодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСловКаталога.ХешСлова КАК ХешСлова,
	|	ТаблицаСловКаталога.Позиция КАК Позиция,
	|	ТаблицаСловКаталога.ВсегоСлов КАК ВсегоСлов,
	|	ТаблицаСловКаталога.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаСловКаталога
	|ИЗ
	|	&ТаблицаНаименованийПоСловам КАК ТаблицаСловКаталога
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
	|	ТаблицаСловКаталога.Идентификатор КАК Идентификатор,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА СловарьСопоставленияНоменклатурыБЭД.Позиция = 0
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ) КАК Приоритет
	|ПОМЕСТИТЬ ВариантыСопоставленияПоПолномуСовпадению
	|ИЗ
	|	ТаблицаСловКаталога КАК ТаблицаСловКаталога
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	|		ПО ТаблицаСловКаталога.ХешСлова = СловарьСопоставленияНоменклатурыБЭД.ХешСлова
	|			И (СловарьСопоставленияНоменклатурыБЭД.Позиция < 1)
	|			И (СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъектаСопоставления)
	|			И (ТаблицаСловКаталога.Позиция < 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект,
	|	ТаблицаСловКаталога.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	СсылкаНаОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыСопоставленияПоПолномуСовпадению.Идентификатор КАК ИдентификаторНоменклатуры,
	|	ВариантыСопоставленияПоПолномуСовпадению.СсылкаНаОбъект КАК Номенклатура,
	|	ЕСТЬNULL(ВариантыСопоставленияПоАртикуламШтрихкодам.АртикулСопоставлен, ЛОЖЬ) КАК АртикулСопоставлен,
	|	ЕСТЬNULL(ВариантыСопоставленияПоАртикуламШтрихкодам.ШтрихкодСопоставлен, ЛОЖЬ) КАК ШтрихкодСопоставлен,
	|	ВариантыСопоставленияПоПолномуСовпадению.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВариантыПоНатуральнымКлючам
	|ИЗ
	|	ВариантыСопоставленияПоПолномуСовпадению КАК ВариантыСопоставленияПоПолномуСовпадению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыСопоставленияПоАртикуламШтрихкодам КАК ВариантыСопоставленияПоАртикуламШтрихкодам
	|		ПО ВариантыСопоставленияПоПолномуСовпадению.Идентификатор = ВариантыСопоставленияПоАртикуламШтрихкодам.ИдентификаторНоменклатуры
	|			И ВариантыСопоставленияПоПолномуСовпадению.СсылкаНаОбъект = ВариантыСопоставленияПоАртикуламШтрихкодам.Номенклатура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВариантыСопоставленияПоАртикуламШтрихкодам.ИдентификаторНоменклатуры,
	|	ВариантыСопоставленияПоАртикуламШтрихкодам.Номенклатура,
	|	ВариантыСопоставленияПоАртикуламШтрихкодам.АртикулСопоставлен,
	|	ВариантыСопоставленияПоАртикуламШтрихкодам.ШтрихкодСопоставлен,
	|	ВЫБОР
	|		КОГДА НЕ ВариантыСопоставленияПоПолномуСовпадению.Идентификатор ЕСТЬ NULL
	|			ТОГДА ВариантыСопоставленияПоПолномуСовпадению.Приоритет
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ ВариантыСопоставленияПоАртикуламШтрихкодам.ЭтоВнутреннийШтрихкод
	|						И ВариантыСопоставленияПоАртикуламШтрихкодам.ШтрихкодСопоставлен
	|					ТОГДА 3
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВариантыСопоставленияПоАртикуламШтрихкодам.АртикулСопоставлен
	|								И ВариантыСопоставленияПоАртикуламШтрихкодам.ШтрихкодСопоставлен
	|							ТОГДА 4
	|						ИНАЧЕ 5
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ
	|ИЗ
	|	ВариантыСопоставленияПоАртикуламШтрихкодам КАК ВариантыСопоставленияПоАртикуламШтрихкодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыСопоставленияПоПолномуСовпадению КАК ВариантыСопоставленияПоПолномуСовпадению
	|		ПО ВариантыСопоставленияПоАртикуламШтрихкодам.ИдентификаторНоменклатуры = ВариантыСопоставленияПоПолномуСовпадению.Идентификатор
	|			И ВариантыСопоставленияПоАртикуламШтрихкодам.Номенклатура = ВариантыСопоставленияПоПолномуСовпадению.СсылкаНаОбъект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВариантыСопоставленияПоАртикуламШтрихкодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыПоНатуральнымКлючам.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры
	|ПОМЕСТИТЬ СопоставленныеИдентификаторы
	|ИЗ
	|	ВариантыПоНатуральнымКлючам КАК ВариантыПоНатуральнымКлючам
	|
	|СГРУППИРОВАТЬ ПО
	|	ВариантыПоНатуральнымКлючам.ИдентификаторНоменклатуры
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВариантыПоНатуральнымКлючам.Номенклатура) >= 20
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыСопоставленияПоПолномуСовпадению.Идентификатор
	|ИЗ
	|	ВариантыСопоставленияПоПолномуСовпадению КАК ВариантыСопоставленияПоПолномуСовпадению
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВариантыСопоставленияПоПолномуСовпадению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСловКаталога.ХешСлова КАК ХешСлова,
	|	ТаблицаСловКаталога.Позиция КАК Позиция,
	|	ТаблицаСловКаталога.ВсегоСлов КАК ВсегоСлов,
	|	ТаблицаСловКаталога.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаСловСопоставления
	|ИЗ
	|	ТаблицаСловКаталога КАК ТаблицаСловКаталога
	|		ЛЕВОЕ СОЕДИНЕНИЕ СопоставленныеИдентификаторы КАК СопоставленныеИдентификаторы
	|		ПО ТаблицаСловКаталога.Идентификатор = СопоставленныеИдентификаторы.ИдентификаторНоменклатуры
	|ГДЕ
	|	СопоставленныеИдентификаторы.ИдентификаторНоменклатуры ЕСТЬ NULL
	|	И ТаблицаСловКаталога.Позиция > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХешСлова,
	|	Позиция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СопоставленныеИдентификаторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСловКаталога";

КонецПроцедуры

#КонецОбласти

#Область ПоискНашейНоменклатуры

Процедура ПоискВариантовСопоставленияНоменклатурыСНашейНоменклатурой(Знач Запрос, ТаблицаНоменклатурыКонтрагентов, ТаблицаНатуральныхКлючей)
	
	ЕстьТаблицаСопоставленныхПоНаименованию = Ложь;

	НайденнаяТаблица = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ТаблицаСопоставленныхПоНаименованию");
	Если НайденнаяТаблица <> Неопределено Тогда
		ЕстьТаблицаСопоставленныхПоНаименованию = Истина;
	КонецЕсли;

	Если Не ЕстьТаблицаСопоставленныхПоНаименованию Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаВариантовСопоставленияНашейНоменклатуры(Запрос.Текст);
	
	ВыборкаВариантов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторНоменклатуры", ВыборкаВариантов.ИдентификаторНоменклатуры);
		ПараметрыОтбора.Вставить("НоменклатураИБ", ПустаяСсылкаНоменклатурыБЭД());
		СтрокиНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
		
		ПриоритетныйВариант = Ложь;
		Если ВыборкаВариантов.КоличествоНоменклатуры = 1 Тогда
			ПриоритетныйВариант = Истина;
		КонецЕсли;
		
		Для Каждого НоменклатураКонтрагентов Из СтрокиНоменклатурыКонтрагентов Цикл
			
			Если ПриоритетныйВариант Тогда
				НоменклатураКонтрагентов.НоменклатураИБ = ВыборкаВариантов.Номенклатура;
			КонецЕсли;
			
			ВариантСопоставления = НовыйВариантСопоставленияНоменклатурыБЭД();
			ВариантСопоставления.НоменклатураИБ      = ВыборкаВариантов.Номенклатура;
			ВариантСопоставления.ШтрихкодСопоставлен = ВыборкаВариантов.ШтрихкодСопоставлен;
			ВариантСопоставления.АртикулСопоставлен  = ВыборкаВариантов.АртикулСопоставлен;
			ВариантСопоставления.ПриоритетныйВариант = ПриоритетныйВариант;
			ЗаполнитьВариантСопоставленияНоменклатуры(ВариантСопоставления,
				НоменклатураКонтрагентов.ВариантыСопоставленияНоменклатурыБЭД, ВариантСопоставления.НоменклатураИБ);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ТекстЗапросаВариантовСопоставленияНашейНоменклатуры(ТекстЗапроса)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.АртикулСопоставлен, ЛОЖЬ) КАК АртикулСопоставлен,
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоШтрихкодам.ШтрихкодСопоставлен, ЛОЖЬ) КАК ШтрихкодСопоставлен,
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры, ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры) КАК ИдентификаторНоменклатуры,
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.Номенклатура, ТаблицаСопоставленныхПоШтрихкодам.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаНашейНоменклатуры
	|ИЗ
	|	ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСопоставленныхПоАртикулам КАК ТаблицаСопоставленныхПоАртикулам
	|		ПО ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры = ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры
	|			И ТаблицаСопоставленныхПоШтрихкодам.Номенклатура = ТаблицаСопоставленныхПоАртикулам.Номенклатура
	|ГДЕ
	|	ТаблицаСопоставленныхПоШтрихкодам.ЭтоНашаНоменклатура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.АртикулСопоставлен, ЛОЖЬ),
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоШтрихкодам.ШтрихкодСопоставлен, ЛОЖЬ),
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры, ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры),
	|	ЕСТЬNULL(ТаблицаСопоставленныхПоАртикулам.Номенклатура, ТаблицаСопоставленныхПоШтрихкодам.Номенклатура)
	|ИЗ
	|	ТаблицаСопоставленныхПоАртикулам КАК ТаблицаСопоставленныхПоАртикулам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСопоставленныхПоШтрихкодам КАК ТаблицаСопоставленныхПоШтрихкодам
	|		ПО ТаблицаСопоставленныхПоАртикулам.ИдентификаторНоменклатуры = ТаблицаСопоставленныхПоШтрихкодам.ИдентификаторНоменклатуры
	|			И ТаблицаСопоставленныхПоАртикулам.Номенклатура = ТаблицаСопоставленныхПоШтрихкодам.Номенклатура
	|ГДЕ
	|	ТаблицаСопоставленныхПоАртикулам.ЭтоНашаНоменклатура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ТаблицаСопоставленныхПоНаименованию.ИдентификаторНоменклатуры,
	|	ТаблицаСопоставленныхПоНаименованию.Номенклатура
	|ИЗ
	|	ТаблицаСопоставленныхПоНаименованию КАК ТаблицаСопоставленныхПоНаименованию
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНашейНоменклатуры.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаНашейНоменклатуры.Номенклатура) КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ГруппировкаНайденныхВариантов
	|ИЗ
	|	ТаблицаНашейНоменклатуры КАК ТаблицаНашейНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНашейНоменклатуры.ИдентификаторНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппировкаНайденныхВариантов.КоличествоНоменклатуры КАК КоличествоНоменклатуры,
	|	ТаблицаНашейНоменклатуры.АртикулСопоставлен КАК АртикулСопоставлен,
	|	ТаблицаНашейНоменклатуры.ШтрихкодСопоставлен КАК ШтрихкодСопоставлен,
	|	ТаблицаНашейНоменклатуры.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ТаблицаНашейНоменклатуры.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаНашейНоменклатуры КАК ТаблицаНашейНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппировкаНайденныхВариантов КАК ГруппировкаНайденныхВариантов
	|		ПО ТаблицаНашейНоменклатуры.ИдентификаторНоменклатуры = ГруппировкаНайденныхВариантов.ИдентификаторНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНашейНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГруппировкаНайденныхВариантов";

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПоискХарактеристикиПоНатуральнымКлючам

Процедура ПодобратьВариантыСопоставленияХарактеристикиНоменклатуры(ТаблицаНоменклатурыКонтрагентов, Знач ПроцентТочностиПоискаНаименований)
	
	ПоискВариантовСопоставленияХарактеристикиНашейНоменклатуры(ТаблицаНоменклатурыКонтрагентов);
		
	ПоискВариантовСопоставленияХарактеристикиНоменклатурыКонтрагента(ТаблицаНоменклатурыКонтрагентов, ПроцентТочностиПоискаНаименований);
		
КонецПроцедуры

Процедура ТекстЗапросаТаблицыХарактеристикиНоменклатуры(ТекстЗапроса)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатурыКонтрагентов.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	ТаблицаНоменклатурыКонтрагентов.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатурыКонтрагентов.НоменклатураИБ КАК НоменклатураИБ
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|ГДЕ
	|	ТаблицаНоменклатурыКонтрагентов.НоменклатураИБ <> &ПустаяНоменклатура
	|	И ТаблицаНоменклатурыКонтрагентов.ХарактеристикаИБ = &ПустаяХарактеристика
	|	И ТаблицаНоменклатурыКонтрагентов.Характеристика <> """"
	|	И ТаблицаНоменклатурыКонтрагентов.ИспользоватьХарактеристики
	|	И ТаблицаНоменклатурыКонтрагентов.ВариантУказанияНоменклатуры = &ВариантУказанияНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторХарактеристики,
	|	НоменклатураИБ";
	
КонецПроцедуры

#Область ПоискНоменклатурыКонтрагента

Процедура ПоискВариантовСопоставленияХарактеристикиНоменклатурыКонтрагента(ТаблицаНоменклатурыКонтрагентов, Знач ПроцентТочностиПоискаНаименований)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ТаблицаНоменклатурыКонтрагентов);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяСсылкаХарактеристикиБЭД());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ПустаяСсылкаНоменклатурыБЭД());
	Запрос.УстановитьПараметр("ВариантУказанияНоменклатуры", СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента());
	
	ТекстЗапросаТаблицыХарактеристикиНоменклатуры(Запрос.Текст);
	Запрос.Выполнить();

	ТаблицаНаименованийПоСловам = НоваяТаблицаНаименованийПоСловам();
	НаборИдентификаторов        = Новый Массив;

	ЗаполнитьТаблицуСловПоХарактеристикамНоменклатуры(Запрос, ТаблицаНаименованийПоСловам, НаборИдентификаторов);
	
	КоличествоИдентификаторов = НаборИдентификаторов.Количество();
	
	Если КоличествоИдентификаторов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаНаименованийПоСловам", ТаблицаНаименованийПоСловам);
	Запрос.УстановитьПараметр("ПроцентТочностиПоиска"      , ПроцентТочностиПоискаНаименований);
	Запрос.УстановитьПараметр("ТипОбъектаСопоставления"    , Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Характеристика);
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("ИдентификаторХарактеристики,НоменклатураИБ,ХарактеристикаИБ");
	
	ТекстЗапросаПоискаВариантовСопоставленияХарактеристики(Запрос.Текст);

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.СопоставлениеНоменклатурыКонтрагентовСлужебный.ПодобратьВариантыСопоставленияХарактеристикиНоменклатуры");
	
	Запрос.Выполнить();
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, КоличествоИдентификаторов, "ЗапросПоОтборуХарактеристикИПолномуСовпадению");
		
	ИнициализацияТекстаЗапросаПоискаВариантовСопоставленияХарактеристики(Запрос.Текст);
	
	КоличествоПовторяющихсяДанных = 0;
	Для Каждого Идентификатор Из НаборИдентификаторов Цикл
		
		Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторХарактеристики", Идентификатор);
		ПараметрыОтбора.Вставить("ХарактеристикаИБ"           , ПустаяСсылкаХарактеристикиБЭД());

		ВыборкаВариантов = Результат.Выбрать();
		Пока ВыборкаВариантов.Следующий() Цикл
			ПараметрыОтбора.Вставить("НоменклатураИБ", ВыборкаВариантов.НоменклатураИБ);
			СтрокиНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);

			Для Каждого НоменклатураКонтрагентов Из СтрокиНоменклатурыКонтрагентов Цикл
							
				КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
				
				Если ЗначениеЗаполнено(ВыборкаВариантов.ХарактеристикаИБ) Тогда
					Если НоменклатураКонтрагентов.ВариантыСопоставленияХарактеристикиБЭД.Найти(ВыборкаВариантов.ХарактеристикаИБ) = Неопределено Тогда
						НоменклатураКонтрагентов.ВариантыСопоставленияХарактеристикиБЭД.Добавить(ВыборкаВариантов.ХарактеристикаИБ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоПовторяющихсяДанных);

КонецПроцедуры

Процедура ЗаполнитьТаблицуСловПоХарактеристикамНоменклатуры(Запрос, ТаблицаНаименованийПоСловам, НаборИдентификаторов)
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	
	Выборка = Запрос.Выполнить().Выбрать();

	ТаблицаСлов = НоваяТаблицаСлов();
	
	Пока Выборка.Следующий() Цикл
		
		РазобратьНаименованиеДанныхСопоставленияНоменклатурыНаОтдельныеСлова(
			Выборка.Характеристика, ТаблицаСлов, Выборка.ИдентификаторХарактеристики);
		
	КонецЦикла;

	ТипОбъекта = Перечисления.ТипОбъектаСопоставленияНоменклатурыБЭД.Характеристика;
	
	ЗаполнитьТаблицуНаименованийПоСловам(ТаблицаСлов, ТаблицаНаименованийПоСловам, НаборИдентификаторов, ТипОбъекта);

КонецПроцедуры

Процедура ТекстЗапросаПоискаВариантовСопоставленияХарактеристики(ТекстЗапроса)

	ПакетЗапросов = Новый Массив;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаСловКаталога.ХешСлова КАК ХешСлова,
	               |	ТаблицаСловКаталога.Позиция КАК Позиция,
	               |	ТаблицаСловКаталога.ВсегоСлов КАК ВсегоСлов,
	               |	ТаблицаСловКаталога.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ ТаблицаСловКаталога
	               |ИЗ
	               |	&ТаблицаНаименованийПоСловам КАК ТаблицаСловКаталога
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
	               |	ТаблицаСловКаталога.Идентификатор КАК Идентификатор,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА СловарьСопоставленияНоменклатурыБЭД.Позиция = 0
	               |				ТОГДА 100
	               |			ИНАЧЕ 99
	               |		КОНЕЦ) КАК ПроцентТочности
	               |ПОМЕСТИТЬ ВариантыСопоставленияПоСловарю
	               |ИЗ
	               |	ТаблицаСловКаталога КАК ТаблицаСловКаталога
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	               |		ПО ТаблицаСловКаталога.ХешСлова = СловарьСопоставленияНоменклатурыБЭД.ХешСлова
	               |			И (СловарьСопоставленияНоменклатурыБЭД.Позиция < 1)
	               |			И (СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъектаСопоставления)
	               |			И (ТаблицаСловКаталога.Позиция < 1)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект,
	               |	ТаблицаСловКаталога.Идентификатор
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Идентификатор,
	               |	СсылкаНаОбъект";
	
	ПакетЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапросаОтбораПоВладельцу = "";
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу(ТекстЗапросаОтбораПоВладельцу);
	ПакетЗапросов.Добавить(ТекстЗапросаОтбораПоВладельцу);

	ТекстЗапроса = "ВЫБРАТЬ
	               |	ТаблицаСловКаталога.ХешСлова КАК ХешСлова,
	               |	ТаблицаСловКаталога.Позиция КАК Позиция,
	               |	ТаблицаСловКаталога.ВсегоСлов КАК ВсегоСлов,
	               |	ТаблицаСловКаталога.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ ТаблицаСловСопоставления
	               |ИЗ
	               |	ТаблицаСловКаталога КАК ТаблицаСловКаталога
	               |ГДЕ
	               |	ТаблицаСловКаталога.Позиция > 0
	               |	И НЕ ИСТИНА В
	               |				(ВЫБРАТЬ ПЕРВЫЕ 1
	               |					ИСТИНА
	               |				ИЗ
	               |					ХарактеристикиПоВладельцу КАК ХарактеристикиПоВладельцу
	               |				ГДЕ
	               |					ХарактеристикиПоВладельцу.Идентификатор = ТаблицаСловКаталога.Идентификатор)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ХешСлова,
	               |	Позиция
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ТаблицаСловКаталога
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ХарактеристикиПоВладельцу.СсылкаНаОбъект КАК СсылкаНаОбъект,
	               |	ХарактеристикиПоВладельцу.Идентификатор КАК Идентификатор,
	               |	ХарактеристикиПоВладельцу.НоменклатураИБ КАК НоменклатураИБ,
	               |	ВариантыСопоставленияПоСловарю.ПроцентТочности КАК ПроцентТочности
	               |ПОМЕСТИТЬ СопоставленныеИдентификаторы
	               |ИЗ
	               |	ХарактеристикиПоВладельцу КАК ХарактеристикиПоВладельцу
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВариантыСопоставленияПоСловарю КАК ВариантыСопоставленияПоСловарю
	               |		ПО ХарактеристикиПоВладельцу.Идентификатор = ВариантыСопоставленияПоСловарю.Идентификатор
	               |			И ХарактеристикиПоВладельцу.СсылкаНаОбъект = ВариантыСопоставленияПоСловарю.СсылкаНаОбъект
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ХарактеристикиПоВладельцу
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВариантыСопоставленияПоСловарю";

	ПакетЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(ПакетЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецПроцедуры

Процедура ИнициализацияТекстаЗапросаПоискаВариантовСопоставленияХарактеристики(ТекстЗапроса)
	
	ПакетЗапросов = Новый Массив;
	
	ТекстЗапросаПоискаНоменклатуры = ТекстЗапросаПоискаВариантовСопоставленияВСловареПоНаименованию();
	
	ТекстЗапросаПоискаНоменклатуры = СтрЗаменить(ТекстЗапросаПоискаНоменклатуры,
		"ПОМЕСТИТЬ ГруппировкаРасчетаПоследовательныхСлов", "ПОМЕСТИТЬ ВариантыСопоставленияПоСловарю");
	ПакетЗапросов.Добавить(ТекстЗапросаПоискаНоменклатуры);
	
	ТекстЗапросаОтбораПоВладельцу = "";
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаОтбораХарактеристикНоменклатурыБЭДПоВладельцу(ТекстЗапросаОтбораПоВладельцу);
	ПакетЗапросов.Добавить(ТекстЗапросаОтбораПоВладельцу);

	СводныйТекстЗапросаПоискаХарактеристик = 
	"ВЫБРАТЬ
	|	ВариантыСопоставленияПоСловарю.Идентификатор КАК ИдентификаторХарактеристики,
	|	ВариантыСопоставленияПоСловарю.СсылкаНаОбъект КАК ХарактеристикаИБ,
	|	ХарактеристикиПоВладельцу.НоменклатураИБ КАК НоменклатураИБ,
	|	ВЫРАЗИТЬ(ВариантыСопоставленияПоСловарю.Коэффициент / ВариантыСопоставленияПоСловарю.ВсегоСлов * 100 КАК ЧИСЛО(3, 0)) КАК ПроцентПоследовательныхСлов,
	|	ВариантыСопоставленияПоСловарю.ПроцентТочности КАК ПроцентТочности
	|ПОМЕСТИТЬ ВариантыСопоставления
	|ИЗ
	|	ВариантыСопоставленияПоСловарю КАК ВариантыСопоставленияПоСловарю
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ХарактеристикиПоВладельцу КАК ХарактеристикиПоВладельцу
	|		ПО ВариантыСопоставленияПоСловарю.Идентификатор = ХарактеристикиПоВладельцу.Идентификатор
	|			И ВариантыСопоставленияПоСловарю.СсылкаНаОбъект = ХарактеристикиПоВладельцу.СсылкаНаОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СопоставленныеИдентификаторы.Идентификатор,
	|	СопоставленныеИдентификаторы.СсылкаНаОбъект,
	|	СопоставленныеИдентификаторы.НоменклатураИБ,
	|	100,
	|	СопоставленныеИдентификаторы.ПроцентТочности
	|ИЗ
	|	СопоставленныеИдентификаторы КАК СопоставленныеИдентификаторы
	|ГДЕ
	|	СопоставленныеИдентификаторы.Идентификатор = &Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВариантыСопоставленияПоСловарю
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ХарактеристикиПоВладельцу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	ВариантыСопоставления.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
	|	ВариантыСопоставления.ХарактеристикаИБ КАК ХарактеристикаИБ,
	|	ВариантыСопоставления.НоменклатураИБ КАК НоменклатураИБ,
	|	ВариантыСопоставления.ПроцентПоследовательныхСлов КАК ПроцентПоследовательныхСлов,
	|	ВариантыСопоставления.ПроцентТочности КАК ПроцентТочности
	|ИЗ
	|	ВариантыСопоставления КАК ВариантыСопоставления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроцентТочности УБЫВ,
	|	ПроцентПоследовательныхСлов УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВариантыСопоставления";
	
	ПакетЗапросов.Добавить(СводныйТекстЗапросаПоискаХарактеристик);
	
	ТекстЗапроса = СтрСоединить(ПакетЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоИсключениюНоменклатуры", "ИСТИНА");

КонецПроцедуры

#КонецОбласти

#Область ПоискНашейНоменклатуры

Процедура ПоискВариантовСопоставленияХарактеристикиНашейНоменклатуры(ТаблицаНоменклатурыКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ТаблицаНоменклатурыКонтрагентов);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяСсылкаХарактеристикиБЭД());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ПустаяСсылкаНоменклатурыБЭД());
	Запрос.УстановитьПараметр("ВариантУказанияНоменклатуры", СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации());
	
	ТекстЗапросаТаблицыХарактеристикиНоменклатуры(Запрос.Текст);

	ТекстЗапросаПоиска = "";
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияХарактеристикиСНашейНоменклатурой(ТекстЗапросаПоиска);
	
	Если ПустаяСтрока(ТекстЗапросаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаПоиска;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаВариантов = Результат.Выбрать();
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("ИдентификаторХарактеристики,НоменклатураИБ,ХарактеристикаИБ");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ХарактеристикаИБ", ПустаяСсылкаХарактеристикиБЭД());
	
	Пока ВыборкаВариантов.Следующий() Цикл
		
		ПараметрыОтбора.Вставить("ИдентификаторХарактеристики", ВыборкаВариантов.ИдентификаторХарактеристики);
		ПараметрыОтбора.Вставить("НоменклатураИБ"             , ВыборкаВариантов.НоменклатураИБ);
		СтрокиНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НоменклатураКонтрагентов Из СтрокиНоменклатурыКонтрагентов Цикл
			Если НоменклатураКонтрагентов.ВариантыСопоставленияХарактеристикиБЭД.Найти(ВыборкаВариантов.ХарактеристикаИБ) = Неопределено Тогда
				НоменклатураКонтрагентов.ВариантыСопоставленияХарактеристикиБЭД.Добавить(ВыборкаВариантов.ХарактеристикаИБ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ПоискУпаковкиЕдиницыИзмерения

Процедура ПодобратьВариантыСопоставленияУпаковкиНоменклатуры(ТаблицаНоменклатурыКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ТаблицаНоменклатурыКонтрагентов);
	Запрос.УстановитьПараметр("ПустаяУпаковка", ПустаяСсылкаУпаковкиНоменклатурыБЭД());
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ПустаяСсылкаНоменклатурыБЭД());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатурыКонтрагентов.НоменклатураИБ КАК НоменклатураИБ,
	|	ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаНоменклатурыКонтрагентов.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	ТаблицаНоменклатурыКонтрагентов.ИспользоватьУпаковки КАК ИспользоватьУпаковки,
	|	ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковки = ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмерения
	|				И (ТаблицаНоменклатурыКонтрагентов.КоличествоУпаковок = 1
	|						И ТаблицаНоменклатурыКонтрагентов.КоличествоБазовойЕдиницыИзмерения = 1
	|					ИЛИ ТаблицаНоменклатурыКонтрагентов.КоличествоУпаковок = 0
	|						И ТаблицаНоменклатурыКонтрагентов.КоличествоБазовойЕдиницыИзмерения = 0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УпаковкаЗадана,
	|	ТаблицаНоменклатурыКонтрагентов.КоличествоБазовойЕдиницыИзмерения КАК КоличествоБазовойЕдиницыИзмерения,
	|	ТаблицаНоменклатурыКонтрагентов.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|ГДЕ
	|	ТаблицаНоменклатурыКонтрагентов.УпаковкаИБ = &ПустаяУпаковка
	|	И ТаблицаНоменклатурыКонтрагентов.ИдентификаторУпаковки <> """"
	|	И ТаблицаНоменклатурыКонтрагентов.НоменклатураИБ <> &ПустаяНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЕдиницаИзмерения,
	|	ЕдиницаИзмеренияКод,
	|	НоменклатураИБ";
	
	Запрос.Выполнить();
	
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ТекстЗапросаПоискаВариантовСопоставленияУпаковкиНоменклатурыБЭД(Запрос.Текст);
	
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат;
	КонецЕсли;

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.СопоставлениеНоменклатурыКонтрагентовСлужебный.ПодобратьВариантыСопоставленияУпаковкиНоменклатуры");
	
	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 0);
		Возврат;
	КонецЕсли;
		
	Выборка = Результат.Выбрать();
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, Выборка.Количество()/100, "ЗапросПоУпаковкам");
	
	КоличествоПовторяющихсяДанных = 0;
	
	ТаблицаНоменклатурыКонтрагентов.Индексы.Добавить("ИдентификаторУпаковки,НоменклатураИБ");
	
	Пока Выборка.Следующий() Цикл
		
		УпаковкаИБ = Выборка.УпаковкаИБ;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторУпаковки", Выборка.ИдентификаторУпаковки);
		ПараметрыОтбора.Вставить("НоменклатураИБ"       , Выборка.НоменклатураИБ);
		СтрокиНоменклатурыКонтрагентов = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрокаНоменклатурыКонтрагента Из СтрокиНоменклатурыКонтрагентов Цикл
			
			КоличествоПовторяющихсяДанных = КоличествоПовторяющихсяДанных + 1;
			
			Если СтрокаНоменклатурыКонтрагента.ВариантыСопоставленияУпаковкиБЭД.Количество() > 9 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаНоменклатурыКонтрагента.ВариантыСопоставленияУпаковкиБЭД.Добавить(УпаковкаИБ);

		КонецЦикла;
		
	КонецЦикла;

	ТаблицаНоменклатурыКонтрагентов.Индексы.Очистить();
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоПовторяющихсяДанных/100);
	
КонецПроцедуры

#КонецОбласти 

#Область ПоискВСловареСопоставленияНоменклатуры

Процедура ЗаполнитьТаблицуНаименованийПоСловам(ТаблицаСлов, ТаблицаНаименованийПоСловам, НаборИдентификаторов, ТипОбъекта)
	
	Если НЕ ТаблицаСлов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ИсключитьИзТаблицыСловНезначимые(ТаблицаСлов, ТипОбъекта);
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВыборкаНаименований = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНаименований.Следующий() Цикл
		
		Идентификатор = ВыборкаНаименований.ПолеГруппировкиСсылкаИлиИдентификатор;
		ВсегоСлов     = ВыборкаНаименований.Слово - 1;
		
		НаборСловНаименований = Новый СписокЗначений;
		
		Индекс = 1;
		ВыборкаСлов = ВыборкаНаименований.Выбрать();
		Пока ВыборкаСлов.Следующий() Цикл
			
			Если ВыборкаСлов.ЭтоНаименование Тогда
				НоваяЗапись = ТаблицаНаименованийПоСловам.Добавить();
				НоваяЗапись.ХешСлова      = ВыборкаСлов.ХешНаименования;
				НоваяЗапись.Идентификатор = Идентификатор;
				НоваяЗапись.Позиция       = 0;
				НоваяЗапись.ВсегоСлов     = ВсегоСлов;
				НаборИдентификаторов.Добавить(Идентификатор);
			Иначе
				НоваяЗапись = ТаблицаНаименованийПоСловам.Добавить();
				НоваяЗапись.ХешСлова      = Хеш_MD5_64(ВыборкаСлов.Слово);
				НоваяЗапись.Позиция       = Индекс;
				НоваяЗапись.ВсегоСлов     = ВсегоСлов;
				НоваяЗапись.Идентификатор = Идентификатор;
				
				НаборСловНаименований.Добавить(ВыборкаСлов.Слово);
				
				Индекс = Индекс + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		НаборСловНаименований.СортироватьПоЗначению();
		СортированныйНаборСлов = НаборСловНаименований.ВыгрузитьЗначения();
		
		НоваяЗапись = ТаблицаНаименованийПоСловам.Добавить();
		НоваяЗапись.ХешСлова      = Хеш_MD5_64(СтрСоединить(СортированныйНаборСлов, " "));
		НоваяЗапись.Идентификатор = Идентификатор;
		НоваяЗапись.Позиция       = -1;
		НоваяЗапись.ВсегоСлов     = ВсегоСлов;

	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаПоискаВариантовСопоставленияВСловареПоНаименованию()
	
	Возврат "ВЫБРАТЬ
	        |	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект КАК СсылкаНаОбъект,
	        |	КОЛИЧЕСТВО(ТаблицаСловСопоставления.ХешСлова) КАК КоличествоСлов,
	        |	ВЫБОР
	        |		КОГДА СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов > ТаблицаСловСопоставления.ВсегоСлов
	        |			ТОГДА СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов
	        |		ИНАЧЕ ТаблицаСловСопоставления.ВсегоСлов
	        |	КОНЕЦ КАК ВсегоСлов,
	        |	ТаблицаСловСопоставления.Идентификатор КАК Идентификатор
	        |ПОМЕСТИТЬ ГруппировкаНайденныхВариантов
	        |ИЗ
	        |	ТаблицаСловСопоставления КАК ТаблицаСловСопоставления
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	        |		ПО ТаблицаСловСопоставления.ХешСлова = СловарьСопоставленияНоменклатурыБЭД.ХешСлова
	        |			И (СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта = &ТипОбъектаСопоставления)
	        |			И (СловарьСопоставленияНоменклатурыБЭД.Позиция > 0)
	        |			И (ТаблицаСловСопоставления.Идентификатор = &Идентификатор)
	        |			И (&УсловиеПоИсключениюНоменклатуры)
	        |			И (ИСТИНА В
	        |				(ВЫБРАТЬ ПЕРВЫЕ 1
	        |					ИСТИНА
	        |				ИЗ
	        |					РегистрСведений.СтатистикаСловСловаряСопоставленияНоменклатурыБЭД КАК СтатистикаСловСловаряСопоставленияНоменклатурыБЭД
	        |				ГДЕ
	        |					СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ТипОбъекта = СловарьСопоставленияНоменклатурыБЭД.ТипОбъекта
	        |					И СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.ХешСлова = СловарьСопоставленияНоменклатурыБЭД.ХешСлова
	        |					И СтатистикаСловСловаряСопоставленияНоменклатурыБЭД.Количество < 100001))
	        |ГДЕ
	        |	(ВЫРАЗИТЬ(ВЫБОР
	        |				КОГДА СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов > ТаблицаСловСопоставления.ВсегоСлов
	        |					ТОГДА ТаблицаСловСопоставления.ВсегоСлов / СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов
	        |				ИНАЧЕ СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов / ТаблицаСловСопоставления.ВсегоСлов
	        |			КОНЕЦ * 100 КАК ЧИСЛО(3, 0))) >= &ПроцентТочностиПоиска
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект,
	        |	ВЫБОР
	        |		КОГДА СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов > ТаблицаСловСопоставления.ВсегоСлов
	        |			ТОГДА СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов
	        |		ИНАЧЕ ТаблицаСловСопоставления.ВсегоСлов
	        |	КОНЕЦ,
	        |	ТаблицаСловСопоставления.Идентификатор
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ ПЕРВЫЕ 100
	        |	ГруппировкаНайденныхВариантов.СсылкаНаОбъект КАК СсылкаНаОбъект,
	        |	ГруппировкаНайденныхВариантов.Идентификатор КАК Идентификатор,
	        |	ВЫРАЗИТЬ(ГруппировкаНайденныхВариантов.КоличествоСлов / ГруппировкаНайденныхВариантов.ВсегоСлов * 100 КАК ЧИСЛО(3, 0)) КАК ПроцентТочности,
	        |	ГруппировкаНайденныхВариантов.ВсегоСлов КАК ВсегоСлов
	        |ПОМЕСТИТЬ ОтобранныеВарианты
	        |ИЗ
	        |	ГруппировкаНайденныхВариантов КАК ГруппировкаНайденныхВариантов
			|ГДЕ
			|	(ВЫРАЗИТЬ(ГруппировкаНайденныхВариантов.КоличествоСлов / ГруппировкаНайденныхВариантов.ВсегоСлов * 100 КАК ЧИСЛО(3, 0))) >= &ПроцентТочностиПоиска
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ПроцентТочности УБЫВ
			|
	        |ИНДЕКСИРОВАТЬ ПО
	        |	СсылкаНаОбъект
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |УНИЧТОЖИТЬ ГруппировкаНайденныхВариантов
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ОтобранныеВарианты.СсылкаНаОбъект КАК СсылкаНаОбъект,
	        |	ОтобранныеВарианты.Идентификатор КАК Идентификатор,
	        |	ОтобранныеВарианты.ПроцентТочности КАК ПроцентТочности,
	        |	ОтобранныеВарианты.ВсегоСлов КАК ВсегоСлов,
	        |	ВЫБОР
	        |		КОГДА ОтобранныеВарианты.ВсегоСлов = СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов
	        |			ТОГДА СловарьСопоставленияНоменклатурыБЭД.Позиция
	        |		ИНАЧЕ ТаблицаСловСопоставления.Позиция
	        |	КОНЕЦ КАК Позиция,
	        |	МАКСИМУМ(ВЫБОР
	        |			КОГДА ТаблицаСловСопоставления.ХешСлова = СловарьСопоставленияНоменклатурыБЭД.ХешСлова
	        |				ТОГДА ВЫБОР
	        |						КОГДА ТаблицаСловСопоставления.Позиция - СловарьСопоставленияНоменклатурыБЭД.Позиция < 0
	        |							ТОГДА (ТаблицаСловСопоставления.Позиция - СловарьСопоставленияНоменклатурыБЭД.Позиция) * -1
	        |						ИНАЧЕ ТаблицаСловСопоставления.Позиция - СловарьСопоставленияНоменклатурыБЭД.Позиция
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК РазностьОтклоненияПозиций,
	        |	МАКСИМУМ(ВЫБОР
	        |			КОГДА ТаблицаСловСопоставления.ХешСлова = СловарьСопоставленияНоменклатурыБЭД.ХешСлова
	        |				ТОГДА ВЫБОР
	        |						КОГДА СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов < ТаблицаСловСопоставления.ВсегоСлов
	        |							ТОГДА ТаблицаСловСопоставления.Позиция
	        |						ИНАЧЕ СловарьСопоставленияНоменклатурыБЭД.Позиция
	        |					КОНЕЦ
	        |			ИНАЧЕ 0
	        |		КОНЕЦ) КАК ПозицияРасчетаОтклонения
	        |ПОМЕСТИТЬ СопоставлениеПоПозиции
	        |ИЗ
	        |	ОтобранныеВарианты КАК ОтобранныеВарианты
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСловСопоставления КАК ТаблицаСловСопоставления
	        |		ПО ОтобранныеВарианты.Идентификатор = ТаблицаСловСопоставления.Идентификатор
	        |			И (ТаблицаСловСопоставления.Позиция > 0)
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СловарьСопоставленияНоменклатурыБЭД КАК СловарьСопоставленияНоменклатурыБЭД
	        |		ПО ОтобранныеВарианты.СсылкаНаОбъект = СловарьСопоставленияНоменклатурыБЭД.СсылкаНаОбъект
	        |			И (СловарьСопоставленияНоменклатурыБЭД.Позиция > 0)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ОтобранныеВарианты.СсылкаНаОбъект,
	        |	ОтобранныеВарианты.Идентификатор,
	        |	ОтобранныеВарианты.ПроцентТочности,
	        |	ОтобранныеВарианты.ВсегоСлов,
	        |	ВЫБОР
	        |		КОГДА ОтобранныеВарианты.ВсегоСлов = СловарьСопоставленияНоменклатурыБЭД.ВсегоСлов
	        |			ТОГДА СловарьСопоставленияНоменклатурыБЭД.Позиция
	        |		ИНАЧЕ ТаблицаСловСопоставления.Позиция
	        |	КОНЕЦ
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	СУММА(ВЫБОР
	        |			КОГДА СопоставлениеПоПозицииНачало.ПозицияРасчетаОтклонения = 0
	        |				ТОГДА 0
	        |			ИНАЧЕ ВЫБОР
	        |					КОГДА СопоставлениеПоПозицииНачало.РазностьОтклоненияПозиций = 0
	        |						ТОГДА 1
	        |					ИНАЧЕ ВЫБОР
	        |							КОГДА СопоставлениеПоПозицииНачало.РазностьОтклоненияПозиций - СопоставлениеПоПозицииНачалоКонец.РазностьОтклоненияПозиций = 0
	        |								ТОГДА 1
	        |							ИНАЧЕ 0
	        |						КОНЕЦ
	        |				КОНЕЦ
	        |		КОНЕЦ) КАК Коэффициент,
	        |	СопоставлениеПоПозицииНачало.Идентификатор КАК Идентификатор,
	        |	СопоставлениеПоПозицииНачало.СсылкаНаОбъект КАК СсылкаНаОбъект,
	        |	СопоставлениеПоПозицииНачало.ВсегоСлов КАК ВсегоСлов,
	        |	СопоставлениеПоПозицииНачало.ПроцентТочности КАК ПроцентТочности
	        |ПОМЕСТИТЬ ГруппировкаРасчетаПоследовательныхСлов
	        |ИЗ
	        |	СопоставлениеПоПозиции КАК СопоставлениеПоПозицииНачало
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СопоставлениеПоПозиции КАК СопоставлениеПоПозицииНачалоКонец
	        |		ПО СопоставлениеПоПозицииНачало.Идентификатор = СопоставлениеПоПозицииНачалоКонец.Идентификатор
	        |			И СопоставлениеПоПозицииНачало.СсылкаНаОбъект = СопоставлениеПоПозицииНачалоКонец.СсылкаНаОбъект
	        |			И (ВЫБОР
	        |				КОГДА СопоставлениеПоПозицииНачало.ВсегоСлов = СопоставлениеПоПозицииНачало.Позиция
	        |					ТОГДА СопоставлениеПоПозицииНачало.Позиция - 1 = СопоставлениеПоПозицииНачалоКонец.Позиция
	        |				ИНАЧЕ СопоставлениеПоПозицииНачало.Позиция + 1 = СопоставлениеПоПозицииНачалоКонец.Позиция
	        |			КОНЕЦ)
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	СопоставлениеПоПозицииНачало.Идентификатор,
	        |	СопоставлениеПоПозицииНачало.СсылкаНаОбъект,
	        |	СопоставлениеПоПозицииНачало.ВсегоСлов,
	        |	СопоставлениеПоПозицииНачало.ПроцентТочности
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |УНИЧТОЖИТЬ СопоставлениеПоПозиции
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |УНИЧТОЖИТЬ ОтобранныеВарианты";
	
КонецФункции

Функция ТекстЗапросаВыводаВариантовСопоставленияНоменклатуры()
	
	Возврат "ВЫБРАТЬ
	|	ВариантыСопоставления.Номенклатура КАК СсылкаНаОбъект,
	|	100 КАК ПроцентПоследовательныхСлов,
	|	100 КАК ПроцентТочности,
	|	ВариантыСопоставления.ИдентификаторНоменклатуры КАК ИдентификаторНоменклатуры,
	|	ВариантыСопоставления.АртикулСопоставлен КАК АртикулСопоставлен,
	|	ВариантыСопоставления.ШтрихкодСопоставлен КАК ШтрихкодСопоставлен,
	|	ВариантыСопоставления.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ВариантыСопоставленияНоменклатуры
	|ИЗ
	|	ВариантыСопоставления КАК ВариантыСопоставления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппировкаРасчетаПоследовательныхСлов.СсылкаНаОбъект,
	|	ВЫРАЗИТЬ(ГруппировкаРасчетаПоследовательныхСлов.Коэффициент / ГруппировкаРасчетаПоследовательныхСлов.ВсегоСлов * 100 КАК ЧИСЛО(3, 0)),
	|	ГруппировкаРасчетаПоследовательныхСлов.ПроцентТочности,
	|	ГруппировкаРасчетаПоследовательныхСлов.Идентификатор,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	5
	|ИЗ
	|	ГруппировкаРасчетаПоследовательныхСлов КАК ГруппировкаРасчетаПоследовательныхСлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГруппировкаРасчетаПоследовательныхСлов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВариантыСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 20
	|	ВариантыСопоставленияНоменклатуры.СсылкаНаОбъект КАК Номенклатура,
	|	ВариантыСопоставленияНоменклатуры.ИдентификаторНоменклатуры КАК Идентификатор,
	|	ВариантыСопоставленияНоменклатуры.АртикулСопоставлен КАК АртикулСопоставлен,
	|	ВариантыСопоставленияНоменклатуры.ШтрихкодСопоставлен КАК ШтрихкодСопоставлен
	|ИЗ
	|	ВариантыСопоставленияНоменклатуры КАК ВариантыСопоставленияНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантыСопоставленияНоменклатуры.Приоритет,
	|	ВариантыСопоставленияНоменклатуры.ПроцентТочности УБЫВ,
	|	ВариантыСопоставленияНоменклатуры.ПроцентПоследовательныхСлов УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВариантыСопоставленияНоменклатуры";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонтрольСопоставленияНоменклатурыВДокументах

Функция ПоискНашейНоменклатурыПоВнутреннимИдентификаторам(Знач НаборНоменклатурыКонтрагентов, ТаблицаСопоставленнойНоменклатуры = Неопределено)
	
	НоменклатураКонтрагентовНаСопоставление = Новый Массив;
	Для Каждого СтрокаНоменклатурыКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		НоменклатураИБ = НайтиНоменклатуруИБПоИдентификатору(СтрокаНоменклатурыКонтрагента.Идентификатор,
																СтрокаНоменклатурыКонтрагента.ИдентификаторНоменклатуры,
																СтрокаНоменклатурыКонтрагента.ИдентификаторХарактеристики,
																СтрокаНоменклатурыКонтрагента.ИдентификаторУпаковки);

		Если Не ЗначениеЗаполнено(НоменклатураИБ.Номенклатура)
			Или Не ЗначениеЗаполнено(НоменклатураИБ.Характеристика) И ЗначениеЗаполнено(СтрокаНоменклатурыКонтрагента.ИдентификаторХарактеристики)
			Или Не ЗначениеЗаполнено(НоменклатураИБ.Упаковка) И ЗначениеЗаполнено(СтрокаНоменклатурыКонтрагента.ИдентификаторУпаковки) Тогда
			НоменклатураКонтрагентовНаСопоставление.Добавить(СтрокаНоменклатурыКонтрагента);
		Иначе
			НоваяСтрока = ТаблицаСопоставленнойНоменклатуры.Добавить();
			НоваяСтрока.Владелец         = СтрокаНоменклатурыКонтрагента.Владелец;
			НоваяСтрока.Идентификатор    = СтрокаНоменклатурыКонтрагента.Идентификатор;
			НоваяСтрока.НоменклатураИБ   = НоменклатураИБ.Номенклатура;
			НоваяСтрока.ХарактеристикаИБ = НоменклатураИБ.Характеристика;
			НоваяСтрока.УпаковкаИБ       = НоменклатураИБ.Упаковка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоменклатураКонтрагентовНаСопоставление;
	
КонецФункции

// Выполняет проверку электронного документа на наличие не сопоставленной номенклатуры контрагента с номенклатурой информационной базы.
// Присланные изменения по номенклатуре контрагента перезаполняются без подтверждения пользователя.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов     - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента - номенклатура контрагентов.
//  ТаблицаСопоставленнойНоменклатуры - ТаблицаЗначений из см. НоваяТаблицаСопоставленнойНоменклатуры, Неопределено                  - таблица сопоставленной 
//                                                                                                                                     номенклатуры контрагента.
//
// Возвращаемое значение:
//  Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента - несопоставленная номенклатура контрагентов.
//
Функция КонтрольСопоставленияНоменклатурыКонтрагентовДляДокументов(Знач НаборНоменклатурыКонтрагентов,
	ТаблицаСопоставленнойНоменклатуры = Неопределено, Отказ = Ложь, ТекстОшибки = "")
	
	ТаблицаНоменклатурыКонтрагентов = ПреобразоватьНаборНоменклатурыКонтрагентовВТаблицу(НаборНоменклатурыКонтрагентов);
	
	РезультатЗапроса = РезультатПоискаИСравненияИзмененийНоменклатурыКонтрагентов(ТаблицаНоменклатурыКонтрагентов);
	
	Если РезультатЗапроса.Пустой() Тогда
		НоменклатураКонтрагентовНеНайдена = Истина;
	Иначе
		НоменклатураКонтрагентовНеНайдена = Ложь;
		Выборка = РезультатЗапроса.Выбрать();
	КонецЕсли;
	
	ДополнительныеПараметры = СопоставлениеНоменклатурыКонтрагентов.НовыеДополнительныеПараметрыПриЗаписиНоменклатурыКонтрагентов();
	ДополнительныеПараметры.ТребуетсяПоискЕдиницыИзмеренияПоОКЕИ = Ложь;
	ДополнительныеПараметры.ТребуетсяПоискСсылки                 = Ложь;
	
	НоменклатураНаСопоставление = Новый Массив;
	Для Каждого СтрокаНоменклатурыКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		Если НоменклатураКонтрагентовНеНайдена Тогда
			НоменклатураНаСопоставление.Добавить(СтрокаНоменклатурыКонтрагента);
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Владелец"     , СтрокаНоменклатурыКонтрагента.Владелец);
		ПараметрыПоиска.Вставить("Идентификатор", СтрокаНоменклатурыКонтрагента.Идентификатор);
		Если Выборка.НайтиСледующий(ПараметрыПоиска) Тогда
			
			Если Выборка.ТребуетсяПерезаполнение Тогда
				
				НоменклатураИБ = Неопределено;
				Если Не Выборка.ТребуетсяСопоставление Тогда
					НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы(
						Выборка.Номенклатура, Выборка.Характеристика, Выборка.Упаковка);
				КонецЕсли;
				
				СтрокаНоменклатурыКонтрагента.НоменклатураКонтрагента = Выборка.НоменклатураКонтрагента;
				СопоставлениеНоменклатурыКонтрагентов.СоздатьОбновитьНоменклатуруКонтрагента(
					СтрокаНоменклатурыКонтрагента, НоменклатураИБ, Отказ, ТекстОшибки, ДополнительныеПараметры);
			КонецЕсли;
			
			Если Выборка.ТребуетсяСопоставление Тогда
				СтрокаНоменклатурыКонтрагента.НоменклатураКонтрагента = Выборка.НоменклатураКонтрагента;
				НоменклатураНаСопоставление.Добавить(СтрокаНоменклатурыКонтрагента);
			ИначеЕсли ТаблицаСопоставленнойНоменклатуры <> Неопределено Тогда
				НоваяСтрока = ТаблицаСопоставленнойНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.НоменклатураИБ   = Выборка.Номенклатура;
				НоваяСтрока.ХарактеристикаИБ = Выборка.Характеристика;
				НоваяСтрока.УпаковкаИБ       = Выборка.Упаковка;
			КонецЕсли;
		Иначе
			НоменклатураНаСопоставление.Добавить(СтрокаНоменклатурыКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоменклатураНаСопоставление;
	
КонецФункции

Функция РезультатПоискаИСравненияИзмененийНоменклатурыКонтрагентов(ТаблицаНоменклатурыКонтрагентов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатурыКонтрагентов", ТаблицаНоменклатурыКонтрагентов);
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ПустаяСсылкаНоменклатурыБЭД());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатурыКонтрагентов.Владелец КАК Владелец,
	|	ТаблицаНоменклатурыКонтрагентов.Идентификатор КАК Идентификатор,
	|	ТаблицаНоменклатурыКонтрагентов.Артикул КАК Артикул,
	|	ТаблицаНоменклатурыКонтрагентов.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаНоменклатурыКонтрагентов.ШтрихкодКомбинации КАК Штрихкод,
	|	ВЫРАЗИТЬ(ТаблицаНоменклатурыКонтрагентов.ШтрихкодыНоменклатуры КАК СТРОКА(1000)) КАК ШтрихкодыНоменклатуры,
	|	ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод КАК ЕдиницаИзмеренияКод,
	|	ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ТаблицаНоменклатурыКонтрагентов.Наименование КАК НаименованиеНоменклатуры,
	|	ТаблицаНоменклатурыКонтрагентов.Характеристика КАК НаименованиеХарактеристики,
	|	ТаблицаНоменклатурыКонтрагентов.ИдентификаторНоменклатурыСервиса КАК ИдентификаторНоменклатурыСервиса,
	|	ТаблицаНоменклатурыКонтрагентов.ИдентификаторХарактеристикиСервиса КАК ИдентификаторХарактеристикиСервиса
	|ПОМЕСТИТЬ ТаблицаНоменклатурыКонтрагентов
	|ИЗ
	|	&ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыКонтрагентов.Артикул <> НоменклатураКонтрагентов.Артикул
	|		ИЛИ НоменклатураКонтрагентов.НаименованиеНоменклатуры <> ТаблицаНоменклатурыКонтрагентов.НаименованиеНоменклатуры
	|		ИЛИ
	|			НоменклатураКонтрагентов.НаименованиеХарактеристики <> ТаблицаНоменклатурыКонтрагентов.НаименованиеХарактеристики
	|		ИЛИ НоменклатураКонтрагентов.НаименованиеУпаковки <> ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковки
	|		ИЛИ НоменклатураКонтрагентов.СтавкаНДС <> ТаблицаНоменклатурыКонтрагентов.СтавкаНДС
	|		ИЛИ НоменклатураКонтрагентов.Штрихкод <> ТаблицаНоменклатурыКонтрагентов.Штрихкод
	|		ИЛИ (ВЫРАЗИТЬ(НоменклатураКонтрагентов.ДругиеШтрихкодыНоменклатурыСтрокой КАК
	|			СТРОКА(1000))) <> ТаблицаНоменклатурыКонтрагентов.ШтрихкодыНоменклатуры
	|		ИЛИ
	|			НоменклатураКонтрагентов.ИдентификаторНоменклатурыСервиса <> ТаблицаНоменклатурыКонтрагентов.ИдентификаторНоменклатурыСервиса
	|		ИЛИ
	|			НоменклатураКонтрагентов.ИдентификаторХарактеристикиСервиса <> ТаблицаНоменклатурыКонтрагентов.ИдентификаторХарактеристикиСервиса
	|		ИЛИ НоменклатураКонтрагентов.КодОКЕИБазовойЕдиницыИзмерения <> ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод
	|		ИЛИ НоменклатураКонтрагентов.НаименованиеБазовойЕдиницыИзмерения <> ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмерения
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПерезаполнение,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяСопоставление,
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентов.Характеристика КАК Характеристика,
	|	НоменклатураКонтрагентов.Упаковка КАК Упаковка,
	|	ТаблицаНоменклатурыКонтрагентов.Владелец КАК Владелец,
	|	ТаблицаНоменклатурыКонтрагентов.Идентификатор КАК Идентификатор
	|ИЗ
	|	ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ТаблицаНоменклатурыКонтрагентов.Владелец = НоменклатураКонтрагентов.ВладелецНоменклатуры
	|		И ТаблицаНоменклатурыКонтрагентов.Идентификатор = НоменклатураКонтрагентов.Идентификатор
	|ГДЕ
	|	НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И
	|	НЕ НоменклатураКонтрагентов.Недействителен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НоменклатураКонтрагентов.Ссылка КАК НоменклатураКонтрагента,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатурыКонтрагентов.Артикул <> НоменклатураКонтрагентов.Артикул
	|		ИЛИ НоменклатураКонтрагентов.НаименованиеНоменклатуры <> ТаблицаНоменклатурыКонтрагентов.НаименованиеНоменклатуры
	|		ИЛИ
	|			НоменклатураКонтрагентов.НаименованиеХарактеристики <> ТаблицаНоменклатурыКонтрагентов.НаименованиеХарактеристики
	|		ИЛИ НоменклатураКонтрагентов.НаименованиеУпаковки <> ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковки
	|		ИЛИ НоменклатураКонтрагентов.СтавкаНДС <> ТаблицаНоменклатурыКонтрагентов.СтавкаНДС
	|		ИЛИ НоменклатураКонтрагентов.Штрихкод <> ТаблицаНоменклатурыКонтрагентов.Штрихкод
	|		ИЛИ ВЫРАЗИТЬ(НоменклатураКонтрагентов.ДругиеШтрихкодыНоменклатурыСтрокой КАК
	|			СТРОКА(1000)) <> ТаблицаНоменклатурыКонтрагентов.ШтрихкодыНоменклатуры
	|		ИЛИ
	|			НоменклатураКонтрагентов.ИдентификаторНоменклатурыСервиса <> ТаблицаНоменклатурыКонтрагентов.ИдентификаторНоменклатурыСервиса
	|		ИЛИ
	|			НоменклатураКонтрагентов.ИдентификаторХарактеристикиСервиса <> ТаблицаНоменклатурыКонтрагентов.ИдентификаторХарактеристикиСервиса
	|		ИЛИ НоменклатураКонтрагентов.КодОКЕИБазовойЕдиницыИзмерения <> ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмеренияКод
	|		ИЛИ НоменклатураКонтрагентов.НаименованиеБазовойЕдиницыИзмерения <> ТаблицаНоменклатурыКонтрагентов.ЕдиницаИзмерения
	|		ИЛИ НоменклатураКонтрагентов.Идентификатор <> ТаблицаНоменклатурыКонтрагентов.Идентификатор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПерезаполнение,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяСопоставление,
	|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
	|	НоменклатураКонтрагентов.Характеристика КАК Характеристика,
	|	НоменклатураКонтрагентов.Упаковка КАК Упаковка,
	|	ТаблицаНоменклатурыКонтрагентов.Владелец КАК Владелец,
	|	ТаблицаНоменклатурыКонтрагентов.Идентификатор КАК Идентификатор
	|ИЗ
	|	ТаблицаНоменклатурыКонтрагентов КАК ТаблицаНоменклатурыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО ТаблицаНоменклатурыКонтрагентов.Владелец = НоменклатураКонтрагентов.ВладелецНоменклатуры
	|		И ТаблицаНоменклатурыКонтрагентов.НаименованиеНоменклатуры = НоменклатураКонтрагентов.НаименованиеНоменклатуры
	|		И ТаблицаНоменклатурыКонтрагентов.НаименованиеХарактеристики = НоменклатураКонтрагентов.НаименованиеХарактеристики
	|		И ТаблицаНоменклатурыКонтрагентов.НаименованиеУпаковки = НоменклатураКонтрагентов.НаименованиеУпаковки
	|ГДЕ
	|	НЕ НоменклатураКонтрагентов.ПометкаУдаления
	|	И
	|	НЕ НоменклатураКонтрагентов.Недействителен";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ПроверитьКорректностьСопоставленияНоменклатурыКонтрагентовВДокументах(ТаблицаСопоставлений, ЕстьОшибкиСопоставления, НаборСопоставлений)
	
	Если ТаблицаСопоставлений.Количество() = 0 Тогда
		ЕстьОшибкиСопоставления = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", ТаблицаСопоставлений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Товары.Владелец КАК Владелец,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	Товары.ИмяКолонкиНоменклатурыКонтрагента КАК ИмяКолонкиНоменклатурыКонтрагента,
	|	Товары.ПредставлениеНоменклатурыКонтрагента КАК ПредставлениеНоменклатурыКонтрагента,
	|	Товары.НоменклатураПоиск КАК НоменклатураПоиск,
	|	Товары.ХарактеристикаПоиск КАК ХарактеристикаПоиск,
	|	Товары.УпаковкаПоиск КАК УпаковкаПоиск
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СсылкаНаДокумент КАК СсылкаНаДокумент,
	|	Товары.Владелец КАК Владелец,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НоменклатураКонтрагента КАК НоменклатураКонтрагента,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоНоменклатурыКонтрагентов,
	|	Товары.ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	Товары.ИмяКолонкиНоменклатурыКонтрагента КАК ИмяКолонкиНоменклатурыКонтрагента,
	|	Товары.ПредставлениеНоменклатурыКонтрагента КАК ПредставлениеНоменклатурыКонтрагента,
	|	Товары.НоменклатураПоиск КАК НоменклатураПоиск,
	|	Товары.ХарактеристикаПоиск КАК ХарактеристикаПоиск,
	|	Товары.УпаковкаПоиск КАК УпаковкаПоиск
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
	|		ПО Товары.НоменклатураКонтрагента = НоменклатураКонтрагентов.Ссылка
	|			И Товары.НоменклатураПоиск = НоменклатураКонтрагентов.Номенклатура
	|			И Товары.ХарактеристикаПоиск = НоменклатураКонтрагентов.Характеристика
	|			И Товары.УпаковкаПоиск = НоменклатураКонтрагентов.Упаковка
	|ГДЕ
	|	Товары.НоменклатураКонтрагента <> ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СсылкаНаДокумент,
	|	Товары.Владелец,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.НоменклатураКонтрагента,
	|	ВЫБОР
	|		КОГДА НоменклатураКонтрагентов.Ссылка ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	Товары.ИмяТабличнойЧасти,
	|	Товары.ИмяКолонкиНоменклатурыКонтрагента,
	|	Товары.ПредставлениеНоменклатурыКонтрагента,
	|	Товары.НоменклатураПоиск,
	|	Товары.ХарактеристикаПоиск,
	|	Товары.УпаковкаПоиск
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.СсылкаНаДокумент,
	|	Товары.Владелец,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	МАКСИМУМ(ЕСТЬNULL(НоменклатураКонтрагентовПоиск.Ссылка, ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка))),
	|	КОЛИЧЕСТВО(*),
	|	Товары.ИмяТабличнойЧасти,
	|	Товары.ИмяКолонкиНоменклатурыКонтрагента,
	|	Товары.ПредставлениеНоменклатурыКонтрагента,
	|	Товары.НоменклатураПоиск,
	|	Товары.ХарактеристикаПоиск,
	|	Товары.УпаковкаПоиск
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентовПоиск
	|		ПО Товары.Владелец = НоменклатураКонтрагентовПоиск.ВладелецНоменклатуры
	|			И Товары.НоменклатураПоиск = НоменклатураКонтрагентовПоиск.Номенклатура
	|			И Товары.ХарактеристикаПоиск = НоменклатураКонтрагентовПоиск.Характеристика
	|			И Товары.УпаковкаПоиск = НоменклатураКонтрагентовПоиск.Упаковка
	|			И (НЕ НоменклатураКонтрагентовПоиск.ПометкаУдаления)
	|			И (НЕ НоменклатураКонтрагентовПоиск.Недействителен)
	|ГДЕ
	|	Товары.НоменклатураКонтрагента = ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СсылкаНаДокумент,
	|	Товары.Владелец,
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Упаковка,
	|	Товары.ИмяТабличнойЧасти,
	|	Товары.ИмяКолонкиНоменклатурыКонтрагента,
	|	Товары.ПредставлениеНоменклатурыКонтрагента,
	|	Товары.НоменклатураПоиск,
	|	Товары.ХарактеристикаПоиск,
	|	Товары.УпаковкаПоиск
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СопоставлениеНоменклатуры = НовоеСопоставлениеНоменклатурыКонтрагентов();
		ЗаполнитьЗначенияСвойств(СопоставлениеНоменклатуры, Выборка);
		
		Если НЕ (ЗначениеЗаполнено(Выборка.НоменклатураКонтрагента)
			И Выборка.КоличествоНоменклатурыКонтрагентов = 1) Тогда
			ЕстьОшибкиСопоставления               = Истина;
			СопоставлениеНоменклатуры.Сопоставлено = Ложь;
			Если Выборка.КоличествоНоменклатурыКонтрагентов > 1 Тогда
				СопоставлениеНоменклатуры.НоменклатураКонтрагента = Справочники.НоменклатураКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		Иначе
			СопоставлениеНоменклатуры.Сопоставлено = Истина;
		КонецЕсли;
		
		НаборСопоставлений.Добавить(СопоставлениеНоменклатуры);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает найденную номенклатуру ИБ по переданному идентификатору.
//
// Параметры:
//  Идентификатор               - Строка - идентификатор, по которому требуется найти номенклатуру ИБ.
//  ИдентификаторНоменклатуры   - Строка - идентификатор номенклатуры, по которому требуется найти номенклатуру.
//  ИдентификаторХарактеристики - Строка - идентификатор характеристики, по которому требуется найти характеристику.
//  ИдентификаторУпаковки       - Строка - идентификатор упаковки, по которому требуется найти упаковку.
//
// Возвращаемое значение:
//  Структура - См. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы.
//
Функция НайтиНоменклатуруИБПоИдентификатору(Знач Идентификатор, Знач ИдентификаторНоменклатуры, Знач ИдентификаторХарактеристики, Знач ИдентификаторУпаковки)
	
	НоменклатураИБ = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	СопоставлениеНоменклатурыКонтрагентовПереопределяемый.ПриПоискеНоменклатурыПоИдентификатору(Идентификатор, НоменклатураИБ);
	
	Если ЗначениеЗаполнено(НоменклатураИБ.Номенклатура) Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	Номенклатура   = Неопределено;
	Характеристика = Неопределено;
	Упаковка       = Неопределено;
	ЕстьОшибка     = Ложь;
	
	Попытка
		
		// Номенклатура
		Если ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
			Ссылка = НайтиСсылкуПоИдентификатору(ИдентификаторНоменклатуры, Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Номенклатура = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		// Характеристика
		Если ЗначениеЗаполнено(ИдентификаторХарактеристики) Тогда
			Ссылка = НайтиСсылкуПоИдентификатору(ИдентификаторХарактеристики, Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Характеристика = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		// Упаковка
		Если ЗначениеЗаполнено(ИдентификаторУпаковки) Тогда
			Ссылка = НайтиСсылкуПоИдентификатору(ИдентификаторУпаковки, Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Упаковка = Ссылка;
			Иначе
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ЕстьОшибка = Истина;
	КонецПопытки;
	
	Если ЕстьОшибка Тогда
		Возврат НоменклатураИБ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		НоменклатураИБ.Номенклатура = Номенклатура;
	Иначе
		Возврат НоменклатураИБ;
	КонецЕсли;
	Если ЗначениеЗаполнено(Характеристика) Тогда
		НоменклатураИБ.Характеристика = Характеристика;
	КонецЕсли;
	Если ЗначениеЗаполнено(Упаковка) Тогда
		НоменклатураИБ.Упаковка = Упаковка;
	КонецЕсли;
	
	Возврат НоменклатураИБ;
	
КонецФункции

// Возвращает ссылку по идентификатору и описанию типа.
//
// Параметры:
//  ИдентификаторСтрокой - Строка        - уникальный идентификатор ссылки строкой.
//  ОписаниеТипаСсылки   - ОписаниеТипов - описание типа ссылки.
//
// Возвращаемое значение:
//  Произвольный - найденная ссылка. Если не найдена, то Неопределено.
//
Функция НайтиСсылкуПоИдентификатору(Знач ИдентификаторСтрокой, Знач ОписаниеТипаСсылки)
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Идентификатор = Новый УникальныйИдентификатор(ИдентификаторСтрокой);
	НаборТипов = ОписаниеТипаСсылки.Типы();
	
	Для Каждого ТипСсылки Из НаборТипов Цикл
		
		МетаданныеСсылки = Метаданные.НайтиПоТипу(ТипСсылки);
		Если МетаданныеСсылки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеСсылки.ПолноеИмя());
		Ссылка = Менеджер.ПолучитьСсылку(Идентификатор);
		Если ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
			Возврат Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СинхронизацияНоменклатурыКонтрагентов

Процедура СинхронизироватьНоменклатуруКонтрагентовСРегистромБЭД(Знач ОбъектНоменклатураКонтрагента, Отказ)
	
	НоменклатураКонтрагента = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
	СопоставлениеНоменклатурыКонтрагентов.ЗаполнитьДанныеНоменклатурыКонтрагентаПоСсылке(ОбъектНоменклатураКонтрагента, НоменклатураКонтрагента);
	
	УдалятьЗапись = ОбъектНоменклатураКонтрагента.ПометкаУдаления ИЛИ ОбъектНоменклатураКонтрагента.Недействителен;

	Попытка
		Набор = РегистрыСведений.НоменклатураКонтрагентовБЭД.СоздатьНаборЗаписей();
		Набор.Отбор.Владелец.Установить(НоменклатураКонтрагента.Владелец);
		Набор.Отбор.Идентификатор.Установить(НоменклатураКонтрагента.Идентификатор);
		УстановитьУправляемуюБлокировкуПоНаборуЗаписей(Набор);
		Набор.Прочитать();
		
		Если УдалятьЗапись Тогда
			Набор.Очистить();
		Иначе
			Если ЗначениеЗаполнено(Набор) Тогда
				Запись = Набор[0];
			Иначе
				Запись = Набор.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Запись, НоменклатураКонтрагента);
			Запись.НаименованиеХарактеристики = НоменклатураКонтрагента.Характеристика;
			Запись.Номенклатура               = ОбъектНоменклатураКонтрагента.Номенклатура;
			Запись.Характеристика             = ОбъектНоменклатураКонтрагента.Характеристика;
			Запись.Упаковка                   = ОбъектНоменклатураКонтрагента.Упаковка;
			Запись.ИспользоватьХарактеристики = ОбъектНоменклатураКонтрагента.ИспользоватьХарактеристики;
		КонецЕсли;
		
		Набор.ДополнительныеСвойства.Вставить("Синхронизация");
		
		Набор.ОбменДанными.Загрузка = ОбъектНоменклатураКонтрагента.ОбменДанными.Загрузка;
		
		Набор.Записать();
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

//-- Локализация

#Область Прочее

//++ Локализация

Функция ПустаяСсылкаХарактеристикиБЭД()
	
	Если Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип.Типы().Количество() > 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип.Типы()[0] = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип.Типы()[0]) <> Неопределено Тогда
		Возврат Справочники[Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип.Типы()[0]).Имя].ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПустаяСсылкаУпаковкиНоменклатурыБЭД()
	
	Если Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.Типы().Количество() > 1 Тогда
		Возврат Неопределено;
	ИначеЕсли Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.Типы()[0] = Тип("Строка") Тогда
		Возврат "";
	ИначеЕсли Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.Типы()[0]) <> Неопределено Тогда
		Возврат Справочники[Метаданные.НайтиПоТипу(Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.Типы()[0]).Имя].ПустаяСсылка();
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
		
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает данные номенклатуры контрагентов в таблице значений.
//
// Параметры:
//  НаборНоменклатурыКонтрагентов - Массив из см. СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица из колонок:
//   * Идентификатор                          - Строка - идентификатор записи.
//   * Наименование                           - Строка - наименование номенклатуры.
//   * Характеристика                         - Строка - характеристика номенклатуры.
//   * ЕдиницаИзмерения                       - Строка - единица измерения номенклатуры.
//   * ЕдиницаИзмеренияКод                    - Строка - код единицы измерения номенклатуры.
//   * Артикул                                - Строка - артикул номенклатуры.
//   * СтавкаНДС                              - Строка - ставка НДС номенклатуры. 
//   * ИдентификаторНоменклатурыСервиса       - Строка - идентификатор в сервисе 1С:Номенклатура.
//   * ИдентификаторХарактеристикиСервиса     - Строка - идентификатор характеристики в сервисе 1С:Номенклатура.
//   * ШтрихкодКомбинации                     - Строка - штрихкод по комбинации: номенклатура, характеристика, упаковка.
//   * ШтрихкодыНоменклатуры                  - Строка - штрихкоды номенклатуры через запятую.
//   * НаименованиеУпаковки                   - Строка - наименование упаковки номенклатуры.
//   * НоменклатураКонтрагента                - СправочникСсылка.НоменклатураКонтрагентов                            - ссылка номенклатуры контрагентов.
//   * Владелец                               - ОпределяемыйТип.ВладелецНоменклатурыБЭД, ОпределяемыйТип.Организация - владелец номенклатуры ИБ.
//   * НоменклатураИБ                         - ОпределяемыйТип.НоменклатураБЭД                                      - ссылка номенклатура ИБ.
//   * ХарактеристикаИБ                       - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД                        - ссылка характеристики номенклатуры ИБ.
//   * УпаковкаИБ                             - ОпределяемыйТип.УпаковкаНоменклатурыБЭД                              - ссылка упаковки номенклатуры ИБ.
//   * ВариантыСопоставленияНоменклатурыБЭД   - Массив из Структура                                                  - см. НовыйВариантСопоставленияНоменклатурыБЭД
//   * ВариантыСопоставленияХарактеристикиБЭД - Массив из ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД              - набор ссылок характеристик.
//   * ВариантыСопоставленияУпаковкиБЭД       - Массив из ОпределяемыйТип.УпаковкаНоменклатурыБЭД                    - набор ссылок упаковок.
//
Функция ПреобразоватьНаборНоменклатурыКонтрагентовВТаблицу(НаборНоменклатурыКонтрагентов, Знач ТребуютсяКолонкиДляПоискаСопоставления = Ложь,
	Знач УчитыватьТолькоНоменклатуруКонтрагента = Истина)
	
	ТаблицаНоменклатурыКонтрагентов = Новый ТаблицаЗначений;
	СкопироватьКолонкиСтруктурыСопоставленияБЭДВТаблицу(НаборНоменклатурыКонтрагентов[0], ТаблицаНоменклатурыКонтрагентов, УчитыватьТолькоНоменклатуруКонтрагента);
		
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		Запись = ТаблицаНоменклатурыКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, НоменклатураКонтрагента);
		
	КонецЦикла;
	
	Если Не ТребуютсяКолонкиДляПоискаСопоставления Тогда
		Возврат ТаблицаНоменклатурыКонтрагентов;
	КонецЕсли;

	ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ВариантыСопоставленияНоменклатурыБЭД"  , Новый ОписаниеТипов("Массив"));
	ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ВариантыСопоставленияХарактеристикиБЭД", Новый ОписаниеТипов("Массив"));
	ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ВариантыСопоставленияУпаковкиБЭД"      , Новый ОписаниеТипов("Массив"));
	
	ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ИспользоватьХарактеристики"          , Новый ОписаниеТипов("Булево"));
	ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ИспользоватьУпаковки"                , Новый ОписаниеТипов("Булево"));
	ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ОбязательноеЗаполнениеХарактеристики", Новый ОписаниеТипов("Булево"));
	
	Если ТаблицаНоменклатурыКонтрагентов.Колонки.Найти("НоменклатураИБ") = Неопределено Тогда
		ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("НоменклатураИБ"             , Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
		ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ХарактеристикаИБ"           , Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
		ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("УпаковкаИБ"                 , Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
		ТаблицаНоменклатурыКонтрагентов.Колонки.Добавить("ЕдиницаИзмеренияПоУмолчанию", Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
	КонецЕсли;

	Возврат ТаблицаНоменклатурыКонтрагентов;
	
КонецФункции

Процедура ПреобразоватьСтруктуруСвойствНоменклатурыВТаблицу(СвойстваНоменклатурИБ, ТаблицаНоменклатурыКонтрагентов)
	
	Отбор = Новый Структура;
	Для Каждого СвойствоНоменклатуры Из СвойстваНоменклатурИБ Цикл
		Отбор.Вставить("НоменклатураИБ", СвойствоНоменклатуры.Ключ);
		НайденныеСтрокиНоменклатуры = ТаблицаНоменклатурыКонтрагентов.НайтиСтроки(Отбор);
		Для Каждого НоменклатураКонтрагента Из НайденныеСтрокиНоменклатуры Цикл
			ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, СвойствоНоменклатуры.Значение);
			Если ЗначениеЗаполнено(НоменклатураКонтрагента.НоменклатураИБ)
				И Не ЗначениеЗаполнено(НоменклатураКонтрагента.УпаковкаИБ)
				И ЗначениеЗаполнено(НоменклатураКонтрагента.ЕдиницаИзмеренияПоУмолчанию) Тогда

				СвойстваУпаковки = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НовыеСвойстваУпаковки();
				ЗаполнитьЗначенияСвойств(СвойстваУпаковки, НоменклатураКонтрагента);
				СвойстваУпаковки.НаименованиеБазовойЕдиницыИзмерения = НоменклатураКонтрагента.ЕдиницаИзмерения;

				ЭтоБазоваяЕдиницаИзмерения = Не СопоставлениеНоменклатурыКонтрагентовСлужебныйКлиентСервер.УпаковкаИБазоваяЕдиницаИзмеренияРазличны(
						СвойстваУпаковки);

				Если ЭтоБазоваяЕдиницаИзмерения Тогда
					НоменклатураКонтрагента.УпаковкаИБ = НоменклатураКонтрагента.ЕдиницаИзмеренияПоУмолчанию;
					НоменклатураКонтрагента.ВариантыСопоставленияУпаковкиБЭД.Добавить(НоменклатураКонтрагента.УпаковкаИБ);
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

//-- Локализация

// Возвращает представление единичного объекта заданного типа.
//
// Параметры:
//  ОписаниеТипа - ОписаниеТипов - перечень допустимых для объекта типов.
//  ПредставлениеПоУмолчанию - Строка - представление по умолчанию, если не удалось его получить из метаданных.
//
// Возвращаемое значение:
//  Строка - полученное представление.
//
Функция ПредставлениеОбъектаПоТипу(Знач ОписаниеТипа, Знач ПредставлениеПоУмолчанию = "")
	
	Представление = "";
	
	Для каждого Тип Из ОписаниеТипа.Типы() Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		
		Если МетаданныеТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Представление) Тогда
			Представление = Представление + " / ";
		КонецЕсли;
		
		ПредставлениеОбъекта = МетаданныеТипа.ПредставлениеОбъекта;
		Если Не ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = МетаданныеТипа.Синоним;
		КонецЕсли;
		
		Представление = Представление + ПредставлениеОбъекта;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Представление) Тогда
		Представление = ПредставлениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

#КонецОбласти

#КонецОбласти
