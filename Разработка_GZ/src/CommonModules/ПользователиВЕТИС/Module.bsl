
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаРезультатовВыполненияЗаявокВЕТИС_API

// Обрабатывает результат операции запроса данных пользователя по login или UUID.
//
Функция ОбработатьРезультатЗапросаДанныхПользователя(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения         = Новый Массив;
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			ЭлементДанных = ДанныеДокумента.Объект.user;
			
			ДанныеПользователя = ПользователиВЕТИСКлиентСервер.СтруктураДанныхПользователяВЕТИС();
			
			ЗаполнитьПользователяВЕТИС(ЭлементДанных, ДанныеПользователя, ПараметрыОбмена);
			ЗаполнитьПраваДоступаПользователяВЕТИС(ЭлементДанных, ДанныеПользователя);
			ЗаполнитьЗонуОтветственностиПользователяВЕТИС(ЭлементДанных, ДанныеПользователя, ПараметрыОбмена);
			
			ИзмененныеОбъекты.Добавить(ДанныеПользователя);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИнтеграцияВЕТИС.ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

// Обрабатывает результат операции запроса списка доступных для назначения прав.
//
Функция ОбработатьРезультатЗапросаДоступныхДляНазначенияПрав(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения         = Новый Массив;
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			ПраваДоступа = Новый Массив();
			
			Для Каждого ЭлементПравоДоступа Из ДанныеДокумента.Объект.authorityList.authority Цикл
				ПравоДоступаВЕТИС = ПравоДоступаВЕТИС(ЭлементПравоДоступа.ID);
				Если ПравоДоступаВЕТИС <> Неопределено И ПраваДоступа.Найти(ПравоДоступаВЕТИС) = Неопределено Тогда
					ПраваДоступа.Добавить(ПравоДоступаВЕТИС);
				КонецЕсли;
			КонецЦикла;
			
			ИзмененныеОбъекты.Добавить(ПраваДоступа);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИнтеграцияВЕТИС.ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

// Обрабатывает результат операции запроса списка пользователей хозяйствующего субъекта.
//
Функция ОбработатьРезультатЗапросаПользователейХозяйствующегоСубъекта(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения         = Новый Массив;
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			СписокЭлементов = ДанныеДокумента.Объект.userList.user;
			
			Для Каждого ЭлементДанных Из СписокЭлементов Цикл
				Если ЭтоДанныеУдаленногоПользователя(ЭлементДанных) Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПользователя = ПользователиВЕТИСКлиентСервер.СтруктураДанныхПользователяВЕТИС();
				
				ЗаполнитьПользователяВЕТИС(ЭлементДанных, ДанныеПользователя, ПараметрыОбмена);
				ЗагрузитьПользователяВЕТИС(ДанныеПользователя);
				ИзмененныеОбъекты.Добавить(ДанныеПользователя.ПользовательВЕТИС);
				
				Если ЭтоДанныеПодтвержденногоПользователя(ЭлементДанных) Тогда
					ЗаполнитьПраваДоступаПользователяВЕТИС(ЭлементДанных, ДанныеПользователя);
					ЗагрузитьПраваДоступаПользователяВЕТИС(ХозяйствующийСубъект, ДанныеПользователя);
				КонецЕсли;
			КонецЦикла;
			
			УдалитьСвязиНесуществующихПользователейХозяйствующегоСубъекта(ХозяйствующийСубъект, ИзмененныеОбъекты);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИнтеграцияВЕТИС.ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

// Обрабатывает результат операции запроса назначение прав пользователям.
//
Функция ОбработатьРезультатЗапросаИзмененияПравПользователей(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения = Новый Массив;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			СписокЭлементов = ДанныеДокумента.Объект.user;
			
			Для Каждого ЭлементДанных Из СписокЭлементов Цикл
				ПользовательВЕТИС = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ПользователиВЕТИС", ЭлементДанных.login, "УчетнаяЗапись");
				
				ДанныеПользователя = ПользователиВЕТИСКлиентСервер.СтруктураРазграниченияДоступаПользователя();
				ДанныеПользователя.ПользовательВЕТИС = ПользовательВЕТИС;
				
				ИсходныеПараметрыЗапроса   = ИсходныеПараметрыЗапроса(ДанныеДокумента);
				ИсходныеДанныеПользователя = ИсходныеДанныеПользователя(ИсходныеПараметрыЗапроса, ДанныеПользователя);
				
				Если ЭтоДанныеПодтвержденногоПользователя(ЭлементДанных) Тогда
					ЗаполнитьПраваДоступаПользователяВЕТИС(ЭлементДанных, ДанныеПользователя);
				ИначеЕсли ИсходныеДанныеПользователя <> Неопределено Тогда
					ДанныеПользователя.ПраваДоступа = ИсходныеДанныеПользователя.ПраваДоступа;
				КонецЕсли;
				
				ЗагрузитьПраваДоступаПользователяВЕТИС(ХозяйствующийСубъект, ДанныеПользователя);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = Неопределено;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

// Обрабатывает результат операции запроса назначение зон ответственности пользователям.
//
Функция ОбработатьРезультатЗапросаИзмененияЗонОтветственностиПользователей(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения = Новый Массив;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			СписокЭлементов = ДанныеДокумента.Объект.user;
			
			ДанныеПользователей = Новый Массив();
			
			Для Каждого ЭлементДанных Из СписокЭлементов Цикл
				ПользовательВЕТИС = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ПользователиВЕТИС", ЭлементДанных.login, "УчетнаяЗапись");
				
				ДанныеПользователя = ПользователиВЕТИСКлиентСервер.СтруктураРазграниченияДоступаПользователя();
				ДанныеПользователя.ПользовательВЕТИС = ПользовательВЕТИС;
				
				ЗаполнитьЗонуОтветственностиПользователяВЕТИС(ЭлементДанных, ДанныеПользователя, ПараметрыОбмена);
				
				ИсходныеПараметрыЗапроса   = ИсходныеПараметрыЗапроса(ДанныеДокумента);
				ИсходныеДанныеПользователя = ИсходныеДанныеПользователя(ИсходныеПараметрыЗапроса, ДанныеПользователя);
				
				Для Каждого ДанныеАдреса Из ДанныеПользователя.Адреса Цикл
					Если НЕ ЗначениеЗаполнено(ДанныеАдреса.ПредставлениеАдреса) И ИсходныеДанныеПользователя <> Неопределено Тогда
						Для Каждого ИсходныеДанныеАдреса Из ИсходныеДанныеПользователя.Адреса Цикл
							Если ДанныеАдреса.СтранаGUID  = ИсходныеДанныеАдреса.СтранаGUID
								И ДанныеАдреса.РегионGUID = ИсходныеДанныеАдреса.РегионGUID
								И ДанныеАдреса.РайонGUID  = ИсходныеДанныеАдреса.РайонGUID
								И ДанныеАдреса.НаселенныйПунктGUID = ИсходныеДанныеАдреса.НаселенныйПунктGUID Тогда
								ДанныеАдреса.ПредставлениеАдреса = ИсходныеДанныеАдреса.ПредставлениеАдреса;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеПользователей.Добавить(ДанныеПользователя);
			КонецЦикла;
			
			ЗагрузитьЗоныОтветственностиПользователейВЕТИС(ХозяйствующийСубъект, ДанныеПользователей);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = Неопределено;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

// Обрабатывает результат операции запроса регистрации и привязки пользователей к хозяйствующему субъекту.
//
Функция ОбработатьРезультатЗапросаРегистрацииИПривязкиПользователейХозяйствующегоСубъекта(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения         = Новый Массив;
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			СписокЭлементов = ДанныеДокумента.Объект.user;
			
			Для Каждого ЭлементДанных Из СписокЭлементов Цикл
				ДанныеПользователя = ПользователиВЕТИСКлиентСервер.СтруктураДанныхПользователяВЕТИС();
				
				ЗаполнитьПользователяВЕТИС(ЭлементДанных, ДанныеПользователя, ПараметрыОбмена);
				
				ИсходныеПараметрыЗапроса   = ИсходныеПараметрыЗапроса(ДанныеДокумента);
				ИсходныеДанныеПользователя = ИсходныеДанныеПользователя(ИсходныеПараметрыЗапроса, ДанныеПользователя);
				
				Если ИсходныеДанныеПользователя <> Неопределено Тогда
					ДанныеПользователя.Пользователь = ИсходныеДанныеПользователя.Пользователь;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеПользователя.ПользовательВЕТИС) Тогда
					ЗагрузитьПользователяВЕТИС(ДанныеПользователя);
					ИзмененныеОбъекты.Добавить(ДанныеПользователя.ПользовательВЕТИС);
				КонецЕсли;
				
				Если ЭтоДанныеПодтвержденногоПользователя(ЭлементДанных) Тогда
					ЗаполнитьПраваДоступаПользователяВЕТИС(ЭлементДанных, ДанныеПользователя);
				ИначеЕсли ИсходныеДанныеПользователя <> Неопределено Тогда
					ДанныеПользователя.ПраваДоступа = ИсходныеДанныеПользователя.ПраваДоступа;
				КонецЕсли;
				
				ЗагрузитьПраваДоступаПользователяВЕТИС(ХозяйствующийСубъект, ДанныеПользователя);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИнтеграцияВЕТИС.ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

// Обрабатывает результат операции запроса регистрации и привязки пользователей к хозяйствующему субъекту.
//
Функция ОбработатьРезультатЗапросаУдаленияСвязиПользователейСХозяйствующимСубъектом(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения = Новый Массив;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			СписокЭлементов = ДанныеДокумента.Объект.user;
			
			Для Каждого ЭлементДанных Из СписокЭлементов Цикл
				
				ПользовательВЕТИС = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ПользователиВЕТИС", ЭлементДанных.login, "УчетнаяЗапись");
				УдалитьСвязьПользователяСХозяйствующимСубъектом(ХозяйствующийСубъект, ПользовательВЕТИС);
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = Неопределено;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#Область ПраваДоступа

// Функция возвращает право доступа ВЕТИС по его строковому идентификатору в системе "Меркурий"
//
// Параметры:
//  ИдентификаторРоли  - Строка - идентификатор права в системе "Меркурий"
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ПраваДоступаВЕТИС - право доступа ВЕТИС
//
Функция ПравоДоступаВЕТИС(ИдентификаторРоли) Экспорт
	
	ЗначениеПрава = Неопределено;
	
	Если ИдентификаторРоли = "MERCURY_ACCESS_WEB_READ" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.WebИнтерфейсЧтение;
	ИначеЕсли ИдентификаторРоли = "MERCURY_ACCESS_WEB_WRITE" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.WebИнтерфейсЗапись;
	ИначеЕсли ИдентификаторРоли = "MERCURY_ACCESS_API_READ" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.APIЧтение;
	ИначеЕсли ИдентификаторРоли = "MERCURY_ACCESS_API_WRITE" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.APIЗапись;
		
	ИначеЕсли ИдентификаторРоли = "ARGUS_HS_AUTHORIZED_APPLICANT" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.АвторизованныйЗаявительАргус;
	ИначеЕсли ИдентификаторРоли = "MERCURY_HS_AUTHORIZED_APPLICANT" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.АвторизованныйЗаявительМеркурий;
		
	ИначеЕсли ИдентификаторРоли = "MERCURY_HS_LICENSED_SPECIALIST" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.АттестованныйСпециалист;
		
	ИначеЕсли ИдентификаторРоли = "MERCURY_CERTIFICATE_ACCEPTANCE" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.ГашениеВСД;
	ИначеЕсли ИдентификаторРоли = "MERCURY_PRODUCTION_BATCH_CERTIFICATE" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.ОформлениеПроизводственныхВСД;
	ИначеЕсли ИдентификаторРоли = "MERCURY_HS_AUTHORIZED_646" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646;
	ИначеЕсли ИдентификаторРоли = "MERCURY_RETURNED_CERTIFICATE_CREATION" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.ОформлениеВозвратныхВСД;
	ИначеЕсли ИдентификаторРоли = "MERCURY_HS_FRESH_MILK_CERTIFICATE" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДНаСыроеМолоко;
		
	ИначеЕсли ИдентификаторРоли = "MERCURY_AUTHORIZED_CERTIFICATE_ACCEPTANCE" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.УполномоченноеГашениеВСД;
	ИначеЕсли ИдентификаторРоли = "MERCURY_AUTHORIZED_RETURNED_CERTIFICATE_CREATION" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.УполномоченноеОформлениеВозвратныхВСД;
		
	ИначеЕсли ИдентификаторРоли = "MERCURY_HS_FISH_CERTIFICATE" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.СертификацияУлововВБР;
		
	ИначеЕсли ИдентификаторРоли = "MERCURY_HS_AUTHORIZED_ASSIGNMENT" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.НазначениеУполномоченных;
	ИначеЕсли ИдентификаторРоли = "MERCURY_CONTROL_WORKING_AREA" Тогда
		ЗначениеПрава = Перечисления.ПраваДоступаВЕТИС.УправлениеЗонамиОтветственности;
	КонецЕсли;
	
	Возврат ЗначениеПрава;
	
КонецФункции

// Функция возвращает строковый идентификатор права доступа в системе "Меркурий"
//
// Параметры:
//  ПравоДоступаВЕТИС  - ПеречислениеСсылка.ПраваДоступаВЕТИС - право доступа ВЕТИС
//
// Возвращаемое значение:
//  Строка - идентификатор права в системе "Меркурий"
//
Функция ИдентификаторРоли(ПравоДоступаВЕТИС) Экспорт
	
	Идентификатор = Неопределено;
	
	Если ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.WebИнтерфейсЧтение Тогда
		Идентификатор = "MERCURY_ACCESS_WEB_READ";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.WebИнтерфейсЗапись Тогда
		Идентификатор = "MERCURY_ACCESS_WEB_WRITE";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.APIЧтение Тогда
		Идентификатор = "MERCURY_ACCESS_API_READ";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.APIЗапись Тогда
		Идентификатор = "MERCURY_ACCESS_API_WRITE";
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.АвторизованныйЗаявительАргус Тогда
		Идентификатор = "ARGUS_HS_AUTHORIZED_APPLICANT";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.АвторизованныйЗаявительМеркурий Тогда
		Идентификатор = "MERCURY_HS_AUTHORIZED_APPLICANT";
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.АттестованныйСпециалист Тогда
		Идентификатор = "MERCURY_HS_LICENSED_SPECIALIST";
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ГашениеВСД Тогда
		Идентификатор = "MERCURY_CERTIFICATE_ACCEPTANCE";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеПроизводственныхВСД Тогда
		Идентификатор = "MERCURY_PRODUCTION_BATCH_CERTIFICATE";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646 Тогда
		Идентификатор = "MERCURY_HS_AUTHORIZED_646";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеВозвратныхВСД Тогда
		Идентификатор = "MERCURY_RETURNED_CERTIFICATE_CREATION";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДНаСыроеМолоко Тогда
		Идентификатор = "MERCURY_HS_FRESH_MILK_CERTIFICATE";
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.УполномоченноеГашениеВСД Тогда
		Идентификатор = "MERCURY_AUTHORIZED_CERTIFICATE_ACCEPTANCE";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.УполномоченноеОформлениеВозвратныхВСД Тогда
		Идентификатор = "MERCURY_AUTHORIZED_RETURNED_CERTIFICATE_CREATION";
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.СертификацияУлововВБР Тогда
		Идентификатор = "MERCURY_HS_FISH_CERTIFICATE";
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.НазначениеУполномоченных Тогда
		Идентификатор = "MERCURY_HS_AUTHORIZED_ASSIGNMENT";
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.УправлениеЗонамиОтветственности Тогда
		Идентификатор = "MERCURY_CONTROL_WORKING_AREA";
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Возвращает массив недоступных дальнейших действий текущему пользователю ВЕТИС
//
// Параметры:
//  ДокументВЕТИС				 - ДокументСсылка.*, ДокументОбъект.* - Проверяемый документ
//  ДальнейшиеДействия			 - Массив - массив дальнейших действий
//  ОперацииДопустимыхДействий	 - Соответствие - соответствие операций дальнейшим действиям для документа
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующий субъект документа
//  ПользовательВЕТИС	 - СправочникСсылка.ПользователиВЕТИС - Пользователь ВЕТИС
// 
// Возвращаемое значение:
//  Массив - массив дальнейших действий, недоступных пользователю
//
Функция НедоступныеДальнейшиеДействия(ДокументВЕТИС, ДальнейшиеДействия, ОперацииДопустимыхДействий, Знач ХозяйствующийСубъект, ПользовательВЕТИС = Неопределено) Экспорт
	
	УполномоченноеГашение = Ложь;
	
	Если ТипЗнч(ДокументВЕТИС) = Тип("ДанныеФормыСтруктура")
		И ТипЗнч(ДокументВЕТИС.Ссылка) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	1
		|ИЗ
		|	РегистрСведений.НастройкиУполномоченногоГашенияВЕТИС КАК НастройкиУполномоченногоГашенияВЕТИС
		|ГДЕ
		|	НастройкиУполномоченногоГашенияВЕТИС.Грузоотправитель = &Грузоотправитель
		|	И НастройкиУполномоченногоГашенияВЕТИС.Грузополучатель = &Грузополучатель
		|";
		Запрос.УстановитьПараметр("Грузоотправитель", ДокументВЕТИС.ГрузоотправительХозяйствующийСубъект);
		Запрос.УстановитьПараметр("Грузополучатель", ДокументВЕТИС.ГрузополучательХозяйствующийСубъект);
		
		УполномоченноеГашение = НЕ Запрос.Выполнить().Пустой();
		Если УполномоченноеГашение Тогда
			ХозяйствующийСубъект = ДокументВЕТИС.ГрузоотправительХозяйствующийСубъект;
		КонецЕсли;
	КонецЕсли;
	
	НедоступныеДействия = Новый Соответствие;
	
	Для каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		ОперацияВЕТИС = ОперацииДопустимыхДействий.Получить(ДальнейшееДействие);
		Если ЗначениеЗаполнено(ОперацияВЕТИС) Тогда
			
			ДействиеДоступно = ОперацияДоступнаПользователюСРасшифровкой(ОперацияВЕТИС, ДокументВЕТИС, ХозяйствующийСубъект, ПользовательВЕТИС, Неопределено, УполномоченноеГашение);
			
			Если Не ДействиеДоступно = Истина Тогда
				НедоступныеДействия.Вставить(ДальнейшееДействие, ДействиеДоступно);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НедоступныеДействия;
	
КонецФункции

// Проверяет, что действие доступно пользователю
//
// Параметры:
//  ОперацияВЕТИС		 - ПеречислениеСсылка.ВидыОперацийВЕТИС - Вид операции
//  ДокументВЕТИС		 - ДокументСсылка.*, ДокументОбъект.* - Проверяемый документ
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующий субъект документа
//  ПользовательВЕТИС	 - СправочникСсылка.ПользователиВЕТИС - Пользователь ВЕТИС
//  ПраваДоступа		 - Массив - Массив доступных прав пользователю
//  УполномоченноеГашение- Булево - Признак уполномоченного гашения ВСД
// 
// Возвращаемое значение:
//  Булево               - Признак доступности
//
Функция ОперацияДоступнаПользователю(ОперацияВЕТИС, ДокументВЕТИС = Неопределено, ХозяйствующийСубъект = Неопределено, ПользовательВЕТИС = Неопределено, ПраваДоступа = Неопределено, УполномоченноеГашение = Неопределено) Экспорт
	
	Результат = ОперацияДоступнаПользователюСРасшифровкой(ОперацияВЕТИС, ДокументВЕТИС, ХозяйствующийСубъект, ПользовательВЕТИС, ПраваДоступа, УполномоченноеГашение);
	Возврат (Результат = Истина);
	
КонецФункции

// Возвращает массив доступных прав пользователя ВЕТИС
//
// Параметры:
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующий субъект документа
//  Пользователь		 - СправочникСсылка.ПользователиВЕТИС - Пользователь ВЕТИС
// 
// Возвращаемое значение:
//  Массив - Массив доступных прав пользователю
//
Функция ПраваДоступаПользователя(ХозяйствующийСубъект = Неопределено, ПользовательВЕТИС = Неопределено) Экспорт
	
	Если ПользовательВЕТИС = Неопределено Тогда
		ПользовательВЕТИС = ТекущийПользовательВЕТИС();
	КонецЕсли;
	
	ПраваДоступа = Новый Массив;
	ПраваДоступаПоПользователям = ИнтеграцияВЕТИС.ПраваДоступаПоПользователям(ПользовательВЕТИС).ПраваДоступаПоПользователям;
	
	ПараметрыОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
		ПараметрыОтбора.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
	КонецЕсли;
	ПараметрыОтбора.Вставить("ПользовательВЕТИС", ПользовательВЕТИС);
	ПараметрыОтбора.Вставить("ПравоДоступа",      NULL);
	НайденныеСтрокиХозяйствующиеСубъектыПользователи = ПраваДоступаПоПользователям.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	Для Каждого СтрокаДерева Из НайденныеСтрокиХозяйствующиеСубъектыПользователи Цикл
		Для Каждого СтрокаДереваПравоДоступа Из СтрокаДерева.Строки Цикл
			Если ПраваДоступа.Найти(СтрокаДереваПравоДоступа.ПравоДоступа) = Неопределено Тогда
				ПраваДоступа.Добавить(СтрокаДереваПравоДоступа.ПравоДоступа);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПраваДоступа;
	
КонецФункции

#КонецОбласти

// Функция возвращает пользователя ВЕТИС, соответствующего текущему пользователю ИБ
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  СправочникСсылка.ПользователиВЕТИС - Пользователь ВЕТИС
//
Функция ТекущийПользовательВЕТИС() Экспорт
	
	Возврат ПользовательВЕТИС(Пользователи.ТекущийПользователь());
	
КонецФункции

// Функция возвращает пользователя ВЕТИС по переданному пользователю ИБ
//
// Параметры:
//  Пользователь  - СправочникСсылка.Пользователи - Пользователь информационной базы
//
// Возвращаемое значение:
//  СправочникСсылка.ПользователиВЕТИС - Пользователь ВЕТИС
//
Функция ПользовательВЕТИС(Пользователь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПользователиВЕТИС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
	|ГДЕ
	|	НЕ ПользователиВЕТИС.ПометкаУдаления
	|	И ПользователиВЕТИС.Пользователь = &Пользователь
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ПользователиВЕТИС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция УчетнаяЗаписьПользователя(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПользователиВЕТИС.УчетнаяЗапись КАК УчетнаяЗапись
	|ИЗ
	|	Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
	|ГДЕ
	|	ПользователиВЕТИС.Пользователь = &Пользователь
	|		И НЕ ПользователиВЕТИС.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	УчетнаяЗапись = "";
	Если Выборка.Следующий() Тогда
		УчетнаяЗапись = Выборка.УчетнаяЗапись;
	КонецЕсли;
	
	Возврат УчетнаяЗапись
	
КонецФункции

// Функция возвращает администратора хозяйствующего субъекта
//
// Параметры:
//  ХозяйствующийСубъект  - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующий субъект
//
// Возвращаемое значение:
//  СправочникСсылка.ПользователиВЕТИС - Администратор хозяйствующего субъекта
//
Функция АдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект) Экспорт
	
	Администратор = Новый("СправочникСсылка.ПользователиВЕТИС");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиПодключенияВЕТИС.Администратор КАК Администратор
	|ИЗ
	|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
	|ГДЕ
	|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Администратор = Выборка.Администратор;
	КонецЕсли;
	
	Возврат Администратор;
	
КонецФункции

// Функция проверяет, является ли пользователь ВЕТИС администратором хозяйствующего субъекта
//
// Параметры:
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующий субъект
//  ПользовательВЕТИС    - СправочникСсылка.ПользователиВЕТИС - Пользователь ВЕТИС
//
// Возвращаемое значение:
//  Булево - признак, является ли пользователь ВЕТИС администратором хозяйствующего субъекта
//
Функция ЭтоАдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект, ПользовательВЕТИС = Неопределено) Экспорт
	
	Если ПользовательВЕТИС = Неопределено Тогда
		ПользовательВЕТИС = ТекущийПользовательВЕТИС();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		Возврат ПользовательВЕТИС = АдминистраторХозяйствующегоСубъекта(ХозяйствующийСубъект);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаРолейПользователя(ЭтоПользовательВЕТИС = Ложь) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗНАЧЕНИЕ(Перечисление.РолиПользователейВЕТИС.ГосударственныйВетеринарныйВрач) КАК РольПользователя,
	|	3 КАК Приоритет
	|ПОМЕСТИТЬ ВТРолиПользователяВЕТИС
	|ИЗ
	|	Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
	|ГДЕ
	|	НЕ ПользователиВЕТИС.ПометкаУдаления
	|	И &УсловиеОтбораПользователяВЕТИС
	|	И ПользователиВЕТИС.ЭтоГосударственныйВетеринарныйВрач
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ПраваДоступаПользователейВЕТИС.ПравоДоступа = ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.АттестованныйСпециалист)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РолиПользователейВЕТИС.АттестованныйСпециалист)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.РолиПользователейВЕТИС.УполномоченноеЛицо)
	|	КОНЕЦ КАК РольПользователя,
	|	ВЫБОР
	|		КОГДА ПраваДоступаПользователейВЕТИС.ПравоДоступа = ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.АттестованныйСпециалист)
	|			ТОГДА 2
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаПользователейВЕТИС
	|		ПО ПользователиВЕТИС.Ссылка = ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС
	|ГДЕ
	|	НЕ ПользователиВЕТИС.ПометкаУдаления
	|	И &УсловиеОтбораПользователяВЕТИС
	|	И НЕ ПользователиВЕТИС.ЭтоГосударственныйВетеринарныйВрач
	|	И (ПраваДоступаПользователейВЕТИС.ПравоДоступа = ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.АттестованныйСпециалист)
	|		ИЛИ ПраваДоступаПользователейВЕТИС.ПравоДоступа = ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646))
	|";
	
	Если ЭтоПользовательВЕТИС Тогда
		УсловиеОтбораПользователяВЕТИС = "ПользователиВЕТИС.Ссылка = &ПользовательВЕТИС";
	Иначе
		УсловиеОтбораПользователяВЕТИС = "ПользователиВЕТИС.Пользователь = &Пользователь";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПользователяВЕТИС", УсловиеОтбораПользователяВЕТИС);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция РольПользователяВЕТИС(ПользовательВЕТИС = Неопределено) Экспорт
	
	РольПользователя = Перечисления.РолиПользователейВЕТИС.ПустаяСсылка();
	
	ТекстЗапроса = ТекстЗапросаРолейПользователя(ПользовательВЕТИС <> Неопределено) + "
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РолиПользователяВЕТИС.РольПользователя КАК РольПользователя
	|ИЗ
	|	ВТРолиПользователяВЕТИС КАК РолиПользователяВЕТИС
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПользовательВЕТИС", ПользовательВЕТИС);
	Запрос.УстановитьПараметр("Пользователь",      Пользователи.ТекущийПользователь());
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		РольПользователя = Выборка.РольПользователя;
	КонецЕсли;
	
	Возврат РольПользователя;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеИЗаписьДанных

Функция ЭтоДанныеУдаленногоПользователя(ЭлементДанных)
	
	Если ЭлементДанных.workEmail = Неопределено И ЭлементДанных.authorityList = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоДанныеПодтвержденногоПользователя(ЭлементДанных)
	
	Если ЭлементДанных.authorityList <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПользователяВЕТИС(ЭлементДанных, ДанныеПользователя, ПараметрыОбмена)
	
	ПользовательВЕТИС = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ПользователиВЕТИС", ЭлементДанных.login, "УчетнаяЗапись");
	
	ДанныеПользователя.ПользовательВЕТИС   = ПользовательВЕТИС;
	ДанныеПользователя.УчетнаяЗапись       = ЭлементДанных.login;
	ДанныеПользователя.ИдентификаторВерсии = ЭлементДанных.uuid;
	ДанныеПользователя.Фамилия             = ЭлементДанных.lastName;
	ДанныеПользователя.Имя                 = ЭлементДанных.firstName;
	ДанныеПользователя.Отчество            = ЭлементДанных.middleName;
	ДанныеПользователя.ДатаРождения        = ЭлементДанных.birthDate;
	ДанныеПользователя.Должность           = ЭлементДанных.post;
	ДанныеПользователя.РабочийТелефон      = ЭлементДанных.workPhone;
	ДанныеПользователя.РабочийEmail        = ЭлементДанных.workEmail;
	
КонецПроцедуры

Процедура ЗаполнитьПраваДоступаПользователяВЕТИС(ЭлементДанных, ДанныеПользователя)
	
	Если ЭлементДанных.authorityList <> Неопределено Тогда
		Для Каждого ЭлементПравоДоступа Из ЭлементДанных.authorityList.authority Цикл
			ПравоДоступаВЕТИС = ПравоДоступаВЕТИС(ЭлементПравоДоступа.ID);
			Если ПравоДоступаВЕТИС <> Неопределено И ДанныеПользователя.ПраваДоступа.Найти(ПравоДоступаВЕТИС) = Неопределено Тогда
				ДанныеПользователя.ПраваДоступа.Добавить(ПравоДоступаВЕТИС);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗонуОтветственностиПользователяВЕТИС(ЭлементДанных, ДанныеПользователя, ПараметрыОбмена)
	
	Если ЭлементДанных.workingAreaList <> Неопределено Тогда
		Для Каждого ЭлементЗонаОтветственности Из ЭлементДанных.workingAreaList.workingArea Цикл
			Если ЭлементЗонаОтветственности.area <> Неопределено Тогда
				ДанныеПользователя.Адреса.Добавить(ИнтеграцияВЕТИС.ДанныеАдреса(ЭлементЗонаОтветственности.area));
			КонецЕсли;
			
			Если ЭлементЗонаОтветственности.enterprise <> Неопределено Тогда
				Идентификатор = ЭлементЗонаОтветственности.enterprise.guid;
				Предприятие   = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ПредприятияВЕТИС", Идентификатор, "Идентификатор");
				Если ЗначениеЗаполнено(Предприятие) И ДанныеПользователя.Предприятия.Найти(Предприятие) = Неопределено Тогда
					ДанныеПользователя.Предприятия.Добавить(Предприятие);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьПользователяВЕТИС(ДанныеПользователя, СправочникОбъект = Неопределено) Экспорт
	
	Если СправочникОбъект = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ДанныеПользователя.ПользовательВЕТИС) Тогда
			СправочникОбъект = Справочники.ПользователиВЕТИС.СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
		Иначе
			СправочникОбъект = ДанныеПользователя.ПользовательВЕТИС.ПолучитьОбъект();
			СправочникОбъект.Заблокировать();
		КонецЕсли;
	КонецЕсли;
	
	Имя      = ДанныеПользователя.Имя;
	Отчество = ДанныеПользователя.Отчество;
	Фамилия  = ДанныеПользователя.Фамилия;
	
	ФамилияИнициалы = ?(Не ПустаяСтрока(Фамилия), Фамилия
	                + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя,1) + "."
	                + ?(Не ПустаяСтрока(Отчество), Лев(Отчество,1) + ".", ""), ""), "");
	
	СправочникОбъект.Наименование        = ФамилияИнициалы;
	СправочникОбъект.УчетнаяЗапись       = ДанныеПользователя.УчетнаяЗапись;
	СправочникОбъект.ИдентификаторВерсии = ДанныеПользователя.ИдентификаторВерсии;
	СправочникОбъект.НаименованиеПолное  = Фамилия + " " + Имя + " " + Отчество;
	СправочникОбъект.ДатаРождения        = ДанныеПользователя.ДатаРождения;
	СправочникОбъект.Должность           = ДанныеПользователя.Должность;
	СправочникОбъект.РабочийТелефон      = ДанныеПользователя.РабочийТелефон;
	СправочникОбъект.РабочийEmail        = ДанныеПользователя.РабочийEmail;
	СправочникОбъект.ПометкаУдаления     = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеПользователя.Пользователь) Тогда
		СправочникОбъект.Пользователь = ДанныеПользователя.Пользователь;
	КонецЕсли;
	
	СправочникОбъект.Записать();
	
	ДанныеПользователя.ПользовательВЕТИС = СправочникОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЗагрузитьПраваДоступаПользователяВЕТИС(ХозяйствующийСубъект, ДанныеПользователя) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПраваДоступаПользователейВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ХозяйствующийСубъект.Установить(ХозяйствующийСубъект);
	НаборЗаписей.Отбор.ПользовательВЕТИС.Установить(ДанныеПользователя.ПользовательВЕТИС);
	
	Для Каждого ПравоДоступаВЕТИС Из ДанныеПользователя.ПраваДоступа Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ЗаписьНабора.ПользовательВЕТИС    = ДанныеПользователя.ПользовательВЕТИС;
		ЗаписьНабора.ПравоДоступа         = ПравоДоступаВЕТИС; 
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗагрузитьЗоныОтветственностиПользователейВЕТИС(ХозяйствующийСубъект, ДанныеПользователей) Экспорт
	
	МассивПользователей = Новый Массив();
	
	Для Каждого ДанныеПользователя Из ДанныеПользователей Цикл
		МассивПользователей.Добавить(ДанныеПользователя.ПользовательВЕТИС);
		
		НаборЗаписей = РегистрыСведений.АдресаЗонОтветственностиВЕТИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["ХозяйствующийСубъект"].Установить(ХозяйствующийСубъект);
		НаборЗаписей.Отбор["ПользовательВЕТИС"].Установить(ДанныеПользователя.ПользовательВЕТИС);
		
		Для Каждого Адрес Из ДанныеПользователя.Адреса Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ХозяйствующийСубъект         = ХозяйствующийСубъект;
			НоваяЗапись.ПользовательВЕТИС            = ДанныеПользователя.ПользовательВЕТИС;
			НоваяЗапись.СтранаИдентификатор          = Адрес.СтранаGUID;
			НоваяЗапись.РегионИдентификатор          = Адрес.РегионGUID;
			НоваяЗапись.РайонИдентификатор           = Адрес.РайонGUID;
			НоваяЗапись.НаселенныйПунктИдентификатор = Адрес.НаселенныйПунктGUID;
			НоваяЗапись.АдресПредставление           = Адрес.ПредставлениеАдреса;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		НаборЗаписей = РегистрыСведений.ПредприятияЗонОтветственностиВЕТИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор["ХозяйствующийСубъект"].Установить(ХозяйствующийСубъект);
		НаборЗаписей.Отбор["ПользовательВЕТИС"].Установить(ДанныеПользователя.ПользовательВЕТИС);
		
		Для Каждого Предприятие Из ДанныеПользователя.Предприятия Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ХозяйствующийСубъект = ХозяйствующийСубъект;
			НоваяЗапись.ПользовательВЕТИС    = ДанныеПользователя.ПользовательВЕТИС;
			НоваяЗапись.Предприятие          = Предприятие;
			НоваяЗапись.НаследуетсяИзАдреса  = Ложь;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	Отказ = Ложь;
	РегистрыСведений.ПредприятияЗонОтветственностиВЕТИС.ДобавитьПредприятияВЗоныОтветственностиПоНаследованиюАдреса(
	                                                    ХозяйствующийСубъект, МассивПользователей, Отказ);
	
	Если Отказ Тогда
		Если МассивПользователей.Количество() = 1 Тогда
			ТекстИсключения = НСтр("ru='Ошибка при загрузке зоны ответственности пользователя ВетИС'");
		Иначе
			ТекстИсключения = НСтр("ru ='Ошибка при загрузке зон ответственности пользователей ВетИС'");
		КонецЕсли;
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСвязьПользователяСХозяйствующимСубъектом(ХозяйствующийСубъект, ПользовательВЕТИС) Экспорт
	
	УдалитьПраваДоступаПользователяВЕТИС(ХозяйствующийСубъект, ПользовательВЕТИС);
	УдалитьЗонуОтветственностиПользователяВЕТИС(ХозяйствующийСубъект, ПользовательВЕТИС);
	
КонецПроцедуры

Процедура УдалитьСвязиНесуществующихПользователейХозяйствующегоСубъекта(ХозяйствующийСубъект, ПользователиВЕТИС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("ПользователиВЕТИС",    ПользователиВЕТИС);
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС КАК ПользовательВЕТИС
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаПользователейВЕТИС
	|ГДЕ
	|	ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И НЕ ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС В (&ПользователиВЕТИС)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АдресаЗонОтветственностиВЕТИС.ПользовательВЕТИС КАК ПользовательВЕТИС
	|ИЗ
	|	РегистрСведений.АдресаЗонОтветственностиВЕТИС КАК АдресаЗонОтветственностиВЕТИС
	|ГДЕ
	|	АдресаЗонОтветственностиВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И НЕ АдресаЗонОтветственностиВЕТИС.ПользовательВЕТИС В (&ПользователиВЕТИС)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредприятияЗонОтветственностиВЕТИС.ПользовательВЕТИС КАК ПользовательВЕТИС
	|ИЗ
	|	РегистрСведений.ПредприятияЗонОтветственностиВЕТИС КАК ПредприятияЗонОтветственностиВЕТИС
	|ГДЕ
	|	ПредприятияЗонОтветственностиВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
	|	И НЕ ПредприятияЗонОтветственностиВЕТИС.ПользовательВЕТИС В (&ПользователиВЕТИС)
	|";
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		УдалитьСвязьПользователяСХозяйствующимСубъектом(ХозяйствующийСубъект, Выборка.ПользовательВЕТИС);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьПраваДоступаПользователяВЕТИС(ХозяйствующийСубъект, ПользовательВЕТИС) Экспорт
	
	НаборЗаписей = РегистрыСведений.ПраваДоступаПользователейВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["ХозяйствующийСубъект"].Установить(ХозяйствующийСубъект);
	НаборЗаписей.Отбор["ПользовательВЕТИС"].Установить(ПользовательВЕТИС);
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура УдалитьЗонуОтветственностиПользователяВЕТИС(ХозяйствующийСубъект, ПользовательВЕТИС) Экспорт
	
	НаборЗаписей = РегистрыСведений.АдресаЗонОтветственностиВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["ХозяйствующийСубъект"].Установить(ХозяйствующийСубъект);
	НаборЗаписей.Отбор["ПользовательВЕТИС"].Установить(ПользовательВЕТИС);
	
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ПредприятияЗонОтветственностиВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор["ХозяйствующийСубъект"].Установить(ХозяйствующийСубъект);
	НаборЗаписей.Отбор["ПользовательВЕТИС"].Установить(ПользовательВЕТИС);
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаДокументов

Функция ЭтоВозвратнаяВСД(ДокументВЕТИС)
	Результат = Ложь;
	
	Если ТипЗнч(ДокументВЕТИС) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Товары.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ДокументСсылка
		|	И Товары.ВозвращаемоеКоличествоВЕТИС > 0
		|";
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументВЕТИС);
		РезультатЗапроса = Запрос.Выполнить();
		Результат = НЕ РезультатЗапроса.Пустой();
	ИначеЕсли ДокументВЕТИС <> Неопределено Тогда
		Результат = ДокументВЕТИС.Товары.Итог("ВозвращаемоеКоличествоВЕТИС") > 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Возвращает специфику состава документа "Исходящая транспортная операция ВетИС"
//
// Параметры:
//   ДокументВЕТИС - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС, ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС - 
//     проверяемый документ
//
// Возвращаемое значение:
//   Структура - флаги наличия в документе продукции ВетИС требующей специальных прав пользователя:
//   * ЕстьПродукцияПриказ647          - Булево
//   * ЕстьПродукцияПриказ646          - Булево
//   * ЕстьПродукцияПриказ647Приказ646 - Булево
//   * ЕстьПродукцияПриказ648          - Булево
//   * ЭтоВСДНаСыроеМолоко             - Булево
//   * ЭтоСертификацияУлововВБР        - Булево
//
Функция ПродукцияСоответствуетПриказам(ДокументВЕТИС)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьПродукцияПриказ647",          Ложь);
	Результат.Вставить("ЕстьПродукцияПриказ646",          Ложь);
	Результат.Вставить("ЕстьПродукцияПриказ648",          Ложь);
	Результат.Вставить("ЕстьПродукцияПриказ647Приказ646", Ложь);
	Результат.Вставить("ЭтоВСДНаСыроеМолоко",             Ложь);
	Результат.Вставить("ЭтоСертификацияУлововВБР",        Ложь);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Если ТипЗнч(ДокументВЕТИС) = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Продукция           КАК Продукция,
		|	Товары.ЭкспертизаРезультат КАК ЭкспертизаРезультат
		|ПОМЕСТИТЬ
		|	ВтПродукция
		|ИЗ
		|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ДокументСсылка;
		|";
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументВЕТИС);
	ИначеЕсли ТипЗнч(ДокументВЕТИС) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Продукция           КАК Продукция,
		|	Товары.ЭкспертизаРезультат КАК ЭкспертизаРезультат
		|ПОМЕСТИТЬ
		|	ВтПродукция
		|ИЗ
		|	&Товары КАК Товары;
		|";
		Запрос.УстановитьПараметр("Товары", ДокументВЕТИС.Товары.Выгрузить(,"Продукция, ЭкспертизаРезультат"));
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса +
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВидыПродукцииПоГруппам646.ВидПродукцииИдентификатор ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ) КАК ЕстьПродукцияПриказ646,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВидыПродукцииПоГруппам647.ВидПродукцииИдентификатор ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ) КАК ЕстьПродукцияПриказ647,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА (НЕ ВидыПродукцииПоГруппам646.ВидПродукцииИдентификатор ЕСТЬ NULL
	|				И НЕ ВидыПродукцииПоГруппам647.ВидПродукцииИдентификатор ЕСТЬ NULL) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПродукцияПриказ647Приказ646,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА (ВидыПродукцииПоГруппам646.ВидПродукцииИдентификатор ЕСТЬ NULL
	|				И ВидыПродукцииПоГруппам647.ВидПродукцииИдентификатор ЕСТЬ NULL) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьПродукцияПриказ648,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ВидыПродукцииВЕТИС.Идентификатор В (&МассивИдентификаторМолока) ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ) КАК ЭтоВСДНаСыроеМолоко,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА Таблица.ЭкспертизаРезультат <> ЗНАЧЕНИЕ(Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ)
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВидыПродукцииВЕТИС.Идентификатор В (&МассивИдентификаторУлововВБР)
	|			ИЛИ ПродукцияВЕТИСУровень2.Идентификатор В (&МассивИдентификаторУлововВБР) ТОГДА
	|			
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ) КАК ЭтоСертификацияУлововВБР
	|ИЗ
	|	ВтПродукция КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПродукцияВЕТИС КАК ПродукцияВЕТИС
	|			ПО Таблица.Продукция = ПродукцияВЕТИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПродукцияВЕТИС КАК ВидыПродукцииВЕТИС
	|			ПО ПродукцияВЕТИС.ВидПродукции = ВидыПродукцииВЕТИС.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПродукцияВЕТИС КАК ПродукцияВЕТИСУровень2
	|			ПО ВидыПродукцииВЕТИС.Продукция = ПродукцияВЕТИСУровень2.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыПродукцииПоГруппамВЕТИС КАК ВидыПродукцииПоГруппам646
	|			ПО ТИПЗНАЧЕНИЯ(ВидыПродукцииПоГруппам646.ГруппаПриказа) = ТИП(Перечисление.ГруппыПродукцииУполномоченныхЛиц)
	|			И ВидыПродукцииПоГруппам646.ВидПродукцииИдентификатор = ВидыПродукцииВЕТИС.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыПродукцииПоГруппамВЕТИС КАК ВидыПродукцииПоГруппам647
	|			ПО ТИПЗНАЧЕНИЯ(ВидыПродукцииПоГруппам647.ГруппаПриказа) = ТИП(Перечисление.ГруппыПродукцииАттестованныхСпециалистов)
	|			И ВидыПродукцииПоГруппам647.ВидПродукцииИдентификатор = ВидыПродукцииВЕТИС.Идентификатор
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Продукция
	|";
	
	Запрос.УстановитьПараметр("МассивИдентификаторМолока", ИдентификаторыСырогоМолока());
	Запрос.УстановитьПараметр("МассивИдентификаторУлововВБР", ИдентификаторыУлововВБР());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция ИдентификаторыСырогоМолока() Экспорт
	
	МассивИдентификатор = Новый Массив;
	МассивИдентификатор.Добавить("5d80c18b-6c64-448d-a71c-d5835b9b5210");
	МассивИдентификатор.Добавить("3cf85bfe-e6fa-4501-a7f7-a8fcd3d3bc46");
	
	Возврат МассивИдентификатор
	
КонецФункции

Функция ИдентификаторыУлововВБР() Экспорт
	
	МассивИдентификатор = Новый Массив;
	МассивИдентификатор.Добавить("fa577e08-3d74-ddd8-c58f-4b184120408a");
	МассивИдентификатор.Добавить("c93bc0c1-79e3-8a9b-69d9-84cfdbe65c1a");
	
	МассивИдентификатор.Добавить("f7faac6f-bf8b-d6c3-09ee-f4d4ebdf9913");
	МассивИдентификатор.Добавить("35613586-758a-6943-2551-f88ea01a22c9");
	МассивИдентификатор.Добавить("546a4df9-eb75-3b03-7a40-03857c948f47");
	МассивИдентификатор.Добавить("3c8757a3-7c47-f420-b1b4-35521981dadf");
	МассивИдентификатор.Добавить("c85add6a-b322-4ffc-96a7-ba3c928f8ee5");
	МассивИдентификатор.Добавить("41fb53ea-31c3-b116-9ce2-7d7df18c5835");
	МассивИдентификатор.Добавить("3882f3e8-3982-5078-a181-788ffeffe823");
	МассивИдентификатор.Добавить("382abe8e-c67e-452c-8474-245de4c0f6c4");
	МассивИдентификатор.Добавить("24c08ac5-9292-418f-b1b0-f8b03de221b8");
	МассивИдентификатор.Добавить("8a4a4c09-8535-b402-3be2-90a78187caa7");
	МассивИдентификатор.Добавить("c2a35c04-c815-f0bf-1111-c8cf2bab1292");
	МассивИдентификатор.Добавить("36493956-11f5-4938-b250-e88cae845ab6");
	МассивИдентификатор.Добавить("61847d10-1d98-46fe-9dae-f8d4b1545816");
	
	Возврат МассивИдентификатор
	
КонецФункции

Функция ДоступныеОперацииВЕТИСПоПравуДоступа(ПравоДоступаВЕТИС, ЭтоВетеринарныйВрач = Ложь)
	
	МассивОпераций = Новый Массив;
	
	Если ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.APIЧтение Тогда
		// "MERCURY_ACCESS_API_READ";
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросВСД);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросВсехВСД);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросДанныхПользователя);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросДоступныхДляНазначенияПрав);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросЗаписейСкладскогоЖурнала);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросЗаписиСкладскогоЖурнала);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросПользователейХозяйствующегоСубъекта);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ПолучениеРезультатаЗапроса);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.APIЗапись Тогда
		// "MERCURY_ACCESS_API_WRITE";
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаАннулированиеВСД);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеНомеровТранспортныхСредств);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеПредприятия);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеПродукции);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИзменениеХозяйствующегоСубъекта);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаСозданиеИзменениеСвязиСПлощадкой);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ПолучениеРезультатаЗапроса);
		
		Если Не ЭтоВетеринарныйВрач Тогда
			МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей);
			МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеПравПользователей);
			МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаРегистрациюИПривязкуПользователейХозяйствующегоСубъекта);
			МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаУдалениеСвязиПользователейСХозяйствующимСубъектом);
		КонецЕсли;
		
		Если ЭтоВетеринарныйВрач Тогда
			МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаВнесениеСведенийОВетеринарныхМероприятиях);
		КонецЕсли;
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ГашениеВСД Тогда
		// "MERCURY_CERTIFICATE_ACCEPTANCE";
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросПакетногоГашенияВСД);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеВозвратныхВСД Тогда
		// "MERCURY_RETURNED_CERTIFICATE_CREATION";
		// Если есть строки к возврату в документе
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеПроизводственныхВСД Тогда
		// "MERCURY_PRODUCTION_BATCH_CERTIFICATE";
		// Если есть строки к возврату в документе
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646 Тогда
		// "MERCURY_HS_AUTHORIZED_646";
		// Если пользователь уполномоченное лицо и продукция подпадает под приказ 464
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДНаСыроеМолоко Тогда
		// MERCURY_HS_FRESH_MILK_CERTIFICATE";
		// Если в документе есть сырое молоко
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.УполномоченноеГашениеВСД Тогда
		// "MERCURY_AUTHORIZED_CERTIFICATE_ACCEPTANCE";
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.УполномоченноеОформлениеВозвратныхВСД Тогда
		// "MERCURY_AUTHORIZED_RETURNED_CERTIFICATE_CREATION";
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.СертификацияУлововВБР Тогда
		// "MERCURY_HS_FISH_CERTIFICATE";
		// Если в документе есть живая рыба
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.УправлениеЗонамиОтветственности Тогда
		// "MERCURY_CONTROL_WORKING_AREA";
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаИзменениеЗонОтветственностиПользователей);
		
	ИначеЕсли ПравоДоступаВЕТИС = Перечисления.ПраваДоступаВЕТИС.АттестованныйСпециалист Тогда
		// "MERCURY_HS_LICENSED_SPECIALIST";
		
		МассивОпераций.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаВнесениеСведенийОВетеринарныхМероприятиях);
		
	КонецЕсли;
	
	Возврат МассивОпераций
	
КонецФункции

Функция ДоступныеОперацииВЕТИСПоПравамДоступа(ПраваДоступаВЕТИС, ЭтоВетеринарныйВрач = Ложь) Экспорт
	
	МассивДоступныхОпераций = Новый Массив;
	Для каждого ПравоДоступа Из ПраваДоступаВЕТИС Цикл
		
		МассивОпераций = ДоступныеОперацииВЕТИСПоПравуДоступа(ПравоДоступа, ЭтоВетеринарныйВрач);
		Для каждого ДоступнаяОперация Из МассивОпераций Цикл
			
			Если МассивДоступныхОпераций.Найти(ДоступнаяОперация) = Неопределено Тогда
				
				МассивДоступныхОпераций.Добавить(ДоступнаяОперация);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДоступныхОпераций
	
КонецФункции

#КонецОбласти

Функция ИсходныеПараметрыЗапроса(ДанныеДокумента)
	
	ИсходныеПараметрыЗапроса = Неопределено;
	
	Если ДанныеДокумента.Свойство("ПараметрыЗапроса", ИсходныеПараметрыЗапроса) Тогда
		Если ТипЗнч(ИсходныеПараметрыЗапроса) = Тип("ХранилищеЗначения") Тогда
			ЗначениеИзХранилища = ИсходныеПараметрыЗапроса.Получить();
			Если ТипЗнч(ЗначениеИзХранилища) = Тип("Структура") Тогда
				ИсходныеПараметрыЗапроса = ЗначениеИзХранилища;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсходныеПараметрыЗапроса;
	
КонецФункции

Функция ИсходныеДанныеПользователя(ИсходныеПараметрыЗапроса, ПринятыеДанныеПользователя)
	
	ИсходныеДанныеПользователя = Неопределено;
	
	Если ТипЗнч(ИсходныеПараметрыЗапроса) = Тип("Структура") Тогда
		Если ИсходныеПараметрыЗапроса.Свойство("ДанныеПользователей") Тогда
			Для Каждого ДанныеПользователя Из ИсходныеПараметрыЗапроса.ДанныеПользователей Цикл
				Если ЗначениеЗаполнено(ДанныеПользователя.ПользовательВЕТИС)
					И ДанныеПользователя.ПользовательВЕТИС = ПринятыеДанныеПользователя.ПользовательВЕТИС Тогда
					ИсходныеДанныеПользователя = ДанныеПользователя;
					Прервать;
				ИначеЕсли ДанныеПользователя.Свойство("УчетнаяЗапись")
					И ЗначениеЗаполнено(ДанныеПользователя.УчетнаяЗапись) Тогда
					Если ДанныеПользователя.УчетнаяЗапись = ПринятыеДанныеПользователя.УчетнаяЗапись Тогда
						ИсходныеДанныеПользователя = ДанныеПользователя;
						Прервать;
					КонецЕсли;
				ИначеЕсли ДанныеПользователя.Свойство("Фамилия")
					И ЗначениеЗаполнено(ДанныеПользователя.Фамилия) Тогда
					Если ДанныеПользователя.Фамилия   = ПринятыеДанныеПользователя.Фамилия
						И ДанныеПользователя.Имя      = ПринятыеДанныеПользователя.Имя
						И ДанныеПользователя.Отчество = ПринятыеДанныеПользователя.Отчество Тогда
						ИсходныеДанныеПользователя = ДанныеПользователя;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИсходныеДанныеПользователя;
	
КонецФункции

Процедура УдалитьПользователяХозяйствующегоСубъекта(ХозяйствующийСубъект, ПользовательВЕТИС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ПраваДоступаПользователейВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ХозяйствующийСубъект.Установить(ХозяйствующийСубъект, Истина);
	НаборЗаписей.Отбор.ПользовательВЕТИС.Установить(ПользовательВЕТИС, Истина);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область ПраваДоступа

// Проверяет, что действие доступно пользователю
//
// Параметры:
//  ОперацияВЕТИС		 - ПеречислениеСсылка.ВидыОперацийВЕТИС - Вид операции
//  ДокументВЕТИС		 - ДокументСсылка.*, ДокументОбъект.* - Проверяемый документ
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующий субъект документа
//  ПользовательВЕТИС	 - СправочникСсылка.ПользователиВЕТИС - Пользователь ВЕТИС
//  ПраваДоступа		 - Массив - Массив доступных прав пользователю
//  УполномоченноеГашение- Булево - Признак уполномоченного гашения ВСД
// 
// Возвращаемое значение:
//  Строка,Булево - Признак доступности (Истина - действие доступно, иначе причина)
//
Функция ОперацияДоступнаПользователюСРасшифровкой(ОперацияВЕТИС, ДокументВЕТИС = Неопределено, ХозяйствующийСубъект = Неопределено, ПользовательВЕТИС = Неопределено, ПраваДоступа = Неопределено, УполномоченноеГашение = Неопределено)
	
	РольПользователяВЕТИС = ИнтеграцияВЕТИСПовтИсп.РольПользователяВЕТИС(ПользовательВЕТИС);
	ЭтоВетеринарныйВрач = (РольПользователяВЕТИС = Перечисления.РолиПользователейВЕТИС.ГосударственныйВетеринарныйВрач);
	
	Если ПраваДоступа = Неопределено Тогда
		ПраваДоступа = ИнтеграцияВЕТИСПовтИсп.ПраваДоступаПользователя(ХозяйствующийСубъект, ПользовательВЕТИС);
	КонецЕсли;
	
	ПраваДоступаСтруктура = Новый Структура;
	Счетчик = 0;
	Для Каждого ПравоДоступа Из ПраваДоступа Цикл
		Счетчик = Счетчик + 1;
		ПраваДоступаСтруктура.Вставить("ПравоДоступа" + Счетчик, ПравоДоступа);
	КонецЦикла;
	
	ДоступныеОперацииВЕТИС = ИнтеграцияВЕТИСПовтИсп.ДоступныеОперацииВЕТИС(ПраваДоступаСтруктура, ЭтоВетеринарныйВрач);
	
	Если ДоступныеОперацииВЕТИС.Найти(ОперацияВЕТИС) <> Неопределено Тогда
		ДействиеДоступно = Истина;
	ИначеЕсли ПраваДоступа.Количество()=0 Тогда
		ДействиеДоступно = НСтр("ru = 'Текущий пользователь не связан с пользователем ВетИС и не может выполнять операции в сервисе'");
	Иначе
		ДействиеДоступно = НСтр("ru = 'Недостаточно прав доступа на операцию'");
	КонецЕсли;
	
	Если ДействиеДоступно = Истина И ОперацияВЕТИС = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии
		И Не ЭтоВетеринарныйВрач Тогда
		
		Если ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.УполномоченноеГашениеВСД) = Неопределено
			И УполномоченноеГашение = Истина Тогда
			
			ДействиеДоступно = НСтр("ru = 'Недостаточно прав на уполномоченное гашение ветеринарно-сопроводительных документов'");
			
		Иначе
			ЭтоВозвратнаяВСД = ЭтоВозвратнаяВСД(ДокументВЕТИС);
			
			Если ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.ОформлениеВозвратныхВСД) = Неопределено
				И УполномоченноеГашение = Ложь
				И ЭтоВозвратнаяВСД Тогда
				
				ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление возвратных ветеринарно-сопроводительных документов'");
				
			ИначеЕсли ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.ГашениеВСД) = Неопределено
				И УполномоченноеГашение = Ложь
				И Не ЭтоВозвратнаяВСД Тогда
				
				ДействиеДоступно = НСтр("ru = 'Недостаточно прав на гашение ветеринарно-сопроводительных документов'");
				
			ИначеЕсли ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.УполномоченноеОформлениеВозвратныхВСД) = Неопределено
				И УполномоченноеГашение = Истина
				И ЭтоВозвратнаяВСД Тогда
				
				ДействиеДоступно = НСтр("ru = 'Недостаточно прав на уполномоченное оформление возвратных ветеринарно-сопроводительных документов'");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДействиеДоступно = Истина И ОперацияВЕТИС = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии
		И Не ЭтоВетеринарныйВрач Тогда
		
		СоответствиеПриказам = ПродукцияСоответствуетПриказам(ДокументВЕТИС);
		
		Если СоответствиеПриказам.ЭтоВСДНаСыроеМолоко Тогда
			
			Если ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДНаСыроеМолоко) = Неопределено Тогда
				ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление транспортной партии на сырое молоко'");
			КонецЕсли;
			
		ИначеЕсли СоответствиеПриказам.ЭтоСертификацияУлововВБР Тогда
			
			Если ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.СертификацияУлововВБР) = Неопределено Тогда
				ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление транспортной партии на сертификацию уловов рыбы'");
			КонецЕсли;
			
		ИначеЕсли ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646) = Неопределено
			И ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.АттестованныйСпециалист) = Неопределено
			И СоответствиеПриказам.ЕстьПродукцияПриказ647Приказ646 Тогда
			
			ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление транспортной партии продукции 646/647 приказа'");
			
		ИначеЕсли ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646) = Неопределено
			И СоответствиеПриказам.ЕстьПродукцияПриказ646
			И Не СоответствиеПриказам.ЕстьПродукцияПриказ647Приказ646 Тогда
			
			ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление транспортной партии продукции 646 приказа'");
			
		ИначеЕсли ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.АттестованныйСпециалист) = Неопределено
			И СоответствиеПриказам.ЕстьПродукцияПриказ647
			И Не СоответствиеПриказам.ЕстьПродукцияПриказ647Приказ646 Тогда
			
			ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление транспортной партии продукции 647 приказа'");
			
		ИначеЕсли ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.ОформлениеВСДПриказ646) = Неопределено
			И ПраваДоступа.Найти(Перечисления.ПраваДоступаВЕТИС.АттестованныйСпециалист) = Неопределено
			И СоответствиеПриказам.ЕстьПродукцияПриказ646 Тогда
			
			ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление транспортной партии продукции 646 приказа'");
			
		ИначеЕсли СоответствиеПриказам.ЕстьПродукцияПриказ648 Тогда
			
			ДействиеДоступно = НСтр("ru = 'Недостаточно прав на оформление транспортной партии продукции 648 приказа'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДействиеДоступно;
	
КонецФункции

#КонецОбласти

#КонецОбласти
