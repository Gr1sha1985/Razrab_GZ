
#Область ПрограммныйИнтерфейс

Процедура ВидимостьНовостейРазделовПриИзмененииФункциональныхОпцийПриЗаписи(Источник, Отказ) Экспорт
	
	// Не проверяем ОбменДанными.Загрузка = Истина, т.к. ФО не участвуют в РИБ и АРМ и необходимо, 
	// чтобы обработчик сработал при создании нового узла плана обмена или при изменении ФО, участвующих в обмене.
	
	Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		УстановитьВидимостьНовостейРазделов();
	Иначе
		// При изменении неразделенной константы "РазрешенаРаботаСНовостями" в режиме сервиса,
		// ставится в очередь задание по изменению видимости команд новостей разделов.
		ЗапланироватьИзменениеВидимостиНовостейРазделов();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьНовостейРазделов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИменаКонстантДляПроверки = Новый Массив;
	ИменаКонстантДляПроверки.Добавить("РазрешенаРаботаСНовостями");
	ИменаКонстантДляПроверки.Добавить("ИнтерфейсТакси");
	ИменаКонстантДляПроверки.Добавить("ВедетсяПроизводственнаяДеятельность");
	ИменаКонстантДляПроверки.Добавить("ВедетсяУчетНМА");
	ИменаКонстантДляПроверки.Добавить("ВедетсяУчетОсновныхСредств");
	
	НаборКонстантДляПроверки = Константы.СоздатьНабор(СтрСоединить(ИменаКонстантДляПроверки, ","));
	НаборКонстантДляПроверки.Прочитать();
	
	ИменаФункциональныхОпцийДляИзменения = Новый Массив;
	ИменаФункциональныхОпцийДляИзменения.Добавить("ВидимостьНовостиРазделаПолныйИнтерфейс");
	ИменаФункциональныхОпцийДляИзменения.Добавить("ВидимостьНовостиРазделаПолныйИнтерфейсОСиНМА");
	ИменаФункциональныхОпцийДляИзменения.Добавить("ВидимостьНовостиРазделаПолныйИнтерфейсПроизводство");
	
	НаборКонстантДляИзменения = Константы.СоздатьНабор(СтрСоединить(ИменаФункциональныхОпцийДляИзменения, ","));
	
	// Команды новостей разделов должны быть видны только в полном интерфейсе.
	Если НаборКонстантДляПроверки.РазрешенаРаботаСНовостями
		И НаборКонстантДляПроверки.ИнтерфейсТакси Тогда
		
		НаборКонстантДляИзменения.ВидимостьНовостиРазделаПолныйИнтерфейс = Истина;
		
		НаборКонстантДляИзменения.ВидимостьНовостиРазделаПолныйИнтерфейсОСиНМА = (НаборКонстантДляПроверки.ВедетсяУчетНМА
			Или НаборКонстантДляПроверки.ВедетсяУчетОсновныхСредств);
		
		НаборКонстантДляИзменения.ВидимостьНовостиРазделаПолныйИнтерфейсПроизводство = НаборКонстантДляПроверки.ВедетсяПроизводственнаяДеятельность;
		
	Иначе
		НаборКонстантДляИзменения.ВидимостьНовостиРазделаПолныйИнтерфейс             = Ложь;
		НаборКонстантДляИзменения.ВидимостьНовостиРазделаПолныйИнтерфейсОСиНМА       = Ложь;
		НаборКонстантДляИзменения.ВидимостьНовостиРазделаПолныйИнтерфейсПроизводство = Ложь;
	КонецЕсли;
	
	НаборКонстантДляИзменения.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#Область СПАРК

Функция ЦветаСПАРК() Экспорт
	
	ЦветаСПАРК = Новый Структура;
	ЦветаСПАРК.Вставить("ВысокийРиск",			ЦветаСтиля.ЦветГрадацияСПАРКВысокийРиск);
	ЦветаСПАРК.Вставить("СреднийРиск",			ЦветаСтиля.ЦветГрадацияСПАРКСреднийРиск);
	ЦветаСПАРК.Вставить("НизкийРиск",			ЦветаСтиля.ЦветГрадацияСПАРКНизкийРиск);
	ЦветаСПАРК.Вставить("ПросроченныеДанные",	ЦветаСтиля.ПросроченныеДанныеЦвет);
	ЦветаСПАРК.Вставить("ОсобыйТекст",			ЦветаСтиля.ЦветОсобогоТекста);
	
	Возврат ЦветаСПАРК;
	
КонецФункции

Функция СобытияМониторинга() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыНаМониторингеСПАРКРиски.Контрагент КАК Контрагент,
	|	СвойстваКонтрагентовСПАРКРиски.СвояОрганизация КАК СвояОрганизация
	|ПОМЕСТИТЬ КонтрагентыДляМониторинга
	|ИЗ
	|	РегистрСведений.КонтрагентыНаМониторингеСПАРКРиски КАК КонтрагентыНаМониторингеСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвойстваКонтрагентовСПАРКРиски КАК СвойстваКонтрагентовСПАРКРиски
	|		ПО КонтрагентыНаМониторингеСПАРКРиски.Контрагент = СвойстваКонтрагентовСПАРКРиски.Контрагент
	|ГДЕ
	|	СвойстваКонтрагентовСПАРКРиски.ИННКорректный
	|	И НЕ КонтрагентыНаМониторингеСПАРКРиски.Контрагент.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобытияМониторингаСПАРКРиски.ДатаМониторинга КАК ДатаМониторинга,
	|	СобытияМониторингаСПАРКРиски.Контрагент,
	|	ТипыСобытийСПАРКРиски.Ссылка КАК Событие,
	|	СобытияМониторингаСПАРКРиски.НовоеЗначение КАК НовоеЗначение,
	|	СобытияМониторингаСПАРКРиски.СтароеЗначение КАК СтароеЗначение,
	|	КонтрагентыДляМониторинга.СвояОрганизация КАК СвояОрганизация,
	|	"""" КАК ИНН,
	|	ТипыСобытийСПАРКРиски.Критичное КАК КритичноеСобытие,
	|	ТипыСобытийСПАРКРиски.Название КАК НазваниеСобытия
	|ИЗ
	|	РегистрСведений.СобытияМониторингаСПАРКРиски КАК СобытияМониторингаСПАРКРиски
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТипыСобытийСПАРКРиски КАК ТипыСобытийСПАРКРиски
	|		ПО СобытияМониторингаСПАРКРиски.ТипСобытияИдентификатор = ТипыСобытийСПАРКРиски.Идентификатор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КонтрагентыДляМониторинга КАК КонтрагентыДляМониторинга
	|		ПО СобытияМониторингаСПАРКРиски.Контрагент = КонтрагентыДляМониторинга.Контрагент";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаДанных;
	
КонецФункции

#КонецОбласти

// Возвращает имя, по которому программа идентифицируется в
// сервисах Интернет-поддержки.
//
// Возвращаемое значение:
//	Строка - имя программы. <Пустая строка>, если имя программы не указано.
//
Функция ИмяПрограммыДляИдентификацииВСервисахИнтернетПоддержки() Экспорт
	
	ИмяПрограммы = "";
	Если ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятия") Тогда
		ИмяПрограммы = "Accounting";
	ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятияКОРП") Тогда
		ИмяПрограммы = "AccountingCorp";
	ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятияБазовая") Тогда
		ИмяПрограммы = "AccountingBase";
	ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияПредприятияБазовая1") Тогда
		ИмяПрограммы = "AccountingOneBase";
	ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияНекоммерческойОрганизации") Тогда
		ИмяПрограммы = "AccountingNPO";
	ИначеЕсли ВРег(Метаданные.Имя) = ВРег("БухгалтерияНекоммерческойОрганизацииКОРП") Тогда
		ИмяПрограммы = "AccountingNPOCorp";
	ИначеЕсли ВРег(Метаданные.Имя) = ВРег("Садовод") Тогда
		ИмяПрограммы = "AccountingGP";
	ИначеЕсли ВРег(Метаданные.Имя) = ВРег("СадоводБазовая") Тогда
		ИмяПрограммы = "AccountingGPBase";
	КонецЕсли;
	
	Возврат ИмяПрограммы;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаНовостей

// Возвращает значение варианта отбора по ленте новостей
// Подробнее в описании метода Справочник.Новости.ПолучитьСписокНовостей()
//
Функция ВариантОтбораПоЛентеНовостей() Экспорт
	
	Возврат 1;
	
КонецФункции

Функция КоличествоКонтекстныхНовостей() Экспорт
	
	Возврат 50;
	
КонецФункции

// Функция - возвращает ссылку на элемент справочника "Ленты новостей"
// 
// Возвращаемое значение:
//  СправочникСсылка.ЛентыНовостей - ссылка на справочник
//
Функция ЛентаНовостейЧтоНового() Экспорт
	
	Возврат ОбработкаНовостейПовтИсп.ПолучитьЛентуНовостейПоКоду("WhatIsNew");
	
КонецФункции

// Функция - Порядок контекстных новостей
// 
// Возвращаемое значение:
//  Строка - перечисление через запятую порядка сортировки новостей
//
Функция ПорядокКонтекстныхНовостей() Экспорт
	
	Возврат  "Прочтена Возр, ДатаПубликации Убыв, Важность Убыв";
	
КонецФункции

// Процедура - Снятие выделения элементов дерева
//
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - строка дерева значений, с которого нужно снять пометку "Прочитано"
//
Процедура СнятиеВыделенияЭлементовДерева(СтрокаДерева) Экспорт
	
	СписокЭлементовДерева = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из СписокЭлементовДерева Цикл
		
		ЭлементДерева.ВыделеннаяСтрока = Ложь;
		СнятиеВыделенияЭлементовДерева(ЭлементДерева);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияРеквизитов

Процедура ЗаполнитьИсториюАдресов(Объект, РеквизитыКомпании) Экспорт
	
	ВидКИ = ?(ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Организации"),
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Объект.ИсторияКонтактнойИнформации.Очистить();
	
	ИсторияАдресов = ПолучитьИсториюРеквизита(РеквизитыКомпании, "Адрес");
	Если ИсторияАдресов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсторияАдресов.Количество() > 1 Тогда
		Для Каждого Адрес Из ИсторияАдресов Цикл
			СтрокаИсторииКИ = Объект.ИсторияКонтактнойИнформации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИсторииКИ, Адрес);
			СтрокаИсторииКИ.Вид      = ВидКИ;
			СтрокаИсторииКИ.Период   = Адрес.Дата;
			СтрокаИсторииКИ.Значение = Адрес.КонтактнаяИнформация;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИсториюКПП(Объект, РеквизитыКомпании) Экспорт
	
	Объект.ИсторияКПП.Очистить();
	
	ИсторияКПП = ПолучитьИсториюРеквизита(РеквизитыКомпании, "КПП");
	Если ИсторияКПП = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсторияКПП.Количество() > 1 Тогда
		Для Каждого СтрокаКПП Из ИсторияКПП Цикл
			СтрокаИсторииКПП = Объект.ИсторияКПП.Добавить();
			СтрокаИсторииКПП.Период = СтрокаКПП.Дата;
			СтрокаИсторииКПП.КПП    = СтрокаКПП.Значение;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьИсториюНаименований(Объект, РеквизитыКомпании) Экспорт
	
	ЭтоЮрЛицо = (РеквизитыКомпании.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Объект.ИсторияНаименований.Очистить();
	
	ИсторияНаименований = ПолучитьИсториюРеквизита(РеквизитыКомпании, ?(ЭтоЮрЛицо, "Наименование", "ФИО"));
	Если ИсторияНаименований = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсторияНаименований.Количество() > 1 Тогда
		Для Каждого СтрокаНаименование Из ИсторияНаименований Цикл
			СтрокаИсторииНаименований = Объект.ИсторияНаименований.Добавить();
			СтрокаИсторииНаименований.Период = СтрокаНаименование.Дата;
			ДанныеЗаполнения = Новый Структура;
			Если ЭтоЮрЛицо Тогда
				НаименованиеПолное = СтрокаНаименование.НаименованиеПолное;
				НаименованиеСокращенное = СтрокаНаименование.НаименованиеСокращенное;
			Иначе
				ФИО = СтрокаНаименование.Фамилия + " " + СтрокаНаименование.Имя + " " + СтрокаНаименование.Отчество;
				НаименованиеПолное = СтрШаблон(НСтр("ru = 'Индивидуальный предприниматель %1'"), ФИО);
				НаименованиеСокращенное = СтрШаблон(НСтр("ru = 'ИП %1'"), ФизическиеЛицаКлиентСервер.ФамилияИнициалы(ФИО));
				ДанныеЗаполнения.Вставить("ФамилияИП", СтрокаНаименование.Фамилия);
				ДанныеЗаполнения.Вставить("ИмяИП", СтрокаНаименование.Имя);
				ДанныеЗаполнения.Вставить("ОтчествоИП", СтрокаНаименование.Отчество);
			КонецЕсли;
			ЭтоКонтрагент = ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Контрагенты");
			ДанныеЗаполнения.Вставить("НаименованиеПолное", ?(ЭтоКонтрагент, НаименованиеСокращенное, НаименованиеПолное));
			ДанныеЗаполнения.Вставить("НаименованиеСокращенное", НаименованиеСокращенное);
			ЗаполнитьЗначенияСвойств(СтрокаИсторииНаименований, ДанныеЗаполнения);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИсторияРеквизитов

Функция ПолучитьИсториюРеквизита(РеквизитыКомпании, ИмяРеквизита)
	
	ИсторияРеквизитов = Неопределено;
	Результат         = Неопределено;
	Если Не (РеквизитыКомпании.Свойство("ИсторияРеквизитов", ИсторияРеквизитов)
		И ИсторияРеквизитов.Свойство(ИмяРеквизита, Результат)
		И ТипЗнч(Результат) = Тип("ТаблицаЗначений")) Тогда
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ЗапланироватьИзменениеВидимостиНовостейРазделов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбластьДанных";
	Области = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбластьДанных");
	
	Для Каждого ОбластьДанных Из Области Цикл
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ИмяМетода",     "ИнтернетПоддержкаПользователейБП.УстановитьВидимостьНовостейРазделов");
		ПараметрыЗадания.Вставить("ОбластьДанных", ОбластьДанных);
		ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти