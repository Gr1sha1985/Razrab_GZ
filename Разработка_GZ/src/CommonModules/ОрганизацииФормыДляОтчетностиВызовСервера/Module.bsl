#Область ГосударственныеОрганы

// Получает реквизиты государственного органа по коду этого органа.
// Реквизиты выбираются из справочника Контрагенты, а если там нет - из открытых данных.
//
// Параметры:
//  ВидОргана			 - ПеречислениеСсылка.ВидыГосударственныхОрганов - вид органа, реквизиты которого нужно получить
//  КодОргана			 - Строка - код государственного органа
// 
// Возвращаемое значение:
//  Строка - наименование государственного органа, реквизиты которого получены
//
Функция РеквизитыГосударственногоОрганаПоКоду(Знач ВидОргана, Знач КодОргана) Экспорт
	
	// Возвращает наименование, а реквизиты может записывать в справочник Контрагенты.
	
	РеквизитыОргана = ДанныеГосударственныхОрганов.ГосударственныйОрган(ВидОргана, КодОргана);
	Если ЗначениеЗаполнено(РеквизитыОргана.Ссылка) Тогда
		// Есть в справочнике
		Возврат РеквизитыОргана.Наименование;
	КонецЕсли;
	
	Если ВидОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		РеквизитыОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодОргана);
	ИначеЕсли ВидОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР Тогда
		РеквизитыОргана = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(КодОргана);
	ИначеЕсли ВидОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС Тогда
		РеквизитыОргана = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(КодОргана);
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОргана.ОписаниеОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОргана);
	
	Возврат РеквизитыОргана.Наименование;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДаннымиЕГР

// Запрашивает из открытых данных сведения об организации.
//
// Параметры:
//  Запрос	- см. НовыйЗапросДанныхЕГР() - сведения, позволяющие идентифицировать организацию
// 
// Возвращаемое значение:
//  см. НовыйОтветДанныхЕГР()
//
Функция ЗапроситьДанныеЕГР(Знач Запрос) Экспорт
	
	Ответ = ОрганизацииФормыДляОтчетностиКлиентСервер.НовыйОтветДанныхЕГР(Запрос);
	
	ЭтоЮрЛицо = (Запрос.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ИНН       = СокрЛП(Запрос.ИНН);
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИНН, ЭтоЮрЛицо);// ИНН не соответствующий ЭтоЮрЛицо считается соответствующим требованиям
	
	Если Не РезультатПроверки.СоответствуетТребованиям Тогда
		Ответ.Ошибка.Код = "НеСоответствуетТребованиям";
		Возврат Ответ;
	КонецЕсли;
		
	Если РезультатПроверки.ЭтоЮрЛицо Тогда
		СведенияОбОрганизации = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИНН);
		Если ЗначениеЗаполнено(СведенияОбОрганизации.ЕГРЮЛ) Тогда
			РеквизитыОрганизации = СведенияОбОрганизации.ЕГРЮЛ;
		Иначе
			РеквизитыОрганизации = Новый Структура;
			ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
			РеквизитыОрганизации.Вставить("ОписаниеОшибки", СтрШаблон(ШаблонОписанияОшибки, ИНН));
		КонецЕсли;
		РеквизитыОрганизации.Вставить("ИНН", ИНН);
		Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			Если ЗначениеЗаполнено(РеквизитыОрганизации.Руководители) Тогда
				ЗаполнитьЗначенияСвойств(Руководитель, РеквизитыОрганизации.Руководители[0]);
			Иначе
				Руководитель = Неопределено;
			КонецЕсли;
			РеквизитыОрганизации.Вставить("Руководитель", Руководитель);
			РеквизитыОрганизации.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности), РеквизитыОрганизации.ВидДеятельности.Код, Неопределено));
			РеквизитыОрганизации.Вставить("ЭтоОКВЭД2",  
				?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности) И РеквизитыОрганизации.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
	Иначе
		РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
		РеквизитыОрганизации.Вставить("КодОКВЭД",
			?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности), РеквизитыОрганизации.ВидДеятельности.Код, Неопределено));
		РеквизитыОрганизации.Вставить("ЭтоОКВЭД2",  
			?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности) И РеквизитыОрганизации.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
	КонецЕсли;
	
	РеквизитыОрганизации.Вставить("ЮридическоеФизическоеЛицо", 
		?(РезультатПроверки.ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
		
		Если РеквизитыОрганизации.ОписаниеОшибки = "НеУказаныПараметрыАутентификации"
			Или РеквизитыОрганизации.ОписаниеОшибки = "НеУказанПароль"
			Или РеквизитыОрганизации.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			
			// См. РаботаСКонтрагентами.ОбработатьОшибкуСервиса()
			
			Ответ.Ошибка.Код = РеквизитыОрганизации.ОписаниеОшибки;
			
		Иначе
			
			Ответ.Ошибка.Описание = РеквизитыОрганизации.ОписаниеОшибки;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Запрос.ОтборОПФ) Тогда
			// Установлен отбор по организационно-правовой форме
			Если РезультатПроверки.ЭтоЮрЛицо Тогда
				УдовлетворяетОтборуОПФ = (Запрос.ОтборОПФ.Найти(РеквизитыОрганизации.ПравоваяФорма) <> Неопределено);
			Иначе
				УдовлетворяетОтборуОПФ = (Запрос.ОтборОПФ.Найти("Индивидуальные предприниматели") <> Неопределено);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запрос.ОтборОПФ) И Не УдовлетворяетОтборуОПФ Тогда
			
			Если РезультатПроверки.ЭтоЮрЛицо Тогда
				Ответ.Ошибка.Описание = СтрШаблон(
					НСтр("ru = 'Не поддерживается для организационно-правовой формы ""%1"".'"),
					РеквизитыОрганизации.ПравоваяФорма);
			Иначе
				Ответ.Ошибка.Описание = НСтр("ru = 'Не поддерживается для индивидуальных предпринимателей.'");
			КонецЕсли;
			
		ИначеЕсли РезультатПроверки.ЭтоЮрЛицо <> ЭтоЮрЛицо И ЕстьДокументыПоОрганизации(Запрос.Ссылка) Тогда
		
			Ответ.Ошибка.Описание = НСтр("ru = 'Невозможно заполнить по ИНН. Существуют документы по организации.'");
		
		Иначе
		
			// Не привязываем данные к форме, потому что возможно их придется передавать между формами.
			// Очищать временное хранилище будем после заполнения самостоятельно.
			Ответ.АдресДанных = ПоместитьВоВременноеХранилище(РеквизитыОрганизации, Новый УникальныйИдентификатор);
			Ответ.КраткиеДанные.НаименованиеОрганизации   = РеквизитыОрганизации.Наименование;
			Ответ.КраткиеДанные.ЮридическоеФизическоеЛицо = РеквизитыОрганизации.ЮридическоеФизическоеЛицо;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ЕстьДокументыПоОрганизации(Организация)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

#КонецОбласти

#Область СтандартныеКлассификаторы

// Определяет наименование элемента общегосударственного классификатора,
// данные которых хранятся в справочнике Организации.
//
// Параметры:
//  Классификатор		 - Строка - имя классификатора: ОКФС, ОКОПФ, ОКВЭД, ОКВЭД2
//  КодПоКлассификатору	 - Строка - код по классификатору
// 
// Возвращаемое значение:
//  Строка       - наименование по классификатору
//  Неопределено - код не найден в классификаторе
//
Функция НаименованиеПоКлассификатору(Знач Классификатор, Знач КодПоКлассификатору) Экспорт

	Классификатор = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор(Классификатор);
	
	Возврат Классификатор.Получить(КодПоКлассификатору);

КонецФункции

#КонецОбласти
