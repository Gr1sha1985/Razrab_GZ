
#Область ПрограммныйИнтерфейс

Функция ОписаниеДействия(ПараметрыКоманды) Экспорт
	
	Возврат ВыполнениеЗадачБухгалтера.ОписаниеДействия(ПараметрыКоманды);
	
КонецФункции

Функция ПрекратитьВыполнение(Организация, Правило) Экспорт
	
	Если ЗначениеЗаполнено(Правило) Тогда
	
		ПравилоОбъект = Правило.ПолучитьОбъект();
		ПравилоОбъект.Выполняется = Ложь;
		ПравилоОбъект.Записать();
		
		Возврат РегистрыСведений.ЗадачиБухгалтера.УдалитьЗаписиПоПравилу(Организация, Правило);
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;
	
КонецФункции

Функция ПеренестиВАрхив(Знач ПараметрыКоманды) Экспорт
	
	КлючЗаписи = РегистрыСведений.ЗадачиБухгалтера.УстановитьСтатусВыполнено(ПараметрыКоманды);
	ИсторияРаботыПользователя.Добавить(КлючЗаписи);
	
	Возврат КлючЗаписи; // Для оповещения форм и пользователя
	
КонецФункции

Функция ЗарегистрироватьВЖурналеОткрытиеФормы(Знач ИмяФормы) Экспорт

	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Открытие ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ИмяФормы);

	ВыполнениеЗадачБухгалтера.ЗарегистрироватьСобытиеВЖурнале(ТекстКомментария);

КонецФункции

Функция ЗарегистрироватьВЖурналеПоказПредупреждения(Знач ТекстПредупреждения) Экспорт

	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Показ предупреждения ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		ТекстПредупреждения);

	ВыполнениеЗадачБухгалтера.ЗарегистрироватьСобытиеВЖурнале(ТекстКомментария);

КонецФункции

Функция ЗарегистрироватьВЖурналеПереходПоСсылке(Знач Ссылка) Экспорт

	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Переход по ссылке ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка()),
		Ссылка);

	ВыполнениеЗадачБухгалтера.ЗарегистрироватьСобытиеВЖурнале(ТекстКомментария);

КонецФункции

// Возвращает состояние регламентного задания по обновлению задач бухгалтера.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//		* Использование - Булево - Истина, если рег.задание включено.
//		* ЭтоПолноправныйПользователь - Булево - Истина, если пользователь может включать/отключать рег.задание.
//
Функция СостояниеРегламентногоЗаданияОбновленияЗадачБухгалтера() Экспорт

	Результат = Новый Структура();
	Результат.Вставить("Использование",               Ложь);
	Результат.Вставить("ЭтоПолноправныйПользователь", Пользователи.ЭтоПолноправныйПользователь(, Истина));
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		// В режиме сервиса считаем, что задачи бухгалтера обновляются всегда.
		Результат.Использование = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		
		Результат.Использование = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(
				Метаданные.РегламентныеЗадания.ОбновлениеЗадачБухгалтера);

		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Устанавливает признак Использование в Истина для регламентного задания ОбновлениеЗадачБухгалтера в локальном режиме.
// В режиме сервиса ничего не выполняет, запуск заданий происходит через очередь заданий.
// Требует наличия административных прав.
//
Процедура ВключитьАвтоматическоеОбновлениеЗадачБухгалтера() Экспорт

	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		// В режиме сервиса считаем, что задачи бухгалтера обновляются всегда.
		Возврат;
	КонецЕсли;

	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеЗадачБухгалтера, Истина);

	// С задачами бухгалтера также связан показ проверок контролирующими органами,
	// который мог быть отключен в форме панели администрирования "Производительность".
	// Включим его тоже.
	РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
		Метаданные.РегламентныеЗадания.ОбновлениеПроверокКонтролирующимиОрганами, Истина);

КонецПроцедуры

#КонецОбласти