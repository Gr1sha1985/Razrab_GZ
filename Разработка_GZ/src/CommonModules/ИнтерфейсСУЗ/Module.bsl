#Область ПрограммныйИнтерфейс

#Область Формат_V1

Функция СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V1(ТелоЗапросаJSON, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                 Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",          Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеБизнесЗаказа",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");

	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	URLЗапроса = "api/orders";
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапросаJSON, Неопределено, "POST", ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				
				ПроверятьПосле = ТекущаяДатаСеанса() + Окр(ДанныеОбработки.expectedCompleteTimestamp / 1000, 0, РежимОкругления.Окр15как20);
				
				ДанныеБизнесЗаказа = Новый Структура;
				ДанныеБизнесЗаказа.Вставить("ИдентификаторЗаявки", ДанныеОбработки.orderId);
				ДанныеБизнесЗаказа.Вставить("ПроверятьПосле",      ПроверятьПосле);
				
				ВозвращаемоеЗначение.ДанныеБизнесЗаказа = ДанныеБизнесЗаказа;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусПулаКодовМаркировкиИзБизнесЗаказа_V1(ПараметрыЗапроса, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                 Перечисления.ВидыОперацийИСМП.ПолучениеСтатусаПулаКодовМаркировкиИзСУЗ);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",          Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ДанныеПула",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	URLЗапроса = СтрШаблон(
		"api/poolStatus?orderId=%1&orderLineId=%2",
		КодироватьСтроку(ПараметрыЗапроса.ИдентификаторБизнесЗаказа, СпособКодированияСтроки.КодировкаURL),
		КодироватьСтроку(ПараметрыЗапроса.ИдентификаторСтрокиЗаказа, СпособКодированияСтроки.КодировкаURL));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсСУЗСлужебный.СтатусПулаКодовМаркировки_V1(ДанныеОбработки.status);
				
				ДанныеПула = Новый Структура;
				ДанныеПула.Вставить("GTIN",       ДанныеОбработки.gtin);
				ДанныеПула.Вставить("Количество", ДанныеОбработки.quantity);
				ДанныеПула.Вставить("Остаток",    ДанныеОбработки.left);
				ДанныеПула.Вставить("Статус",     Статус);
				
				Если Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Обрабатывается Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
				ИначеЕсли Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Иначе
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				КонецЕсли;
				
				ВозвращаемоеЗначение.ДанныеПула = ДанныеПула;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьКодыМаркировкиИзБизнесЗаказа_V1(ПараметрыЗапроса, КоличествоКодовМаркировки, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                 Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",          Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеБлока",              Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	URLЗапроса = СтрШаблон(
		"api/codes?orderId=%1&orderLineId=%2&quantity=%3",
		КодироватьСтроку(ПараметрыЗапроса.ИдентификаторБизнесЗаказа, СпособКодированияСтроки.КодировкаURL),
		КодироватьСтроку(ПараметрыЗапроса.ИдентификаторСтрокиЗаказа, СпособКодированияСтроки.КодировкаURL),
		Формат(КоличествоКодовМаркировки, "ЧГ=0;"));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Ожидаемый результат запроса:
			// Массив Из Строка - Массив кодов маркировки
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
				ДанныеБлока = Новый Структура;
				ДанныеБлока.Вставить("КодыМаркировки",                    ДанныеОбработки);
				ДанныеБлока.Вставить("ИдентификаторПоследнегоБлокаКодов", 0);
				
				ВозвращаемоеЗначение.ДанныеБлока = ДанныеБлока;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПередатьОтчетОбИспользованииКодовМаркировкиБизнесЗаказа_V1(ТелоЗапроса, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса", Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                 Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",          Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",      Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",              "");
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	ТелоЗапросаJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса);
	
	URLЗапроса = "api/reports";
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(
		URLЗапроса, ТелоЗапросаJSON, Неопределено, "POST",
		ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ДанныеОбработки;
				
			КонецЕсли;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьОтчетОбИспользовании_V1(Идентификатор, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",    Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	ВозвращаемоеЗначение.Вставить("ДанныеОтчетаОбИспользовании", Неопределено);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	URLЗапроса = СтрШаблон("api/usage?productionOrderId=%1", Идентификатор);
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеОтчетаОбИспользовании = Новый ТаблицаЗначений();
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("ИдентификаторЗаказа", Новый ОписаниеТипов("Строка"));
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("КодМаркировки",       Новый ОписаниеТипов("Строка"));
				ДанныеОтчетаОбИспользовании.Колонки.Добавить("Статус",              Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиСУЗ"));
				
				ВозвращаемоеЗначение.ДанныеОтчетаОбИспользовании = Неопределено;
				Для Каждого БизнесЗаказ Из ДанныеОбработки Цикл
					
					Для Каждого Элемент Из БизнесЗаказ.businessOrderReports Цикл
						
						Для Каждого ЭлементСтатуса Из Элемент.codeStatuses  Цикл
							
							СтрокаТЧ = ДанныеОтчетаОбИспользовании.Добавить();
							СтрокаТЧ.ИдентификаторЗаказа = Элемент.orderId;
							СтрокаТЧ.ИдентификаторСтроки = Элемент.orderLineId;
							СтрокаТЧ.КодМаркировки       = ЭлементСтатуса.sntin;
							СтрокаТЧ.Статус              = ИнтерфейсСУЗСлужебный.СтатусКодаМаркировки(ЭлементСтатуса.codeStatus);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
				ВозвращаемоеЗначение.ДанныеОтчетаОбИспользовании = ДанныеОтчетаОбИспользовании;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьСтатусБизнесЗаказа_V1(Идентификатор, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",    Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	ВозвращаемоеЗначение.Вставить("ПараметрыСтатуса",            Неопределено);
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ПараметрыСУЗ.Токен);
	
	URLЗапроса = СтрШаблон(
		"api/orders?productionOrderId=%1",
		Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
//				ДанныеОтчетаОбИспользовании = Новый ТаблицаЗначений();
//				ДанныеОтчетаОбИспользовании.Колонки.Добавить("ИдентификаторЗаказа", Новый ОписаниеТипов("Строка"));
//				ДанныеОтчетаОбИспользовании.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка"));
//				ДанныеОтчетаОбИспользовании.Колонки.Добавить("КодМаркировки",       Новый ОписаниеТипов("Строка"));
//				ДанныеОтчетаОбИспользовании.Колонки.Добавить("Статус",              Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиСУЗ"));
//
//				ВозвращаемоеЗначение.ДанныеОтчетаОбИспользовании = Неопределено;
//				Для Каждого БизнесЗаказ Из ДанныеОбработки Цикл
//
//					Для Каждого Элемент Из БизнесЗаказ.businessOrderReports Цикл
//
//						Для Каждого ЭлементСтатуса Из Элемент.codeStatuses  Цикл
//
//							СтрокаТЧ = ДанныеОтчетаОбИспользовании.Добавить();
//							СтрокаТЧ.ИдентификаторЗаказа = Элемент.orderId;
//							СтрокаТЧ.ИдентификаторСтроки = Элемент.orderLineId;
//							СтрокаТЧ.КодМаркировки       = ЭлементСтатуса.sntin;
//							СтрокаТЧ.Статус              = ИнтерфейсСУЗСлужебный.СтатусКодаМаркировки(ЭлементСтатуса.codeStatus);
//
//						КонецЦикла;
//
//					КонецЦикла;
//
//				КонецЦикла;
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
				ВозвращаемоеЗначение.ПараметрыСтатуса = Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Формат_V2

Функция СоздатьБизнесЗаказНаЭмиссиюКодовМаркировки_V2(ТелоЗапросаJSON, ВидПродукции, ПараметрыСУЗ, Подпись = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ЗаказНаЭмиссиюКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеБизнесЗаказа",             Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  ТокенДоступа);
	Если Подпись <> Неопределено Тогда
		ЗаголовокHTTP.Вставить(
			"X-Signature", ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/orders?omsId=%1", ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапросаJSON, Неопределено, "POST", ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * orderId - GUID - Идентификатор заявки
			//  * expectedCompletionTime - Строка - Время в миллисекундах
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				
				Если ДанныеОбработки.Свойство("expectedCompleteTimestamp") Тогда
					ОжидаемаяДатаЗавершенияОбработки = ДанныеОбработки.expectedCompleteTimestamp;
				ИначеЕсли ДанныеОбработки.Свойство("expectedCompletionTime") Тогда
					ОжидаемаяДатаЗавершенияОбработки = ДанныеОбработки.expectedCompletionTime;
				Иначе
					ОжидаемаяДатаЗавершенияОбработки = 10000;
				КонецЕсли;
				
				ПроверятьПосле = ТекущаяДатаСеанса() + Окр(ОжидаемаяДатаЗавершенияОбработки / 1000, 0, РежимОкругления.Окр15как20);
				
				ДанныеБизнесЗаказа = Новый Структура;
				ДанныеБизнесЗаказа.Вставить("ИдентификаторЗаявки", ДанныеОбработки.orderId);
				ДанныеБизнесЗаказа.Вставить("ПроверятьПосле",      ПроверятьПосле);
				
				ВозвращаемоеЗначение.ДанныеБизнесЗаказа = ДанныеБизнесЗаказа;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПередатьОтчетОСписанииКодовМаркировки_V2(ТелоЗапросаJSON, ВидПродукции, ПараметрыСУЗ, Подпись = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.СписаниеЭмитированныхКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ТокенДоступа);
	Если ЗначениеЗаполнено(ПараметрыСУЗ.ИмяПользователя) Тогда
		ЗаголовокHTTP.Вставить("userName", ПараметрыСУЗ.ИмяПользователя);
	КонецЕсли;
	Если Подпись <> Неопределено Тогда
		ЗаголовокHTTP.Вставить(
			"X-Signature", ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/dropout?omsId=%1", ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапросаJSON, Неопределено, "POST", ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * reportId - GUID - Идентификатор отчета
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ДанныеОбработки.reportId;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПередатьОтчетОбИспользованииКодовМаркировки_V2(ТелоЗапросаJSON, ЭлементОчереди, ПараметрыСУЗ, Подпись = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       ЭлементОчереди.Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ТокенДоступа);
	Если ЗначениеЗаполнено(ПараметрыСУЗ.ИмяПользователя) Тогда
		ЗаголовокHTTP.Вставить("userName", ПараметрыСУЗ.ИмяПользователя);
	КонецЕсли;
	Если Подпись <> Неопределено Тогда
		ЗаголовокHTTP.Вставить(
			"X-Signature", ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/utilisation?omsId=%1", ЭлементОчереди.ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапросаJSON, Неопределено, "POST", ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * reportId - GUID - Идентификатор отчета
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ДанныеОбработки.reportId;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПередатьОтчетОбАгрегацииКодовМаркировки_V2(ТелоЗапросаJSON, ЭлементОчереди, ПараметрыСУЗ, Подпись = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       ЭлементОчереди.Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗаявки",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ТокенДоступа);
	Если ЗначениеЗаполнено(ПараметрыСУЗ.ИмяПользователя) Тогда
		ЗаголовокHTTP.Вставить("userName", ПараметрыСУЗ.ИмяПользователя);
	КонецЕсли;
	Если Подпись <> Неопределено Тогда
		ЗаголовокHTTP.Вставить(
			"X-Signature", ИнтеграцияИСКлиентСервер.ДвоичныеДанныеBase64(Подпись));
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/aggregation?omsId=%1", ЭлементОчереди.ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, ТелоЗапросаJSON, Неопределено, "POST", ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * reportId - GUID - Идентификатор отчета
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
				
				ВозвращаемоеЗначение.ИдентификаторЗаявки = ДанныеОбработки.reportId;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗакрытьПодзаказПоGTIN_V2(ПараметрыЗакрытия, ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ЗакрытиеПодзаказаНаЭмиссиюКодовМаркировкиСУЗ);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ТокенДоступа);
	
	Если ПараметрыЗакрытия.Свойство("GTIN") Тогда
		URLЗапроса = СтрШаблон(
			URLЗапроса_V2("api/v2/extension/buffer/close?orderId=%1&gtin=%2&omsId=%3&lastBlockId=%4", ВидПродукции),
			ПараметрыЗакрытия.ИдентификаторБизнесЗаказа,
			ПараметрыЗакрытия.GTIN,
			ПараметрыСУЗ.Идентификатор,
			ПараметрыЗакрытия.ИдентификаторПоследнегоБлокаКодов);
	Иначе
		URLЗапроса = СтрШаблон(
			URLЗапроса_V2("api/v2/extension/buffer/close?orderId=%1&omsId=%2", ВидПродукции),
			ПараметрыЗакрытия.ИдентификаторБизнесЗаказа,
			ПараметрыСУЗ.Идентификатор);
	КонецЕсли;
	РезультатЗапроса = ИнтеграцияИСМП.ОтправитьДанныеВСервис(URLЗапроса, Неопределено, Неопределено, "POST", ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьКодыМаркировкиИзБизнесЗаказа_V2(ПараметрыЗапроса, КоличествоКодовМаркировки, ИдентификаторБлокаКодов, ЭлементОчереди, ПараметрыСУЗ) Экспорт
	
	ВидПродукции = ЭлементОчереди.ВидПродукции;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       ЭлементОчереди.Операция);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеБлока",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ТокенДоступа);
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить(СтрШаблон("omsId=%1",    ПараметрыСУЗ.Идентификатор));
	ПараметрыURL.Добавить(СтрШаблон("orderId=%1",  ПараметрыЗапроса.ИдентификаторБизнесЗаказа));
	ПараметрыURL.Добавить(СтрШаблон("gtin=%1",     ПараметрыЗапроса.GTIN));
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеПолучениеКодовМаркировкиИзСУЗ Тогда
		
		ПараметрыURL.Добавить(СтрШаблон("blockId=%1", ИдентификаторБлокаКодов));
		
		URLЗапроса = СтрШаблон(
			URLЗапроса_V2("api/v2/extension/codes/retry?%1", ВидПродукции),
			СтрСоединить(ПараметрыURL, "&"));
	Иначе
		
		ПараметрыURL.Добавить(СтрШаблон("quantity=%1", Формат(КоличествоКодовМаркировки, "ЧГ=0;")));
		Если ЗначениеЗаполнено(ИдентификаторБлокаКодов) Тогда
			ПараметрыURL.Добавить(СтрШаблон("lastBlockId=%1", ИдентификаторБлокаКодов));
		КонецЕсли;
		
		URLЗапроса = СтрШаблон(
			URLЗапроса_V2("api/v2/extension/codes?%1", ВидПродукции),
			СтрСоединить(ПараметрыURL, "&"));
		
	КонецЕсли;
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * codes - Массиз Из Строка - Полученные коды маркировки
			//  * blockId - Строка - Идентификатор пакета кодов маркировки
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ДанныеБлока = Новый Структура;
				ДанныеБлока.Вставить("КодыМаркировки",                    ДанныеОбработки.codes);
				ДанныеБлока.Вставить("ИдентификаторПоследнегоБлокаКодов", ДанныеОбработки.blockId);
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
				ВозвращаемоеЗначение.ДанныеБлока = ДанныеБлока;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если СтрНайти(ВозвращаемоеЗначение.ТекстОшибки, "Billing response didn't received in time. Close request sent") Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			ИначеЕсли Не ЗначениеЗаполнено(СокрЛП(ВозвращаемоеЗначение.ТекстОшибки)) Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			Иначе
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьСписокИдентификаторовПакетовБизнесЗаказа_V2(ПараметрыЗапроса, ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеКодовМаркировкиИзСУЗ);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ДанныеБлоков",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ТокенДоступа);
	
	ПараметрыURL = Новый Массив;
	ПараметрыURL.Добавить(СтрШаблон("omsId=%1",    ПараметрыСУЗ.Идентификатор));
	ПараметрыURL.Добавить(СтрШаблон("orderId=%1",  ПараметрыЗапроса.ИдентификаторБизнесЗаказа));
	ПараметрыURL.Добавить(СтрШаблон("gtin=%1",     ПараметрыЗапроса.GTIN));
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/codes/blocks?%1", ВидПродукции),
		СтрСоединить(ПараметрыURL, "&"));
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * codes - Массиз Из Строка - Полученные коды маркировки
			//  * blockId - Строка - Идентификатор пакета кодов маркировки
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				БлокиКодов = Новый Массив;
				
				Если ДанныеОбработки.Свойство("blocks") Тогда
					Для Каждого СтрокаБлока Из ДанныеОбработки.blocks Цикл
						
						БлокКодов = Новый Структура();
						БлокКодов.Вставить("ИдентификаторБлока", СтрокаБлока.blockId);
						БлокКодов.Вставить("Количество",         СтрокаБлока.quantity);
						БлокКодов.Вставить("ДатаСоздания",       ИнтеграцияИС.ДатаИзСтрокиUNIX(СтрокаБлока.blockDateTime));
						
						БлокиКодов.Добавить(БлокКодов);
						
					КонецЦикла;
				КонецЕсли;
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
				ВозвращаемоеЗначение.ДанныеБлоков = БлокиКодов;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
			Если СтрНайти(ВозвращаемоеЗначение.ТекстОшибки, "Billing response didn't received in time. Close request sent") Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			ИначеЕсли Не ЗначениеЗаполнено(СокрЛП(ВозвращаемоеЗначение.ТекстОшибки)) Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			Иначе
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусПулаКодовМаркировкиИзБизнесЗаказа_V2(ПараметрыЗапроса, ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеСтатусаПулаКодовМаркировкиИзСУЗ);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Перечисления.СтатусыОбработкиСообщенийИСМП.ПустаяСсылка());
	ВозвращаемоеЗначение.Вставить("ДанныеПула",                     Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type",   "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",         "application/json");
	ЗаголовокHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовокHTTP.Вставить("clientToken",    ТокенДоступа);
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/buffer/status?omsId=%1&orderId=%2&gtin=%3", ВидПродукции),
		ПараметрыСУЗ.Идентификатор,
		ПараметрыЗапроса.ИдентификаторБизнесЗаказа,
		ПараметрыЗапроса.GTIN);
	
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * availableCodes - Число - Общее количество доступных кодов маркировки для товара в буфере и пулах регистратора
			//  * bufferStatus - Строка - Статус буфера
			//  * gtin - Строка - GTIN
			//  * leftInBuffer - Число - Количество неиспользованных кодов маркировки (локальный буфер)
			//  * omsId - Строка - Уникальный идентификатор СУЗ
			//  * orderId - Строка - Уникальный идентификатор заказа на эмиссию кодов маркировки
			//  * poolInfos - Массив Из Структура - Массив пулов, созданных для буфера:
			//     ** isRegistrarReady - Булево - Готовность РЭ
			//     ** lastRegistrarErrorTimestamp - Число - Метка времени, последней наблюдавшейся ошибки РЭ
			//     ** leftInRegistrar - Число - Оставшееся количество КМ в пуле
			//     ** quantity - Число - Заказанное количество КМ в пуле
			//     ** registrarErrorCount - Число - Количество ошибок РЭ
			//     ** registrarId - Строка - Идентификатор РЭ (номер)
			//     ** rejectionReason - Строка - Причина отказа
			//     ** status - Строка - Статус пула КМ
			//  * poolsExhausted - Булево - Пулы кодов маркировки в регистраторах исчерпаны
			//  * rejectionReason - Строка - Причина отклонения буфера СУЗ-ом
			//  * totalCodes - Число - Заказанное количество кодов маркировки в заказе
			//  * totalPassed - Число - Суммарное количество кодов маркировки полученных из буфера
			//  * unavailableCodes - Строка - Идентификатор пакета кодов маркировки
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсСУЗСлужебный.СтатусПулаКодовМаркировки_V2(ДанныеОбработки.bufferStatus);
				
				ДанныеПула = Новый Структура;
				ДанныеПула.Вставить("GTIN",       ДанныеОбработки.gtin);
				ДанныеПула.Вставить("Количество", ДанныеОбработки.totalCodes);
				ДанныеПула.Вставить("Остаток",    ДанныеОбработки.leftInBuffer);
				ДанныеПула.Вставить("Статус",     Статус);
				
				Если Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Отклонен Тогда
					
					ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.rejectionReason;
					
				ИначеЕсли Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка Тогда
					
					Ошибки = Новый Массив;
					Ошибки.Добавить(ДанныеОбработки.rejectionReason);
					
					Для Каждого ЭлементДанных Из ДанныеОбработки.poolInfos Цикл
						Если Не ЗначениеЗаполнено(ЭлементДанных.rejectionReason) Тогда
							Продолжить;
						КонецЕсли;
						Ошибки.Добавить(
							СтрШаблон(НСтр("ru = 'Регистратор %1: %2'"),
							ЭлементДанных.registrarId, ЭлементДанных.rejectionReason));
					КонецЦикла;
					
					ВозвращаемоеЗначение.ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
					
				КонецЕсли;
				
				Если Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Обрабатывается Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
				ИначеЕсли Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Ошибка
					Или Статус = Перечисления.СтатусыПулаКодовМаркировкиСУЗ.Отклонен Тогда
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Иначе
					ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				КонецЕсли;
				
				ВозвращаемоеЗначение.ДанныеПула = ДанныеПула;
				
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПроверитьДоступностьСУЗ_V2(ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Доступен",                       Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	КодыОшибокОбновленияКлючаСессии = Новый Массив;
	
	Если ЗначениеЗаполнено(ПараметрыСУЗ.ИдентификаторСоединения) Тогда
		КодыОшибокОбновленияКлючаСессии.Добавить(1100);
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  ТокенДоступа);
	
	Если ВидПродукции = Неопределено Тогда
		ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь;
		ПодключенныеВидыПродукции = ИнтеграцияИСМПКлиентСерверПовтИсп.ВидыПродукцииОбязательнойМаркировки(Неопределено);
		Если ПодключенныеВидыПродукции.Количество() Тогда
			ВидПродукции = ПодключенныеВидыПродукции[0];
		КонецЕсли;
	КонецЕсли;
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/ping?omsId=%1", ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.Доступен = Истина;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		ИначеЕсли РезультатОтправкиЗапроса.КодСостояния = 400 Тогда
			
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			
			Если ДанныеОбработки <> Неопределено
				И ДанныеОбработки.Свойство("globalErrors") Тогда
				
				Для Каждого СтрокаОшибка Из ДанныеОбработки.globalErrors Цикл
					Если СтрокаОшибка.Свойство("errorCode")
						И КодыОшибокОбновленияКлючаСессии.Найти(СтрокаОшибка.errorCode) <> Неопределено Тогда
						ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		Иначе
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусыБизнесЗаказов_V2(ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("Список",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/x-www-form-urlencoded;charset=UTF-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  ТокенДоступа);
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/orders?omsId=%1", ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * orderInfos - Массив Из Структура - Идентификатор отчета:
			//    ** orderId - Строка - Идентификатор заказа на эмиссию
			//    ** orderStatus - Строка - Статус
			//    ** buffers - Массив Из Структура - Массив информации о статусе буферов:
			//       *** isRegistrarReady - Булево - Готовность РЭ
			//       *** lastRegistrarErrorTimestamp - Число - Метка времени, последней наблюдавшейся ошибки РЭ
			//       *** leftInRegistrar - Число - Оставшееся количество КМ в пуле
			//       *** quantity - Число - Заказанное количество КМ в пуле
			//       *** registrarErrorCount - Число - Количество ошибок РЭ
			//       *** registrarId - Строка - Идентификатор РЭ (номер)
			//       *** rejectionReason - Строка - Причина отказа
			//       *** status - Строка - Статус пула КМ
			//    ** createdTimestamp - Число - Время создания заказа
			//    ** declineReason - Строка - Причина отклонения заказа
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Список = Новый Массив;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОбработки, "orderInfos") Тогда
					Для Каждого ЭлементДанных Из ДанныеОбработки.orderInfos Цикл
						
						Статус = ИнтерфейсСУЗСлужебный.СтатусБизнесЗаказа(ЭлементДанных.orderStatus);
						
						ДанныеПоЗаказуНаЭмиссию = Новый Структура;
						ДанныеПоЗаказуНаЭмиссию.Вставить("ИдентификаторЗаявки", ЭлементДанных.orderId);
						ДанныеПоЗаказуНаЭмиссию.Вставить("Статус",              Статус);
						Если Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Ошибка Тогда
							ДанныеПоЗаказуНаЭмиссию.Вставить("ТекстОшибки", ЭлементДанных.declineReason);
						Иначе
							ДанныеПоЗаказуНаЭмиссию.Вставить("ТекстОшибки", "");
						КонецЕсли;
						
						Список.Добавить(ДанныеПоЗаказуНаЭмиссию);
						
					КонецЦикла;
				КонецЕсли;
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				ВозвращаемоеЗначение.Список          = Список;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусОбработкиОтчета_V2(ИдентификаторОтчета, ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Операция",                       Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  ТокенДоступа);
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/report/info?omsId=%1&reportId=%2", ВидПродукции),
		ПараметрыСУЗ.Идентификатор,
		ИдентификаторОтчета);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * reportId - GUID - Идентификатор отчета
			//  * reportStatus - Строка - Статус
			//  * errorReason - Строка - Причина отклонения отчета - заполняется, если reportStatus = REJECTED
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				Статус = ИнтерфейсСУЗСлужебный.СтатусОбработкиОтчета(ДанныеОбработки.reportStatus);
				
				Если Статус = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена Тогда
					ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.errorReason;
				КонецЕсли;
				
				ВозвращаемоеЗначение.СтатусОбработки = Статус;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьСписокПродукции_V2(ПараметрыЗапроса, ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("СписокПродукции",                Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  ТокенДоступа);
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/product/info?omsId=%1", ВидПродукции),
		ПараметрыСУЗ.Идентификатор);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * products - Массив Из Структура:
			//    ** gtin - Строка - GTIN
			//    ** name - Строка - Наименование продукции
			//    ** productAttributes - Структура - Свойства продукции
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
				СписокПродукции = Новый Массив;
				Для Каждого ЭлементДанных Из ДанныеОбработки.products Цикл
					
					ДанныеПродукции = Новый Структура;
					ДанныеПродукции.Вставить("GTIN",         ЭлементДанных.gtin);
					ДанныеПродукции.Вставить("Наименование", ЭлементДанных.name);
					ДанныеПродукции.Вставить("Свойства",     ЭлементДанных.productAttributes);
					
					СписокПродукции.Добавить(ДанныеПродукции);
					
				КонецЦикла;
				
				ВозвращаемоеЗначение.СписокПродукции = СписокПродукции;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗапроситьТокен_V2(ПараметрыЗапроса, ВидПродукции, ПараметрыСУЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса",       Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",                Неопределено);
	ВозвращаемоеЗначение.Вставить("Токен",                          Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	ТокенДоступа = ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ);
	
	Если ТокенДоступа = Неопределено Тогда
		ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	ЗаголовокHTTP = Новый Соответствие();
	ЗаголовокHTTP.Вставить("Content-Type", "application/json; charset=utf-8");
	ЗаголовокHTTP.Вставить("Accept",       "application/json");
	ЗаголовокHTTP.Вставить("clientToken",  ТокенДоступа);
	
	URLЗапроса = СтрШаблон(
		URLЗапроса_V2("api/v2/extension/token?omsId=%1&username=%2&password=%3", ВидПродукции),
		ПараметрыСУЗ.Идентификатор,
		ПараметрыЗапроса.ИмяПользователя,
		ПараметрыЗапроса.Пароль);
	РезультатЗапроса = ИнтеграцияИСМП.ПолучитьДанныеИзСервиса(URLЗапроса, Неопределено, ПараметрыСУЗ, ЗаголовокHTTP);
	
	РезультатОтправкиЗапроса = ИнтерфейсМОТПСлужебный.ОбработатьРезультатОтправкиHTTPЗапросаКакJSON(РезультатЗапроса);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ОтветПолучен Тогда
		
		Если РезультатОтправкиЗапроса.КодСостояния = 200 Тогда
			
			// Структура - Ожидаемое результат запроса:
			//  * omsId - GUID - Идентификатор СУЗ
			//  * token - Строка - Токен
			ДанныеОбработки = ИнтерфейсМОТПСлужебный.ТекстJSONВОбъект(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияJSON);
			Если ДанныеОбработки = Неопределено Тогда
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
				
				ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
					URLЗапроса,
					РезультатОтправкиЗапроса);
				
			Иначе
				
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
				
				ВозвращаемоеЗначение.Токен = ДанныеОбработки.token;
				
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначение;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
			
			ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
				URLЗапроса,
				РезультатОтправкиЗапроса);
			
		КонецЕсли;
		
	Иначе
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.Ошибка;
		
		ВозвращаемоеЗначение.ТекстОшибки = ИнтерфейсМОТПСлужебный.ТекстОшибкиПоРезультатуОтправкиЗапроса(
			URLЗапроса,
			РезультатОтправкиЗапроса);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВремяОжиданияСледующегоЗапросаСУЗ(НастройкаОбмена) Экспорт
	
	РазрешеннаяДатаСледующегоЗапроса = НастройкаОбмена.ДатаПоследнегоЗапроса + НастройкаОбмена.ИнтервалМеждуЗапросами;
	ВремяОжиданияСледующегоЗапроса = РазрешеннаяДатаСледующегоЗапроса - ТекущаяДатаСеанса();
	Если ВремяОжиданияСледующегоЗапроса < 0 Тогда
		ВремяОжиданияСледующегоЗапроса = 0;
	КонецЕсли;
	
	Возврат ВремяОжиданияСледующегоЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТокенДоступаПоПараметрамСУЗ(ПараметрыСУЗ)
	
	Если ЗначениеЗаполнено(ПараметрыСУЗ.ИдентификаторСоединения) Тогда
		ТокенДоступа = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(
			ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(ПараметрыСУЗ));
	Иначе
		ТокенДоступа = ПараметрыСУЗ.Токен;
	КонецЕсли;
	
	Возврат ТокенДоступа;
	
КонецФункции

Функция URLЗапроса_V2(URLЗапроса, ВидПродукцииИС)
	
	Если ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Табак Тогда
		ВидПродукции = "tobacco";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Шины Тогда
		ВидПродукции = "tires";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Духи Тогда
		ВидПродукции = "perfum";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Фотоаппараты Тогда
		ВидПродукции = "photo";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
			Или ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		ВидПродукции = "milk";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Велосипеды Тогда
		ВидПродукции = "bicycle";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.КреслаКоляски Тогда
		ВидПродукции = "wheelchairs";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность Тогда
		ВидПродукции = "lp";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.Обувь Тогда
		ВидПродукции = "shoes";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
		ВидПродукции = "otp";
	ИначеЕсли ВидПродукцииИС = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		ВидПродукции = "water";
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вид продукции: %1'"),
			ВидПродукцииИС);
	КонецЕсли;
	
	Возврат СтрЗаменить(URLЗапроса, "extension", ВидПродукции);
	
КонецФункции

#КонецОбласти