////////////////////////////////////////////////////////////////////////////////
// ПоступлениеНаРасчетныйСчетФормы: клиентские процедуры и функции, вызываемые из форм
// документа "Поступление на расчетный счет".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ЕстьРасшифровкаПлатежа(Знач ВидОперации) Экспорт
	
	ЕстьРасшифровка =
		ВидОперации     = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратЗаймаКонтрагентом")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеЗайма")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПолучениеКредита")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаОтФакторинговойКомпании");
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

Процедура ИнициализироватьСвойстваПлатежа(Форма) Экспорт
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПустаяСтруктураСвойстваПлатежа();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение") Тогда
		КлючеваяОперация = "ПроведениеПоступлениеНаРасчетныйСчет";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Оповестить("ОбновитьФорму", Форма.ВладелецФормы, Объект.Ссылка);
	Оповестить("ИзменениеВыписки");
	ОповеститьОбИзменении(Тип("ДокументСсылка.ПлатежноеТребование"));
	
	Если ПараметрыЗаписи.Свойство("ОплаченныеСчета") И ПараметрыЗаписи.ОплаченныеСчета.Количество() > 0 Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
		Оповестить("ИзмененСтатусДокументов", ПараметрыЗаписи.ОплаченныеСчета, Объект.Ссылка);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ОповеститьОбИзмененииСтатусаПредупрежденияЗагрузкиВыписки")
		И ПараметрыЗаписи.ОповеститьОбИзмененииСтатусаПредупрежденияЗагрузкиВыписки Тогда
		ОповеститьОбИзмененииПредупрежденияПриЗагрузкеВыписки(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	Если НавигационнаяСсылка = "ЛичныйКабинетСервисаМойНалог" Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСервиса());
	КонецЕсли;
	
	ПечатьФискальныхДокументовКлиент.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка);
	
	НастройкиНалоговИОтчетовПредупреждениеФормыКлиент.ОбработкаНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ВидОперацииАвтоПодбор(ВидОперации, ДанныеВыбора, Ожидание, СтандартнаяОбработка) Экспорт
	
	Если Ожидание = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОплатаПокупателя = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя");
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ОплатаПокупателя);
		Если ЗначениеЗаполнено(ВидОперации) И ВидОперации <> ОплатаПокупателя Тогда
			ДанныеВыбора.Добавить(ВидОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаПрочиеПриИзмененииКлиент(Форма, Элемент) Экспорт
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Форма.Объект, ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма,, "Прочие"));
	
КонецПроцедуры

Процедура СчетУчетаУслугиБанкаПриИзменении(Форма, Элемент) Экспорт
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, Форма.Объект, ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма,, "УслугиБанка"));
	
КонецПроцедуры

Процедура СубконтоКтПрочиеПриИзменении(Форма, НомерСубконто) Экспорт
	
	ПриИзмененииСубконто(Форма, Форма.Объект, НомерСубконто,, "Прочие");
	
КонецПроцедуры

Процедура СубконтоКтПрочиеНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Форма.Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка,, "Прочие");
	
КонецПроцедуры

Процедура СубконтоКтУслугиБанкаПриИзменении(Форма, НомерСубконто) Экспорт
	
	ПриИзмененииСубконто(Форма, Форма.Объект, НомерСубконто,, "УслугиБанка");
	
КонецПроцедуры

Процедура СубконтоКтУслугиБанкаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	НачалоВыбораСубконто(Форма, Форма.Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка,, "УслугиБанка");
	
КонецПроцедуры

Функция ПроверитьЗаполнениеДляФормированияЧекаНПД(Форма) Экспорт
	
	Если Не Форма.ПлательщикНПД Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	КонтрагентЗаполнен = ЗначениеЗаполнено(Объект.Контрагент);
	Если Не КонтрагентЗаполнен Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Контрагент'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Контрагент", "Объект");
	КонецЕсли;
	
	УслугаНПДЗаполнена = Истина;
	КоличествоСтрок = Объект.РасшифровкаПлатежа.Количество();
	ОднострочнаяФорма = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	Если ОднострочнаяФорма И КоличествоСтрок = 1 Тогда
		Если Не ЗначениеЗаполнено(Форма.РасшифровкаПлатежаУслугаНПД) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Услуга'"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "РасшифровкаПлатежаУслугаНПД");
			УслугаНПДЗаполнена = Ложь;
		КонецЕсли;
	Иначе
		Для Индекс = 0 По Объект.РасшифровкаПлатежа.Количество() - 1 Цикл
			СтрокаПлатежа = Объект.РасшифровкаПлатежа[Индекс];
			Если Не ЗначениеЗаполнено(СтрокаПлатежа.УслугаНПД) Тогда
				УслугаНПДЗаполнена = Ложь;
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка",
					"Заполнение",
					НСтр("ru = 'Услуга'"),
					Индекс + 1,
					НСтр("ru = 'Расшифровка платежа'"));
				
				Если ОднострочнаяФорма Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "НадписьСуммаДокумента");
				Иначе
					ПутьКСтроке = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РасшифровкаПлатежа", Индекс + 1, "УслугаНПД");
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , ПутьКСтроке, "Объект");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокументаЗаполнена = ЗначениеЗаполнено(Объект.СуммаДокумента);
	Если Не СуммаДокументаЗаполнена Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Сумма'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "СуммаДокумента", "Объект");
	КонецЕсли;
	
	Возврат КонтрагентЗаполнен И УслугаНПДЗаполнена И СуммаДокументаЗаполнена;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

#Область РасшифровкаПлатежа

Процедура РасшифровкаПлатежаПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		Если Форма.ОтражениеАвансаВидимость Тогда
			СтрокаПлатеж.ОтражениеАвансаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
				СтрокаПлатеж.ПорядокОтраженияАванса,
				БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
		КонецЕсли;
		Если Форма.ОтражениеДоходаВидимость Тогда
			СтрокаПлатеж.ОтражениеДоходаПредставление = БанкИКассаФормыКлиентСервер.ВариантОтраженияДоходовПредставление(
				СтрокаПлатеж.ПорядокОтраженияАванса,
				БанкИКассаФормыКлиентСервер.ВариантыОтраженияДоходов(Форма));
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяСтрока И Форма.ЕстьРасчетыВУсловныхЕдиницах Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтоги(Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект = Форма.Объект;
		РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтоги(Форма);
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ОбновитьИтогиУСН(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоговорКонтрагента(Форма, "РасшифровкаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	ПараметрыДоговора = Новый Структура;
	ПараметрыДоговора.Вставить("Организация", Объект.Организация);
	ПараметрыДоговора.Вставить("Владелец", Объект.Контрагент);
	ПараметрыДоговора.Вставить("ВидДоговора", ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ПараметрыДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаАвтоПодбор(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	РаботаСДоговорамиКонтрагентовБПКлиент.ЗаполнитьСписокВыбора(Элемент, Текст, Форма.ПредлагатьНовыйДоговор, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	ТекущиеДанные = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежа");
	Если Не ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		ТекущиеДанные.СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если ТекущиеДанные.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		ПодсказкаОНастройкеСтатьяДДС(Форма, ТекущиеДанные);
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ТекущиеДанные.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособПогашенияЗадолженностиПриИзменении(Форма, Элемент, ЕстьТабличнаяЧасть = Истина) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Если СтрокаПлатеж.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу") Тогда
		СтрокаПлатеж.Сделка = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.СпособПогашенияЗадолженности",
		Объект,
		СтрокаПлатеж);
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
	Если НЕ ЕстьТабличнаяЧасть Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика") Тогда
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовПоАвансам;
	Иначе
		СчетУчета = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана дата.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указана организация.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан контрагент.'"));
		Возврат;
	ИначеЕсли Форма.ВестиУчетПоДоговорам И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан договор.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата",               Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыОбъекта.Вставить("Организация",        Объект.Организация);
	ПараметрыОбъекта.Вставить("ОстаткиОбороты",     "Дт");
	ПараметрыОбъекта.Вставить("ТипыДокументов",
		"Метаданные.Документы.ПоступлениеНаРасчетныйСчет.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Сделка.Тип");
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		ПараметрыОбъекта.Вставить("СчетУчета",             СчетУчета);
		ПараметрыОбъекта.Вставить("РежимОтбораДокументов", ПредопределенноеЗначение("Перечисление.РежимОтбораДокументов.ПоОстаткам"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьПустыеКурсыВалют(СтрокаПлатеж, Форма);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов <> 0 И Форма.КратностьДокумента <> 0 Тогда
		СуммаРуб = СтрокаПлатеж.СуммаПлатежа * Форма.КурсДокумента / Форма.КратностьДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = СуммаРуб / СтрокаПлатеж.СуммаВзаиморасчетов * СтрокаПлатеж.КратностьВзаиморасчетов;
	КонецЕсли;
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Форма, Элемент, ЕстьТабличнаяЧасть = Истина) Экспорт
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если НЕ ЕстьТабличнаяЧасть Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
	ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьОтражениеСтрокиВУСН(СтрокаПлатеж, Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежа");
	ПодсказкаОНастройкеДоговор(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаОтражениеАвансаПредставлениеПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	БанкИКассаФормыКлиент.ОтражениеДоходаПриИзменении(Форма,
		СтрокаПлатеж.ПорядокОтраженияАванса,
		СтрокаПлатеж.ОтражениеАвансаПредставление,
		Форма.СвойстваПлатежа.ПорядокОтраженияАванса);
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаОтражениеАвансаПредставлениеОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	БанкИКассаФормыКлиент.ОтражениеДоходаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаОтражениеДоходаПредставлениеПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	
	БанкИКассаФормыКлиент.ОтражениеДоходаПриИзменении(Форма,
		СтрокаПлатеж.ПорядокОтраженияАванса,
		СтрокаПлатеж.ОтражениеДоходаПредставление,
		Форма.СвойстваПлатежа.ПорядокОтраженияАванса);
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаОтражениеДоходаПредставлениеОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	БанкИКассаФормыКлиент.ОтражениеДоходаОбработкаВыбора(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Инкассация

Процедура РасшифровкаПлатежаИнкассацияПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект = Форма.Объект;
		РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияПередНачаломИзменения(Форма, Элемент, Отказ) Экспорт
	
	Префикс      = "РасшифровкаПлатежаИнкассация";
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, Префикс);
	БухгалтерскийУчетКлиентСервер.УстановитьНачальныеСвойстваСубконтоСтроки(
		Форма,
		СтрокаПлатеж,
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Префикс));
	
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияСубконтоКтНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Префикс      = "РасшифровкаПлатежаИнкассация";
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, Префикс);
	НачалоВыбораСубконто(Форма, СтрокаПлатеж, Элемент, ДанныеВыбора, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияСубконтоКтПриИзменении(Форма, НомерСубконто) Экспорт
	
	Префикс         = "РасшифровкаПлатежаИнкассация";
	ОбъектОбработки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, Префикс);
	ПриИзмененииСубконто(Форма, ОбъектОбработки, НомерСубконто, Префикс);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаИнкассацияСчетУчетаРасчетовСКонтрагентомПриИзменении(Форма, Элемент) Экспорт
	
	Префикс         = "РасшифровкаПлатежаИнкассация";
	ОбъектОбработки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, Префикс);
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма,
		ОбъектОбработки,
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Префикс));
	
КонецПроцедуры

Процедура ИнкассацияСчетУчетаРасчетовСКонтрагентомПриИзменении(Форма, Элемент) Экспорт
	
	ОбъектОбработки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСчета(
		Форма, ОбъектОбработки, ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма,, "Инкассация"));
	
КонецПроцедуры

Процедура СубконтоКтИнкассацияПриИзменении(Форма, НомерСубконто) Экспорт
	
	ОбъектОбработки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	ПриИзмененииСубконто(Форма, ОбъектОбработки, НомерСубконто,, "Инкассация");
	
КонецПроцедуры

Процедура СубконтоКтИнкассацияНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбъектОбработки = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма);
	НачалоВыбораСубконто(Форма, ОбъектОбработки, Элемент, ДанныеВыбора, СтандартнаяОбработка,, "Инкассация");
	
КонецПроцедуры

Процедура ИнкассацияСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	ТекущиеДанные = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаИнкассация");
	
	ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если ТекущиеДанные.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		ПодсказкаОНастройкеСтатьяДДС(Форма, ТекущиеДанные);
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ТекущиеДанные.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыЗаполненияСчетовУчета = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
		"РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств",
		Объект,
		ТекущиеДанные);
	
	СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
	
КонецПроцедуры

#КонецОбласти

#Область ПокупкаВалюты

Процедура РасшифровкаПлатежаПокупкаВалютыПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Объект = Форма.Объект;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаПлатеж = Элемент.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Объект, "СчетУчетаРасчетовСКонтрагентом");
		СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
		ПоступлениеНаРасчетныйСчетФормыВызовСервера.УстановитьДоговорКонтрагента(
			СтрокаПлатеж.ДоговорКонтрагента,
			Объект.Контрагент,
			Объект.Организация,
			СписокВидовДоговоров);
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
			ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж, "СчетУчетаРасчетовСКонтрагентом");
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПокупкаВалютыПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПокупкаВалютыПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект = Форма.Объект;
		РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПокупкаВалютыПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПокупкаВалютыСуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПокупкаВалюты.ТекущиеДанные;
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
КонецПроцедуры

Процедура ПокупкаВалютыСуммаВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПокупкаВалюты");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма, Истина);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПокупкаВалютыКурсВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПокупкаВалюты");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПокупкаВалютыКурсВзаиморасчетовНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПокупкаВалюты");
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Валюта",                  Объект.ВалютаДокумента);
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПокупкаВалютыДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоговорКонтрагента(Форма, "РасшифровкаПлатежаПокупкаВалюты");
	
КонецПроцедуры

Процедура ПокупкаВалютыДоговорКонтрагентаПриИзменении(Форма, Элемент, ЕстьТабличнаяЧасть = Истина) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПокупкаВалюты");
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа,, "СчетУчетаРасчетовСКонтрагентом");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если НЕ ЕстьТабличнаяЧасть Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	КонецЕсли;
	
	ПодсказкаОНастройкеДоговор(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура ПокупкаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	ТекущиеДанные = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПокупкаВалюты");
	
	ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если ТекущиеДанные.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		ПодсказкаОНастройкеСтатьяДДС(Форма, ТекущиеДанные);
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ТекущиеДанные.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПродажаВалюты

Процедура РасшифровкаПлатежаПродажаВалютыПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Объект = Форма.Объект;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаПлатеж = Элемент.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Объект, "СчетУчетаРасчетовСКонтрагентом");
		СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
		ПоступлениеНаРасчетныйСчетФормыВызовСервера.УстановитьДоговорКонтрагента(
			СтрокаПлатеж.ДоговорКонтрагента,
			Объект.Контрагент,
			Объект.Организация,
			СписокВидовДоговоров);
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
			ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
			Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
			ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, СтрокаПлатеж, "СчетУчетаРасчетовСКонтрагентом");
			ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПродажаВалютыПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПродажаВалютыПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект = Форма.Объект;
		РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПродажаВалютыПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПродажаВалютыСуммаПлатежаПриИзменении(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежаПродажаВалюты.ТекущиеДанные;
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма, Истина);
	
КонецПроцедуры

Процедура ПродажаВалютыСуммаВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПродажаВалюты");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродажаВалютыКурсВзаиморасчетовПриИзменении(Форма, Элемент) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПродажаВалюты");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПродажаВалютыКурсВзаиморасчетовНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПродажаВалюты");
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента",      СтрокаПлатеж.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов",      СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата",                    Объект.Дата);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",        Форма);
	ДополнительныеПараметры.Вставить("СтрокаПлатеж", СтрокаПлатеж);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение",
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПродажаВалютыДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоговорКонтрагента(Форма, "РасшифровкаПлатежаПродажаВалюты");
	
КонецПроцедуры

Процедура ПродажаВалютыДоговорКонтрагентаПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПродажаВалюты");
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	ПараметрыОбъекта.ДоговорКонтрагента = СтрокаПлатеж.ДоговорКонтрагента;
	Форма.СвойстваПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.СвойстваСтрокРасшифровкиПлатежа(ПараметрыОбъекта, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа,, "СчетУчетаРасчетовСКонтрагентом");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	КонецЕсли;
	
	ПодсказкаОНастройкеДоговор(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура ПродажаВалютыСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	ТекущиеДанные = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПродажаВалюты");
	
	ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если ТекущиеДанные.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		ПодсказкаОНастройкеСтатьяДДС(Форма, ТекущиеДанные);
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ТекущиеДанные.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПлатежныеКарты

Процедура РасшифровкаПлатежаПлатежныеКартыПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование) Экспорт
	
	Объект = Форма.Объект;
	
	СтрокаПлатеж = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если НЕ Копирование Тогда
			Если ЗначениеЗаполнено(Форма.СвойстваПлатежа.СчетУчетаРасчетовСКонтрагентом) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа, "СчетУчетаРасчетовСКонтрагентом");
			Иначе
				ПараметрыЗаполненияСчетовУчета = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(
					"РасшифровкаПлатежа.ДоговорКонтрагента",
					Объект,
					СтрокаПлатеж);
				Изменения = СчетаУчетаВДокументахКлиент.ЗаполнитьПриИзменении(ПараметрыЗаполненияСчетовУчета);
				ЗаполнитьЗначенияСвойств(Форма.СвойстваПлатежа, Изменения); // Сложим в кэш
				ЗаполнитьЗначенияСвойств(СтрокаПлатеж, Форма.СвойстваПлатежа, "СчетУчетаРасчетовСКонтрагентом");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПлатежныеКартыПриОкончанииРедактирования(Форма, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Объект = Форма.Объект;
		РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
		
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПлатежныеКартыОбработатьИзменениеСуммыУслуг(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПлатежныеКартыПриИзменении(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПлатежныеКартыОбработатьИзменениеСуммыУслуг(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПлатежныеКартыДоговорКонтрагентаОткрытие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьДоговорКонтрагента(Форма, "РасшифровкаПлатежаПлатежныеКарты");
	
КонецПроцедуры

Процедура ПлатежныеКартыСуммаУслугПриИзменении(Форма, Элемент, ЕстьТабличнаяЧасть = Истина) Экспорт
	
	Настройки = Новый Структура("ПроверитьНеобходимостьНастройки, ПоказатьПодсказку", Истина, Ложь);
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПлатежныеКартыОбработатьИзменениеСуммыУслуг(
		Форма, ЕстьТабличнаяЧасть, Настройки);
	Если Настройки.ПоказатьПодсказку Тогда
		ПодсказкаОНастройкеПроцентКомиссииЭквайринга(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПлатежныеКартыДоговорКонтрагентаПриИзменении(Форма, Элемент) Экспорт
	
	СтрокаПлатеж = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПлатежныеКарты");
	ПодсказкаОНастройкеДоговор(Форма, СтрокаПлатеж);
	
КонецПроцедуры

Процедура ПлатежныеКартыСтатьяДвиженияДенежныхСредствПриИзменении(Форма, Элемент) Экспорт
	
	ТекущиеДанные = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, "РасшифровкаПлатежаПлатежныеКарты");
	
	ИнициализироватьСвойстваПлатежа(Форма); // Только создаем структуру, если она еще не создана.
	
	Если ТекущиеДанные.СтатьяДвиженияДенежныхСредств <> Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств Тогда
		ПодсказкаОНастройкеСтатьяДДС(Форма, ТекущиеДанные);
		Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = ТекущиеДанные.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	ПараметрыОбъекта = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ТекущиеПараметрыОбъекта(Форма);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПлатежныеКартыПередУдалением(Форма, Элемент, Отказ) Экспорт
	
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	Отказ = РасшифровкаПлатежа.Количество() = 1;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма        = ДополнительныеПараметры.Форма;
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Форма.Модифицированность = Истина;
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПокупкаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма        = ДополнительныеПараметры.Форма;
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Форма.Модифицированность = Истина;
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПродажаВалютыКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Форма        = ДополнительныеПараметры.Форма;
	СтрокаПлатеж = ДополнительныеПараметры.СтрокаПлатеж;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма);
	
	Форма.Модифицированность = Истина;
	
	Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) Тогда
		ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, Истина, СтрокаПлатеж);
		Форма.Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодсказкаОНастройкеСтатьяДДСЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") И ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ПоступлениеНаРасчетныйСчетФормыВызовСервера.УстановитьСтатьюДДСПоУмолчанию(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодсказкаОНастройкеДоговорЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") И ЗначениеЗаполнено(РезультатВыполнения) Тогда
		ПоступлениеНаРасчетныйСчетФормыВызовСервера.УстановитьДоговорУмолчанию(РезультатВыполнения.Договор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодсказкаОНастройкеДоговор(Форма, ТекущиеДанные)
	
	Объект = Форма.Объект;
	
	Если Не ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) И ЕстьРасшифровкаПлатежа(Форма) Тогда
		Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
			РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		Иначе
			РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		КонецЕсли;
		
		Если РасшифровкаПлатежа.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПлатежа = Новый Структура;
	ПараметрыПлатежа.Вставить("Организация",        Объект.Организация);
	ПараметрыПлатежа.Вставить("Контрагент",         Объект.Контрагент);
	ПараметрыПлатежа.Вставить("ДоговорКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыПлатежа.Вставить("ВидОперации",        Объект.ВидОперации);
	ПараметрыПлатежа.Вставить("ОплатаВВалюте",      Форма.ОплатаВВалюте);
	ПараметрыПлатежа.Вставить("ВалютаДокумента",    Объект.ВалютаДокумента);
	
	Если Не ПоступлениеНаРасчетныйСчетФормыВызовСервера.НастроитьОсновнойДоговор(ПараметрыПлатежа) Тогда
		// Настройка для этого элемента уже существует.
		Возврат;
	КонецЕсли;
	
	ПараметрыДоговор = Новый Структура;
	ПараметрыДоговор.Вставить("Настройка",   "Договор");
	ПараметрыДоговор.Вставить("Договор",      ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыДоговор.Вставить("ВидОперации",  Объект.ВидОперации);
	ПараметрыДоговор.Вставить("ТипДокумента", Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	ПараметрыНастройки = Новый Структура("ПараметрыНастройки", ПараметрыДоговор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодсказкаОНастройкеДоговорЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодсказкаОНастройке", ПараметрыНастройки, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПодсказкаОНастройкеСтатьяДДС(Форма, ТекущиеДанные)
	
	Объект = Форма.Объект;
	
	ПредыдущееЗначение = Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств;
	
	Если Не ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаДокументаОднострочная(Форма) И ЕстьРасшифровкаПлатежа(Форма) Тогда
		Если ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ФормаРасшифровкиПлатежа(Форма) Тогда
			РасшифровкаПлатежа = Форма.РасшифровкаПлатежа;
		Иначе
			РасшифровкаПлатежа = Форма.Объект.РасшифровкаПлатежа;
		КонецЕсли;
		
		Если РасшифровкаПлатежа.Количество() > 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СтатьяДвиженияДенежныхСредств)
		Или ЗначениеЗаполнено(ПредыдущееЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОперации = Объект.ВидОперации;
	Если Не ЗначениеЗаполнено(КонтекстОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПоступлениеНаРасчетныйСчетФормыВызовСервера.НастроитьСтатьяДДСДляОперации(
			ТекущиеДанные.СтатьяДвиженияДенежныхСредств, КонтекстОперации) Тогда
		// Настройка для этого элемента уже существует.
		Возврат;
	КонецЕсли;
	
	ПараметрыСтатьяДДС = Новый Структура;
	ПараметрыСтатьяДДС.Вставить("Настройка", "СтатьяДДС");
	ПараметрыСтатьяДДС.Вставить("ПредставлениеСтатьяДДС", НСтр("ru = 'Статью расходов'"));
	ПараметрыСтатьяДДС.Вставить("СтатьяДДС", ТекущиеДанные.СтатьяДвиженияДенежныхСредств);
	ПараметрыСтатьяДДС.Вставить("ВидОперации", Объект.ВидОперации);
	ПараметрыСтатьяДДС.Вставить("КонтекстОперации", КонтекстОперации);
	ПараметрыНастройки = Новый Структура("ПараметрыНастройки", ПараметрыСтатьяДДС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодсказкаОНастройкеСтатьяДДСЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодсказкаОНастройке", ПараметрыНастройки, Форма,,,, ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПодсказкаОНастройкеПроцентКомиссииЭквайринга(Форма)
	
	ПараметрыДоговор = Новый Структура;
	ПараметрыДоговор.Вставить("Настройка", "ПроцентКомиссииЭквайринга");
	ПараметрыДоговор.Вставить("ВидОплаты",   Форма.СвойстваПлатежа.ВидОплаты);
	ПараметрыДоговор.Вставить("ВидОперации", Форма.Объект.ВидОперации);
	ПараметрыНастройки = Новый Структура("ПараметрыНастройки", ПараметрыДоговор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодсказкаОНастройке", ПараметрыНастройки, Форма);
	
КонецПроцедуры

Процедура ОткрытьДоговорКонтрагента(Форма, ТабличнаяЧасть)
	
	Объект = Форма.Объект;
	
	ТекущиеДанные = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.РасшифровкаПлатежаТекущиеДанные(Форма, ТабличнаяЧасть);
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
	ЗначенияЗаполнения.Вставить("Владелец",    Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидДоговора", Новый ФиксированныйМассив(ВидыДоговора));
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		
		ЗначенияЗаполнения.Вставить("ОплатаВВалюте", Форма.ОплатаВВалюте);
		Если Форма.ОплатаВВалюте ИЛИ НЕ ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
			ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Объект.ВалютаДокумента);
			ЗначенияЗаполнения.Вставить("Валютный",             Форма.ОплатаВВалюте);
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты") Тогда
		ЗначенияЗаполнения.Вставить("ОплатаВВалюте", Ложь);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты") Тогда
		ЗначенияЗаполнения.Вставить("ОплатаВВалюте", Истина);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма)
	
	Объект = Форма.Объект;
	
	РасшифровкаПлатежа = ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПолучитьРасшифровкаПлатежа(Форма);
	
	ЕстьРасчетыВУЕ = Ложь;
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

Процедура ПриИзмененииСубконто(Форма, Объект, НомерСубконто, Префикс = "", Постфикс = "")
	
	БухгалтерскийУчетКлиентСервер.УстановитьСвойстваСубконтоШапкиПриИзмененииСубконто(
		Форма, Объект, НомерСубконто, ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Префикс, Постфикс));
	
КонецПроцедуры

Процедура НачалоВыбораСубконто(Форма, Объект, Элемент, ДанныеВыбора, СтандартнаяОбработка, Префикс = "", Постфикс = "")
	
	ДанныеОбъекта = БухгалтерскийУчетКлиентСервер.ДанныеУстановкиПараметровСубконто(
		Объект, ПоступлениеНаРасчетныйСчетФормыКлиентСервер.ПараметрыУстановкиСвойствСубконто(Форма, Префикс, Постфикс));
	
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, ДанныеОбъекта);
	
КонецПроцедуры

Функция ОбрабатыватьОповещениеНаСервере(ИмяСобытия) Экспорт
	
	Возврат ИмяСобытия = "Запись_НастройкиСистемыНалогообложения"
		Или ИмяСобытия = "ИзменениеПатента";
	
КонецФункции

#КонецОбласти

#Область ПредупрежденияПриЗагрузкеВыписки

Процедура ОповеститьОбИзмененииПредупрежденияПриЗагрузкеВыписки(Документ) Экспорт
	
	Оповестить("ИзмененоПредупреждениеПриЗагрузкеВыписки", Неопределено, Документ);
	
КонецПроцедуры

#КонецОбласти