///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область УправлениеРасписанием

// Формирует новое описания параметров выполнения
// операций регламентного задания.
//
// Параметры:
//  ПериодичностьЗапуска - Число - периодичность запуска в минутах.
//
// Возвращаемое значение:
//  Структура - параметры выполнения:
//   *ПериодичностьЗапуска - Число - периодичность запуска в минутах.
//
Функция ОписаниеПараметровВыполнения(ПериодичностьЗапуска) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПериодичностьЗапуска", ПериодичностьЗапуска);
	
	Возврат Результат;
	
КонецФункции

// Определяет необходимость выполнения операции.
//
// Параметры:
//  Операция - Строка - идентификатор операции.
//
// Возвращаемое значение:
//  Булево - если Истина, необходимо выполнить операцию.
//
Функция ТребуетсяВыполнение(Операция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацииРегламентныхЗаданий.ДатаВыполнения КАК ДатаВыполнения
		|ИЗ
		|	РегистрСведений.ОперацииРегламентныхЗаданий КАК ОперацииРегламентныхЗаданий
		|ГДЕ
		|	ОперацииРегламентныхЗаданий.Операция = &Операция";
	
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Запрос.Текст,
		?((ОбщегоНазначения.РазделениеВключено()
			И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()),
			"ОперацииРегламентныхЗаданийОбластейДанных",
			"ОперацииРегламентныхЗаданий"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.ДатаВыполнения < ТекущаяДатаСеанса();
	
КонецФункции

// Обновляет дату следующего выполнения операции.
//
// Параметры:
//  Операция - Строка - идентификатор операции.
//
Процедура ОперацияВыполнена(Операция) Экспорт
	
	ПараметрыВыполнения = ПараметрыВыполнения(Операция);
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Запись = РегистрыСведений.ОперацииРегламентныхЗаданийОбластейДанных.СоздатьМенеджерЗаписи();
	Иначе
		Запись = РегистрыСведений.ОперацииРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	КонецЕсли;
	
	Запись.Операция = Операция;
	Запись.ДатаВыполнения = ТекущаяДатаСеанса() + ПараметрыВыполнения.ПериодичностьЗапуска * 60;
	Запись.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияСБиблиотекойТехнологияСервиса

// См. описание этой же процедуры в общем модуле
// ВыгрузкаЗагрузкаДанныхПереопределяемый.
//
Процедура ПриЗаполненииТиповИсключаемыхИзВыгрузкиЗагрузки(Типы) Экспорт
	
	Типы.Добавить(Метаданные.РегистрыСведений.ОперацииРегламентныхЗаданий);
	Типы.Добавить(Метаданные.РегистрыСведений.ОперацииРегламентныхЗаданийОбластейДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получение параметров выполнения операции по идентификатору.
//
// Параметры:
//  Операция - Строка - идентификатор операции;
//
// Возвращаемое значение:
//  Структура - см. ОписаниеПараметровВыполнения.
//
Функция ПараметрыВыполнения(Операция)
	
	ПараметрыВыполнения = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРиски = ОбщегоНазначения.ОбщийМодуль("СПАРКРиски");
		ПараметрыВыполнения = МодульСПАРКРиски.ПараметрыВыполненияОперации(Операция);
	КонецЕсли;
	
	ПроверитьПараметрыВыполнения(
		ПараметрыВыполнения,
		Операция);
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

// Проверяет корректность заполнения параметров выполнения.
// В случае возникновения ошибки будет вызвано исключение.
//
// Параметры:
//  ПараметрыВыполнения - Структура - см. ОписаниеПараметровВыполнения;
//  Операция - Строка - идентификатор операции.
//
Процедура ПроверитьПараметрыВыполнения(ПараметрыВыполнения, Операция)
	
	Если ПараметрыВыполнения = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для операции %1 не заполнены параметры выполнения'"),
			Операция);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти