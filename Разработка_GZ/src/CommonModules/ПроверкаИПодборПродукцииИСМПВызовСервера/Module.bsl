
#Область ПрограммныйИнтерфейс

Процедура ПрименитьКешШтрихкодовУпаковок(Форма, ОбновлениеТаблицыТоваров = Ложь) Экспорт

	ПараметрыИнтеграцииФормыПроверки = Форма.ПараметрыИнтеграцииФормыПроверкиГосИС.ИСМП;
	
	Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	ТабличнаяЧастьТовары = Форма[Объект][ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары];
	
	ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧастьТовары);
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия");

	Если ОбновлениеТаблицыТоваров Тогда
		ТабличнаяЧастьШтрихкоды = Форма[Объект][ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок];
		УдалитьСвязанныеШтрихкодыУпаковок = Новый Соответствие;
		УдалитьСтрокиШтрихкодов = Новый Массив;
		//Удалились товары
		Для Каждого СтрокаТовары Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТовары.Количество() = 0 Тогда
				Для Каждого ЭлементСписка Из СтрокаТовары.ШтрихкодыУпаковок Цикл
					УдалитьСвязанныеШтрихкодыУпаковок.Вставить(ЭлементСписка.Значение, Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		Если (УдалитьСвязанныеШтрихкодыУпаковок.Количество()) Тогда
			//Удалим все упаковки верхнего уровня где они есть из ТЧ
			Для Каждого СтрокаШтрихкоды Из ТабличнаяЧастьШтрихкоды Цикл
				Если УдалитьСвязанныеШтрихкодыУпаковок.Получить(СтрокаШтрихкоды.ШтрихкодУпаковки)=Истина Тогда
					УдалитьСтрокиШтрихкодов.Добавить(СтрокаШтрихкоды);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из УдалитьСтрокиШтрихкодов Цикл
				ТабличнаяЧастьШтрихкоды.Удалить(СтрокаУдалить);
			КонецЦикла;
			ПроверкаИПодборПродукцииИСМП.ЗаполнитьКешШтрихкодовУпаковок(Форма);
		КонецЕсли;
		
	КонецЕсли;
	 
	Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
		Если СтрокаТовары.МаркируемаяПродукцияГосИС Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоиска);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			КоличествоПоКлючу = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
			КонецЦикла;
			Если СтрокиКеша.Количество() = 0 Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			ИначеЕсли КоличествоПоКлючу = СтрокиКеша[0].Количество Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 1;
			Иначе
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			КонецЕсли;
		Иначе
			СтрокаТовары.СтатусПроверкиГосИС = 0;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВозобновитьПроверкуПоДокументу(ДокументСсылка, ВидМаркируемойПродукции) Экспорт
	
	Возврат РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОтразитьВозобновлениеПроверкиДокумента(
		ДокументСсылка, ВидМаркируемойПродукции);
	
КонецФункции

#Область РасчетХешСумм
	
// Получает данные по хеш суммам для переданных упаковок. Возвращает таблицу с идентификаторами строк, требующих перемаркировки
//
// Параметры:
//	* СтрокиДерева - Массив - содержит структуры с данными упаковок, для которых требуется получить хеш сумму:
//		** ИдентификаторСтроки - Число - идентификатор строки дерева маркируемой продукции
//		** ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - тип упаковки строки дерева маркируемой продукции
//		** СтатусПроверки - ПеречислениеСсылка.СтатусыПроверкиИПодбораИС - статус проверки строки дерева маркируемой продукции
//		** Штрихкод - Строка - значение штрихкода строки дерева маркируемой продукции
//		** ХешСумма - Строка - рассчитываемая хешсумма строки дерева маркируемой продукции
//		** ПодчиненныеСтроки - Массив - дочерние строки строки дерева маркируемой продукции
//	
// Возвращаемое значение:
//	* ТаблицаПеремаркировки - Массив - содержит структуры с данными строк, для которых требуется перемаркировка
//		** ИдентификаторВДереве - Число - идентификатор строки дерева маркируемой продукции
//		** ТребуетсяПеремаркировка - Булево - признак необходимости перемаркировки
//
Функция ПересчитатьХешСуммыВсехУпаковок(СтрокиДерева) Экспорт
	
	ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС.ТаблицаПеремаркировки(ТаблицаХешСумм);
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаПеремаркировки);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧасть)
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.МаркируемаяПродукцияГосИС Тогда
			СтрокаТабличнойЧасти.СтатусПроверкиГосИС = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
