#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// Регистрирует обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриРегистрацииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия          = "3.1.14.328";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор   = Новый УникальныйИдентификатор("c29fbbf1-fe70-11ea-80e6-4cedfb43b11a");
	Обработчик.Процедура       = "СЭДОФСС.ДобавитьРолиИзвещенийВПользовательскиеПрофили";
	Обработчик.Комментарий     = НСтр("ru = 'Добавление ролей извещений ФСС в непоставляемые (пользовательские) профили групп доступа.'");
	
КонецПроцедуры

// Добавляет роли извещений ФСС в непоставляемые (пользовательские) профили групп доступа.
//
// Параметры:
//   ПараметрыОбновления - Структура - Параметры отложенного обновления.
//
Процедура ДобавитьРолиИзвещенийВПользовательскиеПрофили(ПараметрыОбновления = Неопределено) Экспорт
	Контекст = УправлениеДоступомБЗК.КонтекстДобавляемыхРолей("СЭДОФСС.ДобавитьРолиИзвещенийВПользовательскиеПрофили");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ДобавлениеИзменениеИзвещенийФСС");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ДобавлениеИзменениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ИспользованиеОбработкиОбщиеФормыСЭДОФСС");
	
	УправлениеДоступомБЗК.ЗарегистрироватьДобавляемуюРоль(
		Контекст,
		"ЧтениеДокументовПоПрямымВыплатамПособийСоциальногоСтрахования",
		"ЧтениеИзвещенийФСС");
	
	УправлениеДоступомБЗК.ДобавитьРолиВНепоставляемыеПрофили(Контекст);
	
	Если ПараметрыОбновления <> Неопределено Тогда
		ПараметрыОбновления.ОбработкаЗавершена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ИзвещениеФСС);
	
КонецПроцедуры

#КонецОбласти

#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "0c61029e-9609-11ea-80e1-4cedfb43b11a", Метаданные.Документы.ИзвещениеФСС);
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// См. ТекущиеДелаПереопределяемый.ПриОпределенииОбработчиковТекущихДел.
Процедура ПриОпределенииОбработчиковТекущихДел(Обработчики) Экспорт
	
	Обработчики.Добавить(Документы.ИзвещениеФСС);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентированнаяОтчетность

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО.
Процедура ПослеЗагрузкиУведомленийОНовыхСообщенияхСЭДО(Страхователь, Уведомления, ОбработанныеУведомления) Экспорт
	
	Для Каждого Уведомление Из Уведомления Цикл
		
		ТипСообщения = Число(Уведомление.Тип);
		
		Если ТипСообщения = 10 Тогда
			// Извещение из системы "Прямые выплаты страхового обеспечения".
			Документы.ИзвещениеФСС.ПриЗагрузкеУведомленияОНовомИзвещенииПрямыхВыплат(
				Страхователь,
				Уведомление.Идентификатор,
				Уведомление.ТребуетсяПодтверждение);
			ОбработанныеУведомления.Добавить(Уведомление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ЭлектронныйДокументооборотСФССПереопределяемый.ПослеРасшифровкиСообщенияСЭДО.
Процедура ПослеРасшифровкиСообщенияСЭДО(Страхователь, Сообщение, Результат) Экспорт
	
	ТипСообщения = Число(Сообщение.Тип);
	
	Если ТипСообщения = 10 Тогда
		// Извещение из системы "Прямые выплаты страхового обеспечения".
		Документы.ИзвещениеФСС.ПослеРасшифровкиИзвещенияПрямыхВыплат(
			Страхователь,
			Сообщение.Идентификатор,
			Сообщение.ТекстСообщения,
			Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ИзвещениеФСС, Истина);
	Списки.Вставить(Метаданные.Справочники.ИзвещениеФССПрисоединенныеФайлы, Истина);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Документ.ИзвещениеФСС.Чтение.ГруппыФизическихЛиц
	|Документ.ИзвещениеФСС.Чтение.Организации
	|Документ.ИзвещениеФСС.Изменение.ГруппыФизическихЛиц
	|Документ.ИзвещениеФСС.Изменение.Организации
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Чтение.ГруппыФизическихЛиц
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Чтение.Организации
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Изменение.ГруппыФизическихЛиц
	|Справочник.ИзвещениеФССПрисоединенныеФайлы.Изменение.Организации";
	
КонецПроцедуры

#КонецОбласти

#Область ДатыЗапретаИзменения

// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения.
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		Метаданные.Документы.ИзвещениеФСС.ПолноеИмя(),
		"Дата",
		"Зарплата",
		"Организация");
	
КонецПроцедуры

#КонецОбласти

#Область ПрефиксацияОбъектов

// См. ПрефиксацияОбъектовПереопределяемый.ПолучитьПрефиксообразующиеРеквизиты.
Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Документы.ИзвещениеФСС;
	СтрокаТаблицы.Реквизит = "Страхователь";
	
КонецПроцедуры

#КонецОбласти

#Область ДокументБольничныйЛист

Процедура ПриЗаписиДокументаБольничныйЛист(БольничныйОбъект, Отказ) Экспорт
	
	Попытка
		Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента(БольничныйОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ИзвещениеФСС.ПриЗаписиПервичногоДокумента",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			БольничныйОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

Процедура ПриЗаписиЗаявленияНаВыплатуПособия(ЗаявлениеОбъект, Отказ) Экспорт
	
	Попытка
		Документы.ИзвещениеФСС.ПриЗаписиЗаявленияНаВыплатуПособия(ЗаявлениеОбъект, Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		УчетПособийСоциальногоСтрахования.СообщитьОКритичнойОшибкеОбработчикаСобытия(
			"Документы.ИзвещениеФСС.ПриЗаписиЗаявленияНаВыплатуПособия",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
			ЗаявлениеОбъект.Ссылка);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СЭДО

// АПК:581-выкл Экспортные методы используются в расширенной подсистеме.

// Возвращает признак наличия прав на обмен с ФСС.
Функция ЕстьПравоОбмена() Экспорт
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ЖурналЗапросовКСерверамФСС);
КонецФункции

// Кидает исключение если функция ЕстьПравоОбмена вернула Ложь.
Процедура ПроверитьНаличиеПраваОбмена() Экспорт
	Если Не ЕстьПравоОбмена() Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на обмен с СЭДО ФСС.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
КонецПроцедуры

// Проверяет наличие права обмена электронными документами с ФСС.
Функция ДоступенОбменЧерезСЭДО() Экспорт
	// АПК:515-выкл Роль выполняет функцию флажка в библиотеке регламентированной отчетности.
	Возврат Пользователи.РолиДоступны("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами", , Ложь);
	// АПК:515-вкл
КонецФункции

// Фиксирует ошибку обработки сообщения.
//
// Параметры:
//   Результат - Структура - Результат обработки сообщения. Передается из параметров переопределяемого метода.
//   ИдентификаторСообщения - Строка - Идентификатор сообщения. Передается из параметров переопределяемого метода.
//   ТекстОшибки - Строка - Текст ошибки обработки сообщения.
//
Процедура ОшибкаОбработки(Результат, ИдентификаторСообщения, ТекстОшибки) Экспорт
	Результат.ОшибкаОбработки = Истина;
	Результат.ОписаниеОшибки = СтрШаблон(НСтр("ru = 'Ошибка обработки сообщения %1: %2'"), ИдентификаторСообщения, ТекстОшибки);
КонецПроцедуры

// АПК:581-вкл

#КонецОбласти

#Область СтрахователиФСС

// Возвращает страхователя организации.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   СправочникСсылка.Организации - Страхователь.
//       Для головных организаций возвращается исходная организация (из параметров).
//       Для филиалов, в зависимости от регистрационного номера и дополнительного кода ФСС филиала,
//       может вернуться либо исходный филиал (из параметров), либо головная организация филиала.
//
Функция СтраховательОрганизации(Организация) Экспорт
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Организация;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросПоСтрахователямОрганизаций(Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Организация;
	КонецЕсли;
	Возврат Выборка.Страхователь;
КонецФункции

// Для массива организаций возвращает массив страхователей.
//
// Параметры:
//   Организации - Массив из СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Организации
//
Функция СтрахователиОрганизаций(Организации) Экспорт
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	Запрос = ЗапросПоСтрахователямОрганизаций(Организации);
	Таблица = Запрос.Выполнить().Выгрузить();
	Таблица.Свернуть("Страхователь");
	Возврат Таблица.ВыгрузитьКолонку("Страхователь");
КонецФункции

// В таблице значений с колонкой "Организация" заполняет колонку "Страхователь".
//   В случае отсутствия - добавляет колонку "Страхователь".
//
// Параметры:
//   ТаблицаЗначений - ТаблицаЗначений - Заполняемая таблица.
//       * Организация - СправочникСсылка.Организации
//
Процедура ЗаполнитьСтрахователяВТаблицеЗначений(ТаблицаЗначений) Экспорт
	ТаблицаОрганизаций = ТаблицаЗначений.Скопировать(, "Организация");
	ТаблицаОрганизаций.Свернуть("Организация");
	МассивОрганизаций = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	
	Запрос = ЗапросПоСтрахователямОрганизаций(МассивОрганизаций);
	СтрахователиОрганизаций = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗначений.Колонки.Найти("Страхователь") = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить("Страхователь", Метаданные.ОпределяемыеТипы.Организация.Тип);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		СтрокаСтрахователя = СтрахователиОрганизаций.Найти(СтрокаТаблицы.Организация, "Организация");
		Если СтрокаСтрахователя = Неопределено Тогда
			СтрокаТаблицы.Страхователь = СтрокаТаблицы.Организация;
		Иначе
			СтрокаТаблицы.Страхователь = СтрокаСтрахователя.Страхователь;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает массив организаций страхователя.
//
// Параметры:
//   Страхователь - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Организации
//
Функция ОрганизацииСтрахователя(Страхователь) Экспорт
	Запрос = ЗапросПоФилиаламВзаимодействующимОтИмениСтрахователя(Страхователь);
	ФилиалыВзаимодействующиеОтИмениГоловнойОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Филиал");
	ФилиалыВзаимодействующиеОтИмениГоловнойОрганизации.Добавить(Страхователь);
	Возврат ФилиалыВзаимодействующиеОтИмениГоловнойОрганизации;
КонецФункции

// Возвращает Истина если у страхователя есть филиалы без самостоятельной регистрации в ФСС.
//
// Параметры:
//   Страхователь - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Булево
//
Функция УСтрахователяЕстьФилиалыВзаимодействующиеОтЕгоИмени(Страхователь) Экспорт
	Запрос = ЗапросПоФилиаламВзаимодействующимОтИмениСтрахователя(Страхователь);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

// Возвращает Истина если для данной организации поле "Страхователь" следует показывать пользователю.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Страхователь - СправочникСсылка.Организации
//
// Возвращаемое значение:
//   Булево
//
Функция ВидимостьПоляСтрахователь(Организация, Страхователь) Экспорт
	Если Организация <> Страхователь Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат УСтрахователяЕстьФилиалыВзаимодействующиеОтЕгоИмени(Страхователь);
КонецФункции

#КонецОбласти

#Область ЖурналРегистрации

Функция ЕстьПравоПросмотраЖурнала() Экспорт
	Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналРегистрации);
КонецФункции

#КонецОбласти

#Область ИсправлениеДокументов

// См. ИсправлениеДокументовЗарплатаКадры.ПоследнийДокументЦепочкиИсправлений.
Функция ПоследнийДокументЦепочкиИсправлений(Ссылка) Экспорт
	// ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов") Тогда
		МодульИсправлениеДокументовЗарплатаКадры = ОбщегоНазначения.ОбщийМодуль("ИсправлениеДокументовЗарплатаКадры");
		Возврат МодульИсправлениеДокументовЗарплатаКадры.ПоследнийДокументЦепочкиИсправлений(Ссылка);
	КонецЕсли;
	// Конец ЗарплатаКадрыРасширеннаяПодсистемы.ИсправленияДокументов
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область СтрахователиФСС

Функция ЗапросПоСтрахователямОрганизаций(Организации)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ГоловныеОрганизации.Ссылка КАК ГоловнаяОрганизация,
	|	ВЫБОР
	|		КОГДА ГоловныеОрганизации.Ссылка ЕСТЬ NULL
	|				ИЛИ ГоловныеОрганизации.Ссылка = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ИЛИ Организации.ГоловнаяОрганизация = Организации.Ссылка
	|			ТОГДА Организации.Ссылка
	|		КОГДА Организации.ДополнительныйКодФСС = """"
	|				И Организации.РегистрационныйНомерФСС = """"
	|			ТОГДА ГоловныеОрганизации.Ссылка
	|		КОГДА ВЫБОР
	|				КОГДА Организации.ДополнительныйКодФСС = """"
	|					ТОГДА Организации.РегистрационныйНомерФСС
	|				ИНАЧЕ Организации.ДополнительныйКодФСС
	|			КОНЕЦ = ВЫБОР
	|				КОГДА ГоловныеОрганизации.ДополнительныйКодФСС = """"
	|					ТОГДА ГоловныеОрганизации.РегистрационныйНомерФСС
	|				ИНАЧЕ ГоловныеОрганизации.ДополнительныйКодФСС
	|			КОНЕЦ
	|			ТОГДА ГоловныеОрганизации.Ссылка
	|		ИНАЧЕ Организации.Ссылка
	|	КОНЕЦ КАК Страхователь
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ГоловныеОрганизации
	|		ПО Организации.ГоловнаяОрганизация = ГоловныеОрганизации.Ссылка
	|ГДЕ
	|	Организации.Ссылка В(&Организации)";
	Запрос.УстановитьПараметр("Организации", Организации);
	Возврат Запрос;
КонецФункции

Функция ЗапросПоФилиаламВзаимодействующимОтИмениСтрахователя(Страхователи)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГоловныеОрганизации.Ссылка КАК ГоловнаяОрганизация,
	|	Филиалы.Ссылка КАК Филиал
	|ИЗ
	|	Справочник.Организации КАК ГоловныеОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Филиалы
	|		ПО (ГоловныеОрганизации.Ссылка В (&Страхователи))
	|			И (Филиалы.ГоловнаяОрганизация В (&Страхователи))
	|			И (Филиалы.ГоловнаяОрганизация <> Филиалы.Ссылка)
	|			И (ВЫБОР
	|				КОГДА Филиалы.ДополнительныйКодФСС = """"
	|						И Филиалы.РегистрационныйНомерФСС = """"
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА Филиалы.ДополнительныйКодФСС = """"
	|							ТОГДА Филиалы.РегистрационныйНомерФСС
	|						ИНАЧЕ Филиалы.ДополнительныйКодФСС
	|					КОНЕЦ = ВЫБОР
	|						КОГДА ГоловныеОрганизации.ДополнительныйКодФСС = """"
	|							ТОГДА ГоловныеОрганизации.РегистрационныйНомерФСС
	|						ИНАЧЕ ГоловныеОрганизации.ДополнительныйКодФСС
	|					КОНЕЦ
	|			КОНЕЦ)";
	Запрос.УстановитьПараметр("Страхователи", Страхователи);
	Возврат Запрос;
КонецФункции

#КонецОбласти

#КонецОбласти
