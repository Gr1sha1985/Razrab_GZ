
#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияКлиентПереопределяемый.ПослеНачалаРаботыСистемы
Процедура ПослеНачалаРаботы() Экспорт
	
	ПараметрыВсехЧатов = ПараметрыВсехЧатов();
	Если ПараметрыВсехЧатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьОповещенияПлатформыСамозанятые", 15, Истина);
	
	Подключить();
	
КонецПроцедуры

// Подключает обработчики отдельных событий СистемыВзаимодействия.
//
Процедура Подключить() Экспорт
	
	ПараметрыВсехЧатов = ПараметрыВсехЧатов();
	Если ПараметрыВсехЧатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьПереходПользователяПоСсылке", ЭтотОбъект);
	СистемаВзаимодействия.ПодключитьОбработчикДействияСообщения(Обработчик);
	
	Обработчик = Новый ОписаниеОповещения("ОбработчикФормированияКоманд", ЭтотОбъект);
	СистемаВзаимодействия.ПодключитьОбработчикФормированияКоманд(Обработчик);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПоказатьНовыеОповещения() Экспорт
	
	ОтключитьОбработчикОжидания("Подключаемый_ПоказатьОповещенияПлатформыСамозанятые");
	
	ПараметрыВсехЧатов = ПараметрыВсехЧатов();
	Если ПараметрыВсехЧатов = Неопределено Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьОповещенияПлатформыСамозанятые", ИнтервалПроверкиОповещений(), Ложь);
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрыЧата Из ПараметрыВсехЧатов Цикл
		НачатьПолучениеОповещений(ПараметрыЧата.Значение);
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьОповещенияПлатформыСамозанятые", ИнтервалПроверкиОповещений(), Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеОбработчикиСистемыВзаимодействия

Процедура ОбработатьПереходПользователяПоСсылке(Сообщение, ЗначениеСсылки, ДополнительныеПараметры) Экспорт
	
	ПараметрыВсехЧатов = ПараметрыВсехЧатов();
	Если Не ЭтоЧатПлатформыСамозанятые(Сообщение.Обсуждение, ПараметрыВсехЧатов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеСсылки = "ПерейтиКОплатеНПД" Тогда
		
		ПараметрыЧата = ПараметрыВсехЧатов.Получить(Строка(Сообщение.Обсуждение));
		
		// Расчет налога выполняется до 12 числа месяца, следующего за налоговым периодом.
		// Уведомления о квитанциях приходят сразу после расчета налога.
		ДатаСозданияОповещения = Сообщение.Дата;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ПараметрыЧата.Организация);
		ПараметрыФормы.Вставить("ПериодСобытия", НачалоМесяца(ДобавитьМесяц(ДатаСозданияОповещения, -1)));
		ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
		
		ОткрытьФорму("Обработка.ПомощникУплатыНПД.Форма", ПараметрыФормы);
		
	ИначеЕсли ЗначениеСсылки = "ПерейтиВЛичныйКабинетМойНалог" Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСервиса());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработчикФормированияКоманд(ПараметрыКоманд, Команды, КомандаПоУмолчанию, ПараметрыЧата) Экспорт
	
	ИсточникКомандСообщение = Вычислить("ИсточникКомандСистемыВзаимодействия.Сообщение");
	Если ПараметрыКоманд.Источник <> ИсточникКомандСообщение Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоЧатПлатформыСамозанятые(ПараметрыКоманд.Обсуждение.Идентификатор, ПараметрыВсехЧатов()) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексУдалить = Неопределено;
	КомандаУдалитьСообщение = Вычислить("СтандартнаяКомандаСистемыВзаимодействия.УдалитьСообщение");
	Для Индекс = 0 По Команды.Количество() - 1 Цикл
		
		Команда = Команды[Индекс];
		
		Если Команда.Команда = КомандаУдалитьСообщение Тогда
			ИндексУдалить = Индекс;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Команды.Удалить(ИндексУдалить);
	
	ОбработчикКоманды = Новый ОписаниеОповещения("ОбработкаКомандыУдалитьСообщение", ЭтотОбъект, ПараметрыКоманд);
	ПредставлениеКоманды = НСтр("ru = 'Удалить'");
	
	НоваяКоманда = Вычислить("Новый ОписаниеКомандыСистемыВзаимодействия(ОбработчикКоманды, ПредставлениеКоманды)");
	
	Команды.Вставить(ИндексУдалить, НоваяКоманда);
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеОповещений

Процедура НачатьПолучениеОповещений(ПараметрыЧата)
	
	ДлительнаяОперация = ОповещенияПлатформыСамозанятыеВызовСервера.НачатьПолучениеОповещенийВФоне(ПараметрыЧата.Организация);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолучениеОповещенийЗавершение", ЭтотОбъект, ПараметрыЧата);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура НачатьПолучениеОповещенийЗавершение(ДлительнаяОперация, ПараметрыЧата) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		Запрос = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		ПолучитьРезультатЗапросаОповещений(Запрос, ПараметрыЧата);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ИнтеграцияСПлатформойСамозанятыеВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьРезультатЗапросаОповещений(Запрос, ПараметрыЧата)
	
	ДлительнаяОперация = ОповещенияПлатформыСамозанятыеВызовСервера.ПолучитьРезультатЗапросаОповещенийВФоне(Запрос);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	ПараметрыОбработчикаЗавершения = Новый Структура;
	ПараметрыОбработчикаЗавершения.Вставить("Запрос", Запрос);
	ПараметрыОбработчикаЗавершения.Вставить("ПараметрыЧата", ПараметрыЧата);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьРезультатЗапросаОповещенийЗавершение", ЭтотОбъект, ПараметрыОбработчикаЗавершения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьРезультатЗапросаОповещенийЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если РезультатЗапроса.Статус = СтатусыЗапросов.Выполнено Тогда
			ОповещенияПлатформыСамозанятыеВызовСервера.ПоказатьОповещенияВФоне(
				ДополнительныеПараметры.ПараметрыЧата,
				РезультатЗапроса);
		ИначеЕсли РезультатЗапроса.Статус = СтатусыЗапросов.Выполняется Тогда
			ПолучитьРезультатЗапросаОповещений(ДополнительныеПараметры.Запрос, ДополнительныеПараметры.ПараметрыЧата);
		Иначе
			ИнтеграцияСПлатформойСамозанятыеВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(РезультатЗапроса.Сообщение);
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ИнтеграцияСПлатформойСамозанятыеВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УдалениеСообщений

Процедура ОбработкаКомандыУдалитьСообщение(ПараметрыКоманд) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьУдалениеСообщенияПослеОтветаНаВопрос", ЭтотОбъект, ПараметрыКоманд);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Удалить сообщение?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

Процедура НачатьУдалениеСообщенияПослеОтветаНаВопрос(РезультатВопроса, ПараметрыКоманд) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСообщениеПлатформыСамозанятые(ПараметрыКоманд.Сообщение) Тогда
		НачатьУдалениеСообщения(ПараметрыКоманд);
	Иначе
		ОповещенияПлатформыСамозанятыеВызовСервера.УдалитьСообщение(ПараметрыКоманд.Сообщение.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура НачатьУдалениеСообщения(ПараметрыКоманд)
	
	ПараметрыВсехЧатов = ПараметрыВсехЧатов();
	Если ПараметрыВсехЧатов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Найдем нужные параметры чата.
	ПараметрыЧата = ПараметрыВсехЧатов.Получить(Строка(ПараметрыКоманд.Обсуждение.Идентификатор));
	Если ПараметрыЧата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ОповещенияПлатформыСамозанятыеВызовСервера.НачатьУдалениеОповещения(
		ПараметрыЧата.Организация, ПараметрыКоманд.Сообщение.Данные);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьУдалениеСообщенияЗавершение", ЭтотОбъект, ПараметрыКоманд);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Сообщение удаляется'");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура НачатьУдалениеСообщенияЗавершение(ДлительнаяОперация, ПараметрыКоманд) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		Запрос = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		ПолучитьРезультатУдаленияСообщения(Запрос, ПараметрыКоманд);
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ИнтеграцияСПлатформойСамозанятыеВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьРезультатУдаленияСообщения(Запрос, ПараметрыКоманд)
	
	ДлительнаяОперация = ОповещенияПлатформыСамозанятыеВызовСервера.ПолучитьРезультатУдаленияОповещения(Запрос);
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	ПараметрыОбработчикаЗавершения = Новый Структура;
	ПараметрыОбработчикаЗавершения.Вставить("Запрос", Запрос);
	ПараметрыОбработчикаЗавершения.Вставить("ПараметрыКоманд", ПараметрыКоманд);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьРезультатУдаленияСообщенияЗавершение", ЭтотОбъект, ПараметрыОбработчикаЗавершения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Сообщение удаляется'");
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ПолучитьРезультатУдаленияСообщенияЗавершение(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // отменена
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДлительнаяОперация)
		И ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если РезультатЗапроса.Статус = СтатусыЗапросов.Выполнено Тогда
			
			Если РезультатЗапроса.Результат.Результат = "Успешно" Тогда
				
				ТекстСообщения = НСтр("ru = 'Сообщение успешно удалено'");
				ПоказатьОповещениеПользователя(ТекстСообщения);
				
				ИдентификаторСообщения = ДополнительныеПараметры.ПараметрыКоманд.Сообщение.Идентификатор;
				ОповещенияПлатформыСамозанятыеВызовСервера.УдалитьСообщение(ИдентификаторСообщения);
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Не удалось удалить сообщение. Попробуйте повторить операцию'");
				ПоказатьОповещениеПользователя(ТекстОшибки, , , БиблиотекаКартинок.Ошибка32);
				
			КонецЕсли;
			
		ИначеЕсли РезультатЗапроса.Статус = СтатусыЗапросов.Выполняется Тогда
			ПолучитьРезультатУдаленияСообщения(ДополнительныеПараметры.Запрос, ДополнительныеПараметры.ПараметрыКоманд);
		Иначе
			ИнтеграцияСПлатформойСамозанятыеВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(РезультатЗапроса.Сообщение);
		КонецЕсли;
		
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ИнтеграцияСПлатформойСамозанятыеВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПараметрыВсехЧатов()
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	
	ПараметрыВсехЧатов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРаботыКлиента, "ОповещенияПлатформыСамозанятые");
	Если НЕ ЗначениеЗаполнено(ПараметрыВсехЧатов) Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПараметрыВсехЧатов;
	КонецЕсли;
	
КонецФункции

Функция ЭтоЧатПлатформыСамозанятые(ИдентификаторОбсуждения, ПараметрыВсехЧатов)

	Если ПараметрыВсехЧатов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЧата = ПараметрыВсехЧатов.Получить(Строка(ИдентификаторОбсуждения));
	Возврат ПараметрыЧата <> Неопределено;
	
КонецФункции

Функция ЭтоСообщениеПлатформыСамозанятые(Сообщение)
	
	Если ТипЗнч(Сообщение.Данные) <> Тип("Строка") Тогда
		Возврат Ложь;
	ИначеЕсли СтрНайти(ВРег(Сообщение.Данные), "ИДЕНТИФИКАТОР") = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ИнтервалПроверкиОповещений()
	
	Возврат 3600; // Каждый час
	
КонецФункции

#КонецОбласти
