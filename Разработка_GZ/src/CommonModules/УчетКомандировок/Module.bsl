#Область Суточные

// Функция возвращает нормы суточных, установленные в организации (по данным авансовых отчетов),
// а также предельные не облагаемые НДФЛ и взносами нормы.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организации
//  Период		 - Дата
// 
// Возвращаемое значение:
//   - Структура со свойствами:
//		- НормаПоРФ
//		- НормаПоРФНеоблагаемая
//		- НормаЗаРубежом
//		- НормаЗаРубежомНеоблагаемая
//
Функция НормыСуточных(Организация, Период) Экспорт 
	
	НормыСуточных = НормыСуточныхИзИсторииКомандировок(Организация, Период);
	
	НормыСуточных.Вставить("НормаПоРФНеоблагаемая", УчетКомандировокКлиентСервер.НалоговаяНормаСуточныхПоРФ());
	НормыСуточных.Вставить("НормаЗаРубежомНеоблагаемая", УчетКомандировокКлиентСервер.НалоговаяНормаСуточныхЗаРубежом());
	
	Если НормыСуточных.НормаПоРФ = Неопределено Тогда
		НормыСуточных.НормаПоРФ = НормыСуточных.НормаПоРФНеоблагаемая;
	КонецЕсли;
	
	Если НормыСуточных.НормаЗаРубежом = Неопределено Тогда
		НормыСуточных.НормаЗаРубежом = НормыСуточных.НормаЗаРубежомНеоблагаемая;
	КонецЕсли;
	
	Возврат НормыСуточных;
	
КонецФункции	

// Процедура сортирует таблицу суточных, рассчитывает количество дней для каждого сегмента с учетом дат начала (въезда) и окончания (выезда),
// а также добавляет необходимые данные для представления расчета на форме
//
// Параметры:
//  Суточные					 - ДанныеФормыКоллекция - таблица формы с данными, введенными пользователем
//								   Состав колонок - см. реквизиты ТЧ Суточные документа АвансовыйОтчет.
//                                 Дополнительно может быть колонка Порядок - используется для сортировки извне. 
//          					 - ТабличнаяЧасть объекта - например, ТЧ Суточные документа АвансовыйОтчет.
//  ДатаНачалаКомандировки		 - Дата 
//  ДатаОкончанияКомандировки	 - Дата 
//  НормыСуточных				 - Структура - см. НормыСуточных()
//
Процедура РассчитатьСуточные(Суточные, ДатаНачалаКомандировки, ДатаОкончанияКомандировки, НормыСуточных) Экспорт 

	Если Суточные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаКомандировки) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончанияКомандировки) Тогда
		Возврат;
	КонецЕсли;	
	
	// В некоторых случаях в конце расчета добавляется служебная строка (день возвращения) - см. п.4 правил расчета количества дней ниже.
	// Так как непосредственно при расчете эта строка мешает, то здесь ее удаляем, а в конце расчета добавим обратно.
	// Норму суточных служебной строки запомним, чтобы потом восстановить.
	НормаСуточныхСлужебнойСтроки = Неопределено;
	СлужебныеСтроки = Суточные.НайтиСтроки(Новый Структура("СлужебныйРасчет", Истина));
	Если СлужебныеСтроки.Количество() = 1 Тогда
		НормаСуточныхСлужебнойСтроки = СлужебныеСтроки[0].Норма;
		Суточные.Удалить(СлужебныеСтроки[0]);
		Если Суточные.Количество() = 0 Тогда
			// Если расчет вызван при удалении единственной значащей (неслужебной) строки
			Возврат;
		КонецЕсли;	
	КонецЕсли; 
	
	// Колонка Порядок используется только для сортировки таблицы на форме.
	ЕстьКолонкаПорядок = Ложь;
	Если ТипЗнч(Суточные) = Тип("ДанныеФормыКоллекция") И Суточные[0].Свойство("Порядок") Тогда
		ЕстьКолонкаПорядок = Истина;
	КонецЕсли;	
	
	Если Суточные.Количество() = 1 Тогда
		// Можно рассчитать по упрощенному алгоритму
		ОбщаяПродолжительность = УчетКомандировокКлиентСервер.ПродолжительностьПериодаВДнях(
			ДатаНачалаКомандировки, 
			Суточные[0].ДатаОкончания, 
			Истина); // считая дни начала и окончания командировки
			
		СтрокаРасчета = Суточные[0];
		Если ЕстьКолонкаПорядок Тогда
			СтрокаРасчета.Порядок = 1;
		КонецЕсли;	
		СтрокаРасчета.КоличествоДней = ОбщаяПродолжительность; 
		// КоличествоДней далее может измениться - см. условие ниже.
		// Поэтому сумму суточных в СтрокаРасчета определим позже - после того, как будет окончательно определена продолжительность.
		СтрокаРасчета.ДатаНачала = ДатаНачалаКомандировки; // дата окончания установлена пользователем
				
		// Для зарубежной командировки (не однодневной) день возвращения оплачивается по ставке для России.
		// В этом случае добавляем служебную строку - это расчет дня возвращения.
		Если ОбщаяПродолжительность > 1 
			И СтрокаРасчета.ЗаРубежом 
			И СтрокаРасчета.ДатаОкончания = ДатаОкончанияКомандировки Тогда
			
			СтрокаРасчета.КоличествоДней = ОбщаяПродолжительность - 1;
			
			СлужебнаяСтрока = Суточные.Добавить();
			СлужебнаяСтрока.СлужебныйРасчет = Истина;
			СлужебнаяСтрока.Страна = Справочники.СтраныМира.Россия;
			Если ЕстьКолонкаПорядок Тогда
				СлужебнаяСтрока.Порядок = 2;
			КонецЕсли;	
			СлужебнаяСтрока.ДатаНачала = ДатаОкончанияКомандировки;
			СлужебнаяСтрока.ДатаОкончания = ДатаОкончанияКомандировки;
			СлужебнаяСтрока.КоличествоДней = 1;
			СлужебнаяСтрока.Норма = ?(НормаСуточныхСлужебнойСтроки = Неопределено, НормыСуточных.НормаПоРФ, НормаСуточныхСлужебнойСтроки);
			
			УчетКомандировокКлиентСервер.РассчитатьСуммуСуточныхВСтроке(СлужебнаяСтрока, Ложь, НормыСуточных);
				
		КонецЕсли;	
		
		УчетКомандировокКлиентСервер.РассчитатьСуммуСуточныхВСтроке(
			СтрокаРасчета, 
			СтрокаРасчета.ДатаНачала = СтрокаРасчета.ДатаОкончания,
			НормыСуточных);
			
		Возврат;
		
	КонецЕсли;
	
	// Сортируем сегменты командировки в хронологическлом порядке.
	// Если несколько сегментов завершаются в один день, то учитываем порядок строк в расчете на форме.
	СортировкаПоДатам = Новый ТаблицаЗначений;
	
	СортировкаПоДатам.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	СортировкаПоДатам.Колонки.Добавить("СтрокаРасчета"); // ссылка на строку расчета
	СортировкаПоДатам.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	
	НомерСтроки = 0;
	Для Каждого СтрокаРасчета Из Суточные Цикл
		СтрокаСортировки = СортировкаПоДатам.Добавить();
		НомерСтроки = НомерСтроки + 1;
		СтрокаСортировки.НомерСтроки = НомерСтроки;
		СтрокаСортировки.ДатаОкончания = СтрокаРасчета.ДатаОкончания;
		СтрокаСортировки.СтрокаРасчета = СтрокаРасчета;
	КонецЦикла;	
	
	СортировкаПоДатам.Сортировать("ДатаОкончания, НомерСтроки");  
	
	// Правила расчета количества дней (согласно пп. 18 и 19 Постановления Правительства РФ от 13.10.2008 N 749 "Об особенностях направления работников в служебные командировки"):
	//
	// 1.Для первого сегмента учитываем день начала командировки только в том случае, если сегмент многодневный
	//	 (например, первые 2 дня сотрудник следовал по России, а затем выехал за рубеж).
	// 2.Для последующих сегментов день начала (он же день окончания предыдущего сегмента) учитывается в том случае, если он не учтен на предыдущем сегменте (см. п.3)
	// 3.Для дня окончания каждого сегмента правило такое: если сегмент многодневный, то день окончания переносится на следующий сегмент. 
	//	 Однодневный сегмент (даты начала и окончания равны, т.е. ПродолжительностьНеСчитаяДняВъезда = 0) ничего не переносит на следующий сегмент.
	// 4.Если последний сегмент не однодневный и заказчивается в день окончания командировки, то день возвращения, не учтенный на последнем сегменте (см. п.3),
	//	 учитывается по-разному в зависимости от того, является ли этот последний сегмент зарубежным или нет:
	//		- Если это возвращение из-за рубежа, то день возвращения оценивается по ставке для России 
	//		  (см. п.18 Постановления Правительства РФ от 13.10.2008 N 749). 
	//		  В этом случае в конце автоматически добавляется служебная строка с расчетом дня возвращения.
	//		- Если последний последний сегмент - по России, то день возвращения просто учитывается в его продолжительности (плюс 1 день в КоличествоДней).
	
	ДатаНачала = ДатаНачалаКомандировки; // начало каждого отдельного сегмента командировки
	ДобавитьДеньВъезда = Ложь; // признак переноса дня окончания на следующий сегмент (для следующего сегмента это день въезда)
	
	Порядок = 0;
	Для каждого СтрокаСортировки Из СортировкаПоДатам Цикл
		
		СтрокаРасчета = СтрокаСортировки.СтрокаРасчета;
		
		Порядок = Порядок + 1;
		Если ЕстьКолонкаПорядок Тогда
			СтрокаРасчета.Порядок = Порядок;
		КонецЕсли;	
		СтрокаРасчета.ДатаНачала = ДатаНачала;
				
		ПродолжительностьНеСчитаяДняВъезда = УчетКомандировокКлиентСервер.ПродолжительностьПериодаВДнях(
			СтрокаРасчета.ДатаНачала,
			СтрокаРасчета.ДатаОкончания);
			
		ДобавитьДеньВъезда = ДобавитьДеньВъезда ИЛИ (Порядок = 1 И ПродолжительностьНеСчитаяДняВъезда > 0);
		ВычестьДеньВыезда = (ПродолжительностьНеСчитаяДняВъезда > 0); // перенос на следующий сегмент
		
		СтрокаРасчета.КоличествоДней = ПродолжительностьНеСчитаяДняВъезда
			+ ?(ДобавитьДеньВъезда, 1, 0)
			- ?(ВычестьДеньВыезда, 1, 0); 
					
		УчетКомандировокКлиентСервер.РассчитатьСуммуСуточныхВСтроке(СтрокаРасчета, ПродолжительностьНеСчитаяДняВъезда = 0, НормыСуточных);
		
		ДобавитьДеньВъезда = ВычестьДеньВыезда // если день выезда не учтен в текущем сегменте, то его нужно учесть в следующем
			ИЛИ (Порядок = 1 И ПродолжительностьНеСчитаяДняВъезда = 0); // если первый сегмент однодневный, то день начала командировки относится ко 2-му сегменту
			
		ДатаНачала = СтрокаРасчета.ДатаОкончания; // дата начала следующего сегмента
		
	КонецЦикла; 
	
	// Определим, соответствует ли суммарное КоличествоДней, учтенное по сегментам, общей продолжительности командировки
	ОбщаяПродолжительность = УчетКомандировокКлиентСервер.ПродолжительностьПериодаВДнях(
		ДатаНачалаКомандировки, 
		ДатаОкончанияКомандировки, 
		Истина); // считая дни начала и окончания командировки
	ОстатокКомандировки = ОбщаяПродолжительность - Суточные.Итог("КоличествоДней");
			
	// Если расчет определен для всего периода командировки, то ОстатокКомандировки составит 1 день (см. п.4 правил расчета количества дней выше) 
	// (кроме крайне редкого случая, когда в командировке несколько сегментов и все они укладываются в один день - тогда ОстатокКомандировки = 0).
	// В этом случае (ОстатокКомандировки = 1) учтем этот остаток здесь.
	// Если расчет определен не для всего периода командировки, т.е. есть "дыры" в периоде командировки (ОстатокКомандировки > 1), 
	// то перед закрытием формы будет выдана ошибка.
	ПоследнийСегмент = СортировкаПоДатам[СортировкаПоДатам.Количество()-1].СтрокаРасчета;
	Если ОстатокКомандировки = 1 И ПоследнийСегмент.ДатаОкончания = ДатаОкончанияКомандировки Тогда
		
		Если ПоследнийСегмент.ЗаРубежом Тогда 
		
			СлужебнаяСтрока = Суточные.Добавить();
			СлужебнаяСтрока.СлужебныйРасчет = Истина;
			СлужебнаяСтрока.Страна = Справочники.СтраныМира.Россия;
			Если ЕстьКолонкаПорядок Тогда
				СлужебнаяСтрока.Порядок = НомерСтроки + 1;
			КонецЕсли;	
			СлужебнаяСтрока.ДатаНачала = ДатаОкончанияКомандировки;
			СлужебнаяСтрока.ДатаОкончания = ДатаОкончанияКомандировки;
			СлужебнаяСтрока.КоличествоДней = 1;
			СлужебнаяСтрока.Норма = ?(НормаСуточныхСлужебнойСтроки = Неопределено, НормыСуточных.НормаПоРФ, НормаСуточныхСлужебнойСтроки);
			
			УчетКомандировокКлиентСервер.РассчитатьСуммуСуточныхВСтроке(СлужебнаяСтрока, Ложь, НормыСуточных);
			
		Иначе
			
			ПоследнийСегмент.КоличествоДней = ПоследнийСегмент.КоличествоДней + 1;
			УчетКомандировокКлиентСервер.РассчитатьСуммуСуточныхВСтроке(ПоследнийСегмент, Ложь, НормыСуточных);
		
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры 

Функция НормыСуточныхИзИсторииКомандировок(Организация, Период) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 5
	|	АвансовыйОтчетСуточные.Ссылка КАК Ссылка,
	|	АвансовыйОтчетСуточные.Ссылка.Дата КАК Дата,
	|	МАКСИМУМ(АвансовыйОтчетСуточные.Норма) КАК Норма
	|ПОМЕСТИТЬ ВТ_СуточныеПоРФ
	|ИЗ
	|	Документ.АвансовыйОтчет.Суточные КАК АвансовыйОтчетСуточные
	|ГДЕ
	|	АвансовыйОтчетСуточные.Ссылка.Организация = &Организация
	|	И НЕ АвансовыйОтчетСуточные.Ссылка.ПометкаУдаления
	|	И НЕ АвансовыйОтчетСуточные.ЗаРубежом
	|	И АвансовыйОтчетСуточные.Ссылка.Дата < &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетСуточные.Ссылка,
	|	АвансовыйОтчетСуточные.Ссылка.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	АвансовыйОтчетСуточные.Ссылка.Дата УБЫВ,
	|	АвансовыйОтчетСуточные.Ссылка.Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 5
	|	АвансовыйОтчетСуточные.Ссылка КАК Ссылка,
	|	АвансовыйОтчетСуточные.Ссылка.Дата КАК Дата,
	|	МАКСИМУМ(АвансовыйОтчетСуточные.Норма) КАК Норма
	|ПОМЕСТИТЬ ВТ_СуточныеЗаРубежом
	|ИЗ
	|	Документ.АвансовыйОтчет.Суточные КАК АвансовыйОтчетСуточные
	|ГДЕ
	|	АвансовыйОтчетСуточные.Ссылка.Организация = &Организация
	|	И НЕ АвансовыйОтчетСуточные.Ссылка.ПометкаУдаления
	|	И АвансовыйОтчетСуточные.ЗаРубежом
	|	И АвансовыйОтчетСуточные.Ссылка.Дата < &Период
	|
	|СГРУППИРОВАТЬ ПО
	|	АвансовыйОтчетСуточные.Ссылка,
	|	АвансовыйОтчетСуточные.Ссылка.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	АвансовыйОтчетСуточные.Ссылка.Дата УБЫВ,
	|	АвансовыйОтчетСуточные.Ссылка.Ссылка УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СуточныеПоРФ.Норма КАК НормаПоРФ,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ПОМЕСТИТЬ ВТ_НормыПоРФ
	|ИЗ
	|	ВТ_СуточныеПоРФ КАК ВТ_СуточныеПоРФ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СуточныеПоРФ.Норма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СуточныеЗаРубежом.Норма КАК НормаЗаРубежом,
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ПОМЕСТИТЬ ВТ_НормыЗаРубежом
	|ИЗ
	|	ВТ_СуточныеЗаРубежом КАК ВТ_СуточныеЗаРубежом
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СуточныеЗаРубежом.Норма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_НормыПоРФ.НормаПоРФ КАК НормаПоРФ
	|ИЗ
	|	ВТ_НормыПоРФ КАК ВТ_НормыПоРФ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_НормыПоРФ.Количество УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_НормыЗаРубежом.НормаЗаРубежом КАК НормаЗаРубежом
	|ИЗ
	|	ВТ_НормыЗаРубежом КАК ВТ_НормыЗаРубежом
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_НормыЗаРубежом.Количество УБЫВ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
		
	Нормы = Новый Структура("НормаПоРФ, НормаЗаРубежом");
	
	Если НЕ РезультатЗапроса[4].Пустой() Тогда
		Выборка = РезультатЗапроса[4].Выбрать();
		Выборка.Следующий();
		Нормы.НормаПоРФ = Выборка.НормаПоРФ;
	КонецЕсли;	
	
	Если НЕ РезультатЗапроса[5].Пустой() Тогда
		Выборка = РезультатЗапроса[5].Выбрать();
		Выборка.Следующий();
		Нормы.НормаЗаРубежом = Выборка.НормаЗаРубежом;
	КонецЕсли;	
	
	Возврат Нормы;

КонецФункции

#КонецОбласти

#Область ВыданныеАвансы

// Функция возвращает таблицу документов выплат подотчетному лицу. 
// Выбирает данные периодами (помесячно, от последнего месяца к более ранним),
// пока не достигнет переданных органичений:
//  - заданного количества документов
//  - или суммы остатка аванса, выданного сотруднику
// Если ограничения не заданы, то документы выбираются одним пакетом (без ограничения по периоду "снизу").
// 
// Также функция может работать порционно: после каждого вызова в параметр ГраницаОкончанияПоиска 
// записывается момент времени последнего выбранного документа. Таким образом, вызывающая форма может хранить данный момент времени,
// и при следующем обращении передать его тем же параметром ГраницаОкончанияПоиска - тогда поиск будет ограничен "сверху" не значением Период,
// а моментом времени ГраницаОкончанияПоиска. 
//
// Параметры:
//  Организация				 - СправочникСсылка.Организации
//  Период					 - Дата - 
//  Сотрудник				 - СправочникСсылка.ФизическиеЛица - сотрудник (подотчетное лицо)
//  ВалютаДокумента			 - СправочникСсылка.Валюты - будут подобраны только документы в указанной валюте
//  ТекущийДокумент			 - ДокументСсылка.АвансовыйОтчет - командировка, по которой вылачен аванс
//  ОграничитьКоличеством	 - Число - количество найденных документов выплаты, после которого поиск будет остановлен и возвращен результат
//  ОграничитьОстатком		 - Булево - Истина - документы выплаты выбираются до тех пор, пока не достигнута сумма текущего остатка задолженности подотчетного лица
//  ГраницаОкончанияПоиска	 - МоментВремени - используется для ограничения поиска "сверху", а по завершении содержит момент времени последнего выбранного документа
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - колонки:
//		- Ссылка - ДокументСсылка.РасходныйКассовыйОрдер, ДокументСсылка.СписаниеСРасчетногоСчета - найденный документ выплаты подотчетному лицу
//      - Номер - номер документа выплаты
//		- Дата - дата документа выплаты
//		- СуммаДокумента - сумма документа выплаты
//		- ВидДокумента - текстовое описание вида документа для показа пользователю
//
Функция ДокументыВыплатыПодотчетномуЛицу(Организация, Период, Сотрудник, ВалютаДокумента, ТекущийДокумент = Неопределено, ОграничитьКоличеством = 0, ОграничитьОстатком = Истина, ГраницаОкончанияПоиска = Неопределено) Экспорт 
	
	ДокументыВыплаты = Новый ТаблицаЗначений;
	ДокументыВыплаты.Колонки.Добавить("Ссылка", 		Новый ОписаниеТипов("ДокументСсылка.РасходныйКассовыйОрдер, ДокументСсылка.СписаниеСРасчетногоСчета"));
	ДокументыВыплаты.Колонки.Добавить("Номер", 			Метаданные.РегистрыСведений.ДанныеПервичныхДокументов.Ресурсы.Номер.Тип);
	ДокументыВыплаты.Колонки.Добавить("Дата", 			ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДокументыВыплаты.Колонки.Добавить("СуммаДокумента", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ДокументыВыплаты.Колонки.Добавить("ВидДокумента", 	ОбщегоНазначения.ОписаниеТипаСтрока(50));
		
	// Выборка может работать в ограниченном режиме: "первые N найденных" 
	// или "пока не наберется документов на сумму текущего остатка задолженности".
	// При таких условиях выбираем данные по периодам:
	// идем по шкале времени назад с шагом в месяц и выбираем документы выплат, пока не наберем нужную сумму 
	// или заданное количество документов. 
	// В таком случае первый период равен с начала предыдущего месяца до указанной даты.
	ВыбиратьПорционно = (ОграничитьОстатком ИЛИ ОграничитьКоличеством <> 0);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("Период", Период);
	
	// Если установлены ограничения, то требуется выбрать несколько последних по времени документов,
	// поэтому нет смысла искать с самого начала. 
	// Вместо этого определим дату, ранее которой поиск не имеет смысла:
	// на интервале в 3 последних месяцев (с большой вероятностью документы выплаты аванса 
	// по текущему авансовому отчету укладываются в этот интервал) ищем наиболее раннюю дату,
	// за которую есть дебетовый оборот по 71 счету - ограничиваем поиск этой датой.
	// Если ограничения не указаны, то выбираем все документы без отбора по периоду "снизу".
	
	ДатаНачалаПоиска  = '00010101'; // общее ограничение поиска
	ДатаНачалаВыборки = '00010101'; // ограничение для каждого цикла выборки
	
	Если ВыбиратьПорционно Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МИНИМУМ(Вложенный.Период), ДАТАВРЕМЯ(1, 1, 1)) КАК Дата
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Период КАК Период
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&ДатаНачала,
		|				&ДатаОкончания,
		|				День,
		|				Счет В (&СчетаРасчетовСПодотчетнымиЛицами)
		|					И НЕ Счет.Валютный,
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций),
		|				Организация = &Организация
		|					И Субконто1 = &Сотрудник,
		|				,
		|				) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		ХозрасчетныйОбороты.СуммаОборотДт > 0
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Период
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(
		|				&ДатаНачала,
		|				&ДатаОкончания,
		|				День,
		|				Счет В (&СчетаРасчетовСПодотчетнымиЛицами)
		|					И Счет.Валютный,
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций),
		|				Организация = &Организация
		|					И Субконто1 = &Сотрудник
		|					И Валюта = &ВалютаДокумента,
		|				,
		|				) КАК ХозрасчетныйОбороты
		|	ГДЕ
		|		ХозрасчетныйОбороты.СуммаОборотДт > 0) КАК Вложенный";
		
		Запрос.УстановитьПараметр("ДатаНачала", 	ДобавитьМесяц(Период, -3));
		Запрос.УстановитьПараметр("ДатаОкончания", 	Период);
		Запрос.УстановитьПараметр("СчетаРасчетовСПодотчетнымиЛицами", 
			БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_));		
		
		ВыборкаДата = Запрос.Выполнить().Выбрать();
		ВыборкаДата.Следующий();
		
		ДатаНачалаПоиска = ВыборкаДата.Дата;
		
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПоиска) Тогда
			// В периоде поиска гарантированно нет документов авансов
			Возврат ДокументыВыплаты;
		КонецЕсли; 
		
		ДатаНачалаВыборки = Макс(ДобавитьМесяц(НачалоМесяца(Период), -1), ДатаНачалаПоиска);
		
	КонецЕсли;
	
	ДатаОкончанияВыборки = ?(ЗначениеЗаполнено(ГраницаОкончанияПоиска), ГраницаОкончанияПоиска.Дата, Период);
	
	ОстатокПрошлыхАвансов = 0;
	Если ОграничитьОстатком Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(Вложенный.ОстатокПрошлыхАвансов), 0) КАК ОстатокПрошлыхАвансов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОстатки.СуммаОстаток КАК ОстатокПрошлыхАвансов
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&Период,
		|				Счет В (&СчетаРасчетовСПодотчетнымиЛицами)
		|					И НЕ Счет.Валютный,
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций),
		|				Организация = &Организация
		|					И Субконто1 = &Сотрудник) КАК ХозрасчетныйОстатки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ХозрасчетныйОстатки.СуммаОстаток
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&Период,
		|				Счет В (&СчетаРасчетовСПодотчетнымиЛицами)
		|					И Счет.Валютный,
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций),
		|				Организация = &Организация
		|					И Субконто1 = &Сотрудник
		|					И Валюта = &ВалютаДокумента) КАК ХозрасчетныйОстатки) КАК Вложенный";
					
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОстатокПрошлыхАвансов = Выборка.ОстатокПрошлыхАвансов;
		КонецЕсли;	
	КонецЕсли; 
	
	// Ниже запрос может быть модифицирован схемой запроса
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвансовыйОтчетВыданныеАвансы.ДокументАванса КАК ДокументАванса
	|ПОМЕСТИТЬ УчтенныеВыплаты
	|ИЗ
	|	Документ.АвансовыйОтчет.ВыданныеАвансы КАК АвансовыйОтчетВыданныеАвансы
	|ГДЕ
	|	АвансовыйОтчетВыданныеАвансы.Ссылка.ФизЛицо = &Сотрудник
	|	И АвансовыйОтчетВыданныеАвансы.Ссылка.Дата >= &ДатаНачала
	|	И АвансовыйОтчетВыданныеАвансы.Ссылка.Организация = &Организация
	|	И АвансовыйОтчетВыданныеАвансы.Ссылка.ВалютаДокумента = &ВалютаДокумента
	|	И (АвансовыйОтчетВыданныеАвансы.ДокументАванса ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ИЛИ АвансовыйОтчетВыданныеАвансы.ДокументАванса ССЫЛКА Документ.СписаниеСРасчетногоСчета)
	|	И АвансовыйОтчетВыданныеАвансы.Ссылка.Проведен
	|	И АвансовыйОтчетВыданныеАвансы.Ссылка <> &ТекущийДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.МоментВремени КАК МоментВремени,
	|	РасходныйКассовыйОрдер.Номер КАК Номер,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчтенныеВыплаты КАК УчтенныеВыплаты
	|		ПО РасходныйКассовыйОрдер.Ссылка = УчтенныеВыплаты.ДокументАванса
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен
	|	И РасходныйКассовыйОрдер.Дата >= &ДатаНачала
	|	И РасходныйКассовыйОрдер.Дата <= &ДатаОкончания
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.Контрагент = &Сотрудник
	|	И РасходныйКассовыйОрдер.ВалютаДокумента = &ВалютаДокумента
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу)
	|	И УчтенныеВыплаты.ДокументАванса ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка,
	|	СписаниеСРасчетногоСчета.МоментВремени,
	|	СписаниеСРасчетногоСчета.Номер,
	|	СписаниеСРасчетногоСчета.Дата,
	|	СписаниеСРасчетногоСчета.СуммаДокумента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчтенныеВыплаты КАК УчтенныеВыплаты
	|		ПО СписаниеСРасчетногоСчета.Ссылка = УчтенныеВыплаты.ДокументАванса
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.Дата >= &ДатаНачала
	|	И СписаниеСРасчетногоСчета.Дата <= &ДатаОкончания
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.Контрагент = &Сотрудник
	|	И СписаниеСРасчетногоСчета.ВалютаДокумента = &ВалютаДокумента
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу)
	|	И УчтенныеВыплаты.ДокументАванса ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ";
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ВалютаДокумента", ВалютаДокумента);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
			
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Если НЕ ВыбиратьПорционно Тогда
		// Уберем ограничение выборки по периоду "снизу":
		// из 1-го запроса
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
		ИндексУсловияПоДатеНачала = ОтборЗапроса.Индекс(ОтборЗапроса.Найти("АвансовыйОтчетВыданныеАвансы.Ссылка.Дата >= &ДатаНачала"));
		ОтборЗапроса.Удалить(ИндексУсловияПоДатеНачала);
		
		// ... и из 2-го запроса
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Отбор;
		ИндексУсловияПоДатеНачала = ОтборЗапроса.Индекс(ОтборЗапроса.Найти("РасходныйКассовыйОрдер.Дата >= &ДатаНачала"));
		ОтборЗапроса.Удалить(ИндексУсловияПоДатеНачала);
		
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[1].Отбор;
		ИндексУсловияПоДатеНачала = ОтборЗапроса.Индекс(ОтборЗапроса.Найти("СписаниеСРасчетногоСчета.Дата >= &ДатаНачала"));
		ОтборЗапроса.Удалить(ИндексУсловияПоДатеНачала);
	КонецЕсли;
	
	// ГраницаОкончанияПоиска указывает на момент времени, до которого текущая процедура "дошла" на прошлом запуске.
	// Если значение не указано, то значит, достаточно ограничить выборку датой окончания -
	// в таком случае проверка по моменту времени не требуется.
		
	Если ЗначениеЗаполнено(ГраницаОкончанияПоиска) Тогда
		// Заменим ограничение выборки по периоду "сверху": вместо даты будет момент времени
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Отбор;
		ИндексУсловияПоДатеОкончания = ОтборЗапроса.Индекс(ОтборЗапроса.Найти("РасходныйКассовыйОрдер.Дата <= &ДатаОкончания"));
		ОтборЗапроса.Установить(ИндексУсловияПоДатеОкончания, Новый ВыражениеСхемыЗапроса("РасходныйКассовыйОрдер.МоментВремени < &ГраницаОкончанияПоиска"));
		
		ОтборЗапроса = СхемаЗапроса.ПакетЗапросов[1].Операторы[1].Отбор;
		ИндексУсловияПоДатеОкончания = ОтборЗапроса.Индекс(ОтборЗапроса.Найти("СписаниеСРасчетногоСчета.Дата <= &ДатаОкончания"));
		ОтборЗапроса.Установить(ИндексУсловияПоДатеОкончания, Новый ВыражениеСхемыЗапроса("СписаниеСРасчетногоСчета.МоментВремени < &ГраницаОкончанияПоиска"));
		
		Запрос.УстановитьПараметр("ГраницаОкончанияПоиска", ГраницаОкончанияПоиска);
	КонецЕсли;	
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	ДостигнутоОграничение = Ложь;
	
	Пока ДатаОкончанияВыборки >= ДатаНачалаПоиска Цикл  // если поиск не ограничен условиями, то цикл будет однократный 
						
		Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачалаВыборки);
		Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончанияВыборки);
		
		Выборка = Запрос.Выполнить().Выбрать();
				
		Пока Выборка.Следующий() Цикл
									
			НовыйДокумент = ДокументыВыплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйДокумент, Выборка);
			
			// Заполним представление вида документа
			Если ТипЗнч(НовыйДокумент.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				НовыйДокумент.ВидДокумента = НСтр("ru='Выдача наличных'");
			Иначе
				НовыйДокумент.ВидДокумента = НСтр("ru='Списание с расчетного счета'");
			КонецЕсли;	
			
			// Чтобы на следующем запуске ограничить поиск "сверху" до конкретного документа, то в переменную ГраницаОкончанияПоиска
			// сохраним момент времени последнего выбранного документа. 
			ГраницаОкончанияПоиска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "МоментВремени");
			
			Если ОграничитьОстатком Тогда
				ОстатокПрошлыхАвансов = ОстатокПрошлыхАвансов - Выборка.СуммаДокумента;
				Если ОстатокПрошлыхАвансов <= 0 Тогда
					ДостигнутоОграничение = Истина;
					Прервать;
				КонецЕсли;	
			КонецЕсли; 
			
			Если ОграничитьКоличеством <> 0 И ДокументыВыплаты.Количество() = ОграничитьКоличеством Тогда
				ДостигнутоОграничение = Истина;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;	
		
		Если ДостигнутоОграничение Тогда
			Прервать;
		КонецЕсли;
				
		// Если ограничений не установлено, то документы уже выбраны одной (первой) порцией
		Если НЕ ЗначениеЗаполнено(ДатаНачалаПоиска) Тогда
			Прервать;
		КонецЕсли;	
		
		ДатаОкончанияВыборки = ДатаНачалаВыборки - 1;
		ДатаНачалаВыборки = Макс(НачалоМесяца(ДатаОкончанияВыборки), ДатаНачалаПоиска);
		
	КонецЦикла;
	
	Возврат ДокументыВыплаты;
	
КонецФункции

#КонецОбласти

#Область Затраты

// Функция возвращает счет учета затрат по командировочным расходам, используемый по умолчанию
// 
// Возвращаемое значение:
//   ПланСчетовСсылка.Хозрасчетный
//
Функция СчетЗатратКомандировочныеРасходы(Организация, Период) Экспорт 

	Возврат УчетнаяПолитика.ОсновнойСчетУчетаЗатрат(Организация, Период)	

КонецФункции

// Функция возвращает статью затрат по командировочным расходам, установленную по умолчанию
// 
// Возвращаемое значение:
//   СправочникСсылка.СтатьиЗатрат
//
Функция СтатьяЗатратКомандировочныеРасходы() Экспорт 

	СтатьяЗатрат = Справочники.СтатьиЗатрат.СтатьяЗатратПоНазначению("КомандировочныеРасходы");
	Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		СтатьяЗатрат = Справочники.СтатьиЗатрат.ОсновнаяСтатьяЗатрат();
	КонецЕсли;	

	Возврат СтатьяЗатрат;
	
КонецФункции
 
#КонецОбласти

#Область Билеты

Функция СчетУчетаБилетов() Экспорт 

	Возврат ПланыСчетов.Хозрасчетный.Билеты;  // 76.14	

КонецФункции

#КонецОбласти
