#Область ПрограммныйИнтерфейс

Функция СоздатьВременныйКаталог() Экспорт
	
	ИмяКаталога = КаталогВременныхФайлов();
	РазделительПутиОС = ПолучитьРазделительПути();
	Если Прав(ИмяКаталога, 1) <> РазделительПутиОС Тогда
		ИмяКаталога = ИмяКаталога + РазделительПутиОС;
	КонецЕсли;
	
	ИмяКаталога = ИмяКаталога + Строка(Новый УникальныйИдентификатор) + РазделительПутиОС;
	СоздатьКаталог(ИмяКаталога);
	
	Возврат ИмяКаталога;
	
КонецФункции

Процедура УдалитьВременныйФайл(ИмяФайла) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаКартинок

Функция РасширенияКартинок()
	
	РасширенияКартинок = Новый Массив;
	
	Соотвествия = СоотвествиеРасширенийКартинокФорматам();
	Для каждого Соотвествие Из Соотвествия Цикл
		РасширенияКартинок.Добавить(Соотвествие.Ключ);
	КонецЦикла; 
	
	Возврат РасширенияКартинок;
	
КонецФункции

Функция СоотвествиеРасширенийКартинокФорматам() Экспорт
	
	// Этот список получен из элементов перечисления ФорматКартинки за вычитом векторных картинок, 
	// работа с которыми в методе ПолучитьКартинку не поддержана (WMF, EMF, SVG)
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("BMP",  ФорматКартинки.BMP);
	ДополнительныеПараметры.Вставить("DIB",  ФорматКартинки.BMP);
	ДополнительныеПараметры.Вставить("RLE",  ФорматКартинки.BMP);
	ДополнительныеПараметры.Вставить("GIF",  ФорматКартинки.GIF);
	ДополнительныеПараметры.Вставить("JPG",  ФорматКартинки.JPEG);
	ДополнительныеПараметры.Вставить("JPE",  ФорматКартинки.JPEG);
	ДополнительныеПараметры.Вставить("JPEG", ФорматКартинки.JPEG);
	ДополнительныеПараметры.Вставить("PNG",  ФорматКартинки.PNG);
	
	// В платформе нет механизма работы с многостраничным TIF, поэтому всегда считаем, 
	// что TIF в корректном формате и не требует преобразования
	//ДополнительныеПараметры.Вставить("TIFF", ФорматКартинки.TIFF);
	//ДополнительныеПараметры.Вставить("TIF",  ФорматКартинки.TIFF);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Если передано расширение не картинки, то будет возвращено Неопределено
Функция ФорматПоРасширению(Расширение)
	
	ЭлементСпискаЗначений = Неопределено;
	Соотвествие = СоотвествиеРасширенийКартинокФорматам();
	Соотвествие.Свойство(Расширение, ЭлементСпискаЗначений);
	
	Возврат ЭлементСпискаЗначений;
	
КонецФункции

// Процедура находится в ОМ, а не в обработке, чтобы в не вызывать проблему роста сеансовых данных на Фреше в фоновом задании
// Структуру параметра Параметры см в ОперацииСФайламиЭДКОКлиент.ТребованияКСканам()
// Описание параметра ДопустимыеТипыФайлов см в ОМ ОперацииСФайламиЭДКОКлиент.ТребованияКСканам
Процедура ОбработатьКартинки(Параметры, АдресРезультата) Экспорт
	
	ОписанияФайлов             = Параметры.ОписанияФайлов;
	ПараметрыПреобразования    = Параметры.ПараметрыПреобразования;
	ИгнорироватьОшибки         = ПараметрыПреобразования.ИгнорироватьОшибки;
	ДопустимыеРасширенияФайлов = ПолучитьДопустимыеРасширенияФайлов(ПараметрыПреобразования);
	
	Готово     = 0;
	Количество = ОписанияФайлов.Количество();
	
	Для каждого ОписаниеФайла Из ОписанияФайлов Цикл
		
		ОписаниеФайла.Вставить("Выполнено", Истина);
		
		ИсходныеСвойства = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеФайла);
		ДвДанные         = ОписаниеФайла.ДвоичныеДанные;
		СтарыйРазмер     = ДвДанные.Размер();
		
		Если ЭтоКартинка(ОписаниеФайла) Тогда
			Попытка
				НашаКартинка = Новый Картинка(ДвДанные, Истина);
				
				// Обход ошибки платформы 10212731 НашаКартинка.Формат() возвращает Неопределено, ожидается ФорматКартинки
				// и 10212586 NoDecodeDelegateForThisImageFormat `WEBP' @ error/constitute.c/ReadImage/501 
				ЭтоНеизвестныйФормат = НашаКартинка.Формат() = ФорматКартинки.НеизвестныйФормат ИЛИ НашаКартинка.Формат() = Неопределено;
				Если ЭтоНеизвестныйФормат Тогда
					
					ВосстановитьИсходныеСвойстваЭтойКартинки(ОписаниеФайла, ИсходныеСвойства, ПараметрыПреобразования);
					
				Иначе
				
					НашаКартинка = ИзменитьФорматКартинки(ОписаниеФайла, НашаКартинка, ДопустимыеРасширенияФайлов, ПараметрыПреобразования);
					
					ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(НашаКартинка);
					ОбрабатываемаяКартинка = ИзменитьПлотность(ОписаниеФайла, ОбрабатываемаяКартинка, НашаКартинка, ПараметрыПреобразования);
					ОбрабатываемаяКартинка = ИзменитьОттенкиСерого(ОписаниеФайла, ОбрабатываемаяКартинка, НашаКартинка, ПараметрыПреобразования);
					ОбрабатываемаяКартинка = ИзменитьГлубину(ОписаниеФайла, ОбрабатываемаяКартинка, НашаКартинка, ПараметрыПреобразования);
					
					// Если в результате получается картинка векторного формата (WMF, EMF, SVG), будет выдано сообщение об ошибке.
					НашаКартинка  = ОбрабатываемаяКартинка.ПолучитьКартинку();
					ОбновитьДвДанныеВОписанииФайла(НашаКартинка, ОписаниеФайла);
					НовыйРазмер   = ОписаниеФайла.Размер;
					
					// Проверяем после всех операций
					ПроверитьРазмерКартинки(ОписаниеФайла, НовыйРазмер, СтарыйРазмер, ПараметрыПреобразования);
					
				КонецЕсли;
				
				Если ИгнорироватьОшибки И ЗначениеЗаполнено(ОписаниеФайла.ОписаниеОшибки) Тогда
					ВосстановитьИсходныеСвойстваЭтойКартинки(ОписаниеФайла, ИсходныеСвойства, ПараметрыПреобразования);
				КонецЕсли;
				
			Исключение
				// Не выдаем ошибку, берем исходные свойства
				ВосстановитьИсходныеСвойстваЭтойКартинки(ОписаниеФайла, ИсходныеСвойства, ПараметрыПреобразования);
			КонецПопытки;

		Иначе
			ВосстановитьИсходныеСвойстваЭтойКартинки(ОписаниеФайла, ИсходныеСвойства, ПараметрыПреобразования);
		КонецЕсли;
		
		ОтобразитьПроцентГотовыхКартинок(Готово, Количество);
	
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ОписанияФайлов, АдресРезультата);
	
КонецПроцедуры

Процедура ВосстановитьИсходныеСвойстваЭтойКартинки(ОписаниеФайла, ИсходныеСвойства, ПараметрыПреобразования) Экспорт
	
	// Не выдаем ошибку, берем исходные свойства
	Если ОписаниеФайла.Свойство("Размер") Тогда
		Размер = ОписаниеФайла.Размер;
	Иначе
		Размер = 0;
	КонецЕсли;
		
	ОписаниеФайла.Очистить();
	// Копируем значения всех свойств в цикле
	Для каждого Свойство Из ИсходныеСвойства Цикл
		ОписаниеФайла.Вставить(Свойство.Ключ, Свойство.Значение);
	КонецЦикла;
	
	ОписаниеФайла.Вставить("Размер", Размер);
	
	ДопустимыеРасширенияФайлов = ПолучитьДопустимыеРасширенияФайлов(ПараметрыПреобразования);
	ИгнорироватьОшибки         = ПараметрыПреобразования.ИгнорироватьОшибки;
	
	Если НЕ ИгнорироватьОшибки Тогда
		ПроверитьРазмерКартинки(ОписаниеФайла, Размер, Размер, ПараметрыПреобразования);
		ПроверитьФормат(ОписаниеФайла, ДопустимыеРасширенияФайлов, ПараметрыПреобразования);
	КонецЕсли;
	
КонецПроцедуры

Функция НужноПреобразоватьФормат(ДопустимыеРасширенияФайлов, Расширение)
	
	Возврат ДопустимыеРасширенияФайлов.Найти(ВРЕГ(Расширение)) = Неопределено И ДопустимыеРасширенияФайлов.Количество() > 0;
	
КонецФункции

Процедура ПроверитьФормат(ОписаниеФайла, ДопустимыеРасширенияФайлов, ПараметрыПреобразования)
	
	СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Имя);
	Расширение    = СтрЗаменить(СвойстваФайла.Расширение, ".", "");
	
	Если НужноПреобразоватьФормат(ДопустимыеРасширенияФайлов, Расширение) И НЕ ПараметрыПреобразования.РазрешатьДругиеТипы Тогда
		
		ДопустимыеРасширения = СтрСоединить(ДопустимыеРасширенияФайлов, ", ");
		
		ТекстОшибки = НСтр("ru = 'Формат файла (%1) не соотвествует формату, определенному требованиями (%2)'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, ВРЕГ(Расширение), ДопустимыеРасширения);
		
	Иначе
		
		ТекстОшибки = "";
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Расширение",                Расширение);
	ДополнительныеПараметры.Вставить("ДопустимыеРасширения",      СтрСоединить(ДопустимыеРасширенияФайлов, ", "));
	ДополнительныеПараметры.Вставить("ЭтоНедопустимоеРасширение", ЗначениеЗаполнено(ТекстОшибки));
	
	ОписаниеФайла.Вставить("ФорматНеКартинки", ДополнительныеПараметры);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОписаниеФайла.Вставить("ОписаниеОшибки", ТекстОшибки);
		ОписаниеФайла.Вставить("Выполнено", 	 Ложь);
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменитьФорматКартинки(ОписаниеФайла, НашаКартинка, ДопустимыеРасширенияФайлов, ПараметрыПреобразования)
	
	РасширениеПоУмолчанию = ПараметрыПреобразования.РасширениеПоУмолчанию;
	СвойстваФайла         = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Имя);
	Расширение            = СтрЗаменить(СвойстваФайла.Расширение, ".", "");
	
	// Формат
	// Сначала преобразовываем формат, а только у картинки с новым форматом проверяем остальные свойства,
	// так как если у нового формата нет этого свойства, то и не нужно его менять.
	Если НужноПреобразоватьФормат(ДопустимыеРасширенияФайлов, Расширение) Тогда
		
		ФорматПоУмолчанию = ФорматПоРасширению(РасширениеПоУмолчанию);
		
		ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(НашаКартинка);
		ОбрабатываемаяКартинка.УстановитьФормат(ФорматПоУмолчанию);
		
		// Обновляем расширение после смены формата
		НовоеРасширение   = РасширениеПоУмолчанию;
		ОписаниеФайла.Вставить("Имя", СвойстваФайла.ИмяБезРасширения + "." + НовоеРасширение);
		
		// После смены формата заново получаем картинку, чтобы уже для итоговой картинки проверять все свойства.
		НашаКартинка = ОбрабатываемаяКартинка.ПолучитьКартинку();
		Выполнено = Истина;
		
	Иначе
		
		Выполнено = Неопределено;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("РасширениеСтарое",     Расширение);
	ДополнительныеПараметры.Вставить("ДопустимыеРасширения", СтрСоединить(ДопустимыеРасширенияФайлов, ", "));
	ДополнительныеПараметры.Вставить("Выполнено",  	         Выполнено);
	ДополнительныеПараметры.Вставить("РасширениеНовое",      НовоеРасширение);
	
	ОписаниеФайла.Вставить("ФорматКартинки", ДополнительныеПараметры);
	
	Возврат НашаКартинка;
	
КонецФункции

Функция ИзменитьПлотность(ОписаниеФайла, ОбрабатываемаяКартинка, НашаКартинка, ПараметрыПреобразования)
	
	МинимальнаяПлотность    = ПараметрыПреобразования.МинимальнаяПлотность;
	МаксимальнаяПлотность   = ПараметрыПреобразования.МаксимальнаяПлотность;

	ПлотностьПоГоризонтали  = НашаКартинка.ПлотностьПоГоризонтали();
	ПлотностьПоВертикали    = НашаКартинка.ПлотностьПоВертикали();
	ПлотностьНулевая        = 72;
	
	// Плотность
	ЗаданыГраницы     = МинимальнаяПлотность <> 0 И МаксимальнаяПлотность <> 0;
	ПлотностьЕсть     = ПлотностьПоВертикали <> ПлотностьНулевая И ПлотностьПоГоризонтали <> ПлотностьНулевая;
	ПлотностьНеверная = ПлотностьПоВертикали < МинимальнаяПлотность ИЛИ ПлотностьПоВертикали = МаксимальнаяПлотность
		ИЛИ ПлотностьПоГоризонтали < МинимальнаяПлотность ИЛИ ПлотностьПоГоризонтали > МаксимальнаяПлотность;
		
	Если ЗаданыГраницы И ПлотностьЕсть И ПлотностьНеверная Тогда
				
		// Плотность по вертикали всегда будет нужной
		ПлотностьПоВертикалиНовая = ПлотностьПоВертикали;
		Если ПлотностьПоВертикали < МинимальнаяПлотность Тогда
			ПлотностьПоВертикалиНовая = МинимальнаяПлотность;
		ИначеЕсли ПлотностьПоВертикали > МаксимальнаяПлотность Тогда
			ПлотностьПоВертикалиНовая = МаксимальнаяПлотность;
		КонецЕсли;
		
		// Плотность по горизонтали расчитывает так, чтобы сохранить исходные пропорции между вертикалью и горизонталью
		// Но если при этом плотность по горизонтали перестает попадать в рамки, то подводим под рамки
		Коэффициент = ПлотностьПоВертикалиНовая/ПлотностьПоВертикали;
		ПлотностьПоГоризонталиНовая = Коэффициент * ПлотностьПоГоризонтали;
		
		Если ПлотностьПоГоризонталиНовая < МинимальнаяПлотность Тогда
			ПлотностьПоГоризонталиНовая = МинимальнаяПлотность;
		ИначеЕсли ПлотностьПоГоризонталиНовая > МаксимальнаяПлотность Тогда
			ПлотностьПоГоризонталиНовая = МаксимальнаяПлотность;
		КонецЕсли;
		
		ОбрабатываемаяКартинка.УстановитьПлотность(ПлотностьПоГоризонталиНовая, ПлотностьПоВертикалиНовая);
		
		Выполнено = Истина;
		
	Иначе
		
		Выполнено = Неопределено;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Старая_ПлотностьПоГоризонтали",   ПлотностьПоГоризонтали);
	ДополнительныеПараметры.Вставить("Старая_ПлотностьПоВертикали",     ПлотностьПоВертикали);
	ДополнительныеПараметры.Вставить("ЕстьПлотность",                   ПлотностьЕсть);
	ДополнительныеПараметры.Вставить("Требуется_ПлотностьМинимальная",  МинимальнаяПлотность);
	ДополнительныеПараметры.Вставить("Требуется_ПлотностьМаксимальная", МаксимальнаяПлотность);
	ДополнительныеПараметры.Вставить("Выполнено",           		    Выполнено);
	ДополнительныеПараметры.Вставить("Новая_ПлотностьПоГоризонтали",    ПлотностьПоГоризонталиНовая);
	ДополнительныеПараметры.Вставить("Новая_ПлотностьПоВертикали",      ПлотностьПоВертикалиНовая);
	
	ОписаниеФайла.Вставить("Плотность", ДополнительныеПараметры);
	
	Возврат ОбрабатываемаяКартинка;
	
КонецФункции

Функция ИзменитьОттенкиСерого(ОписаниеФайла, ОбрабатываемаяКартинка, НашаКартинка, ПараметрыПреобразования)
	
	// Может быть определен только, если формат изображения предполагает хранение этой информации (PNG и TIFF).
	// Если не не хранит эту информацию, вернет Неопределено
	ОттенкиСерогоСтарые         = НашаКартинка.ОттенкиСерого();
	ПреобразоватьВОттенкиСерого = ПараметрыПреобразования.ПреобразоватьВОттенкиСерого;
	
	// ОттенкиСерого может быть определен только, если формат изображения предполагает хранение этой информации (PNG и TIFF).
	// Метод используется только для форматов PNG и TIFF (См СП для ПреобразоватьВОттенкиСерого)
	Если ПреобразоватьВОттенкиСерого И ОттенкиСерогоСтарые = Ложь Тогда
		ОбрабатываемаяКартинка.ПреобразоватьВОттенкиСерого();
		Выполнено = Истина;
	Иначе
		Выполнено = Неопределено;
	КонецЕсли;
	
	ВременнаяКартинка  = ОбрабатываемаяКартинка.ПолучитьКартинку();
	ОттенкиСерогоНовые = ВременнаяКартинка.ОттенкиСерого();
	
	СвойстваФайла         = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Имя);
	Расширение            = ВРег(СтрЗаменить(СвойстваФайла.Расширение, ".", ""));
	МожноПреобразовать    = НашаКартинка.ОттенкиСерого() <> Неопределено;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Была",               ?(НашаКартинка.ОттенкиСерого() = Истина, НСтр("ru = 'серая'"), НСтр("ru = 'цветная'")));
	ДополнительныеПараметры.Вставить("МожноПреобразовать", МожноПреобразовать);
	ДополнительныеПараметры.Вставить("НужноПреобразовать", ПреобразоватьВОттенкиСерого);
	ДополнительныеПараметры.Вставить("Выполнено",          Выполнено);
	
	Если МожноПреобразовать Тогда
		ДополнительныеПараметры.Вставить("Стала_ЕстьОшибкаПлатформы", ?(ОттенкиСерогоНовые = Истина, НСтр("ru = 'серая'"), НСтр("ru = 'цветная'")));
	Иначе
		ДополнительныеПараметры.Вставить("Стала", Неопределено);
	КонецЕсли;
	
	ОписаниеФайла.Вставить("ОттенкиСерого", ДополнительныеПараметры);
			
	Возврат ОбрабатываемаяКартинка;
	
КонецФункции

Функция ИзменитьГлубину(ОписаниеФайла, ОбрабатываемаяКартинка, НашаКартинка, ПараметрыПреобразования)
	
	ГлубинаЦветаФайла = ПараметрыПреобразования.ГлубинаЦвета;
	ЭтоJPEG = НашаКартинка.Формат() = ФорматКартинки.JPEG;
	
	Если ГлубинаЦветаФайла <> Неопределено Тогда 
		ГлубинаЦветаФайла = ColorDepth[ГлубинаЦветаФайла]; // Такая ошибка платформы, надо писать по-английски
	КонецЕсли;
	
	ГлубинаЦветаПредыдущая  = НашаКартинка.ГлубинаЦвета();
	
	// JPEG является TrueColor-форматом, то есть может хранить изображения с глубиной цвета 24 бит/пиксель
	// Поэтому его не получится преобразовать в другую глубину
	Если ГлубинаЦветаФайла <> Неопределено И ГлубинаЦветаПредыдущая <> ГлубинаЦветаФайла И НЕ ЭтоJPEG Тогда
		ОбрабатываемаяКартинка.УстановитьГлубинуЦвета(ГлубинаЦветаФайла);
		Выполнено = Истина;
	Иначе
		Выполнено = Неопределено;
	КонецЕсли;
	
	ВременнаяКартинка = ОбрабатываемаяКартинка.ПолучитьКартинку();
	ГлубинаЦветаНовая = ВременнаяКартинка.ГлубинаЦвета();
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ГлубинаСтарая", ГлубинаЦветаПредыдущая);
	ДополнительныеПараметры.Вставить("НужнаяГлубина", ГлубинаЦветаФайла);
	ДополнительныеПараметры.Вставить("ГлубинаНовая",  ГлубинаЦветаНовая);
	ДополнительныеПараметры.Вставить("ЭтоJPEG",       ЭтоJPEG);
	ДополнительныеПараметры.Вставить("Выполнено",     Выполнено);
	
	ОписаниеФайла.Вставить("Глубина", ДополнительныеПараметры);
	
	Возврат ОбрабатываемаяКартинка;
	
КонецФункции

Процедура ПроверитьРазмерКартинки(ОписаниеФайла, НовыйРазмер, СтарыйРазмер, ПараметрыПреобразования)
	
	МаксимальныйРазмерФайла = ПараметрыПреобразования.МаксимальныйРазмерФайла;
				
	ТекстОшибки = "";	
	
	НовыйРазмерФайлаПредставление   = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(НовыйРазмер);
	СтарыйРазмерФайлаПредставление  = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(СтарыйРазмер);
	МаксимальныйРазмерПредставление = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(МаксимальныйРазмерФайла);
	
	// Добавляем дробь после запятой
	Если НовыйРазмерФайлаПредставление = МаксимальныйРазмерПредставление Тогда
		НовыйРазмерФайлаПредставление   = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(НовыйРазмер, 1);
		СтарыйРазмерФайлаПредставление  = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(СтарыйРазмер, 1);
		МаксимальныйРазмерПредставление = ОбщегоНазначенияЭДКОКлиентСервер.ТекстовоеПредставлениеРазмераФайла(МаксимальныйРазмерФайла, 1);
	КонецЕсли;
	
	Если МаксимальныйРазмерФайла <> 0 И НовыйРазмер > МаксимальныйРазмерФайла Тогда
		
		Если СтарыйРазмер > МаксимальныйРазмерФайла Тогда
			ТекстОшибки = НСтр("ru = 'Размер файла %1 больше допустимого размера %2'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтарыйРазмерФайлаПредставление, МаксимальныйРазмерПредставление);
		Иначе
			ТекстОшибки = НСтр("ru = 'Файл размером %1 после преобразования к нужному формату стал занимать %2 и оказался больше допустимого размера %3'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтарыйРазмерФайлаПредставление, НовыйРазмерФайлаПредставление, МаксимальныйРазмерПредставление);
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("РазмерСтарый",       СтарыйРазмерФайлаПредставление);
	ДополнительныеПараметры.Вставить("РазмерНовый",        НовыйРазмерФайлаПредставление);
	ДополнительныеПараметры.Вставить("МаксимальныйРазмер", МаксимальныйРазмерПредставление);
	
	ОписаниеФайла.Вставить("ИзменениеРазмера", ДополнительныеПараметры);
	ОписаниеФайла.Вставить("Размер",           НовыйРазмер);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОписаниеФайла.Вставить("ОписаниеОшибки", ТекстОшибки);
		ОписаниеФайла.Вставить("Выполнено", 	 Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДвДанныеВОписанииФайла(НашаКартинка, ОписаниеФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	НашаКартинка.Записать(ИмяВременногоФайла);
	ДвДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	ОперацииСФайламиЭДКО.УдалитьВременныйФайл(ИмяВременногоФайла);
	
	Размер = ДвДанные.Размер();
	
	// После операций с файлом картинки эти данные уже поменялсь
	ОписаниеФайла.Вставить("ДвоичныеДанные", ДвДанные);
	ОписаниеФайла.Вставить("Размер",         Размер);
		
КонецПроцедуры	

Функция ЭтоКартинка(ОписаниеФайла)
	
	РасширенияКартинок = РасширенияКартинок();
		
	СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Имя);
	Расширение    = СтрЗаменить(СвойстваФайла.Расширение, ".", "");
	ЭтоКартинка   = РасширенияКартинок.Найти(ВРег(Расширение)) <> Неопределено;
	
	Возврат ЭтоКартинка;
	
КонецФункции

Функция ПолучитьДопустимыеРасширенияФайлов(ПараметрыПреобразования) Экспорт
	
	ДопустимыеТипыФайлов = ПараметрыПреобразования.ДопустимыеТипыФайлов;
	
	Если ТипЗнч(ДопустимыеТипыФайлов) = Тип("Строка") Тогда
		ДопустимыеТипыФайлов       = ВРЕГ(ДопустимыеТипыФайлов);
		ДопустимыеРасширенияФайлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ДопустимыеТипыФайлов,";");
	Иначе
		// Преобразовываем к расширениям
		ДопустимыеРасширенияФайлов = ОперацииСФайламиЭДКОВызовСервера.РасширенияПоФорматам(ДопустимыеТипыФайлов); 
	КонецЕсли;

	Возврат ДопустимыеРасширенияФайлов;
	
КонецФункции

Процедура ОтобразитьПроцентГотовыхКартинок(Готово, Количество)
	
	Готово  = Готово + 1;
	Процент = Цел(100*Готово/Количество);
	ДлительныеОперации.СообщитьПрогресс(Процент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти