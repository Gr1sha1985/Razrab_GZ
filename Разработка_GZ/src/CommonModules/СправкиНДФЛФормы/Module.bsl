#Область СлужебныйПрограммныйИнтерфейс

// Создает новую структуру параметров для формирования описания доходов организации.
// 
// Возвращаемое значение:
//  ПараметрыПредставления - Структура - содержит:
//    * ДляНалогаНаПрибыль               - Булево
//    * НеВключатьДоходыПоЦеннымБумагам  - Булево
//    * СводнаяСправка                   - Булево
//
Функция ПараметрыПредставленияОписанияДоходовОрганизации() Экспорт
	
	ПараметрыПредставления = Новый Структура;
	
	ПараметрыПредставления.Вставить("ДляНалогаНаПрибыль", Ложь);
	ПараметрыПредставления.Вставить("НеВключатьДоходыПоЦеннымБумагам", Ложь);
	ПараметрыПредставления.Вставить("СводнаяСправка", Ложь);

	Возврат ПараметрыПредставления;
	
КонецФункции

// Формирует надпись о доходах организации на форме
//
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения
//  ФизическоеЛицо           - СправочникСсылка.ФизическиеЛица
//  ПараметрыПредставления   - см. ПараметрыПредставленияОписанияДоходовОрганизации()
//
Процедура УстановитьИнфонадписьОписаниеДоходовОрганизации(Форма, ФизическоеЛицо = Неопределено, ПараметрыПредставления = Неопределено) Экспорт
	ОписаниеДоходовОрганизации = УчетНДФЛ.ОписаниеДоходовОрганизации(Форма.Объект.Организация, 
		Форма.Объект.НалоговыйПериод, Форма.Объект.Дата, ФизическоеЛицо, ПараметрыПредставления.ДляНалогаНаПрибыль,
		ПараметрыПредставления.НеВключатьДоходыПоЦеннымБумагам);	
	
	Если ПараметрыПредставления.ДляНалогаНаПрибыль Тогда
		
		Форма.ЗарегистрированыДоходы = ОписаниеДоходовОрганизации.Количество() > 0 
											Или (ФизическоеЛицо <> Неопределено	И (ФизическоеЛицо.Пустая() Или ПараметрыПредставления.СводнаяСправка));
		Возврат;
		
	Иначе

		Форма.ЗарегистрированыДоходы = Не ЗначениеЗаполнено(Форма.Объект.РегистрацияВНалоговомОргане) 
											Или Не ОписаниеДоходовОрганизации.Получить(Форма.Объект.РегистрацияВНалоговомОргане) = Неопределено 
											Или (ФизическоеЛицо <> Неопределено И (ФизическоеЛицо.Пустая() Или ПараметрыПредставления.СводнаяСправка));
		
	КонецЕсли;
										
	Если УчетНДФЛКлиентСервер.СправкиНДФЛДокументИспользуетКодОКТМО(Форма.Объект) Тогда
		ЗаголовокРегистрации = "ОКТМО/КПП";
	Иначе
		ЗаголовокРегистрации = "ОКАТО/КПП";	
	КонецЕсли;	
	
	ИнфоРегистрацияВНО = "";
	ТекстПредупреждения = "";
	Если Не Форма.ЗарегистрированыДоходы Тогда
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По %1 %2 доходы не зарегистрированы.'"), ЗаголовокРегистрации, Форма.РегистрацияВНОПредставление);		
	КонецЕсли;	
	
	ТекстКодов = "";
	Для Каждого РегистрацияВНОПредставление Из ОписаниеДоходовОрганизации Цикл
		Если ЗначениеЗаполнено(РегистрацияВНОПредставление.Ключ) Тогда
			ТекстКодов = ТекстКодов + ?(ЗначениеЗаполнено(ТекстКодов),", ","") + ПредставлениеРегистрацииВНО(Форма, РегистрацияВНОПредставление.Ключ);
		КонецЕсли;	
	КонецЦикла;
	
	Если ПараметрыПредставления.СводнаяСправка
		И ОписаниеДоходовОрганизации.Количество() > 0 Тогда
		
		ИнфоРегистрацияВНО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'За %1 год доходы зарегистрированы'"),
														Формат(Форма.Объект.НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"));
	ИначеЕсли ЗначениеЗаполнено(ТекстКодов) Тогда
		ИнфоРегистрацияВНО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'За %1 год зарегистрированы доходы по следующим кодам %2 %3. %4'"),
														Формат(Форма.Объект.НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"), 
														ЗаголовокРегистрации,
														ТекстКодов, 
														ТекстПредупреждения);
	Иначе
		Если ОписаниеДоходовОрганизации.Количество() > 0 Тогда
			ПродолжениеТекст = НСтр("ru = '. Возможно, для организации не указана регистрация в налоговом органе.'");
		Иначе	
			ПродолжениеТекст = "";
		КонецЕсли;	
		
		ИнфоРегистрацияВНО = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'За %1 год не зарегистрировано доходов%2'"), Формат(Форма.Объект.НалоговыйПериод,"ЧЦ=4; ЧДЦ=0; ЧГ=0"), ПродолжениеТекст);
	КонецЕсли;
	
	ЗарплатаКадрыКлиентСервер.УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, "РегистрацияВНалоговомОргане", ИнфоРегистрацияВНО);

КонецПроцедуры	

// Создает новую структуру параметров для помещения данных справки 2-НДФЛ в хранилище.
// 
// Возвращаемое значение:
//  ПараметрыДанныхСправки - Структура - содержит:
//    * ДанныеСотрудника                - ДанныеФормыКоллекция, ДанныеФормыЭлементКоллекции, ДанныеФормыСтруктура
//    * СтрокиСведенийОДоходах          - ДанныеФормыКоллекция, ДанныеФормыЭлементКоллекции
//    * СтрокиСведенийОВычетах          - ДанныеФормыЭлементКоллекции
//    * НомерСправки                    - Число
//    * Ставка                          - Перечисление.НДФЛСтавки
//    * НеВключатьДоходыПоЦеннымБумагам - Булево
//    * УведомленияОПравеНаВычеты       - ДанныеФормыЭлементКоллекции
//    * ПоказыватьИсправляемуюСправку   - Булево
//    * ИсправляемаяСправка             - Документ.СправкиНДФЛДляПередачиВНалоговыйОрган.Ссылка
//    * НомерКорректировки              - Число
//
Функция ПараметрыПомещенияДанныхСправки2НДФЛВХранилище() Экспорт
	
	ПараметрыДанныхСправки = Новый Структура;
	ПараметрыДанныхСправки.Вставить("ДанныеСотрудника");
	ПараметрыДанныхСправки.Вставить("СтрокиСведенийОДоходах");
	ПараметрыДанныхСправки.Вставить("СтрокиСведенийОВычетах");
	ПараметрыДанныхСправки.Вставить("НомерСправки");
	ПараметрыДанныхСправки.Вставить("Ставка", Неопределено);
	ПараметрыДанныхСправки.Вставить("НеВключатьДоходыПоЦеннымБумагам", Ложь);
	ПараметрыДанныхСправки.Вставить("УведомленияОПравеНаВычеты", Неопределено);
	ПараметрыДанныхСправки.Вставить("ПоказыватьИсправляемуюСправку", Ложь);
	ПараметрыДанныхСправки.Вставить("ИсправляемаяСправка", Неопределено);
	ПараметрыДанныхСправки.Вставить("НомерКорректировки", 0);
	
	Возврат ПараметрыДанныхСправки;
	
КонецФункции

// Помещает данные справки во временное хранилище, возвращает адрес во временном хранилище
//
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения
//  ПараметрыДанныхСправки   - см. ПараметрыПомещенияДанныхСправки2НДФЛВХранилище
//  Ошибки                   - Массив из Строка
//  НоваяСтрока              - Булево
// 
// Возвращаемое значение:
//  Строка - адрес во временном хранилище
//
Функция ПоместитьДанныеСправки2НДФЛВХранилище(Форма, ПараметрыДанныхСправки, Ошибки, НоваяСтрока) Экспорт
	
	ДанныеСправки = Новый Структура;
	
	МетаданныеСправки = Метаданные.Документы.СправкаНДФЛ;
	Для каждого РеквизитСправки Из МетаданныеСправки.Реквизиты Цикл
		ДанныеСправки.Вставить(РеквизитСправки.Имя);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ДанныеСправки, Форма.Объект);
	ЗаполнитьЗначенияСвойств(ДанныеСправки, ПараметрыДанныхСправки.ДанныеСотрудника);
	
	СведенияОДоходах = Новый Массив;

	ПоляСведений = СтрСоединить(
		ОбщегоНазначения.ВыгрузитьКолонку(
			МетаданныеСправки.ТабличныеЧасти.СведенияОДоходах.Реквизиты, 
			"Имя"),
		", ");
	
	Для Каждого СтрокаСведений Из ПараметрыДанныхСправки.СтрокиСведенийОДоходах Цикл
		СтруктураСведений = Новый Структура(ПоляСведений);
		ЗаполнитьЗначенияСвойств(СтруктураСведений, СтрокаСведений);
		СведенияОДоходах.Добавить(СтруктураСведений);
	КонецЦикла;
	ДанныеСправки.Вставить("МассивСведенийОДоходах", СведенияОДоходах);
			
	СведенияОВычетах = Новый Массив;

	ПоляСведений = СтрСоединить(
		ОбщегоНазначения.ВыгрузитьКолонку(
			МетаданныеСправки.ТабличныеЧасти.СведенияОВычетах.Реквизиты, 
			"Имя"),
		", ");
	
	Для Каждого СтрокаСведений Из ПараметрыДанныхСправки.СтрокиСведенийОВычетах Цикл
		СтруктураСведений = Новый Структура(ПоляСведений);
		ЗаполнитьЗначенияСвойств(СтруктураСведений, СтрокаСведений);
		СведенияОВычетах.Добавить(СтруктураСведений);
	КонецЦикла;
	ДанныеСправки.Вставить("МассивСведенийОВычетах", СведенияОВычетах);
	
	Если ПараметрыДанныхСправки.УведомленияОПравеНаВычеты <> Неопределено Тогда
		
		СведенияОбУведомлениях = Новый Массив;

		ПоляСведений = СтрСоединить(
			ОбщегоНазначения.ВыгрузитьКолонку(
				МетаданныеСправки.ТабличныеЧасти.УведомленияНОоПравеНаВычеты.Реквизиты, 
				"Имя"),
			", ");
		
		Для Каждого СтрокаСведений Из ПараметрыДанныхСправки.УведомленияОПравеНаВычеты Цикл
			СтруктураСведений = Новый Структура(ПоляСведений);
			ЗаполнитьЗначенияСвойств(СтруктураСведений, СтрокаСведений);
			СведенияОбУведомлениях.Добавить(СтруктураСведений);
		КонецЦикла;
		ДанныеСправки.Вставить("МассивСведенийОбУведомлениях", СведенияОбУведомлениях);
	Иначе
		ДанныеСправки.Вставить("МассивСведенийОбУведомлениях", Новый Массив);
	КонецЕсли;
	
	ДанныеСправки.Вставить("ДокументПроведен", Форма.ДокументПроведен);
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	ДанныеСправки.Вставить("Дата", Форма.Объект.Дата);
	ДанныеСправки.Вставить("НомерСправки", ПараметрыДанныхСправки.НомерСправки);
	ДанныеСправки.Вставить("Ставка", ПараметрыДанныхСправки.Ставка);
	ДанныеСправки.Вставить("НоваяСтрока", НоваяСтрока);
	ДанныеСправки.Вставить("ОшибкиДанныхСправки", Ошибки);
	ДанныеСправки.Вставить("НеВключатьДоходыПоЦеннымБумагам", ПараметрыДанныхСправки.НеВключатьДоходыПоЦеннымБумагам);
	ДанныеСправки.Вставить("ИсправляемаяСправка", ПараметрыДанныхСправки.ИсправляемаяСправка);
	ДанныеСправки.Вставить("ПоказыватьИсправляемуюСправку", ПараметрыДанныхСправки.ПоказыватьИсправляемуюСправку);
	ДанныеСправки.Вставить("НомерКорректировки", ПараметрыДанныхСправки.НомерКорректировки);
		
	Возврат	ПоместитьВоВременноеХранилище(ДанныеСправки, Новый УникальныйИдентификатор());
		
КонецФункции

// Заполняет реквизит формы СписокКонтролируемыхПолей.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения
//  ДляНалогаНаПрибыль	 - Булево
//
Процедура ЗаполнитьСписокКонтролируемыхПолей(Форма, ДляНалогаНаПрибыль = Ложь) Экспорт
	
	КонтролируемыеПоля = Новый Структура;
	
	КонтролируемыеПоляДоходы = Новый Массив;
	Если Не ДляНалогаНаПрибыль Тогда
		КонтролируемыеПоляДоходы.Добавить("МесяцНалоговогоПериода");
	КонецЕсли;
	КонтролируемыеПоляДоходы.Добавить("КодДохода");
	КонтролируемыеПоляДоходы.Добавить("СуммаДохода");
	КонтролируемыеПоляДоходы.Добавить("КодВычета");
	КонтролируемыеПоляДоходы.Добавить("СуммаВычета");
	
	КонтролируемыеПоля.Вставить("СведенияОДоходах", Новый ФиксированныйМассив(КонтролируемыеПоляДоходы));
	
	КонтролируемыеПоляВычеты = Новый Массив;
    КонтролируемыеПоляВычеты.Добавить("КодВычета");
	КонтролируемыеПоляВычеты.Добавить("СуммаВычета");
	
	КонтролируемыеПоля.Вставить("СведенияОВычетах", Новый ФиксированныйМассив(КонтролируемыеПоляВычеты));
	
	КонтролируемыеПоляУведомлений = Новый Массив;
    КонтролируемыеПоляУведомлений.Добавить("ДатаУведомления");
	КонтролируемыеПоляУведомлений.Добавить("НомерУведомления");
	КонтролируемыеПоляУведомлений.Добавить("КодНалоговогоОрганаУведомления");
	КонтролируемыеПоляУведомлений.Добавить("ГруппаВычета");
	
	КонтролируемыеПоля.Вставить("УведомленияНОоПравеНаВычеты", Новый ФиксированныйМассив(КонтролируемыеПоляУведомлений));
	КонтролируемыеПоля.Вставить("ИТОГИ", Новый ФиксированныйМассив(УчетНДФЛ.ПоляИтоговСправки2НДФЛ(ДляНалогаНаПрибыль)));
	
	Если Не ДляНалогаНаПрибыль Тогда
		
		КонтролируемыеПоляУведомление = Новый Массив;
		
		КонтролируемыеПоляУведомление.Добавить("ДатаУведомленияАвансовыеПлатежи");
		КонтролируемыеПоляУведомление.Добавить("НомерУведомленияАвансовыеПлатежи");
		КонтролируемыеПоляУведомление.Добавить("КодНалоговогоОрганаУведомленияАвансовыеПлатежи");

		КонтролируемыеПоля.Вставить("Уведомление", Новый ФиксированныйМассив(КонтролируемыеПоляУведомление));
		
	КонецЕсли;
	
	Форма.КонтролируемыеПоля = Новый ФиксированнаяСтруктура(КонтролируемыеПоля);
	
КонецПроцедуры	

// Заполняет данные сотрудника по данным учета за налоговый период на дату документа, отменяя ручные исправления
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения
//  СправкаПоСотруднику	 - ДанныеФормыСтруктура
//  НалоговыйПериод		 - Число                      - год налогового периода за который берутся данные сотрудника
//  ДатаДокумента		 - Дата
//
Процедура ОтменитьИсправлениеДанныхСотрудника(Форма, СправкаПоСотруднику, НалоговыйПериод, ДатаДокумента) Экспорт
														
	ЗаполняемыеПоля = СправкиНДФЛФормыКлиентСервер.ИменаФиксируемыхПолей();	
	
	ЧитатьДанныеСотрудников = Ложь;
	Для Каждого ИмяПоля Из ЗаполняемыеПоля Цикл
		ЧитатьДанныеСотрудников = ЧитатьДанныеСотрудников Или СправкаПоСотруднику["Фикс" + ИмяПоля];
		
		СправкаПоСотруднику["Фикс" + ИмяПоля] = Ложь; 
	КонецЦикла;	
	
	Если ЧитатьДанныеСотрудников Тогда
		ДанныеСправок = Новый Массив;
		ДанныеСправок.Добавить(СправкаПоСотруднику);
		
		СправкиНДФЛ.ПрочитатьДанныеСотрудников(ДанныеСправок, НалоговыйПериод, ДатаДокумента, Истина);
		
		СправкиНДФЛФормыКлиентСервер.УстановитьСвойстваЭлементовСФиксациейДанных(Форма, СправкаПоСотруднику, Форма.ДокументПроведен);
	КонецЕсли;	
		
	СправкиНДФЛФормыКлиентСервер.УстановитьИнфонадписьИсправления(Форма.ИнфоНадписьИсправления, СправкаПоСотруднику, Форма.ДокументПроведен);
	СправкиНДФЛФормыКлиентСервер.УстановитьСвойстваЭлементовСФиксациейДанных(Форма, СправкаПоСотруднику, Форма.ДокументПроведен);
		
КонецПроцедуры	

// Обновляет итоги по облагаемой и общей сумме дохода.
//
// Параметры:
//  ДанныеСправки   - ДанныеФормыСтруктура - содержит:
//    * ОблагаемаяСуммаДохода - Число
//    * ОбщаяСуммаДохода      - Число
//  СведенияОДоходах - ДанныеФормыКоллекция
//  СведенияОВычетах - ДанныеФормыКоллекция
//
Процедура ОбновитьИтоги(ДанныеСправки, СведенияОДоходах, СведенияОВычетах) Экспорт
	
	КодыДоходов = Новый Массив;
	Для Каждого СтрокаДоходов Из СведенияОДоходах Цикл
		КодыДоходов.Добавить(СтрокаДоходов.КодДохода);
	КонецЦикла;
	
	ИтогиПоСтавкам = Новый ТаблицаЗначений;
	ИтогиПоСтавкам.Колонки.Добавить("Ставка");
	ИтогиПоСтавкам.Колонки.Добавить("ОблагаемаяСуммаДохода");
	ИтогиПоСтавкам.Колонки.Добавить("ОбщаяСуммаДохода");
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка09;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка13;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка15;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка30;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка35;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка05;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка10;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка03;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка06;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка07;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	ДоходыПоставке = ИтогиПоСтавкам.Добавить();
	ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка12;
	ДоходыПоставке.ОбщаяСуммаДохода = 0;
	ДоходыПоставке.ОблагаемаяСуммаДохода = 0;
	
	Для Каждого СтрокаДоходов Из СведенияОДоходах Цикл
		ДоходыПоставке = ИтогиПоСтавкам.Добавить();
		ДоходыПоставке.Ставка = СтрокаДоходов.Ставка;
		ДоходыПоставке.ОбщаяСуммаДохода = СтрокаДоходов.СуммаДохода;
		ДоходыПоставке.ОблагаемаяСуммаДохода = СтрокаДоходов.СуммаДохода - СтрокаДоходов.СуммаВычета;
	КонецЦикла;
	
	Для Каждого СтрокаВычетов Из СведенияОВычетах Цикл
		ДоходыПоставке = ИтогиПоСтавкам.Добавить();
		ДоходыПоставке.Ставка = Перечисления.НДФЛСтавки.Ставка13;
		ДоходыПоставке.ОбщаяСуммаДохода = 0;
		ДоходыПоставке.ОблагаемаяСуммаДохода = -СтрокаВычетов.СуммаВычета;
	КонецЦикла;
	
	ИтогиПоСтавкам.Свернуть("Ставка", "ОблагаемаяСуммаДохода, ОбщаяСуммаДохода");
	
	Для Каждого СтрокаИтогов Из ИтогиПоСтавкам Цикл
		СтрокаИтогов.ОбщаяСуммаДохода = Макс(СтрокаИтогов.ОбщаяСуммаДохода, 0);
		СтрокаИтогов.ОблагаемаяСуммаДохода = Макс(СтрокаИтогов.ОблагаемаяСуммаДохода, 0);
		
		СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "ОблагаемаяСуммаДохода");
		СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "ОбщаяСуммаДохода");
	КонецЦикла;
	
КонецПроцедуры

// Очищает поля справки.
//
// Параметры:
//  ДанныеСправки        - ДанныеФормыЭлементКоллекции, ДанныеФормыСтруктура
//  ДляНалогаНаПрибыль	 - Булево
//
Процедура ОчиститьДанныеСправки(ДанныеСправки, ДляНалогаНаПрибыль = Ложь) Экспорт
	ФиксируемыеПоля = СправкиНДФЛФормыКлиентСервер.ИменаФиксируемыхПолей();
	
	Для Каждого ИмяПоля Из ФиксируемыеПоля Цикл
		ДанныеСправки["Фикс" + ИмяПоля] = Ложь;	
		ДанныеСправки[ИмяПоля] = Неопределено;
	КонецЦикла;	
	
	ДанныеСправки.ФиксНалоги = Ложь;
	Если Не ДляНалогаНаПрибыль Тогда
		ДанныеСправки.ФиксУведомление = Ложь;
	КонецЕсли;
	
	Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл 
		СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "ОбщаяСуммаДохода", 0);
		СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "ОблагаемаяСуммаДохода", 0);
		СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "Исчислено", 0);
		Если Не ДляНалогаНаПрибыль Тогда
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "ЗачтеноАвансовыхПлатежей", 0);
		КонецЕсли;
		СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "Удержано", 0);
		СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "Перечислено", 0);
		СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "Задолженность", 0);
		СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправки, СтавкаНДФЛ, "ИзлишнеУдержано", 0);
	КонецЦикла;	
	
КонецПроцедуры	

// Обновляет налоги в справках НДФЛ
//
// Параметры:
//  СправкаПоСотруднику	 - ДокументСсылка.СправкаНДФЛ, ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган
//  ПараметрыСправокНДФЛ - см. СправкиНДФЛ.ПараметрыСправокНДФЛ.
//
Процедура ОбновитьНалоги(СправкаПоСотруднику, ПараметрыСправокНДФЛ) Экспорт
								
	СправкаПоСотруднику.ФиксНалоги = Ложь;
		
	ДанныеСправок = Новый Массив;
	ДанныеСправок.Добавить(СправкаПоСотруднику);
	
	
	СправкиНДФЛ.ПрочитатьДанные(ДанныеСправок, ПараметрыСправокНДФЛ);
			
	СправкаПоСотруднику.ФиксУведомление = Ложь;
	
	ДанныеСправок = Новый Массив;
	ДанныеСправок.Добавить(СправкаПоСотруднику);
	
	СправкиНДФЛ.ПрочитатьДанныеУведомлений(ДанныеСправок, ПараметрыСправокНДФЛ.Организация, ПараметрыСправокНДФЛ.НалоговыйПериод);	
	
	Для каждого ИмяПоля Из УчетНДФЛ.ПоляЗачтеноАвансовыхПлатежей() Цикл
		Если ЗначениеЗаполнено(СправкаПоСотруднику[ИмяПоля]) Тогда
			СправкиНДФЛ.УточнитьСтатусРаботающегоПоПатенту(ДанныеСправок, ПараметрыСправокНДФЛ.НалоговыйПериод);
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ДляНалогаНаПрибыльПрочитатьДанныеОДоходахИНалогахСотрудника(Форма, СправкаПоСотруднику, СведенияОДоходах, СведенияОВычетах, НалоговыйПериод, ДатаДокумента, Организация, НомерСправки, Ставка) Экспорт
								
	СправкаПоСотруднику.ФиксНалоги = Ложь;
		
	ДанныеСправок = Новый Массив;
	ДанныеСправок.Добавить(СправкаПоСотруднику);
	
	ДляНалогаНаПрибыльПрочитатьДанныеОДоходахИНалогах(ДанныеСправок, 
										СведенияОДоходах, 
										СведенияОВычетах, 
										НалоговыйПериод, 
										ДатаДокумента, 
										Организация,
										НомерСправки,
										Ставка);
										
КонецПроцедуры	

Процедура ДляНалогаНаПрибыльПрочитатьДанные(ДанныеСправок, СведенияОДоходах, СведенияОВычетах, НалоговыйПериод, ДатаДокумента, Организация,  ОбновлятьНеФиксированныеДанные = Истина) Экспорт
																	
	СправкиНДФЛ.ПрочитатьДанныеСотрудников(ДанныеСправок, НалоговыйПериод, ДатаДокумента, ОбновлятьНеФиксированныеДанные);
		
	СправкиСНефиксированнымиСведениямиОНалогах = Новый Массив;
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		Если Не ДанныеСправкиПоСотруднику.ФиксНалоги Тогда
			СправкиСНефиксированнымиСведениямиОНалогах.Добавить(ДанныеСправкиПоСотруднику);
		КонецЕсли;	
	КонецЦикла;	
	
	ДляНалогаНаПрибыльПрочитатьДанныеОДоходахИНалогах(СправкиСНефиксированнымиСведениямиОНалогах, 
										    СведенияОДоходах, 
										    СведенияОВычетах, 
											НалоговыйПериод, 
											ДатаДокумента, 
											Организация);
											
КонецПроцедуры

Процедура ДляНалогаНаПрибыльПрочитатьДанныеОДоходахИНалогах(ДанныеСправок, СведенияОДоходах, СведенияОВычетах, НалоговыйПериод, ДатаДокумента, Организация, НомерСправки = Неопределено, Ставка = Неопределено) Экспорт
								
	Сотрудники = Новый Массив;	
	СправкиПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		
		Если Сотрудники.Найти(ДанныеСправкиПоСотруднику.Сотрудник) = Неопределено Тогда
			Сотрудники.Добавить(ДанныеСправкиПоСотруднику.Сотрудник);
			СправкиПоСотрудникам.Вставить(ДанныеСправкиПоСотруднику.Сотрудник, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеСправкиПоСотруднику));
		Иначе
			СправкиПоСотрудникам[ДанныеСправкиПоСотруднику.Сотрудник].Добавить(ДанныеСправкиПоСотруднику)
		КонецЕсли;
		
		Для Каждого СтавкаНДФЛ Из Перечисления.НДФЛСтавки Цикл 
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "ОбщаяСуммаДохода", 0);
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "ОблагаемаяСуммаДохода", 0);
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Исчислено", 0);
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Удержано", 0);
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Перечислено", 0);
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "Задолженность", 0);
			СправкиНДФЛ.УстановитьЗначениеПоляИтоговПоСтавке(ДанныеСправкиПоСотруднику, СтавкаНДФЛ, "ИзлишнеУдержано", 0);
		КонецЦикла;	

	КонецЦикла;	
	
	ДанныеДоходахНалогахВычетах = УчетНДФЛ.ДанныеОДоходахНалогахВычетах(Сотрудники, НалоговыйПериод, Организация, Неопределено, КонецДня(ДатаДокумента) + 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доходы.Ставка,
	|	Доходы.КодДохода,
	|	Доходы.КодВычета КАК КодВычета,
	|	Доходы.СуммаДохода,
	|	Доходы.СуммаВычета КАК СуммаВычета,
	|	Доходы.Сотрудник
	|ПОМЕСТИТЬ ВТДоходы
	|ИЗ
	|	&ДоходыПоМесяцам КАК Доходы
	|ГДЕ
	|	Доходы.ВключатьВДекларациюПоНалогуНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.КодВычета,
	|	Вычеты.СуммаВычета,
	|	Вычеты.Сотрудник
	|ПОМЕСТИТЬ ВТВычеты
	|ИЗ
	|	&Вычеты КАК Вычеты
	|ГДЕ
	|	Вычеты.ГруппаВычета В (ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные), ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей))
	|	И Вычеты.ВключатьВДекларациюПоНалогуНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.Ставка,
	|	Налоги.ОбщаяСуммаДохода,
	|	Налоги.ОблагаемаяСуммаДохода,
	|	Налоги.Исчислено,
	|	Налоги.Удержано,
	|	Налоги.Перечислено,
	|	Налоги.Задолженность,
	|	Налоги.ИзлишнеУдержано,
	|	Налоги.ВключатьВДекларациюПоНалогуНаПрибыль,
	|	Налоги.Сотрудник
	|ПОМЕСТИТЬ ВТНалоги
	|ИЗ
	|	&Налоги КАК Налоги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Налоги.ОбщаяСуммаДохода) КАК ОбщаяСуммаДохода,
	|	СУММА(Налоги.ОблагаемаяСуммаДохода) КАК ОблагаемаяСуммаДохода,
	|	СУММА(Налоги.Исчислено) КАК Исчислено,
	|	СУММА(Налоги.Удержано) КАК Удержано,
	|	СУММА(Налоги.Перечислено) КАК Перечислено,
	|	СУММА(Налоги.Задолженность) КАК Задолженность,
	|	СУММА(Налоги.ИзлишнеУдержано) КАК ИзлишнеУдержано,
	|	Налоги.Ставка,
	|	Налоги.Сотрудник
	|ИЗ
	|	ВТНалоги КАК Налоги
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Налоги.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|				ТОГДА Налоги.ВключатьВДекларациюПоНалогуНаПрибыль
	|			КОГДА &ДоИзмененияНалогообложенияДивидендов
	|					И Налоги.Ставка = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ Налоги.ВключатьВДекларациюПоНалогуНаПрибыль
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Налоги.Сотрудник,
	|	Налоги.Ставка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.Ставка,
	|	Доходы.КодДохода,
	|	Доходы.КодВычета,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода,
	|	СУММА(Доходы.СуммаВычета) КАК СуммаВычета,
	|	Доходы.Сотрудник
	|ИЗ
	|	ВТДоходы КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.Ставка,
	|	Доходы.КодДохода,
	|	Доходы.КодВычета,
	|	Доходы.Сотрудник
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Доходы.СуммаДохода) <> 0
	|		ИЛИ СУММА(Доходы.СуммаВычета) <> 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.КодВычета,
	|	Вычеты.СуммаВычета,
	|	Вычеты.Сотрудник
	|ИЗ
	|	ВТВычеты КАК Вычеты
	|ГДЕ
	|	Вычеты.СуммаВычета <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоходыИВычеты.Сотрудник,
	|	ДоходыИВычеты.Ставка,
	|	СУММА(ДоходыИВычеты.ОбщаяСуммаДохода) КАК ОбщаяСуммаДохода,
	|	СУММА(ДоходыИВычеты.ОблагаемаяСуммаДохода) КАК ОблагаемаяСуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		Доходы.Ставка КАК Ставка,
	|		Доходы.СуммаДохода КАК ОбщаяСуммаДохода,
	|		Доходы.СуммаДохода - Доходы.СуммаВычета КАК ОблагаемаяСуммаДохода,
	|		Доходы.Сотрудник КАК Сотрудник
	|	ИЗ
	|		ВТДоходы КАК Доходы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13),
	|		0,
	|		-Вычеты.СуммаВычета,
	|		Вычеты.Сотрудник
	|	ИЗ
	|		ВТВычеты КАК Вычеты) КАК ДоходыИВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоходыИВычеты.Сотрудник,
	|	ДоходыИВычеты.Ставка
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ДоходыИВычеты.ОбщаяСуммаДохода) <> 0
	|		ИЛИ СУММА(ДоходыИВычеты.ОблагаемаяСуммаДохода) <> 0)";
	Запрос.УстановитьПараметр("ДоходыПоМесяцам", ДанныеДоходахНалогахВычетах.Доходы);
	Запрос.УстановитьПараметр("Вычеты", ДанныеДоходахНалогахВычетах.Вычеты);
	Запрос.УстановитьПараметр("Налоги", ДанныеДоходахНалогахВычетах.Налоги);
	Запрос.УстановитьПараметр("ДоИзмененияНалогообложенияДивидендов", НалоговыйПериод < Год(УчетНДФЛ.ДатаИзмененияНалогообложенияДивидендов()));
	Результаты = Запрос.ВыполнитьПакет();
	ВсегоРезультатов = Результаты.Количество();
	
	ДанныеДоходахНалогахВычетах.Налоги = Результаты[ВсегоРезультатов - 4].Выгрузить();
	ДанныеДоходахНалогахВычетах.Доходы = Результаты[ВсегоРезультатов - 3].Выгрузить();
	ДанныеДоходахНалогахВычетах.Вычеты = Результаты[ВсегоРезультатов - 2].Выгрузить();
	ИтогиБазы = Результаты[ВсегоРезультатов - 1].Выгрузить();
	Если НомерСправки = Неопределено Тогда
		Для Каждого СтрокаДанныхОДоходах Из ДанныеДоходахНалогахВычетах.Доходы Цикл
			СправкиПоСотруднику = СправкиПоСотрудникам[СтрокаДанныхОДоходах.Сотрудник];
			СправкаДляЗаполнения = Неопределено;
			Для каждого ДанныеСправки Из СправкиПоСотруднику Цикл
				Если ДанныеСправки.Ставка = СтрокаДанныхОДоходах.Ставка Тогда
					СправкаДляЗаполнения = ДанныеСправки
				КонецЕсли;
			КонецЦикла;
			Если СправкаДляЗаполнения <> Неопределено Тогда
				СтрокаДоходовСправки = СведенияОДоходах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходовСправки, СтрокаДанныхОДоходах);
				СтрокаДоходовСправки.НомерСправки = СправкаДляЗаполнения.НомерСправки;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаДанныхОВычетах Из ДанныеДоходахНалогахВычетах.Вычеты Цикл
			СправкиПоСотруднику = СправкиПоСотрудникам[СтрокаДанныхОДоходах.Сотрудник];
			СправкаДляЗаполнения = Неопределено;
			Для каждого ДанныеСправки Из СправкиПоСотруднику Цикл
				Если ДанныеСправки.Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
					СправкаДляЗаполнения = ДанныеСправки
				КонецЕсли;
			КонецЦикла;
			Если СправкаДляЗаполнения <> Неопределено Тогда
				СтрокаВычетовСправки = СведенияОВычетах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВычетовСправки, СтрокаДанныхОВычетах);
				СтрокаВычетовСправки.НомерСправки = СправкаДляЗаполнения.НомерСправки;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		Для Каждого СтрокаДанныхОДоходах Из ДанныеДоходахНалогахВычетах.Доходы Цикл
			Если СтрокаДанныхОДоходах.Ставка = Ставка Тогда
				СтрокаДоходовСправки = СведенияОДоходах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДоходовСправки, СтрокаДанныхОДоходах);
			КонецЕсли;
		КонецЦикла;
		Если Ставка = Перечисления.НДФЛСтавки.Ставка13 Тогда
			Для Каждого СтрокаДанныхОВычетах Из ДанныеДоходахНалогахВычетах.Вычеты Цикл
				СтрокаВычетовСправки = СведенияОВычетах.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВычетовСправки, СтрокаДанныхОВычетах);
			КонецЦикла;	
		КонецЕсли;
	КонецЕсли;	
	
	СтруктураПоиска = Новый Структура("Сотрудник, Ставка");
	Для Каждого СтрокаИтогов Из ДанныеДоходахНалогахВычетах.Налоги Цикл
		СправкиПоСотруднику = СправкиПоСотрудникам[СтрокаИтогов.Сотрудник];
		Для каждого ДанныеСправки Из СправкиПоСотруднику Цикл
			ЗаполнятьСправку = Ложь;
			Если ЗначениеЗаполнено(Ставка) Тогда
				ЗаполнятьСправку = СтрокаИтогов.Ставка = Ставка
			Иначе
				ЗаполнятьСправку = СтрокаИтогов.Ставка = ДанныеСправки.Ставка
			КонецЕсли;
			Если ЗаполнятьСправку Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаИтогов);
				СтрокиИтоговБазы = ИтогиБазы.НайтиСтроки(СтруктураПоиска);
				Если СтрокиИтоговБазы.Количество() > 0 Тогда
					СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокиИтоговБазы[0], "ОбщаяСуммаДохода");
					СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокиИтоговБазы[0], "ОблагаемаяСуммаДохода");
				КонецЕсли;
				СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Исчислено");
				СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Удержано");
				СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Перечислено");
				СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "Задолженность");
				СправкиНДФЛ.ЗаполнитьПолеИтогов(ДанныеСправки, СтрокаИтогов, "ИзлишнеУдержано");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьСписокВыбораРегистрацийВНО(Форма, ФизическоеЛицо = Неопределено) Экспорт 
	Форма.РегистрацияВНалоговомОрганеСписокВыбора.Очистить();
	РегистрацииВНалоговомОргане = УчетНДФЛ.РегистрацииВНалоговомОрганеПоОрганизации(Форма.Объект.Организация, Форма.Объект.НалоговыйПериод);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РегистрацииВНалоговомОргане", РегистрацииВНалоговомОргане);
	Запрос.УстановитьПараметр("Организация", Форма.Объект.Организация);
	Запрос.УстановитьПараметр("Период", Дата(Форма.Объект.НалоговыйПериод, 12, 31));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсторияРегистрацийВНалоговомОргане.Период) КАК Период,
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТИсторияРегистраций
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|ГДЕ
	|	ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистрацийВНалоговомОргане.Период <= &Период
	|	И ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане В(&РегистрацииВНалоговомОргане)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
	|	РегистрацииВНалоговомОргане.Наименование КАК Наименование,
	|	РегистрацииВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО,
	|	РегистрацииВНалоговомОргане.КПП КАК КПП,
	|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
	|	ЕСТЬNULL(ИсторияРегистраций.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
	|ИЗ
	|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсторияРегистраций КАК ИсторияРегистраций
	|		ПО РегистрацииВНалоговомОргане.Ссылка = ИсторияРегистраций.РегистрацияВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.Ссылка В(&РегистрацииВНалоговомОргане)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокРегистраций = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		Если УчетНДФЛКлиентСервер.СправкиНДФЛДокументИспользуетКодОКТМО(Форма.Объект) Тогда
			ПредставлениеРегистрации = УчетНДФЛ.СуммаОКТМОиКПП(Выборка.КодПоОКТМО, Выборка.КПП);
		Иначе
			ПредставлениеРегистрации = УчетНДФЛ.СуммаОКАТОиКПП(Выборка.КодПоОКАТО, Выборка.КПП);
		КонецЕсли;
		Если Не ПустаяСтрока(Выборка.Наименование) Тогда
			ПредставлениеРегистрации = ПредставлениеРегистрации + " " + СокрЛП(Выборка.Наименование);
		КонецЕсли;
		СписокРегистраций.Добавить(Выборка.Ссылка, ПредставлениеРегистрации);
	КонецЦикла;
	
	Если Не Форма.Объект.РегистрацияВНалоговомОргане.Пустая()  
		И СписокРегистраций.НайтиПоЗначению(Форма.Объект.РегистрацияВНалоговомОргане) = Неопределено Тогда
		
		СписокРегистраций.Добавить(Форма.Объект.РегистрацияВНалоговомОргане, Форма.РегистрацияВНОПредставление);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокРегистраций Цикл
		ДобавляемоеЗначение = Новый Структура("Регистрация, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		
		Форма.РегистрацияВНалоговомОрганеСписокВыбора.Добавить(ДобавляемоеЗначение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если Форма.Объект.РегистрацияВНалоговомОргане.Пустая()
		И Форма.РегистрацияВНалоговомОрганеСписокВыбора.Количество() > 0 Тогда
		
		Форма.Объект.РегистрацияВНалоговомОргане = Форма.РегистрацияВНалоговомОрганеСписокВыбора[0].Значение.Регистрация;
	КонецЕсли;
	
	УстановитьПредставлениеРегистрацииВНО(Форма);
	
КонецПроцедуры

Процедура УстановитьСписокВыбораРегистрацийВНОПоФизическомуЛицу(Форма, ФизическоеЛицо) Экспорт 
	Форма.РегистрацияВНалоговомОрганеСписокВыбора.Очистить();
	
	ФормироватьСводно = Форма.Объект.СпособФормирования=Перечисления.ПорядокФормированияСправкиОДоходахФизическогоЛица.Сводно;

	Организация = Форма.Объект.Организация;
	НалоговыйПериод = Форма.Объект.НалоговыйПериод;
	НачалоПериода = Дата(НалоговыйПериод, 1, 1);
	ОкончаниеПериода =  Дата(НалоговыйПериод, 12, 31);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода)); 
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(ОкончаниеПериода));
	
	Если ФормироватьСводно Тогда 
		// АПК:96-выкл Использование ОБЪЕДИНИТЬ оправдано
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СведенияОДоходах.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	МАКСИМУМ(СведенияОДоходах.МесяцНалоговогоПериода) КАК Период
			|ПОМЕСТИТЬ ВТДействующиеРегистрации
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
			|ГДЕ
			|	СведенияОДоходах.Организация = &Организация
			|	И СведенияОДоходах.ФизическоеЛицо = &ФизическоеЛицо
			|	И СведенияОДоходах.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И СведенияОДоходах.МесяцНалоговогоПериода МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И (СведенияОДоходах.СуммаДохода <> 0
			|			ИЛИ СведенияОДоходах.СуммаВычета <> 0)
			|	И СведенияОДоходах.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОДоходах.РегистрацияВНалоговомОргане
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	ИсторияРегистрацийВНалоговомОргане.Период КАК Период
			|ПОМЕСТИТЬ ВТИсторияРегистрацийОрганизации
			|ИЗ
			|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&ОкончаниеПериода, (СтруктурнаяЕдиница = &Организация)) КАК ИсторияРегистрацийВНалоговомОргане
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	ИсторияРегистрацийВНалоговомОргане.Период КАК Период
			|ПОМЕСТИТЬ ВТИсторияРегистрацийГоловнойОрганизации
			|ИЗ
			|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&ОкончаниеПериода, (СтруктурнаяЕдиница = &ГоловнаяОрганизация) И (&ГоловнаяОрганизация <> &Организация)) КАК ИсторияРегистрацийВНалоговомОргане
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДействующиеРегистрации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	ДействующиеРегистрации.Период КАК Период,
			|	3 КАК Приоритет
			|ПОМЕСТИТЬ ВТРегистрацииДляВыбора
			|ИЗ
			|	ВТДействующиеРегистрации КАК ДействующиеРегистрации
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ИсторияРегистраций.РегистрацияВНалоговомОргане,
			|	ИсторияРегистраций.Период,
			|	2
			|ИЗ
			|	ВТИсторияРегистрацийОрганизации КАК ИсторияРегистраций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеРегистрации КАК ДействующиеРегистрации
			|		ПО ИсторияРегистраций.РегистрацияВНалоговомОргане = ДействующиеРегистрации.РегистрацияВНалоговомОргане
			|ГДЕ
			|	ДействующиеРегистрации.РегистрацияВНалоговомОргане ЕСТЬ NULL
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ИсторияРегистраций.РегистрацияВНалоговомОргане,
			|	ИсторияРегистраций.Период,
			|	1
			|ИЗ
			|	ВТИсторияРегистрацийГоловнойОрганизации КАК ИсторияРегистраций
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДействующиеРегистрации КАК ДействующиеРегистрации
			|		ПО ИсторияРегистраций.РегистрацияВНалоговомОргане = ДействующиеРегистрации.РегистрацияВНалоговомОргане
			|ГДЕ
			|	ДействующиеРегистрации.РегистрацияВНалоговомОргане ЕСТЬ NULL
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
			|	РегистрацииВНалоговомОргане.Наименование КАК Наименование,
			|	РегистрацииВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО,
			|	РегистрацииВНалоговомОргане.КПП КАК КПП,
			|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
			|	РегистрацииДляВыбора.Период КАК Период
			|ИЗ
			|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРегистрацииДляВыбора КАК РегистрацииДляВыбора
			|		ПО РегистрацииВНалоговомОргане.Ссылка = РегистрацииДляВыбора.РегистрацияВНалоговомОргане
			|
			|УПОРЯДОЧИТЬ ПО
			|	РегистрацииДляВыбора.Приоритет УБЫВ,
			|	РегистрацииДляВыбора.Период УБЫВ";	
		// АПК:96-вкл
	Иначе 
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СведенияОДоходах.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
			|	МАКСИМУМ(СведенияОДоходах.МесяцНалоговогоПериода) КАК Период
			|ПОМЕСТИТЬ ВТДействующиеРегистрации
			|ИЗ
			|	РегистрНакопления.СведенияОДоходахНДФЛ КАК СведенияОДоходах
			|ГДЕ
			|	СведенияОДоходах.Организация = &Организация
			|	И СведенияОДоходах.ФизическоеЛицо = &ФизическоеЛицо
			|	И СведенияОДоходах.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И СведенияОДоходах.МесяцНалоговогоПериода МЕЖДУ &НачалоПериода И &ОкончаниеПериода
			|	И (СведенияОДоходах.СуммаДохода <> 0
			|			ИЛИ СведенияОДоходах.СуммаВычета <> 0)
			|	И СведенияОДоходах.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	СведенияОДоходах.РегистрацияВНалоговомОргане
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РегистрацииВНалоговомОргане.Ссылка КАК Ссылка,
			|	РегистрацииВНалоговомОргане.Наименование КАК Наименование,
			|	РегистрацииВНалоговомОргане.КодПоОКАТО КАК КодПоОКАТО,
			|	РегистрацииВНалоговомОргане.КПП КАК КПП,
			|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
			|	РегистрацииДляВыбора.Период КАК Период
			|ИЗ
			|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДействующиеРегистрации КАК РегистрацииДляВыбора
			|		ПО РегистрацииВНалоговомОргане.Ссылка = РегистрацииДляВыбора.РегистрацияВНалоговомОргане
			|
			|УПОРЯДОЧИТЬ ПО
			|	РегистрацииДляВыбора.Период УБЫВ";	
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокРегистраций = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		Если УчетНДФЛКлиентСервер.СправкиНДФЛДокументИспользуетКодОКТМО(Форма.Объект) Тогда
			ПредставлениеРегистрации = УчетНДФЛ.СуммаОКТМОиКПП(Выборка.КодПоОКТМО, Выборка.КПП);
		Иначе
			ПредставлениеРегистрации = УчетНДФЛ.СуммаОКАТОиКПП(Выборка.КодПоОКАТО, Выборка.КПП);
		КонецЕсли;
		Если Не ПустаяСтрока(Выборка.Наименование) Тогда
			ПредставлениеРегистрации = ПредставлениеРегистрации + " " + СокрЛП(Выборка.Наименование);
		КонецЕсли;
		СписокРегистраций.Добавить(Выборка.Ссылка, ПредставлениеРегистрации);
	КонецЦикла;
	
	Если Не Форма.Объект.РегистрацияВНалоговомОргане.Пустая()
		И ЗначениеЗаполнено(ФизическоеЛицо)
		И СписокРегистраций.НайтиПоЗначению(Форма.Объект.РегистрацияВНалоговомОргане) = Неопределено Тогда
		
		СписокРегистраций.Добавить(Форма.Объект.РегистрацияВНалоговомОргане, Форма.РегистрацияВНОПредставление);
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокРегистраций Цикл
		ДобавляемоеЗначение = Новый Структура("Регистрация, Представление", ЭлементСписка.Значение, ЭлементСписка.Представление);
		
		Форма.РегистрацияВНалоговомОрганеСписокВыбора.Добавить(ДобавляемоеЗначение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Если Форма.Объект.РегистрацияВНалоговомОргане.Пустая()
		И Форма.РегистрацияВНалоговомОрганеСписокВыбора.Количество() > 0 Тогда
		
		Форма.Объект.РегистрацияВНалоговомОргане = Форма.РегистрацияВНалоговомОрганеСписокВыбора[0].Значение.Регистрация;
	КонецЕсли;
	
	УстановитьПредставлениеРегистрацииВНО(Форма);
	
КонецПроцедуры

Процедура УстановитьЗаголовокПоляРегистрацияВНО(Форма, Подробно = Ложь) Экспорт
	Если УчетНДФЛКлиентСервер.СправкиНДФЛДокументИспользуетКодОКТМО(Форма.Объект) Тогда	
		ТекстПодробно = ?(Подробно, " " + НСтр("ru = 'при выплате доходов'"), "");
		Заголовок = СтрШаблон(НСтр("ru = 'ОКТМО/КПП %1'"), ТекстПодробно);
	Иначе	
		Заголовок = НСтр("ru = 'ОКАТО/КПП'");
	КонецЕсли;	
	
	ТекущийЗаголовок = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Форма.Элементы, "РегистрацияВНалоговомОргане", "Заголовок");
	
	Если ТекущийЗаголовок <> Заголовок Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "РегистрацияВНалоговомОргане", "Заголовок", Заголовок);
	КонецЕсли;	
КонецПроцедуры	

Процедура ПрочитатьИсходныеСправки(ДанныеСправок, НалоговыйПериод, ДатаДокумента, Организация, РегистрацияВНалоговомОргане, НомерКорректировки) Экспорт
	
	Сотрудники = Новый Массив;	
	СправкиПоСотрудникам = Новый Соответствие;
	
	Для Каждого ДанныеСправкиПоСотруднику Из ДанныеСправок Цикл
		Сотрудники.Добавить(ДанныеСправкиПоСотруднику.Сотрудник);
		СправкиПоСотрудникам.Вставить(ДанныеСправкиПоСотруднику.Сотрудник, ДанныеСправкиПоСотруднику);
	КонецЦикла;	
	
	ИсходныеСправки = УчетНДФЛ.Справки2НДФЛОНевозможностиУдержания(Сотрудники, ДатаДокумента, НалоговыйПериод, Организация, РегистрацияВНалоговомОргане, НомерКорректировки);
	
	Для каждого СтрокаИсходныхСправок Из ИсходныеСправки Цикл
		ДанныеСправки = СправкиПоСотрудникам[СтрокаИсходныхСправок.Сотрудник];
	    ЗаполнитьЗначенияСвойств(ДанныеСправки, СтрокаИсходныхСправок);
	КонецЦикла;
	
КонецПроцедуры	

Процедура УстановитьКодИФНС(РегистрацияВНалоговомОргане, КодИФНС) Экспорт
	КодИФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегистрацияВНалоговомОргане, "Код");	
КонецПроцедуры	

Функция ПредставлениеРегистрацииВНО(Форма, РегистрацияВНалоговомОргане) 
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		Возврат "";
	ИначеЕсли УчетНДФЛКлиентСервер.СправкиНДФЛДокументИспользуетКодОКТМО(Форма.Объект) Тогда
		
		ПоляПредставления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Наименование, КодПоОКТМО, КПП");
		Возврат УчетНДФЛ.СуммаОКТМОиКПП(ПоляПредставления.КодПоОКТМО, ПоляПредставления.КПП) + ?(ПустаяСтрока(ПоляПредставления.Наименование), "", " " + СокрЛП(ПоляПредставления.Наименование));
		
	Иначе
		ПоляПредставления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РегистрацияВНалоговомОргане, "Наименование, КодПоОКАТО, КПП");
		Возврат УчетНДФЛ.СуммаОКАТОиКПП(ПоляПредставления.КодПоОКАТО, ПоляПредставления.КПП) + ?(ПустаяСтрока(ПоляПредставления.Наименование), "", " " + СокрЛП(ПоляПредставления.Наименование));
	КонецЕсли;
КонецФункции

Процедура УстановитьПредставлениеРегистрацииВНО(Форма) Экспорт 
	Форма.РегистрацияВНОПредставление = ПредставлениеРегистрацииВНО(Форма, Форма.Объект.РегистрацияВНалоговомОргане);
КонецПроцедуры	

#КонецОбласти