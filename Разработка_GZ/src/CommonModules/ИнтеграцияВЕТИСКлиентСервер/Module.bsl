#Область ПрограммныйИнтерфейс

Функция ИмяПодсистемы() Экспорт
	
	Возврат "ВЕТИС";
	
КонецФункции

Функция ПредставлениеПодсистемы() Экспорт
	
	Возврат "ВетИС";
	
КонецФункции

// Возвращает текстовое описание периода срока годности в зависимости от имеющихся параметров
// Параметры:
//  ТочностьПериода - ПеречислениеСсылка.ТочностьЗаполненияПериодаВЕТИС - описание способа указания периода.
//  НачалоПериода - Дата - дата периода (для указания срока годности типа "Дата") или дата начала (для указания срока годности типа "Интервал").
//  КонецПериода - Дата - дата окончания периода (для указания срока годности типа "Интервал").
//  ПредставлениеПериода - Строка - описание произвольно заданного периода
// Возвращаемое значение:
//  Строка - строковое описание периода (представление или описание на основе указанного периода и его точности)
// 
Функция ПредставлениеПериодаВЕТИС(Знач ТочностьПериода, Знач НачалоПериода = Неопределено, Знач КонецПериода = Неопределено, Знач ПредставлениеПериода = Неопределено) Экспорт 
	
	Если ТочностьПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ПустаяСсылка") Тогда
		Возврат ПредставлениеПериода;
	ИначеЕсли Не ЗначениеЗаполнено(НачалоПериода) Тогда
		Если ИнтеграцияВЕТИСКлиентСервер.ТочностьЗаполненияБезДаты(ТочностьПериода) Тогда
			Возврат Строка(ТочностьПериода);
		Иначе
			Возврат ПредставлениеПериода;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода)Тогда
		ШаблонФорматнойСтроки = "%1 - %2";
	Иначе
		ШаблонФорматнойСтроки = "%1";
	КонецЕсли;
	
	Если ТочностьПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ") Тогда
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%1",НРег(Формат(НачалоПериода,"ДФ='MMMM yyyy'")));
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%2",НРег(Формат(КонецПериода,"ДФ='MMMM yyyy'")));
	ИначеЕсли ТочностьПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ГГГГ") Тогда
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%1",НРег(Формат(НачалоПериода,"ДФ=yyyy")));
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%2",НРег(Формат(КонецПериода,"ДФ='yyyy'")));
	ИначеЕсли ТочностьПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ")Тогда
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%1",НРег(Формат(НачалоПериода,"ДЛФ=D")));
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%2",НРег(Формат(КонецПериода,"ДЛФ=D")));
	ИначеЕсли ТочностьПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ")Тогда
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%1",НРег(Формат(НачалоПериода,"ДЛФ=D")) + " " + НРег(Формат(НачалоПериода,"ДФ=HH:00")));
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%2",НРег(Формат(КонецПериода,"ДЛФ=D")) +  " " + НРег(Формат(КонецПериода,"ДФ=HH:00")));
	ИначеЕсли ТочностьПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.Неприменимо")Тогда
		ШаблонФорматнойСтроки = "";
	Иначе
		ШаблонФорматнойСтроки = СтрЗаменить(ШаблонФорматнойСтроки,"%1",ТочностьПериода);
	КонецЕсли;
	
	Возврат ШаблонФорматнойСтроки;
	
КонецФункции

// Преобразует значение даты ВетИС в дату начала или конца периода точности заполнения.
// Параметры:
//  Период       - Дата   - дата элемента периода ВетИС.
//  Точность     - ПеречислениеСсылка.ТочностьЗаполненияПериодаВЕТИС - описание способа указания периода.
//  КонецПериода - Булево - Признак необходимости получения конца периода.
// Возвращаемое значение:
//  Дата - преобразованное значение даты.
//
Функция ЗначениеЭлементаПериодаВЕТИС(Знач Период, Знач Точность, Знач КонецПериода = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Возврат Период;
	КонецЕсли;
	
	Если Точность = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ГГГГ") Тогда
		Возврат ?(КонецПериода, КонецГода(Период),НачалоГода(Период));
	ИначеЕсли Точность = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ") Тогда
		Возврат ?(КонецПериода, КонецМесяца(Период),НачалоМесяца(Период));
	ИначеЕсли Точность = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ") Тогда
		Возврат ?(КонецПериода, КонецДня(Период),НачалоДня(Период));
	ИначеЕсли Точность = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ") Тогда
		Возврат ?(КонецПериода, КонецЧаса(Период),НачалоЧаса(Период));
	КонецЕсли;
	
	Возврат Период;
	
КонецФункции

Функция ПутьКСерверуСИнформациейПоВСД() Экспорт
	
	Если РежимРаботыСТестовымКонтуромВЕТИС() Тогда
		Возврат "https://t2-mercury.vetrf.ru/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid=";
	Иначе
		Возврат "https://mercury.vetrf.ru/pub/operatorui?_language=ru&_action=showVetDocumentFormByUuid&uuid=";
	КонецЕсли;
	
КонецФункции

#Область ЗаполнениеСтруктур

Функция РеквизитыСозданияКонтрагента() Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("Наименование");
	ДанныеКонтрагента.Вставить("НаименованиеПолное");
	ДанныеКонтрагента.Вставить("ИНН");
	ДанныеКонтрагента.Вставить("КПП");
	ДанныеКонтрагента.Вставить("ЮридическийАдрес");
	Возврат ДанныеКонтрагента;
	
КонецФункции

// Возвращает соответствие редактируемых реквизитов периода ВЕТИС общей форме
// Параметры:
//  Префикс - Строка - префикс наименования реквизитов
// Возвращаемое значение:
//  Структура - в ключах имена параметров общей формы, в значениях имена соответствующих реквизитов (объекта, формы, структуры итп)
Функция РеквизитыПериода(Префикс) Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоПериода",             Префикс + "НачалоПериода");
	Результат.Вставить("КонецПериода",              Префикс + "КонецПериода");
	Результат.Вставить("ПредставлениеПериода",      Префикс + "Строка");
	Результат.Вставить("ТочностьЗаполненияПериода", Префикс + "ТочностьЗаполнения");
	Возврат Результат;
	
КонецФункции

// Возвращает параметры формы по умолчанию
//
Функция ПараметрыФормыРедактированияПериода() Экспорт 
	
	Результат = Новый Структура;
	Результат.Вставить("Заголовок",               НСтр("ru = 'Редактирование даты или периода'"));
	Результат.Вставить("ТолькоПросмотр",          Ложь);
	Результат.Вставить("ПараметрыРедактирования", Новый Структура);
	
	Результат.ПараметрыРедактирования.Вставить("СпособЗаполненияПериода",  Новый СписокЗначений);
	Результат.ПараметрыРедактирования.Вставить("СкоропортящаясяПродукция", Ложь);
	Результат.ПараметрыРедактирования.СпособЗаполненияПериода.Добавить(
		ПредопределенноеЗначение("Перечисление.СпособыЗаполненияПериодаВЕТИС.Строка"),НСтр("ru = 'строку'"));
		
	Результат.ПараметрыРедактирования.Вставить("ТочностьЗаполненияПериода", Новый СписокЗначений);
	Возврат Результат;
	
КонецФункции

// Возвращает параметры формы по-умолчанию
//
//	Параметры:
//		ТипРедактируемогоОбъекта - Тип - на основании данного параметра накладываются ограничения на список выбора колонок "ТипДокумента" 
//	
//	ВозвращаемоеЗначение:
//		Структура - структура параметров со следующими свойствами:
//			* ТолькоПросмотр - Булево - Если устанавливать в истину, форма списка связанных документов будет не доступна для редактирования;
//			* ТаблицаСвязанныхДокументов - Неопределено - требует обязательного заполнения перед вызовом и открытия формы;
//			* ПараметрыРедактирования - Структура - дополнительные параметры редактирования формы связанных документов:
//				** ТипыДокументов - СписокЗначений - если заполнено, то на колонку "ТипДокумента" будет накладываться ограничение на список выбора;
//
Функция ПараметрыФормыРедактированияСвязанныхДокументов(ТипРедактируемогоОбъекта) Экспорт
	
	ОграничениеНаТипыДокументов = Новый СписокЗначений;
	Если ТипРедактируемогоОбъекта = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС")
		Или ТипРедактируемогоОбъекта = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")
		Или ТипРедактируемогоОбъекта = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ВетеринарныйСертификатНаПеремещениеВнутриРФ"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ВетеринарныйСертификатСтраныТСНаВвозПродукцииНаТерриториюРФ"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.Заказ"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ВетеринарныйСертификатТретьихСтранНаВвозПродукцииНаТерриториюРФ"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ВетеринарноеРазрешениеНаИмпортПродукцииНаТерриториюТС"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.РазрешениеВетеринарногоУправленияСубъектаСтраныТСНаВвозПродукции"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ТОРГ12"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.ТОРГ13"));
		ОграничениеНаТипыДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДокументовВЕТИС.УПД"));
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТолькоПросмотр",             Ложь);
	Результат.Вставить("ТаблицаСвязанныхДокументов");
	Результат.Вставить("ПараметрыРедактирования", Новый Структура);
	Если ОграничениеНаТипыДокументов.Количество() Тогда
		Результат.ПараметрыРедактирования.Вставить("ТипыДокументов", ОграничениеНаТипыДокументов);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры формы по умолчанию
//
Функция ПараметрыФормыАктаОНесоответствииВЕТИС(ТребуетсяОснование = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДатаАктаНесоответствия");
	Результат.Вставить("НомерАктаНесоответствия");
	Результат.Вставить("ПричинаНесоответствия");
	Результат.Вставить("СерияАктаНесоответствия");
	Если ТребуетсяОснование Тогда
		Результат.Вставить("Основание");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыПодбораВСДВоВходящуюТранспортнуюОперацию(ГашениеНаСВХ = Ложь, ЕстьПеревозка = Истина) Экспорт
	
	Результат = Новый Структура;
	Если Не ГашениеНаСВХ Тогда
		Результат.Вставить("ГрузоотправительХозяйствующийСубъект");
		Результат.Вставить("ГрузоотправительПредприятие");
	КонецЕсли;
	Результат.Вставить("ГрузополучательХозяйствующийСубъект");
	Результат.Вставить("ГрузополучательПредприятие");
	Если ЕстьПеревозка Тогда
		Результат.Вставить("ПеревозчикХозяйствующийСубъект");
		Результат.Вставить("СпособХранения");
		Результат.Вставить("ТипТТН");
		Результат.Вставить("СерияТТН");
		Результат.Вставить("НомерТТН");
		Результат.Вставить("ДатаТТН");
		Результат.Вставить("ТипТранспорта");
		Результат.Вставить("НомерТранспортногоСредства");
		Результат.Вставить("НомерАвтомобильногоКонтейнера");
		Результат.Вставить("НомерАвтомобильногоПрицепа");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Возвращает структуру параметров заполнения табличной части.
//
// Возвращаемое значение:
//	Структура - Структура со свойствами:
//		* ИмяТабличнойЧасти							- Строка									- Имя табличной части объекта.
//		* ЗаполнитьПродукциюВЕТИС					- Булево, Истина							- Признак необходимости заполнения значения реквизита 
//																									'ПродукцияВЕТИС' в табличной части объекта.
//		* ЕдиницаИзмеренияВЕТИС						- СправочникСсылка.ЕдиницыИзмеренияВЕТИС	- Единица измерения ВЕТИС строки табличной
//																									части объекта.
//		* Суффикс									- Строка									- Суффикс реквизита 'Количество' табличной части объекта.
//		* ПересчитатьКоличествоЕдиницВЕТИС			- Булево, Истина							- Признак необходимости пересчета значения количества 
//																									ВЕТИС по количеству.
//		* ПересчитатьКоличествоЕдиницПоВЕТИС		- Булево, Истина							- Признак необходимости пересчета значения количества 
//																									по количеству ВЕТИС.
//		* ПроверитьСериюРассчитатьСтатус			- Булево, Истина							- Признак необходимости заполнения значения реквизита 
//																									'СтатусУказанияСерий' в табличной части объекта.
//		* ИмяПоляКоличества							- Строка									- Имя реквизита количества в табличной части объекта.
//		* ДанныеЗаполнения							- Структура									- Данные заполнения.
//		* УстановитьУникальныйИдентификаторСтроки	- Булево, Истина							- Признак необходимости заполнения реквизита 
//																									'ИдентификаторСтроки' табличной части объекта.
//
Функция ПараметрыЗаполненияТабличнойЧасти() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяТабличнойЧасти",                       "Товары");
	ПараметрыЗаполнения.Вставить("ЗаполнитьПродукциюВЕТИС",                 Ложь);
	ПараметрыЗаполнения.Вставить("ИсключатьПродукциюТретьегоУровня",        Ложь);
	ПараметрыЗаполнения.Вставить("ЕдиницаИзмеренияВЕТИС",                   Неопределено);
	ПараметрыЗаполнения.Вставить("Суффикс",                                 "");
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиницВЕТИС",        Ложь);
	ПараметрыЗаполнения.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС",      Ложь);
	ПараметрыЗаполнения.Вставить("ПроверитьСериюРассчитатьСтатус",          Ложь);
	ПараметрыЗаполнения.Вставить("ИмяПоляКоличества",                       "КоличествоВЕТИС");
	ПараметрыЗаполнения.Вставить("ДанныеЗаполнения",                        Новый Структура);
	ПараметрыЗаполнения.Вставить("УстановитьУникальныйИдентификаторСтроки", Ложь);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает соответствие полей документов-оснований и документов ВЕТИС
//
// Параметры:
//   ТипДокумента - - Тип - тип документа ВЕТИС
//   ТипОснования - - Тип - тип документа-основания
// 
// Возвращаемое значение:
//  КлючИЗначение - элемент соответствия типа:
//  * ключом свойства является имя документа, например "РеализацияТоваровУслуг",
//  а значением - соответствие со свойствами соответствия, например:
//  ** ГрузоотправительХозяйствующийСубъект - Строка - имя поля документа, которое соответствует контрагенту
//  хозяйствующего субъекта грузоотправителя
//  ** ГрузоотправительПредприятие - Строка - имя поля документа, которое соответствует предприятию грузоотправителя
//  ** ГрузополучательХозяйствующийСубъект - Строка - имя поля документа, которое соответствует контрагенту
//  хозяйствующего субъекта грузополучателя
//  ** ГрузополучательПредприятие - Строка - имя поля документа, которое соответствует предприятию грузополучателя
//
Функция СоответствиеПолейДокументовОснованийИДокументовВЕТИС(ТипДокумента, ТипОснования) Экспорт
	
	СоответствиеПолей = Новый Соответствие;
	Если ТипДокумента = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")Тогда
		ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИИсходящейТранспортнойОперации(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")Тогда
		ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИВходящейТранспортнойОперации(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС")Тогда
		ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИИнвентаризацииПродукции(СоответствиеПолей);
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС")Тогда
		ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьСоответствиеПолейДокументовОснованийИПроизводственнойОперации(СоответствиеПолей);
	КонецЕсли;
	
	Возврат СоответствиеПоТипу(СоответствиеПолей,ТипОснования);
	
КонецФункции

#КонецОбласти

// Определяет включение режима использования тестового контура ВЕТИС.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром.
//
Функция РежимРаботыСТестовымКонтуромВЕТИС() Экспорт
	
	Возврат ИнтеграцияВЕТИСВызовСервера.РежимРаботыСТестовымКонтуромВЕТИС();
	
КонецФункции

// Находит в XML содержимое находящееся в теге.
//
// Параметры:
//  Текст                             - Строка - текст XML, в котором выполняется поиск.
//  ИмяТега                           - Строка - тег, содержимое которого необходимо найти.
//  ВключатьОткрывающийЗакрывающийТег - Булево - признак необходимости найденного тегом, по которому выполнялся поиск, по умолчанию Ложь.
//  НомерПоПорядку                    - Число  - позиция, с которой начинается поиск, по умолчанию 1.
// 
// Возвращаемое значение:
//   Строка - строка, из которой удалены символы перевода строки и возврата каретки.
//
Функция НайтиВXML(Текст, ИмяТега, ВключатьОткрывающийЗакрывающийТег = Ложь, НомерПоПорядку = 1) Экспорт
	
	Результат = Неопределено;
	
	Начало    = "<"  + ИмяТега;
	Окончание = "</" + ИмяТега + ">";
	
	Содержимое = Сред(
		Текст,
		СтрНайти(Текст, Начало, НаправлениеПоиска.СНачала, 1, НомерПоПорядку),
		СтрНайти(Текст, Окончание, НаправлениеПоиска.СНачала, 1, НомерПоПорядку) + СтрДлина(Окончание) - СтрНайти(Текст, Начало, НаправлениеПоиска.СНачала, 1, НомерПоПорядку));
		
	Если ВключатьОткрывающийЗакрывающийТег Тогда
		
		Результат = СокрЛП(Содержимое);
		
	Иначе
		
		ОткрывающийТег = Лев(Содержимое, СтрНайти(Содержимое, ">"));
		Содержимое = СтрЗаменить(Содержимое, ОткрывающийТег, "");
		
		ЗакрывающийТег = Прав(Содержимое, СтрДлина(Содержимое) - СтрНайти(Содержимое, "<", НаправлениеПоиска.СКонца) + 1);
		Содержимое = СтрЗаменить(Содержимое, ЗакрывающийТег, "");
		
		Результат = СокрЛП(Содержимое);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтруктураДанныеПредприятия() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Активность");
	Данные.Вставить("Актуальность");
	Данные.Вставить("Идентификатор");
	Данные.Вставить("ИдентификаторВерсии");
	Данные.Вставить("Статус");
	Данные.Вставить("СтатусВРеестре");
	Данные.Вставить("ДатаСоздания");
	Данные.Вставить("ДатаИзменения");
	
	Данные.Вставить("Наименование");
	Данные.Вставить("Тип");
	Данные.Вставить("ВидыДеятельности");
	Данные.Вставить("НомераПредприятий", Новый Массив);
	Данные.Вставить("СобственникПредприятия");
	
	Данные.Вставить("GLN");
	
	Данные.Вставить("ДанныеАдреса");
	Данные.Вставить("ПредставлениеАдреса");
	
	Данные.Вставить("Комментарий");
	
	Данные.Вставить("Ссылка");
	
	Данные.Вставить("ДополнительныеПараметры");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныеХозяйствующегоСубъекта() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Активность");
	Данные.Вставить("Актуальность");
	Данные.Вставить("Идентификатор");
	Данные.Вставить("ИдентификаторВерсии");
	Данные.Вставить("Статус");
	Данные.Вставить("ДатаСоздания");
	Данные.Вставить("ДатаИзменения");
	
	Данные.Вставить("Наименование");
	Данные.Вставить("НаименованиеПолное");
	Данные.Вставить("Тип");
	Данные.Вставить("ИНН");
	Данные.Вставить("КПП");
	Данные.Вставить("ОГРН");
	Данные.Вставить("ФИО");
	Данные.Вставить("НомерПаспорта");
	Данные.Вставить("ОрганизационноПравоваяФормаИдентификатор");
	
	Данные.Вставить("ДанныеАдреса");
	Данные.Вставить("ПредставлениеАдреса");
	
	Данные.Вставить("Комментарий");
	
	Данные.Вставить("СоответствуетОрганизации", Ложь);
	
	Данные.Вставить("Ссылка");
	
	Данные.Вставить("ДополнительныеПараметры");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныеПродукции() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Активность");
	Данные.Вставить("Актуальность");
	Данные.Вставить("Идентификатор");
	Данные.Вставить("ИдентификаторВерсии");
	Данные.Вставить("Статус");
	Данные.Вставить("ДатаСоздания");
	Данные.Вставить("ДатаИзменения");
	
	Данные.Вставить("ТипПродукции");
	Данные.Вставить("Продукция");
	Данные.Вставить("ВидПродукции");
	
	Данные.Вставить("Наименование");
	Данные.Вставить("КодТНВЭД");
	Данные.Вставить("Артикул");
	Данные.Вставить("GTIN");
	Данные.Вставить("СоответствуетГОСТ");
	Данные.Вставить("ГОСТ");
	
	Данные.Вставить("ФасовкаУпаковка");
	Данные.Вставить("ФасовкаКоличествоУпаковок");
	Данные.Вставить("ФасовкаЕдиницаИзмерения");
	Данные.Вставить("ФасовкаКоличествоЕдиницВУпаковке");
	
	Данные.Вставить("ХозяйствующийСубъектПроизводитель");
	Данные.Вставить("ХозяйствующийСубъектПроизводительИдентификатор");
	Данные.Вставить("ХозяйствующийСубъектСобственникТорговойМарки");
	Данные.Вставить("ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор");
	Данные.Вставить("Производители", Новый Массив);
	
	Данные.Вставить("ХешСумма");
	Данные.Вставить("Ссылка");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныеЗаболевания() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("Активность");
	Данные.Вставить("Актуальность");
	Данные.Вставить("Идентификатор");
	Данные.Вставить("ИдентификаторВерсии");
	Данные.Вставить("Статус");
	Данные.Вставить("ДатаСоздания");
	Данные.Вставить("ДатаИзменения");
	
	Данные.Вставить("Наименование");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныхПунктаМаршрута() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("Идентификатор");
	
	Данные.Вставить("Предприятие");
	Данные.Вставить("Адрес");
	Данные.Вставить("АдресПредставление");
	Данные.Вставить("ДанныеАдреса");
	Данные.Вставить("СПерегрузкой");
	
	Данные.Вставить("ТранспортноеСредство");
	Данные.Вставить("ТипТранспорта");
	Данные.Вставить("НомерТранспортногоСредства");
	Данные.Вставить("НомерАвтомобильногоПрицепа");
	Данные.Вставить("НомерАвтомобильногоКонтейнера");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныеУпаковкиВЕТИС() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ИдентификаторСтроки");
	Данные.Вставить("УровеньУпаковки");
	Данные.Вставить("УпаковкаВЕТИС");
	Данные.Вставить("КоличествоУпаковокВЕТИС");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныхШтрихкодыУпаковок() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ИдентификаторСтроки");
	Данные.Вставить("Штрихкод");
	Данные.Вставить("ТипМаркировки");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныхПроизводители() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("Производитель");
	Данные.Вставить("РольПредприятия");
	Данные.Вставить("НомераПредприятий");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныхПроизводственныеПартии() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ИдентификаторПартии");
	
	Возврат Данные;
	
КонецФункции

Функция СтруктураДанныхЗаписиСкладскогоЖурнала() Экспорт
	
	Данные = Новый Структура;
	
	Данные.Вставить("ХозяйствующийСубъект");
	Данные.Вставить("Предприятие");
	Данные.Вставить("Продукция");
	Данные.Вставить("СкоропортящаясяПродукция");
	Данные.Вставить("НизкокачественнаяПродукция");
	Данные.Вставить("ДатаПроизводстваСтрока");
	Данные.Вставить("ДатаПроизводстваТочностьЗаполнения");
	Данные.Вставить("ДатаПроизводстваНачалоПериода");
	Данные.Вставить("ДатаПроизводстваКонецПериода");
	Данные.Вставить("СрокГодностиСтрока");
	Данные.Вставить("СрокГодностиТочностьЗаполнения");
	Данные.Вставить("СрокГодностиНачалоПериода");
	Данные.Вставить("СрокГодностиКонецПериода");
	Данные.Вставить("СтранаПроизводства");
	Данные.Вставить("Цель");
	
	Данные.Вставить("УпаковкиВЕТИС");
	Данные.Вставить("ШтрихкодыУпаковок");
	Данные.Вставить("Производители");
	Данные.Вставить("ПроизводственныеПартии");
	
	Возврат Данные;
	
КонецФункции

// Получает хозяйствующие субъекты из ключей настроек обмена.
//
// Параметры:
//  НастройкиОбменаВЕТИС - Соответствие - Настройки обмена ВетИС по организациям:
//   * Ключ - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - хозяйствующий субъект ВетИС
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - хозяйствующие субъекты
//
Функция ХозяйствующиеСубъекты(НастройкиОбменаВЕТИС) Экспорт
	
	ХозяйствующиеСубъекты = Новый Массив;
	
	Для Каждого КлючИЗначение Из НастройкиОбменаВЕТИС Цикл
		
		ХозяйствующиеСубъекты.Добавить(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	Возврат ХозяйствующиеСубъекты;
	
КонецФункции

Функция РазмерСтраницы() Экспорт
	
	Возврат 100;
	
КонецФункции

Функция КоличествоСтраниц(ОбщееКоличество, КоличествоЭлементовНаСтранице) Экспорт
	
	КоличествоСтраниц = ОбщееКоличество / КоличествоЭлементовНаСтранице;
	ЦелоеКоличество = Цел(КоличествоСтраниц);
	КоличествоСтраниц = ?(ЦелоеКоличество < КоличествоСтраниц, ЦелоеКоличество+1, ЦелоеКоличество);
	
	Возврат КоличествоСтраниц
	
КонецФункции

#Область ПредставленияТабличныхЧастейСтрокой

// Возвращает настройки для формирования надписи-представления табличной части
//
// Параметры:
//  ПоляПодстановки	 - Строка - имена колонок коллекции, которые будут использоваться в представлении
// 
// Возвращаемое значение:
//  Структура - с параметрами:
//   * Поля  - Строка - имена колонок табличной части, которые будут использоваться в представлении,
//      в порядке подстановки в шаблон (разделитель - ",");
//   * Пустая      - Строка - надпись по умолчанию для пустой коллекции (по умолчанию "не заполнено");
//   * НеЗаполнено - Строка - надпись по умолчанию для пустого значения элемента (по умолчанию "не заполнено");
//   * Шаблон      - Строка, Массив - шаблон вывода строки коллекции (по умолчанию "%1"), 
//      если передан массив то объединяться будут только части с непустыми параметрами;
//   * Количество  - Число  - количество строк выводимых в представлении (по умолчанию 1);
//   * Разделитель - Строка - строка, которой будут разделяться выводимые элементы табличной части (по умолчанию ",");
//   * Уникальные  - Булево - вывод уникальных представлений строк (по умолчанию Ложь);
//   * Пустые      - Булево - вывод представлений строк из пустых элементов (по умолчанию Истина).
//
Функция ПараметрыПредставленияТабличнойЧасти(ПоляПодстановки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля",        ПоляПодстановки);
	Результат.Вставить("Пустая",      НСтр("ru = '<не заполнено>'"));
	Результат.Вставить("НеЗаполнено", НСтр("ru = '<не заполнено>'"));
	Результат.Вставить("Шаблон",      "%1");
	Результат.Вставить("Количество",  1);
	Результат.Вставить("Разделитель", ", ");
	Результат.Вставить("Уникальные",  Ложь);
	Результат.Вставить("Пустые",      Истина);
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ упаковок
//   (стандартные поля, переопределенный шаблон, опциональное количество)
// Параметры:
//  КоличествоВыводимых - Число - количество строк выводимых в представлении (по умолчанию 1).
// 
// Возвращаемое значение:
//  Структура - см. ПараметрыПредставленияТабличнойЧасти().
//
Функция ПараметрыПредставленияТабличнойЧастиУпаковок(КоличествоВыводимых = 1) Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("УпаковкаВЕТИС,КоличествоУпаковокВЕТИС");
	Результат.Количество = КоличествоВыводимых;
	Результат.Шаблон     = "%1 (%2)";
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ производителей
//   (стандартное поле, уникальные записи, опциональное представление пустого)
// Параметры:
//  ПустоеКоличество - Строка, Неопределено - представление пустой ТЧ (строка), не менять(Неопределено).
// 
// Возвращаемое значение:
//  Структура - см. ПараметрыПредставленияТабличнойЧасти().
//
Функция ПараметрыПредставленияТабличнойЧастиПроизводителей(ПустоеКоличество = Неопределено) Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("НомераПредприятий, Производитель");
	Результат.Шаблон = Новый Массив;
	Результат.Шаблон.Добавить("[%1]");
	Результат.Шаблон.Добавить("%1");
	Результат.Уникальные = Истина;
	Если НЕ(ПустоеКоличество = Неопределено) Тогда
		Результат.Пустая = ПустоеКоличество;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ идентификаторов партий
//   (стандартное поле, уникальные записи)
//
// Возвращаемое значение:
//  Структура - см. ПараметрыПредставленияТабличнойЧасти().
//
Функция ПараметрыПредставленияТабличнойЧастиПартий() Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("ИдентификаторПартии");
	Результат.Уникальные = Истина;
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ маршрут
//   (стандартные поля, переопределенный шаблон, представление пустого параметра, вывод 2 строк)
//
// Возвращаемое значение:
//  Структура - см. ПараметрыПредставленияТабличнойЧасти().
//
Функция ПараметрыПредставленияТабличнойЧастиМаршрута() Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("Предприятие,АдресПредставление");
	Результат.НеЗаполнено = "";
	Результат.Разделитель = " - ";
	Результат.Количество  = 2;
	Результат.Шаблон      = "%1%2";
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ маршрут
//   (стандартные поля, переопределенные шаблон, представление пустой ТЧ)
//
// Возвращаемое значение:
//  Структура - см. ПараметрыПредставленияТабличнойЧасти().
//
Функция ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов() Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("ТипДокумента,Номер,Дата");
	Результат.Пустая = НСтр("ru = '<не заполнены>'");
	Результат.Шаблон = НСтр("ru = '%1 №%2 от %3'");
	Возврат Результат;
	
КонецФункции

// Формирует надпись (представление) гиперссылки для перехода в данные таб. части
//
// Параметры:
//  Данные - ДанныеФормыКоллекция, ТаблицаЗначений, Массив - данные информацию о которых необходимо вывести;
//  ПараметрыНадписи - Структура, Строка - см. ПараметрыНадписиПредставленияТабличнойЧасти()
//   (строка вызывает конструктор структуры)
//
// ВозвращаемоеЗначение:
//  Строка - пользовательское представление табличной части
//
Функция СформироватьНадписьПоДаннымТабличнойЧасти(Данные, ПараметрыНадписи) Экспорт
	
	Если ТипЗнч(ПараметрыНадписи) = Тип("Строка") Тогда
		// Передано имя реквизита, считаем что строка-шаблон состоит только из него:
		ПараметрыНадписи = ПараметрыПредставленияТабличнойЧасти(ПараметрыНадписи);
	КонецЕсли;
	
	ИменаКолонок = СтрРазделить(ПараметрыНадписи.Поля, ",");
	
	КоличествоСтрок = Данные.Количество();
	
	МассивВыводимых = Новый Массив;
	МассивПрочих    = Новый Массив;
	СчетчикСтрок    = 0;
	
	Для НомерВыводимойСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТабличнойЧасти = Данные[НомерВыводимойСтроки-1];
		Если ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
			ДобавляемаяСтрока = Новый Массив;
		Иначе
			ДобавляемаяСтрока = ПараметрыНадписи.Шаблон;
		КонецЕсли;
		ЭтоПустаяСтрока = Истина;
		
		Для Ит = 0 По ИменаКолонок.ВГраница() Цикл
			ЗначениеПараметра = "";
			ИмяКолонки = СокрЛП(ИменаКолонок[Ит]);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
				ЗначениеПараметра = СтрокаТабличнойЧасти[ИмяКолонки];
				Если ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
					ЗначениеПараметра = Формат(ЗначениеПараметра, "ДЛФ=D");
				КонецЕсли;
				ЭтоПустаяСтрока = Ложь;
			КонецЕсли;
			Если ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
					ДобавляемаяСтрока.Добавить(СтрЗаменить(ПараметрыНадписи.Шаблон[Ит],"%1", ЗначениеПараметра));
				КонецЕсли;
			Иначе
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%"+Формат(Ит+1,"ЧГ="), ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПустаяСтрока Тогда
			ДобавляемаяСтрока = ПараметрыНадписи.Пустая;
		ИначеЕсли ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
			ДобавляемаяСтрока = СтрСоединить(ДобавляемаяСтрока, " ");
		КонецЕсли;
		
		Если ЭтоПустаяСтрока И НЕ ПараметрыНадписи.Пустые Тогда
			Продолжить;
		ИначеЕсли ПараметрыНадписи.Уникальные И МассивВыводимых.Найти(ДобавляемаяСтрока) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли СчетчикСтрок < ПараметрыНадписи.Количество Тогда
			МассивВыводимых.Добавить(ДобавляемаяСтрока);
		ИначеЕсли ПараметрыНадписи.Уникальные И МассивПрочих.Найти(ДобавляемаяСтрока) <> Неопределено Тогда
			Продолжить;
		Иначе 
			МассивПрочих.Добавить(ДобавляемаяСтрока);
		КонецЕсли;
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		//Если надо вывести все - дальше не считаем
		Если СчетчикСтрок = ПараметрыНадписи.Количество
			И ПараметрыНадписи.Пустые
			И НЕ ПараметрыНадписи.Уникальные Тогда
			СчетчикСтрок = КоличествоСтрок;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчетчикСтрок = 0 Тогда
		Возврат ПараметрыНадписи.Пустая;
	КонецЕсли;
	
	СтрокаРезультата = СтрСоединить(МассивВыводимых, ПараметрыНадписи.Разделитель);
	
	Если СчетчикСтрок > ПараметрыНадписи.Количество Тогда
		СтрокаРезультата = СтрШаблон(НСтр("ru = '%1 (+ еще %2...)'"), СтрокаРезультата, СчетчикСтрок - ПараметрыНадписи.Количество);
	КонецЕсли;
	
	Возврат СтрокаРезультата;
	
КонецФункции

#КонецОбласти

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	//заменить вхождения и удалить
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(Сообщение,ТекстОшибки);
	
КонецПроцедуры

// Устанавливает список выбора для номенклатуры или характеристики на основании данных в таблице сопоставления.
//
//	Параметры:
//		ИмяПоля - Строка - принимает значения "Номенклатура", "Продукция" или "Характеристика", служит для определения для какого поля устанавливается список выбора;
//		ТаблицаИсточник - ТаблицаЗначений, ДанныеФормыКоллекция - таблица, в которой содержатся данные сопоставления. Обязательно наличие колонок:
//			* Продукция - СправочникСсылка.ПродукцияВЕТИС - продукция ВЕТИС для которой производится сопоставление (если передано в качестве свойства отбора) или
//					значение для подстановки в массив результата (если ИмяПоля = "Продукция");
//			* Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура для которой будет производиться сопоставление (если передано в качестве свойства отбора) или
//					значение для подстановки в массив результата (если ИмяПоля = "Номенклатура");
//			* Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика для которой будет производиться сопоставление (если передано в качестве свойства отбора) или
//					значение для подстановки в массив результата (если ИмяПоля = "Характеристика").
//		Отбор - Структура - структура по которой будет производиться отбор со следующими возможными свойствами:
//			* Продукция - СправочникСсылка.ПродукцияВЕТИС - продукция ВЕТИС для которой будет производится сопоставление (если ИмяПоля = "Характеристика" или "Номенклатура");
//			* Номенклатура - ОпределяемыйТип.Номенклатура - номенклатура для которой будет производиться сопоставление (если ИмяПоля = "Характеристика").
//			* Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика для которой будет производиться сопоставление (если ИмяПоля = "Продукция").
//
//	ВозвращаемоеЗначение:
//		Массив - массив со значениями типа ОпределяемыйТип.Номенклатура (если ИмяПоля = "Номенклатура")
//					или ОпределяемыйТип.ХарактеристикаНоменклатуры (если ИмяПоля = "Характеристика")
//					или СправочникСсылка.ПродукцияВЕТИС (если ИмяПоля = "Продукция")
//
Функция МассивЗначенийДляВыбораИзСписка(ИмяПоля, ТаблицаИсточник, Отбор = Неопределено) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если Отбор = Неопределено Тогда
		НайденныеСтроки = ТаблицаИсточник;
	Иначе
		НайденныеСтроки = ТаблицаИсточник.НайтиСтроки(Отбор);
	КонецЕсли;
	
	ЗначениеКэш = Неопределено;
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Если СтрокаТЧ[ИмяПоля] <> ЗначениеКэш Тогда
			МассивВозврата.Добавить(СтрокаТЧ[ИмяПоля]);
			ЗначениеКэш = СтрокаТЧ[ИмяПоля];
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Устанавливает признак доступности для массива элементов формы.
//
// Параметры:
//  Форма            - ФормаКлиентскогоПриложения - форма, для элементов которой устанавливается признак доступности. 
//  МассивЭлементов  - Массив           - содержит имена элементов формы.
//  Доступно         - Булево           - признак доступности.
//
Процедура УправлениеДоступностьюЭлементовФормы(Форма, МассивЭлементов, Доступно) Экспорт
	
	Для Каждого ИмяЭлемента Из МассивЭлементов Цикл
		
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Форма.Элементы[ИмяЭлемента]) = Тип("КнопкаФормы") Тогда
			Форма.Элементы[ИмяЭлемента].Доступность = Доступно;
		Иначе
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = Не Доступно;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно устанавливает свойство ИмяСвойства элементов формы (в т.ч. подчиненных)
// в значение Значение, за исключением элементов, имена которых перечислены в массиве исключений.
//
// Параметры:
//  ЭлементыФормы    - ВсеЭлементФормы, ЭлементыФормы - коллекция элементов управляемой формы.
//  ИмяСвойства      - Строка       - имя устанавливаемого свойства элемента формы.
//  Значение         - Произвольный - новое значение элемента.
//  МассивИсключений - Массив - Содержит строки (имена элементов формы).
// 
Процедура УстановитьСвойствоЭлементовФормыРекурсивно(ЭлементыФормы, ИмяСвойства, Значение, МассивИсключений) Экспорт
	
	Для Каждого ЭлементФормы из ЭлементыФормы Цикл
		
		Если НЕ МассивИсключений.Найти(ЭлементФормы.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ЭлементФормы);
		Если ТипЭлемента = Тип("ГруппаФормы") Или ТипЭлемента = Тип("ТаблицаФормы") Тогда 
			УстановитьСвойствоЭлементовФормыРекурсивно(ЭлементФормы.ПодчиненныеЭлементы, ИмяСвойства, Значение, МассивИсключений);
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда
			ЭлементФормы[ИмяСвойства] = Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рекурсивно устанавливает для подчиненных элементов типа "ПолеФормы" - признак "ТолькоПросмотр",
// для подчиненных элементов типа "КнопкаФормы" - признак "Доступность", за исключением элементов,
// имена которых перечислены в исключениях.
//
// Параметры:
//  ГруппаЭлементовФормы - ГруппаФормы, ТаблицаФормы - Группа элементов управляемой формы.
//  Доступность          - Булево      - Признак доступности подчиненных элементов.
//  Исключения           - Строка, Массив - Имена элементов формы.
// 
Процедура УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ГруппаЭлементовФормы, Доступность, Исключения = "") Экспорт
	
	ТипГруппыФормы = ТипЗнч(ГруппаЭлементовФормы);
	Если НЕ (ТипГруппыФормы = Тип("ГруппаФормы") или ТипГруппыФормы = Тип("ТаблицаФормы")) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИсключений = Новый Массив;
	ТипИсключения = ТипЗнч(Исключения);
	Если ТипИсключения = Тип("Строка") и ЗначениеЗаполнено(Исключения) Тогда
		МассивИсключений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Исключения, ", ");
	ИначеЕсли ТипИсключения = Тип("Массив") Тогда
		МассивИсключений = Исключения;
	КонецЕсли;
	
	Для Каждого ЭлементФормы из ГруппаЭлементовФормы.ПодчиненныеЭлементы Цикл
		
		Если НЕ МассивИсключений.Найти(ЭлементФормы.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента = ТипЗнч(ЭлементФормы);
		Если ТипЭлемента = Тип("ГруппаФормы") Тогда 
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы, Доступность, МассивИсключений);
		ИначеЕсли ТипЭлемента = Тип("ТаблицаФормы") Тогда
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы, Доступность, МассивИсключений);
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы.КоманднаяПанель, Доступность, МассивИсключений);
			УстановитьДоступностьЭлементовГруппыФормыРекурсивно(ЭлементФормы.КонтекстноеМеню, Доступность, МассивИсключений);
		ИначеЕсли ТипЭлемента = Тип("ПолеФормы") Тогда
			ЭлементФормы.ТолькоПросмотр = НЕ Доступность;
		ИначеЕсли ТипЭлемента = Тип("КнопкаФормы") Тогда
			ЭлементФормы.Доступность = Доступность;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет, требуется ли указание даты для заданной точности заполнения периода
// Параметры:
//  ТочностьЗаполненияПериода  - ПеречислениеСсылка.ТочностьЗаполненияПериодаВЕТИС - описание способа указания периода.
// Возвращаемое значение:
//   Булево   - требуется ли указание даты для заданной точности заполнения периода
//
Функция ТочностьЗаполненияБезДаты(ТочностьЗаполненияПериода) Экспорт

	Если ТочностьЗаполненияПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.Неизвестно") 
		Или ТочностьЗаполненияПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.Неприменимо")
		Или ТочностьЗаполненияПериода = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.СрокГодностиНеОграничен") Тогда
	
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли; 

КонецФункции // ТочностьЗаполненияБезДаты()

// Заполняет информацию о точности колонок "Дата производства" и "Срок годности" по данным таблицы
//
// Параметры:
//  ТабличнаяЧасть	 - ТаблицаЗначений - Таблица для 
//  СвязаннаяТаблица - ТаблицаЗначений - таблица соответствия продукции и точности даты:
//   * Продукция 				- СправочникСсылка.ПродукцияВЕТИС - продукция содержащаяся в табличной части
//   * ТочностьДатыПроизводства - СписокЗначений - список всех доступных для продукции форматов поля Дата производства
//   * ТочностьСрокаГодности	- СписокЗначений - список всех доступных для продукции форматов поля Срок годности
//
Процедура ОбновитьТочностьДатПродукцииВСвязаннойТаблице(ИсходнаяТаблица, СвязаннаяТаблица) Экспорт

	Для каждого СтрокаТабличнойЧасти Из ИсходнаяТаблица Цикл
		
		Продукция = СтрокаТабличнойЧасти.Продукция;
		
		Отбор = Новый Структура("Продукция", Продукция);
		ОтобранныеСтроки = СвязаннаяТаблица.НайтиСтроки(Отбор);
		Если ОтобранныеСтроки.Количество() = 0 Тогда
			
			ФорматыДатПродукции = ИнтеграцияВЕТИСВызовСервера.СпецификаПродукции(Продукция);
			
			НоваяСтрока = СвязаннаяТаблица.Добавить();
			НоваяСтрока.Продукция = Продукция;
			НоваяСтрока.ТочностьДатыПроизводства.ЗагрузитьЗначения(ФорматыДатПродукции.ФорматДатыВыработкиМассивом);
			НоваяСтрока.ТочностьСрокаГодности.ЗагрузитьЗначения(ФорматыДатПродукции.ФорматСрокаГодностиМассивом);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция СтруктураДанныхАдреса() Экспорт
	
	ДанныеАдреса = Новый Структура;
	ДанныеАдреса.Вставить("ПредставлениеАдреса",          "");
	
	ДанныеАдреса.Вставить("СтранаGUID",                   "");
	ДанныеАдреса.Вставить("СтранаПредставление",          "");
	
	ДанныеАдреса.Вставить("РегионGUID",                   "");
	ДанныеАдреса.Вставить("РегионПредставление",          "");
	
	ДанныеАдреса.Вставить("РайонGUID",                    "");
	ДанныеАдреса.Вставить("РайонПредставление",           "");

	ДанныеАдреса.Вставить("ГородGUID",                    "");
	ДанныеАдреса.Вставить("ГородПредставление",           "");
	
	ДанныеАдреса.Вставить("НаселенныйПунктGUID",          "");
	ДанныеАдреса.Вставить("НаселенныйПунктПредставление", "");
	
	ДанныеАдреса.Вставить("УлицаGUID",                    "");
	ДанныеАдреса.Вставить("УлицаПредставление",           "");
	
	ДанныеАдреса.Вставить("НомерДома",                "");
	ДанныеАдреса.Вставить("НомерСтроения",            "");
	ДанныеАдреса.Вставить("НомерОфиса",               "");
	ДанныеАдреса.Вставить("ПочтовыйИндекс",           "");
	ДанныеАдреса.Вставить("АбонентскийЯщик",          "");
	ДанныеАдреса.Вставить("ДополнительнаяИнформация", "");
	
	Возврат ДанныеАдреса;
	
КонецФункции

Функция СтруктураИнтервала(НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Интервал = Новый Структура;
	Интервал.Вставить("НачалоПериода", НачалоПериода);
	Интервал.Вставить("КонецПериода", КонецПериода);
	
	Возврат Интервал;
	
КонецФункции

Функция СтруктураСвязанногоДокумента() Экспорт
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ИсходящаяДата");
	ДанныеДокумента.Вставить("ИсходящийНомер");
	ДанныеДокумента.Вставить("ТипДокумента");
	
	Возврат ДанныеДокумента;
	
КонецФункции

Функция СтруктураПараметрыПередачи(ДальнейшееДействие = Неопределено) Экспорт
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("ДальнейшееДействие", ДальнейшееДействие);
	ПараметрыПередачи.Вставить("ПараметрыОтбора");
	
	Возврат ПараметрыПередачи;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФункцииИспользующиеПереопределение
// (см. ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьПараметрыФормыПодбораТоваров)
//
// Параметры:
//   Форма                  - ФормаКлиентскогоПриложения - Форма, в которой вызывается команда открытия формы подбора товаров.
//   ПараметрыУказанияСерий - Произвольный     - Параметры указания серий.
//
// Возвращаемое значение:
//	Произвольный - параметры открытия формы подбора товаров
//
Функция ПараметрыФормыПодбораТоваров(Форма, ПараметрыУказанияСерий) Экспорт
	
	ПараметрыПодбора = Неопределено;
	ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьПараметрыФормыПодбораТоваров(ПараметрыПодбора, Форма, ПараметрыУказанияСерий);
	Возврат ПараметрыПодбора;
	
КонецФункции

Функция ПересчитатьКоличествоЕдиницВЕТИС(Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки) Экспорт
	
	КоличествоЕдиницВЕТИС = Неопределено;
	ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьКоличествоЕдиницВЕТИС(
		КоличествоЕдиницВЕТИС, Количество, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки);
	Возврат КоличествоЕдиницВЕТИС;
	
КонецФункции

Функция ПересчитатьКоличествоЕдиниц(КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки) Экспорт
	
	Количество = Неопределено;
	ИнтеграцияВЕТИСКлиентСерверПереопределяемый.ЗаполнитьКоличествоЕдиницПоВЕТИС(
		Количество, КоличествоВЕТИС, Номенклатура, ЕдиницаИзмеренияВЕТИС, КэшированныеЗначения, ТекстОшибки);
	Возврат Количество;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОтборПоОрганизацииВЕТИС

Процедура НастроитьОтборПоОрганизацииВЕТИС(Форма,Знач Результат, Префикс = Неопределено, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	ОбновлятьПредставление = Не (Результат = Форма.ОрганизацииВЕТИС);
	ЭлементыДерева = Форма.ОрганизацииВЕТИС.ПолучитьЭлементы();
	
	Если ОбновлятьПредставление Тогда 
		ХэшСтроки = "";
		ВсеПредприятияВыбраны = Истина;
		ЭлементыДерева.Очистить();
		Если ТипЗнч(Результат) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
			НовыйЭлемент = ЭлементыДерева.Добавить();
			НовыйЭлемент.ХозяйствующийСубъектПредприятиеВЕТИС = Результат;
			НовыйЭлемент = НовыйЭлемент.ПолучитьЭлементы();
			Для Каждого СтрокаПодгруппа Из ИнтеграцияВЕТИСВызовСервера.ПредприятияХозяйствующегоСубъекта(Результат)Цикл 
				НовыйЭлемент.Добавить().ХозяйствующийСубъектПредприятиеВЕТИС = СтрокаПодгруппа;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Результат) = Тип("Структура") И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Результат,"ВыбранныеЗначения") Тогда
			Результат.Свойство("ХэшСтроки", ХэшСтроки);
			Для Каждого СтрокаТЧ Из Результат.ВыбранныеЗначения Цикл 
				НовыйЭлемент = ЭлементыДерева.Добавить();
				НовыйЭлемент.ХозяйствующийСубъектПредприятиеВЕТИС = СтрокаТЧ.Организация;
				
				ВсеПредприятияВыбраны = ВсеПредприятияВыбраны И СтрокаТЧ.Свойство("ВсеПредприятияВыбраны") И СтрокаТЧ.ВсеПредприятияВыбраны;
				
				НовыйЭлемент = НовыйЭлемент.ПолучитьЭлементы();
				Для Каждого СтрокаПодгруппа Из СтрокаТЧ.Предприятия Цикл 
					НовыйЭлемент.Добавить().ХозяйствующийСубъектПредприятиеВЕТИС = СтрокаПодгруппа;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Результат) = Тип("Массив") Тогда
			Для Каждого СтрокаТЧ Из Результат Цикл 
				НовыйЭлемент = ЭлементыДерева.Добавить();
				НовыйЭлемент.ХозяйствующийСубъектПредприятиеВЕТИС = СтрокаТЧ.Организация;
				
				ВсеПредприятияВыбраны = ВсеПредприятияВыбраны И СтрокаТЧ.Свойство("ВсеПредприятияВыбраны") И СтрокаТЧ.ВсеПредприятияВыбраны;
				
				НовыйЭлемент = НовыйЭлемент.ПолучитьЭлементы();
				Для Каждого СтрокаПодгруппа Из СтрокаТЧ.Предприятия Цикл 
					НовыйЭлемент.Добавить().ХозяйствующийСубъектПредприятиеВЕТИС = СтрокаПодгруппа;
				КонецЦикла;
			КонецЦикла;
		Иначе
		КонецЕсли;
	
		Если ХэшСтроки = "" Тогда 
			ХэшСтроки = ""+ Новый УникальныйИдентификатор();
		КонецЕсли;
	
	КонецЕсли;
	
	// Страницы формы
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	//вариант отображения организации
	Если ОбновлятьПредставление Тогда 
		Если ЭлементыДерева.Количество() > 1 ИЛИ НЕ ВсеПредприятияВыбраны Тогда 
			Окончание = "ОрганизацииВЕТИС";
		Иначе 
			Окончание = "ОрганизацияВЕТИС";
		КонецЕсли;
	Иначе 
		Если ЭлементыДерева.Количество() = 0 ИЛИ ЗначениеЗаполнено(Форма.ОрганизацияВЕТИС)Тогда 
			Окончание = "ОрганизацияВЕТИС";
		Иначе 
			Окончание = "ОрганизацииВЕТИС";
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		
		ОкончаниеГруппы = "ОрганизацияВЕТИС";
		
		Если Значение = "Отбор" Тогда
			Постфикс = ОкончаниеГруппы;
		Иначе
			Постфикс = "Отбор" + ОкончаниеГруппы;
		КонецЕсли;
		
		Форма.Элементы["Страницы" + Значение + Постфикс].ТекущаяСтраница = Форма.Элементы["Страница" + Значение + Окончание];
		
	КонецЦикла;
	
	Если ОбновлятьПредставление Тогда 
		Если ЭлементыДерева.Количество() = 1 И ВсеПредприятияВыбраны Тогда 
			Форма.ОрганизацииВЕТИСПредставление = "";
			Форма.ОрганизацияВЕТИС = ЭлементыДерева[0].ХозяйствующийСубъектПредприятиеВЕТИС;
		Иначе 
			Форма.ОрганизацияВЕТИС = Неопределено;
			Форма.ОрганизацииВЕТИСПредставление = ПредставлениеВыбранныхНастроек(Форма.ОрганизацииВЕТИС, ХэшСтроки, Форма.Элементы[Префиксы[0] + Окончание].СписокВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Если Префикс <> Неопределено Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[Префикс + Окончание];
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияВЕТИСОтборПриИзменении(Форма, ПрефиксСписков) Экспорт 
	
	Если ПрефиксСписков = Неопределено Тогда 
		ПрефиксСписков="Грузополучатель";
	КонецЕсли;
	
	Если СтрНайти(Форма.ИмяФормы, "ВЕТИСПрисоединенныеФайлы") Тогда
		ИмяПоляОтбора = "ВладелецФайла";
	Иначе
		ИмяПоляОтбора = "ХозяйствующийСубъект";
	КонецЕсли; 
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Список") Тогда
		УстановитьОтборОрганизацияПредприятиеВЕТИС(Форма.Список, Форма.ОрганизацииВЕТИС, ПрефиксСписков, ИмяПоляОтбора);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокКОформлению") Тогда
		УстановитьОтборОрганизацияПредприятиеВЕТИС(Форма.СписокКОформлению, Форма.ОрганизацииВЕТИС, ПрефиксСписков, ИмяПоляОтбора);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СписокТТНКОформлению") Тогда
		УстановитьОтборОрганизацияПредприятиеВЕТИС(Форма.СписокТТНКОформлению, Форма.ОрганизацииВЕТИС, ПрефиксСписков, ИмяПоляОтбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборОрганизацияПредприятиеВЕТИС(Список, ДеревоОтбора, Префиксы, ИмяПоляОтбора = "ХозяйствующийСубъект") Экспорт 
	
	Список.Отбор.Элементы.Очистить();
	
	ГруппаОрганизацияПредприятие = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.Отбор.Элементы,
		"ГруппаОрганизацияПредприятие",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Позиция = 0;
	МассивПрефиксов = СтрРазделить(Префиксы, ",");
	БезОтбораПоОрганизацииВЕТИС = Истина;
	
	Если МассивПрефиксов.Количество() = 0 Тогда
		МассивПрефиксов.Добавить("");
	КонецЕсли;
	
	Если МассивПрефиксов.Количество() = 1 Тогда 
		
		Организации = Новый Массив;
		Предприятия = Новый Массив;
		
		Для Каждого Организация Из ДеревоОтбора.ПолучитьЭлементы() Цикл
			
			Организации.Добавить(Организация.ХозяйствующийСубъектПредприятиеВЕТИС);
			
			Если Организация.ПолучитьЭлементы().Количество() > 0 Тогда
				Для Каждого ЭлементПредприятие Из Организация.ПолучитьЭлементы() Цикл
					Если Предприятия.Найти(ЭлементПредприятие.ХозяйствующийСубъектПредприятиеВЕТИС) = Неопределено Тогда
						Предприятия.Добавить(ЭлементПредприятие.ХозяйствующийСубъектПредприятиеВЕТИС);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор,
			Префиксы + ИмяПоляОтбора,
			?(Организации.Количество(), Организации[0], Неопределено),,,
			Организации.Количество() = 1);
			
		Если Предприятия.Количество() Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Список.Отбор,
				Префиксы + "Предприятие",
				?(Предприятия.Количество(), Предприятия[0], Неопределено),,,
				Предприятия.Количество() = 1);
		КонецЕсли;
		
		Если Организации.Количество() = 1 ИЛИ Предприятия.Количество() = 1 Тогда
			БезОтбораПоОрганизацииВЕТИС = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Префикс Из МассивПрефиксов Цикл 
		
		Для Каждого Организация Из ДеревоОтбора.ПолучитьЭлементы() Цикл
			
			ГруппаСтроки = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОрганизацияПредприятие,
				"ГруппаОрганизацияПредприятие" + Формат(Позиция,"ЧГ=0"),
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаСтроки,
				Префикс + ИмяПоляОтбора,
				Организация.ХозяйствующийСубъектПредприятиеВЕТИС);
			
			БезОтбораПоОрганизацииВЕТИС = Ложь;
			
			Если Организация.ПолучитьЭлементы().Количество() > 0 Тогда
				
				МассивОтбора = Новый Массив;
				Для Каждого ЭлементПредприятие Из Организация.ПолучитьЭлементы() Цикл
					МассивОтбора.Добавить(ЭлементПредприятие.ХозяйствующийСубъектПредприятиеВЕТИС);
				КонецЦикла;
				
				Если Предприятия <> Неопределено И Предприятия.Количество() Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
						ГруппаСтроки,
						Префикс + "Предприятие",
						МассивОтбора);
				КонецЕсли;
				
			КонецЕсли;
			
			Позиция = Позиция + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"БезОтбораПоОрганизацииВЕТИС",
		БезОтбораПоОрганизацииВЕТИС);
	
КонецПроцедуры

// Возвращает выбранные ХС/предприятия и XOR32-хэш от их идентификаторов
Функция ДеревоОтбораОрганизацииВЕТИСВМассивСтруктур(ДеревоХозяйствующихСубъектовПредприятийВЕТИС, ВсеСтроки = Истина, ФормироватьХэш = Истина, ВсеПредприятияВыбраны = Истина) Экспорт 
	
	ВыбранныеЗначения = Новый Массив;
	
	ХэшСтроки = "";
	ХэшБуфер = Новый БуферДвоичныхДанных(128);
	
	ЭлементыДерева = ДеревоХозяйствующихСубъектовПредприятийВЕТИС.ПолучитьЭлементы();
	МассивОрганизаций = Новый Массив;
	МассивПредприятий = Новый Массив;
	Для Каждого СтрокаОрганизация Из ЭлементыДерева Цикл
		Если ВсеСтроки ИЛИ СтрокаОрганизация.Выбрана Тогда
			
			НовыйЭлемент = Новый Структура(
				"Организация, Предприятия, ВсеПредприятияВыбраны",
				СтрокаОрганизация.ХозяйствующийСубъектПредприятиеВЕТИС,
				Новый Массив,
				ВсеПредприятияВыбраны);
			
			Если МассивОрганизаций.Найти(СтрокаОрганизация.ХозяйствующийСубъектПредприятиеВЕТИС) = Неопределено Тогда
				МассивОрганизаций.Добавить(СтрокаОрганизация.ХозяйствующийСубъектПредприятиеВЕТИС);
			КонецЕсли;
			
			ЭлементыПредприятий = СтрокаОрганизация.ПолучитьЭлементы();
			Если ФормироватьХэш Тогда 
				ХэшСтроки = ХэшСтроки + СтрокаОрганизация.Идентификатор;
				Пока СтрДлина(ХэшСтроки) > 32 Цикл
					ХэшБуфер.ЗаписатьПобитовоеИсключительноеИли(0, ПолучитьБуферДвоичныхДанныхИзСтроки(Лев(ХэшСтроки,32), "UTF-8"));
					ХэшСтроки = Сред(ХэшСтроки, 33);
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого СтрокаПредприятие Из ЭлементыПредприятий Цикл 
				Если ВсеСтроки ИЛИ СтрокаПредприятие.Выбрана Тогда 
					Если МассивПредприятий.Найти(СтрокаПредприятие.ХозяйствующийСубъектПредприятиеВЕТИС) = Неопределено Тогда
						МассивПредприятий.Добавить(СтрокаПредприятие.ХозяйствующийСубъектПредприятиеВЕТИС);
					КонецЕсли;
					НовыйЭлемент.Предприятия.Добавить(СтрокаПредприятие.ХозяйствующийСубъектПредприятиеВЕТИС);
					Если ФормироватьХэш Тогда 
						ХэшСтроки = ХэшСтроки + СтрокаПредприятие.Идентификатор;
						Пока СтрДлина(ХэшСтроки) > 32 Цикл
							ХэшБуфер.ЗаписатьПобитовоеИсключительноеИли(0, ПолучитьБуферДвоичныхДанныхИзСтроки(Лев(ХэшСтроки,32), "UTF-8"));
							ХэшСтроки = Сред(ХэшСтроки, 33);
						КонецЦикла;
					КонецЕсли;
				ИначеЕсли НЕ ВсеСтроки Тогда
					НовыйЭлемент.ВсеПредприятияВыбраны = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			ВыбранныеЗначения.Добавить(НовыйЭлемент);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ФормироватьХэш Тогда
		Пока ХэшСтроки <> "" Цикл
			ХэшБуфер.ЗаписатьПобитовоеИсключительноеИли(0, ПолучитьБуферДвоичныхДанныхИзСтроки(Лев(ХэшСтроки,32), "UTF-8"));
			ХэшСтроки = Сред(ХэшСтроки, 33);
		КонецЦикла;
		ХэшСтроки = ПолучитьBase64СтрокуИзБуфераДвоичныхДанных(ХэшБуфер);
	КонецЕсли;
	
	ПредставлениеОрганизации = ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], МассивОрганизаций.Количество());
	ПредставлениеПредприятия = ?(МассивПредприятий.Количество() = 1, МассивПредприятий[0], МассивПредприятий.Количество());
	
	Результат = Новый Структура;
	Результат.Вставить("ВыбранныеЗначения",        ВыбранныеЗначения);
	Результат.Вставить("ХэшСтроки",                ХэшСтроки);
	Результат.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	Результат.Вставить("ПредставлениеПредприятия", ПредставлениеПредприятия);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеВыбранныхНастроек(ДеревоОтбора, ХэшСтроки = "", СписокВыбора = Неопределено) Экспорт 
	
	ОписаниеВыбора = ДеревоОтбораОрганизацииВЕТИСВМассивСтруктур(ДеревоОтбора,,Ложь);
	
	// По сохраненным настройкам
	Если ТипЗнч(СписокВыбора) = Тип("СписокЗначений")Тогда
		Для Каждого ЭлементСписка Из СписокВыбора Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементСписка.Значение, "ХэшСтроки")Тогда 
				Если ЭлементСписка.Значение.ХэшСтроки = ХэшСтроки Тогда
					Возврат ЭлементСписка.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// По выбору
	Если ТипЗнч(ОписаниеВыбора.ПредставлениеОрганизации) = Тип("Число") Тогда
		Если ОписаниеВыбора.ПредставлениеОрганизации = 0 Тогда
			ПредставлениеОрганизации = "";
		Иначе
			ПредставлениеОрганизации = НСтр("ru = ';%1 организация;;%1 организации;%1 организаций;%1 организаций'");
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеОрганизации,ОписаниеВыбора.ПредставлениеОрганизации);
		КонецЕсли;
	Иначе
		ПредставлениеОрганизации = ОписаниеВыбора.ПредставлениеОрганизации;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеВыбора.ПредставлениеПредприятия) = Тип("Число") Тогда
		Если ОписаниеВыбора.ПредставлениеПредприятия = 0 Тогда
			ПредставлениеПредприятия = "";
		Иначе
			ПредставлениеПредприятия = НСтр("ru = ';%1 предприятие;;%1 предприятия;%1 предприятий;%1 предприятий'");
			ПредставлениеПредприятия = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ПредставлениеПредприятия,ОписаниеВыбора.ПредставлениеПредприятия);
		КонецЕсли;
	Иначе
		ПредставлениеПредприятия = ОписаниеВыбора.ПредставлениеПредприятия;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПредставлениеОрганизации)
		И Не ЗначениеЗаполнено(ПредставлениеПредприятия) Тогда
		Возврат "";
	ИначеЕсли ЗначениеЗаполнено(ПредставлениеОрганизации)
		И Не ЗначениеЗаполнено(ПредставлениеПредприятия) Тогда
		Возврат Строка(ПредставлениеОрганизации);
	Иначе
		Возврат СтрШаблон(НСтр("ru = '%1 (%2)'"), ПредставлениеОрганизации, ПредставлениеПредприятия);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает элемент соответствия с ключом (именем метаданных) соответствующим типу
//
// Параметры:
//   СоответствиеПоТипам - - Соответствие (ключ - имя метаданных документа, значение - произвольный)
//   ТипОснования        - - Тип - ключ поиска
// 
// Возвращаемое значение:
//   - КлючИЗначение - элемент соответствия (Неопределено если не найдено)
//
Функция СоответствиеПоТипу(СоответствиеПоТипам,ТипОснования)
	
	Для Каждого КлючИЗначение Из СоответствиеПоТипам Цикл
		Если ТипОснования = Тип("ДокументСсылка." + КлючИЗначение.Ключ) Тогда
			Возврат КлючИЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает структуру запроса классификатора.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XNL.
//  ИмяТипа - Строка - Имя типа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстСообщенияXML - Строка - Текст сообщения XML.
//   * ИмяТипа - Строка - Операция.
//
Функция ПараметрыЗапросаЭлементовКлассификатора() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИмяМетода",         "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", "");
	ВозвращаемоеЗначение.Вставить("ПространствоИмен",  "");
	ВозвращаемоеЗначение.Вставить("Сервис");
	ВозвращаемоеЗначение.Вставить("ИмяЭлемента",       "");
	ВозвращаемоеЗначение.Вставить("ИмяСписка",         "");
	ВозвращаемоеЗначение.Вставить("Представление",     "");
	ВозвращаемоеЗначение.Вставить("НомерСтраницы",     1);
	ВозвращаемоеЗначение.Вставить("ФорматОбмена");
	ВозвращаемоеЗначение.Вставить("КоличествоЭлементовНаСтранице", 0);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру запроса классификатора.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XNL.
//  ИмяТипа - Строка - Имя типа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстСообщенияXML - Строка - Текст сообщения XML.
//   * ИмяТипа - Строка - Операция.
//
Функция ПараметрыЗапросаЭлементаКлассификатора() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИмяМетода",         "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", "");
	ВозвращаемоеЗначение.Вставить("ПространствоИмен",  "");
	ВозвращаемоеЗначение.Вставить("Сервис");
	ВозвращаемоеЗначение.Вставить("ИмяЭлемента",       "");
	ВозвращаемоеЗначение.Вставить("Представление",     "");
	ВозвращаемоеЗначение.Вставить("ФорматОбмена");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РезультатВыполненияЗапросаЭлементаКлассификатора() Экспорт
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("Результат");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Элемент");
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	ВозвращаемоеЗначение.Вставить("СтатусОбработки");
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция РезультатВыполненияЗапросаЭлементовКлассификатора() Экспорт
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("Результат");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Список");
	ВозвращаемоеЗначение.Вставить("ОбщееКоличество");
	ВозвращаемоеЗначение.Вставить("НомерСтраницы");
	ВозвращаемоеЗначение.Вставить("КоличествоСтраниц");
	
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИдентификаторАдресаИзДанныхАдреса(ДанныеАдреса) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеАдреса.УлицаGUID) Тогда
		Возврат ДанныеАдреса.УлицаGUID;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
		Возврат ДанныеАдреса.НаселенныйПунктGUID;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.РайонGUID) Тогда
		Возврат ДанныеАдреса.РайонGUID;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.РегионGUID) Тогда
		Возврат ДанныеАдреса.РегионGUID;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.СтранаGUID) Тогда
		Возврат ДанныеАдреса.СтранаGUID;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Формирует пустую структуру сообщения XML
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ТекстОшибки                 - Строка - Текст ошибки.
//   * Ошибки                      - Соответствие - Описание ошибок.
//   * Описание                    - Строка - Описание для отображения в форме подписания.
//   * ТекстСообщенияXML           - Строка - Текст сообщения XML.
//   * КонвертSOAP                 - Строка - Текст сообщения SOAP.
//   * ТипСообщения                - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Организация                 - ОпределяемыйТип.Организации - Организация.
//   * Документ                    - ДокументСсылка - Документ.
//   * Версия                      - Строка - Версия сообщения.
//   * GLN                         - Строка - Регистрационный номер GLN.
//   * СообщениеОснование          - СправочникСсылка.ВЕТИСПрисоединенныеФайлы - сообщение основание.
//   * ДанныеДляПолученияДокумента - Структура - Данные для получения документа.
//   * Основание                   - ДокументСсылка - Документ основание.
//
Функция СтруктураСообщенияXML() Экспорт
	
	СообщениеXML = Новый Структура;
	
	// Параметры запроса
	СообщениеXML.Вставить("ТекстСообщенияXML", "");
	СообщениеXML.Вставить("ТекстОшибки",       "");
	СообщениеXML.Вставить("Ошибки", Новый Соответствие);
	
	// Для отображения в сообщениях пользователям
	СообщениеXML.Вставить("Описание", "");
	СообщениеXML.Вставить("Операция");
	
	// Для сохранения в протоколе обмена
	СообщениеXML.Вставить("ХозяйствующийСубъект");
	СообщениеXML.Вставить("ТипСообщения");
	СообщениеXML.Вставить("Документ");
	СообщениеXML.Вставить("Версия", 0);
	СообщениеXML.Вставить("ФорматОбмена");
	
	// Дополнительные данные
	// Для обновления в формах
	СообщениеXML.Вставить("ДокументОснование");
	// Для формирования очереди сообщений по записям складского журнала
	СообщениеXML.Вставить("ЗаписиСкладскогоЖурнала");
	// Для формирования очереди сообщений
	СообщениеXML.Вставить("Предприятие");
	СообщениеXML.Вставить("ПараметрыЗапроса");
	
	//localTransactionId
	СообщениеXML.Вставить("ИдентификаторТранзакции", "");

	Возврат СообщениеXML;
	
КонецФункции

// Формирует пустую структуру изменений данных
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//
Функция СтруктураИзменения() Экспорт
	
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("ХозяйствующийСубъект");
	СтруктураИзменения.Вставить("Предприятие");
	СтруктураИзменения.Вставить("Операция");
	СтруктураИзменения.Вставить("ФорматОбмена");
	
	СтруктураИзменения.Вставить("ТекстОшибки",           "");
	СтруктураИзменения.Вставить("ПодготовленоКПередаче", Ложь);
	СтруктураИзменения.Вставить("Передано",              Ложь);
	СтруктураИзменения.Вставить("Принято",               Ложь);
	СтруктураИзменения.Вставить("ЕстьОшибкиСервиса",     Ложь);
	
	СтруктураИзменения.Вставить("ИсходящееСообщение");
	СтруктураИзменения.Вставить("ВходящееСообщение");
	
	СтруктураИзменения.Вставить("Объект");
	СтруктураИзменения.Вставить("ДополнительныеДанные");
	СтруктураИзменения.Вставить("ДокументОснование");
	СтруктураИзменения.Вставить("НовыйСтатус");
	СтруктураИзменения.Вставить("ОбъектИзменен", Ложь);
	
	Возврат СтруктураИзменения;
	
КонецФункции

// Инициализировать структуру очереди передачи данных
// 
// Возвращаемое значение:
//  Структура - Описание:
//   * ЗагружатьПосле - СправочникСсылка.ВЕТИСПрисоединенныеФайлы - Загружать после
//   * ПараметрыЗапроса - Структура - Параметры запроса
//   * ИдентификаторЗаявки - Строка - Идентификатор заявки
//   * Предприятие - СправочникСсылка.ПредприятияВЕТИС - Предприятие
//   * ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Хозяйствующий субъект
//   * ДатаСоздания - Дата - Дата создания
//   * ПодготовленоКПередаче - Булево - Признак подготовки к передаче
//   * ФорматОбмена - Неопределено - Формат обмена
//   * Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция
//   * ИсходящееСообщение - СправочникСсылка.ВЕТИСПрисоединенныеФайлы - Исходящее сообщение
Функция СтруктураОчередиПередачиДанных() Экспорт
	
	ПараметрыКЗагрузке = Новый Структура;
	ПараметрыКЗагрузке.Вставить("ИсходящееСообщение");
	ПараметрыКЗагрузке.Вставить("Операция");
	ПараметрыКЗагрузке.Вставить("ФорматОбмена");
	ПараметрыКЗагрузке.Вставить("ПодготовленоКПередаче");
	
	ПараметрыКЗагрузке.Вставить("ДатаСоздания");
	ПараметрыКЗагрузке.Вставить("ХозяйствующийСубъект");
	ПараметрыКЗагрузке.Вставить("Предприятие");
	ПараметрыКЗагрузке.Вставить("ИдентификаторЗаявки");
	ПараметрыКЗагрузке.Вставить("ПараметрыЗапроса");
	ПараметрыКЗагрузке.Вставить("ЗагружатьПосле");
	
	Возврат ПараметрыКЗагрузке;
	
КонецФункции

Функция НоваяНастройкаПодключенияВЕТИС() Экспорт
	
	НастройкаПодключенияВЕТИС = Новый Структура;
	НастройкаПодключенияВЕТИС.Вставить("Логин",             "");
	НастройкаПодключенияВЕТИС.Вставить("Пароль",            "");
	НастройкаПодключенияВЕТИС.Вставить("КлючAPI",           "");
	НастройкаПодключенияВЕТИС.Вставить("Идентификатор",     "");
	НастройкаПодключенияВЕТИС.Вставить("ЛогинПользователя", "");
	НастройкаПодключенияВЕТИС.Вставить("Таймаут",           60);
	НастройкаПодключенияВЕТИС.Вставить("ФорматОбмена",      Неопределено);
	НастройкаПодключенияВЕТИС.Вставить("ПраваДоступа",      Новый Массив);
	
	Возврат НастройкаПодключенияВЕТИС;
	
КонецФункции

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора
//
// Параметры:
//  Список - динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбораРасширенная,
			Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если СтруктураБыстрогоОтбораРасширенная <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбораРасширенная.Количество() = 2
			И СтруктураБыстрогоОтбораРасширенная.Свойство("ИмяПоля")
			И СтруктураБыстрогоОтбораРасширенная.Свойство("Настройки") Тогда
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная.Настройки;
			ИмяКолонкиДляПоиска = СтруктураБыстрогоОтбораРасширенная.ИмяПоля;
		Иначе
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная;
			ИмяКолонкиДляПоиска = ИмяКолонки;
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора <> Неопределено
			И СтруктураБыстрогоОтбора.Свойство(ИмяКолонкиДляПоиска) Тогда
			
			ЗначениеОтбора = СтруктураБыстрогоОтбора[ИмяКолонкиДляПоиска];
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				
				Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора.ВыгрузитьЗначения());
				ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора);
				Иначе
					Значение.Очистить();
					Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
						Значение.Добавить(ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Значение) = Тип("ДанныеФормыДерево") Тогда 
				Значение.ПолучитьЭлементы().Очистить();
				Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
					Для Каждого ЭлементОтбора Из ЗначениеОтбора Цикл 
						Значение.ПолучитьЭлементы().Добавить()[0] = ЭлементОтбора.Значение;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("ДанныеФормыДерево") Тогда
					
					ПеренестиДеревоРекурсивно(ЗначениеОтбора, Значение);
					
				Иначе
					Значение.Очистить();
					Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
						Значение.Добавить(ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;
				
			Иначе 
				
				Значение = ЗначениеОтбора;
				
			КонецЕсли;
			
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, Значение.Количество() > 0, Использование);
			Иначе 
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			КонецЕсли;
			
			Если ТипЗнч(Значение) <> Тип("ДанныеФормыДерево") Тогда 
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,, ИспользованиеЭлементаОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора и переданных настроек
//
// Параметры:
//  Список - динамический список, для которого требуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Настройки - настройки, из которых могут получаться значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//  ПриводитьЗначениеКЧислу - Булево - Признак приведения значения к числу.
//
Процедура ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбораРасширенная,
			НастройкиРасширенные, Использование = Неопределено, ВидСравнения = Неопределено, ПриводитьЗначениеКЧислу = Ложь) Экспорт
	
	Если ТипЗнч(НастройкиРасширенные) = Тип("Структура")
		И НастройкиРасширенные.Количество() = 2
		И НастройкиРасширенные.Свойство("ИмяПоля")
		И НастройкиРасширенные.Свойство("Настройки") Тогда
		Настройки           = НастройкиРасширенные.Настройки;
		ИмяКолонкиДляПоиска = НастройкиРасширенные.ИмяПоля;
	Иначе
		Настройки           = НастройкиРасширенные;
		ИмяКолонкиДляПоиска = ИмяКолонки;
	КонецЕсли;
	
	Если СтруктураБыстрогоОтбораРасширенная <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбораРасширенная.Количество() = 2
			И СтруктураБыстрогоОтбораРасширенная.Свойство("ИмяПоля")
			И СтруктураБыстрогоОтбораРасширенная.Свойство("СтруктураБыстрогоОтбора") Тогда
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная.СтруктураБыстрогоОтбора;
			ИмяКолонкиДляПоиска = СтруктураБыстрогоОтбораРасширенная.ИмяПоля;
		Иначе
			СтруктураБыстрогоОтбора = СтруктураБыстрогоОтбораРасширенная;
			ИмяКолонкиДляПоиска = ИмяКолонки;
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяКолонкиДляПоиска) Тогда
			
			ЗначениеОтбора = СтруктураБыстрогоОтбора[ИмяКолонкиДляПоиска];
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				
				Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора.ВыгрузитьЗначения());
				ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
					Значение.ЗагрузитьЗначения(ЗначениеОтбора);
				Иначе
					Значение.Очистить();
					Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
						Значение.Добавить(ЗначениеОтбора);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Значение = ЗначениеОтбора;
				
			КонецЕсли;
			
			Если ПриводитьЗначениеКЧислу Тогда
				Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
			КонецЕсли;
			
			Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, Значение.Количество() > 0, Использование);
			Иначе
				ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
			
		КонецЕсли;
		
	Иначе
		
		ЗначениеОтбора = Настройки.Получить(ИмяКолонкиДляПоиска);
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			
			Если ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				Значение.ЗагрузитьЗначения(ЗначениеОтбора.ВыгрузитьЗначения());
			ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("Массив") Тогда
				Значение.ЗагрузитьЗначения(ЗначениеОтбора);
			Иначе
				Значение.Очистить();
				Если ЗначениеЗаполнено(ЗначениеОтбора) Тогда
					Значение.Добавить(ЗначениеОтбора);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("ДанныеФормыДерево") Тогда
			
			Если ТипЗнч(ЗначениеОтбора) = Тип("ДанныеФормыДерево")Тогда 
				Значение.ПолучитьЭлементы().Очистить();
				ПеренестиДеревоРекурсивно(ЗначениеОтбора,Значение);
			КонецЕсли;
			
		Иначе 
			
			Значение = ЗначениеОтбора;
			
		КонецЕсли;
		
		Если ПриводитьЗначениеКЧислу Тогда
			Значение = ?(ЗначениеЗаполнено(Значение), Число(Значение), Значение);
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, Значение.Количество() > 0, Использование);
		Иначе
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает структура поиска поля для загрузки из настроек.
//
// Параметры:
//  ИмяПоля - Строка - Имя поля для загрузки.
//  СтруктураБыстрогоОтбора - Структура - Структура быстрого отбора.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ИмяПоля - Строка - Имя поля для загрузки.
//   * СтруктураБыстрогоОтбора - Структура - Структура быстрого отбора.
//
Функция СтруктураПоискаПоляДляЗагрузкиИзНастроек(ИмяПоля, Настройки) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИмяПоля",   ИмяПоля);
	ВозвращаемоеЗначение.Вставить("Настройки", Настройки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет передан ли в форму списка документов отбор по дальнейшему действию ВЕТИС
//
// Параметры:
// ДальнейшееДействиеВЕТИС - Строка, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - поле отбора
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
//
// Возвращаемое значение:
// Булево
// Истина, если необходимо установить отбор по состоянию, иначе Ложь
//
Функция НеобходимОтборПоДальнейшемуДействиюВЕТИСПриСозданииНаСервере(ДальнейшееДействиеВЕТИС, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействиеВЕТИС", ДальнейшееДействиеВЕТИС) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, нужно ли устанавливать отбор по дальнейшему действию ВетИС, загруженный из настроек или переданный в форму извне
//
// Отбор из настроек устанавливается только если отбор не передан в форму извне
//
// Параметры:
// ДальнейшееДействиеВетИС -  Строка, ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - поле отбора по дальнейшему действию ВЕТИС
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
// Настройки - Соответствие - настройки формы
//
Функция НеобходимОтборПоДальнейшемуДействиюВЕТИСПередЗагрузкойИзНастроек(ДальнейшееДействиеВЕТИС, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	НеобходимОтбор = Ложь;
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		ДальнейшееДействиеВЕТИС = Настройки.Получить("ДальнейшееДействиеВЕТИС");
		НеобходимОтбор = Истина;
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("ДальнейшееДействиеВЕТИС") Тогда
			ДальнейшееДействиеВЕТИС = Настройки.Получить("ДальнейшееДействиеВЕТИС");
			НеобходимОтбор = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеобходимОтбор;
	
КонецФункции

Функция ЭтоШтриховойКодЕАN13(ШтрихКод) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Соответствует", Истина);
	СтруктураВозврата.Вставить("ТекстОшибки",   "");
	
	Если СтрДлина(ШтрихКод) <> 13 Тогда
		
		СтруктураВозврата.Соответствует = Ложь;
		СтруктураВозврата.ТекстОшибки = НСтр("ru = 'Длина не равна 13 символам'");
	
	ИначеЕсли МенеджерОборудованияКлиентСервер.РассчитатьКонтрольныйСимволGTIN13(ШтрихКод) <> Прав(ШтрихКод, 1) Тогда
		
		СтруктураВозврата.Соответствует = Ложь;
		СтруктураВозврата.ТекстОшибки = НСтр("ru = 'Контрольная цифра не соответствует рассчитанной'");
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПеренестиДеревоРекурсивно(ДеревоИсточник, ДеревоПриемник, ОчищатьПриемник = Истина) Экспорт
	
	Если ОчищатьПриемник Тогда 
		ДеревоПриемник.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	Для Каждого Элемент Из ДеревоИсточник.ПолучитьЭлементы() Цикл
		
		НовыйЭлемент = ДеревоПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
		ПеренестиДеревоРекурсивно(Элемент,НовыйЭлемент,Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеНомераТранспортногоСредства(ТипТранспорта) Экспорт
	
	Результат = "";
	
	Если ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.Автомобиль") Тогда
		Результат = НСтр("ru = 'Номер автомашины'");
	ИначеЕсли ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.ЖелезнодорожныйВагон") Тогда
		Результат = НСтр("ru = 'Номер'");
	ИначеЕсли ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.Авиарейс") Тогда
		Результат = НСтр("ru = 'Номер рейса'");
	ИначеЕсли ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.МорскойКонтейнер") Тогда
		Результат = НСтр("ru = 'Номер контейнера'");
	ИначеЕсли ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.МорскойТрюм") Тогда
		Результат = НСтр("ru = 'Номер и название судна'");
	ИначеЕсли ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.Речной") Тогда
		Результат = НСтр("ru = 'Номер и название судна'");
	ИначеЕсли ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.ПерегонСкота") Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеДанныхТранспортногоСредства(Данные, ПредставлениеНомераПоТипуТранспорта = Истина) Экспорт
	
	Результат = "";
	
	Если ЗначениеЗаполнено(Данные.ТипТранспорта) Тогда
		
		ПредставлениеПоля = ?(ПредставлениеНомераПоТипуТранспорта, 
			ИнтеграцияВЕТИСКлиентСервер.ПредставлениеНомераТранспортногоСредства(Данные.ТипТранспорта),
			?(ПустаяСтрока(Данные.НомерТранспортногоСредства), "", НСтр("ru = 'Номер'")));
		
		СтрокаШаблона = ?(ПустаяСтрока(Данные.НомерТранспортногоСредства), "%1%2", "%1: %2");
		Результат = СтрШаблон(СтрокаШаблона, ПредставлениеПоля, Данные.НомерТранспортногоСредства);
		
	КонецЕсли;
	
	Если Данные.ТипТранспорта = ПредопределенноеЗначение("Перечисление.ТипыТранспортаВЕТИС.Автомобиль") Тогда
		
		Если НЕ ПустаяСтрока(Данные.НомерАвтомобильногоПрицепа) Тогда
			Результат = СтрШаблон(
				НСтр("ru = '%1, полуприцеп: %2'"),
				Результат,
				Данные.НомерАвтомобильногоПрицепа);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Данные.НомерАвтомобильногоКонтейнера) Тогда
			Результат = СтрШаблон(
				НСтр("ru = '%1, контейнер: %2'"),
				Результат,
				Данные.НомерАвтомобильногоКонтейнера);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПризнакТипЖивыеЖивотныеПоСтроке(СтрокаТабличнойЧасти, ТипЖивыеЖивотные, СброситьЗначенияРеквизитов = Истина) Экспорт
	
	СтрокаТабличнойЧасти.ТипЖивыеЖивотные = ТипЖивыеЖивотные;
	
	Если СтрокаТабличнойЧасти.ТипЖивыеЖивотные И СброситьЗначенияРеквизитов Тогда
		СброситьЗначенияПоСтрокеСЖивымиЖивотными(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьЗначенияПоСтрокеСЖивымиЖивотными(СтрокаТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти.СкоропортящаясяПродукция       = Ложь;
	СтрокаТабличнойЧасти.НизкокачественнаяПродукция     = Ложь;
	СтрокаТабличнойЧасти.СрокГодностиСтрока             = "";
	СтрокаТабличнойЧасти.СрокГодностиТочностьЗаполнения = ПредопределенноеЗначение("Перечисление.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ");
	СтрокаТабличнойЧасти.СрокГодностиНачалоПериода      = Неопределено;
	СтрокаТабличнойЧасти.СрокГодностиКонецПериода       = Неопределено;
	
КонецПроцедуры

Функция ПредставлениеПоляДатаПроизводства(ТипЖивыеЖивотные) Экспорт
	
	Возврат ?(ТипЖивыеЖивотные = Истина, НСтр("ru = 'Дата рождения'"), НСтр("ru = 'Дата производства'"));
	
КонецФункции

Функция ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса) Экспорт
	
	КодСостояния = РезультатОтправкиHTTPЗапроса.КодСостояния;
	ТекстОтвета  = РезультатОтправкиHTTPЗапроса.ТекстОтвета;
	
	Если ЗначениеЗаполнено(ТекстОтвета) Тогда
		
		Возврат ИнтеграцияВЕТИСКлиентСервер.ОтветТекстСообщенияXMLПолучен(ТекстОтвета, КодСостояния);
		
	Иначе
		
		Если Не ЗначениеЗаполнено(КодСостояния) Тогда
			ТекстСообщенияXMLОтправлен = Ложь;
			ЗаголовокОшибки = НСтр("ru = 'HTTP-запрос не отправлен.'");
		Иначе
			ТекстСообщенияXMLОтправлен = Истина;
			ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Код состояния HTTP: %1.'"), КодСостояния);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОтправкиHTTPЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = ЗаголовокОшибки + Символы.ПС + РезультатОтправкиHTTPЗапроса.ТекстОшибки;
		Иначе
			ТекстОшибки = ЗаголовокОшибки;
		КонецЕсли;
		
		Возврат ИнтеграцияВЕТИСКлиентСервер.ОтветТекстСообщенияXMLНеПолучен(
			ТекстОшибки,
			ТекстСообщенияXMLОтправлен,
			КодСостояния);
		
	КонецЕсли;
	
КонецФункции

// Инициализирует структуру результата исходящего сообщения после получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщение отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLПолучен(ТекстВходящегоСообщенияSOAP, КодСостояния = 200) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  Истина);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Истина);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния",                КодСостояния);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияSOAP", ТекстВходящегоСообщенияSOAP);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Инициализирует структуру результата исходящего сообщения после отправки сообщения, но до получения ответа.
// 
// Возвращаемое значение:
// Структура:
//   ТекстСообщенияXMLОтправлен  - Булево - признак того, что сообщение отправлено.
//   ТекстСообщенияXMLПолучен    - Булево - признак того, что сообщение получено.
//   ТекстОшибки                 - Строка - текст ошибки, если таковая возникла.
//   ТекстВходящегоСообщенияXML  - Строка - текст ответа, на отправленное сообщение.
//
Функция ОтветТекстСообщенияXMLНеПолучен(Ошибка, ТекстСообщенияXMLОтправлен, КодСостояния = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLОтправлен",  ТекстСообщенияXMLОтправлен);
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXMLПолучен",    Ложь);
	
	ВозвращаемоеЗначение.Вставить("КодСостояния",                КодСостояния);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 Строка(Ошибка));
	ВозвращаемоеЗначение.Вставить("ТекстВходящегоСообщенияSOAP", "");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТочностьДатПродукцииИзСвязаннойТаблицы(Продукция, СвязаннаяТаблица, ВидПериода) Экспорт
	
	Отбор = Новый Структура("Продукция", Продукция);
	СтрокиСОтбором = СвязаннаяТаблица.НайтиСтроки(Отбор);
	
	Если СтрокиСОтбором.Количество() Тогда
		Если ВидПериода = "СрокГодности" Тогда
			Возврат СтрокиСОтбором[0].ТочностьСрокаГодности;
		Иначе
			Возврат СтрокиСОтбором[0].ТочностьДатыПроизводства;
		КонецЕсли;
	Иначе
		Возврат Новый СписокЗначений;
	КонецЕсли;

КонецФункции

Функция ПодсказкаКСостояниюОбмена(ИдентификаторПроблемы, Элемент = Неопределено) Экспорт
	
	Если ИдентификаторПроблемы = "ДлительноеОтсутствиеОбмена"
		Или ИдентификаторПроблемы = "ДлительноеОтсутствиеОбменаПоВСД"
		Или ИдентификаторПроблемы = "ДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Синхронизация данных может занять неприемлемое время (в зависимости от количества предприятий - от 1 часа
				         |до нескольких дней). Рекомендуется заново'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='запросить остатки и непогашенные ВСД'"),,,, "ЗапроситьОстаткиИНепогашенныеВСД"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурнала" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Последние попытки получения записей складского журнала приводят к ошибке'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				"APLM0012",
				Новый Шрифт(Элемент.Шрифт,,,Истина)));
		СтрокаЗаголовка.Добавить(".");
		СтрокаЗаголовка.Добавить(Символы.ПС);
		
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Попробуйте увеличить количество попыток, уменьшить количество элементов в пакете
				         |и уменьшить интервал получения изменений в панели'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='Параметры оптимизации'"),,,, "ПараметрыОптимизации"));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(НСтр("ru = 'и'"));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить обмен'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЕстьПроблемыAPLM0012ПриСинхронизацииВСД" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Последние попытки получения ветеринарно-сопроводительных документов приводят к ошибке'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				"APLM0012",
				Новый Шрифт(Элемент.Шрифт,,,Истина)));
		СтрокаЗаголовка.Добавить(".");
		СтрокаЗаголовка.Добавить(Символы.ПС);
		
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Попробуйте увеличить количество попыток, уменьшить количество элементов в пакете
				         |и уменьшить интервал получения изменений в панели'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='Параметры оптимизации'"),,,, "ПараметрыОптимизации"));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(НСтр("ru = 'и'"));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить обмен'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЕстьРасхожденияМеждуДатамиСинхронизацииЗаписейСкладскогоЖурналаИВСД" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Возможно, что в процессе обмена происходят ошибки времени выполнения. Рекомендуется провести анализ'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='журнала регистрации'"),,,, "e1cib/app/Обработка.ЖурналРегистрации"));
		СтрокаЗаголовка.Добавить(Символы.ПС);
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'по событиям ВетИС на предмет наличия ошибок.'")));
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "НеАктуальныеЗаписиСкладскогоЖурнала" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Синхронизация записей складского журнала требуется для поддержания журнала в актуальном состоянии,
				           |особенно если ведется работа в Web-интерфейсе ФГИС Меркурий. Рекомендуется'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить обмен'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "НеАктуальныеВСД" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Синхронизация ветеринарно-сопроводительных документов используется для получения входящих
				           |и возвратных документов, для обновления статусов исходящих ВСД при их гашении получателями.
				           |Рекомендуется'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить обмен'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЕстьРасхожденияДатыСинхронизацииИДатыОбменаПоЗаписямСкладскогоЖурнала" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Возможно, что в процессе обмена происходят ошибки времени выполнения. Рекомендуется провести анализ'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='журнала регистрации'"),,,, "e1cib/app/Обработка.ЖурналРегистрации"));
		СтрокаЗаголовка.Добавить(Символы.ПС);
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'по событиям ВетИС на предмет наличия ошибок.'")));
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЕстьРасхожденияДатыСинхронизацииИДатыОбменаПоВСД" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Возможно, что в процессе обмена происходят ошибки времени выполнения. Рекомендуется провести анализ'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='журнала регистрации'"),,,, "e1cib/app/Обработка.ЖурналРегистрации"));
		СтрокаЗаголовка.Добавить(Символы.ПС);
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'по событиям ВетИС на предмет наличия ошибок.'")));
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЕстьСообщенияОжидающиеОтправки" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Не все подготовленные для отправки сообщения доставлены в ФГИС Меркурий.
					       |Рекомендуется'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить обмен'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЛишниеЗаписиСинхронизации" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='Запись синхронизации не используется для обмена с ФГИС Меркурий. Рекомендуется'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='Удалить запись'"),,,, "УдалитьЗаписьСинхронизации"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "СинхронизацияНеВыполняласьДлительноеВремя" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='Синхронизация классификатора не выполнялась длительное время. Рекомендуется'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить синхронизацию'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РедактированиеУпаковокШтрихкодовВЕТИС

Процедура ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИдентификаторСтроки) Экспорт
	
	НайденныеСтрокиУпаковки = 
		Объект.УпаковкиВЕТИС.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", ИдентификаторСтроки));
		
	Для каждого СтрокаУпаковки Из НайденныеСтрокиУпаковки Цикл
		
		НайденныеСтрокиШтрихкоды = 
			Объект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			
		Для каждого СтрокаШтрихкода Из НайденныеСтрокиШтрихкоды Цикл
			Объект.ШтрихкодыУпаковок.Удалить(СтрокаШтрихкода);
		КонецЦикла;
		
		Объект.УпаковкиВЕТИС.Удалить(СтрокаУпаковки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИдентификаторСтроки, ДанныеЗаполнения) Экспорт
	
	ОчиститьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИдентификаторСтроки);
	
	Для каждого Строка Из ДанныеЗаполнения.Упаковки Цикл
		НоваяСтрока = Объект.УпаковкиВЕТИС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ИдентификаторСтрокиТовары = ИдентификаторСтроки;
	КонецЦикла;
	
	Для каждого Строка Из ДанныеЗаполнения.ШтрихкодыУпаковок Цикл
		ЗаполнитьЗначенияСвойств(Объект.ШтрихкодыУпаковок.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьДанныеУпаковокШтрихкодовПоСтроке(Объект, ИдентификаторСтроки, ИдентификаторСтрокиИсточника) Экспорт
	
	НайденныеСтрокиУпаковки = 
		Объект.УпаковкиВЕТИС.НайтиСтроки(Новый Структура("ИдентификаторСтрокиТовары", ИдентификаторСтрокиИсточника));
		
	Для каждого СтрокаУпаковки Из НайденныеСтрокиУпаковки Цикл
		
		НоваяСтрокаУпаковки = Объект.УпаковкиВЕТИС.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУпаковки, СтрокаУпаковки);
		НоваяСтрокаУпаковки.ИдентификаторСтрокиТовары = ИдентификаторСтроки;
		НоваяСтрокаУпаковки.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		
		НайденныеСтрокиШтрихкоды = 
			Объект.ШтрихкодыУпаковок.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковки.ИдентификаторСтроки));
			
		Для каждого СтрокаШтрихкода Из НайденныеСтрокиШтрихкоды Цикл
			НоваяСтрокаШтрихкода = Объект.ШтрихкодыУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаШтрихкода, СтрокаШтрихкода);
			НоваяСтрокаШтрихкода.ИдентификаторСтроки = НоваяСтрокаУпаковки.ИдентификаторСтроки;
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти