#Область ПрограммныйИнтерфейс

// Возвращает потенциально возможный доход по всем действующим патентам за указанный период.
//
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой запрашиваются сведения.
//  ДатаНачала - Дата - начало периода, за который определяется потенциальный доход.
//  ДатаОкончания - Дата - конец периода, за который определяется потенциальный доход.
//  СообщатьОбОшибках - Булево - если Истина, выводить пользователю сообщения об ошибках расчета сумм дохода.
//
// Возвращаемое значение:
//   Число   - потенциально возможный доход по действующим в указанный период патентам.
//
Функция ПотенциальноВозможныйДоход(Организация, ДатаНачала, ДатаОкончания, СообщатьОбОшибках = Истина) Экспорт
	
	ПотенциальноВозможныйДоход = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат ПотенциальноВозможныйДоход;
	КонецЕсли;
	
	ДанныеДействующихПатентов = Справочники.Патенты.ПатентыОрганизацииЗаПериод(Организация, ДатаНачала, ДатаОкончания);
	
	Для Каждого ДанныеПатента Из ДанныеДействующихПатентов Цикл
		
		Если ДанныеПатента.ПотенциальноВозможныйГодовойДоход <> 0 Тогда
			ПотенциальноВозможныйДоход = ПотенциальноВозможныйДоход
				+ УчетПСНКлиентСервер.РассчитатьПотенциальноВозможныйДоход(
					ДанныеПатента.ПотенциальноВозможныйГодовойДоход,
					Макс(ДатаНачала, ДанныеПатента.ДатаНачала),
					Мин(ДатаОкончания, ДанныеПатента.ДатаОкончания));
		Иначе
			Если СообщатьОбОшибках Тогда
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для патента ""%1"" не указан потенциально возможный доход'"), ДанныеПатента.Наименование);
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке, ДанныеПатента.Ссылка, "ПотенциальноВозможныйГодовойДоход");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПотенциальноВозможныйДоход;
	
КонецФункции

// Рассчитывает и обновляет суммы налога по патентам с учетом освобождения от налога
// за 2 квартал 2020 года для пострадавших от коронавируса.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация
//  ДеятельностьОтнесенаКПострадавшим - Булево - значение настройки "Деятельность отнесена к пострадавшим от коронавируса"
//     Если передано Истина, рассчитывается и записывается сумма освобождения от налога за 2 квартал 2020 года
//     во всех патентах организации, срок которых пересекается со 2 кварталом 2020 года.
//     Если передано Ложь, сумма освобождения от налога в таких патентах очищается.
//
Функция ОбновитьОсвобождениеОтНалогаДляПострадавшихОтКоронавируса(Организация, ДеятельностьОтнесенаКПострадавшим) Экспорт
	
	ПатентыПересчитатьВручную = Новый ТаблицаЗначений;
	ПатентыПересчитатьВручную.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.Патенты"));
	ПатентыПересчитатьВручную.Колонки.Добавить("Наименование", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ПериодОсвобождения = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	
	ПатентыДляПересчета = Справочники.Патенты.ПатентыОрганизацииЗаПериод(
		Организация,
		ПериодОсвобождения.Начало,
		ПериодОсвобождения.Конец);
	
	Если ПатентыДляПересчета.Количество() = 0 Тогда
		Возврат ПатентыПересчитатьВручную;
	КонецЕсли;
	
	Для Каждого ДанныеПатента Из ПатентыДляПересчета Цикл
		
		ПатентОбъект = ДанныеПатента.Ссылка.ПолучитьОбъект();
		
		Попытка
			
			ПатентОбъект.Заблокировать();
			
			Если ДеятельностьОтнесенаКПострадавшим Тогда
				ЗаполнитьОсвобождениеОтНалога(ПатентОбъект);
			Иначе
				ОчиститьОсвобождениеОтНалога(ПатентОбъект);
			КонецЕсли;
			
			ПатентОбъект.Записать();
			ПатентОбъект.Разблокировать();
			
		Исключение
			
			НовыйПатентПересчитатьВручную = ПатентыПересчитатьВручную.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПатентПересчитатьВручную, ДанныеПатента);
			
			ЗаписьЖурналаРегистрации(
				"Справочник.Патенты",
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Патенты,
				Организация,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ПатентыПересчитатьВручную;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ДопСтроки - Таблица значений - Строки табличной части заявления
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеУтратаПраваПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	ТаблицаКонтейнера = Контейнер.ДопСтроки;
	ТаблицаКонтейнера.Очистить();
	
	ДанныеЗаполнения = ДанныеЗаполненияЗаявления(ПараметрыОтчета);
	ДанныеПатентов = ДанныеЗаполнения.ДанныеПатентов;
	
	КоличествоПатентовНаЛисте = КоличествоПатентовНаЛистеЗаявленияОбУтрате();
	
	НомерПатентаПоПорядку = 1;
	НоваяСтрока = ТаблицаКонтейнера.Добавить();
	
	Для Каждого Патент Из ДанныеПатентов Цикл
		
		Если НомерПатентаПоПорядку > КоличествоПатентовНаЛисте Тогда
			НомерПатентаПоПорядку = 1;
			НоваяСтрока = ТаблицаКонтейнера.Добавить();
		КонецЕсли;
		
		НоваяСтрока[СтрШаблон("НОМЕР_ПАТЕНТА_%1", НомерПатентаПоПорядку)] = Патент.НомерПатента;
		НоваяСтрока[СтрШаблон("ДАТА_НАЧАЛА_%1", НомерПатентаПоПорядку)] = Патент.ДатаНачала;
		НоваяСтрока[СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", НомерПатентаПоПорядку)] = Патент.ДатаОкончания;
		
		НомерПатентаПоПорядку = НомерПатентаПоПорядку + 1;
		
	КонецЦикла;
	
	ТитульныйЛист = Контейнер.Титульный;
	ТитульныйЛист.Вставить("ДАТА_УТРАТЫ_ПРАВА", ДанныеЗаполнения.ДатаУтратыПрава);
	
	Если ДанныеЗаполнения.Свойство("КодПричины") Тогда
		ТитульныйЛист.Вставить("КОД_ПРИЧИНЫ", ДанныеЗаполнения.КодПричины);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НалоговыйОрган") Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеЗаполнения.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеЗаполнения.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//  Контейнер - Структура
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеПрекращениеПатентаФорма2014_1(ПараметрыОтчета, Контейнер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтчета.ПараметрыЗаполнения.Патент) Тогда
		Возврат;
	КонецЕсли;
	
	ТитульныйЛист = Контейнер.Титульный;
	
	ДанныеПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.ПараметрыЗаполнения.Патент,
		"НомерПатента, ДатаВыдачи, ПостановкаНаУчетВНалоговомОргане, НалоговыйОрган, НалоговыйОрган.Код");
		
	ТитульныйЛист.Вставить("НОМЕР_ПАТЕНТА", ДанныеПатента.НомерПатента);
	ТитульныйЛист.Вставить("ДАТА_ВЫДАЧИ",   ДанныеПатента.ДатаВыдачи);
	
	Если ДанныеПатента.ПостановкаНаУчетВНалоговомОргане =
			ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане")
		И ЗначениеЗаполнено(ДанныеПатента.НалоговыйОрган) Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеПатента.НалоговыйОрган;
		ТитульныйЛист.Вставить("КОД_НО", ДанныеПатента.НалоговыйОрганКод);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//  ПараметрыОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   * ПараметрыЗаполнения - Структура - дополнительные параметры для заполнения отчета
//  Контейнер - Структура
//   * ТитульныйЛист - Структура - Данные титульного листа заявления
//
Процедура ЗаполнитьЗаявлениеПрекращениеПатентаФорма2020_1(ПараметрыОтчета, Контейнер) Экспорт
	
	Патент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета.ПараметрыЗаполнения, "Патент", Неопределено);
	
	Если Не ЗначениеЗаполнено(Патент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Патент,
		"НомерПатента, ДатаВыдачи, ПостановкаНаУчетВНалоговомОргане, НалоговыйОрган");
	
	ТитульныйЛист = Контейнер.Титульная;
	ТитульныйЛист.Вставить("НомПатент", ДанныеПатента.НомерПатента);
	ТитульныйЛист.Вставить("ДатаВыд",   ДанныеПатента.ДатаВыдачи);
	
	Если ДанныеПатента.ПостановкаНаУчетВНалоговомОргане =
			ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане")
		И ЗначениеЗаполнено(ДанныеПатента.НалоговыйОрган) Тогда
		ПараметрыОтчета.КодНалоговогоОргана = ДанныеПатента.НалоговыйОрган;
		ТитульныйЛист.Вставить("КодНО", ДанныеПатента.НалоговыйОрган);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияУтратаПраваФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "КОД_ПРИЧИНЫ", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_УТРАТЫ_ПРАВА", Истина, Ложь);
	Для Сч = 1 по КоличествоПатентовНаЛистеЗаявленияОбУтрате() Цикл
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("НОМЕР_ПАТЕНТА_%1", Сч) , Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_НАЧАЛА_%1", Сч), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ДАТА_ОКОНЧАНИЕ_%1", Сч), Истина, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
// правилами заполнения полей, доступных для автозаполнения
//
// Параметры:
//  ПоказателиОтчета - Структура
//   * Организация - СправочникСсылка.Организации
//   * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияПрекращениеПатентаФорма2014_1(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "НОМЕР_ПАТЕНТА", Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ВЫДАЧИ", Истина, Ложь);
	
КонецПроцедуры

// Возвращает данные для заполнения уведомления об уменьшении налога на расходы на онлайн-кассы
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация уведомления
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган, в который подается уведомление.
//
// Возвращаемое значение:
//   Структура, Неопределено - данные для заполнения нового уведомления, см. Отчеты.РегламентированноеУведомлениеУменьшениеНалогаККТ.СформироватьУведомление();
//                             если для переданной организации заполнить уведомление нельзя, возвращается Неопределено.
//
//
Функция ДанныеЗаполненияУведомленияОбУменьшенииНалога(Организация, РегистрацияВНалоговомОргане) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РасходыККТ = РегистрыСведений.РасходыНаОнлайнКассыУменьшающиеНалогПСН.ДетальныеСведенияОРасходах(
		Организация,
		РегистрацияВНалоговомОргане);
	
	УменьшениеНалога = РегистрыСведений.РасходыНаОнлайнКассыУменьшающиеНалогПСН.УменьшениеПлатежейПоПатентам(
		Организация,
		РегистрацияВНалоговомОргане);
	
	ДанныеУведомления = Новый Структура;
	
	// Шапка
	ДанныеУведомления.Вставить("Организация", Организация);
	ДанныеУведомления.Вставить("РегистрацияВИФНС", РегистрацияВНалоговомОргане);
	
	// Общие итоги
	ОбщаяСуммаРасходов    = РасходыККТ.Итог("Сумма");
	ОбщийНалоговыйВычет   = УменьшениеНалога.Итог("НалоговыйВычет");
	НеиспользованныйВычет = Макс(ОбщаяСуммаРасходов - ОбщийНалоговыйВычет, 0);
	
	ДанныеУведомления.Вставить("Стр110", ОбщаяСуммаРасходов);
	ДанныеУведомления.Вставить("Стр210", НеиспользованныйВычет);
	
	// Данные таблицы А - расходы на кассы
	ДанныеЛистовА = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	Для Каждого РасходККТ Из РасходыККТ Цикл
		
		ЛистА = НовыйСтруктураДанныхЗаполненияЛистА();
		
		ЛистА.МоделККТ    = РасходККТ.Модель;
		ЛистА.НомерККТ    = РасходККТ.ЗаводскойНомер;
		ЛистА.РегНомерККТ = РасходККТ.РегистрационныйНомер;
		ЛистА.ДатаРегККТ  = РасходККТ.ДатаРегистрации;
		ЛистА.СумРасхККТ  = РасходККТ.Сумма;
		
		ДанныеЛистовА.Добавить(ЛистА);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ДанныеЛистовА", ДанныеЛистовА);
	
	// Данные таблицы Б - распределение расходов по патентам
	ДанныеЛистовБ = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	УменьшениеНалога.Индексы.Добавить("Патент");
	
	Патенты = ОбщегоНазначения.ВыгрузитьКолонку(УменьшениеНалога, "Патент", Истина);
	Для Каждого Патент Из Патенты Цикл
		
		ЛистБ = НовыйСтруктураДанныхЗаполненияЛистБ();
		
		СтрокиУменьшенияПоПатенту = УменьшениеНалога.НайтиСтроки(Новый Структура("Патент", Патент));
		
		СуммаНалога = 0;
		
		Для Каждого УменьшаемыйПлатеж Из СтрокиУменьшенияПоПатенту Цикл
			
			ЛистБ.Стр120 = УменьшаемыйПлатеж.НомерПатента;
			ЛистБ.Стр130 = УменьшаемыйПлатеж.ДатаВыдачиПатента;
			
			Если УменьшаемыйПлатеж.ВидПлатежа = Перечисления.ВидыПлатежейПоПатенту.ПервыйПлатеж Тогда
				ЛистБ.Стр170 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр180 = УменьшаемыйПлатеж.НалоговыйВычет;
			ИначеЕсли УменьшаемыйПлатеж.ВидПлатежа = Перечисления.ВидыПлатежейПоПатенту.ВторойПлатеж Тогда
				ЛистБ.Стр190 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр200 = УменьшаемыйПлатеж.НалоговыйВычет;
			Иначе // Единственный платеж
				ЛистБ.Стр150 = УменьшаемыйПлатеж.СрокПлатежа;
				ЛистБ.Стр160 = УменьшаемыйПлатеж.НалоговыйВычет;
			КонецЕсли;
			
			СуммаНалога = СуммаНалога + УменьшаемыйПлатеж.СуммаПлатежа;
			
		КонецЦикла;
		
		ЛистБ.Стр140 = СуммаНалога;
		
		ДанныеЛистовБ.Добавить(ЛистБ);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ДанныеЛистовБ", ДанныеЛистовБ);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Возвращает патент для подстановки в шапку документа поступления денежных средств.
// Патент определяется в соответствии с настройками учетной политики, характером операции
// и порядком отражения доходов(авансов) в табличной части документа.
//
// Параметры:
//  ПараметрыПлатежа  - Структура - параметры, описывающие документ. Состав - см. НовыеПараметрыВходящегоПлатежа().
//
// Возвращаемое значение:
//   СправочникСсылка.Патенты   - патент для подстановки в документ.
//
Функция ПатентВходящегоПлатежа(ПараметрыПлатежа) Экспорт
	
	// Патент в шапке документов поступления денежных средств заполняется у плательщиков ПСН в случаях, когда:
	// - в одной из строк табличной части РасшифровкаПлатежа задано отражение доходов/авансов по патенту;
	// - принимается розничная выручка из неавтоматизированной торговой точки, и учет в рознице ведется в ценах продажи.
	// Во всех остальных ситуациях указывается пустой патент.
	
	ПатентПлатежа = Справочники.Патенты.ПустаяСсылка();
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатент(ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата) Тогда
		Возврат ПатентПлатежа;
	КонецЕсли;
	
	Если УчетДенежныхСредствКлиентСервер.ЕстьАвансыПолученные(ПараметрыПлатежа.ВидОперации) Тогда
		
		Для Каждого ОтражениеДохода Из ПараметрыПлатежа.ЗначенияОтраженияДоходов Цикл
			Если ТипЗнч(ОтражениеДохода) = Тип("СправочникСсылка.Патенты") И Не ОтражениеДохода.Пустая() Тогда
				// Авансы и доходы могут быть отражены только по одному патенту,
				// выбор нескольких патентов должен быть исключен при проверке заполнения документа.
				ПатентПлатежа = ОтражениеДохода;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыПлатежа.ВыручкаСНТТ
		И УчетДенежныхСредствКлиентСервер.ЕстьРозничнаяВыручка(ПараметрыПлатежа.ВидОперации) Тогда
		
		СпособУчетаВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ПараметрыПлатежа.Организация, ПараметрыПлатежа.Дата);
		
		Если СпособУчетаВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
			ПатентПлатежа = ПараметрыПлатежа.Патент;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПатентПлатежа;
	
КонецФункции

// Конструктор структуры параметров, требующихся для заполнения патента
// в шапке документов поступления денежных средств.
//
// Возвращаемое значение:
//   Структура   - параметры платежа со значениями по умолчанию.
//
Функция НовыеПараметрыВходящегоПлатежа() Экспорт
	
	ПараметрыПлатежа = Новый Структура;
	
	ПараметрыПлатежа.Вставить("Организация", Справочники.Организации.ПустаяСсылка()); // Организация платежа.
	ПараметрыПлатежа.Вставить("Дата", '00010101'); // Дата платежа.
	ПараметрыПлатежа.Вставить("ВидОперации", Неопределено); // Вид операции документа платежа.
	ПараметрыПлатежа.Вставить("Патент", Справочники.Патенты.ПустаяСсылка()); // Текущий патент, указанный в платеже.
	ПараметрыПлатежа.Вставить("ЗначенияОтраженияДоходов", Новый Массив); // Массив - значения порядка отражения доходов/авансов, указанные в строках расшифровки платежа.
	ПараметрыПлатежа.Вставить("ВыручкаСНТТ", Ложь); // Признак приема розничной выручки в неавтоматизированной торговой точке.
	
	Возврат ПараметрыПлатежа;
	
КонецФункции

// Возвращает параметры деятельности на патентной системе налогообложения по умолчанию
// для операций реализации.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация.
//  Период       - Дата - дата, на которую требуются сведения.
//
// Возвращаемое значение:
//   Структура   - параметры деятельности на патенте, состав:
//                  * ДеятельностьНаПатенте - Булево - признак отнесения реализации к патентной системе налогообложения;
//                  * Патент - СправочникСсылка.Патента - патент по умолчанию, к которому может быть отнесена реализация.
//
Функция ДеятельностьНаПатентеПоУмолчанию(Организация, Знач Период) Экспорт
	
	ПараметрыДеятельности = Новый Структура("ДеятельностьНаПатенте, Патент", Ложь, Справочники.Патенты.ПустаяСсылка());
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат ПараметрыДеятельности;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Период) Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период) Тогда
		
		Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Период)
			Или УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			
			ПараметрыДеятельности.ДеятельностьНаПатенте = Ложь;
			
		ИначеЕсли УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Период) Тогда
			
			ПараметрыДеятельности.ДеятельностьНаПатенте = Истина;
			ПараметрыДеятельности.Патент = ПатентПоУмолчанию(Организация, Период);
			
		ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
			
			Если УчетнаяПолитика.ОсновнойХарактерДеятельности(Организация, Период)
					= Перечисления.ХарактерДеятельности.ВсяДеятельностьНаПатенте Тогда
				ПараметрыДеятельности.ДеятельностьНаПатенте = Истина;
				ПараметрыДеятельности.Патент = ПатентПоУмолчанию(Организация, Период);
			Иначе
				ПараметрыДеятельности.ДеятельностьНаПатенте = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыДеятельности;
	
КонецФункции

// Возвращает патент, применяемый организацией на указанную дату, если он один.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить патент.
//  Дата - Дата - Дата, на которую необходимо получить патент.
//
// Возвращаемое значение:
//  СправочникСсылка.Патенты - Патент по умолчанию.
//
Функция ПатентПоУмолчанию(Организация, Дата) Экспорт
	
	Патенты = Справочники.Патенты.ПатентыОрганизации(Организация, Дата);
	
	Если Патенты.Количество() = 1 Тогда
		Возврат Патенты[0];
	КонецЕсли;
	
	Возврат Справочники.Патенты.ПустаяСсылка();
	
КонецФункции

// Проверяет наличие действующих патентов на указанную дату.
//
// Параметры:
//  Период - Дата - проверяемый день.
//
// Возвращаемое значение:
//  Булево - если Истина, имеется как минимум один патент со сроком действия, включающим указанный день.
//
Функция ИмеютсяДействующиеПатенты(Период) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользуетсяУСНПатент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	НЕ Патенты.ПометкаУдаления
	|	И Патенты.ДатаНачала <= &Период
	|	И Патенты.ДатаОкончания >= &Период"
	;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает дату ввода в действие патентной системы как самостоятельной системы налогообложения.
// Возвращаемое значение:
//
//  Дата - дата начала применения патентной системы налогообложения.
//
Функция ДатаНачалаДействияПатентнойСистемы() Экспорт
	
	Возврат '20130101';
	
КонецФункции

// Возвращает сведения о допустимости применении в организации - ИП на патенте
// налогового вычета по расходам на приобретение онлайн-касс.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация для определения применимости вычета.
//   Период - Дата - дата, на которую определяется применение вычета.
//
// Возвращаемое значение:
//   Булево - если ИСТИНА, вычет применяется.
//
Функция ПрименяетсяВычетПоОнлайнКассам(Организация, Период) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Период >= ДатаНачалаПримененияВычетаНаОнлайнКассы()
		И Период <= ДатаОкончанияПримененияВычетаНаОнлайнКассы();
	
КонецФункции

#Область РаботаСФормами

// Процедура изменяет значения реквизитов, связанных с учетом патента,
// в соответствии с учетной политикой, действующей на дату документа.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором требуется обработать изменение даты.
//
Процедура ДатаПриИзменении(Объект) Экспорт
	
	ПараметрыУчетаПСН = Новый Структура("ДеятельностьНаПатенте, Патент", Ложь, Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыУчетаПСН, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУчетаПСН.ДеятельностьНаПатенте
		И НЕ УчетнаяПолитика.ПрименяетсяУСНПатент(Объект.Организация, Объект.Дата) Тогда
		ПараметрыУчетаПСН.ДеятельностьНаПатенте = Ложь;
		ПараметрыУчетаПСН.Патент = Справочники.Патенты.ПустаяСсылка();
	ИначеЕсли УчетнаяПолитика.ПрименяетсяТолькоУСНПатент(Объект.Организация, Объект.Дата) Тогда
		ПараметрыУчетаПСН.ДеятельностьНаПатенте = Истина;
	КонецЕсли;
	
	Если ПараметрыУчетаПСН.ДеятельностьНаПатенте Тогда
		
		// Проверим, что патент действует на указанную дату.
		Если ЗначениеЗаполнено(ПараметрыУчетаПСН.Патент)
			И НЕ УчетПСН.ПатентДоступенДляВыбора(ПараметрыУчетаПСН.Патент, Объект.Организация, Объект.Дата) Тогда
			ПараметрыУчетаПСН.Патент = Справочники.Патенты.ПустаяСсылка();
		КонецЕсли;
		
		// Заполним "Патент", если на указанную дату действует только 1 патент.
		Если НЕ ЗначениеЗаполнено(ПараметрыУчетаПСН.Патент) Тогда
			ПараметрыУчетаПСН.Патент = УчетПСН.ПатентПоУмолчанию(Объект.Организация, Объект.Дата);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыУчетаПСН);
	
КонецПроцедуры

// Проверяет, включает ли период действия патента указанную дату.
//
// Параметры:
//  Патент - СправочникСсылка.Патенты - Патент, период действия которого необходимо проверить.
//  Организация - СправочникСсылка.Организации - Организация, которой принадлежит патент.
//  Дата - Дата - Дата, которая должна входить в период действия патента.
//
// Возвращаемое значение:
//  Булево - Период действия патента включает указанную дату.
//
Функция ПатентДоступенДляВыбора(Патент, Организация, Дата) Экспорт
	
	Патенты = Справочники.Патенты.ПатентыОрганизации(Организация, Дата);
	
	Возврат Патенты.Найти(Патент) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область ОтражениеДоходов

// Возвращает список вариантов отражения доходов, допустимых для организации-плательщика ПСН на переданную дату.
// Для организаций, не являющихся предпринимателями на патенте, возвращает пустой список.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация.
//  Период       - Дата - дата, на которую требуются сведения.
//
// Возвращаемое значение:
//   СписокЗначений   - список с перечнем допустимых вариантов отражения доходов, содержимое:
//                       * значения - порядок отражения доходов, указывается в документах поступления денежных средств;
//                       * представления - представления вариантов отражения доходов для отображения в списках выбора.
//
Функция ДопустимыеВариантыОтраженияДоходов(Организация, Период) Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Патенты.Ссылка КАК Ссылка,
	|	Патенты.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.Владелец = &Организация
	|	И НЕ Патенты.ПометкаУдаления
	|	И Патенты.ДатаНачала <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
	|	И Патенты.ДатаОкончания >= НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доход по патенту ""%1""'"),
			Выборка.Наименование);
		СписокВариантов.Добавить(Выборка.Ссылка, Представление);
	КонецЦикла;
	
	Если ПравоДоступа("Добавление", Метаданные.Справочники.Патенты) Тогда
		СписокВариантов.Добавить(
			УчетПСНКлиентСервер.ОтражениеДоходовСоздатьПатентЗначение(),
			УчетПСНКлиентСервер.ОтражениеДоходовСоздатьПатентПредставление());
	КонецЕсли;
	
	Возврат СписокВариантов;
	
КонецФункции

#КонецОбласти

// Возвращает данные для заполнения уведомления об уменьшении налога по патенту на сумму страховых взносов
// и больничных пособий
//
// Параметры:
//  Патент - СправочникСсылка.Патенты - патент, по которому подается уведомление
//  Сумма - Число - сумма уменьшения налога
//  Ключ - УникальныйИдентификатор - идентификатор для получения адреса временного хранилища.
//         В хранилище помещаются данные, которые нельзя использовать на клиенте
//
// Возвращаемое значение:
//  Структура - данные для заполнения нового уведомления
//
Функция ДанныеЗаполненияУведомленияОбУменьшенииНалогаНаСтраховыеВзносы(Патент, Сумма, Ключ) Экспорт
	
	ДанныеУведомления = Новый Структура;
	
	РеквизитыПатента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Патент, "Владелец, НомерПатента, ДатаНачала, ДатаОкончания, СуммаПервогоПлатежа, СуммаВторогоПлатежа");
	Организация = РеквизитыПатента.Владелец;
	СуммаНалогаПоПатенту = РеквизитыПатента.СуммаПервогоПлатежа + РеквизитыПатента.СуммаВторогоПлатежа;
	
	ЛистА = НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы();
	ДанныеЛистаА = ЛистА.Добавить();
	ДанныеЛистаА.ДатаВыдПат = РеквизитыПатента.ДатаНачала;
	ДанныеЛистаА.НомерПат = РеквизитыПатента.НомерПатента;
	ДанныеЛистаА.СумНалПатУм = СуммаНалогаПоПатенту;
	
	ДанныеУведомления.Вставить("ЛистА", ПоместитьВоВременноеХранилище(ЛистА, Ключ));
	
	ЛистБ = НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы();
	ЛистБ.ОбщСумНалПатУм = СуммаНалогаПоПатенту;
	ИспользуетсяТрудНаемныхРаботников = УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(
		Организация, РеквизитыПатента.ДатаНачала, РеквизитыПатента.ДатаОкончания);
	ЛистБ.ПрНП = ?(ИспользуетсяТрудНаемныхРаботников, "1", "2");
	ЛистБ.СумСтрВзнУмНал = Сумма;
	
	ДанныеУведомления.Вставить("ЛистБ", ЛистБ);
	
	Возврат ДанныеУведомления;
	
КонецФункции

// Возвращает актуальную форму уведомления об уменьшении налога на сумму страховых взносов и больничных пособий
//
// Возвращаемое значение:
//  Строка - полный путь к форме уведомления
//
Функция ПутьКФормеУведомленияУменьшенияНалогаПСН() Экспорт
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УменьшениеНалогаНаСтраховыеВзносы;
	ИмяОтчета = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ПолучитьИмяОтчетаПоВидуУведомления(
		ВидУведомления);
	
	ПутьКФорме = "Документ.УведомлениеОСпецрежимахНалогообложения.Форма.ФормаВыбораФормыОтчета";
	
	Если ЗначениеЗаполнено(ИмяОтчета) Тогда 
		Формы = Отчеты[ИмяОтчета].ПолучитьТаблицуФорм();
		Если Формы.Количество() > 1 Тогда
			Формы.Сортировать("ДатаНачала Убыв");
		КонецЕсли;
		Если ЗначениеЗаполнено(Формы) Тогда
			ИмяФормы = Формы[0].ИмяФормы;
			ПутьКФорме = СтрШаблон("Отчет.%1.Форма.%2", ИмяОтчета, ИмяФормы);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПутьКФорме;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ДатаНачалаПримененияВычетаНаОнлайнКассы() Экспорт
	
	Возврат НачалоДня(Дата(2018, 1, 1)); // п. 1.1 статьи 346.51 НК РФ
	
КонецФункции

Функция ДатаОкончанияПримененияВычетаНаОнлайнКассы() Экспорт
	
	Возврат КонецДня(Дата(2019, 12, 31)); // п. 1.1 статьи 346.51 НК РФ
	
КонецФункции

Функция ДоляДоходовПатентнойСистемыНалогообложения(Организация, РасчетныйПериод, Периодичность) Экспорт
	
	Коэффициент = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, РасчетныйПериод);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, РасчетныйПериод);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Если УчетнаяПолитика.ПрименяетсяУСН(Организация, РасчетныйПериод) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ДоходУСН), 0) КАК ДоходОсновнаяСистема,
		|	ЕСТЬNULL(СУММА(ВложенныйЗапрос.ДоходПСН), 0) КАК ДоходПатент
		|ИЗ
		|	(ВЫБРАТЬ
		|		КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот КАК ДоходУСН,
		|		0 КАК ДоходПСН
		|	ИЗ
		|		РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КнигаУчетаДоходовПатентОбороты.Графа4Оборот
		|	ИЗ
		|		РегистрНакопления.КнигаУчетаДоходовПатент.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовПатентОбороты) КАК ВложенныйЗапрос";
	Иначе
		Запрос.УстановитьПараметр("ОблагаетсяНДС", Не УчетнаяПолитика.ПрименяетсяОсвобождениеОтУплатыНДС(Организация, КонецМесяца(РасчетныйПериод)));
		Запрос.УстановитьПараметр("ХарактерыДеятельностиПатент", УчетДоходовИРасходовПредпринимателя.ХарактерыДеятельностиУСНПатент());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВсеДоходы.ДоходОСН), 0) КАК ДоходОсновнаяСистема,
		|	ЕСТЬNULL(СУММА(ВсеДоходы.ДоходПСН), 0) КАК ДоходПатент
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НЕ ИПДоходыОбороты.ХарактерДеятельности В (&ХарактерыДеятельностиПатент)
		|				ТОГДА ВЫБОР
		|						КОГДА &ОблагаетсяНДС
		|							ТОГДА ИПДоходыОбороты.ВыручкаОборот - ИПДоходыОбороты.НДСНачисленныйОборот
		|						ИНАЧЕ ИПДоходыОбороты.ВыручкаОборот
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ДоходОСН,
		|		0 КАК ДоходПСН
		|	ИЗ
		|		РегистрНакопления.ИПДоходы.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				Организация = &Организация
		|					И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК ИПДоходыОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА НЕ ИППрочиеДоходыОбороты.ХарактерДеятельности В (&ХарактерыДеятельностиПатент)
		|				ТОГДА ИППрочиеДоходыОбороты.СуммаОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		РегистрНакопления.ИППрочиеДоходы.Обороты(
		|				&НачалоПериода,
		|				&КонецПериода,
		|				,
		|				Организация = &Организация
		|					И ВЫРАЗИТЬ(СтатьяДоходов КАК Справочник.ПрочиеДоходыИРасходы).ПринятиеКНалоговомуУчету) КАК ИППрочиеДоходыОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		КнигаУчетаДоходовПатентОбороты.Графа4Оборот
		|	ИЗ
		|		РегистрНакопления.КнигаУчетаДоходовПатент.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация) КАК КнигаУчетаДоходовПатентОбороты) КАК ВсеДоходы";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДоходПатент          = ?(НЕ ЗначениеЗаполнено(Выборка.ДоходПатент), 0, Выборка.ДоходПатент);
		ДоходОсновнаяСистема = ?(НЕ ЗначениеЗаполнено(Выборка.ДоходОсновнаяСистема), 0, Выборка.ДоходОсновнаяСистема);
		
		Коэффициент = ?(ДоходПатент + ДоходОсновнаяСистема = 0, 0, ДоходПатент/(ДоходПатент + ДоходОсновнаяСистема));
		
	КонецЕсли;
	
	Возврат Коэффициент;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеЗаявления

Функция ДанныеЗаполненияЗаявления(ПараметрыОтчета)
	
	Перем ПараметрыЗаполнения;
	ДанныеЗаполнения = Новый Структура;
	
	Если ПараметрыОтчета.Свойство("ПараметрыЗаполнения", ПараметрыЗаполнения) И ПараметрыЗаполнения <> Неопределено Тогда
		ДатаУтратыПрава = ПараметрыЗаполнения.ДатаУтратыПрава;
	Иначе
		ДатаУтратыПрава = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	ГраницаДоходов = КонтрольПраваПримененияСпецрежима.ГраницаДоходовОграничивающаяПравоПримененияПСН();
	НачалоПериода  = НачалоГода(ДатаУтратыПрава);
	КонецПериода   = КонецДня(ДатаУтратыПрава);
	СуммаДоходаУСН = УчетУСН.СуммаДохода(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	СуммаДоходаПСН = СуммаДохода(ПараметрыОтчета.Организация, НачалоПериода, КонецПериода);
	
	ГраницаЧисленностиРаботников = КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент();
	СведенияОЧисленностиРаботников = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация,
		НачалоПериода, ДатаУтратыПрава);
	
	Если СуммаДоходаУСН + СуммаДоходаПСН > ГраницаДоходов Тогда
		ДанныеЗаполнения.Вставить("КодПричины", 1);
	ИначеЕсли СведенияОЧисленностиРаботников.ЧисленностьРаботников > ГраницаЧисленностиРаботников Тогда 
		ДанныеЗаполнения.Вставить("КодПричины", 2);
	КонецЕсли;
	
	ДанныеПатентов = ДанныеДействующихПатентов(
		ПараметрыОтчета.Организация,
		ДатаУтратыПрава);
		
	// Если среди патентов отсутствуют оформленные по месту жительства,
	// то заявление в любую ИФНС, в которой поставлен на учет по ПСН
	Если ДанныеПатентов.Количество() > 0 Тогда
		ПатентПоМестуРегистрации = ДанныеПатентов.Найти(Перечисления.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации,
														"ПостановкаНаУчетВНалоговомОргане");
		Если ПатентПоМестуРегистрации = Неопределено Тогда
			ДанныеЗаполнения.Вставить("НалоговыйОрган",    ДанныеПатентов[0].НалоговыйОрган);
			ДанныеЗаполнения.Вставить("НалоговыйОрганКод", ДанныеПатентов[0].НалоговыйОрганКод);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("ДанныеПатентов",  ДанныеПатентов);
	ДанныеЗаполнения.Вставить("ДатаУтратыПрава", ДатаУтратыПрава);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КоличествоПатентовНаЛистеЗаявленияОбУтрате()
	
	Возврат 17;
	
КонецФункции

Функция ДанныеДействующихПатентов(Организация, Дата)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Патенты.Ссылка КАК Ссылка,
	|	Патенты.ДатаНачала,
	|	Патенты.ДатаОкончания,
	|	Патенты.НомерПатента,
	|	Патенты.ДатаВыдачи,
	|	Патенты.ПостановкаНаУчетВНалоговомОргане,
	|	Патенты.НалоговыйОрган,
	|	Патенты.НалоговыйОрган.Код КАК НалоговыйОрганКод
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|ГДЕ
	|	Патенты.ДатаНачала <= &ДатаОкончания
	|	И Патенты.ДатаОкончания >= &ДатаНачала
	|	И Патенты.Владелец = &Владелец
	|	И НЕ Патенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СуммаДохода(Организация, ДатаНачала, ДатаОкончания)
	
	СуммаДохода = 0;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСНПатентЗаПериод(Организация, ДатаНачала, ДатаОкончания) Тогда
		Возврат СуммаДохода;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовПатентОбороты.Графа4Оборот КАК СуммаДохода
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовПатент.Обороты(&ДатаНачала, &ДатаОкончания, , Организация = &Организация) КАК КнигаУчетаДоходовПатентОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаДохода = Выборка.СуммаДохода;
	КонецЕсли;
	
	Возврат СуммаДохода;
	
КонецФункции

#КонецОбласти

#Область Антикризис

Процедура ЗаполнитьОсвобождениеОтНалога(ПатентОбъект)
	
	РасчетныйНалогПоПатенту = УчетПСНКлиентСервер.НалогПоПатенту(
		ПатентОбъект.ПотенциальноВозможныйГодовойДоход,
		ПатентОбъект.ДатаНачала,
		ПатентОбъект.ДатаОкончания);
	
	ТекущийНалогПоПатенту = ПатентОбъект.СуммаПервогоПлатежа + ПатентОбъект.СуммаВторогоПлатежа;
	
	Если РасчетныйНалогПоПатенту = ТекущийНалогПоПатенту Тогда
		
		// Простой случай - налог рассчитан автоматически и не редактировался.
		// Сумму освобождения от налога определяем по налоговой базе за период освобождения.
		
		СуммаОсвобожденияОтНалога = УчетПСНКлиентСервер.СуммаОсвобожденияОтНалога(
			ПатентОбъект.ПотенциальноВозможныйГодовойДоход,
			ПатентОбъект.ДатаНачала,
			ПатентОбъект.ДатаОкончания);
		
	Иначе
		
		// Случай сложнее - налог редактировался вручную.
		// Рассчитываем сумму освобождения "от суммы налога" пропорционально дням периода освобождения.
		
		СуммаОсвобожденияОтНалога = УчетПСНКлиентСервер.СуммаОсвобожденияОтНалогаПоСуммеНалога(
			ТекущийНалогПоПатенту,
			ПатентОбъект.ДатаНачала,
			ПатентОбъект.ДатаОкончания);
		
	КонецЕсли;
	
	ПатентОбъект.СуммаОсвобожденияОтНалога = СуммаОсвобожденияОтНалога;
	
	// Обновим платежи по патенту
	
	СуммаНалогаКУплате = ТекущийНалогПоПатенту - СуммаОсвобожденияОтНалога;
	
	РасчетПлатежей = УчетПСНКлиентСервер.РасчетПлатежейПоПатенту(
		СуммаНалогаКУплате,
		ПатентОбъект.ДатаНачала,
		ПатентОбъект.ДатаОкончания);
	
	ЗаполнитьЗначенияСвойств(ПатентОбъект, РасчетПлатежей);
	
КонецПроцедуры

Процедура ОчиститьОсвобождениеОтНалога(ПатентОбъект)
	
	НалогПоПатенту = ПатентОбъект.СуммаОсвобожденияОтНалога
		+ ПатентОбъект.СуммаПервогоПлатежа + ПатентОбъект.СуммаВторогоПлатежа;
	
	// Обнулим сумму освобождения от налога.
	
	ПатентОбъект.СуммаОсвобожденияОтНалога = 0;
	
	// Пересчитаем платежи от полной суммы налога без освобождения.
	
	РасчетПлатежей = УчетПСНКлиентСервер.РасчетПлатежейПоПатенту(
		НалогПоПатенту,
		ПатентОбъект.ДатаНачала,
		ПатентОбъект.ДатаОкончания);
	
	ЗаполнитьЗначенияСвойств(ПатентОбъект, РасчетПлатежей);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеУведомленияУменьшениеНалога

Функция НовыйСтруктураДанныхЗаполненияЛистА()
	
	ЛистА = Новый Структура;
	
	ЛистА.Вставить("МоделККТ",    "");
	ЛистА.Вставить("НомерККТ",    "");
	ЛистА.Вставить("РегНомерККТ", "");
	ЛистА.Вставить("ДатаРегККТ",  "");
	ЛистА.Вставить("СумРасхККТ",  "");
	
	Возврат ЛистА;
	
КонецФункции

Функция НовыйСтруктураДанныхЗаполненияЛистБ()
	
	ЛистБ = Новый Структура;
	
	ЛистБ.Вставить("Стр120", "");
	ЛистБ.Вставить("Стр130", '00010101');
	ЛистБ.Вставить("Стр140", 0);
	ЛистБ.Вставить("Стр150", '00010101');
	ЛистБ.Вставить("Стр160", 0);
	ЛистБ.Вставить("Стр170", '00010101');
	ЛистБ.Вставить("Стр180", 0);
	ЛистБ.Вставить("Стр190", '00010101');
	ЛистБ.Вставить("Стр200", 0);
	
	Возврат ЛистБ;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеУведомленияУменьшениеНалогаНаСтраховыеВзносы

Функция НовыеДанныеЛистаА_УведомлениеУменьшениеНалогаНаСтраховыеВзносы()
	
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("УИД");
	Данные.Колонки.Добавить("ДатаВыдПат");
	Данные.Колонки.Добавить("НомерПат");
	Данные.Колонки.Добавить("СумНалПатУм");
	
	Возврат Данные;
	
КонецФункции

Функция НовыеДанныеЛистаБ_УведомлениеУменьшениеНалогаНаСтраховыеВзносы()
	
	Данные = Новый Структура;
	
	Данные.Вставить("ОбщСумНалПатУм", 0);
	Данные.Вставить("ПрНП", "");
	Данные.Вставить("СумСтрВзнУмНал", 0);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

#КонецОбласти