#Область СлужебныйПрограммныйИнтерфейс

#Область Криптография

Функция РезультатПодобратьСертификатДляАбонента()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("ОтпечатокСертификата", "");
	Возврат Результат;
	
КонецФункции

Процедура ПодобратьСертификатДляАбонента(ОповещениеОбратногоВызова, Параметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Сертификат", Параметры.Сертификат);
	
	КонтекстЭДО = Параметры.КонтекстЭДО;
	СертификатАбонентаОтпечаток = Параметры.Сертификат;
	
	Результат = РезультатПодобратьСертификатДляАбонента();

	Если ПустаяСтрока(СертификатАбонентаОтпечаток) Тогда
		// Пытаемся использовать сертификат 1С-отчетности, но проверяем на поддержку ГОСТ-2012.
		Сертификаты = КонтекстЭДО.СертификатыУчетнойЗаписиПриОбменеЧерезОператора(Параметры.Организация);
		СертификатАбонентаОтпечаток = Сертификаты.ОтпечатокСертификатаРуководителя;
		Если НЕ ПустаяСтрока(СертификатАбонентаОтпечаток) Тогда
			Оповещение = Новый ОписаниеОповещения("ПодобратьСертификатДляАбонентаПослеПоискаСертификата", ЭтотОбъект, ДополнительныеПараметры);
			НайтиСертификатПоОтпечатку(Оповещение, СертификатАбонентаОтпечаток);
		Иначе
			// В учетной записи не указан сертификат. 
			Результат.Выполнено = Ложь;
			ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		КонецЕсли;
	Иначе
		// У абонента уже есть сертификат.
		Результат.Выполнено = Истина;
		Результат.ОтпечатокСертификата = СертификатАбонентаОтпечаток;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПодобратьСертификатДляАбонентаПослеПоискаСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Сертификат = РезультатПоиска.Сертификат;
	
	СертификатАбонентаОтпечаток = "";
	
	Если РезультатПоиска.СертификатНайден Тогда
		Свойства = ДокументооборотСМинобороныКлиент.ПолучитьСвойстваСертификата(Сертификат.Выгрузить());
		Если ДокументооборотСМинобороныКлиентСервер.АлгоритмСертификатаПоддерживатся(Свойства.АлгоритмПубличногоКлюча) Тогда
			СертификатАбонентаОтпечаток = ДокументооборотСМинобороныКлиентСервер.ДвоичныеДанныеВСтроку(Сертификат.Отпечаток);
		КонецЕсли;
	КонецЕсли;
	
	Результат = РезультатПодобратьСертификатДляАбонента();
	Результат.Выполнено = Истина;
	Результат.ОтпечатокСертификата = СертификатАбонентаОтпечаток;
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
	
КонецПроцедуры

Функция РезультатПолучитьСвойстваПрограммыМенеджераКриптографии()
	
	Результат = Новый Структура;
	Результат.Вставить("КриптоПровайдеры", Неопределено);
	Результат.Вставить("Свойства", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("КонфликтКриптопровайдеров", Ложь);
	
	Возврат Результат;
	
КонецФункции

// УниверсальныйКриптопровайдер - Булево - если Истина, то возвращается провайдер Microsoft Base Cryptographic Provider v1.0
Процедура ПолучитьСвойстваПрограммыМенеджераКриптографии(ОповещениеОбратногоВызова, Сертификат = Неопределено, УниверсальныйКриптопровайдер=Ложь) Экспорт
	
	Если Сертификат <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"ДокументооборотСМинобороныСлужебныйКлиент.ПолучитьСвойстваПрограммыМенеджераКриптографии", 
			"Сертификат",
			Сертификат, 
			Новый ОписаниеТипов("СертификатКриптографии"));
	КонецЕсли;
	
	Если УниверсальныйКриптопровайдер Тогда
		Результат = РезультатПолучитьСвойстваПрограммыМенеджераКриптографии();
		Результат.Свойства = КриптографияЭДКОКлиентСервер.КриптопровайдерMicrosoftBaseCryptographicProvider();
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСвойстваПрограммыМенеджераКриптографииПослеОпределенияУстановленныхКриптопровайдеров",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ОпределитьУстановленныеКрипторовайдеры(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьСвойстваПрограммыМенеджераКриптографииПослеОпределенияУстановленныхКриптопровайдеров(
	РезультатОпределенияКриптоПровайдеров,
	ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Сертификат = ДополнительныеПараметры.Сертификат;
	
	Результат = РезультатПолучитьСвойстваПрограммыМенеджераКриптографии();
	
	Если НЕ РезультатОпределенияКриптоПровайдеров.Выполнено Тогда
		Результат.ОписаниеОшибки = РезультатОпределенияКриптоПровайдеров.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	КонецЕсли;
	
	КриптоПровайдеры = РезультатОпределенияКриптоПровайдеров.УстановленныеКриптоПровайдеры;
	ДополнительныеПараметры.Вставить("КриптоПровайдеры", КриптоПровайдеры);
	
	Результат.КриптоПровайдеры = КриптоПровайдеры;
	
	КриптопровайдерПоУмолчанию = Неопределено;
	Если КриптоПровайдеры.Количество() = 0 Тогда
		// криптопровайдеры не найдены
		Результат.Свойства = Неопределено;
		Результат.ОписаниеОшибки = НСтр("ru='Не обнаружено установленных криптопровайдеров с поддержкой алгоритма подписи ГОСТ Р 34.10-2012.'");
		Результат.КонфликтКриптопровайдеров = Ложь;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	ИначеЕсли КриптоПровайдеры.Количество() >= 1 Тогда
		КриптопровайдерПоУмолчанию = КриптоПровайдеры[0];
		Результат.Свойства = КриптопровайдерПоУмолчанию;
		Если КриптоПровайдеры.Количество() > 1 Тогда
			Результат.КонфликтКриптопровайдеров = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Результат", Результат);
	ДополнительныеПараметры.Вставить("КриптопровайдерПоУмолчанию", КриптопровайдерПоУмолчанию);
	
	// пытаемся определить алгоритм сертификата
	КриптоПровайдерСертификата = Неопределено;
	Если Сертификат <> Неопределено Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСвойстваПрограммыМенеджераКриптографииПослеВыгрузкиСертификата",
			ЭтотОбъект,
			ДополнительныеПараметры);
			
		Сертификат.НачатьВыгрузку(Оповещение);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПолучитьСвойстваПрограммыМенеджераКриптографииПослеВыгрузкиСертификата(
	ДанныеСертификата,
	ДополнительныеПараметры) Экспорт
	
	Результат = ДополнительныеПараметры.Результат;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	Сертификат = ДополнительныеПараметры.Сертификат;
	КриптоПровайдеры = ДополнительныеПараметры.КриптоПровайдеры;
	КриптопровайдерПоУмолчанию = ДополнительныеПараметры.КриптопровайдерПоУмолчанию;
	
	КриптоПровайдерСертификата = ДокументооборотСМинобороныСлужебныйВызовСервера.ИзвлечьКриптопровайдер(ДанныеСертификата);
	АлгоритмСертификата = ДокументооборотСМинобороныСлужебныйВызовСервера.ПолучитьСвойстваСертификата(ДанныеСертификата).АлгоритмПубличногоКлюча;
	ПоддерживаемыеАлгоритмы = ДокументооборотСМинобороныКлиентСервер.ПоддерживаемыеАлгоритмы();
	АлгоритмСертификатаПоддерживается = ПоддерживаемыеАлгоритмы.Найти(АлгоритмСертификата) <> Неопределено;
	
	Если КриптоПровайдерСертификата <> Неопределено Тогда
		
		// в сертификате есть данные по криптопровайдеру
		Если АлгоритмСертификатаПоддерживается Тогда
			
			// в сертификате есть даннные по алгоритму
			КриптоПровайдерСертификатаНайденСредиУстановленных = Ложь;
			Для каждого КриптоПровайдер Из КриптоПровайдеры Цикл
				
				// ищем криптопровайдер сертификата среди установленных
				Если КриптоПровайдерСертификата.Представление = КриптоПровайдер.Представление Тогда

					Если КриптоПровайдерСертификата.Представление =
						ДокументооборотСМинобороныКлиентСервер.КриптопровайдерCryptoPro().Представление Тогда

						КриптоПровайдерСертификата = ДокументооборотСМинобороныКлиентСервер.КриптопровайдерCryptoPro(АлгоритмСертификата);
						КриптоПровайдерСертификатаНайденСредиУстановленных = Истина;
						Прервать;
						
					ИначеЕсли КриптоПровайдерСертификата.Представление =
						ДокументооборотСМинобороныКлиентСервер.КриптопровайдерViPNet().Представление Тогда

						КриптоПровайдерСертификата = ДокументооборотСМинобороныКлиентСервер.КриптопровайдерViPNet(АлгоритмСертификата);
						КриптоПровайдерСертификатаНайденСредиУстановленных = Истина;
						Прервать;

					КонецЕсли;

				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ КриптоПровайдерСертификатаНайденСредиУстановленных Тогда
				КриптоПровайдерСертификата = Неопределено;
			КонецЕсли;

		КонецЕсли;
	Иначе
		
		// криптопровайдер в сертификате не задан
		Если АлгоритмСертификатаПоддерживается Тогда
			
			// используем алгоритм для провайдера по умолчанию
			Если КриптопровайдерПоУмолчанию.Представление =
				ДокументооборотСМинобороныКлиентСервер.КриптопровайдерCryptoPro().Представление Тогда

				КриптоПровайдерСертификата = ДокументооборотСМинобороныКлиентСервер.КриптопровайдерCryptoPro(АлгоритмСертификата);
				
			ИначеЕсли КриптопровайдерПоУмолчанию.Представление =
				ДокументооборотСМинобороныКлиентСервер.КриптопровайдерViPNet().Представление Тогда

				КриптоПровайдерСертификата = ДокументооборотСМинобороныКлиентСервер.КриптопровайдерViPNet(АлгоритмСертификата);

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КриптоПровайдерСертификата <> Неопределено Тогда
		Результат.Свойства = КриптоПровайдерСертификата;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);

КонецПроцедуры

Процедура ВыбратьСертификат(ОповещениеОЗавершении, НачальноеЗначениеВыбора) Экспорт
	
	ПараметрыФормы = Новый Структура("НачальноеЗначениеВыбора",
									НачальноеЗначениеВыбора);
	
	Контекст = Новый Структура("ОповещениеОЗавершении", ОповещениеОЗавершении);
	Оповещение = Новый ОписаниеОповещения(
		"ВыбратьСертификатПослеВыбора", ЭтотОбъект, Контекст);
	
	ОткрытьФорму(
		"Обработка.ДокументооборотСКонтролирующимиОрганами.Форма.ВыборСертификатаДляМинобороны",
		ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ВыбратьСертификатПослеВыбора(Результат, ВходящийКонтекст) Экспорт
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("Выполнено", Ложь);
	РезультатВыбора.Вставить("ВыбранноеЗначение", Неопределено);
	
	Если Результат <> Неопределено Тогда
		РезультатВыбора.Выполнено = Истина;
		РезультатВыбора.ВыбранноеЗначение = Результат;
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьПредставленияСертификатов(
		ПараметрыОтображенияСертификатов,
		Форма,
		ЭтоЭлектроннаяПодписьВМоделиСервиса,
		ВыполняемоеОповещение = Неопределено) Экспорт
		
	ПараметрыОтображенияСертификата = ПараметрыОтображенияСертификатов[0];
	
	ПолеВвода							 = ПараметрыОтображенияСертификата.ПолеВвода;
	Сертификат							 = ПараметрыОтображенияСертификата.Сертификат;
	ИмяРеквизитаПредставлениеСертификата = ПараметрыОтображенияСертификата.ИмяРеквизитаПредставлениеСертификата;
		
	ОтобразитьПредставлениеСертификата(ПолеВвода, Сертификат, Форма, ИмяРеквизитаПредставлениеСертификата, ВыполняемоеОповещение);	
	
КонецПроцедуры

Функция ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию()
	
	ТекстПодсказки = НСтр("ru='Для подписания пакета можно использовать любой действующий квалифицированный сертификат с алгоритмом подписи ГОСТ Р 34.10-2012'");
	Возврат Новый Структура(
		"Текст, Режим, Цвет",
		ТекстПодсказки,
		ОтображениеПодсказки.Кнопка,
		Новый Цвет);

КонецФункции

Процедура ОтобразитьПредставлениеСертификата(
		ПолеВвода,
		Сертификат,
		Форма,
		ИмяРеквизитаПредставлениеСертификата,
		ВыполняемоеОповещение) Экспорт
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПолеВвода",									ПолеВвода);
	ДополнительныеПараметры.Вставить("Форма", 										Форма);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаПредставлениеСертификата", 		ИмяРеквизитаПредставлениеСертификата);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", 						ВыполняемоеОповещение);
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = "";
		ПолеВвода.ПодсказкаВвода = НСтр("ru = 'Выберите сертификат'");
		
		ПараметрыПодсказки = ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию();
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр(СтрШаблон("ru = '%1'", ПараметрыПодсказки.Текст)),,
			ПараметрыПодсказки.Цвет);
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ПараметрыПодсказки.Режим;

		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ДополнительныеПараметры);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// возможные варианты параметра Сертификат на входе: строка, структура, соответствие
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	Если ТипЗнчСертификат <> Тип("Строка") И ТипЗнчСертификат <> Тип("Структура")
		И ТипЗнчСертификат <> Тип("Соответствие") И Сертификат.Количество() = 1 Тогда
		Сертификат = Сертификат[0].Сертификат;
		ТипЗнчСертификат = Тип("Строка");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);

	Если ТипЗнчСертификат = Тип("Строка") ИЛИ ТипЗнчСертификат = Тип("Структура") ИЛИ ТипЗнчСертификат = Тип("Соответствие") Тогда
		ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВвода(ДополнительныеПараметры)
	
	Сертификат 									= ДополнительныеПараметры.Сертификат;
	
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	
	Если ТипЗнчСертификат <> Тип("Структура") И ТипЗнчСертификат <> Тип("Соответствие") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата", 
			ЭтотОбъект, 
			ДополнительныеПараметры);
		
		ПараметрыСертификата = Новый Структура();
		ПараметрыСертификата.Вставить("Отпечаток", 								Сертификат);
		
		НайтиСертификат(ОписаниеОповещения, ПараметрыСертификата);
		
	Иначе
		
		СвойстваСертифката = Сертификат;
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(СвойстваСертифката, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПолученияСвойствСертификата(Результат, ВходящиеПараметры) Экспорт
	
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	Сертификат 								= ВходящиеПараметры.Сертификат;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	
	Если Результат.СертификатНайден Тогда
				
		ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Результат.Сертификат, ВходящиеПараметры);
		
	Иначе
		
		ПолеВвода.ЦветТекста 						= Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = Сертификат;
		ПолеВвода.РасширеннаяПодсказка.Заголовок	= Новый ФорматированнаяСтрока(
			НСтр("ru = 'Сертификат не зарегистрирован в системном хранилище сертификатов'"),,
			Новый Цвет(255, 0, 0));
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПоСвойствамСертификата(Знач СвойстваСертифката, ВходящиеПараметры)
	
	ВходящиеПараметры.Вставить("СвойстваСертифката", СвойстваСертифката);
	
	Оповещение = Новый ОписаниеОповещения(
		"ОтобразитьОдинСертификатВПолеВводаПослеПолученияДвоичныхДанныхСертификата",
		ЭтотОбъект,
		ВходящиеПараметры);
		
	СвойстваСертифката.НачатьВыгрузку(Оповещение)
	
КонецПроцедуры

Процедура ОтобразитьОдинСертификатВПолеВводаПослеПолученияДвоичныхДанныхСертификата(ВыгруженныеДанные, ВходящиеПараметры) Экспорт
	
	ИмяРеквизитаПредставлениеСертификата 	= ВходящиеПараметры.ИмяРеквизитаПредставлениеСертификата;
	ПолеВвода 								= ВходящиеПараметры.ПолеВвода;
	Форма 									= ВходящиеПараметры.Форма;
	ВыполняемоеОповещение					= ВходящиеПараметры.ВыполняемоеОповещение;
	СвойстваСертифката 						= ВходящиеПараметры.СвойстваСертифката;
	
	ПредставлениеСертификата = ПолноеПредставлениеСертификата(СвойстваСертифката);
	
	ДополнительныеСвойстваСертификата = ДокументооборотСМинобороныКлиент.ПолучитьСвойстваСертификата(ВыгруженныеДанные);
	
	ТекДата = ДокументооборотСМинобороныВызовСервера.ТекущаяДатаНаСервере();
	Если ТекДата > СвойстваСертифката.ДатаОкончания Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата истек'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	ИначеЕсли ТекДата < СвойстваСертифката.ДатаНачала Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Срок действия сертификата еще не наступил'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	ИначеЕсли НЕ ДокументооборотСМинобороныКлиентСервер.АлгоритмСертификатаПоддерживатся(ДополнительныеСвойстваСертификата.АлгоритмПубличногоКлюча) Тогда
		
		ПолеВвода.ЦветТекста = Новый Цвет(255, 0, 0);
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Алгоритм подписи сертификата не соответствует требованиям МО РФ, требуется сертификат с алгоритмом подписи ГОСТ Р 34.10-2012'"),,
			Новый Цвет(255, 0, 0));
		
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		
	Иначе
		
		ПолеВвода.ЦветТекста = Новый Цвет;
		Форма[ИмяРеквизитаПредставлениеСертификата] = ПредставлениеСертификата;
		
		ПараметрыПодсказки = ТекстРежимЦветПодсказкиПоСертификатуПоУмолчанию();
		Подсказка = Новый ФорматированнаяСтрока(
			НСтр(СтрШаблон("ru = '%1'", ПараметрыПодсказки.Текст)),,
			ПараметрыПодсказки.Цвет);
		ПолеВвода.РасширеннаяПодсказка.Заголовок = Подсказка;
		ПолеВвода.ОтображениеПодсказки = ПараметрыПодсказки.Режим;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыполняемоеОповещение) = Тип("ОписаниеОповещения") Тогда
		ВыполнитьОбработкуОповещения(ВыполняемоеОповещение, ВходящиеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПолучитьСертификаты()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Сертификаты", Новый Массив);
	Результат.Вставить("ДополнительныеСвойстваСертификатов", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьСертификаты(ОписаниеОповещения, Параметры) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ДополнительныеПараметры.Вставить("ДополнительныеСвойстваСертификатов", Новый Соответствие);
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияСвойствПрограммыДляМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);

	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещенияПродолжения,, Истина);

КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияСвойствПрограммыДляМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		ДокументооборотСМинобороныКлиентСервер.ВывестиОшибку(
			НСтр(СтрШаблон("ru = 'Ошибка получения сертификатов по причине: %1'", РезультатПолученияСвойств.ОписаниеОшибки)));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПродолжения = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СоздатьМенеджерКриптографии(ОписаниеОповещенияПродолжения,
		РезультатПолученияСвойств.Свойства);
		
КонецПроцедуры

Процедура ПолучитьСертификатыПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ТипХранилища = ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты;
	РасположениеХранилища = РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС;
		
	Если НЕ Результат.Выполнено Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		ДокументооборотСМинобороныКлиентСервер.ВывестиОшибку(
			НСтр("ru = 'Ошибка создания менеджера криптографии при получении списка сертификатов.'"));
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", Результат.МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьСертификатыПослеПолученияХранилищаСертификатов",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ДополнительныеПараметры.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилища, РасположениеХранилища);

КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияХранилищаСертификатов(Хранилище, ДополнительныеПараметры) Экспорт

	Оповещение = Новый ОписаниеОповещения(
		"ПолучитьСертификатыПослеПолученияВсехСертификатовИзХранилищаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Хранилище.НачатьПолучениеВсех(Оповещение);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияВсехСертификатовИзХранилищаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Вставить("Сертификаты", Результат);
	ДополнительныеПараметры.Вставить("ИндексСертификата", 0);
	
	ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИндексСертификата = ДополнительныеПараметры.ИндексСертификата;
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОписаниеОповещения;
	ДополнительныеСвойстваСертификатов =ДополнительныеПараметры.ДополнительныеСвойстваСертификатов;
	
	Если ИндексСертификата = Сертификаты.Количество() Тогда
		РезультатВыполнения = РезультатПолучитьСертификаты();
		РезультатВыполнения.Выполнено = Истина;
		РезультатВыполнения.Сертификаты = Сертификаты;
		РезультатВыполнения.ДополнительныеСвойстваСертификатов = ДополнительныеСвойстваСертификатов;
		
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, РезультатВыполнения);
	Иначе
		ДополнительныеПараметры.ИндексСертификата = ИндексСертификата;
		Оповещение = Новый ОписаниеОповещения(
			"ПолучитьСертификатыПослеПолученияДвоичныхДанныхСертификатаЦикл",
			ЭтотОбъект,
			ДополнительныеПараметры);
		Сертификат = Сертификаты[ИндексСертификата];
		Сертификат.НачатьВыгрузку(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСертификатыПослеПолученияДвоичныхДанныхСертификатаЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	ИндексСертификата = ДополнительныеПараметры.ИндексСертификата;
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	
	ДополнительныеСвойства = ДокументооборотСМинобороныСлужебныйВызовСервера.ПолучитьСвойстваСертификата(Результат);
	ДополнительныеПараметры.ДополнительныеСвойстваСертификатов.Вставить(
		Сертификаты[ИндексСертификата].Отпечаток,
		ДополнительныеСвойства);
	
	ИндексСертификата = ИндексСертификата + 1;
	ДополнительныеПараметры.ИндексСертификата = ИндексСертификата;
	ПолучитьСертификатыПолучениеДополнительныхСвойствЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура НайтиСертификат(ОписаниеОповещения, ПараметрыСертификата)
	
	НайтиСертификатПоОтпечатку(ОписаниеОповещения, ПараметрыСертификата.Отпечаток);
	
КонецПроцедуры

Функция НаименованиеСертификата(СертификатКриптографии) Экспорт
	
	Если СертификатКриптографии.Субъект.Свойство("CN") Тогда
		Наименование = СертификатКриптографии.Субъект.CN;
	ИначеЕсли СертификатКриптографии.Субъект.Свойство("O") Тогда
		Наименование = СертификатКриптографии.Субъект.O;
	ИначеЕсли СертификатКриптографии.Субъект.Свойство("E") Тогда 
		Наименование = СертификатКриптографии.Субъект.E;
	Иначе
		Наименование = "Сертификат";
	КонецЕсли; 
	
	Возврат Наименование;
	
КонецФункции

Функция ПолноеПредставлениеСертификата(Сертификат)
	
	СертификатДействителенС = Сертификат.ДатаНачала;
	СертификатДействителенПо = Сертификат.ДатаОкончания;
	
	Если ТипЗнч(СертификатДействителенС) = Тип("Строка") Тогда 
		СертификатДействителенС = СтрЗаменить(СертификатДействителенС, Символ(10), "");
	КонецЕсли;
		
	Если ТипЗнч(СертификатДействителенПо) = Тип("Строка") Тогда 
		СертификатДействителенПо = СтрЗаменить(СертификатДействителенПо, Символ(10), "");
	КонецЕсли;
	
	Наименование = НаименованиеСертификата(Сертификат);
	Возврат СокрЛП(Наименование) + " (" + СертификатДействителенС + " - " + СертификатДействителенПо + ")";
	
КонецФункции

Процедура ПоказатьСертификат(Сертификат, ФормаВладелец = Неопределено) Экспорт
		
	Контекст = Новый Структура("ФормаВладелец", ФормаВладелец);
	Оповещение = Новый ОписаниеОповещения(
		"ПоказатьСертификатПослеПоиска", ЭтотОбъект, Контекст);
	ДокументооборотСМинобороныКлиент.НайтиСертификатПоОтпечатку(Оповещение, Сертификат.Отпечаток);
		
КонецПроцедуры

Процедура ПоказатьСертификатПослеПоиска(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.СертификатНайден Тогда
		ОписаниеСертификата = ДокументооборотСМинобороныКлиент.СертификатКриптографииВСтуктуру(Результат.Сертификат);
		ПоказатьСертификатПослеВыбораСертификата(
			Новый Структура("Значение", ОписаниеСертификата), ВходящийКонтекст);
	Иначе
		ПоказатьПредупреждение(, ОписаниеОшибкиНеУдалосьОткрытьСертификат());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСертификатПослеВыбораСертификата(ВыбранныйЭлемент, ВходящийКонтекст) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Если ТипЗнч(ВходящийКонтекст.ФормаВладелец) = Тип("ФормаКлиентскогоПриложения")
			И ВходящийКонтекст.ФормаВладелец.Открыта() Тогда
			ФормаВладелец = ВходящийКонтекст.ФормаВладелец;
		Иначе
			ФормаВладелец = Неопределено;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Сертификат", ВыбранныйЭлемент.Значение);
		ОткрытьФорму(
			"ОбщаяФорма.ПросмотрСертификатаПлатформы", ПараметрыФормы,
			ФормаВладелец,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
		
КонецПроцедуры

Функция ОписаниеОшибкиНеУдалосьОткрытьСертификат()

	Возврат НСтр("ru = 'Не удалось открыть сертификат.'");
	
КонецФункции

Функция СертификатКриптографииВСтуктуру(СертификатКриптографии) Экспорт
	
	ОписаниеСертификата = Новый Структура;
	ОписаниеСертификата.Вставить("Версия");
	ОписаниеСертификата.Вставить("ДатаНачала");
	ОписаниеСертификата.Вставить("ДатаОкончания");
	ОписаниеСертификата.Вставить("Издатель");
	ОписаниеСертификата.Вставить("ИспользоватьДляПодписи");
	ОписаниеСертификата.Вставить("ИспользоватьДляШифрования");
	ОписаниеСертификата.Вставить("ОткрытыйКлюч");
	ОписаниеСертификата.Вставить("Отпечаток");
	ОписаниеСертификата.Вставить("РасширенныеСвойства");
	ОписаниеСертификата.Вставить("СерийныйНомер");
	ОписаниеСертификата.Вставить("Субъект");
	
	ОписаниеСертификата.Вставить("Наименование", НаименованиеСертификата(СертификатКриптографии));
	
	ЗаполнитьЗначенияСвойств(ОписаниеСертификата, СертификатКриптографии);
	
	Возврат ОписаниеСертификата;
	
КонецФункции

Функция РезультатОпределитьУстановленныеКрипторовайдеры()
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("УстановленныеКриптопровайдеры", Новый Массив);
	Результат.Вставить("ПоддерживаетсяГОСТ2012", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Возврат Результат;
	
КонецФункции

Процедура ОпределитьУстановленныеКрипторовайдеры(ОповещениеОбратногоВызова, ОпределятьГОСТ2001 = Ложь) Экспорт
	
	АлгоритмПоУмолчанию = ДокументооборотСМинобороныКлиентСервер.АлгоритмПоУмолчанию();
	АлгоритмГОСТ2001 = ДокументооборотСМинобороныКлиентСервер.АлгоритмГОСТ2001();
	
	Криптопровайдеры = Новый Массив;
	Криптопровайдеры.Добавить(ДокументооборотСМинобороныКлиентСервер.КриптопровайдерCryptoPro(АлгоритмПоУмолчанию));
	Криптопровайдеры.Добавить(ДокументооборотСМинобороныКлиентСервер.КриптопровайдерViPNet(АлгоритмПоУмолчанию));
	Если ОпределятьГОСТ2001 Тогда
		Криптопровайдеры.Добавить(ДокументооборотСМинобороныКлиентСервер.КриптопровайдерCryptoPro(АлгоритмГОСТ2001));
		Криптопровайдеры.Добавить(ДокументооборотСМинобороныКлиентСервер.КриптопровайдерViPNet(АлгоритмГОСТ2001));
	КонецЕсли;
	
	ТекущийКриптопровайдер = 0;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КриптоПровайдеры", Криптопровайдеры);
	ДополнительныеПараметры.Вставить("ТекущийКриптопровайдер", ТекущийКриптопровайдер);
	ДополнительныеПараметры.Вставить("УстановленныеКриптопровайдеры", Новый Массив);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ПоддерживаетсяГОСТ2012", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСозданияМенеджераКриптографииЦикл", ЭтотОбъект, ДополнительныеПараметры);
	СоздатьМенеджерКриптографии(Оповещение, Криптопровайдеры[ТекущийКриптопровайдер]);
	
КонецПроцедуры

Процедура ПослеСозданияМенеджераКриптографииЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	УстановленныеКриптопровайдеры = ДополнительныеПараметры.УстановленныеКриптопровайдеры;
	ТекущийКриптопровайдер = ДополнительныеПараметры.ТекущийКриптопровайдер;
	КриптоПровайдеры = ДополнительныеПараметры.КриптоПровайдеры;
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если Результат.Выполнено Тогда
		// Могут создаваться криптопровайдеры с другим именем, например, вместо Криптопро создается Vipnet.
		АлгоритмГОСТ2012 = ДокументооборотСМинобороныКлиентСервер.АлгоритмГОСТ2012();
		Если Результат.ИмяМодуля = КриптоПровайдеры[ТекущийКриптопровайдер].Имя Тогда
			КриптоПровайдер = КриптоПровайдеры[ТекущийКриптопровайдер];
			УстановленныеКриптопровайдеры.Добавить(КриптоПровайдер);
			Если КриптоПровайдер.Алгоритм = АлгоритмГОСТ2012 Тогда
				ДополнительныеПараметры.ПоддерживаетсяГОСТ2012 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КриптоПровайдеры.Количество() - 1 = ТекущийКриптопровайдер Тогда
		// Проверили все криптопровайдеры.
		Результат = РезультатОпределитьУстановленныеКрипторовайдеры();
		Результат.УстановленныеКриптопровайдеры = УстановленныеКриптопровайдеры;
		Результат.Выполнено = Истина;
		Результат.ПоддерживаетсяГОСТ2012 = ДополнительныеПараметры.ПоддерживаетсяГОСТ2012;
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Результат);
		Возврат;
	Иначе
		// Проверяем следующий криптопровайдер из массива.
		ТекущийКриптопровайдер  = ТекущийКриптопровайдер + 1; 
		ДополнительныеПараметры.ТекущийКриптопровайдер = ТекущийКриптопровайдер;
		Оповещение = Новый ОписаниеОповещения("ПослеСозданияМенеджераКриптографииЦикл", ЭтотОбъект, ДополнительныеПараметры);
		СоздатьМенеджерКриптографии(Оповещение, Криптопровайдеры[ТекущийКриптопровайдер]);
	КонецЕсли; 
	
КонецПроцедуры

Функция РезультатСоздатьМенеджерКриптографии()
	
	Результат = Новый Структура;
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ИмяМодуля", "");
	Результат.Вставить("АлгоритмыПодписи", Неопределено);

	Возврат Результат;
	
КонецФункции

// Создает и возвращает менеджер криптографии (на клиенте) для указанной программы.
//
// Параметры:
//  Оповещение - ОписаниеОповещения - описание оповещения для возврата из процедуры
//  СвойстваПрограммы - ФиксированнаяСтруктура - структура со свойствами программы менеджера криптографии
//  Алгоритмы - Структура - структура со свойствами:
//      * АлгоритмПодписи - Строка - алгоритм подписи
//      * АлгоритмХеширования - Строка - алгоритм подписи
//      * АлгоритмШифрования - Строка - алгоритм подписи
Процедура СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммы, Алгоритмы = Неопределено) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеВозвратаМенеджерКриптографии",     Оповещение);
	Контекст.Вставить("СвойстваПрограммы", СвойстваПрограммы);
	Контекст.Вставить("БылаПопыткаУстановкиРасширения", Ложь);
	Контекст.Вставить("Алгоритмы", Алгоритмы);
		
	НачатьПодключениеРасширенияРаботыСКриптографией(
		Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией",
			ЭтотОбъект,
			Контекст));
	
КонецПроцедуры

// продолжение процедуры СоздатьМенеджерКриптографии
Процедура СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией(Подключено, Контекст) Экспорт
	
	СвойстваПрограммы = Контекст.СвойстваПрограммы;
	
	Если НЕ Подключено Тогда
		Если Контекст.БылаПопыткаУстановкиРасширения Тогда
			РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
		Иначе
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"СоздатьМенеджерКриптографииПослеУстановкиРасширенияРаботыСКриптографией",
				ЭтотОбъект,
				Контекст
			);
			НачатьУстановкуРасширенияРаботыСКриптографией(ОписаниеОповещения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	Контекст.МенеджерКриптографии = Новый МенеджерКриптографии;
	
	Контекст.МенеджерКриптографии.НачатьИнициализацию(Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииЦиклПослеИнициализацииЗавершение", 
			ЭтотОбъект, 
			Контекст,
			"СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации", 
			ЭтотОбъект),
		СвойстваПрограммы.Имя,
		СвойстваПрограммы.Путь,
		СвойстваПрограммы.Тип);
	
КонецПроцедуры

// продолжение процедуры СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией
Процедура СоздатьМенеджерКриптографииПослеУстановкиРасширенияРаботыСКриптографией(Контекст) Экспорт

	Контекст.БылаПопыткаУстановкиРасширения = Истина;
	// пытаемся ещё раз подключить расширение
	НачатьПодключениеРасширенияРаботыСКриптографией(
		Новый ОписаниеОповещения(
			"СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией",
			ЭтотОбъект,
			Контекст));

КонецПроцедуры
 
// Продолжение процедуры СоздатьМенеджерКриптографииПослеПодключенияРасширенияРаботыСКриптографией, ошибка.
Процедура СоздатьМенеджерКриптографииЦиклПриОшибкеИнициализации(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
	РезультатВыполнения.ИнформацияОбОшибке = ИнформацияОбОшибке;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
	
КонецПроцедуры

// Продолжение процедуры СоздатьМенеджерКриптографии.
Процедура СоздатьМенеджерКриптографииЦиклПослеИнициализацииЗавершение(Результат, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения(
		"СоздатьМенеджерКриптографииПослеПолученияИнформацииОМодуле",
		ЭтотОбъект,
		Контекст);
		
	Контекст.МенеджерКриптографии.НачатьПолучениеИнформацииМодуляКриптографии(Оповещение);
	
КонецПроцедуры

Процедура СоздатьМенеджерКриптографииПослеПолученияИнформацииОМодуле(ИнформацияМодуля, Контекст) Экспорт
	
	Алгоритмы = Контекст.Алгоритмы;
	МенеджерКриптографии = Контекст.МенеджерКриптографии;
	
	Если Алгоритмы <> Неопределено Тогда
		// переопределяем алгоритмы
		МенеджерКриптографии.АлгоритмПодписи = Алгоритмы.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования  = Алгоритмы.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования = Алгоритмы.АлгоритмШифрования;
	КонецЕсли;
	
	РезультатВыполнения = РезультатСоздатьМенеджерКриптографии();
	РезультатВыполнения.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	РезультатВыполнения.Выполнено = Истина;
	РезультатВыполнения.ИмяМодуля = ИнформацияМодуля.Имя;
	РезультатВыполнения.АлгоритмыПодписи = ИнформацияМодуля.АлгоритмыПодписи;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеВозвратаМенеджерКриптографии, РезультатВыполнения);
	
КонецПроцедуры

Функция РезультатПоискаСертификата()
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("Сертификат", Неопределено);
	РезультатПоиска.Вставить("СертификатНайден", Ложь);
	РезультатПоиска.Вставить("МенеджерКриптографии", Неопределено);
	
	Возврат РезультатПоиска;
	
КонецФункции

Процедура НайтиСертификатПоОтпечатку(ОписаниеОповещениеВозврата, Отпечаток, МенеджерКриптографии = Неопределено, ТипХранилища = Неопределено) Экспорт
	
	НайтиСертификатПоИдентификатору(ОписаниеОповещениеВозврата, Отпечаток, "ПоОтпечатку", МенеджерКриптографии, ТипХранилища);
	
КонецПроцедуры

Процедура НайтиСертификатПоСерийномуНомеру(ОписаниеОповещениеВозврата, СерийныйНомер, МенеджерКриптографии = Неопределено, ТипХранилища = Неопределено) Экспорт
	
	НайтиСертификатПоИдентификатору(ОписаниеОповещениеВозврата, СерийныйНомер, "ПоСерийномуНомеру", МенеджерКриптографии, ТипХранилища);
	
КонецПроцедуры

Процедура НайтиСертификатПоИдентификатору(ОписаниеОповещениеВозврата, Идентификатор, ВидПоиска = "ПоОтпечатку", МенеджерКриптографии = Неопределено, ТипХранилища = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСМинобороныСлужебныйКлиент.ПолучитьСвойстваПрограммыМенеджераКриптографии", 
		"Идентификатор",
		Идентификатор, 
		Новый ОписаниеТипов("Строка, ДвоичныеДанные"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОписаниеОповещения", ОписаниеОповещениеВозврата);
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	Контекст.Вставить("ТипХранилища", ТипХранилища);
	Контекст.Вставить("ВидПоиска", ВидПоиска);
	
	Если ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		Контекст.Вставить("Идентификатор", ДокументооборотСМинобороныКлиентСервер.СтрокаОтпечаткаВДвоичныеДанные(Идентификатор));
	Иначе 
		Контекст.Вставить("Идентификатор", Идентификатор);
	КонецЕсли;
	
	Если МенеджерКриптографии = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеПолученияСвойствМенеджераКриптографии",
			ЭтотОбъект,
			Контекст);
		ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения,, Истина);
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеСозданияМенеджераКриптографии",
			ЭтотОбъект,
			Контекст);
		Результат = Новый Структура;
		Результат.Вставить("Выполнено", Истина);
		Результат.Вставить("МенеджерКриптографии", МенеджерКриптографии);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПолученияСвойствМенеджераКриптографии(Результат, Контекст) Экспорт
	
	Если Результат.Свойства = Неопределено Тогда
		ДокументооборотСМинобороныКлиентСервер.ВывестиОшибку(НСтр(СтрШаблон("ru='Сертификат криптографии не найден по причине: %1'", Результат.ОписаниеОшибки), "ru"));
		РезультатПоиска = РезультатПоискаСертификата();
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещения, РезультатПоиска);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоискСертификатаПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		Контекст);
	
	СвойстваПрограммы = Результат.Свойства;
	СоздатьМенеджерКриптографии(ОписаниеОповещения, СвойстваПрограммы);
	
КонецПроцедуры

Процедура ПоискСертификатаПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	ТипХранилища = Контекст.ТипХранилища;

	РасположениеХранилища = РасположениеХранилищаСертификатовКриптографии.ДанныеПользователяОС;
	
	Если НЕ Результат.Выполнено Тогда
		ДокументооборотСМинобороныКлиентСервер.ВывестиОшибку(НСтр("ru = 'Ошибка создания менеджера криптографии!'"));
		
		РезультатПоиска = РезультатПоискаСертификата();
		ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещения, РезультатПоиска);
		Возврат;
	КонецЕсли; 
	
	Контекст.МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	Оповещение = Новый ОписаниеОповещения("ПоискСертификатаПослеПолученияХранилищаСертификатов", ЭтотОбъект, Контекст);
	Контекст.МенеджерКриптографии.НачатьПолучениеХранилищаСертификатов(Оповещение, ТипХранилища, РасположениеХранилища);
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПолученияХранилищаСертификатов(Хранилище, Контекст) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПоискСертификатаПослеПоискаЗавершение", ЭтотОбъект, Контекст);
	Если Контекст.ВидПоиска = "ПоОтпечатку" Тогда
		Хранилище.НачатьПоискПоОтпечатку(Оповещение, Контекст.Идентификатор);
	ИначеЕсли Контекст.ВидПоиска = "ПоСерийномуНомеру" Тогда
		Хранилище.НачатьПоискПоСерийномуНомеру(Оповещение, Контекст.Идентификатор);
	Иначе
		ВызватьИсключение "Неизвестный вид поиска сертификата.";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискСертификатаПослеПоискаЗавершение(Сертификат, Контекст) Экспорт 
	
	РезультатПоиска = РезультатПоискаСертификата();
	РезультатПоиска.Сертификат = Сертификат;
	РезультатПоиска.СертификатНайден = Сертификат <> Неопределено;
	РезультатПоиска.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(Контекст.ОписаниеОповещения, РезультатПоиска);
	
КонецПроцедуры

Функция РезультатПроверитьСертификат()
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Выполнено", Ложь);
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	РезультатПроверки.Вставить("Валиден", Неопределено);
	
	Возврат РезультатПроверки;
		
КонецФункции

Процедура ПроверитьСертификат(ОповещениеОЗавершении, СертификатИлиОтпечаток, Проверки, ВыводитьСообщения) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("Проверки", Проверки);
	ДополнительныеПараметры.Вставить("ВыводитьСообщения", ВыводитьСообщения);
	ДополнительныеПараметры.Вставить("СертификатИлиОтпечаток", СертификатИлиОтпечаток);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьСертификатПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, ДополнительныеПараметры) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.Выполнено = Ложь;
		РезультатПроверки.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		РезультатПроверки.Валиден = Неопределено;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СвойстваПрограммы = РезультатПолученияСвойств.Свойства;
	ДокументооборотСМинобороныКлиент.СоздатьМенеджерКриптографии(ОписаниеОповещения, СвойстваПрограммы);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеСозданияМенеджераКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатИлиОтпечаток = ДополнительныеПараметры.СертификатИлиОтпечаток;
	
	Если НЕ Результат.Выполнено Тогда
		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.Выполнено = Ложь;
		РезультатПроверки.ОписаниеОшибки = "Менеджер криптографии не создан!";
		РезультатПроверки.Валиден = Ложь;
		ВыполнитьОбработкуОповещения(Оповещение, Результат);
		Возврат;
	КонецЕсли; 
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	ДополнительныеПараметры.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПоискаСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	Если ТипЗнч(СертификатИлиОтпечаток) = Тип("СертификатКриптографии") Тогда
		Результат = Новый Структура;
		Результат.Вставить("СертификатНайден", Истина);
		Результат.Вставить("Сертификат", СертификатИлиОтпечаток);
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
	Иначе
		НайтиСертификатПоОтпечатку(ОписаниеОповещения, СертификатИлиОтпечаток, МенеджерКриптографии);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПоискаСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
		
	МенеджерКриптографии = ДополнительныеПараметры.МенеджерКриптографии;
		
	Если НЕ РезультатПоиска.СертификатНайден Тогда
		РезультатПроверки = РезультатПроверитьСертификат();
		РезультатПроверки.Выполнено = Ложь;
		РезультатПроверки.ОписаниеОшибки = "Сертификат не найден.";
		РезультатПроверки.Валиден = Ложь;
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
		Возврат;
	КонецЕсли;
	
	РежимПроверки = Новый Массив;
	РежимПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
	РежимПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
	
	Сертификат = РезультатПоиска.Сертификат;
	ДополнительныеПараметры.Вставить("Сертификат", Сертификат);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьСертификатПослеПроверкиСертификатаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры,
		"ПроверитьСертификатПослеПроверкиСертификатаОшибка",
		ЭтотОбъект);
	МенеджерКриптографии.НачатьПроверкуСертификата(ОписаниеОповещения, Сертификат, РежимПроверки);
	
КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверкиСертификатаЗавершение(ДополнительныеПараметры) Экспорт
	
	РезультатПроверки = РезультатПроверитьСертификат();
	РезультатПроверки.Выполнено = Истина;
	РезультатПроверки.ОписаниеОшибки = "";
	РезультатПроверки.Валиден = Истина;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);

КонецПроцедуры

Процедура ПроверитьСертификатПослеПроверкиСертификатаОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	ВыводитьСообщения = ДополнительныеПараметры.ВыводитьСообщения;
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	
	РезультатПроверки = РезультатПроверитьСертификат();
	РезультатПроверки.Выполнено = Ложь; 
	РезультатПроверки.ОписаниеОшибки = ОписаниеОшибки;
	РезультатПроверки.Валиден = Ложь;
	
	Если ВыводитьСообщения Тогда
		ДокументооборотСМинобороныКлиентСервер.ВывестиОшибку(ОписаниеОшибки);
	КонецЕсли;
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, РезультатПроверки);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайл(ОповещениеОЗавершении, Сертификат, ИмяФайлаИлиРасширение, 
										ВыводитьСоообщения) Экспорт
		
	ДополнительныеПараметры = Новый Структура("ИмяФайлаИлиРасширение,
											   |ВыводитьСоообщения,
											   |ОписаниеОповещения", 
											   ИмяФайлаИлиРасширение,
											   ВыводитьСоообщения,
											   ОповещениеОЗавершении);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкспортироватьСертификатВФайлПослеПоискаСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ДокументооборотСМинобороныКлиент.НайтиСертификатПоОтпечатку(ОписаниеОповещения, Сертификат);
		
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПоискаСертификата(РезультатПоиска, ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	
	Если НЕ РезультатПоиска.СертификатНайден Тогда
		Если ВыводитьСоообщения Тогда
			ДокументооборотСМинобороныКлиентСервер.ВывестиОшибку(НСтр("ru = 'Сертификат не найден!'"));
		КонецЕсли; 
		РезультатЭкспорта = Новый Структура;
		РезультатЭкспорта.Вставить("Выполнено", Ложь);
		РезультатЭкспорта.Вставить("ИмяФайлаСертификата", "");
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатЭкспорта);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СертификатКриптографии", РезультатПоиска.Сертификат);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеПолученияВременногоКаталога",
		ЭтотОбъект,
		ДополнительныеПараметры);
	НачатьПолучениеКаталогаВременныхФайлов(Оповещение);
	
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеПолученияВременногоКаталога(ИмяКаталогаВременныхФайлов, ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	
	ДополнительныеПараметры.Вставить("ИмяКаталогаВременныхФайлов", ИмяКаталогаВременныхФайлов);
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеВыгрузкиСертификата",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	СертификатКриптографии.НачатьВыгрузку(Оповещение);
		
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеВыгрузкиСертификата(ВыгруженныеДанные, ДополнительныеПараметры) Экспорт 
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ИмяФайлаИлиРасширение = ДополнительныеПараметры.ИмяФайлаИлиРасширение;
	
	Оповещение = Новый ОписаниеОповещения(
		"ЭкспортироватьСертификатВФайлПослеЗаписиФайлаЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
		
	ПолноеИмяФайла = ИмяКаталогаВременныхФайлов + ИмяФайлаИлиРасширение;
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
	
	ВыгруженныеДанные.НачатьЗапись(Оповещение, ПолноеИмяФайла);
	
КонецПроцедуры

Процедура ЭкспортироватьСертификатВФайлПослеЗаписиФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
	ВыводитьСоообщения = ДополнительныеПараметры.ВыводитьСоообщения;
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	СертификатКриптографии = ДополнительныеПараметры.СертификатКриптографии;
	ИмяКаталогаВременныхФайлов = ДополнительныеПараметры.ИмяКаталогаВременныхФайлов;
	ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	
	РезультатЭкспорта = Новый Структура;
	РезультатЭкспорта.Вставить("Выполнено", Истина);
	РезультатЭкспорта.Вставить("ИмяФайлаСертификата", ПолноеИмяФайла);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, РезультатЭкспорта);
	
КонецПроцедуры

Функция РезультатПодписать()
	
	Результат = Новый Структура;
	Результат.Вставить("ПодписьВыполнена", Ложь);
	Результат.Вставить("ПодписанныеДанные", Неопределено);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("МенеджерКриптографии", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодписатьCadesBes(ОповещениеОбратногоВызова, ПараметрыПодписи) Экспорт
	
	// проверка параметров
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСМинобороныСлужебныйКлиент.ПодписатьCadesBes", 
		"Сертификат",
		ПараметрыПодписи.Сертификат, 
		Новый ОписаниеТипов("СертификатКриптографии"));
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСМинобороныСлужебныйКлиент.ПодписатьCadesBes", 
		"Данные",
		ПараметрыПодписи.Данные, 
		Новый ОписаниеТипов("ДвоичныеДанные, Строка"));
		
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
		"ДокументооборотСМинобороныСлужебныйКлиент.ПодписатьCadesBes", 
		"ПарольДоступаКЗакрытомуКлючу",
		ПараметрыПодписи.ПарольДоступаКЗакрытомуКлючу, 
		Новый ОписаниеТипов("Строка"));
	
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеЗавершенияПодписи", ОповещениеОбратногоВызова);
	Контекст.Вставить("МенеджерКриптографии", Неопределено);
	Контекст.Вставить("Сертификат", ПараметрыПодписи.Сертификат);
	Контекст.Вставить("Данные", ПараметрыПодписи.Данные);
	Контекст.Вставить("ПарольДоступаКЗакрытомуКлючу", ПараметрыПодписи.ПарольДоступаКЗакрытомуКлючу);
	Контекст.Вставить("СвойстваПрограммыКриптографии", Неопределено);
	Контекст.Вставить("ПопыткаПодписиПослеПодменыАлгоритмов", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодписатьПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		Контекст);
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения, Контекст.Сертификат);
	
КонецПроцедуры

Процедура ПодписатьПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, Контекст) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьПослеСозданияМенеджераКриптографии",
		ЭтотОбъект,
		Контекст);
		
	СвойстваПрограммыКриптографии = РезультатПолученияСвойств.Свойства;
	Контекст.СвойстваПрограммыКриптографии = СвойстваПрограммыКриптографии;
	СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммыКриптографии);
	
КонецПроцедуры

Процедура ПодписатьПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
	
	ПарольДоступаКЗакрытомуКлючу = Контекст.ПарольДоступаКЗакрытомуКлючу;
	
	Если НЕ Результат.Выполнено Тогда
		Результат = РезультатПодписать();
		Результат.ОписаниеОшибки = "Ошибка создания менеджера криптографии.";
		ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
		Возврат;
	КонецЕсли;
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;
	
	Контекст.МенеджерКриптографии = МенеджерКриптографии;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольДоступаКЗакрытомуКлючу;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьЗавершение",
		ЭтотОбъект,
		Контекст,
		"ПодписатьЗавершениеОшибка",
		ЭтотОбъект);
	
	МенеджерКриптографии.НачатьПодписывание(Оповещение,
		Контекст.Данные,
		Контекст.Сертификат
		);
	
КонецПроцедуры

Процедура ПодписатьЗавершение(ПодписанныеДанные, Контекст) Экспорт 
	
	Результат = РезультатПодписать();
	Результат.ПодписьВыполнена = Истина;
	Результат.ПодписанныеДанные = ПодписанныеДанные;
	Результат.ОписаниеОшибки = "";
	Результат.МенеджерКриптографии = Контекст.МенеджерКриптографии;
	
	ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
	
КонецПроцедуры

Процедура ПодписатьЗавершениеОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	МенеджерКриптографии = Контекст.МенеджерКриптографии;
	ОповещениеЗавершенияПодписи = Контекст.ОповещениеЗавершенияПодписи;
	
	СтандартнаяОбработка = Ложь;
	Результат = РезультатПодписать();
	Результат.МенеджерКриптографии = МенеджерКриптографии;
	
	ОписаниеОшибки = ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	
	ЗаписатьСобытия = Истина;
	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
		НСтр("ru = 'Электронный документооборот с Минобороны. ДокументооборотСМинобороныСлужебныйКлиент.ПодписатьCadesBes()'"),
		"Ошибка",
		СтрШаблон("%1: %2", НСтр("ru='Ошибка при подписывании файла отчета'"), ОписаниеОшибки),
		"",
		ЗаписатьСобытия
		);
	
	Если Найти(ОписаниеОшибки, "Сертификат, связанный с закрытым ключом, указывает на модуль криптографии, отличный от текущего") > 0 Тогда
		// нарушение стандарта № 499 пункт 3.2
		// делаем подмену типа криптопровайдера в случе неправильной установки сертификата
		
		// запоминаем нужные алгоритмы
		Алгоритмы = Новый Структура("АлгоритмПодписи, АлгоритмШифрования, АлгоритмХеширования");;
		Алгоритмы.АлгоритмПодписи = МенеджерКриптографии.АлгоритмПодписи;
		Алгоритмы.АлгоритмШифрования = МенеджерКриптографии.АлгоритмШифрования;
		Алгоритмы.АлгоритмХеширования = МенеджерКриптографии.АлгоритмХеширования;
		
		// определяем имя криптопровайдера
		Подстрока = "Сертификат связан с модулем криптографии """;
		ПозицияНачало = Найти(ОписаниеОшибки, Подстрока) + СтрДлина(Подстрока);
		Подстрока = """ с типом ";
		ПозицияКонец = Найти(ОписаниеОшибки, Подстрока);
		Имя = Сред(ОписаниеОшибки, ПозицияНачало, ПозицияКонец - ПозицияНачало);
		// определяем тип криптопровайдера
		ПозицияНачало = Найти(ОписаниеОшибки, Подстрока)+ СтрДлина(Подстрока); 
		ПозицияКонец = СтрДлина(ОписаниеОшибки);
		Тип = Сред(ОписаниеОшибки, ПозицияНачало, ПозицияКонец - ПозицияНачало);
		Тип = Число(Тип);
		
		НеизвестныйКриптопровайдер = Ложь;
		ТребуетсяДругойКриптопровайдер = Ложь;
		
		Если Найти(Имя, "Infotecs") > 0 Тогда
			Свойства = ДокументооборотСМинобороныКлиентСервер.КриптопровайдерViPNet();
		ИначеЕсли Найти(Имя, "Crypto-Pro") > 0 Тогда
			Свойства = ДокументооборотСМинобороныКлиентСервер.КриптопровайдерCryptoPro();
		Иначе
			НеизвестныйКриптопровайдер = Истина;
		КонецЕсли;
		
		Если Свойства.ТипКриптопровайдера <> Контекст.СвойстваПрограммыКриптографии.ТипКриптопровайдера Тогда
			ТребуетсяДругойКриптопровайдер = Истина;
		КонецЕсли;
		
		Если НеизвестныйКриптопровайдер
			ИЛИ ТребуетсяДругойКриптопровайдер
			ИЛИ Контекст.ПопыткаПодписиПослеПодменыАлгоритмов Тогда
			Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
				Результат.ОписаниеОшибки = ОписаниеОшибки;
			КонецЕсли;
			
			ВыполнитьОбработкуОповещения(Контекст.ОповещениеЗавершенияПодписи, Результат);
			Возврат;
		КонецЕсли;
		
		Контекст.ПопыткаПодписиПослеПодменыАлгоритмов = Истина;
		
		// подменяем тип криптопровайдера
		СвойстваПрограммыКриптографии = Новый Структура(Свойства);
		СвойстваПрограммыКриптографии.Тип = Тип;
		СвойстваПрограммыКриптографии.Имя = Имя;
		
		СвойстваПрограммыКриптографии = Новый ФиксированнаяСтруктура(СвойстваПрограммыКриптографии);
		
		Оповещение = Новый ОписаниеОповещения("ПодписатьПослеСозданияМенеджераКриптографии", ЭтотОбъект, Контекст);
		СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммыКриптографии, Алгоритмы);
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = ДополнитьИнформациюПоОшибкеКриптографии(ОписаниеОшибки);

	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Результат.ОписаниеОшибки = ОписаниеОшибки;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеЗавершенияПодписи, Результат);
	
КонецПроцедуры

Функция ДополнитьИнформациюПоОшибкеКриптографии(Знач ОписаниеОшибки)
	
	// нарушение стандарта № 499 пункт 3.2
	// необходимо вывести пользователю возможную причину возникновения ошибки
	// ищем ошибки криптопровайдера ViPNet и добавляем осмысленные комментарии
	Если Найти(ОписаниеОшибки, "Модуль криптографии не может выполнить требуемое действие, т.к. контекст был получен в ограниченном режиме") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Возможно, не указан пароль контейнера закрытого ключа.'");
	ИначеЕсли Найти(ОписаниеОшибки, "Ошибка при формировании данных подписи (0x00000056)") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Возможно, указан неверный пароль контейнера закрытого ключа.'");
	ИначеЕсли Найти(ОписаниеОшибки, "Сертификат, связанный с закрытым ключом, указывает на модуль криптографии, отличный от текущего") > 0 Тогда
		ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр("ru='Возможно, сертификат криптографии был установлен неправильно.'");
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

Процедура УстановитьСертификатыГоловныхПромежуточныхЦентров(ОповещениеОбратногоВызова, Сертификаты) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Сертификаты", Сертификаты);
	ДополнительныеПараметры.Вставить("ТекущийСертификат", 0);
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОбратногоВызова);
	ДополнительныеПараметры.Вставить("ИмяФайлаСертификата", "");
	
	УстановитьСертификатыГоловныхПромежуточныхЦентровЦикл(Истина, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура УстановитьСертификатыГоловныхПромежуточныхЦентровЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификаты                = ДополнительныеПараметры.Сертификаты;
	ОповещениеОбратногоВызова  = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	ТекущийСертификат          = ДополнительныеПараметры.ТекущийСертификат;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыГоловныхПромежуточныхЦентровЦикл", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ТекущийСертификат = Сертификаты.Количество() Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова, Истина);
	Иначе
		Сертификат = Сертификаты[ТекущийСертификат];
		
		Если Сертификат.Хранилище = "ROOT" Тогда
			ДополнительныеПараметры.Вставить("ХранилищеИмя", "Доверенные корневые центры сертификации");
		Иначе
			ДополнительныеПараметры.Вставить("ХранилищеИмя", "Промежуточные центры сертификации");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыГоловныхПромежуточныхЦентровПослеПоискаСертификатаЦикл", ЭтотОбъект, ДополнительныеПараметры);
		
		НайтиСертификатПоОтпечатку(Оповещение, Сертификат.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификатыГоловныхПромежуточныхЦентровПослеПоискаСертификатаЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ТекущийСертификат = ДополнительныеПараметры.ТекущийСертификат;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыГоловныхПромежуточныхЦентровЦикл", ЭтотОбъект, ДополнительныеПараметры);
	
	Если НЕ Результат.СертификатНайден Тогда
		
		УстановитьСертификатыГоловныхПромежуточныхЦентровПослеЗаписиСертификатаЦикл(ДополнительныеПараметры);
		
	Иначе
		
		ДополнительныеПараметры.ТекущийСертификат = ТекущийСертификат + 1;
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификатыГоловныхПромежуточныхЦентровПослеЗаписиСертификатаЦикл(ДополнительныеПараметры) Экспорт
	
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ТекущийСертификат = ДополнительныеПараметры.ТекущийСертификат;
	Сертификат = Сертификаты[ТекущийСертификат];
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьСертификатыГоловныхПромежуточныхЦентровПослеПоказаПредупрежденияЦикл",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	// для корневого хранилища показываем сообщение
	Если Сертификат.Хранилище = "ROOT" Тогда
		ПоказатьПредупреждение(Оповещение,"Для проверки подписи требуется установить сертификат '" + Сертификат.Описание + "'.
		|Нажмите 'Да' в системном диалоге, который появится после закрытия этого сообщения.");
	Иначе
		УстановитьСертификатыГоловныхПромежуточныхЦентровПослеПоказаПредупрежденияЦикл(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификатыГоловныхПромежуточныхЦентровПослеПоказаПредупрежденияЦикл(ДополнительныеПараметры) Экспорт
	
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ТекущийСертификат = ДополнительныеПараметры.ТекущийСертификат;
	ИмяФайлаСертификата = ДополнительныеПараметры.ИмяФайлаСертификата;
	Сертификат = Сертификаты[ТекущийСертификат];
	ХранилищеИмя = ДополнительныеПараметры.ХранилищеИмя;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыГоловныхПромежуточныхЦентровПослеПолученияИмениВременногоФайлаЦикл", ЭтотОбъект, ДополнительныеПараметры);
	ОперацииСФайламиЭДКОКлиент.Base64ВФайл(Оповещение, Сертификат.СодержимоеСертификатаBase64, ".cer");
	
КонецПроцедуры

Процедура УстановитьСертификатыГоловныхПромежуточныхЦентровПослеПолученияИмениВременногоФайлаЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ТекущийСертификат = ДополнительныеПараметры.ТекущийСертификат;
	ИмяФайлаСертификата = ДополнительныеПараметры.ИмяФайлаСертификата;
	Сертификат = Сертификаты[ТекущийСертификат];
	ХранилищеИмя = ДополнительныеПараметры.ХранилищеИмя;
	
	Если Результат.Выполнено Тогда
		Оповещение = Новый ОписаниеОповещения("УстановитьСертификатыГоловныхПромежуточныхЦентровПослеИмпортаЦикл", ЭтотОбъект, ДополнительныеПараметры);
		КриптографияЭДКОКлиент.ИмпортироватьСертификат(Оповещение, Результат.ИмяФайла, Сертификат.Хранилище);
	Иначе
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьСертификатыГоловныхПромежуточныхЦентровЦикл",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ДополнительныеПараметры.ТекущийСертификат = ТекущийСертификат + 1;
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСертификатыГоловныхПромежуточныхЦентровПослеИмпортаЦикл(Результат, ДополнительныеПараметры) Экспорт
	
	Сертификаты = ДополнительныеПараметры.Сертификаты;
	ТекущийСертификат = ДополнительныеПараметры.ТекущийСертификат;
	ИмяФайлаСертификата = ДополнительныеПараметры.ИмяФайлаСертификата;
	Сертификат = Сертификаты[ТекущийСертификат];
	ХранилищеИмя = ДополнительныеПараметры.ХранилищеИмя;
	
	Если НЕ Результат.Выполнено Тогда
		ДокументооборотСМинобороныКлиент.ЗаписатьВЖурналРегистрации(
			НСтр(
				СтрШаблон(
					"ru='Произошла ошибка при установке сертификата ''%1'' в хранилище ''%2'' c использованием компоненты'",
				Сертификат.Описание, ХранилищеИмя), "ru"));
	КонецЕсли;
			
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьСертификатыГоловныхПромежуточныхЦентровЦикл",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ДополнительныеПараметры.ТекущийСертификат = ТекущийСертификат + 1;
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	
КонецПроцедуры

Функция РезультатПроверитьПодпись()
	
	Результат = Новый Структура;
	Результат.Вставить("Сертификат", Неопределено);
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьПодпись(Оповещение, ИсходныеДанные, Подпись) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВыполняемоеОповещение", Оповещение);
	Контекст.Вставить("ИсходныеДанные", ИсходныеДанные);
	Контекст.Вставить("Подпись", Подпись);
	Контекст.Вставить("ПроверкаВыполнена", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодписьПослеПолученияСвойствМенеджераКриптографии",
		ЭтотОбъект,
		Контекст);
	ПолучитьСвойстваПрограммыМенеджераКриптографии(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеПолученияСвойствМенеджераКриптографии(РезультатПолученияСвойств, Контекст) Экспорт
	
	Если РезультатПолученияСвойств.Свойства = Неопределено Тогда
		ТекстОшибкиЖурнал = НСтр(
					"ru='Произошла ошибка получения свойств менеджера криптографии при проверке подписи: %1'");
		ТекстОшибкиЖурнал = СтрШаблон(ТекстОшибкиЖурнал, РезультатПолученияСвойств.ОписаниеОшибки);
		ДокументооборотСМинобороныКлиент.ЗаписатьВЖурналРегистрации(ТекстОшибкиЖурнал);
		Результат = РезультатПроверитьПодпись();
		Результат.ОписаниеОшибки = РезультатПолученияСвойств.ОписаниеОшибки;
		ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеСозданияМенеджераКриптографии", 
		ЭтотОбъект,
		Контекст);
		
	СвойстваПрограммыКриптографии = РезультатПолученияСвойств.Свойства;
	СоздатьМенеджерКриптографии(Оповещение, СвойстваПрограммыКриптографии);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеСозданияМенеджераКриптографии(Результат, Контекст) Экспорт
		
	Если НЕ Результат.Выполнено Тогда
		ТекстОшибкиЖурнал = НСтр(
					"ru='Произошла ошибка создания менеджера криптографии при проверке подписи.'");
		ДокументооборотСМинобороныКлиент.ЗаписатьВЖурналРегистрации(ТекстОшибкиЖурнал);
		Результат = РезультатПроверитьПодпись();
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка создания менеджера криптографии.'");
		ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
		Возврат;
	КонецЕсли; 
	
	МенеджерКриптографии = Результат.МенеджерКриптографии;	
	Контекст.Вставить("МенеджерКриптографии", МенеджерКриптографии);
	
	Оповещение = Новый ОписаниеОповещения("ПроверитьПодписьПослеПроверкиЗавершение", 
		ЭтотОбъект, 
		Контекст,
		"ПроверитьПодписьПослеПроверкиОшибка",
		ЭтотОбъект);
	МенеджерКриптографии.НачатьПроверкуПодписи(Оповещение, Контекст.ИсходныеДанные, Контекст.Подпись);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеПроверкиОшибка(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ТекстОшибкиЖурнал = НСтр("ru='Произошла ошибка при проверке подписи: %1'");
	ОписаниеОшибки = ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке).Описание;
	ТекстОшибкиЖурнал = СтрШаблон(ТекстОшибкиЖурнал, ОписаниеОшибки);
	ДокументооборотСМинобороныКлиент.ЗаписатьВЖурналРегистрации(ТекстОшибкиЖурнал);
	Результат = РезультатПроверитьПодпись();
	Результат.ОписаниеОшибки = НСтр("ru='Ошибка проверки подписи.'");
	
	ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

Процедура ПроверитьПодписьПослеПроверкиЗавершение(Сертификат, Контекст) Экспорт
	
	Результат = РезультатПроверитьПодпись();
	Результат.Сертификат = Сертификат;
	Результат.Выполнено = Истина;
	
	ВыполнитьОбработкуОповещения(Контекст.ВыполняемоеОповещение, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверитьВозможностьВыполненияОперации

Процедура ПроверитьВозможностьВыполненияОперации(ОповещениеОЗавершении, ВладелецФормы = Неопределено, ПараметрыАутентификации = Неопределено) Экспорт
	
	Результат = ДокументооборотСМинобороныВызовСервера.ПроверитьВозможностьВыполненияОперации(ПараметрыАутентификации);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеОбратногоВызова", ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ВладелецФормы", ВладелецФормы);
	
	Если Результат = "ПараметрыАутентификацииНеЗаполнены"
		ИЛИ Результат = "ПараметрыАутентификацииУказаныНеВерно" Тогда
		
		Оповещение = Новый ОписаниеОповещения(
				"ПроверитьВозможностьВыполненияОперацииПослеВводаПараметровАутентификации",
				ЭтотОбъект,
				ДополнительныеПараметры);
		
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(
			Оповещение,
			ВладелецФормы);
		
	ИначеЕсли Результат = "ВыполнениеРазрешено" Тогда

		Оповещение = Новый ОписаниеОповещения(
				"ПроверитьВозможностьВыполненияОперацииПослеПроверкиКриптографии",
				ЭтотОбъект,
				ДополнительныеПараметры);
		ОпределятьГОСТ2001 = Истина;
		ОпределитьУстановленныеКрипторовайдеры(Оповещение, ОпределятьГОСТ2001);
		
	ИначеЕсли Результат <> "ОшибкаСоединенияССервером" Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении,
			Новый Структура("Выполнено, ВыполнениеРазрешено, СтатусПроверки", Истина, Ложь, Результат));
			
	Иначе

		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении,
			Новый Структура("Выполнено, ВыполнениеРазрешено, СтатусПроверки", Ложь, Ложь, Результат));
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыполненияОперацииПослеПроверкиКриптографии(РезультатОпределенияКриптопровайдеров, ДополнительныеПараметры) Экспорт
	
	ОповещениеОбратногоВызова = ДополнительныеПараметры.ОповещениеОбратногоВызова;
	
	Если НЕ РезультатОпределенияКриптопровайдеров.Выполнено Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова,
			Новый Структура("Выполнено, ВыполнениеРазрешено, СтатусПроверки", Истина, Ложь, "ОшибкаОпределенияКриптопровайдеров"));
		Возврат;
	КонецЕсли;
	
	Криптопровайдеры = РезультатОпределенияКриптопровайдеров.УстановленныеКриптопровайдеры;
	Если Криптопровайдеры.Количество() = 0 Тогда
		ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова,
			Новый Структура("Выполнено, ВыполнениеРазрешено, СтатусПроверки", Истина, Ложь, "НеОбнаруженоКриптопровайдеров"));
		Возврат;
	Иначе
		Если НЕ РезультатОпределенияКриптопровайдеров.ПоддерживаетсяГОСТ2012 Тогда
			ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова,
				Новый Структура("Выполнено, ВыполнениеРазрешено, СтатусПроверки", Истина, Ложь, "НеОбнаруженоКриптопровайдеровГОСТ2012"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОбратногоВызова,
			Новый Структура("Выполнено, ВыполнениеРазрешено, СтатусПроверки", Истина, Истина, "ВыполнениеРазрешено"));
	
КонецПроцедуры

Процедура ПроверитьВозможностьВыполненияОперацииПослеВводаПараметровАутентификации(Результат, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПроверитьВозможностьВыполненияОперации(ВходящийКонтекст.ОповещениеОбратногоВызова,
			ВходящийКонтекст.Владелецформы, Результат);
	Иначе
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОбратногоВызова,
			Новый Структура("Выполнено, ВыполнениеРазрешено, СтатусПроверки", 
							Истина, 	Ложь,				 "ПараметрыАутентификацииНеЗаполнены"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти