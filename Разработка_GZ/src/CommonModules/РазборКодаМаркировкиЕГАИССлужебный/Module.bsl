
#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкиРазбораКодаМаркировки

Процедура ДополнитьОписанияКодовМаркировки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля) Экспорт
	
	Если ВидПродукции <> Перечисления.ВидыПродукцииИС.Алкогольная Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеКодаМаркировкиАкцизнойМарки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	ОписаниеКодаМаркировкиАкцизнойМаркиСтарыйФормат(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	
	// Упаковки
	ОписаниеКодаМаркировкиЛогистическойУпаковки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	ОписаниеКодаМаркировкиЛогистическойУпаковкиРасширенный(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля);
	
КонецПроцедуры

Процедура ДополнитьВспомогательнымиНастройкиРазбораКодаМаркировки(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы) Экспорт
	
	// Код маркировки произвольной длины/состава оставляем без описания и определение
	// вида продукции выполняем в обработчике ЭтоНеФормализованныйКодМаркировки.
	
	ДополнительныеПараметры(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиРазбораКодаМаркировки

#Область ОписаниеКодаМаркировки

Процедура ОписаниеКодаМаркировкиАкцизнойМарки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	ОписаниеЭлементовКМ = Новый Структура("ШтрихкодАкцизнойМарки");
	ОписаниеЭлементовКМ.ШтрихкодАкцизнойМарки = ОписаниеЭлементаКодаМаркировки("", "ШтрихкодАкцизнойМарки", 150);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("ШтрихкодАкцизнойМарки");
	
	СписокШаблонов = РазборКодаМаркировкиИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиАкцизнойМаркиСтарыйФормат(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	ОписаниеЭлементовКМ = Новый Структура("ШтрихкодАкцизнойМарки");
	ОписаниеЭлементовКМ.ШтрихкодАкцизнойМарки = ОписаниеЭлементаКодаМаркировки("", "ШтрихкодАкцизнойМарки", 68);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("ШтрихкодАкцизнойМарки");
	
	СписокШаблонов = РазборКодаМаркировкиИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Потребительская;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	СоставКодаМаркировки.Вставить("КодАлкогольнойПродукции", "");
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиЛогистическойУпаковки(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Формат маркировки для паллеты
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("КодФСРАР, ПорядковыйНомер");
	ОписаниеЭлементовКМ.КодФСРАР        = ОписаниеЭлементаКодаМаркировки("", "КодФСРАР",       12, Алфавит.Цифры);
	ОписаниеЭлементовКМ.ПорядковыйНомер = ОписаниеЭлементаКодаМаркировки("", "ПорядковыйНомер", 6, Алфавит.Цифры);
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("КодФСРАР + ПорядковыйНомер");
	
	СписокШаблонов = РазборКодаМаркировкиИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

Процедура ОписаниеКодаМаркировкиЛогистическойУпаковкиРасширенный(ДанныеОписанийКодаМаркировки, ВидПродукции, ДанныеОбщегоМодуля)
	
	// Формат маркировки для короба
	// http://egais.ru/files/format_tara6.pdf
	
	Алфавит = ДанныеОписанийКодаМаркировки.Алфавит;
	
	ОписаниеЭлементовКМ = Новый Структура("КодФСРАР, ТипЛогистическойЕдиницы, НомерПлощадки, Год, СерийныйНомер");
	ОписаниеЭлементовКМ.КодФСРАР                = ОписаниеЭлементаКодаМаркировки("", "КодФСРАР",               12, Алфавит.Цифры); // идентификатор организации в ЕГАИС, осуществляющей маркировку групповой тары (FSRAR_ID). (12 знаков).
	ОписаниеЭлементовКМ.ТипЛогистическойЕдиницы = ОписаниеЭлементаКодаМаркировки("", "ТипЛогистическойЕдиницы", 1, Алфавит.Цифры); // тип логистической единицы (1- короб, 2- паллет, 3-сборный короб, 4-сборный паллет).
	ОписаниеЭлементовКМ.НомерПлощадки           = ОписаниеЭлементаКодаМаркировки("", "НомерПлощадки",           2, Алфавит.БуквыЦифры); // номер линии розлива/площадки маркировки.
	ОписаниеЭлементовКМ.Год                     = ОписаниеЭлементаКодаМаркировки("", "Год",                     2, Алфавит.Цифры); // год, в который производится генерация групповой маркировки.
	ОписаниеЭлементовКМ.СерийныйНомер           = ОписаниеЭлементаКодаМаркировки("", "СерийныйНомер",           9, Алфавит.БуквыЦифры); // логистический идентификатор, счетчик, обнуляемый в начале каждого года.
	
	ШаблоныСтрокой = Новый Массив;
	ШаблоныСтрокой.Добавить("КодФСРАР + ТипЛогистическойЕдиницы + НомерПлощадки + Год + СерийныйНомер");
	
	СписокШаблонов = РазборКодаМаркировкиИССлужебный.ОписанияШаблоновКодаМаркировки(ОписаниеЭлементовКМ, ШаблоныСтрокой);
	
	ТипШтрихкодаИВидУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ТипШтрихкодаИВидУпаковки();
	ТипШтрихкодаИВидУпаковки.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128;
	ТипШтрихкодаИВидУпаковки.ВидУпаковки  = Перечисления.ВидыУпаковокИС.Логистическая;
	
	СоставКодаМаркировки = НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
	
	// Добавление настроек
	НастройкаОписанияКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиОписанияШаблонаКодаМаркировкиВидаПродукции();
	НастройкаОписанияКодаМаркировки.ВидПродукции             = ВидПродукции;
	НастройкаОписанияКодаМаркировки.ТипШтрихкодаИВидУпаковки = ТипШтрихкодаИВидУпаковки;
	НастройкаОписанияКодаМаркировки.СоставКодаМаркировки     = СоставКодаМаркировки;
	НастройкаОписанияКодаМаркировки.ДанныеОбщегоМодуля       = ДанныеОбщегоМодуля;
	НастройкаОписанияКодаМаркировки.СписокШаблонов           = СписокШаблонов;
	
	ДанныеОписанийКодаМаркировки.ОписанияКодовМаркировки.Добавить(НастройкаОписанияКодаМаркировки);
	
КонецПроцедуры

#КонецОбласти

Функция ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов = "")
	Возврат РазборКодаМаркировкиИССлужебный.ОписаниеЭлементаКодаМаркировки(Код, Имя, КоличествоЗнаков, АлфавитДопустимыхСимволов);
КонецФункции

Функция НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки)
	Возврат РазборКодаМаркировкиЕГАИССлужебныйКлиентСервер.НовыйСоставКодаМаркировки(ТипШтрихкодаИВидУпаковки);
КонецФункции

Процедура ДополнительныеПараметры(НастройкиРазбораКодаМаркировки, ВидПродукции, МодулиВыбраннойПодсистемы)
	
	ДополнительныеПараметры = НастройкиРазбораКодаМаркировки.ДополнительныеПараметры[МодулиВыбраннойПодсистемы.Подсистема];
	
	КлассификаторТиповАкцизныхМарок = АкцизныеМаркиЕГАИС.КлассификаторТиповАкцизныхМарок();
	
	Если Не НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
		// Классификатор типов акцизных марок, для доступа на клиенте
		СтрокиКлассификатора = Новый Массив;
		Для Каждого СтрокаТаблицы Из КлассификаторТиповАкцизныхМарок Цикл
			СтрокиКлассификатора.Добавить(
				ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы));
		КонецЦикла;
		КлассификаторТиповАкцизныхМарок = СтрокиКлассификатора;
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("КлассификаторТиповАкцизныхМарок", КлассификаторТиповАкцизныхМарок);
	
	
	// Текст модели XDTO для проверки штрихкода на принадлежность к акцизным маркам, для доступа на клиенте
	// Исходник: ШтрихкодированиеЕГАИС.ЭтоШтрихкодАкцизнойМарки(Штрихкод, ТипШтрихкода)
	
	ПроверкаШтрихкодаАкцизнойМарки = Новый Структура;
	
	Если НастройкиРазбораКодаМаркировки.ТолькоСервер Тогда
		
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("ОбщийМодульЕГАИС", ШтрихкодированиеЕГАИС);
		
	Иначе
		
		URIПространстваИмен = "egaischeque.joint.2";
		
		ОбъектXDTO = ФабрикаXDTO.ЭкспортМоделиXDTO(URIПространстваИмен);
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		
		ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, "Model", "http://v8.1c.ru/8.1/xdto",, НазначениеТипаXML.Явное);
		
		ТекстМоделиXML = ЗаписьXML.Закрыть();
		
		
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("МодельXML",           ТекстМоделиXML);
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("URIПространстваИмен", URIПространстваИмен);
		ПроверкаШтрихкодаАкцизнойМарки.Вставить("ИмяТипа",             "BK");
		
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ПроверкаШтрихкодаАкцизнойМарки", ПроверкаШтрихкодаАкцизнойМарки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти