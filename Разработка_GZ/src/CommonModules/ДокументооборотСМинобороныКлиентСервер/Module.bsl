////////////////////////////////////////////////////////////////////////////////
// Подсистема "Документооборот с Минобороны".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ВывестиОшибку(
	Знач ТекстСообщения,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь
	) Экспорт
	
	Если ЗначениеЗаполнено(КлючДанных)
		ИЛИ ЗначениеЗаполнено(Поле) 
		ИЛИ ЗначениеЗаполнено(ПутьКДанным)
		ИЛИ Отказ <> Ложь Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		#Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, ПутьКДанным, Отказ);
		#КонецЕсли
	Иначе
		СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач ИдентификаторНазначения  = "") Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Если ЗначениеЗаполнено(ИдентификаторНазначения) Тогда
		Сообщение.ИдентификаторНазначения  = ИдентификаторНазначения;
	КонецЕсли;	
	Сообщение.Сообщить();

КонецПроцедуры

Функция СсылкаНаОтчетПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "СтруктураРеквизитовФормы")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.СтруктураРеквизитовФормы, "мСохраненныйДок") Тогда
		Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			#Если Сервер Тогда
				Возврат Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			#Иначе
				Возврат Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
			#КонецЕсли
		КонецЕсли; 
		
	ИначеЕсли СтрНайти(Форма.ИмяФормы, "ЭлектронныеПредставленияРегламентированныхОтчетов") <> 0 Тогда
		Возврат Форма.Объект.Ссылка;
	Иначе
		Возврат ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОрганизациюПоФорме(Форма) Экспорт
	
	Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "СтруктураРеквизитовФормы")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.СтруктураРеквизитовФормы, "Организация") Тогда
		Возврат Форма.СтруктураРеквизитовФормы.Организация;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "Объект")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.Объект, "Организация") Тогда
		Возврат Форма.Объект.Организация;
	ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма, "ОтправкаОбъект")
	И РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Форма.ОтправкаОбъект, "Организация") Тогда
		Возврат Форма.ОтправкаОбъект.Организация;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма) Экспорт
	
	ОтчетСсылка 		= СсылкаНаОтчетПоФорме(Форма);
	ОрганизацияСсылка 	= ПолучитьОрганизациюПоФорме(Форма);
	
	ПараметрыПрорисовкиПанелиОтправки = ДокументооборотСКОВызовСервера.ПараметрыПрорисовкиПанелиОтправки(
		ОтчетСсылка, 
		ОрганизацияСсылка, 
		"Минобороны");
			
	Возврат ПараметрыПрорисовкиПанелиОтправки;
	
КонецФункции

Функция СтатусыПриРучномВводе() Экспорт
	
	Статусы = СоответсвиеСтатусовПеречислениям();
	Результат = Новый Массив;
	
	Для каждого КлючЗначение Из Статусы Цикл
		Результат.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СтатусИзСтрокиВПеречисление(СтатусСтрока) Экспорт
	
	Статусы = СоответсвиеСтатусовПеречислениям();
	
	Возврат Статусы.Получить(СтатусСтрока);
	
КонецФункции

Функция СтатусИзПеречисленияВСтроку(СтатусПеречисление) Экспорт
	
	Статусы = СоответсвиеПеречисленийСтатусам();
	
	Возврат Статусы.Получить(СтатусПеречисление);
	
КонецФункции

Функция СоответсвиеПеречисленийСтатусам() Экспорт
	
	СоответствиеВрем = Новый Соответствие;
	
	СоответствиеВрем.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ПустаяСсылка"), "В работе");
	СоответствиеВрем.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтправки.Отправлен"), "Передано");
	СоответствиеВрем.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтправки.Сдан"), "Сдано");
	СоответствиеВрем.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ПринятЕстьОшибки"), "Сдано, есть замечания");
	СоответствиеВрем.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтправки.НеПринят"), "Не сдано");
	
	Соответствие = Новый Соответствие;
	
	Для каждого КлючЗначение Из СоответствиеВрем Цикл
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), КлючЗначение.Значение);
		Соответствие.Вставить(КлючЗначение.Ключ, Статус);
	КонецЦикла; 
	
	Возврат Соответствие;
	
КонецФункции

Функция СоответсвиеСтатусовПеречислениям() Экспорт
	
	СоответствиеВрем = Новый Соответствие;
	
	СоответствиеВрем.Вставить("В работе", ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ПустаяСсылка"));
	СоответствиеВрем.Вставить("Передано", ПредопределенноеЗначение("Перечисление.СтатусыОтправки.Отправлен"));
	СоответствиеВрем.Вставить("Сдано", ПредопределенноеЗначение("Перечисление.СтатусыОтправки.Сдан"));
	СоответствиеВрем.Вставить("Сдано, есть замечания", ПредопределенноеЗначение("Перечисление.СтатусыОтправки.ПринятЕстьОшибки"));
	СоответствиеВрем.Вставить("Не сдано", ПредопределенноеЗначение("Перечисление.СтатусыОтправки.НеПринят"));
	
	Соответствие = Новый Соответствие;
	
	Для каждого КлючЗначение Из СоответствиеВрем Цикл
		Статус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), КлючЗначение.Ключ);
		Соответствие.Вставить(Статус, КлючЗначение.Значение);
	КонецЦикла; 
	
	Возврат Соответствие;
	
КонецФункции

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Форма, ПараметрыПрорисовкиПанели = Неопределено) Экспорт
	
	// если кнопка отправки отсутствует, то не будем регулировать
	КнопкаОтправитьВКонтролирующийОрган = Форма.Элементы.Найти("ВыгрузитьПакет");
	Если КнопкаОтправитьВКонтролирующийОрган = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаЗагрузить = Форма.Элементы.Найти("Загрузить");
	Если ТипЗнч(КнопкаЗагрузить) = Тип("КнопкаФормы") Тогда
		КнопкаЗагрузить.Заголовок = "Загрузить отчет";
	КонецЕсли;
	
	ОрганизацияСсылка = ПолучитьОрганизациюПоФорме(Форма);
	
	// прорисовываем кнопки отправки
	ПараметрыПрорисовкиКнопокОтправки   = ПараметрыПрорисовкиКнопокОтправки(ОрганизацияСсылка);
	// прорисовываем панель отправки
	ПараметрыПрорисовкиПанели 			= ПолучитьПараметрыПрорисовкиПанелиОтправки(Форма);
	
	// регулируем видимость кнопки в зависимости от результата
	УстановитьВидимостьГруппыКнопокОтправки(Форма, ПараметрыПрорисовкиКнопокОтправки);
	
КонецПроцедуры

// Возвращает основной используемый отечественный криптографический алгоритм.
//
Функция АлгоритмПоУмолчанию() Экспорт
	
	Возврат АлгоритмГОСТ2012();
	
КонецФункции

Функция АлгоритмГОСТ2001() Экспорт
	
	Возврат "GOST R 34.10-2001";
	
КонецФункции

Функция АлгоритмГОСТ2012() Экспорт
	
	Возврат "GOST R 34.10-2012-256";
	
КонецФункции

Функция АлгоритмСертификатаПоддерживатся(Алгоритм) Экспорт
	
	АлгоритмыГОСТ2012 = ПоддерживаемыеАлгоритмы();
	Возврат АлгоритмыГОСТ2012.Найти(Алгоритм) <> Неопределено;
	
КонецФункции

Функция ПоддерживаемыеАлгоритмы() Экспорт
	
	МассивАлгоритмов = Новый Массив;
	
	ОсновнойАлгоритм = АлгоритмПоУмолчанию();
	
	Если ОсновнойАлгоритм = "GOST R 34.10-2012-256" Тогда
		МассивАлгоритмов.Добавить("GOST R 34.10-2012-256");
		МассивАлгоритмов.Добавить("GOST R 34.10-2012-512");
	ИначеЕсли ОсновнойАлгоритм = "GOST R 34.10-2012-512" Тогда
		МассивАлгоритмов.Добавить("GOST R 34.10-2012-512");
		МассивАлгоритмов.Добавить("GOST R 34.10-2012-256");
	Иначе
		МассивАлгоритмов.Добавить("GOST R 34.10-2012-256");
		МассивАлгоритмов.Добавить("GOST R 34.10-2012-512");
	КонецЕсли;
	
	Возврат МассивАлгоритмов;
	
КонецФункции

// Возвращает описание криптопровайдера CryptoPro CSP.
//
// Параметры:
//  Алгоритм    - Строка       - "GOST R 34.10-2001", "GOST R 34.10-2012-256", "GOST R 34.10-2012-512",
//                               при значении "" или Неопределено возвращается массив свойств криптопровайдеров всех алгоритмов
//                               и классов защиты.
//  ЭтоLinux    - Булево.
//              - Неопределено - при пустых значениях Алгоритм или КлассЗащиты возвращаются массив свойств криптопровайдеров
//                               для каждой операционной системы, иначе возвращаются свойства криптопровайдера для текущей.
//  КлассЗащиты - Число        - 1, 2 или 3,
//                               при значении 0 или Неопределено возвращается массив свойств криптопровайдеров всех классов защиты.
//  Путь        - Строка       - путь модуля криптографии в nix-системах.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура или ФиксированныйМассив из ФиксированнаяСтруктура (при Алгоритм = Неопределено) - описание криптопровайдера.
//    * Имя                 - Строка - имя криптопровайдера.
//    * Тип                 - Число  - тип криптопровайдера.
//    * Путь                - Строка - путь к модулю криптопровайдера в nix-системах.
//    * Представление       - Строка - представление типа криптопровайдера для отображения в интерфейсе.
//    * ТипКриптопровайдера - Перечисления.ТипыКриптоПровайдеров.CryptoPro.
//    * Алгоритм            - Строка - "GOST R 34.10-2001", "GOST R 34.10-2012-256", "GOST R 34.10-2012-512".
//    * Поддерживается      - Булево - Истина.
//
Функция КриптопровайдерCryptoPro(Алгоритм = "GOST R 34.10-2012-256",
		ЭтоLinux = Неопределено,
		КлассЗащиты = 1,
		Путь = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Алгоритм) ИЛИ НЕ ЗначениеЗаполнено(КлассЗащиты) Тогда
		МассивСвойств = Новый Массив;
		
		Если ЗначениеЗаполнено(Алгоритм) Тогда
			МассивАлгоритмов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Алгоритм);
		Иначе
			МассивАлгоритмов = ПоддерживаемыеАлгоритмы();
		КонецЕсли;
		
		Если ЭтоLinux = Неопределено Тогда
			ЭтоКриптопровайдерLinuxПервыйВариант 	= Ложь;
			ЭтоКриптопровайдерLinuxПоследнийВариант = Истина;
		Иначе
			ЭтоКриптопровайдерLinuxПервыйВариант 	= ЭтоLinux;
			ЭтоКриптопровайдерLinuxПоследнийВариант = ЭтоLinux;
		КонецЕсли;
		
		Для каждого ПроверяемыйАлгоритм Из МассивАлгоритмов Цикл
			Для ЭтоКриптопровайдерLinux = ЭтоКриптопровайдерLinuxПервыйВариант По ЭтоКриптопровайдерLinuxПоследнийВариант Цикл
				ПоследнийПроверяемыйКлассЗащиты = ?(ЭтоКриптопровайдерLinux, 3, 1);
				Для ПроверяемыйКлассЗащиты = 1 По ПоследнийПроверяемыйКлассЗащиты Цикл
					Свойства = КриптопровайдерCryptoPro(ПроверяемыйАлгоритм, ЭтоКриптопровайдерLinux, ПроверяемыйКлассЗащиты, Путь);
					МассивСвойств.Добавить(Свойства);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Возврат Новый ФиксированныйМассив(МассивСвойств);
	КонецЕсли;
	
	ЭтоКриптопровайдерLinux = ЭтоLinux;
	Если ЭтоКриптопровайдерLinux = Неопределено Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			ЭтоКриптопровайдерLinux = ОбщегоНазначения.ЭтоLinuxКлиент();
		#Иначе
			ЭтоКриптопровайдерLinux = ОбщегоНазначенияКлиент.ЭтоLinuxКлиент();
		#КонецЕсли
	КонецЕсли;
	
	Если Алгоритм = "GOST R 34.10-2012-256" Тогда
		Если ЭтоКриптопровайдерLinux Тогда
			ИмяКриптопровайдера = СтрШаблон(
				"Crypto-Pro GOST R 34.10-2012 KC%1 CSP",
				Строка(КлассЗащиты));
			
		Иначе
			ИмяКриптопровайдера = "Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider";
		КонецЕсли;
		
		ТипКриптопровайдера 		= 80;
		АлгоритмКриптопровайдера 	= "GOST R 34.10-2012-256";
		
	ИначеЕсли Алгоритм = "GOST R 34.10-2012-512" Тогда
		Если ЭтоКриптопровайдерLinux Тогда
			ИмяКриптопровайдера = СтрШаблон(
				"Crypto-Pro GOST R 34.10-2012 KC%1 Strong CSP",
				Строка(КлассЗащиты));
			
		Иначе
			ИмяКриптопровайдера = "Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider";
		КонецЕсли;
		
		ТипКриптопровайдера 		= 81;
		АлгоритмКриптопровайдера 	= "GOST R 34.10-2012-512";
		
	Иначе // Алгоритм "GOST R 34.10-2001"
		Если ЭтоКриптопровайдерLinux Тогда
			ИмяКриптопровайдера = СтрШаблон(
				"Crypto-Pro GOST R 34.10-2001 KC%1 CSP",
				Строка(КлассЗащиты));
			
		Иначе
			ИмяКриптопровайдера = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
		КонецЕсли;
		
		ТипКриптопровайдера 		= 75;
		АлгоритмКриптопровайдера 	= "GOST R 34.10-2001";
	КонецЕсли;
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 					ИмяКриптопровайдера);
	Свойства.Вставить("Путь", 					Путь);
	Свойства.Вставить("Тип", 					ТипКриптопровайдера);
	Свойства.Вставить("Представление", 			"CryptoPro CSP");
	Свойства.Вставить("ТипКриптопровайдера", 	ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.CryptoPro"));
	Свойства.Вставить("Алгоритм", 				АлгоритмКриптопровайдера);
	Свойства.Вставить("Поддерживается", 		Истина);
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

// Возвращает описание криптопровайдера ViPNet CSP.
//
// Параметры:
//  Алгоритм - Строка - "GOST R 34.10-2001", "GOST R 34.10-2012-256", "GOST R 34.10-2012-512".
//                      при значении "" или Неопределено возвращается массив свойств криптопровайдеров всех алгоритмов.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура или ФиксированныйМассив из ФиксированнаяСтруктура (при Алгоритм = Неопределено) - описание криптопровайдера.
//    * Имя                 - Строка - имя криптопровайдера.
//    * Тип                 - Число  - тип криптопровайдера.
//    * Путь                - Строка - путь к модулю криптопровайдера в nix-системах.
//    * Представление       - Строка - представление типа криптопровайдера для отображения в интерфейсе.
//    * ТипКриптопровайдера - Перечисления.ТипыКриптоПровайдеров.VipNet.
//    * Алгоритм            - Строка - "GOST R 34.10-2001", "GOST R 34.10-2012-256", "GOST R 34.10-2012-512".
//    * Поддерживается      - Булево - Истина.
//
Функция КриптопровайдерViPNet(Алгоритм = "GOST R 34.10-2012-256") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Алгоритм) Тогда
		МассивСвойств = Новый Массив;
		МассивАлгоритмов = ПоддерживаемыеАлгоритмы();
		
		Для каждого ПроверяемыйАлгоритм Из МассивАлгоритмов Цикл
			Свойства = КриптопровайдерViPNet(ПроверяемыйАлгоритм);
			МассивСвойств.Добавить(Свойства);
		КонецЦикла;
		
		Возврат Новый ФиксированныйМассив(МассивСвойств);
	КонецЕсли;
	
	Если Алгоритм = "GOST R 34.10-2012-256" Тогда
		ИмяКриптопровайдера 		= "Infotecs GOST 2012/512 Cryptographic Service Provider";
		ТипКриптопровайдера 		= 77;
		АлгоритмКриптопровайдера 	= "GOST R 34.10-2012-256";
		
	ИначеЕсли Алгоритм = "GOST R 34.10-2012-512" Тогда
		ИмяКриптопровайдера 		= "Infotecs GOST 2012/1024 Cryptographic Service Provider";
		ТипКриптопровайдера 		= 78;
		АлгоритмКриптопровайдера 	= "GOST R 34.10-2012-512";
		
	Иначе // Алгоритм "GOST R 34.10-2001"
		ИмяКриптопровайдера 		= "Infotecs Cryptographic Service Provider";
		ТипКриптопровайдера			= 2;
		АлгоритмКриптопровайдера 	= "GOST R 34.10-2001";
	КонецЕсли;
	
	Свойства = Новый Структура();
	Свойства.Вставить("Имя", 					ИмяКриптопровайдера);
	Свойства.Вставить("Путь", 					"");
	Свойства.Вставить("Тип", 					ТипКриптопровайдера);
	Свойства.Вставить("Представление", 			"ViPNet CSP");
	Свойства.Вставить("ТипКриптопровайдера", 	ПредопределенноеЗначение("Перечисление.ТипыКриптоПровайдеров.VipNet"));
	Свойства.Вставить("Алгоритм", 				АлгоритмКриптопровайдера);
	Свойства.Вставить("Поддерживается", 		Истина);
	
	Возврат Новый ФиксированнаяСтруктура(Свойства);
	
КонецФункции

Функция ДвоичныеДанныеВСтроку(Данные) Экспорт
	
	Возврат НРег(ПолучитьHexСтрокуИзДвоичныхДанных(Данные));
	
КонецФункции

Функция СтрокаОтпечаткаВДвоичныеДанные(Строка) Экспорт
	
	ДлинаОтпечаткаВБайтах = 20;
	
	Если СтрДлина(Строка) <> ДлинаОтпечаткаВБайтах * 2 Тогда
		ВызватьИсключение "Неверная длина строкового представления отпечатка!";
	КонецЕсли; 
	
	Данные = ПолучитьДвоичныеДанныеИзHexСтроки(Строка);
	
	Проверка = ДвоичныеДанныеВСтроку(Данные) = Строка;
	Если НЕ Проверка Тогда
		ВызватьИсключение "Ошибка преобразования строки в двоичные данные!";
	КонецЕсли; 
	
	Возврат Данные;
	
КонецФункции

Функция СформироватьИмяФайлаПакета(Параметры) Экспорт
	
	ФорматДаты = ФорматДатыДляИмениФайлаПакетаМинобороны();
	ДатаФормированияСтрока = Формат(Параметры.ДатаОтправки, ФорматДаты);;
	ДатаСоставленияСтрока = Формат(Параметры.ДатаСоставления, ФорматДаты);
	ИНН = Параметры.ИНН;
	Если Параметры.НомерФайла = 1 Тогда
		// для первого файла не добавляем суффикс
		НомерФайла = "";
	Иначе
		НомерФайла = "_" + Формат(Параметры.НомерФайла, "ЧЦ=2; ЧВН=; ЧГ=0");
	КонецЕсли;
	
	ИмяФайла = СтрШаблон("%1_%2_%3%4.zip",
						ИНН, ДатаСоставленияСтрока, ДатаФормированияСтрока, НомерФайла);
	
	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФорматДатыДляИмениФайлаПакетаМинобороны()
	
	Возврат "ДФ=yyyyMMdd";
	
КонецФункции

Процедура УстановитьВидимостьГруппыКнопокОтправки(Форма, ПараметрыПрорисовкиКнопокОтправки) Экспорт
	
	Для Каждого Эл Из ПараметрыПрорисовкиКнопокОтправки Цикл
		ЭУ = Форма.Элементы.Найти(Эл.Ключ);
		Если ЭУ <> Неопределено Тогда
			ЭУ.Видимость = Эл.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыПрорисовкиКнопокОтправки(ОрганизацияСсылка) Экспорт
	
	ПараметрыПрорисовкиКнопокОтправки = Новый Структура;	
	ПараметрыПрорисовкиКнопокОтправки.Вставить("ГруппаОтправкаВКонтролирующийОрган", Истина);
	ПараметрыПрорисовкиКнопокОтправки.Вставить("ПроверитьВИнтернете", Ложь);
	
	Возврат ПараметрыПрорисовкиКнопокОтправки;
	
КонецФункции

#КонецОбласти