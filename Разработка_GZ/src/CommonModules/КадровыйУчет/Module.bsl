////////////////////////////////////////////////////////////////////////////////
// КадровыйУчет: методы кадрового учета, работающие на стороне сервера.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПолучениеКадровыхДанных

// Возвращает таблицу значений заполненную данными физических лиц, перечисленными в 
// параметре СписокНеобходимыхДанных.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//  СписокФизическихЛиц - Массив ссылок на элементы справочника физические лица или
//						  СправочникСсылка.ФизическиеЛица.
//  КадровыеДанные 	- 	Строка - список полей данных, перечисленных через запятую.
//					-	Массив строк с полями данных, которые необходимо получить.
//	ДатаПолученияДанных	- дата на которую необходимо получить данные физических лиц, 
//						  применимо к данным, носящим периодический характер (например - ФИО).
//						  Если дату не указывать, будут получены самые последние данные.
//
//  ПоляОтбораПериодическихДанных - Структура, в качестве ключа указывается имя таблицы, содержащей
//						  периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц).
//						  В качестве значений коллекция условий отбора, 
//						  соединяемых по "И" и применяемых к регистру сведений.
//						  Коллекция строки которой имеют поля.
//							 * ЛевоеЗначение - строка, имя поля регистра сведений.
//							 * ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//							 * ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//	Список полей, допустимых в параметре КадровыеДанные см. КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая обязательные поля ФизическоеЛицо, Период поля запрошенных
//						 кадровых данных.
//
Функция КадровыеДанныеФизическихЛиц(ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	// Подготовим Запрос и Менеджер временных таблиц.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТКадровыеДанныеФизическихЛиц.
	СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, ДатаПолученияДанных, ПоляОтбораПериодическихДанных);
	
	// Выберем кадровые данные физлиц из временной таблицы.
	Запрос.Текст = "ВЫБРАТЬ КадровыеДанныеФизическихЛиц.* ИЗ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц";
	КадровыеДанныеФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Возврат КадровыеДанныеФизическихЛиц;
	
КонецФункции

// Возвращает таблицу значений заполненную данными сотрудников, перечисленными в 
// параметре СписокНеобходимыхДанных.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//  СписокСотрудников - Массив ссылок на элементы справочника сотрудники или
//						  СправочникСсылка.Сотрудники.
//  КадровыеДанные - 	Строка - список полей данных, перечисленных через запятую 
//						или Массив строк с полями данных, которые необходимо получить.
//	ДатаПолученияДанных	- дата на которую необходимо получить данные сотрудников, 
//						применимо к данным, носящим периодический характер.
//						Если дату не указывать, будут получены самые последние данные.
//
//
//  ПоляОтбораПериодическихДанных - Структура, в качестве ключа указывается имя таблицы, содержащей
//									периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц).
//									В качестве значений коллекция условий отбора, 
//									соединяемых по "И" и применяемых к регистру сведений.
//									Коллекция строки которой имеют поля.
//										* ЛевоеЗначение - строка, имя поля регистра сведений.
//										* ВидСравнения - строка, вид сравнения, допустимый в языке запросов.
//										* ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение.
//
//	Список полей, допустимых в параметре КадровыеДанные см. КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая запрошенные данные.
//
Функция КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	// Подготовим Запрос и Менеджер временных таблиц.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТКадровыеДанныеФизическихЛиц.
	СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	// Выберем кадровые данные физлиц из временной таблицы.
	Запрос.Текст = "ВЫБРАТЬ КадровыеДанныеСотрудников.* ИЗ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат КадровыеДанныеСотрудников;
	
КонецФункции

// Возвращает таблицу значений заполненную физическими лицами, работавшими в организации в
// заданном периоде.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//  Организация - СправочникСсылка.Организации - организация по которой необходимо отобрать работавших
//				  в ней физических лиц.
//	НачалоПериода 		- Дата
//	ОкончаниеПериода 	- Дата
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение, по которому необходимо отобрать
//					работавших физических лиц. Если подразделение не указывать - будут отобраны физические
//					лица по всей организации.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Период (Дата, соответствует указанному параметру
//                       ОкончаниеПериода) и ФизическоеЛицо.
//
Функция ФизическиеЛицаРаботавшиеВОрганизации(ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТФизическиеЛицаРаботавшиеВОрганизации.
	СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ФизическиеЛицаРаботавшиеВОрганизации.* ИЗ ВТФизическиеЛицаРаботавшиеВОрганизации КАК ФизическиеЛицаРаботавшиеВОрганизации";
	
	ФизическиеЛицаРаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат ФизическиеЛицаРаботавшиеВОрганизации;
	
КонецФункции

// Возвращает таблицу значений заполненную данными документов физических лиц.
//
// Параметры:
//  СписокФизическихЛиц - Массив ссылок на элементы справочника физические лица или
//						  СправочникСсылка.ФизическиеЛица.
//	ТолькоРазрешенные - Булево
//  ВидДокумента		- СправочникСсылка.ВидыДокументовФизическихЛиц, вид необходимого 
//						  документа.
//	ДатаПолученияДанных	- дата на которую необходимо получить данные документов физических лиц, 
//						если дату не указывать, данные будут получены на текущую дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля.
//						Период - Дата
//						ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//						ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
//						Серия - Строка
//						Номер - Строка 
//						ДатаВыдачи - Дата
//						КемВыдан Строка
//						КодПодразделения - Строка
//						ЯвляетсяДокументомУдостоверяющимЛичность - Булево
//						Представление - Строка
//
Функция ДокументыФизическихЛиц(СписокФизическихЛиц, ТолькоРазрешенные, ВидДокумента = Неопределено, ДатаПолученияДанных = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(),ДатаПолученияДанных));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическихЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)";
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(), ДатаПолученияДанных);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Физлицо", " В ", СписокФизическихЛиц);
	Если ВидДокумента <> Неопределено Тогда
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидДокумента", " = ", ВидДокумента);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ДокументыФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		ТолькоРазрешенные,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты),
		ПараметрыПостроения,
		"ВТУдостоверенияЛичности");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическихЛица.Период,
	|	ФизическихЛица.ФизическоеЛицо,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)) КАК ВидДокумента,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Серия, """") КАК Серия,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыдачи,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.СрокДействия, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК СрокДействия,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.КемВыдан, """") КАК КемВыдан,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.КодПодразделения, """") КАК КодПодразделения,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность, НЕОПРЕДЕЛЕНО) КАК ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ИмяЛатиницей, """") КАК ИмяЛатиницей,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ФамилияЛатиницей, """") КАК ФамилияЛатиницей,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Представление, """") КАК Представление
	|ИЗ
	|	ВТФизическихЛица КАК ФизическихЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдостоверенияЛичности КАК ДокументыФизическихЛиц
	|		ПО ФизическихЛица.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Различаются следующие подмножества сотрудников:
//		* Сотрудники принятые только по трудовым договорам (1).
//		* Сотрудники с которыми только заключен договор ГПХ (2).
//		* Сотрудники принятые по трудовым договорам и с которыми заключены договоры ГПХ (3).
//
// Для получения сотрудников используются параметры:
//		* РаботникиПоТрудовымДоговорам.
//		* РаботникиПоДоговорамГПХ.
//
// Поддерживаются следующие сочетания параметров:
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Ложь
//			В выборку войдет только 1 подмножество сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Неопределено
//			В выборку войдут 1 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдут 1,2 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Неопределено
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдут 2 и 3 подмножества сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Ложь
//		РаботникиПоДоговорамГПХ = Истина
//			В выборку войдет только 2 подмножество сотрудников.
//
//		РаботникиПоТрудовымДоговорам = Ложь
//		РаботникиПоДоговорамГПХ = Ложь
//			Сформирует пустую таблицу.
//
// При другом сочетании параметров будет вызвано исключение.
//
// Различаются следующие сочетания:
//		РаботникиПоТрудовымДоговорам = Истина
//		ПодработкиСотрудниковПоТрудовымДоговорам = Ложь
//			В выборку попадут только головные сотрудники.
//
//		РаботникиПоТрудовымДоговорам = Истина
//		ПодработкиСотрудниковПоТрудовымДоговорам = Истина
//			В выборку попадут как головные сотрудники, так и подработки.
//
//		РаботникиПоТрудовымДоговорам = Неопределено
//		ПодработкиСотрудниковПоТрудовымДоговорам = Истина
//			В выборку попадут только подработки.
//
// При значении параметра РаботникиПоТрудовымДоговорам = Ложь, значение параметра
// ПодработкиСотрудниковПоТрудовымДоговорам игнорируется. Т.е. в выборку не попадут
// ни головные сотрудники ни подработки. 
//
// При отборе подработок учитываются те же параметры отбора по периоду, организации
// и подразделению, что применяются для отбора головных сотрудников.

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//				* Организация 		- СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//										независимо от организации.
//				* ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации.
//													По умолчанию - ЛОЖЬ
//				* Подразделение 		- СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//										и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники.
//				* СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица, если параметр опустить,
//										в таблицу войдут сотрудники всех физических лиц когда либо работавших в Организации.
//				* НачалоПериода 		- Дата, значение по умолчанию '00010101'. Если параметр устанавливается, параметр ОкончаниеПериода
//										обязателен к заполнению.
//				* ОкончаниеПериода	- Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//										ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//										параметр не указан, выборка будет производиться на текущую дату сеанса.
//				* КадровыеДанные		- Строка, содержит список полей кадровых данных, см. описание к функции КадровыеДанныеСотрудников.
//										См. описание параметра КадровыеДанные функции КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников.
//				* Отборы				- Массив, структур описывающих отборы сотрудников
//										см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор,
//										допустимые отборы описаны см. КритерииПоискаСотрудниковПоКоллекцииОтборов.
//				* РаботникиПоТрудовымДоговорам				- Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//																Неопределено - неважно наличие ТД).
//				* ПодработкиРаботниковПоТрудовымДоговорам	- Булево.
//				* РаботникиПоДоговорамГПХ					- Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//																действующих договоров ГПХ, Неопределено - неважно наличие действующего
//																договора ГПХ).
//				* ВыбрасыватьИсключениеДоступа				- Булево, если Ложь будут проверяться право чтения к таблицам из которых
//																получаются данные и если такого права нет - запросы выполняться не будут
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизаций();
	ПараметрыПолучения.Вставить("СписокФизическихЛиц");
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//				Организация 		- СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//										независимо от организации.
//				ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации.
//												По умолчанию - ЛОЖЬ
//				Подразделение 		- СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//										и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники.
//				СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица, если параметр опустить,
//										в таблицу войдут сотрудники всех физических лиц когда либо работавших в Организации.
//				НачалоПериода 		- Дата, значение по умолчанию '00010101'. Если параметр устанавливается, параметр ОкончаниеПериода
//										обязателен к заполнению.
//				ОкончаниеПериода	- Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//										ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//										параметр не указан, выборка будет производиться на текущую дату сеанса.
//				КадровыеДанные		- Строка, содержит список полей кадровых данных, см. описание к функции КадровыеДанныеСотрудников.
//				Отборы				- Массив, структур описывающих отборы сотрудников
//										см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор,
//										допустимые отборы описаны см. КритерииПоискаСотрудниковПоКоллекцииОтборов.
//
Функция ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	ПараметрыПолучения.ПодработкиРаботниковПоТрудовымДоговорам = Истина;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций.
//
// Возвращаемое значение:
//	Структура - Содержит ключи:
//				* Организация 		- СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//										независимо от организации.
//				* ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации.
//													По умолчанию - ЛОЖЬ
//				* Подразделение 		- СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//										и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники.
//				* ИмяВТФизическиеЛица - Строка, имя временной таблицы, содержащей физические лица (по умолчанию "ВТФизическиеЛица").
//				* ИмяПоляФизическоеЛицо - Строка, имя поля - Физическое лицо (по умолчанию "ФизическоеЛицо").
//				* НачалоПериода 		- Дата, значение по умолчанию '00010101'. Если параметр устанавливается, параметр ОкончаниеПериода
//										обязателен к заполнению.
//				* ОкончаниеПериода 	- Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//										ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//										параметр не указан, выборка будет производиться на текущую дату сеанса.
//				* КадровыеДанные 		- Строка, содержит список полей кадровых данных, см. описание к функции КадровыеДанныеСотрудников.
//				* Отборы				- Массив, структур описывающих отборы сотрудников
//										см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор,
//										допустимые отборы описаны см. КритерииПоискаСотрудниковПоКоллекцииОтборов.
//				* РаботникиПоТрудовымДоговорам 				- Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//																Неопределено - неважно наличие ТД).
//				* ПодработкиРаботниковПоТрудовымДоговорам 	- Булево.
//				* РаботникиПоДоговорамГПХ 					- Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//																действующих договоров ГПХ, Неопределено - неважно наличие действующего
//																договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт
	
	ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизаций();
	ПараметрыПолучения.Вставить("ИмяВТФизическиеЛица", "ВТФизическиеЛица");
	ПараметрыПолучения.Вставить("ИмяПоляФизическоеЛицо", "ФизическоеЛицо");
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Возвращает таблицу значений, заполненную сотрудниками.
//
// Параметры:
//	ТолькоРазрешенные - Булево
//	Параметры - Структура, подготовленная с помощью методов
//	            ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц,
//	            ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля
//							* Период 			- Дата, равен значению ключа ОкончаниеПериода параметра Параметры
//						 	* Сотрудник			- СправочникСсылка.Сотрудники
//							* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//							<кадровые данные>	- указанные в ключе КадровыеДанные параметра Параметры.
//
Функция СотрудникиОрганизации(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыеДанные = Параметры.КадровыеДанные;
	Если ЗначениеЗаполнено(КадровыеДанные) Тогда
		
		Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
			КадровыеДанные = СтрРазделить(КадровыеДанные, ", ", Ложь);
		КонецЕсли;
		
		ТекстЗапросаКадровыхДанных = "СотрудникиОрганизации.ФизическоеЛицо";
		Для каждого ИмяКадровыхДанных Из КадровыеДанные Цикл
			ТекстЗапросаКадровыхДанных = ТекстЗапросаКадровыхДанных + ",
				|	СотрудникиОрганизации." + ИмяКадровыхДанных;
		КонецЦикла;
		
	Иначе
		ТекстЗапросаКадровыхДанных = "";
	КонецЕсли; 
	
	ЗарплатаКадры.ДополнитьКадровымиДаннымиНастройкиПорядкаСписка(Параметры.КадровыеДанные);
	
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СотрудникиОрганизации.Период,
		|	СотрудникиОрганизации.Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
		
	Если Не ПустаяСтрока(ТекстЗапросаКадровыхДанных) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиОрганизации.ФизическоеЛицо", ТекстЗапросаКадровыхДанных);
	КонецЕсли; 
	
	ЗарплатаКадры.ДополнитьТекстЗапросаУпорядочиваниемСотрудниковПоВТСДаннымиПорядка(Запрос, "СотрудникиОрганизации");
	
	СотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат СотрудникиОрганизации;
	
КонецФункции

// Возвращает таблицу значений содержащую поля ФизическоеЛицо и Сотрудник. Сотрудник отбирается по принципам:
//		- Работает на указанный период.
//		- Выбирается сотрудник, работающий по основному месту работы, если такового не существует, выбирается
//			сотрудник, работающий по совместительству, принятый на наиболее раннюю дату.
//
// Параметры:
//			СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица или 
//								- СправочникСсылка.ФизическиеЛица
//								- Неопределено - в таблицу войдут "основные" сотрудники всех
//									физических лиц когда либо работавших в организации.
//			ТолькоРазрешенные	- Булево
//			Организация			- СправочникСсылка.Организации
//			Период				- Дата
//
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Сотрудник и соответствующее сотруднику ФизическоеЛицо.
//
Функция ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, ТолькоРазрешенные, Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, Организация, Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ОсновныеСотрудникиФизическихЛиц.* ИЗ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц";
	
	ОсновныеСотрудникиФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Возврат ОсновныеСотрудникиФизическихЛиц;
	
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//
// Параметры:
//  РегистраторОбъект
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения.
//	КадровыеДвижения - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		Сотрудник
//		ГоловнаяОрганизация
//		Организация
//		Подразделение
//		Должность
//		ВидЗанятости
//	ТолькоБронированиеПозиции	- Булево
//	Записывать					- Булево
//
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ТолькоБронированиеПозиции = Ложь, Записывать = Истина) Экспорт
	
	КадровыйУчетВнутренний.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ТолькоБронированиеПозиции, Записывать);
	
КонецПроцедуры

// Заполняет движения документа по регистру сведений ВидыЗанятостиСотрудников
//
// Параметры:
//	Движения						- коллекция движений, в которой необходимо заполнить кадровые движения.
//	КоллекцияДвиженийВидовЗанятости - таблица значений с полями:
//		Сотрудник
//		ГоловнаяОрганизация
//		ФизическоеЛицо
//		ВидЗанятости
//		ДействуетДо
//	Записывать						- Булево
//
Процедура СформироватьДвиженияВидовЗанятостиСотрудников(Движения, КоллекцияВидовЗанятости, Записывать = Истина) Экспорт
	
	Для Каждого СтрокаКоллекции Из КоллекцияВидовЗанятости Цикл
		
		Запись = Движения.ВидыЗанятостиСотрудников.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаКоллекции);
		
	КонецЦикла;
	
	Если Движения.ВидыЗанятостиСотрудников.Количество() > 0 Тогда
		
		Если Записывать Тогда
			Движения.ВидыЗанятостиСотрудников.Записать();
			Движения.ВидыЗанятостиСотрудников.Записывать = Ложь;
		Иначе
			Движения.ВидыЗанятостиСотрудников.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает ссылку на физическое лицо, найденное по переданным фамилии, имени, отчеству СНИЛС и организации 
// (см. функцию ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ФизЛицоПоФИО).
//
// Параметры:
//  Фамилия		- Строка - Фамилия физического лица.
//  Имя			- Строка - Имя физического лица.
//  Отчество	- Строка - Отчество физического лица.
//  СНИЛС		- Строка - СНИЛС физического лица.
//  Организация - СправочникСсылка.Организации - организация, в которой работает физическое лицо.
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица
//
Функция ФизическоеЛицоПоФИОСНИЛСИОрганизации(Фамилия, Имя, Отчество, СНИЛС, Организация) Экспорт
	
	ВозвращаемоеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	СписокФизическихЛиц = ФизическиеЛицаЗарплатаКадры.ФизическиеЛицаПоФИОИСНИЛС(Фамилия, Имя, Отчество, СНИЛС);
	
	Если СписокФизическихЛиц.Количество() > 0 Тогда
		
		Параметры = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		Параметры.Организация = Организация;
		Параметры.ОкончаниеПериода = ТекущаяДатаСеанса();
		Параметры.СписокФизическихЛиц = СписокФизическихЛиц;
		
		СотрудникиФизическихЛиц = СотрудникиОрганизации(Истина, Параметры);
		Если СотрудникиФизическихЛиц.Количество() > 0 Тогда
			ВозвращаемоеЗначение = СотрудникиФизическихЛиц[0].ФизическоеЛицо;
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение; 
	
КонецФункции

// Возвращает таблицу значений в строках которой содержится информация о периодах
// изменения (регистрации) фамилии, имени и отчества физических лиц.
//
// Параметры:
//		СписокФизическихЛиц - Массив, ссылок справочника ФизическиеЛица
//							- СправочникСсылка.ФизическиеЛица.
//
// Возвращаемое значение:
//		ТаблицаЗначений - содержит колонки:
//			* Период			- Дата
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Фамилия			- Строка
//			* Имя				- Строка
//			* Отчество			- Строка
//
Функция ПериодыИзмененияФИОФизическихЛиц(СписокФизическихЛиц) Экспорт
	
	Если ТипЗнч(СписокФизическихЛиц) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокФизическихЛиц);
	Иначе
		ФизическиеЛица = СписокФизическихЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", ФизическиеЛица);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	ФизическиеЛица.Ссылка
		|ПОМЕСТИТЬ ВТОтборФизическихЛиц
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)";
		
	Запрос.Выполнить();
	
	ОписательВТ = ОписательВременныхТаблицДляСоздатьВТИсторияИзмененияФИОФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц,
		"ВТОтборФизическихЛиц",
		"Ссылка");
	
	РезультатЗапроса = СоздатьВТИсторияИзмененияФИОФизическихЛиц(Истина, ОписательВТ, "");
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Возвращает объект справочника ФизическиеЛица, созданный по переданным фамилии,
// имени, отчеству и другим данным (см. параметр ДанныеФизическогоЛица).
//
// Параметры:
//		ФИО						- Строка, содержит фамилию, имя и отчество
//								- Структура с ключами:
//									* Фамилия	- Строка
//									* Имя		- Строка
//									* Отчество	- Строка
//		ДанныеФизическогоЛица	- Структура, содержащая ключи одноименные реквизитам (включая стандартные)
//									справочника ФизическиеЛица, за исключением реквизитов:
//									* Наименование			- Строка,
//									* ФИО					- Строка,
//									* УточнениеНаименования	- Строка,
//									* КонтактнаяИнформация	- Массив структур, в котором можно передать
//										контактную информацию в ключах:
//											* ЗначенияПолей,
//											* ВидИнформации,
//											* ТипИнформации
//		ПериодДанных			- Дата, дата на которую будет зарегистрирована запись о ФИО.
//
// Возвращаемое значение:
//		СправочникОбъект.ФизическиеЛица
//
Функция НовоеФизическоеЛицо(Знач ФИО, Знач ДанныеФизическогоЛица = Неопределено, Знач ПериодДанных = Неопределено) Экспорт
	
	Если ТипЗнч(ФИО) = Тип("Строка") Тогда
		ФамилияИмяОтчество = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФИО);
	Иначе
		ФамилияИмяОтчество = Новый Структура("Фамилия,Имя,Отчество");
		ЗаполнитьЗначенияСвойств(ФамилияИмяОтчество, ФИО);
	КонецЕсли;
	
	УточнениеНаименования = "";
	Если ДанныеФизическогоЛица <> Неопределено
		И ДанныеФизическогоЛица.Свойство("УточнениеНаименования")
		И ЗначениеЗаполнено(ДанныеФизическогоЛица.УточнениеНаименования) Тогда
		
		УточнениеНаименования = ДанныеФизическогоЛица.УточнениеНаименования;
		
	КонецЕсли;
	
	Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
		ФамилияИмяОтчество.Фамилия, ФамилияИмяОтчество.Имя, ФамилияИмяОтчество.Отчество, УточнениеНаименования);
	
	ФизическоеЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	ФизическоеЛицоОбъект.Наименование = Наименование;
	ФизическоеЛицоОбъект.УточнениеНаименования = УточнениеНаименования;
	
	ФизическоеЛицоОбъект.ФИО = ФамилияИмяОтчество.Фамилия + " " + ФамилияИмяОтчество.Имя + " " + ФамилияИмяОтчество.Отчество;
	ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект, ФамилияИмяОтчество, "Фамилия,Имя,Отчество");
	ФизическоеЛицоОбъект.ДополнительныеСвойства.Вставить("ФИОУстановлены", Истина);
	
	Если ДанныеФизическогоЛица <> Неопределено Тогда
		
		ИсключаемыеСвойства = "";
		Если ДанныеФизическогоЛица.Свойство("Наименование") Тогда
			ИсключаемыеСвойства = "Наименование";
		КонецЕсли;
		
		Если ДанныеФизическогоЛица.Свойство("ФИО") Тогда
			ИсключаемыеСвойства = ?(ПустаяСтрока(ИсключаемыеСвойства), "", ИсключаемыеСвойства + ",") + "ФИО";
		КонецЕсли;
		
		Если ДанныеФизическогоЛица.Свойство("УточнениеНаименования")Тогда
			ИсключаемыеСвойства = ?(ПустаяСтрока(ИсключаемыеСвойства), "", ИсключаемыеСвойства + ",") + "УточнениеНаименования";
		КонецЕсли;
		
		Если ДанныеФизическогоЛица.Свойство("Ссылка") Тогда
			ИсключаемыеСвойства = ?(ПустаяСтрока(ИсключаемыеСвойства), "", ИсключаемыеСвойства + ",") + "Ссылка";
		КонецЕсли;
		
		Если ДанныеФизическогоЛица.Свойство("КонтактнаяИнформация") Тогда
			
			ИсключаемыеСвойства = ?(ПустаяСтрока(ИсключаемыеСвойства), "", ИсключаемыеСвойства + ",") + "КонтактнаяИнформация";
			Для каждого ОписаниеКонтактнойИнформации Из ДанныеФизическогоЛица.КонтактнаяИнформация Цикл
				
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ФизическоеЛицоОбъект,
					ОписаниеКонтактнойИнформации.ЗначенияПолей, ОписаниеКонтактнойИнформации.ВидИнформации, ОписаниеКонтактнойИнформации.ТипИнформации);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ФизическоеЛицоОбъект, ДанныеФизическогоЛица, , ИсключаемыеСвойства);
		
		Если ДанныеФизическогоЛица.Свойство("Ссылка") 
			И ЗначениеЗаполнено(ДанныеФизическогоЛица.Ссылка) Тогда
			
			ФизическоеЛицоОбъект.УстановитьСсылкуНового(ДанныеФизическогоЛица.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицоОбъект.Пол) Тогда
		ФизическоеЛицоОбъект.Пол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(ФамилияИмяОтчество.Отчество);
	КонецЕсли;
	
	ФизическоеЛицоОбъект.Записать();
	
	Если Не ПустаяСтрока(Наименование) Тогда
		
		Набор = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
		Набор.Отбор.ФизическоеЛицо.Установить(ФизическоеЛицоОбъект.Ссылка);
		
		Запись = Набор.Добавить();
		Запись.Фамилия 	= ФизическоеЛицоОбъект.Фамилия;
		Запись.Имя	 	= ФизическоеЛицоОбъект.Имя;
		Запись.Отчество = ФизическоеЛицоОбъект.Отчество;
		Запись.ФизическоеЛицо = ФизическоеЛицоОбъект.Ссылка;
		
		Если ПериодДанных = Неопределено Тогда
			Запись.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
		Иначе
			Запись.Период = ПериодДанных;
		КонецЕсли;
		
		Набор.Записать();
		
	КонецЕсли;
	
	Возврат ФизическоеЛицоОбъект;
	
КонецФункции

#КонецОбласти

// Функция рассчитывает численность всех работников, женщин и инвалидов.
// При этом за переданный период считается среднесписочная численность, 
// а на конец заданного периода - списочная численность.
//
// Параметры:
//		Организация		- СправочникСсылка.Организации
//		НачалоПериода	- Дата
//		КонецПериода	- Дата
//
// Возвращаемое значение:
//		Структура - см. СтатистикаПерсонала.ДанныеОЧисленности 
//	
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода, ПоГоловнойОрганизации = Ложь) Экспорт 
	Возврат СтатистикаПерсонала.СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода, ПоГоловнойОрганизации);
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Возвращает настроенную структуру параметров для СоздатьВТСотрудникиОрганизаций
// для получения всех возможных рабочих мест. см. функцию ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
//
Функция ПараметрыПолученияРабочихМестВОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Возвращает настроенную структуру параметров для СоздатьВТСотрудникиОрганизаций
// для получения всех возможных рабочих мест. см. функцию ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице.
//
Функция ПараметрыПолученияРабочихМестВОрганизацийПоВременнойТаблице() Экспорт
	
	ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	Если ПривилегированныйРежим() Или ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
		ПараметрыПолучения.РаботникиПоДоговорамГПХ = Истина;
	КонецЕсли;
	
	Возврат ПараметрыПолучения;
	
КонецФункции

// Выводит сообщения пользователю по физическим лицам, которые не работают в указанный период.
// Вызывается из документов в обработчике ОбработкаПроверкиЗаполнения.
//
// Параметры:
//		СписокФизическихЛиц							- Массив ссылок на элементы справочника ФизическиеЛица или СправочникСсылка.ФизическиеЛица.
//		ПараметрыПолученияСотрудниковОрганизаций 	- Структура, см. функцию ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц
//		Отказ										- Булево - Если установить данному параметру значение Истина, то будет выполнен отказ от
//														продолжения работы после выполнения проверки заполнения.
//		ПараметрыСообщения							- Структура
//														* ИмяПоляСотрудник - Строка - наименование реквизита формы.
//														* ИмяОбъекта - Строка - путь к данным (путь к реквизиту формы).
//
Процедура ПроверитьРаботающихФизическихЛиц(СписокФизическихЛиц, ПараметрыПолученияСотрудниковОрганизаций, Отказ, ПараметрыСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыПолученияСотрудниковОрганизаций.Организация));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	Запрос.Выполнить();
	
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц = СписокФизическихЛиц;
	
	УстановитьПривилегированныйРежим(Истина);
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	УстановитьПривилегированныйРежим(Ложь);
	
	СообщитьОНеработающихСотрудниках(Запрос.МенеджерВременныхТаблиц, ПараметрыПолученияСотрудниковОрганизаций, Отказ, ПараметрыСообщения, Истина);
	
КонецПроцедуры

// Выводит сообщения пользователю по сотрудникам, которые не работают в указанный период.
// Вызывается из документов в обработчике ОбработкаПроверкиЗаполнения.
//
// Параметры:
//		СписокСотрудников							- Массив ссылок на элементы справочника Сотрудники или СправочникСсылка.Сотрудники.
//		ПараметрыПолученияСотрудниковОрганизаций 	- Структура, см. функцию ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице
//		Отказ										- Булево - Если установить данному параметру значение Истина, то будет выполнен
//														отказ от продолжения работы после выполнения проверки заполнения.
//		ПараметрыСообщения 							- Структура
//														* ИмяПоляСотрудник - Строка - наименование реквизита формы.
//														* ИмяОбъекта - Строка - путь к данным (путь к реквизиту формы).
//
Процедура ПроверитьРаботающихСотрудников(СписокСотрудников, ПараметрыПолученияСотрудниковОрганизаций, Отказ, ПараметрыСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	УстановитьПривилегированныйРежим(Ложь);
	
	СообщитьОНеработающихСотрудниках(Запрос.МенеджерВременныхТаблиц, ПараметрыПолученияСотрудниковОрганизаций, Отказ, ПараметрыСообщения);
	
КонецПроцедуры

// Выводит сообщения пользователю по сотрудникам табличной части документа, с индивидуальными датами начала и окончания периодов.
// Вызывается из документов в обработчике ОбработкаПроверкиЗаполнения.
//
// Параметры:
//		ДокументОбъект				- ДокументОбъект
//		ИмяТабличнойЧастиСотрудники	- Строка
//		ИмяРеквизитаДатаНачала		- Строка
//		ИмяРеквизитаДатаОкончания	- Строка
//		Отказ						- Булево - Если установить данному параметру значение Истина, то будет выполнен
//										отказ от продолжения работы после выполнения проверки заполнения.
//
Процедура ПроверитьРаботающихСотрудниковТабличнойЧастиДокумента(ДокументОбъект, ИмяТабличнойЧастиСотрудники, ИмяРеквизитаДатаНачала, ИмяРеквизитаДатаОкончания, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Сотрудники", ДокументОбъект[ИмяТабличнойЧастиСотрудники].Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.НомерСтроки КАК НомерСтроки,
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	Сотрудники.ДатаНачала КАК НачалоПериода,
		|	Сотрудники.ДатаОкончания КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&Сотрудники КАК Сотрудники";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.ДатаНачала", "Сотрудники." + ИмяРеквизитаДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Сотрудники.ДатаОкончания", "Сотрудники." + ИмяРеквизитаДатаОкончания);
	
	Запрос.Выполнить();
	
	ПараметрыПоВРеменнойТаблице = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	ПараметрыПоВРеменнойТаблице.ПериодВОдинДень = (ИмяРеквизитаДатаНачала = ИмяРеквизитаДатаОкончания);
	
	УстановитьПривилегированныйРежим(Истина);
	СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Ложь, ПараметрыПоВРеменнойТаблице, "ВТРабочиеМестаСотрудников");
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.НомерСтроки КАК НомерСтроки,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник,
		|	СотрудникиПериоды.НачалоПериода КАК НачалоПериода,
		|	СотрудникиПериоды.ОкончаниеПериода КАК ОкончаниеПериода
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ПО СотрудникиПериоды.Сотрудник = РабочиеМестаСотрудников.Сотрудник
		|ГДЕ
		|	РабочиеМестаСотрудников.Сотрудник ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НеРаботающиеСотрудники = ТаблицаНеработающихСотрудников();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаНеРаботающиеСотрудники = НеРаботающиеСотрудники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНеРаботающиеСотрудники, Выборка);
			
			СтрокаНеРаботающиеСотрудники.ПараметрыСообщения = Новый Структура("ИмяОбъекта,ИмяПоляСотрудник",
				"Объект", ИмяТабличнойЧастиСотрудники + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=; ЧГ=") + "].Сотрудник");
			
		КонецЦикла;
		
		ВывестиСообщенияОНеработающихСотрудниках(НеРаботающиеСотрудники, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНеработающихСотрудниках(МенеджерВременныхТаблиц, ПараметрыПолученияСотрудниковОрганизаций, Отказ, ПараметрыСообщения, ПроверкаРаботающихФизическихЛиц = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ФизическиеЛица.Сотрудник КАК Сотрудник,
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|		ПО ФизическиеЛица.Сотрудник = СотрудникиОрганизации.Сотрудник
		|ГДЕ
		|	СотрудникиОрганизации.Сотрудник ЕСТЬ NULL ";
	
	Если ПроверкаРаботающихФизическихЛиц Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПО ФизическиеЛица.Сотрудник = СотрудникиОрганизации.Сотрудник", "ПО ФизическиеЛица.ФизическоеЛицо = СотрудникиОрганизации.ФизическоеЛицо");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		НачалоПериода = НачалоДня(ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода);
		ОкончаниеПериода = НачалоДня(ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода);
		
		НеРаботающиеСотрудники = ТаблицаНеработающихСотрудников();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ПроверкаРаботающихФизическихЛиц Тогда
				ОбъектПроверки = Выборка.ФизическоеЛицо;
			Иначе
				ОбъектПроверки = Выборка.Сотрудник;
			КонецЕсли;
			
			НоваяСтрокаНеРаботающиеСотрудники = НеРаботающиеСотрудники.Добавить();
			
			НоваяСтрокаНеРаботающиеСотрудники.Сотрудник = ОбъектПроверки;
			НоваяСтрокаНеРаботающиеСотрудники.НачалоПериода = НачалоПериода;
			НоваяСтрокаНеРаботающиеСотрудники.ОкончаниеПериода = ОкончаниеПериода;
			НоваяСтрокаНеРаботающиеСотрудники.ПараметрыСообщения = ПараметрыСообщения;
			
		КонецЦикла;
		
		ВывестиСообщенияОНеработающихСотрудниках(НеРаботающиеСотрудники, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаНеработающихСотрудников()
	
	НеРаботающиеСотрудники = Новый ТаблицаЗначений;
	НеРаботающиеСотрудники.Колонки.Добавить("Сотрудник");
	НеРаботающиеСотрудники.Колонки.Добавить("НачалоПериода");
	НеРаботающиеСотрудники.Колонки.Добавить("ОкончаниеПериода");
	НеРаботающиеСотрудники.Колонки.Добавить("ПараметрыСообщения");
	
	Возврат НеРаботающиеСотрудники;
	
КонецФункции

Процедура ВывестиСообщенияОНеработающихСотрудниках(НеРаботающиеСотрудники, Отказ)
	
	ВыведенныеСотрудники = Новый Соответствие;
	
	Для каждого СтрокаНеРаботающиеСотрудники Из НеРаботающиеСотрудники Цикл
		
		Сотрудник = СтрокаНеРаботающиеСотрудники.Сотрудник;
		
		Если ВыведенныеСотрудники.Получить(Сотрудник) = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ВыведенныеСотрудники.Вставить(Сотрудник, Истина);
		
		Если СтрокаНеРаботающиеСотрудники.НачалоПериода = СтрокаНеРаботающиеСотрудники.ОкончаниеПериода
			Или (ЗначениеЗаполнено(СтрокаНеРаботающиеСотрудники.НачалоПериода)
				И Не ЗначениеЗаполнено(СтрокаНеРаботающиеСотрудники.ОкончаниеПериода)) Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сотрудник %1 не работает в организации на дату %2г.'"),
				Сотрудник, Формат(СтрокаНеРаботающиеСотрудники.НачалоПериода, "ДЛФ=Д"));
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сотрудник %1 не работает в организации за период с %2г. по %3г.'"),
				Сотрудник, Формат(СтрокаНеРаботающиеСотрудники.НачалоПериода, "ДЛФ=Д"),
				Формат(СтрокаНеРаботающиеСотрудники.ОкончаниеПериода, "ДЛФ=Д"));
			
		КонецЕсли;
		
		ПараметрыСообщения = СтрокаНеРаботающиеСотрудники.ПараметрыСообщения;
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , ПараметрыСообщения.ИмяПоляСотрудник, ПараметрыСообщения.ИмяОбъекта, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведенияПоКадровомуУчету(ДатаСобытия, Сотрудники, ИсключаемыеСсылки, Отказ, ВидСобытия = Неопределено) Экспорт
	
	СотрудникиДаты = Новый ТаблицаЗначений;
	СотрудникиДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиДаты.Колонки.Добавить("ДатаСобытия", Новый ОписаниеТипов("Дата"));
	СотрудникиДаты.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий")); 
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		СписокСотрудников = Сотрудники;
	КонецЕсли;
	
	Для каждого Сотрудник Из СписокСотрудников Цикл
		
		СтрокаСотрудникиДаты = СотрудникиДаты.Добавить();
		СтрокаСотрудникиДаты.ДатаСобытия = ДатаСобытия;
		СтрокаСотрудникиДаты.Сотрудник = Сотрудник;
		СтрокаСотрудникиДаты.ВидСобытия = ВидСобытия;
		
	КонецЦикла;
	
	ПроверитьВозможностьПроведенияПоКадровомуУчетуТаблицыСотрудников(СотрудникиДаты, ИсключаемыеСсылки, Отказ);
	
КонецПроцедуры

Процедура ПроверитьВозможностьПроведенияПоКадровомуУчетуТаблицыСотрудников(СотрудникиДаты, ИсключаемыеСсылки, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиДаты", СотрудникиДаты);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиДаты.ДатаСобытия,
		|	СотрудникиДаты.Сотрудник,
		|	СотрудникиДаты.ВидСобытия,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиДаты
		|ИЗ
		|	&СотрудникиДаты КАК СотрудникиДаты";
	
	Запрос.Выполнить();
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТСотрудникиДаты", "Сотрудник");
	
	Если ТипЗнч(ИсключаемыеСсылки) <> Тип("Массив") Тогда
		ИсключаемыеСсылкиМассив = Новый Массив;
		ИсключаемыеСсылкиМассив.Добавить(ИсключаемыеСсылки);
	Иначе
		ИсключаемыеСсылкиМассив = ИсключаемыеСсылки;
	КонецЕсли;
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеСсылкиМассив);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СотрудникиСОшибками = Новый Массив;
	
	// Проверка на уникальность событий Прием и Увольнение.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
		|		ПО КадроваяИсторияСотрудников.Сотрудник = СотрудникиДаты.Сотрудник
		|			И (СотрудникиДаты.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)))
		|			И (ВЫБОР
		|				КОГДА СотрудникиДаты.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|					ТОГДА КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|				ИНАЧЕ КадроваяИсторияСотрудников.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
		|			КОНЕЦ)
		|ГДЕ
		|	НЕ КадроваяИсторияСотрудников.ЭтоВозвратноеСобытие
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1, уже зарегистрировано событие ""%2"" (%3), документ противоречит кадровому приказу %4'"),
				Выборка.Сотрудник,
				Выборка.ВидСобытия,
				Формат(Выборка.Период, "ДЛФ=D"),
				Выборка.Регистратор);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
			
			СотрудникиСОшибками.Добавить(Выборка.Сотрудник);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СотрудникиСОшибками", СотрудникиСОшибками);
	
	// Проверка корректности заданного периода Период, должен быть более даты приема,
	// а для событий кадрового перевода менее даты увольнения.
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиДаты.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|ГДЕ
		|	НЕ СотрудникиДаты.Сотрудник В (&СотрудникиСОшибками)
		|	И СотрудникиДаты.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДатыПриема
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
			|	И НЕ КадроваяИсторияСотрудников.ЭтоВозвратноеСобытие
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДатыУвольнения
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ДатыПриема.Сотрудник, ДатыУвольнения.Сотрудник) КАК Сотрудник,
			|	ЕСТЬNULL(ДатыПриема.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриема,
			|	ЕСТЬNULL(ДатыПриема.Регистратор, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) КАК ПриказОПриеме,
			|	ЕСТЬNULL(ДатыУвольнения.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
			|	ЕСТЬNULL(ДатыУвольнения.Регистратор, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) КАК ПриказОбУвольнении,
			|	Сотрудники.ДатаСобытия КАК ДатаСобытия,
			|	Сотрудники.ВидСобытия КАК ВидСобытия
			|ИЗ
			|	ВТСотрудникиДаты КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПриема КАК ДатыПриема
			|		ПО Сотрудники.Сотрудник = ДатыПриема.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыУвольнения КАК ДатыУвольнения
			|		ПО Сотрудники.Сотрудник = ДатыУвольнения.Сотрудник
			|ГДЕ
			|	НЕ Сотрудники.Сотрудник В (&СотрудникиСОшибками)
			|	И Сотрудники.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	ДатаПриема,
			|	ДатаУвольнения";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщенияПользователю = "";
				ДокументПриказ = Неопределено;
				
				Если НачалоДня(Выборка.ДатаПриема) > НачалоДня(Выборка.ДатаСобытия) Тогда
					
					ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По сотруднику %1, невозможно зарегистрировать событие ""%2"" ранее, чем дата приема на работу (%3 - %4)'"),
						Выборка.Сотрудник,
						Выборка.ВидСобытия,
						Формат(Выборка.ДатаПриема, "ДЛФ=D"),
						Выборка.ПриказОПриеме);
					
					ДокументПриказ = Выборка.ПриказОПриеме;
					
				ИначеЕсли Выборка.ДатаУвольнения < Выборка.ДатаСобытия И ЗначениеЗаполнено(Выборка.ДатаУвольнения) Тогда
					
					ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По сотруднику %1, невозможно зарегистрировать событие ""%2"" позднее, чем дата увольнения (%3 - %4)'"),
						Выборка.Сотрудник,
						Выборка.ВидСобытия,
						Формат(Выборка.ДатаУвольнения, "ДЛФ=D"),
						Выборка.ПриказОбУвольнении);
						
					ДокументПриказ = Выборка.ПриказОбУвольнении;
					
				КонецЕсли;
				
				Если Не ПустаяСтрока(ТекстСообщенияПользователю) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщенияПользователю,
						ДокументПриказ,
						,
						,
						Отказ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка того, что прием на работу самое первое событие.
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиДаты.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|ГДЕ
		|	НЕ СотрудникиДаты.Сотрудник В (&СотрудникиСОшибками)
		|	И СотрудникиДаты.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТРанниеПериоды
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ИЗ
			|	ВТРанниеПериоды КАК РанниеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО РанниеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И РанниеПериоды.Период = КадроваяИсторияСотрудников.Период
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
			|		ПО РанниеПериоды.Сотрудник = СотрудникиДаты.Сотрудник
			|			И (СотрудникиДаты.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
			|			И РанниеПериоды.Период < СотрудникиДаты.ДатаСобытия
			|ГДЕ
			|	НЕ СотрудникиДаты.Сотрудник В (&СотрудникиСОшибками)
			|	И НЕ КадроваяИсторияСотрудников.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудника %1 необходимо принять на работу ранее кадрового события ""%2"" (%3 - %4)'"),
					Выборка.Сотрудник,
					Выборка.ВидСобытия,
					Формат(Выборка.Период, "ДЛФ=D"),
					Выборка.Регистратор);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка того, что увольнение самое последнее событие.
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиДаты.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиДаты КАК СотрудникиДаты
		|ГДЕ
		|	НЕ СотрудникиДаты.Сотрудник В (&СотрудникиСОшибками)
		|	И СотрудникиДаты.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТПоздниеПериоды
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	НЕ КадроваяИсторияСотрудников.ЭтоВозвратноеСобытие
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ИЗ
			|	ВТПоздниеПериоды КАК ПоздниеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО ПоздниеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И ПоздниеПериоды.Период = КадроваяИсторияСотрудников.Период
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
			|		ПО ПоздниеПериоды.Сотрудник = СотрудникиДаты.Сотрудник
			|			И (СотрудникиДаты.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
			|			И (НАЧАЛОПЕРИОДА(ПоздниеПериоды.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(СотрудникиДаты.ДатаСобытия, ДЕНЬ))
			|ГДЕ
			|	НЕ СотрудникиДаты.Сотрудник В (&СотрудникиСОшибками)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудника %1 необходимо уволить позднее кадрового события ""%2"" (%3 - %4)'"),
					Выборка.Сотрудник,
					Выборка.ВидСобытия,
					Формат(Выборка.Период, "ДЛФ=D"),
					Выборка.Регистратор);
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка того, что на период, равный ДатаСобытия, еще нет зарегистрированных событий.
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.Период КАК Период,
		|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиДаты КАК СотрудникиДаты
		|		ПО КадроваяИсторияСотрудников.Сотрудник = СотрудникиДаты.Сотрудник
		|			И КадроваяИсторияСотрудников.Период = СотрудникиДаты.ДатаСобытия
		|ГДЕ
		|	НЕ КадроваяИсторияСотрудников.Сотрудник В (&СотрудникиСОшибками)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1, дата кадрового события (%2) противоречит кадровому приказу %3'"),
				Выборка.Сотрудник,
				Формат(Выборка.Период, "ДЛФ=D"),
				Выборка.Регистратор);
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщенияПользователю,
				Выборка.Регистратор,
				,
				,
				Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеСотрудниковОрганизации(Организация, Сотрудник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	ГоловнаяОрганизацияСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ГоловнаяОрганизация");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ГоловнаяОрганизацияСотрудника <> ГоловнаяОрганизация Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1 не соответствует организации %2.'"),
			Сотрудник,
			Организация);
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.Сотрудник",
			,
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТОтбораСотрудников, ДатаРожденияВТаблице = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ДатаРожденияВТаблице Тогда
		
		// Если даты рождения в таблице нет, нужно ее дополнительно получить.
		ИмяВТСпискаСотрудников = "ВТКадровыеДанныеСотрудниковДляПроверкиЗаполненностиДатыРождения";
		
		ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			ИмяВТОтбораСотрудников);
		
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ИмяВТСпискаСотрудников;
		СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДатаРождения");
		
	Иначе
		ИмяВТСпискаСотрудников = ИмяВТОтбораСотрудников;
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТОтбораСотрудников КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтбораСотрудников", ИмяВТСпискаСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Все хорошо, нет сотрудников с незаполненной датой рождения.
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	// Если записей больше 9, выводим только 5 из них.
	ВсегоОшибок = Выборка.Количество();
	КоличествоСообщений = ВсегоОшибок;
	Если КоличествоСообщений > 9 Тогда
		КоличествоСообщений = 5;
	КонецЕсли;
	
	Счетчик = 1;
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='У сотрудника %1 не заполнена дата рождения'"), Выборка.Сотрудник);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Сотрудник, "ДатаРождения", "ФизическоеЛицо");
		Счетчик = Счетчик + 1;
		
		Если Счетчик > КоличествоСообщений Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВсегоОшибок > КоличествоСообщений Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='..и еще у %1 сотрудников'"), ВсегоОшибок - КоличествоСообщений);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'У одного или нескольких сотрудников не заполнена дата рождения.'");
	
КонецПроцедуры

// Возвращает соответствие сотрудников, переданным физическим лицам. Поиск сотрудников ведется
// в рамках головной организации, которая задается параметром Организация. Если, переданная 
// организация, является обособленным подразделением, то поиск ведется среди сотрудников головной
// этого обособленного подразделения.
// Если сотрудника не удается найти - создается новый.
// В ходе поиска сотрудников не производится проверка оформленности на работу. Предполагается, что
// функция вызывается для физических лиц, по которым не был определен сотрудник методом СотрудникиОрганизации.
//
// Параметры:
//			ФизическиеЛица 						- Массив ссылок на Справочник.ФизическиеЛица или ссылка на элемент.
//			Организация 						- СправочникСсылка.Организации
//			ВключатьВПоискУволенныхСотрудников	- Булево
//
// Возвращаемое значение:
//		Соответствие - ключи соответствия ссылки на переданные в параметрах физические лица.
//				Значения - соответствующие им сотрудники.
//
Функция НеоформленныеСотрудникиФизическихЛиц(ФизическиеЛица, Организация, ВключатьВПоискУволенныхСотрудников = Истина) Экспорт
	
	СоответствиеСотрудниковФизическимЛицам = Новый Соответствие;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	СоздатьВТСотрудникиНеОформленныеПоТрудовомуДоговору(
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ГоловнаяОрганизация,
		СписокФизическихЛиц,
		ВключатьВПоискУволенныхСотрудников);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	МИНИМУМ(ЕСТЬNULL(СотрудникиНеОформленныеПоТрудовомуДоговору.Сотрудник, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))) КАК Сотрудник
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиНеОформленныеПоТрудовомуДоговору КАК СотрудникиНеОформленныеПоТрудовомуДоговору
		|		ПО (СотрудникиНеОформленныеПоТрудовомуДоговору.ФизическоеЛицо = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛица.Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Сотрудник) Тогда
			СотрудникФизическогоЛица = Выборка.Сотрудник;
		Иначе
			СотрудникФизическогоЛица = НовыйСотрудникФизическогоЛица(Выборка.ФизическоеЛицо, ГоловнаяОрганизация);
		КонецЕсли;
		
		СоответствиеСотрудниковФизическимЛицам.Вставить(Выборка.ФизическоеЛицо, СотрудникФизическогоЛица);
		
	КонецЦикла;
	
	Возврат СоответствиеСотрудниковФизическимЛицам;
	
КонецФункции

// Возвращает вновь созданного сотрудника по переданным физическому лицу и организации.
// Сотрудник создается для головной организации, переданной в параметре.
// 
// Параметры:
//		ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//		Организация		- СправочникСсылка.Организации
//
// ВозвращаемоеЗначение:
//		СправочникСсылка.Сотрудники
//
Функция НовыйСотрудникФизическогоЛица(ФизическоеЛицо, Организация) Экспорт
	
	СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
	СотрудникОбъект.ФизическоеЛицо = ФизическоеЛицо;
	СотрудникОбъект.ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	СотрудникОбъект.Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ФИО");
			
	СотрудникОбъект.Записать();
		
	Возврат СотрудникОбъект.Ссылка;
	
КонецФункции

// Возвращает основного сотрудника физического лица. 
// Принципы определения основного сотрудника см. ОсновныеСотрудникиФизическихЛиц
//
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//  Организация    - СправочникСсылка.Организации
//  Период         - Дата
//
// Возвращаемое значение:
//  СправочникСсылка.Сотрудник.
//
Функция ОсновнойСотрудникФизическогоЛица(ФизическоеЛицо, Организация, Период) Экспорт
	Возврат КадровыйУчетПовтИсп.ОсновнойСотрудникФизическогоЛица(ФизическоеЛицо, Организация, Период);
КонецФункции

// Возвращает кадровые данные основного сотрудника.
//   Описания параметров см. у методов КадровыйУчет.ОсновнойСотрудникФизическогоЛица 
//   и КадровыйУчет.КадровыеДанныеСотрудников.
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//   ДатаПолучения - Дата - Дата получения кадровых данных.
//   ТолькоРазрешенные - Булево
//   ТекстОшибки - Строка - Заполняется в случае ошибки получения данных.
//
// Возвращаемое значение:
//   СтрокаТаблицыЗначений - Кадровые данные:
//       * Организация - СправочникСсылка.Организации
//   Неопределено - Если кадровые данные не найдены. В этом случае в параметре ТекстОшибки возвращается текст ошибки.
//
Функция КадровыеДанныеОсновногоСотрудникаФизическогоЛица(Организация, ФизическоеЛицо, ИменаПолей, ДатаПолучения = '00010101', ТолькоРазрешенные = Истина, ТекстОшибки = "") Экспорт
	ОсновнойСотрудник = ОсновнойСотрудникФизическогоЛица(ФизическоеЛицо, Организация, ДатаПолучения);
	Если ЗначениеЗаполнено(ОсновнойСотрудник) Тогда
		Сотрудники = Новый Массив;
		Сотрудники.Добавить(ОсновнойСотрудник);
		КадровыеДанные = КадровыеДанныеСотрудников(ТолькоРазрешенные, Сотрудники, ИменаПолей, ДатаПолучения);
		Если КадровыеДанные.Количество() > 0 Тогда
			Возврат КадровыеДанные[0];
		Иначе
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось получить кадровые данные ""%1"".'"), ОсновнойСотрудник);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось найти основного сотрудника ""%1"".'"), ФизическоеЛицо);
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Формирует временную таблицу, содержащую поля Сотрудник, ФизическоеЛицо, ГоловнаяОрганизация
// с сотрудниками не оформленными по трудовым договорам. В выборку включаются все неоформленные сотрудники,
// создававшиеся для головной организации (опционально уволенные сотрудники).
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ТолькоРазрешенные								- Булево
//		Организация										- СправочникСсылка.Организации, если в качестве параметра передано обособленное подразделения, то в выборку войдут
//															не оформлявшиеся сотрудники головной организации обособленного подразделения
//		ФизическиеЛица									- Массив элементов СправочникСсылка.ФизическиеЛица
//		ВключатьВПоискУволенныхСотрудников				- Булево
//		ИмяВТСотрудникиНеОформленныеПоТрудовомуДоговору - Строка.
//
Процедура СоздатьВТСотрудникиНеОформленныеПоТрудовомуДоговору(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, ФизическиеЛица = Неопределено, ВключатьВПоискУволенныхСотрудников = Ложь, ИмяВТСотрудникиНеОформленныеПоТрудовомуДоговору = "ВТСотрудникиНеОформленныеПоТрудовомуДоговору") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	
	Если ФизическиеЛица <> Неопределено Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			Отборы, "ФизическоеЛицо", "В", ФизическиеЛица);
		
	КонецЕсли;
	
	СоздатьВТТекущиеКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Отборы, "ГоловнаяОрганизация,ОформленПоТрудовомуДоговору,ДатаУвольнения");
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТСотрудникиНеОформленныеПоТрудовомуДоговору
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников";
	
	Если ВключатьВПоискУволенныхСотрудников Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	(НЕ ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору
			|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору
			|				И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1))";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	НЕ ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору";
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, 
		"ВТСотрудникиНеОформленныеПоТрудовомуДоговору", ИмяВТСотрудникиНеОформленныеПоТрудовомуДоговору);
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТТекущиеКадровыеДанныеСотрудников");;
	
КонецПроцедуры

// Возвращает структуру описывающую временную таблицу отборов для получения истории изменения
// ФИО физических лиц.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ИмяВТОтборов			- Строка
//		ИмяПоляФизическоеЛицо	- Строка
//
// Возвращаемое значение:
//		Структура - содержит ключи:
//			* МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц.
//			* ИмяВТОтборов				- Строка.
//			* ИмяПоляФизическоеЛицо		- Строка.
//
Функция ОписательВременныхТаблицДляСоздатьВТИсторияИзмененияФИОФизическихЛиц(МенеджерВременныхТаблиц, ИмяВТОтборов, ИмяПоляФизическоеЛицо) Экспорт
	
	ОписательВТ = Новый Структура;
	
	ОписательВТ.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВТ.Вставить("ИмяВТОтборов", ИмяВТОтборов);
	ОписательВТ.Вставить("ИмяПоляФизическоеЛицо", ИмяПоляФизическоеЛицо);
	
	Возврат ОписательВТ;
	
КонецФункции

// Создает временную таблицу, содержащую записи регистра сведений ФИОФизическихЛиц,
// по переданному отбору во временной таблице, содержащейся в МенеджереВременныхТаблиц.
//
// Параметры:
//		ТолькоРазрешенные						- Булево
//		ОписательВременныхТаблиц				- Структура (см. ОписательВременныхТаблицДляСоздатьВТИсторияИзмененияФИОФизическихЛиц).
//		ИмяВТИсторияИзмененияФИОФизическихЛиц	- Строка
//
// Возвращаемое значение:
//		РезультатЗапроса
//
Функция СоздатьВТИсторияИзмененияФИОФизическихЛиц(ТолькоРазрешенные, ОписательВременныхТаблиц, ИмяВТИсторияИзмененияФИОФизическихЛиц = "ВТИсторияИзмененияФИОФизическихЛиц") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ОписательВременныхТаблиц.ИмяВТОтборов, "ФизическоеЛицо");
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременныхТаблиц.ИмяПоляФизическоеЛицо);
	
	Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
		"ФИОФизическихЛиц",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		,
		ИмяВТИсторияИзмененияФИОФизическихЛиц);
	
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	Возврат Запрос.Выполнить();
	
КонецФункции

// Возвращает таблицу договоров, сформированную по условиям переданным в параметре
// ТаблицаФизическихЛиц
//
// Параметры:
//		ТаблицаФизическихЛиц - ТаблицаЗначений c колонками:
// 			* ФизическоеЛицо 
// 			* ГоловнаяОрганизация 
// 			* НачалоПериода 
// 			* ОкончаниеПериода
//
// Возвращаемое значение:
//		ТаблицаЗначений с колонками
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* ВидДоговора		- Булево, ложь - трудовой договор, истина - договор ГПХ
//			* ВидДоговораГПХ	- Булево, ложь - оказание услуг, истина - авторский
//									имеет смысл при значении ВидДоговора равное истина
//			* Номер				- Строка
//			* Дата				- Дата
//			* Организация		- СправочникСсылка.Организации
//			* Начало			- Дата
//			* Окончание			- Дата
//
Функция ДоговорыФизическихЛиц(ТаблицаФизическихЛиц) Экспорт
	
	ТаблицаДоговоров = Новый ТаблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("ФизическоеЛицо", 	Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговора", 		Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("ВидДоговораГПХ", 	Новый ОписаниеТипов("Булево"));
	ТаблицаДоговоров.Колонки.Добавить("Номер", 				Новый ОписаниеТипов("Строка"));
	ТаблицаДоговоров.Колонки.Добавить("Дата", 				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Организация", 		Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДоговоров.Колонки.Добавить("Начало",				Новый ОписаниеТипов("Дата"));
	ТаблицаДоговоров.Колонки.Добавить("Окончание",			Новый ОписаниеТипов("Дата"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТаблицаФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаФизическихЛиц.НачалоПериода КАК НачалоПериода,
		|	ТаблицаФизическихЛиц.ОкончаниеПериода КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериодыПредварительно
		|ИЗ
		|	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	СотрудникиПериодыПредварительно.НачалоПериода КАК НачалоПериода,
		|	СотрудникиПериодыПредварительно.ОкончаниеПериода КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТСотрудникиПериодыПредварительно КАК СотрудникиПериодыПредварительно
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО СотрудникиПериодыПредварительно.ГоловнаяОрганизация = Сотрудники.ГоловнаяОрганизация
		|			И СотрудникиПериодыПредварительно.ФизическоеЛицо = Сотрудники.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	ОписательТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды", "Сотрудник,ОкончаниеПериода");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная") Тогда
		ИменаКадровыхДанных = "ТрудовойДоговорНомер,ТрудовойДоговорДата,ДатаПриема,ДатаУвольнения,ДатаОкончания";
	Иначе
		ИменаКадровыхДанных = "ПриказОПриемеНомер,ПриказОПриемеДата,ДатаПриема,ДатаУвольнения";
	КонецЕсли;
	СоздатьВТКадровыеДанныеСотрудников(ОписательТаблиц, Истина, ИменаКадровыхДанных);
	
	ПараметрыПолученияРабочихМест = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	ПараметрыПолученияРабочихМест.РаботникиПоДоговорамГПХ = Истина;
	СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияРабочихМест);
	
	Если Метаданные.Документы.Найти("ДоговорАвторскогоЗаказа") <> Неопределено Тогда
		ИмяТипаДоговорАвторскогоЗаказа = "ДокументСсылка.ДоговорАвторскогоЗаказа";
		Запрос.УстановитьПараметр("ТипДоговораАвторскогоЗаказа", Тип(ИмяТипаДоговорАвторскогоЗаказа));
	Иначе
		Запрос.УстановитьПараметр("ТипДоговораАвторскогоЗаказа", ТипЗнч("НеИспользуется"));
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РабочиеМестаСотрудников.Период КАК Период,
		|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
		|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВидДоговора,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = ТИП(Документ.ДоговорРаботыУслуги)
		|			ТОГДА ЛОЖЬ
		|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = &ТипДоговораАвторскогоЗаказа
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидДоговораГПХ,
		|	ВЫБОР
		|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL
		|			ТОГДА КадровыеДанныеСотрудников.ТрудовойДоговорНомер
		|		ИНАЧЕ ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Номер
		|	КОНЕЦ КАК Номер,
		|	ВЫБОР
		|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL
		|			ТОГДА НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ТрудовойДоговорДата, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Дата, ДЕНЬ)
		|	КОНЕЦ КАК Дата,
		|	РабочиеМестаСотрудников.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL
		|			ТОГДА НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаПриема, ДЕНЬ)
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала, ДЕНЬ)
		|	КОНЕЦ КАК Начало,
		|	ВЫБОР
		|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА ВЫБОР
		|							КОГДА КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаОкончания, ДЕНЬ)
		|							ИНАЧЕ НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ)
		|						КОНЕЦ МЕЖДУ СотрудникиПериоды.НачалоПериода И СотрудникиПериоды.ОкончаниеПериода
		|						ТОГДА ВЫБОР
		|								КОГДА КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|									ТОГДА НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаОкончания, ДЕНЬ)
		|								ИНАЧЕ НАЧАЛОПЕРИОДА(КадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ)
		|							КОНЕЦ
		|					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания, ДЕНЬ) МЕЖДУ СотрудникиПериоды.НачалоПериода И СотрудникиПериоды.ОкончаниеПериода
		|					ТОГДА НАЧАЛОПЕРИОДА(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания, ДЕНЬ)
		|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|			КОНЕЦ
		|	КОНЕЦ КАК Окончание,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = ТИП(Документ.ДоговорРаботыУслуги)
		|			ТОГДА РабочиеМестаСотрудников.ДокументОснование
		|		КОГДА ТИПЗНАЧЕНИЯ(РабочиеМестаСотрудников.ДокументОснование) = &ТипДоговораАвторскогоЗаказа
		|			ТОГДА РабочиеМестаСотрудников.ДокументОснование
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РазрезУчета
		|ПОМЕСТИТЬ ВТДоговорыПредварительно
		|ИЗ
		|	ВТРабочиеМестаСотрудников КАК РабочиеМестаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО РабочиеМестаСотрудников.Сотрудник = СотрудникиПериоды.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО РабочиеМестаСотрудников.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И (РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО РабочиеМестаСотрудников.ДокументОснование = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование
		|			И (РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник))
		|ГДЕ
		|	ЕСТЬNULL(РабочиеМестаСотрудников.ВидСобытия, ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.КадровыйУчетРасширенная") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыеДанныеСотрудников.ТрудовойДоговорНомер", "КадровыеДанныеСотрудников.ПриказОПриемеНомер");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыеДанныеСотрудников.ТрудовойДоговорДата", "КадровыеДанныеСотрудников.ПриказОПриемеДата");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "КадровыеДанныеСотрудников.ДатаОкончания", "КадровыеДанныеСотрудников.ДатаУвольнения");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Договоры.Период,
		|	Договоры.Сотрудник,
		|	Договоры.ФизическоеЛицо,
		|	Договоры.ВидДоговора,
		|	Договоры.ВидДоговораГПХ,
		|	Договоры.Номер,
		|	Договоры.Дата,
		|	Договоры.Организация,
		|	Договоры.Начало,
		|	Договоры.Окончание,
		|	Договоры.РазрезУчета КАК РазрезУчета,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ДоговорыДругаяОрганизация.Период, ДЕНЬ)) КАК СледующийПериод
		|ПОМЕСТИТЬ ВТДоговорыСОкончанием
		|ИЗ
		|	ВТДоговорыПредварительно КАК Договоры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыПредварительно КАК ДоговорыДругаяОрганизация
		|		ПО Договоры.Сотрудник = ДоговорыДругаяОрганизация.Сотрудник
		|			И Договоры.РазрезУчета = ДоговорыДругаяОрганизация.РазрезУчета
		|			И Договоры.Организация <> ДоговорыДругаяОрганизация.Организация
		|			И Договоры.Период < ДоговорыДругаяОрганизация.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	Договоры.Период,
		|	Договоры.Сотрудник,
		|	Договоры.ФизическоеЛицо,
		|	Договоры.ВидДоговора,
		|	Договоры.ВидДоговораГПХ,
		|	Договоры.Номер,
		|	Договоры.Дата,
		|	Договоры.Организация,
		|	Договоры.Начало,
		|	Договоры.Окончание,
		|	Договоры.РазрезУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорыСОкончанием.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДоговорыСОкончанием.ВидДоговора КАК ВидДоговора,
		|	ДоговорыСОкончанием.ВидДоговораГПХ КАК ВидДоговораГПХ,
		|	ДоговорыСОкончанием.Номер КАК Номер,
		|	ДоговорыСОкончанием.Дата КАК Дата,
		|	ДоговорыСОкончанием.Организация КАК Организация,
		|	ЕСТЬNULL(ДоговорыСНовымНачалом.СледующийПериод, ДоговорыСОкончанием.Начало) КАК Начало,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДоговорыСОкончанием.СледующийПериод, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ДоговорыСОкончанием.СледующийПериод, ДЕНЬ, -1)
		|		ИНАЧЕ ДоговорыСОкончанием.Окончание
		|	КОНЕЦ КАК Окончание
		|ИЗ
		|	ВТДоговорыСОкончанием КАК ДоговорыСОкончанием
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыСОкончанием КАК ДоговорыСНовымНачалом
		|		ПО ДоговорыСОкончанием.Сотрудник = ДоговорыСНовымНачалом.Сотрудник
		|			И ДоговорыСОкончанием.РазрезУчета = ДоговорыСНовымНачалом.РазрезУчета
		|			И (НАЧАЛОПЕРИОДА(ДоговорыСОкончанием.Период, ДЕНЬ) = ДоговорыСНовымНачалом.СледующийПериод)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	ФизическоеЛицо,
		|	ВидДоговора УБЫВ,
		|	Начало";
	
	ТаблицаДоговоровГоловнойОрганизации = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицаДоговоровГоловнойОрганизации Из ТаблицаДоговоровГоловнойОрганизации Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДоговоров.Добавить(), СтрокаТаблицаДоговоровГоловнойОрганизации);
	КонецЦикла;
	
	Возврат ТаблицаДоговоров;
	
КонецФункции

Процедура ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник) Экспорт
	
	КадровыйУчетВнутренний.ПроверитьУникальностьТабельногоНомера(ТабельныйНомер, Сотрудник);
	
КонецПроцедуры

// Проверяет наличие права доступа на раздел учета.
//
// Параметры:
//   Право - Строка - Проверяемое право. Допустимые значения:
//       "Чтение",
//       "Изменение".
//   ВидУчета - Строка - Проверяемый раздел учета. Допустимые значения:
//       "НачисленнаяЗарплата",
//       "ПлановыеНачисления",
//       "КадровыеДанные".
//
// Возвращаемое значение:
//   Булево - Наличие права на раздел учета.
//
Функция ПравоНаРазделУчета(Право, ВидУчета) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПравоНаРазделУчета(Право, ВидУчета);
	
КонецФункции

Функция ПравоИзмененияКадровогоСостояния() Экспорт
	
	Возврат КадровыйУчетВнутренний.ПравоИзмененияКадровогоСостояния();
	
КонецФункции

Функция ПериодыРаботыСотрудников(СписокСотрудников) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаЗавершенияРаботы,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В (&СписокСотрудников)";
	
	ПериодыРаботыСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат ПериодыРаботыСотрудников;
КонецФункции

Функция ОснованияУвольненияВСвязиСоСмертьюСотрудника() Экспорт
	
	Возврат КадровыйУчетВнутренний.ОснованияУвольненияВСвязиСоСмертьюСотрудника();
	
КонецФункции


#Область КадровыеДанныеФизическихЛиц

// Возвращает структуру, описывающую временную таблицу отборов физических лиц.
//
// Параметры:
//				ИмяВременнойТаблицыОтборовФизическихЛиц - Строка, имя временной таблицы
//								в менеджере запросов.
//				ИмяПоляФизическоеЛицо - Строка, указывает имя поля временной таблицы,
//								содержащего ссылку на физическое лицо.
//				ИмяПоляПериод - Строка, указывает имя поля временной таблицу, содержащее
//								период, на который предполагается получить кадровые данные.
//
Функция ОписаниеВременнойТаблицыОтборовФизическихЛиц(ИмяВременнойТаблицыОтборовФизическихЛиц, ИмяПоляФизическоеЛицо = "ФизическоеЛицо", ИмяПоляПериод = "Период") Экспорт
	
	ОписательВременнойТаблицыОтборов = Новый Структура;
	ОписательВременнойТаблицыОтборов.Вставить("ИмяВременнойТаблицыОтборовФизическихЛиц", ИмяВременнойТаблицыОтборовФизическихЛиц);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляФизическоеЛицо", ИмяПоляФизическоеЛицо);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляПериод", ИмяПоляПериод);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяВременнойТаблицыОтборовРазличныхФизическихЛиц", "");
	
	Возврат ОписательВременнойТаблицыОтборов;
	
КонецФункции

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных = Неопределено, ИмяВТКадровыеДанныеФизическихЛиц = "ВТКадровыеДанныеФизическихЛиц", ТаблицаОтборовСодержитПолеСотрудник = Ложь, УничтожитьВспомогательныеТаблицы = Истина) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, УничтожитьВспомогательныеТаблицы);
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных = Неопределено, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц = "ВТПостоянныеКадровыеДанныеФизическихЛиц", ТаблицаОтборовСодержитПолеСотрудник = Ложь, ТаблицаОтборовСодержитПолеПериод = Ложь, УничтожитьВспомогательныеТаблицы = Истина) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТПостоянныеКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц, ТаблицаОтборовСодержитПолеСотрудник, ТаблицаОтборовСодержитПолеПериод, УничтожитьВспомогательныеТаблицы);
	
КонецФункции

Функция ЗапросВТДокументыУдостоверяющиеЛичность(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИмяВТДокументыУдостоверяющиеЛичность = "ВТДокументыУдостоверяющиеЛичность") Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОтборов.Период КАК Период,
		|	ТаблицаОтборов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК ПоследнийПериод
		|ПОМЕСТИТЬ ВТМаксимальныеПериодыДокументов
		|ИЗ
		|	ВТОтборовФизическихЛиц КАК ТаблицаОтборов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО ТаблицаОтборов.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
		|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)
		|			И (ТаблицаОтборов.Период >= ДокументыФизическихЛиц.Период
		|				ИЛИ ТаблицаОтборов.Период = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаОтборов.Период,
		|	ТаблицаОтборов.ФизическоеЛицо
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ФизическоеЛицо,
		|	ПоследнийПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаксимальныеПериодыДокументов.Период КАК Период,
		|	МаксимальныеПериодыДокументов.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДокументыФизическихЛиц.Период КАК ПериодЗаписи,
		|	ДокументыФизическихЛиц.ВидДокумента КАК ДокументВид,
		|	ДокументыФизическихЛиц.ВидДокумента.КодМВД КАК ДокументКодМВД,
		|	ДокументыФизическихЛиц.Серия КАК ДокументСерия,
		|	ДокументыФизическихЛиц.Номер КАК ДокументНомер,
		|	ДокументыФизическихЛиц.ДатаВыдачи КАК ДокументДатаВыдачи,
		|	ДокументыФизическихЛиц.СрокДействия КАК ДокументСрокДействия,
		|	ДокументыФизическихЛиц.КемВыдан КАК ДокументКемВыдан,
		|	ДокументыФизическихЛиц.КодПодразделения КАК ДокументКодПодразделения,
		|	ДокументыФизическихЛиц.ИмяЛатиницей КАК ДокументИмяЛатиницей,
		|	ДокументыФизическихЛиц.ФамилияЛатиницей КАК ДокументФамилияЛатиницей,
		|	ДокументыФизическихЛиц.СтранаВыдачи КАК ДокументСтранаВыдачи,
		|	ДокументыФизическихЛиц.Представление КАК ДокументПредставление
		|ПОМЕСТИТЬ ВТДокументыУдостоверяющиеЛичность
		|ИЗ
		|	ВТМаксимальныеПериодыДокументов КАК МаксимальныеПериодыДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
		|		ПО МаксимальныеПериодыДокументов.ПоследнийПериод = ДокументыФизическихЛиц.Период
		|			И МаксимальныеПериодыДокументов.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
		|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеПериодыДокументов";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТОтборовФизическихЛиц", ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОтборов.Период", "ТаблицаОтборов." + ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапроса, "ТаблицаОтборов.ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапроса, "ВТДокументыУдостоверяющиеЛичность", ИмяВТДокументыУдостоверяющиеЛичность);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСведенияОбИнвалидности(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОбИнвалидности = "ВТСведенияОбИнвалидности") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "Период,ФизическоеЛицо");
		
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("СведенияОбИнвалидностиФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	
	ПараметрыПостроения.Отборы = ПоляОтбора;
	 
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"СведенияОбИнвалидностиФизическихЛиц",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОбИнвалидности);
			
	УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОГражданстве(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОГражданстве = "ВТСведенияОГражданстве") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "Период,ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ГражданствоФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	
	ПараметрыПостроения.Отборы = ПоляОтбора;
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("Страна", "СтранаГражданства");
	ПараметрыПостроения.СоответствиеПсевдонимовПолейСКД.Вставить("ИНН", "ИННГражданства");
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ГражданствоФизическихЛиц",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОГражданстве);
	
	УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОФИОФизическихЛиц(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИмяВТСведенияОФИОФизическихЛиц = "ВТСведенияОФИОФизическихЛиц") Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовФизическихЛиц, "Период,ФизическоеЛицо");
	
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", ОписательВременнойТаблицыОтборов.ИмяПоляПериод);
	ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ФизическоеЛицо", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	ПараметрыПостроения.ИспользоватьРасширениеЯзыкаЗапросовДляСКД = Ложь;
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ФИОФизическихЛиц", ПоляОтбора);
	КонецЕсли;
	
	ПараметрыПостроения.Отборы = ПоляОтбора;
	
	ЗапросВТИмяРегистраСрез = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
		"ФИОФизическихЛиц",
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		Истина,
		ИмяВТСведенияОФИОФизическихЛиц);
	
	УстановитьПутьКПолюФизическоеЛицо(ЗапросВТИмяРегистраСрез.Текст, "ИзмеренияДаты", ОписательВременнойТаблицыОтборов.ИмяПоляФизическоеЛицо);
	
	Возврат ЗапросВТИмяРегистраСрез;
	
КонецФункции

Функция ЗапросВТСведенияОДатахСмертиСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТСведенияОДатахСмертиСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов);
	
КонецФункции

Функция ВидКонтактнойИнформацииАдресМестаПроживанияФизическогоЛица() Экспорт
	Возврат УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("АдресМестаПроживанияФизическиеЛица");
КонецФункции

Функция ВидКонтактнойИнформацииАдресПоПропискеФизическиеЛица() Экспорт
	Возврат УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("АдресПоПропискеФизическиеЛица");
КонецФункции

Функция ВидКонтактнойИнформацииТелефонДомашнийФизическиеЛица() Экспорт
	Возврат УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("ТелефонДомашнийФизическиеЛица");
КонецФункции

Функция ВидКонтактнойИнформацииТелефонРабочийФизическиеЛица() Экспорт
	Возврат УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("ТелефонРабочийФизическиеЛица");
КонецФункции

Функция ВидКонтактнойИнформацииТелефонМобильныйФизическиеЛица() Экспорт
	Возврат УправлениеКонтактнойИнформацией.ВидКонтактнойИнформацииПоИмени("ТелефонМобильныйФизическиеЛица");
КонецФункции

#КонецОбласти


#Область КадровыеДанныеСотрудников

// Возвращает структуру, описывающую временную таблицу отборов физических лиц.
//
// Параметры:
//				ИмяВременнойТаблицыОтборовСотрудников - Строка, имя временной таблицы
//								в менеджере запросов.
//				ИмяПоляСотрудник - Строка, указывает имя поля временной таблицы,
//								содержащего ссылку на сотрудника.
//				ИмяПоляПериод - Строка, указывает имя поля временной таблицу, содержащее
//								период, на который предполагается получить кадровые данные.
//
Функция ОписаниеВременнойТаблицыОтборовСотрудников(ИмяВременнойТаблицыОтборовСотрудников, ИмяПоляСотрудник = "Сотрудник", ИмяПоляПериод = "Период") Экспорт
	
	ОписательВременнойТаблицыОтборов = Новый Структура;
	ОписательВременнойТаблицыОтборов.Вставить("ИмяВременнойТаблицыОтборовСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляСотрудник", ИмяПоляСотрудник);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяПоляПериод", ИмяПоляПериод);
	ОписательВременнойТаблицыОтборов.Вставить("ИмяВременнойТаблицыОтборовРазличныхСотрудников", "");
	
	ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(ОписательВременнойТаблицыОтборов);
	
	Возврат ОписательВременнойТаблицыОтборов;
	
КонецФункции

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина, ИсточникиДанных = Неопределено, ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудников", ТаблицаОтборовСодержитПолеФизическоеЛицо = Ложь, УничтожитьВспомогательныеТаблицы = Истина) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных, ИмяВТКадровыеДанныеСотрудников, ТаблицаОтборовСодержитПолеФизическоеЛицо, УничтожитьВспомогательныеТаблицы);
	
КонецФункции

Функция ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных = Неопределено, ИмяВТПостоянныеКадровыеДанныеСотрудников = "ВТПостоянныеКадровыеДанныеСотрудников", ТаблицаОтборовСодержитПолеПериод = Ложь, ТаблицаОтборовСодержитПолеФизическоеЛицо = Ложь, УничтожитьВспомогательныеТаблицы = Истина) Экспорт

	Возврат КадровыйУчетВнутренний.ЗапросВТПостоянныеКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеСотрудников, ТаблицаОтборовСодержитПолеПериод, ТаблицаОтборовСодержитПолеФизическоеЛицо, УничтожитьВспомогательныеТаблицы);
	
КонецФункции

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных, ФормироватьТаблицуРазличных);
	
КонецПроцедуры

Функция ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(КадровыеДанные, ИсточникиДанных) Экспорт
	
	Возврат КадровыйУчетВнутренний.ТекстыОписанияПолейЗапросПоляПостоянныхКадровыхДанныхСотрудников(КадровыеДанные, ИсточникиДанных);
	
КонецФункции

Процедура СформироватьДвиженияДоговоровГПХ(Движения, ДанныеДляПроведенияДоговоровГПХ) Экспорт
	
	Для каждого ДанныеПроведения Из ДанныеДляПроведенияДоговоровГПХ Цикл
		
		Движения.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Записывать = Истина;
		ЗаполнитьЗначенияСвойств(Движения.ПериодыДействияДоговоровГражданскоПравовогоХарактера.Добавить(), ДанныеПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбслуживаниеОтображенияСведенийОГражданствеДляЛицБезГражданства

Процедура СоздатьВТСтраныМираДляГражданства(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Страна,
	|	СтраныМира.Код,
	|	СтраныМира.Наименование
	|ПОМЕСТИТЬ ВТСтраныМираДляГражданства
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка),
	|	""999"",
	|	""Лицо без гражданства""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтраныМира.Ссылка";
	
	Запрос.Выполнить();

КонецПроцедуры

#КонецОбласти


#Область ФормированиеВременныхТаблицСКадровымиДанными

// Формирует временную таблицу ВТКадровыеДанныеФизическихЛиц, содержащую кадровые данные физических лиц,
// переданных ей в качестве параметра на указанную дату.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//		ТолькоРазрешенные - Булево
//		СписокФизическихЛиц - Массив ссылок или ссылка на элемент справочника ФизическиеЛица.
//		КадровыеДанные - см. описание к функции КадровыеДанныеФизическихЛиц.
//		ДатаПолученияДанных - Дата, на которую необходимо получить "периодические" данные.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеФизическихЛиц.
// 
Процедура СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, Знач ДатаПолученияДанных, ПоляОтбораПериодическихДанных = Неопределено, ИмяВТКадровыеДанныеФизическихЛиц = "ВТКадровыеДанныеФизическихЛиц") Экспорт
	
	// Проверим Передана ли нам дата на которую необходимо получать периодические данные.
	Если ДатаПолученияДанных = '00010101000000' Тогда
		ДатаПолученияДанных = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Проверим, если в качестве параметра СписокФизическихЛиц, передана ссылка, создадим массив.
	Если ТипЗнч(СписокФизическихЛиц) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(СписокФизическихЛиц);
	Иначе
		МассивФизическихЛиц = СписокФизическихЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&ДатаПолученияДанных КАК Период,
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТНаДатуСписокФизическихЛиц
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&МассивФизическихЛиц)";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		МенеджерВременныхТаблиц, "ВТНаДатуСписокФизическихЛиц");
		
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеФизическихЛиц = ИмяВТКадровыеДанныеФизическихЛиц;
	
	СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНаДатуСписокФизическихЛиц";
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру описания полей отбора для методов получения кадровых данных физических лиц.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовФизическихЛиц - строка с именами полей отбора
//							физических лиц ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "ФизическоеЛицо", второе полю "Период".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	ФизическоеЛицо
//				Период
//
Функция ПоляОтбораФизическихЛиц(ИменаПолейВременнойТаблицыОтборовФизическихЛиц = "ФизическоеЛицо,Период") Экспорт
	
	МассивИменПолейОтбораФизическихЛиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовФизическихЛиц, ",", , Истина);
	Возврат Новый Структура("ФизическоеЛицо,Период", МассивИменПолейОтбораФизическихЛиц[0], МассивИменПолейОтбораФизическихЛиц[1]);
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТКадровыеДанныеФизическихЛиц.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовФизическихЛиц - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовФизическихЛиц - строка с именами полей отбора
//							физических лиц ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "ФизическоеЛицо", второе полю "Период".
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовФизическихЛиц - имя временной таблицы отборов физических лиц.
//			ИмяВТКадровыеДанныеФизическихЛиц - имя создаваемой временной таблицы.
//			ПоляОтбораФизическихЛиц - см. ПоляОтбораФизическихЛиц.
//
Функция ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ИменаПолейВременнойТаблицыОтборовФизическихЛиц = "ФизическоеЛицо,Период") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовФизическихЛиц", ИмяВременнойТаблицыОтборовФизическихЛиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТКадровыеДанныеФизическихЛиц", "ВТКадровыеДанныеФизическихЛиц");
	ОписательВременныхТаблиц.Вставить("ПоляОтбораФизическихЛиц", ПоляОтбораФизическихЛиц(ИменаПолейВременнойТаблицыОтборовФизическихЛиц));
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Формирует временную таблицу ВТКадровыеДанныеФизическихЛиц, список физических лиц и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки ФизическоеЛицо и Период.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная 
//				методом ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц.
//		ТолькоРазрешенные - Булево
//		КадровыеДанные - см. описание к функции КадровыеДанныеФизическихЛиц.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеФизическихЛиц.
//
Процедура СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Описатель = ОписаниеВременнойТаблицыОтборовФизическихЛиц(
		ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовФизическихЛиц,
		ОписательВременныхТаблиц.ПоляОтбораФизическихЛиц.ФизическоеЛицо,
		ОписательВременныхТаблиц.ПоляОтбораФизическихЛиц.Период);
	
	Запрос = ЗапросВТКадровыеДанныеФизическихЛиц(
		ТолькоРазрешенные,
		Описатель,
		КадровыеДанные,
		ПоляОтбораПериодическихДанных,
		,
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеФизическихЛиц);
	
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Создает временную таблицу ВТТекущиеКадровыеДанныеСотрудников, содержащую колонки аналогичные колонкам регистра сведений
// ТекущиеКадровыеДанныеСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц					- МенеджерВременныхТаблиц
//		ТолькоРазрешенные						- Булево
//		Отборы									- Массив, структур описывающих отборы
//													Допустимы отборы по полям регистра:
//														* Сотрудник
//														* ГоловнаяОрганизация
//														* ФизическоеЛицо
//		КадровыеДанные							- Строка, содержит имена текущих кадровых данных
//												- Массив строк с именами текущих кадровых данных
//		ИмяВТТекущиеКадровыеДанныеСотрудников	- Строка
//
Процедура СоздатьВТТекущиеКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, Отборы = Неопределено, Знач КадровыеДанные = Неопределено, ИмяВТТекущиеКадровыеДанныеСотрудников = "ВТТекущиеКадровыеДанныеСотрудников") Экспорт
	
	Если КадровыеДанные = Неопределено Тогда
		КадровыеДанные = ТекущиеКадровыеДанныеСотрудников();
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		СписокКадровыхДанных = СтрРазделить(КадровыеДанные, ",", Ложь);
	Иначе
		СписокКадровыхДанных = КадровыеДанные;
	КонецЕсли;
	
	Если Не ТолькоРазрешенные Тогда
		
		УстановитьОтборДоступныхГоловныхОрганизаций = Истина;
		Если Отборы <> Неопределено Тогда
			
			Для Каждого ЭлементКоллекцииОтборов Из Отборы Цикл
				
				Если ЭлементКоллекцииОтборов.ЛевоеЗначение = "ГоловнаяОрганизация" Тогда
					
					УстановитьОтборДоступныхГоловныхОрганизаций = Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если УстановитьОтборДоступныхГоловныхОрганизаций Тогда
			
			ДоступныеОрганизации = ЗарплатаКадры.ДоступныеОрганизации();
			Если ЗначениеЗаполнено(ДоступныеОрганизации.Организации) Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					Отборы, "ГоловнаяОрганизация", "В", ДоступныеОрганизации.Организации);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Отборы <> Неопределено Тогда
		
		Для Каждого ОписаниеОтбора Из Отборы Цикл
			
			Если СписокКадровыхДанных.Найти(ОписаниеОтбора.ЛевоеЗначение) = Неопределено Тогда
				СписокКадровыхДанных.Добавить(ОписаниеОтбора.ЛевоеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ТолькоТекущиеКадровыеДанные = Истина;
		Для Каждого ИмяКадровыхДанных Из СписокКадровыхДанных Цикл
			
			ИмяКадровыхДанныхВВерхнемРегистре = ВРег(ИмяКадровыхДанных);
			Если ИмяКадровыхДанныхВВерхнемРегистре <> ВРег("ГоловнаяОрганизация")
				И ИмяКадровыхДанныхВВерхнемРегистре <> ВРег("ДатаПриема") 
				И ИмяКадровыхДанныхВВерхнемРегистре <> ВРег("ДатаУвольнения") 
				И ИмяКадровыхДанныхВВерхнемРегистре <> ВРег("ОформленПоТрудовомуДоговору") Тогда
				
				ТолькоТекущиеКадровыеДанные = Ложь;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ТолькоТекущиеКадровыеДанные Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
				|	Сотрудники.Ссылка КАК Сотрудник
				|ПОМЕСТИТЬ ВТОтборСотрудниковДляТекущихКадровыхДанных
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники";
			
			ТекстыОтборовДанных = Новый Массив;
			Если Отборы <> Неопределено И Отборы.Количество() > 0 Тогда
				
				СчетчикПараметров = 1;
				ТекстыОтборов = Новый Массив;
				Для Каждого ОписаниеОтбора Из Отборы Цикл
					
					Если ТипЗнч(ОписаниеОтбора.ПравоеЗначение) = Тип("Строка") Тогда
						
						ПравоеЗначение = ОписаниеОтбора.ПравоеЗначение;
						
					Иначе
						
						ПравоеЗначение = ЗарплатаКадрыПериодическиеРегистры.УникальноеИмяПараметраЗапроса(ИмяВТТекущиеКадровыеДанныеСотрудников, СчетчикПараметров);
						СчетчикПараметров = СчетчикПараметров + 1;
						
						Запрос.УстановитьПараметр(ПравоеЗначение, ОписаниеОтбора.ПравоеЗначение);
						
						ПравоеЗначение = "&" + ПравоеЗначение;
						
					КонецЕсли;
					
					Если ВРег(ОписаниеОтбора.ЛевоеЗначение) = ВРег("Сотрудник") Тогда
						ЛевоеЗначение = "Ссылка";
					Иначе
						ЛевоеЗначение = ОписаниеОтбора.ЛевоеЗначение;
					КонецЕсли;
					
					Если ВРег(ОписаниеОтбора.ЛевоеЗначение) <> ВРег("Сотрудник")
						И ВРег(ОписаниеОтбора.ЛевоеЗначение) <> ВРег("ГоловнаяОрганизация")
						И ВРег(ОписаниеОтбора.ЛевоеЗначение) <> ВРег("ФизическоеЛицо") Тогда
						
						ТекстОтбора = "(ПромежуточнаяКадровыеДанныеСотрудников." + ЛевоеЗначение + " " + ОписаниеОтбора.ВидСравнения + " (" + ПравоеЗначение + "))";
						ТекстыОтборовДанных.Добавить(ТекстОтбора);
						
					Иначе
						
						ТекстОтбора = "(Сотрудники." + ЛевоеЗначение + " " + ОписаниеОтбора.ВидСравнения + " (" + ПравоеЗначение + "))";
						ТекстыОтборов.Добавить(ТекстОтбора);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТекстыОтборов.Количество() > 0 Тогда
					
					Запрос.Текст = Запрос.Текст + "
						|ГДЕ
						|" + СтрСоединить(ТекстыОтборов, Символы.ПС + " И ");
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
			Запрос.Выполнить();
			
			ОписательВТ = ОписаниеВременнойТаблицыОтборовСотрудников("ВТОтборСотрудниковДляТекущихКадровыхДанных");
			
			Если ТекстыОтборовДанных.Количество() = 0 Тогда
				ИмяВТТекущиеДанныеСотрудников = "ВТТекущиеКадровыеДанныеСотрудников";
			Иначе
				ИмяВТТекущиеДанныеСотрудников = "ВТПромежуточнаяКадровыеДанныеСотрудников";
			КонецЕсли;
			
			ЗапросВТ = ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ОписательВТ, СписокКадровыхДанных, , , , ИмяВТТекущиеДанныеСотрудников);
			ЗапросВТ.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			ЗапросВТ.Выполнить();
			
			Если ТекстыОтборовДанных.Количество() > 0 Тогда
				
				Запрос.Текст =
					"ВЫБРАТЬ
					|	ПромежуточнаяКадровыеДанныеСотрудников.*
					|ПОМЕСТИТЬ ВТТекущиеКадровыеДанныеСотрудников
					|ИЗ
					|	ВТПромежуточнаяКадровыеДанныеСотрудников КАК ПромежуточнаяКадровыеДанныеСотрудников
					|ГДЕ
					|	" + СтрСоединить(ТекстыОтборовДанных, Символы.ПС + " И ");
				
				Запрос.Выполнить();
				
				Запрос.Текст = "Уничтожить ВТПромежуточнаяКадровыеДанныеСотрудников";
				Запрос.Выполнить();
				
			КонецЕсли;
			
			Запрос.Текст = "Уничтожить ВТОтборСотрудниковДляТекущихКадровыхДанных";
			Запрос.Выполнить();
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору КАК ОформленПоТрудовомуДоговору,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК ТекущаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК ТекущееПодразделение,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ТекущийВидЗанятости,
		|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации КАК ОсновноеРабочееМестоВОрганизации,
		|	ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок
		|ПОМЕСТИТЬ ВТТекущиеКадровыеДанныеСотрудников
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников";
	
	Если Отборы <> Неопределено И Отборы.Количество() > 0 Тогда
		
		СчетчикПараметров = 1;
		ТекстыОтборов = Новый Массив;
		Для Каждого ОписаниеОтбора Из Отборы Цикл
			
			Если ТипЗнч(ОписаниеОтбора.ПравоеЗначение) = Тип("Строка") Тогда
				
				ПравоеЗначение = ОписаниеОтбора.ПравоеЗначение;
				
			Иначе
				
				ПравоеЗначение = ЗарплатаКадрыПериодическиеРегистры.УникальноеИмяПараметраЗапроса(ИмяВТТекущиеКадровыеДанныеСотрудников, СчетчикПараметров);
				СчетчикПараметров = СчетчикПараметров + 1;
				
				Запрос.УстановитьПараметр(ПравоеЗначение, ОписаниеОтбора.ПравоеЗначение);
				
				ПравоеЗначение = "&" + ПравоеЗначение;
				
			КонецЕсли;
			
			ТекстОтбора = "(ТекущиеКадровыеДанныеСотрудников." + ОписаниеОтбора.ЛевоеЗначение + " " + ОписаниеОтбора.ВидСравнения + " (" + ПравоеЗначение + "))";
			ТекстыОтборов.Добавить(ТекстОтбора);
			
		КонецЦикла;
		
		Если ТекстыОтборов.Количество() > 0 Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|" + СтрСоединить(ТекстыОтборов, Символы.ПС + " И ");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТТекущиеКадровыеДанныеСотрудников", ИмяВТТекущиеКадровыеДанныеСотрудников);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТТекущиеКадровыеДанныеСотрудниковФизическихЛиц(МенеджерВременныхТаблиц, ОписательВременныхТаблиц, Знач ТолькоРазрешенные, Знач ГоловнаяОрганизация = Неопределено, Знач КадровыеДанные = Неопределено, Знач ИмяВТТекущиеКадровыеДанныеСотрудниковФизическихЛиц = "ВТТекущиеКадровыеДанныеСотрудниковФизическихЛиц") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДляКадровыхДанныхСотрудниковФизическихЛиц
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборовФизическихЛиц КАК ТаблицыОтборов
		|		ПО Сотрудники.ФизическоеЛицо = ТаблицыОтборов.ФизическоеЛицо";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборовФизическихЛиц",
		ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовФизическихЛиц);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицыОтборов.ФизическоеЛицо",
		"ТаблицыОтборов." + ОписательВременныхТаблиц.ИмяПоляФизическоеЛицо);
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|ГДЕ
			|	Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(ГоловнаяОрганизация));
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблицОтбораСотрудников = ОписаниеВременнойТаблицыОтборовСотрудников(
		"ВТСотрудникиПериодыДляКадровыхДанныхСотрудниковФизическихЛиц");
	
	Если КадровыеДанные = Неопределено Тогда
		КадровыеДанные = ТекущиеКадровыеДанныеСотрудников();
	КонецЕсли;
	
	Запрос = ЗапросВТПостоянныеКадровыеДанныеСотрудников(
		ТолькоРазрешенные,
		ОписательВременныхТаблицОтбораСотрудников,
		КадровыеДанные,
		,
		ИмяВТТекущиеКадровыеДанныеСотрудниковФизическихЛиц);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТСотрудникиПериодыДляКадровыхДанныхСотрудниковФизическихЛиц");
	
КонецПроцедуры

Функция ТекущиеКадровыеДанныеСотрудников()
	
	Возврат КадровыйУчетВнутренний.ТекущиеКадровыеДанныеСотрудников();
	
КонецФункции

// Формирует временную таблицу ВТКадровыеДанныеСотрудников, содержащую кадровые данные сотрудников,
// переданных ей в качестве параметра на указанную дату.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица.
//		ТолькоРазрешенные - Булево
//		СписокСотрудников - Массив ссылок или ссылка на элемент справочника Сотрудники.
//		КадровыеДанные - см. описание к функции КадровыеДанныеСотрудников.
//		ДатаПолученияДанных - Дата, на которую необходимо получить "периодические" данные.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеСотрудников.
// 
Процедура СоздатьНаДатуВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, Знач ДатаПолученияДанных, ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина, ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеСотрудников") Экспорт
	
	// Проверим, если в качестве параметра СписокФизическихЛиц, передана ссылка, создадим массив.
	Если ТипЗнч(СписокСотрудников) = Тип("СправочникСсылка.Сотрудники") Тогда
		МассивСотрудников = Новый Массив;
		МассивСотрудников.Добавить(СписокСотрудников);
	Иначе
		МассивСотрудников = СписокСотрудников;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ДатаПолученияДанных КАК Период,
		|	ДанныеСотрудников.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТНаДатуСписокСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК ДанныеСотрудников
		|ГДЕ
		|	ДанныеСотрудников.Ссылка В(&МассивСотрудников)";
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, "ВТНаДатуСписокСотрудников");
	
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ИмяВТКадровыеДанныеСотрудников;
	
	СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТНаДатуСписокСотрудников";
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру описания полей отбора для методов получения кадровых данных сотрудников.
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "Период".
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	Сотрудник
//				Период
//
Функция ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период") Экспорт
	
	МассивИменПолейОтбораСотрудников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовСотрудников, ",", , Истина);
	Возврат Новый Структура("Сотрудник,Период", МассивИменПолейОтбораСотрудников[0], МассивИменПолейОтбораСотрудников[1]);
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТКадровыеДанныеСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы - "фильтра".
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "Период".
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы отборов сотрудников.
//			ПоляОтбораСотрудников - см. ПоляОтбораСотрудников.
//
Функция ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников", ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТКадровыеДанныеСотрудников", "ВТКадровыеДанныеСотрудников");
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовРазличныхСотрудников", "");
	
	ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(ОписательВременныхТаблиц);
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Формирует временную таблицу ВТКадровыеДанныеСотрудников, список сотрудников и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки Сотрудник и Период.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная 
//				методом ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников.
//		ТолькоРазрешенные - Булево
//		КадровыеДанные - см. описание к функции КадровыеДанныеСотрудников.
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеСотрудников.
//
Процедура СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	ОписательВременнойТаблицыОтборов = ОписаниеВременнойТаблицыОтборовСотрудников(
		ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременныхТаблиц.ПоляОтбораСотрудников.Сотрудник,
		ОписательВременныхТаблиц.ПоляОтбораСотрудников.Период);
	
	ИсточникиДанных = Новый Соответствие;
	
	Запрос = ЗапросВТКадровыеДанныеСотрудников(
		ТолькоРазрешенные,
		ОписательВременнойТаблицыОтборов,
		КадровыеДанные,
		ПоляОтбораПериодическихДанных,
		ФормироватьСПериодичностьДень,
		ИсточникиДанных,
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников);
	
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТФизическиеЛицаРаботавшиеВОрганизации со списком физических лиц, работавших в указанных
// организации, подразделении и в заданном периоде. Если подразделение не указывать в список будут отобраны физические
// лица работавшие в организации независимо от подразделения.
// Временная таблица содержит поля ФизическоеЛицо и Период. Значение поля Период всегда равно значению параметра
// ОкончаниеПериода.
//
// Параметры:
//		МенеджерВременныхТаблиц	- МенеджерВременныхТаблиц
//		ТолькоРазрешенные 		- Булево
//		Организация				- СправочникСсылка.Организации
//		НачалоПериода 			- Дата
//		ОкончаниеПериода 		- Дата
//		Подразделение			- СправочникСсылка.Подразделения
//		ОтбиратьПоГоловнойОрганизации - Булево
//		Отборы					- Массив, структур описывающих отборы сотрудников
//									описание структуры см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор,
//									допустимые отборы описаны см. КритерииПоискаСотрудниковПоКоллекцииОтборов
//		ИмяВТФизическиеЛицаРаботавшиеВОрганизации - Строка
//
Процедура СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, Знач НачалоПериода, Знач ОкончаниеПериода, Подразделение = Неопределено, ОтбиратьПоГоловнойОрганизации = Ложь, Отборы = Неопределено, ИмяВТФизическиеЛицаРаботавшиеВОрганизации = "ВТФизическиеЛицаРаботавшиеВОрганизации") Экспорт
	
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Если ОтбиратьПоГоловнойОрганизации Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Организация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	Иначе
		ПараметрыПолученияСотрудниковОрганизаций.Организация = Организация;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации	= ОтбиратьПоГоловнойОрганизации;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода					= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода				= ОкончаниеПериода;
	
	Если Отборы <> Неопределено Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Отборы = Отборы;
	КонецЕсли;
	
	СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(СотрудникиОрганизации.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаРаботавшиеВОрганизации
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаРаботавшиеВОрганизации", ИмяВТФизическиеЛицаРаботавшиеВОрганизации);
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТСотрудникиОрганизации, содержащую поля Сотрудник и ФизическоеЛицо.
// Если заданы параметры НачалоПериода и ОкончаниеПериода метод вернет список сотрудников, работавших
// в заданном периоде. Если НачалоПериода и ОкончаниеПериода заданы и равны сформирует таблицу.
// Сотрудников работавших на заданную дату.
//
// Параметры:
//				МенеджерВременныхТаблиц
//				ТолькоРазрешенные - Булево
//				Параметры - Структура, подготовленная с помощью метода ПараметрыПолученияСотрудниковОрганизаций.
//				ИмяВТСотрудникиОрганизации - Строка
//
Процедура СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТСотрудникиОрганизации = "ВТСотрудникиОрганизации") Экспорт
	
	Если ПривилегированныйРежим() Тогда
		
		Запрос = ЗапросВТСотрудникиОрганизации(
			ТолькоРазрешенные,
			ИмяВТСотрудникиОрганизации,
			Параметры,
			МенеджерВременныхТаблиц);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	Иначе
		
		ПараметрыПолученияСотрудников = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
			Модуль.УточнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
		КонецЕсли;
		
		ИмяВТСотрудникиПериоды = "ВТСотрудникиПериодыДляПолученияСотрудниковОрганизации";
		Запрос = ЗапросВТОтборСотрудниковОрганизации(
			ТолькоРазрешенные, ПараметрыПолученияСотрудников, ИмяВТСотрудникиПериоды);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос = ЗапросВТСотрудникиОрганизацииПоРабочимМестам(
			ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, ПараметрыПолученияСотрудников, МенеджерВременныхТаблиц);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Выполнить();
		
		Запрос.Текст = "";
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВЗапросСозданияВременнойТаблицыТекстУничтоженияВспомогательной(
			Запрос.Текст, ИмяВТСотрудникиПериоды);
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу содержащую поля ФизическоеЛицо и Сотрудник. Сотрудник отбирается по принципам:
//		- Работает на указанный период.
//		- Выбирается сотрудник, работающий по основному месту работы, если такового не существует, выбирается
//			сотрудник, работающий по совместительству, принятый на наиболее раннюю дату.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//		ТолькоРазрешенные		- Булево
//		СписокФизическихЛиц		- Массив ссылок на элементы справочника ФизическиеЛица или 
//								- СправочникСсылка.ФизическиеЛица
//								- Неопределено - в таблицу войдут "основные" сотрудники всех
//									физических лиц когда либо работавших в организации.
//		НачалоПериода			- Дата
//		ОкончаниеПериода		- Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//									получены на дату НачалоПериода.
//		Организация				- СправочникСсылка.Организации
//
Процедура СоздатьВТОсновныеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода = '00010101') Экспорт
	
	ПараметрыОтбораПоОрганизациям = ПараметрыОтбораОрганизаций(Организация);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("ОкончаниеПериода", НачалоДня(?(ЗначениеЗаполнено(ОкончаниеПериода), ОкончаниеПериода, ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата())));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	ОсновныеСотрудникиФизическихЛиц.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВсеОсновныеСотрудникиФизическихЛиц
		|ИЗ
		|	РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|ГДЕ
		|	(&НачалоПериода МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания
		|			ИЛИ &ОкончаниеПериода МЕЖДУ ОсновныеСотрудникиФизическихЛиц.ДатаНачала И ОсновныеСотрудникиФизическихЛиц.ДатаОкончания)
		|	И ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо В(&СписокФизическихЛиц)
		|	И ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация В(&ГоловныеОрганизации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВсеОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛиц.Сотрудник) КАК Сотрудник,
		|	&ОкончаниеПериода КАК Период
		|ПОМЕСТИТЬ ВТОсновныеСотрудникиФизическихЛиц
		|ИЗ
		|	ВТВсеОсновныеСотрудникиФизическихЛиц КАК ВсеОсновныеСотрудникиФизическихЛиц
		|ГДЕ
		|	ВсеОсновныеСотрудникиФизическихЛиц.ДатаОкончания > &ОкончаниеПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация,
		|	ВсеОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВсеОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация,
		|	ВсеОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо,
		|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛиц.Сотрудник),
		|	&ОкончаниеПериода
		|ИЗ
		|	ВТВсеОсновныеСотрудникиФизическихЛиц КАК ВсеОсновныеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиНаКонецПериода
		|		ПО ВсеОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация = ОсновныеСотрудникиНаКонецПериода.ГоловнаяОрганизация
		|			И ВсеОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо = ОсновныеСотрудникиНаКонецПериода.ФизическоеЛицо
		|			И (ОсновныеСотрудникиНаКонецПериода.ДатаОкончания > &ОкончаниеПериода)
		|ГДЕ
		|	ВсеОсновныеСотрудникиФизическихЛиц.ДатаОкончания <= &ОкончаниеПериода
		|	И ОсновныеСотрудникиНаКонецПериода.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация,
		|	ВсеОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВсеОсновныеСотрудникиФизическихЛиц";
	
	Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
		Запрос.УстановитьПараметр("ГоловныеОрганизации", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация В(&ГоловныеОрганизации)", "");
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПериодыОсновныхСотрудниковФизическихЛиц(ТаблицаФильтр) Экспорт
	ОписаниеФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеФильтраДляСоздатьВТИмяРегистраПоТаблицеЗначений(
		ТаблицаФильтр,
		"ФизическоеЛицо, ГоловнаяОрганизация");
		
	ОписаниеПакета = ЗарплатаКадрыПериодическиеРегистры.НовыйОписаниеПакетаЗапросовКРегистру();
	ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра("ОсновныеСотрудникиФизическихЛиц");
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ОсновныеСотрудникиФизическихЛиц.ДатаНачала < НАЧАЛОПЕРИОДА(&ФильтрДатаНачала_, ДЕНЬ)
	|			ТОГДА &ФильтрДатаНачала_
	|		ИНАЧЕ ОсновныеСотрудникиФизическихЛиц.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ОсновныеСотрудникиФизическихЛиц.ДатаОкончания > &ФильтрДатаОкончания_
	|			ТОГДА &ФильтрДатаОкончания_
	|		ИНАЧЕ ОсновныеСотрудникиФизическихЛиц.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	ВТИзмеренияДаты КАК ИзмеренияДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
	|		ПО (&ШаблонУсловияСвязиПоИзмерения)
	|			И (&ФильтрДатаНачала_ МЕЖДУ ИзмеренияДаты.ДатаНачала И &ФильтрДатаОкончания_
	|				ИЛИ ОсновныеСотрудникиФизическихЛиц.ДатаНачала МЕЖДУ НАЧАЛОПЕРИОДА(&ФильтрДатаНачала_, ДЕНЬ) И &ФильтрДатаОкончания_)";
	
	ОписаниеЗапроса = ЗарплатаКадрыПериодическиеРегистры.ОписаниеЗапросаПоТексту(ШаблонЗапроса);
	ОписаниеПакета.ЗапросыПолученияДанных.Добавить(ОписаниеЗапроса);
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеИспользованияФильтра = ЗарплатаКадрыПериодическиеРегистры.ОписаниеИспользованиеФильтра("ИзмеренияДаты", "ОсновныеСотрудникиФизическихЛиц");
	ЗарплатаКадрыПериодическиеРегистры.ИнициализироватьИспользованиеФильтра(
		ОписаниеИспользованияФильтра,
		ОписаниеФильтра,
		ОписаниеРегистра,
		"ДатаНачала, ДатаОкончания",
		ОператорЗапроса);
		
	ФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаНачала", "ДатаНачала");
	ФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ДобавитьОписаниеПоляПериодФильтра(ОписаниеИспользованияФильтра, "ДатаОкончания", "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаНачала_", ФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.УстановитьВыражениеПериодаВТекстШаблонаУсловияСвязи(ОписаниеИспользованияФильтра, "&ФильтрДатаОкончания_", ФильтрДатаОкончания);
	
	ВыражениеФильтрДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаНачала);
	ВыражениеФильтрДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПериод(ФильтрДатаОкончания);
	
	ВыражениеПоляДатаНачала = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ДатаНачала");
	ВыражениеПоляДатаНачала = СтрЗаменить(ВыражениеПоляДатаНачала, "&ФильтрДатаНачала_", ВыражениеФильтрДатаНачала);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаНачала, "ДатаНачала");
	
	ВыражениеПоляДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.ВыражениеПоляПоПсевдониму(ОператорЗапроса, "ДатаОкончания");
	ВыражениеПоляДатаОкончания = СтрЗаменить(ВыражениеПоляДатаОкончания, "&ФильтрДатаОкончания_", ВыражениеФильтрДатаОкончания);
	ЗарплатаКадрыПериодическиеРегистры.ДобавитьПолеВОписаниеЗапроса(ОписаниеЗапроса, 0, ВыражениеПоляДатаОкончания, "ДатаОкончания");
	
	ЗарплатаКадрыПериодическиеРегистры.УстановитьФильтрВОписаниеПакетаЗапросовКРегистру(
		ОписаниеПакета,
		ОписаниеФильтра,
		ОписаниеИспользованияФильтра);
	
	Запрос = ЗарплатаКадрыПериодическиеРегистры.ЗапросПоОписаниюПакета(ОписаниеПакета, Ложь);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Создает в переданном менеджере временных таблиц временную таблицу с именем переданным
//	в параметре ИмяВТОсновныеСотрудникиФизическихЛицВПериодах, содержащую поля:
//		* Период						- Дата
//		* Сотрудник						- СправочникСсылка.Сотрудники
//		* ФизическоеЛицо				- СправочникСсылка.ФизическиеЛица
//		* ГоловнаяОрганизация			- СправочникСсылка.Организации
//		* Организация					- СправочникСсылка.Организации
//		* Подразделение					- СправочникСсылка.ПодразделенияОрганизаций
//		* Должность						- СправочникСсылка.Должности
//		* КоличествоСтавок				- Число
//		* ВидЗанятости					- ПеречислениеСсылка.ВидыЗанятости
//
//		В зависимости от версии конфигурации, дополнительно может содержать поля
//		* ДолжностьПоШтатномуРасписанию	- СправочникСсылка.ШтатноеРасписание
//		* ВидДоговора					- ПеречислениеСсылка.ВидыДоговоровССотрудниками
//		* РольСотрудника				- ПеречислениеСсылка.РолиСотрудников
//
// Параметры:
//		МенеджерВременныхТаблиц 						- МенеджерВременныхТаблиц
//		ТолькоРазрешенные								- Булево
//		ГоловнаяОрганизация 							- СправочникСсылка.Организации - основные сотрудники определяются в рамках
//															значения реквизита ГоловнаяОрганизация
//		ИмяВТФизическиеЛицаПериоды						- Строка, имя таблицы в менеджере временных таблиц, задающий основной отбор
//															сотрудников, должна содержать поля:
//																* Период			- Дата
//																* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//		ИмяВТОсновныеСотрудникиФизическихЛицВПериодах	- Строка
//
Процедура СоздатьВТОсновныеСотрудникиФизическихЛицВПериодах(МенеджерВременныхТаблиц, ТолькоРазрешенные, Знач ГоловнаяОрганизация, Знач ИмяВТФизическиеЛицаПериоды, Знач ИмяВТОсновныеСотрудникиФизическихЛицВПериодах = "ВТОсновныеСотрудникиФизическихЛицВПериодах") Экспорт
	
	ФОИспользоватьНачисленияПоДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам");
	Если ФОИспользоватьНачисленияПоДоговорам Тогда
		ИмяВТОсновныеСотрудники = "ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц";
	Иначе
		ИмяВТОсновныеСотрудники = ИмяВТОсновныеСотрудникиФизическихЛицВПериодах;
	КонецЕсли;
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		ИмяВТФизическиеЛицаПериоды, "ФизическоеЛицо");
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(ГоловнаяОрганизация));
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ЭтоГоловнойСотрудник", "=", Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "ВидСобытия", "<>", Перечисления.ВидыКадровыхСобытий.Увольнение);
	
	Если ПараметрыПостроения.ПостоянныеПоля = Неопределено Тогда
		ПараметрыПостроения.ПостоянныеПоля = Новый Структура;
	КонецЕсли;
	
	ПараметрыПостроения.ПостоянныеПоля.Вставить("РольСотрудника", Перечисления.РолиСотрудников.Работник);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"КадроваяИсторияСотрудников",
		МенеджерВременныхТаблиц,
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "=", ЗарплатаКадры.ГоловнаяОрганизация(ГоловнаяОрганизация));
	
	ВидыЗанятостиОсновныхСотрудников = Новый Массив;
	ВидыЗанятостиОсновныхСотрудников.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ВидыЗанятостиОсновныхСотрудников.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "ВидЗанятости", "В", ВидыЗанятостиОсновныхСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ВидыЗанятостиСотрудников",
		МенеджерВременныхТаблиц,
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыЗанятостиСотрудников.Период КАК Период,
		|	ВидыЗанятостиСотрудников.Сотрудник КАК Сотрудник,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВидыЗанятостиСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	КадроваяИсторияСотрудников.*,
		|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник) КАК РольСотрудника
		|ПОМЕСТИТЬ ВТОсновныеСотрудникиФизическихЛицВПериодах
		|ИЗ
		|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудниковСрезПоследних КАК ВидыЗанятостиСотрудников
		|		ПО КадроваяИсторияСотрудников.Период = ВидыЗанятостиСотрудников.Период
		|			И КадроваяИсторияСотрудников.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОсновныеСотрудникиФизическихЛицВПериодах", ИмяВТОсновныеСотрудники);
	
	Запрос.Выполнить();
	
	Если ФОИспользоватьНачисленияПоДоговорам Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(ГоловнаяОрганизация));
		
		ТекстыЗапросов = Новый Массив;
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ФизическиеЛицаПериоды.Период КАК Период,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация КАК Организация,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение КАК Подразделение,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование КАК ДокументОснование,
			|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= ОсновныеСотрудникиФизическихЛиц.Период
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= ОсновныеСотрудникиФизическихЛиц.Период
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаПериоды КАК ФизическиеЛицаПериоды
			|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ФизическиеЛицаПериоды.ФизическоеЛицо
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала <= ФизическиеЛицаПериоды.Период
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= ФизическиеЛицаПериоды.Период
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.Период ЕСТЬ NULL
			|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапроса, ТолькоРазрешенные);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТФизическиеЛицаПериоды", ИмяВТФизическиеЛицаПериоды);
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания) КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТСПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|ИЗ
			|	ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания,
			|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Организация) КАК Организация
			|ПОМЕСТИТЬ ВТОсновныеСотрудникиДоговорникиГПХФизическихЛиц
			|ИЗ
			|	ВТСПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|		ПО СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период
			|			И СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник
			|			И СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо
			|			И СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания
			|
			|СГРУППИРОВАТЬ ПО
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	СПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания";
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОсновныеСотрудникиФизическихЛиц.Период КАК Период,
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
			|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОсновныеСотрудникиФизическихЛиц.ВидЗанятости КАК ВидЗанятости,
			|	ОсновныеСотрудникиФизическихЛиц.Организация КАК Организация,
			|	ОсновныеСотрудникиФизическихЛиц.Подразделение КАК Подразделение,
			|	ОсновныеСотрудникиФизическихЛиц.Должность КАК Должность,
			|	ОсновныеСотрудникиФизическихЛиц.ДолжностьПоШтатномуРасписанию КАК ДолжностьПоШтатномуРасписанию,
			|	ОсновныеСотрудникиФизическихЛиц.КоличествоСтавок КАК КоличествоСтавок,
			|	ОсновныеСотрудникиФизическихЛиц.ВидДоговора КАК ВидДоговора,
			|	ОсновныеСотрудникиФизическихЛиц.РольСотрудника КАК РольСотрудника
			|ПОМЕСТИТЬ ВТОсновныеСотрудникиФизическихЛицВПериодах
			|ИЗ
			|	ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация.ГоловнаяОрганизация,
			|	СотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	ВЫРАЗИТЬ(NULL КАК Перечисление.ВидыКадровыхСобытий),
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация,
			|	МАКСИМУМ(ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Подразделение),
			|	ВЫРАЗИТЬ(NULL КАК Справочник.Должности),
			|	NULL,
			|	0,
			|	NULL,
			|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)
			|ИЗ
			|	ВТОсновныеСотрудникиДоговорникиГПХФизическихЛиц КАК СотрудникиФизическихЛицДоговорникиГПХ
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ КАК ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|		ПО СотрудникиФизическихЛицДоговорникиГПХ.Период = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Период
			|			И СотрудникиФизическихЛицДоговорникиГПХ.Сотрудник = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Сотрудник
			|			И СотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо
			|			И СотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.ДатаОкончания
			|			И СотрудникиФизическихЛицДоговорникиГПХ.Организация = ВсеОсновныеСотрудникиФизическихЛицДоговорникиГПХ.Организация
			|
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиФизическихЛицДоговорникиГПХ.Период,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Сотрудник,
			|	СотрудникиФизическихЛицДоговорникиГПХ.ФизическоеЛицо,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация.ГоловнаяОрганизация,
			|	СотрудникиФизическихЛицДоговорникиГПХ.Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТСПозднейДатойОкончанияОсновныеСотрудникиФизическихЛицДоговорникиГПХ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТБезДоговорниковГПХОсновныеСотрудникиФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТОсновныеСотрудникиДоговорникиГПХФизическихЛиц";
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТОсновныеСотрудникиФизическихЛицВПериодах", ИмяВТОсновныеСотрудникиФизическихЛицВПериодах);
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив физических лиц сотрудников.
//
// Параметры:
//	Сотрудники - массив
//
// Возвращаемое значение - массив уникальных физических лиц.
//	
Функция ФизическиеЛицаСотрудников(Сотрудники) Экспорт
	
	Соответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(Соответствие, "Значение", Истина);
	
КонецФункции

Процедура ДобавитьЗапросыУничтоженияВспомогательныхВременныхТаблиц(Запрос, ИсточникиДанных) Экспорт
	
	ИменаТаблицКУничтожению = ИсточникиДанных.Получить("ВТКУничтожению");
	Если ИменаТаблицКУничтожению <> Неопределено Тогда
		
		Если ЗарплатаКадрыОбщиеНаборыДанных.ЗапросСозданияВременнойТаблицы(Запрос.Текст) Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ИменаТаблицКУничтожению);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВТПервыеКадровыеСобытия(МенеджерВременныхТаблиц, ТолькоРазрешенные, ИмяТаблицыФильтра, СтрокаИзмерений, ИмяРезультирующейТаблицы = "ВТПервыеКадровыеСобытия", ВидыСобытий = Неопределено) Экспорт
	
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИмяТаблицыФильтра, СтрокаИзмерений);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	
	Если ВидыСобытий <> Неопределено Тогда
		Отбор = Новый Массив;
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(Отбор, "ВидСобытия", "В", ВидыСобытий);
		ПараметрыПостроения.Отборы = Отбор;
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПервых(
		"КадроваяИсторияСотрудников",
		МенеджерВременныхТаблиц,
		ТолькоРазрешенные,
		ОписаниеФильтра,
		ПараметрыПостроения,
		ИмяРезультирующейТаблицы);
	
КонецПроцедуры

#КонецОбласти


#Область ФункцииДляРегламентированнойОтчетности

// РСВ-1

Процедура ОписаниеПоказателей_РСВ1_2015Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2015Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьДляРСВ1(ПараметрыОтчета)
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2014Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2014Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьДляРСВ1(ПараметрыОтчета)
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2013Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2013Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьДляРСВ1(ПараметрыОтчета)
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2012Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2012Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьДляРСВ1(ПараметрыОтчета)
	
КонецПроцедуры

Процедура ОписаниеПоказателей_РСВ1_2011Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСписЧисл", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ1_2011Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.СрСписЧисл = СреднесписочнаяЧисленностьДляРСВ1(ПараметрыОтчета)
	
КонецПроцедуры

// РСВ

Процедура ОписаниеПоказателей_РСВ_2020(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "СрСпЧисленность", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_РСВ_2020(ПараметрыОтчета, Контейнер) Экспорт
	
	Если ПараметрыОтчета.Организация = ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыОтчета.Организация) Тогда
		Контейнер.Титульный.СрСпЧисленность = СреднесписочнаяЧисленностьДляРСВ(ПараметрыОтчета)	
	ИначеЕсли Год(ПараметрыОтчета.ДатаКонцаПериодаОтчета) = 2020 Тогда
		Контейнер.Титульный.СрСпЧисленность = 0
	КонецЕсли;
	
КонецПроцедуры

// Сведения о среднесписочной численности работников за предшествующий календарный год (ФНС).

Процедура ОписаниеПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПоказателиОтчета) Экспорт
	
	ЗарплатаКадры.ДобавитьПоказательРегламентированнойОтчетности(ПоказателиОтчета, "Численность", Истина, Ложь);
	
КонецПроцедуры

Процедура ЗначенияПоказателей_СреднесписочнаяЧисленностьРаботников_2007Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Контейнер.Титульный.Численность = СтатистикаПерсонала.СреднесписочнаяЧисленностьРаботающих(ПараметрыОтчета.Организация, ПараметрыОтчета.ДатаНачалаПериодаОтчета, ПараметрыОтчета.ДатаКонцаПериодаОтчета).СреднесписочнаяЧисленностьРаботников;
	
КонецПроцедуры

// Заменяет в исходном тексте запроса кадровых данных поле данных ФизическоеЛицо
// на имя поля, заданное во временной таблице, при этом если имя поле задано через точку
// производится приведение к типу Справочник.Сотрудники.
//
// Параметры:
//		ТекстЗапроса	- Строка
//		ПутьКПолю		- Строка
//		ИмяПоля			- Строка
//
// Например:
//
//		ПутьКПолю = "ТаблицаОтборов.ФизическоеЛицо"
//		ИмяПоля	  = "ФизическоеЛицоСотрудника"
//		текст ПутьКПолю будет заменен на "ТаблицаОтборов.ФизическоеЛицоСотрудника".
//
//		ПутьКПолю = "ТаблицаОтборов.ФизическоеЛицо"
//		ИмяПоля	  = "Сотрудник.ФизическоеЛицо"
//		текст ПутьКПолю будет заменен на "ВЫРАЗИТЬ(ТаблицаОтборов.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо".
//
Процедура УстановитьВТекстеЗапросаИмяПоляФизическоеЛицо(ТекстЗапроса, ПутьКПолю, ИмяПоля) Экспорт
	
	ИменаВПутиКПолю = СтрРазделить(ПутьКПолю, ".", Ложь);
	НовыйПутьКПолю = ПутьКПолюФизическоеЛицо(ИменаВПутиКПолю[0], ИмяПоля);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПутьКПолю, НовыйПутьКПолю);
	
КонецПроцедуры

Процедура УстановитьПутьКПолюФизическоеЛицо(ТекстЗапроса, ПсевдонимТаблицы, ИмяПоляФизическоеЛицо) Экспорт
	
	Если СтрЧислоВхождений(ИмяПоляФизическоеЛицо, ".") > 0 Тогда
		
		ЗаменяемаяСтрока = ПсевдонимТаблицы + "." + ИмяПоляФизическоеЛицо;
		СтрокаЗамены = ПутьКПолюФизическоеЛицо(ПсевдонимТаблицы, ИмяПоляФизическоеЛицо);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменяемаяСтрока, СтрокаЗамены);
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПутьКПолюФизическоеЛицо(ПсевдонимТаблицы, ИмяПоляФизическоеЛицо) Экспорт
	
	Если СтрЧислоВхождений(ИмяПоляФизическоеЛицо, ".") > 0 Тогда
		
		ИменаПути = СтрРазделить(ИмяПоляФизическоеЛицо, ".", Ложь);
		ПутьКПолю = "ВЫРАЗИТЬ(" + ПсевдонимТаблицы + "." + ИменаПути[0] + " КАК Справочник.Сотрудники)." + ИменаПути[1];
		
	Иначе
		ПутьКПолю = ПсевдонимТаблицы + "." + ИмяПоляФизическоеЛицо;
	КонецЕсли; 
	
	Возврат ПутьКПолю;
	
КонецФункции

// Формирует соответствие - критерии поиска сотрудников. В качестве ключа выступает полное имя объекта
// метаданных по которому будет производиться поиск в качестве значение массив структур описывающих отборы.
// см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор.
//
// Параметры:
//		Отборы	- Массив, структур описывающих отборы по кадровым данным сотрудников или физических лиц
//				Описание доступных полей отборов сотрудников см. КадровыйУчетВнутренний.КритерииПоискаСотрудниковПоКоллекцииОтборов.
//
// Возвращаемое значение:
//		Соответствие
//
Функция КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы) Экспорт
	
	Возврат КадровыйУчетВнутренний.КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы);
	
КонецФункции

Процедура ДобавитьКритерийПоискаСотрудников(КритерииПоиска, ИмяКритерия, Условие) Экспорт
	
	КоллекцияКритерия = КритерииПоиска.Получить(ИмяКритерия);
	Если КоллекцияКритерия = Неопределено Тогда
		КоллекцияКритерия = Новый Массив;
	КонецЕсли; 
	
	КоллекцияКритерия.Добавить(Условие);
	КритерииПоиска.Вставить(ИмяКритерия, КоллекцияКритерия);
	
КонецПроцедуры

Процедура УдалитьПустыеКритерииПоиска(КритерииПоиска) Экспорт
	
	УдаляемыеКритерии = Новый Массив;
	Для каждого КритерийПоиска Из КритерииПоиска Цикл
		
		Если ЭтоПустойКритерийПоиска(КритерийПоиска) Тогда
			УдаляемыеКритерии.Добавить(КритерийПоиска.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемыйКритерий Из УдаляемыеКритерии Цикл
		КритерииПоиска.Удалить(УдаляемыйКритерий);
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПустойКритерийПоиска(КритерийПоиска) Экспорт
	
	Возврат ЭтоПустыеОтборыКритерияПоиска(КритерийПоиска.Значение);
	
КонецФункции

Функция ЭтоПустыеОтборыКритерияПоиска(Отборы) Экспорт
	
	ЭтоПустойКритерий = Истина;
	Для каждого ЭлементОтбора Из Отборы Цикл
		
		Если ВРег(ЭлементОтбора.ЛевоеЗначение) <> ВРег("Период")
			И ВРег(ЭлементОтбора.ЛевоеЗначение) <> ВРег("ДатаНачала")
			И ВРег(ЭлементОтбора.ЛевоеЗначение) <> ВРег("ДатаОкончания") Тогда
			
			ЭтоПустойКритерий = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтоПустойКритерий;
	
КонецФункции

// Возвращает запрос, создающий временную таблицу, содержащую колонку ФизическоеЛицо
// с физическими лицами (Сотрудник - для области поиска "Справочник.Сотрудники"), отвечающими критериям поиска.
//
// Параметры:
//		КритерииПоискаСотрудников			- Соответствие
//												* Ключ		- Строка, полное имя объекта метаданных (справочник,
//													владельцем которого является справочник ФизическиеЛица 
//													или регистр сведений с именем измерения ФизическоеЛицо)
//												* Значение	- Массив структур, описывающих отборы (см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор)
//															- Структура описывающая таблицу - отбор
//																* ТаблицаОтбора	- Строка, имя временной таблицы - отбора
//																				- ТаблицаЗначений
//																* Колонки		- Строка, имена колонок таблицы отбора по которым осуществляется отбор
//																					обязателен в случае если тип ТаблицаОтбора - Строка
//		ТолькоРазрешенные					- Булево
//		ОбластьПоиска						- Строка, полное имя объекта метаданных - справочника ("Справочник.ФизическиеЛица" или "Справочник.Сотрудники")
//		ИмяВТСотрудникиПоКритериямПоиска	- Строка
//
Функция ЗапросВТСотрудникиПоКритериямПоиска(КритерииПоискаСотрудников, ТолькоРазрешенные, Знач ОбластьПоиска = "Справочник.ФизическиеЛица", ИмяВТСотрудникиПоКритериямПоиска = "ВТСотрудникиПоКритериямПоиска") Экспорт
	
	Если ТипЗнч(КритерииПоискаСотрудников) <> Тип("Соответствие") ИЛИ КритерииПоискаСотрудников.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru='Не заданы критерии поиска'");
	КонецЕсли; 
	
	ИменаВременныхТаблицКУничтожению = Новый Массив;
	
	ОбластьПоиска = ВРег(ОбластьПоиска);
	ОбластьПоискаПоСотрудникам = "";
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	ТекстЗапросаСправочника = "";
	ТекстЗапросаСправочникаДляПоискаПоПериоду = "";
	ТекстСоединений = "";
	
	КритерийОбластьПоиска = Неопределено;
	КритерийПоискаФизическиеЛица = Неопределено;
	КритерийПоискаПоКадровойИсторииСотрудников = Неопределено;
	Для каждого КритерийПоиска Из КритерииПоискаСотрудников Цикл
		
		Если ВРег(КритерийПоиска.Ключ) = ОбластьПоиска Тогда
			КритерийОбластьПоиска = КритерийПоиска;
		ИначеЕсли ВРег(КритерийПоиска.Ключ) = ВРег("Справочник.ФизическиеЛица") Тогда
			КритерийПоискаФизическиеЛица = КритерийПоиска;
		ИначеЕсли ВРег(КритерийПоиска.Ключ) = ВРег("РегистрСведений.КадроваяИсторияСотрудников") Тогда
			КритерийПоискаПоКадровойИсторииСотрудников = КритерийПоиска;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбластьПоиска = ВРег("Справочник.Сотрудники")
		И Не ЗначениеЗаполнено(КритерийОбластьПоиска)
		И ЗначениеЗаполнено(КритерийПоискаПоКадровойИсторииСотрудников) Тогда
		
		КритерийОбластьПоиска = КритерийПоискаПоКадровойИсторииСотрудников;
		ОбластьПоискаПоСотрудникам = ВРег("РегистрСведений.КадроваяИсторияСотрудников");
		
	ИначеЕсли ОбластьПоиска = ВРег("Справочник.Сотрудники") Тогда
		ОбластьПоискаПоСотрудникам = ОбластьПоиска;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КритерийОбластьПоиска)
		И ЗначениеЗаполнено(КритерийПоискаФизическиеЛица) Тогда
		
		Для каждого ОписаниеУсловия Из КритерийПоискаФизическиеЛица.Значение Цикл
			
			Если ОписаниеУсловия.ОтносительныйПуть Тогда
				
				ОписаниеУсловия.ОтносительныйПуть = Ложь;
				ОписаниеУсловия.ЛевоеЗначение = "ВЫРАЗИТЬ(Т.ФизическоеЛицо КАК Справочник.ФизическиеЛица)." + ОписаниеУсловия.ЛевоеЗначение;
				
			ИначеЕсли КритерийОбластьПоиска.Ключ <> КритерийПоискаФизическиеЛица.Ключ Тогда
				
				ОписаниеУсловия.ЛевоеЗначение = СтрЗаменить(ОписаниеУсловия.ЛевоеЗначение, "Т.", "ВЫРАЗИТЬ(Т.ФизическоеЛицо КАК Справочник.ФизическиеЛица).");
				
			КонецЕсли;
			
			КритерийОбластьПоиска.Значение.Добавить(ОписаниеУсловия);
			
		КонецЦикла;
		
		КритерииПоискаСотрудников.Удалить(КритерийПоискаФизическиеЛица.Ключ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КритерийОбластьПоиска) Тогда
		
		ИмяВТСотрудники = "ВТСотрудникиПоУсловиямПоиска";
		
		ЗапросПоУсловиям = ЗапросВТСотрудникиПоУсловиямПоиска(КритерийОбластьПоиска.Ключ, ТолькоРазрешенные, КритерийОбластьПоиска.Значение, ОбластьПоиска, , ИмяВТСотрудники);
		
		ТекстЗапросаСправочника = ЗапросПоУсловиям.Текст;
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаСправочника, ИмяВТСотрудники, ИмяВТСотрудникиПоКритериямПоиска);
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросПоУсловиям);
		
		ТекстЗапросаСправочникаДляПоискаПоПериоду = ЗапросПоУсловиям.Текст;
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(ТекстЗапросаСправочникаДляПоискаПоПериоду, ИмяВТСотрудники, "ВТСотрудникиОтборы");
		
	КонецЕсли;
	
	ТекстыЗапросов = Новый Массив;
	ТекстыСоединений = Новый Массив;
	
	Для каждого КритерийПоиска Из КритерииПоискаСотрудников Цикл
		
		Если ВРег(КритерийПоиска.Ключ) = ОбластьПоиска
			Или ВРег(КритерийПоиска.Ключ) = ОбластьПоискаПоСотрудникам Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТаблицы = СтрЗаменить(КритерийПоиска.Ключ, ".", "");
		ИмяВТСотрудникиПоУсловиямПоиска = "ВТУсловияПоиска" + ИмяТаблицы;
		ИменаВременныхТаблицКУничтожению.Добавить(ИмяВТСотрудникиПоУсловиямПоиска);
		
		ЗапросПоУсловиям = ЗапросВТСотрудникиПоУсловиямПоиска(КритерийПоиска.Ключ, ТолькоРазрешенные, КритерийПоиска.Значение, ОбластьПоиска, ТекстЗапросаСправочникаДляПоискаПоПериоду, ИмяВТСотрудникиПоУсловиямПоиска);
		
		ТекстыЗапросов.Вставить(0, ЗапросПоУсловиям.Текст);
		
		ЭтоКритерийПоискаФизическогоЛица = КритерийПоискаФизическогоЛица(КритерийПоиска.Ключ);
		
		Если ОбластьПоиска = ОбластьПоискаПоСотрудникам
			И ЭтоКритерийПоискаФизическогоЛица Тогда
			
			Если ВРег(КритерийПоиска.Ключ) = ВРег("РегистрСведений.ДокументыФизическихЛиц") Тогда
				ИмяПоляФизическоеЛицоТаблицы = "Физлицо";
			Иначе
				ИмяПоляФизическоеЛицоТаблицы = "ФизическоеЛицо";
			КонецЕсли;
			
			ТекстыСоединений.Добавить("
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПоУсловиямПоиска + " КАК " + ИмяТаблицы + "
				|		ПО Т.ФизическоеЛицо = " + ИмяТаблицы + "." + ИмяПоляФизическоеЛицоТаблицы + "}");
			
		ИначеЕсли ОбластьПоиска = ОбластьПоискаПоСотрудникам
			Или ОбластьПоискаПоСотрудникам = ВРег("РегистрСведений.КадроваяИсторияСотрудников") Тогда
			
			Если ОбластьПоискаПоСотрудникам = ВРег("Справочник.Сотрудники") Тогда
				
				ТекстыСоединений.Добавить("
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПоУсловиямПоиска + " КАК " + ИмяТаблицы + "
					|		ПО Т.Ссылка = " + ИмяТаблицы + ".Сотрудник}");
				
			ИначеЕсли ОбластьПоискаПоСотрудникам = ВРег("РегистрСведений.КадроваяИсторияСотрудников") Тогда
				
				ТекстыСоединений.Добавить("
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПоУсловиямПоиска + " КАК " + ИмяТаблицы + "
					|		ПО РегистрСведений.Сотрудник = " + ИмяТаблицы + ".Сотрудник}");
				
			Иначе
				
				ТекстыСоединений.Добавить("
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПоУсловиямПоиска + " КАК " + ИмяТаблицы + "
					|		ПО Т.Сотрудник = " + ИмяТаблицы + ".Сотрудник}");
				
			КонецЕсли;
			
		ИначеЕсли ОбластьПоиска = ВРег("Справочник.ФизическиеЛица")
			И Не ЭтоКритерийПоискаФизическогоЛица Тогда
			
			ТекстыСоединений.Добавить("
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПоУсловиямПоиска + " КАК " + ИмяТаблицы + "
				|		ПО Т.Ссылка = ВЫРАЗИТЬ(" + ИмяТаблицы + ".Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо}");
			
		Иначе
			
			Если ВРег(КритерийПоиска.Ключ) = ВРег("РегистрСведений.ДокументыФизическихЛиц") Тогда
				ИмяПоляФизическоеЛицоТаблицы = "Физлицо";
			Иначе
				ИмяПоляФизическоеЛицоТаблицы = "ФизическоеЛицо";
			КонецЕсли;
			
			ТекстыСоединений.Добавить("
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТСотрудникиПоУсловиямПоиска + " КАК " + ИмяТаблицы + "
				|		ПО Т.Ссылка = " + ИмяТаблицы + "." + ИмяПоляФизическоеЛицоТаблицы + "}");
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросПоУсловиям);
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапросаСправочника) Тогда
		
		Если ОбластьПоиска = ВРег("Справочник.ФизическиеЛица") Тогда
			
			ТекстЗапросаСправочника =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Т.Ссылка КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТСотрудникиПоКритериямПоиска
				|ИЗ
				|	Справочник.ФизическиеЛица КАК Т";
			
		Иначе
			
			ТекстЗапросаСправочника =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Т.Ссылка КАК Сотрудник,
				|	Т.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТСотрудникиПоКритериямПоиска
				|ИЗ
				|	Справочник.Сотрудники КАК Т";
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
			ТекстЗапросаСправочника, "ВТСотрудникиПоКритериямПоиска", ИмяВТСотрудникиПоКритериямПоиска);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(
			ТекстЗапросаСправочника, ТолькоРазрешенные);
		
		Если ТекстыСоединений.Количество() > 0 Тогда
			
			ТекстыСоединений.Вставить(0, ТекстЗапросаСправочника);
			ТекстЗапросаСправочника = СтрСоединить(ТекстыСоединений, Символы.ПС);
			
		КонецЕсли;
		
	Иначе
		
		Если ТекстыСоединений.Количество() > 0 Тогда
			
			Если ОбластьПоиска = ВРег("Справочник.ФизическиеЛица") Тогда
				СтрокаСИменемТаблицы = ВРег("Справочник.ФизическиеЛица КАК ");
			ИначеЕсли ОбластьПоиска = ВРег("Справочник.Сотрудники") И ОбластьПоискаПоСотрудникам = ВРег("Справочник.Сотрудники") Тогда
				СтрокаСИменемТаблицы = ВРег("Справочник.Сотрудники КАК ");
			Иначе
				
				СтрокаСИменемТаблицы = ВРег("РегистрСведений.КадроваяИсторияСотрудников КАК ");
				Если СтрНайти(ВРег(ТекстЗапросаСправочника), СтрокаСИменемТаблицы) = 0 Тогда
					СтрокаСИменемТаблицы = ВРег("РегистрСведений.КадроваяИсторияСотрудниковИнтервальный КАК ");
				КонецЕсли;
				
			КонецЕсли;
			
			ПозицияИмениТаблицы = СтрНайти(ВРег(ТекстЗапросаСправочника), СтрокаСИменемТаблицы);
			Для НомерСимвола = ПозицияИмениТаблицы + СтрДлина(СтрокаСИменемТаблицы) По СтрДлина(ТекстЗапросаСправочника) Цикл
				Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола(ТекстЗапросаСправочника, НомерСимвола), Символы.ПС + Символы.Таб + " ;") Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ТекстыСоединений.Вставить(0, Лев(ТекстЗапросаСправочника, НомерСимвола - 1));
			ТекстыСоединений.Добавить(Сред(ТекстЗапросаСправочника, НомерСимвола));
			ТекстЗапросаСправочника = СтрСоединить(ТекстыСоединений, Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстыЗапросов.Количество() = 0 Тогда
		Запрос.Текст = ТекстЗапросаСправочника;
	Иначе
		
		ТекстыЗапросов.Добавить(ТекстЗапросаСправочника);
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ИменаВременныхТаблицКУничтожению);
	
	Возврат Запрос;
	
КонецФункции

Функция КритерийПоискаФизическогоЛица(Знач ПолноеИмяОбъектаМетаданных)
	
	Если СтрЧислоВхождений(ПолноеИмяОбъектаМетаданных, ".") > 1 Тогда
		
		ИменаОбъектаМетаданных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных, ".");
		ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег(ИменаОбъектаМетаданных[0] + "." + ИменаОбъектаМетаданных[1]);
		
	Иначе
		ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег(ПолноеИмяОбъектаМетаданных);
	КонецЕсли;
	
	ПоискФизическогоЛица = Ложь;
	
	Если ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег("Справочник.ФизическиеЛица")
		Или ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег("РегистрСведений.ДокументыФизическихЛиц") Тогда
		ПоискФизическогоЛица = Истина;
	Иначе
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданныхВерхнемРегистре);
		Если СтрНайти(ПолноеИмяОбъектаМетаданныхВерхнемРегистре, ВРег("Справочник.")) = 1 Тогда
			ПоискФизическогоЛица = МетаданныеОбъекта.Владельцы.Содержит(МетаДанные.Справочники.ФизическиеЛица);
		Иначе
			
			ПоискСотрудника = Ложь;
			Для каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
				
				Если ВРег(Измерение.Имя) <> ВРег("ФизическоеЛицо")
					И ВРег(Измерение.Имя) <> ВРег("Сотрудник") Тогда
					Продолжить;
				КонецЕсли; 
				
				Если Измерение.Тип.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
					ПоискСотрудника = Истина;
					Прервать;
				КонецЕсли; 
				
				Если Измерение.Тип.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ПоискФизическогоЛица = Истина;
				КонецЕсли; 
				
			КонецЦикла;
			
			Если ПоискСотрудника Тогда
				ПоискФизическогоЛица = Ложь;
			КонецЕсли; 
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПоискФизическогоЛица;
	
КонецФункции

Функция ЗапросВТСотрудникиПоУсловиямПоиска(Знач ПолноеИмяОбъектаМетаданных, ТолькоРазрешенные, УсловияПоиска, Знач ОбластьПоиска, ТекстЗапросаСправочника = "", ИмяВТСотрудникиПоУсловиямПоиска = "ВТСотрудникиПоУсловиямПоиска")
	
	ОбластьПоиска = ВРег(ОбластьПоиска);
	
	Запрос = Новый Запрос;
	ИмяВТСотрудникиОтборы = "";
	
	СловаИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных, ".");
	Если СтрНайти(ВРег(ПолноеИмяОбъектаМетаданных), ВРег("Справочник.ФизическиеЛица.КонтактнаяИнформация")) <> 1 Тогда
		ПолноеИмяОбъектаМетаданных = СловаИмени[0] + "." + СловаИмени[1];
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег(СловаИмени[0]) + "." + ВРег(СловаИмени[1]);
	ПредставлениеТаблицы = СловаИмени[1];
	
	ПредставлениеСреза = Неопределено;
	ПредставлениеТаблицыРегистра = Неопределено;
	
	ПредставлениеСрезаОпределено = Ложь;
	
	Если ВРег(СловаИмени[0]) = ВРег("РегистрСведений") Тогда
		
		МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданныхВерхнемРегистре);
		Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			
			Если СловаИмени.Количество() > 2
				И СловаИмени[2] = ВРег("ТаблицаРегистра") Тогда
				
				ПредставлениеТаблицыРегистра = Истина;
				
			Иначе
				
				ПредставлениеСреза = Истина;
				Если СловаИмени.Количество() > 2
					И СловаИмени[2] = ВРег("СрезПоследних") Тогда
					
					ПредставлениеСрезаОпределено = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПредставлениеТаблицыРегистра <> Истина Тогда
				
				Для каждого ОписаниеУсловия Из УсловияПоиска Цикл
					
					Если ВРег(ОписаниеУсловия.ЛевоеЗначение) = ВРег("ДатаНачала")
						Или ВРег(ОписаниеУсловия.ЛевоеЗначение) = ВРег("ДатаОкончания") Тогда
						
						ПредставлениеТаблицыРегистра = Истина;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПредставлениеСреза = Истина Или ПредставлениеТаблицыРегистра = Истина Тогда
		
		МассивУсловий = Новый Массив;
		
		Период = "ДАТАВРЕМЯ(1, 1, 1)";
		ДатаНачала = Период;
		ДатаОкончания = Период;
		
		Если ТипЗнч(УсловияПоиска) = Тип("Массив") Тогда
			
			Для каждого ОписаниеУсловия Из УсловияПоиска Цикл
				
				Если ВРег(ОписаниеУсловия.ЛевоеЗначение) = ВРег("Период")
					Или ВРег(ОписаниеУсловия.ЛевоеЗначение) = ВРег("ДатаНачала")
					Или ВРег(ОписаниеУсловия.ЛевоеЗначение) = ВРег("ДатаОкончания") Тогда
					
					ПравоеЗначение = ОписаниеУсловия.ПравоеЗначение;
					Если ТипЗнч(ПравоеЗначение) = Тип("Дата") Тогда
						ПравоеЗначение = "ДАТАВРЕМЯ(" + Формат(ПравоеЗначение, "ДФ='гггг, ММ, дд, ЧЧ, мм, сс'; ДП=") + ")";
					ИначеЕсли ТипЗнч(ПравоеЗначение) <> Тип("Строка") Тогда
						
						ИмяПараметра = "Параметр" + ПредставлениеТаблицы + Формат(Запрос.Параметры.Количество(), "ЧГ=");
						Запрос.УстановитьПараметр(ИмяПараметра, ПравоеЗначение); 
						ПравоеЗначение = "&" + ИмяПараметра;
						
					КонецЕсли;
					
					Если ВРег(ОписаниеУсловия.ЛевоеЗначение) = ВРег("Период") Тогда
						Период = ПравоеЗначение;
					ИначеЕсли ВРег(ОписаниеУсловия.ЛевоеЗначение) = ВРег("ДатаНачала") Тогда
						ДатаНачала = ПравоеЗначение;
					Иначе
						ДатаОкончания = ПравоеЗначение;
					КонецЕсли;
					
				Иначе
					ОписаниеУсловия.ЛевоеЗначение = СтрЗаменить(ОписаниеУсловия.ЛевоеЗначение, "(Т.", "(РегистрСведений.");
					МассивУсловий.Добавить(ОписаниеУсловия);
				КонецЕсли;
					
			КонецЦикла;
			
			Если ПредставлениеСреза = Истина И ПредставлениеСрезаОпределено = Ложь
				И (ДатаНачала <> "ДАТАВРЕМЯ(1, 1, 1)" Или ДатаОкончания <> "ДАТАВРЕМЯ(1, 1, 1)") Тогда
				
				ПредставлениеСреза = Ложь;
				ПредставлениеТаблицыРегистра = Истина;
				
			КонецЕсли; 
			
			ИмяВТСотрудникиОтборы = "ВТОтборыСотрудникиДля" + СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
			
			ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
				ИмяВТСотрудникиОтборы);
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|ПОМЕСТИТЬ ВТСотрудникиОтборы";
			
			Если ПредставлениеСреза = Истина Тогда
				
				ТекстПериодов = "
					|	&Период КАК Период" + ПредставлениеТаблицы + "
					|";
				
				ТекстПериодов = СтрЗаменить(ТекстПериодов, "&Период", Период);
				
				ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", "Период" + ПредставлениеТаблицы);
				
			Иначе
				
				ТекстПериодов = "
					|	&ДатаНачала КАК ДатаНачала" + ПредставлениеТаблицы + ",
					|	&ДатаОкончания КАК ДатаОкончания" + ПредставлениеТаблицы + "
					|";
				
				ТекстПериодов = СтрЗаменить(ТекстПериодов, "&ДатаНачала", ДатаНачала);
				ТекстПериодов = СтрЗаменить(ТекстПериодов, "&ДатаОкончания", ДатаОкончания);
				
				ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", "ДатаНачала" + ПредставлениеТаблицы);
				ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаОкончания", "ДатаОкончания" + ПредставлениеТаблицы);
				
			КонецЕсли;
			
			ПозицияПоместить = СтрНайти(Запрос.Текст, "ПОМЕСТИТЬ");
			Запрос.Текст = Лев(Запрос.Текст, ПозицияПоместить - 2) + ТекстПериодов + Сред(Запрос.Текст, ПозицияПоместить);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиОтборы", ИмяВТСотрудникиОтборы);
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
			
		Иначе
			ОписаниеФильтра = УсловияПоиска;
		КонецЕсли;
		
		ИмяРегистра = Сред(ПолноеИмяОбъектаМетаданных, СтрНайти(ПолноеИмяОбъектаМетаданных, ".") + 1);
		Если ПредставлениеСреза = Истина Тогда
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
			ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистра);
			
			Для каждого ОписаниеОтбора Из МассивУсловий Цикл
				
				Если ОписаниеОтбора.ОтносительныйПуть
					И (ОписаниеРегистра.ИзмеренияДляПоиска.Получить(ВРег(ОписаниеОтбора.ЛевоеЗначение)) <> Неопределено
					Или ВРег(ОписаниеОтбора.ЛевоеЗначение) = ВРег("Регистратор")) Тогда
					
					ПараметрыПостроения.Отборы.Добавить(ОписаниеОтбора);
					
				Иначе
					ПараметрыПостроения.ОтборыПрименяемыеКСрезу.Добавить(ОписаниеОтбора);
				КонецЕсли;
				
			КонецЦикла;
			
			ЗапросКРегистру = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
				ИмяРегистра,
				ТолькоРазрешенные,
				ОписаниеФильтра,
				ПараметрыПостроения,
				Истина,
				ИмяВТСотрудникиПоУсловиямПоиска);
			
		Иначе
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
			ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
			ПараметрыПостроения.Отборы = МассивУсловий;
			
			ЗапросКРегистру = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
				ИмяРегистра,
				ТолькоРазрешенные,
				ОписаниеФильтра,
				ПараметрыПостроения,
				ИмяВТСотрудникиПоУсловиямПоиска);
			
		КонецЕсли;
		
		Если ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег("РегистрСведений.ДокументыФизическихЛиц") Тогда
			ЗапросКРегистру.Текст = СтрЗаменить(ЗапросКРегистру.Текст, "РегистрСведений.ФизическоеЛицо", "РегистрСведений.Физлицо");
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.СкопироватьПараметрыЗапроса(Запрос, ЗапросКРегистру);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(
			Запрос.Текст, ЗапросКРегистру.Текст);
		
	Иначе
		
		Если ТипЗнч(УсловияПоиска) = Тип("Массив") Тогда
			
			ТекстыУсловий = Новый Массив;
			Для каждого ОписаниеУсловия Из УсловияПоиска Цикл
				
				ПравоеЗначение = ОписаниеУсловия.ПравоеЗначение;
				Если ТипЗнч(ПравоеЗначение) = Тип("Число") Тогда
					ПравоеЗначение = Формат(ПравоеЗначение, "ЧН=; ЧГ=");
				ИначеЕсли ТипЗнч(ПравоеЗначение) = Тип("Дата") Тогда
					ПравоеЗначение = "ДАТАВРЕМЯ(" + Формат(ПравоеЗначение, "ДФ='гггг, ММ, дд, ЧЧ, мм, сс'; ДП=") + ")";
				ИначеЕсли ТипЗнч(ПравоеЗначение) <> Тип("Строка") Тогда
					
					ИмяПараметра = "Параметр" + ПредставлениеТаблицы + Формат(Запрос.Параметры.Количество(), "ЧГ=");
					Запрос.УстановитьПараметр(ИмяПараметра, ПравоеЗначение); 
					ПравоеЗначение = "&" + ИмяПараметра;
					
				КонецЕсли;
				
				Если ОписаниеУсловия.ОтносительныйПуть Тогда
					ЛевоеЗначение = "Т." + ОписаниеУсловия.ЛевоеЗначение;
				Иначе
					ЛевоеЗначение = ОписаниеУсловия.ЛевоеЗначение;
				КонецЕсли;
				
				ТекстыУсловий.Добавить("(" + ЛевоеЗначение + " " + ОписаниеУсловия.ВидСравнения + "(" + ПравоеЗначение + ")" + ")");
				
			КонецЦикла;
			
			УсловиеПоиска = СтрСоединить(ТекстыУсловий, Символы.ПС + Символы.Таб + "И ");
			
		Иначе
			УсловиеПоиска = "";
		КонецЕсли;
		
		Если ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег("Справочник.Сотрудники") Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Т.Ссылка КАК Сотрудник,
				|	Т.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТСотрудникиПоУсловиямПоиска
				|ИЗ
				|	Справочник.Сотрудники КАК Т
				|ГДЕ
				|	&УсловиеПоиска";
			
		ИначеЕсли ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег("Справочник.ФизическиеЛица") Тогда
			
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	Т.Ссылка КАК ФизическоеЛицо
				|ПОМЕСТИТЬ ВТСотрудникиПоУсловиямПоиска
				|ИЗ
				|	Справочник.ФизическиеЛица КАК Т
				|ГДЕ
				|	&УсловиеПоиска";
			
			Если СтрНайти(ВРег(ПолноеИмяОбъектаМетаданных), ВРег("Справочник.ФизическиеЛица.КонтактнаяИнформация")) = 1 Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ФизическиеЛица", "Справочник.ФизическиеЛица.КонтактнаяИнформация");
			КонецЕсли;
			
		Иначе
			
			Если ПолноеИмяОбъектаМетаданныхВерхнемРегистре = ВРег("РегистрСведений.КадроваяИсторияСотрудников") Тогда
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	Т.Сотрудник КАК Сотрудник,
					|	Т.ФизическоеЛицо КАК ФизическоеЛицо
					|ПОМЕСТИТЬ ВТСотрудникиПоУсловиямПоиска
					|ИЗ
					|	&ТаблицаССотрудником КАК Т
					|ГДЕ
					|	&УсловиеПоиска";
				
			Иначе
				
				Запрос.Текст =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	Т.Сотрудник КАК Сотрудник
					|ПОМЕСТИТЬ ВТСотрудникиПоУсловиямПоиска
					|ИЗ
					|	&ТаблицаССотрудником КАК Т
					|ГДЕ
					|	&УсловиеПоиска";
				
			КонецЕсли;
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
			
			ОбъектаМетаданныхСправочник = СтрНайти(ПолноеИмяОбъектаМетаданныхВерхнемРегистре, ВРег("Справочник.")) = 1;
			
			Если КритерийПоискаФизическогоЛица(ПолноеИмяОбъектаМетаданныхВерхнемРегистре) Тогда
				
				Если ОбъектаМетаданныхСправочник Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Сотрудник КАК Сотрудник", "Т.Владелец КАК ФизическоеЛицо");
				Иначе
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Сотрудник КАК Сотрудник", "Т.ФизическоеЛицо КАК ФизическоеЛицо");
				КонецЕсли;
				
			ИначеЕсли ОбъектаМетаданныхСправочник Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т.Сотрудник КАК Сотрудник", "Т.Владелец КАК Сотрудник");
			КонецЕсли;
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаССотрудником", ПолноеИмяОбъектаМетаданных);
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоиска", ?(ПустаяСтрока(УсловиеПоиска), "(ИСТИНА)" , УсловиеПоиска));
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСотрудникиПоУсловиямПоиска", ИмяВТСотрудникиПоУсловиямПоиска);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, ИмяВТСотрудникиОтборы);
	
	Возврат Запрос;
	
КонецФункции

Процедура ДобавитьВКоллекциюИмяКадровыхДанных(ИсточникиДанных, ИмяКоллекции, ИмяКадровыхДанных = "") Экспорт
	
	ИменаКадровыхДанных = ИсточникиДанных.Получить(ИмяКоллекции);
	Если Не ПустаяСтрока(ИмяКадровыхДанных) Тогда
		
		Если ТипЗнч(ИменаКадровыхДанных) <> Тип("Массив") Тогда
			ИменаКадровыхДанных = Новый Массив;
		КонецЕсли; 
		
		Если ИменаКадровыхДанных.Найти(ИмяКадровыхДанных) = Неопределено Тогда
			ИменаКадровыхДанных.Добавить(ИмяКадровыхДанных);
		КонецЕсли;
		
	КонецЕсли; 
	
	ИсточникиДанных.Вставить(ИмяКоллекции, ?(Не ЗначениеЗаполнено(ИменаКадровыхДанных), Истина, ИменаКадровыхДанных));
			
КонецПроцедуры

Функция ТаблицаНачисленийСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод = "Период", ИмяПоляСотрудник = "Сотрудник", ИмяПоляДатаОкончания = "", ИспользоватьКраткиеПредставления = Истина, ВыводитьДенежныеПоказателиСВалютой = Ложь, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	НачисленияСотрудников = Новый ТаблицаЗначений;
	НачисленияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	НачисленияСотрудников.Колонки.Добавить("ТарифнаяСтавка", Новый ОписаниеТипов("Число"));
	НачисленияСотрудников.Колонки.Добавить("ОписаниеОклада", Новый ОписаниеТипов("Строка"));
	НачисленияСотрудников.Колонки.Добавить("Надбавка", Новый ОписаниеТипов("Строка"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		ИЛИ ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек") Тогда
		
		ОписанияНачислений = ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания, ИспользоватьКраткиеПредставления, ВыводитьДенежныеПоказателиСВалютой, ФормироватьСПериодичностьДень);
		
		Для каждого ОписаниеСотрудника Из ОписанияНачислений Цикл
			
			Для каждого ОписаниеПериода Из ОписаниеСотрудника.Значение Цикл
				
				НоваяСтрока = НачисленияСотрудников.Добавить();
				
				НоваяСтрока.Сотрудник = ОписаниеСотрудника.Ключ;
				НоваяСтрока.Период = ОписаниеПериода.Ключ;
				НоваяСтрока.ТарифнаяСтавка = ОписаниеПериода.Значение.ОкладТариф;
				НоваяСтрока.ОписаниеОклада = ОписаниеПериода.Значение.ОписаниеОклада;
				НоваяСтрока.Надбавка = ОписаниеПериода.Значение.ОписаниеНадбавок;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НачисленияСотрудников;
	
КонецФункции

Процедура ОбновитьТекущиеКадровыеДанныеСпискаСотрудников(Сотрудники, СотрудникиСОтмененнымСобытиемПрием) Экспорт
	
	Если Сотрудники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСотрудниковДляОбновления", Сотрудники);
	Запрос.УстановитьПараметр("МассивСотрудниковСОтмененнымСобытиемПрием", СотрудникиСОтмененнымСобытиемПрием);
	
	// Подготовим таблицу ИзмеренияДаты для получения среза последних.
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Сотрудник Из Сотрудники Цикл
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		СтрокаИзмеренияДаты.Сотрудник = Сотрудник;
	КонецЦикла;
	
	// Сформируем отбор по события прием и увольнение.
	СобытияПриемУвольнение = Новый Массив;
	СобытияПриемУвольнение.Добавить(Перечисления.ВидыКадровыхСобытий.Прием);
	СобытияПриемУвольнение.Добавить(Перечисления.ВидыКадровыхСобытий.НачальныеДанные);
	СобытияПриемУвольнение.Добавить(Перечисления.ВидыКадровыхСобытий.Увольнение);
	
	// Получим таблицу событий прием и увольнения.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ВидСобытия","В", СобытияПриемУвольнение);
	
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Истина,
		ОписаниеФильтра,
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.ВидСобытия, ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|			ТОГДА КадроваяИсторияСотрудниковПрием.Период
		|		КОГДА Сотрудники.Ссылка В (&МассивСотрудниковСОтмененнымСобытиемПрием)
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|	КОНЕЦ КАК ДатаПриема,
		|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковУвольнение.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.ВидСобытия, ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.ВидСобытия, ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОформленПоТрудовомуДоговору,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ГоловнаяОрганизацияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольненияПредыдущая,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору, ЛОЖЬ) КАК ОформленПоТрудовомуДоговоруПредыдущие
		|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И Сотрудники.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПрием
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковПрием.Сотрудник
		|			И (КадроваяИсторияСотрудниковПрием.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковУвольнение
		|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковУвольнение.Сотрудник
		|			И (КадроваяИсторияСотрудниковУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеКадровыеДанные.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НовыеКадровыеДанные.Сотрудник КАК Сотрудник,
		|	НовыеКадровыеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НовыеКадровыеДанные.ДатаПриема КАК ДатаПриема,
		|	НовыеКадровыеДанные.ДатаУвольнения КАК ДатаУвольнения,
		|	НовыеКадровыеДанные.ОформленПоТрудовомуДоговору КАК ОформленПоТрудовомуДоговору
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|ГДЕ
		|	(НовыеКадровыеДанные.ГоловнаяОрганизация <> НовыеКадровыеДанные.ГоловнаяОрганизацияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ДатаПриема <> НовыеКадровыеДанные.ДатаПриемаПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ДатаУвольнения <> НовыеКадровыеДанные.ДатаУвольненияПредыдущая
		|			ИЛИ НовыеКадровыеДанные.ОформленПоТрудовомуДоговору <> НовыеКадровыеДанные.ОформленПоТрудовомуДоговоруПредыдущие)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина);
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьПовторениеЗаписейТекущихДанныхСотрудников(ИмяРегистраТекущихСведений, ОтключитьБизнесЛогику = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РегистрСведений.Сотрудник КАК Сотрудник,
		|	КОЛИЧЕСТВО(РегистрСведений.ТекущаяОрганизация) КАК КоличествоЗаписей
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РегистрСведений
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрСведений.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиСПовторением
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.КоличествоЗаписей > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	СотрудникиСПовторением.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиСПовторением КАК СотрудникиСПовторением";
		
	Если ВРег(ИмяРегистраТекущихСведений) <> ВРег("ТекущиеКадровыеДанныеСотрудников") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекущиеКадровыеДанныеСотрудников", ИмяРегистраТекущихСведений);
	КонецЕсли; 
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ОписаниеРегистра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеРегистра(ИмяРегистраТекущихСведений);
		
		ВыборкаПолей = "МАКСИМУМ(РегистрСведений.ТекущаяОрганизация) КАК ТекущаяОрганизация";
			
		Для каждого ИмяПоля Из ОписаниеРегистра.Ресурсы Цикл
			
			ВыборкаПолей = ВыборкаПолей + ",
				|	МАКСИМУМ(РегистрСведений." + ИмяПоля + ") КАК " + ИмяПоля;
			
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	РегистрСведений.Сотрудник,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	МАКСИМУМ(РегистрСведений.ТекущаяОрганизация) КАК ТекущаяОрганизация
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РегистрСведений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиСПовторением КАК СотрудникиСПовторением
			|		ПО РегистрСведений.Сотрудник = СотрудникиСПовторением.Сотрудник
			|
			|СГРУППИРОВАТЬ ПО
			|	РегистрСведений.Сотрудник,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо,
			|	ВЫРАЗИТЬ(РегистрСведений.Сотрудник КАК Справочник.Сотрудники).ГоловнаяОрганизация";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МАКСИМУМ(РегистрСведений.ТекущаяОрганизация) КАК ТекущаяОрганизация", ВыборкаПолей);
		
		Если ВРег(ИмяРегистраТекущихСведений) <> ВРег("ТекущиеКадровыеДанныеСотрудников") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТекущиеКадровыеДанныеСотрудников", ИмяРегистраТекущихСведений);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений[ИмяРегистраТекущихСведений].СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Если ОтключитьБизнесЛогику Тогда
				
				Набор.ОбменДанными.Загрузка = Истина;
				Если Не ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет")
					И ВРег(ИмяРегистраТекущихСведений) = ВРег("ТекущиеКадровыеДанныеСотрудников") Тогда
					
					РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.УстановитьОсновноеРабочееМестоВОрганизации(Набор);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсключитьЗадвоениеОсновныхРабочихМестТекущихДанныхСотрудников() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	КОЛИЧЕСТВО(ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК Сотрудник
		|ПОМЕСТИТЬ ВТЗадвоенныеСотрудники
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадвоенныеСотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТЗадвоенныеСотрудники КАК ЗадвоенныеСотрудники
		|ГДЕ
		|	ЗадвоенныеСотрудники.Сотрудник > 1";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
			
			Набор.Прочитать();
			Набор.ДополнительныеСвойства.Вставить("УстановитьОсновноеРабочееМесто", Истина);
			Набор.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПараметрыОтбораПоОрганизациям(ПараметрыПостроения) Экспорт
	
	Возврат ПараметрыОтбораОрганизаций(ПараметрыПостроения.Организация);
	
КонецФункции

Функция ПараметрыОтбораОрганизаций(Организации)
	
	ПараметрыОтбора = Новый Структура("ГоловныеОрганизации,Организации");
	
	Если ЗначениеЗаполнено(Организации) Тогда
		
		Если ТипЗнч(Организации) = Тип("СправочникСсылка.Организации") Тогда
			ПараметрыОтбора.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организации);
		Иначе
			ПараметрыОтбора.Организации = Организации;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыОтбора.Организации) = Тип("Массив")
			Или ТипЗнч(ПараметрыОтбора.Организации) = Тип("ФиксированныйМассив") Тогда
			
			Для каждого Организация Из ПараметрыОтбора.Организации Цикл
				
				ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
				Если ПараметрыОтбора.ГоловныеОрганизации = Неопределено Тогда
					ПараметрыОтбора.ГоловныеОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГоловнаяОрганизация);
				Иначе
					ПараметрыОтбора.ГоловныеОрганизации.Добавить(ГоловнаяОрганизация);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОтбора;
	
КонецФункции

// Формирует движения по прекращению вычетов личных и вычетов на детей
//
// Параметры:
//		Движения			- КоллекцияДвижений
//		ФизическиеЛица		- СправочникСсылка.ФизическиеЛица
//							- Массив (СправочникСсылка.ФизическиеЛица)
//		Организация			- СправочникСсылка.Организации
//		МесяцРегистрации	- Дата
//		Отказ				- Булево
//
Процедура СформироватьПрекращениеВычетовСтандартныхИНаДетей(Движения, ФизическиеЛица, Организация, МесяцРегистрации, Отказ, ИсключаемыеРегистраторы) Экспорт
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(Организация);
	
	ТаблицаВычетыНаДетей = Новый ТаблицаЗначений;
	ТаблицаВычетыНаДетей.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаВычетыНаДетей.Колонки.Добавить("МесяцРегистрации");
	ТаблицаВычетыНаДетей.Колонки.Добавить("КодВычета");
	ТаблицаВычетыНаДетей.Колонки.Добавить("ДатаДействия");
	ТаблицаВычетыНаДетей.Колонки.Добавить("КоличествоДетей");
	ТаблицаВычетыНаДетей.Колонки.Добавить("ДействуетДо");
	ТаблицаВычетыНаДетей.Колонки.Добавить("КоличествоДетейПоОкончании");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Месяц",					МесяцРегистрации);
	Запрос.УстановитьПараметр("ФизическиеЛица",			СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ИсключаемыеРегистраторы", ИсключаемыеРегистраторы);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&Месяц КАК Период,
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛицаПериоды
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
	Если ЗначениеЗаполнено(ИсключаемыеРегистраторы) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы, "Регистратор", "НЕ В", ИсключаемыеРегистраторы);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтандартныеВычетыФизическихЛицНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФизическиеЛицаПериоды", "ФизическоеЛицо"),
		ПараметрыПостроения);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ПрименениеСтандартныхВычетовПоНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТФизическиеЛицаПериоды", "ФизическоеЛицо"),
		ПараметрыПостроения);
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТСтандартныеВычетыФизическихЛицНДФЛСрезПоследних КАК СтандартныеВычетыФизическихЛицНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрименениеСтандартныхВычетовПоНДФЛСрезПоследних КАК ПрименениеСтандартныхВычетовПоНДФЛ
		|		ПО СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = ПрименениеСтандартныхВычетовПоНДФЛ.ФизическоеЛицо
		|ГДЕ
		|	СтандартныеВычетыФизическихЛицНДФЛ.Период < &Месяц
		|	И СтандартныеВычетыФизическихЛицНДФЛ.КодВычетаЛичный <> ЗНАЧЕНИЕ(Справочник.ВидыВычетовНДФЛ.ПустаяСсылка)
		|	И ПрименениеСтандартныхВычетовПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация";
	
	ВычетыЛичныеВыборка = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
		|ПОМЕСТИТЬ ВТПоследниеМесяцыРегистрации
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
		|ГДЕ
		|	СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации <= &Месяц
		|	И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо В(&ФизическиеЛица)
		|	И НЕ СтандартныеВычетыНаДетейНДФЛ.Регистратор В (&ИсключаемыеРегистраторы)
		|
		|СГРУППИРОВАТЬ ПО
		|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтандартныеВычетыНаДетейНДФЛ.КодВычета КАК КодВычета,
		|	СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрименениеСтандартныхВычетовПоНДФЛСрезПоследних КАК ПрименениеСтандартныхВычетовПоНДФЛ
		|		ПО СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = ПрименениеСтандартныхВычетовПоНДФЛ.ФизическоеЛицо
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПоследниеМесяцыРегистрации КАК ПоследниеМесяцыРегистрации
		|		ПО СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ПоследниеМесяцыРегистрации.МесяцРегистрации
		|			И СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = ПоследниеМесяцыРегистрации.ФизическоеЛицо
		|ГДЕ
		|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей > 0
		|	И СтандартныеВычетыНаДетейНДФЛ.ДействуетДо >= &Месяц
		|	И ПрименениеСтандартныхВычетовПоНДФЛ.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И НЕ СтандартныеВычетыНаДетейНДФЛ.Регистратор В (&ИсключаемыеРегистраторы)";
	
	ВычетыНаДетейВыборка = Запрос.Выполнить().Выбрать();
	
	Для каждого ФизическоеЛицо Из СписокФизическихЛиц Цикл
		
		ДанныеОВычетах = Новый Структура(
			"МесяцРегистрации,ФизическоеЛицо,ГоловнаяОрганизация,
			|ИзменитьВычетыНаДетей,ВычетыНаДетей,
			|ИзменитьЛичныйВычет,КодВычетаЛичный");
		
		// Общие сведения для прекращения вычетов
		ДанныеОВычетах.МесяцРегистрации = МесяцРегистрации;
		ДанныеОВычетах.ФизическоеЛицо = ФизическоеЛицо;
		ДанныеОВычетах.ГоловнаяОрганизация = ГоловнаяОрганизация;
		
		СтруктураПоиска = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
		
		// Личные вычеты
		ВычетыЛичныеВыборка.Сбросить();
		Если ВычетыЛичныеВыборка.НайтиСледующий(СтруктураПоиска) Тогда
			ДанныеОВычетах.ИзменитьЛичныйВычет = Истина;
		Иначе
			ДанныеОВычетах.ИзменитьЛичныйВычет = Ложь;
		КонецЕсли;
		
		// Вычеты на детей
		ТаблицаВычетыНаДетей.Очистить();
		
		ВычетыНаДетейВыборка.Сбросить();
		Пока ВычетыНаДетейВыборка.НайтиСледующий(СтруктураПоиска) Цикл
			ЗаписьОВычетеНаДетей					= ТаблицаВычетыНаДетей.Добавить();
			ЗаписьОВычетеНаДетей.ФизическоеЛицо		= ДанныеОВычетах.ФизическоеЛицо;
			ЗаписьОВычетеНаДетей.МесяцРегистрации	= ДанныеОВычетах.МесяцРегистрации;
			ЗаписьОВычетеНаДетей.КодВычета			= ВычетыНаДетейВыборка.КодВычета;
			ЗаписьОВычетеНаДетей.ДатаДействия		= ДанныеОВычетах.МесяцРегистрации;
		КонецЦикла;
		
		ДанныеОВычетах.Вставить("ВычетыНаДетей", ТаблицаВычетыНаДетей);
		ДанныеОВычетах.ИзменитьВычетыНаДетей = ДанныеОВычетах.ВычетыНаДетей.Количество() > 0;
		
		// Формирование движений
		Если ДанныеОВычетах.ИзменитьЛичныйВычет
			Или ДанныеОВычетах.ИзменитьВычетыНаДетей Тогда
			
			УчетНДФЛ.СформироватьПрименениеСтандартныхВычетов(Движения, Отказ, ДанныеОВычетах, , Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыПостоянныеКадровыеДанныеФизическихЛиц(ИмяПоля)
	
КонецФункции

Функция ЭтоОбязательноеПолеКадровыхДанныхФизическогоЛица(Знач ИмяПоля) Экспорт
	
	ПропуститьОбработку = Ложь;
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ПустаяСтрока(ИмяПоля) 
		ИЛИ ИмяПоля = ВРег("Период")
		ИЛИ ИмяПоля = ВРег("ФизическоеЛицо") Тогда
		
		ПропуститьОбработку = Истина;
		
	КонецЕсли;
	
	Возврат ПропуститьОбработку;
	
КонецФункции

Процедура ДобавитьВТекстЗапросаОписаниеПолей(ТекстЗапроса, ТекстыОписанияПолей, СтрокаПоместить) Экспорт
	
	Если ТекстыОписанияПолей.Количество() > 0 Тогда
		
		ПозицияДляВстраиванияПолей = СтрНайти(ТекстЗапроса, СтрокаПоместить);
		
		ЧастиТекстаЗапроса = Новый Массив;
		ЧастиТекстаЗапроса.Добавить(СокрЛП(Лев(ТекстЗапроса, ПозицияДляВстраиванияПолей - 1)));
		
		ЧастиТекстаЗапроса.Добавить("," + Символы.ПС + Символы.Таб);
		
		ЧастиТекстаЗапроса.Добавить(ТекстОписанияПолейКадровыхДанных(ТекстыОписанияПолей));
		ЧастиТекстаЗапроса.Добавить(Сред(ТекстЗапроса, ПозицияДляВстраиванияПолей));
		
		ТекстЗапроса = СтрСоединить(ЧастиТекстаЗапроса, Символы.ПС);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыЗначенияРеквизитовСправочникаФизическиеЛица(ИмяПоля);
	
КонецФункции

#КонецОбласти


#Область КадровыеДанныеСотрудников

Функция ЭтоОбязательноеПолеКадровыхДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	ПропуститьОбработку = Ложь;
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ПустаяСтрока(ИмяПоля) 
		Или ИмяПоля = ВРег("Период")
		Или ИмяПоля = ВРег("Сотрудник")
		Или ИмяПоля = ВРег("ФизическоеЛицо") Тогда
		
		ПропуститьОбработку = Истина;
		
	КонецЕсли;
	
	Возврат ПропуститьОбработку;
	
КонецФункции

Функция ЭтоОбработанноеПолеКадровыхДанных(Знач ИмяПоля, ИсточникиДанных, Знач ИмяКоллекцииОбработанныеПоля) Экспорт
	
	ОбработанныеПоля = ИсточникиДанных.Получить(ИмяКоллекцииОбработанныеПоля);
	Если ОбработанныеПоля = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат ОбработанныеПоля.Получить(ВРег(ИмяПоля)) <> Неопределено;
	
КонецФункции

Процедура ДобавитьВКоллекциюИмяОбработанныхКадровыхДанных(Знач ИмяПоля, ИсточникиДанных, Знач ИмяКоллекцииОбработанныеПоля) Экспорт
	
	ОбработанныеПоля = ИсточникиДанных.Получить(ИмяКоллекцииОбработанныеПоля);
	Если ОбработанныеПоля = Неопределено Тогда
		ОбработанныеПоля = Новый Соответствие;
	КонецЕсли; 
	
	ОбработанныеПоля.Вставить(ВРег(ИмяПоля), Истина);
	
	ИсточникиДанных.Вставить(ИмяКоллекцииОбработанныеПоля, ОбработанныеПоля);
	
КонецПроцедуры

Функция НеобходимыПостоянныеКадровыеДанныеСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыПостоянныеКадровыеДанныеСотрудников(ИмяПоля)
	
КонецФункции

Функция ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийЗависящихОтФункциональныхОпцийОрганизаций(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияЗависящиеОтФункциональныхОпцийОрганизации(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЯвляетсяЧленомЛетногоЭкипажа")
		Или ИмяПоля = ВРег("ЯвляетсяШахтером")
		Или ИмяПоля = ВРег("ЯвляетсяФармацевтом")
		Или ИмяПоля = ВРег("ЯвляетсяПрокурором")
		Или ИмяПоля = ВРег("ЯвляетсяСудьей")
		Или ИмяПоля = ВРег("ЯвляетсяВоеннослужащим")
		Или ИмяПоля = ВРег("ЯвляетсяВоеннослужащимПоПризыву")
		Или ИмяПоля = ВРег("ЯвляетсяПедагогом")
		Или ИмяПоля = ВРег("РаботаетВСтуденческомОтряде")
		Или ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией")
		Или ИмяПоля = ВРег("ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ")
		Или ИмяПоля = ВРег("ПрименяемыйЛьготныйТерриториальныйТариф");
	
КонецФункции

Функция ИмяФункциональнойОпцииПоИмениДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ИмяФункциональнойОпцииПоИмениДанныхСотрудника(ИмяПоля);
	
КонецФункции

Функция ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(Знач ИмяПоля, ИсточникиДанных) Экспорт
	
	Возврат КадровыйУчетВнутренний.ИмяФункциональнойОпцииОрганизацииПоИмениДанныхСотрудника(ИмяПоля, ИсточникиДанных);
	
КонецФункции

Процедура ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьТекстыЗапросовВТСведенийЗависящихОтФункциональныхОпцийОрганизаций(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ИсточникиДанных);
	
КонецПроцедуры

Функция ИсточникИнформацииОКлассахУсловийТруда() Экспорт
	
	Возврат КадровыйУчетВнутренний.ИсточникИнформацииОКлассахУсловийТруда();
	
КонецФункции

// Текущие кадровые данные

Функция НеобходимыСведенияТекущихДанныхСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияТекущихДанныхСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийТекущихКадровыхДанныхСотрудников(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияТекущихТарифныхСтавкахСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийТекущихТарифныхСтавокСотрудников(ИмяПоля);
	
КонецФункции

// Сведения о приказах на прием и увольнение.

Функция ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме = "ВТСведенийПриказовОПриеме") Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТСведенийПриказовОПриеме(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОПриеме);
	
КонецФункции

Функция ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении = "ВТСведенийПриказовОбУвольнении") Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТСведенийПриказовОбУвольнении(ИмяВТКадроваяИсторияСотрудников, ТолькоРазрешенные, ИмяВТСведенийПриказовОбУвольнении);
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийПриказаОПриемеОбУвольнении(ИмяПоля);
	
КонецФункции

// Сведения кадровой истории сотрудников.

Функция НеобходимыСведенияКадровойИсторииСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияКадровойИсторииСотрудников(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияЗависящиеОтКадровойИсторииСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияЗависящиеОтКадровойИсторииСотрудников(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийКадровойИсторииСотрудников(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийКадровойИсторииСотрудников(ИмяПоля);
	
КонецФункции

Процедура ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьТекстЗапросаВТСведенияКадроваяИсторияСотрудников(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень, ИсточникиДанных);
	
КонецПроцедуры

// Сведения об оплате труда

Функция НеобходимыСведенияОбОплатеТруда(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияОбОплатеТруда(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымСведенийОбОплатеТруда(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийОбОплатеТруда(ИмяПоля);
	
КонецФункции

// Сведения о доле неполного рабочего времени

Функция ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымСведенийОДолеНеполногоРабочегоВремени(ИмяПоля);
	
КонецФункции

#КонецОбласти


#Область ПроцедурыИФункцииФормированияОтчетов

Функция ПараметрыКадровогоПриказа() Экспорт
	
	СтруктураПараметровКадровогоПриказа = Новый Структура;
	
	СтруктураПараметровКадровогоПриказа.Вставить("Ссылка");
	СтруктураПараметровКадровогоПриказа.Вставить("НазваниеОрганизации", "");
	СтруктураПараметровКадровогоПриказа.Вставить("КодПоОКПО", "");
	СтруктураПараметровКадровогоПриказа.Вставить("НомерДок", "");
	СтруктураПараметровКадровогоПриказа.Вставить("ДатаДок", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("Работник", "");
	СтруктураПараметровКадровогоПриказа.Вставить("Пол");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорЧисло", "    ");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорМесяцГод", "______________ 20__");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорДата", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорНомер", "____");
	СтруктураПараметровКадровогоПриказа.Вставить("ТабельныйНомер", "");
	СтруктураПараметровКадровогоПриказа.Вставить("Подразделение");
	СтруктураПараметровКадровогоПриказа.Вставить("Должность");
	СтруктураПараметровКадровогоПриказа.Вставить("РазрядКатегория");
	СтруктураПараметровКадровогоПриказа.Вставить("ДолжностьРуководителя", "");
	СтруктураПараметровКадровогоПриказа.Вставить("РуководительРасшифровкаПодписи", "");
	
	Возврат СтруктураПараметровКадровогоПриказа;
		
КонецФункции

Процедура ЗаполнитьПараметрыКадровогоПриказа(Параметры, КадровыеДанные, УчитыватьНастройкиФормированияПечатныхФорм = Истина) Экспорт
	
	ЗаполнитьЗначенияСвойств(Параметры, КадровыеДанные);
	
	НастройкиПечатныхФорм = ЗарплатаКадры.НастройкиПечатныхФорм();
	
	Если НЕ УчитыватьНастройкиФормированияПечатныхФорм
		ИЛИ НастройкиПечатныхФорм.УдалятьПрефиксыОрганизацииИИБИзНомеровКадровыхПриказов Тогда
		
		Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Параметры.НомерДок, Истина, Истина);
		
	КонецЕсли;
	
	Если УчитыватьНастройкиФормированияПечатныхФорм
		И НастройкиПечатныхФорм.ВыводитьПолнуюИерархиюПодразделений
		И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		
		Параметры.Подразделение = Параметры.Подразделение.ПолноеНаименование();
		
	КонецЕсли; 
	
	Параметры.ДатаДок = ?(ЗначениеЗаполнено(Параметры.ДатаДок), Параметры.ДатаДок, ТекущаяДатаСеанса());
	Параметры.ТабельныйНомер = ЗарплатаКадрыОтчеты.ТабельныйНомерНаПечать(Параметры.ТабельныйНомер);
	
	Если ЗначениеЗаполнено(Параметры.ТрудовойДоговорДата) Тогда
		
		ПредставлениеДатыТрудовогоДоговора  = Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=DD");
		
		Параметры.ТрудовойДоговорЧисло = СокрЛП(Лев(ПредставлениеДатыТрудовогоДоговора,2));
		Параметры.ТрудовойДоговорМесяцГод = СокрЛП(Прав(ПредставлениеДатыТрудовогоДоговора, СтрДлина(ПредставлениеДатыТрудовогоДоговора)-2));
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Параметры.РазрядКатегория) Тогда
		Параметры.РазрядКатегория = ", " + Параметры.РазрядКатегория;
	КонецЕсли; 
	
КонецПроцедуры	

#Область УнифицированнаяФормаТ2

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета, КлючВарианта) Экспорт
	
	Возврат КадровыйУчетВнутренний.ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета, КлючВарианта)
	
КонецФункции

Процедура НастроитьВариантыОтчетаУнифицированнойФормыТ2(Настройки, НастройкиОтчета) Экспорт

	КадровыйУчетВнутренний.НастроитьВариантыОтчетаУнифицированнойФормыТ2(Настройки, НастройкиОтчета);
	
КонецПроцедуры

#КонецОбласти

Процедура НастроитьВариантыОтчетаПоСотрудникам(Настройки, НастройкиОтчета) Экспорт

	КадровыйУчетВнутренний.НастроитьВариантыОтчетаПоСотрудникам(Настройки, НастройкиОтчета);
	
КонецПроцедуры

Функция ПредставлениеСтатьиУвольненияДляТ8(СтатьяУвольнения) Экспорт
	
	СвойстваОснованияУвольнения = ЭлектронныеТрудовыеКнижкиПовтИсп.СвойстваОснованияУвольнения(СтатьяУвольнения);
	СвойстваОснованияУвольнения.Вставить("ОснованиеУвольнения", СтатьяУвольнения);
	
	Если Не ЗначениеЗаполнено(СвойстваОснованияУвольнения.ОснованиеУвольненияНаименованиеОснования) Тогда
		Возврат ЭлектронныеТрудовыеКнижки.ПредставлениеПричиныУвольнения(СвойстваОснованияУвольнения, Истина);
	КонецЕсли;
	
	ПредставлениеПричины = СокрЛП(СвойстваОснованияУвольнения.ОснованиеУвольненияТекстОснования)
		+ ", " + СокрЛП(СвойстваОснованияУвольнения.ОснованиеУвольненияНаименованиеОснования);
	
	НормативныйДокумент = НормативныйДокументОснованияУвольненияВРодительномПадеже(СвойстваОснованияУвольнения.ОснованиеУвольнения);
	Если Не ПустаяСтрока(НормативныйДокумент) Тогда
		ПредставлениеПричины = ПредставлениеПричины + " " + НормативныйДокумент;
	КонецЕсли;
	
	Возврат ПредставлениеПричины;
	
КонецФункции

Функция НормативныйДокументОснованияУвольненияВРодительномПадеже(ОснованиеУвольнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ОснованиеУвольнения) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеУвольнения) = Тип("СправочникСсылка.ОснованияУвольненияПользовательские") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеУвольнения, "НаименованиеДокументаОснованияВРодительномПадеже");
	КонецЕсли;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеУвольнения, "ДокументОснование");
	Возврат Перечисления.НормативныеДокументыОснованийКадровыхПриказов.НормативныйДокументВРодительномПадеже(ДокументОснование);
	
КонецФункции

Функция НормативныйДокументОснованияУвольнения(ОснованиеУвольнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ОснованиеУвольнения) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеУвольнения) = Тип("СправочникСсылка.ОснованияУвольненияПользовательские") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеУвольнения, "НаименованиеДокументаОснования");
	КонецЕсли;
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеУвольнения, "ДокументОснование");
	Возврат Перечисления.НормативныеДокументыОснованийКадровыхПриказов.НормативныйДокумент(ДокументОснование);
	
КонецФункции

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецПроцедуры

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод = "Период", ИмяПоляСотрудник = "Сотрудник", ИмяПоляДатаОкончания = "", ИспользоватьКраткиеПредставления = Истина, ВыводитьДенежныеПоказателиСВалютой = Ложь, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Возврат КадровыйУчетВнутренний.ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник, ИмяПоляДатаОкончания, ИспользоватьКраткиеПредставления, ВыводитьДенежныеПоказателиСВалютой, ФормироватьСПериодичностьДень);
	
КонецФункции

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
КонецФункции

Функция ЗапросВТПлановыеНачисленияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеНачисленияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, Знач ПоляОтбораСотрудников = "Сотрудник,Период", ПоляОтбораПериодическихДанных = Неопределено, ФормироватьСПериодичностьДень = Истина) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТПлановыеНачисленияСотрудников(ТолькоРазрешенные, ИмяВТПлановыеНачисленияСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных, ФормироватьСПериодичностьДень);
	
КонецФункции

Функция НеобходимыКадровыеДанныеФизическогоЛица(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля);
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	ПараметрыПолученияСотрудников = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыКорпоративнаяПодсистемы.УправленческаяЗарплата") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправленческаяЗарплата");
		Модуль.УточнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	КонецЕсли;
	
	ИмяВТСотрудникиПериоды = "ВТСотрудникиПериодыДляПолученияСотрудниковОрганизации";
	Запрос = ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, ПараметрыПолученияСотрудников, ИмяВТСотрудникиПериоды);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст = "";
		
	КонецЕсли;
	
	ЗапросПоРабочимМестам = ЗапросВТСотрудникиОрганизацииПоРабочимМестам(
		ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, ПараметрыПолученияСотрудников, МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросПоРабочимМестам);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВЗапросСозданияВременнойТаблицыТекстУничтоженияВспомогательной(
		Запрос.Текст, ИмяВТСотрудникиПериоды);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	Перем ИмяВТФизическиеЛица;
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	
	РаботникиПоТрудовымДоговорам = Параметры.РаботникиПоТрудовымДоговорам;
	ПодработкиРаботниковПоТрудовымДоговорам = Параметры.ПодработкиРаботниковПоТрудовымДоговорам;
	РаботникиПоДоговорамГПХ = Параметры.РаботникиПоДоговорамГПХ;
	
	// При отключенных функциональных опциях запрос формируется со значениями "по умолчанию".
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		РаботникиПоДоговорамГПХ = Неопределено;
	КонецЕсли;
	
	ИспользоватьПодработки = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		ИмяФункциональнойОпции = "ИспользоватьПодработки";
		ИспользоватьПодработки = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	КонецЕсли;
	
	Если Не ИспользоватьПодработки Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	// Запрос подработок формируется если формируется запрос по работником на трудовых договорах.
	Если РаботникиПоТрудовымДоговорам = Ложь Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбрасыватьИсключениеДоступа")
		И Параметры.ВыбрасыватьИсключениеДоступа = Ложь Тогда
		
		Если РаботникиПоТрудовымДоговорам = Истина Тогда
			
			Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.КадроваяИсторияСотрудников) Тогда
				РаботникиПоТрудовымДоговорам = Ложь;
				ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РаботникиПоДоговорамГПХ = Истина Тогда
			
			Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера) Тогда
				РаботникиПоДоговорамГПХ = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РаботникиПоТрудовымДоговорам = Ложь
		И РаботникиПоДоговорамГПХ = Ложь Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТСотрудникиОрганизации
			|ГДЕ
			|	ЛОЖЬ";
		
		Если Не ПустаяСтрока(Параметры.КадровыеДанные) Тогда
			
			ПоляКадровыхДанных = "";
			
			МассивИменПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.КадровыеДанные, ",", Истина, Истина);
			Для каждого ИмяПоля Из МассивИменПолей Цикл
				
				ИмяПоляВРег = ВРег(ИмяПоля);
				Если ИмяПоляВРег = ВРег("Период")
					Или ИмяПоляВРег = ВРег("Сотрудник")
					Или ИмяПоляВРег = ВРег("ФизическоеЛицо")Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ИмяПоляВРег = ВРег("Подразделение") Тогда
					ПоляКадровыхДанных = ПоляКадровыхДанных + "," + Символы.ПС + "	ВЫРАЗИТЬ(NULL КАК Справочник.ПодразделенияОрганизаций) КАК " + ИмяПоля;
				ИначеЕсли ИмяПоляВРег = ВРег("Должность") Тогда
					ПоляКадровыхДанных = ПоляКадровыхДанных + "," + Символы.ПС + "	ВЫРАЗИТЬ(NULL КАК Справочник.Должности) КАК " + ИмяПоля;
				Иначе
					ПоляКадровыхДанных = ПоляКадровыхДанных + "," + Символы.ПС + "	NULL КАК " + ИмяПоля;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ПустаяСтрока(ПоляКадровыхДанных) Тогда
				ПоляКадровыхДанных = "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо" + ПоляКадровыхДанных;
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизическоеЛицо", ПоляКадровыхДанных);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТСотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
		
	Иначе
		
		Если РаботникиПоДоговорамГПХ = Неопределено Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
				Запрос = ЗапросВТСотрудникиОрганизацииПоРабочимМестамСКадровымУчетом(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации,
					ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц);
			Иначе
				Запрос = ЗапросВТСотрудникиОрганизацииПоРабочимМестамБезКадровогоУчета(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации,
					ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц);
			КонецЕсли;
			
		Иначе
			
			Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
				ТекстДатаОкончания = Параметры.ОкончаниеПериода;
			ИначеЕсли Параметры.ОкончаниеПериода = Неопределено Тогда
				ТекстДатаОкончания = "ДАТАВРЕМЯ(1, 1, 1)";
			Иначе
				ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
			КонецЕсли;
			
			ИмяВТРабочиеМестаСотрудников = "ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации";
			
			ПараметрыПолученияРабочихМест = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
				ИмяВТСотрудникиПериоды, , "ДатаНачала", "ДатаОкончания");
			
			ЗаполнитьЗначенияСвойств(ПараметрыПолученияРабочихМест, Параметры);
			Если Параметры.Свойство("СписокФизическихЛиц")
				И ЗначениеЗаполнено(Параметры.СписокФизическихЛиц) Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					ПараметрыПолученияРабочихМест.Отборы, "ФизическоеЛицо", "В", Параметры.СписокФизическихЛиц);
				
			ИначеЕсли Параметры.Отборы = Неопределено
				И ИмяВТФизическиеЛица = Неопределено Тогда
				
				ПараметрыПолученияРабочихМест.ИмяПоляСотрудник = "";
				Если МенеджерВременныхТаблиц <> Неопределено Тогда
					
					ВТОтборовСотрудников = МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВТСотрудникиПериоды);
					Если ВТОтборовСотрудников <> Неопределено Тогда
						
						Для Каждого КолонкаВТОтборов Из ВТОтборовСотрудников.Колонки Цикл
							
							Если КолонкаВТОтборов.Имя = "НачалоПериода"
								Или КолонкаВТОтборов.Имя = "ОкончаниеПериода" Тогда
								
								Продолжить;
								
							КонецЕсли;
							
							Если КолонкаВТОтборов.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Сотрудники")) Тогда
								ПараметрыПолученияРабочихМест.ИмяПоляСотрудник = КолонкаВТОтборов.Имя;
								Прервать;
							КонецЕсли;
						
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Параметры.РаботникиПоТрудовымДоговорам = Ложь Тогда
				ПараметрыПолученияРабочихМест.РаботникиПоТрудовымДоговорам = Истина;
			КонецЕсли;
			
			ПараметрыПолученияРабочихМест.РаботникиПоДоговорамГПХ = Истина;
			
			Запрос = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, ПараметрыПолученияРабочихМест, МенеджерВременныхТаблиц);
			
			Если ЗначениеЗаполнено(Параметры.КадровыеДанные) Тогда
				ИмяВТСотрудникиОрганизацииДляКадровойИстории = "ВТСотрудникиОрганизацииБезКадровыхДанных";
			Иначе
				ИмяВТСотрудникиОрганизацииДляКадровойИстории = ИмяВТСотрудникиОрганизации;
			КонецЕсли;
			
			Если РаботникиПоДоговорамГПХ = Истина
				И РаботникиПоТрудовымДоговорам = Истина Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ВЫБОР
					|		КОГДА МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)) = ИСТИНА
					|			ТОГДА МАКСИМУМ(ВЫБОР
					|						КОГДА РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)
					|							ТОГДА РабочиеМестаСотрудников.ПериодЗаписи
					|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|					КОНЕЦ)
					|		ИНАЧЕ МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи)
					|	КОНЕЦ КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо";
				
			ИначеЕсли РаботникиПоДоговорамГПХ = Истина
				И РаботникиПоТрудовымДоговорам = Ложь Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо
					|
					|ИМЕЮЩИЕ
					|	МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник)) = ЛОЖЬ
					|	И МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)) = ИСТИНА";
				
			ИначеЕсли РаботникиПоДоговорамГПХ = Ложь Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо
					|
					|ИМЕЮЩИЕ
					|	МАКСИМУМ(РабочиеМестаСотрудников.РольСотрудника = ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)) = ЛОЖЬ";
				
			ИначеЕсли РаботникиПоДоговорамГПХ = Истина
				И РаботникиПоТрудовымДоговорам = Неопределено Тогда
				
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
					"ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	&ДатаОкончания КАК Период,
					|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных,
					|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
					|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи
					|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
					|ИЗ
					|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
					|
					|СГРУППИРОВАТЬ ПО
					|	РабочиеМестаСотрудников.Сотрудник,
					|	РабочиеМестаСотрудников.ГоловнойСотрудник,
					|	РабочиеМестаСотрудников.ФизическоеЛицо";
				
			КонецЕсли;
			
			ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
				СтрЗаменить(ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "&ДатаОкончания", ТекстДатаОкончания);
			
			ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
				ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "ВТСотрудникиОрганизацииДляКадровойИстории", ИмяВТСотрудникиОрганизацииДляКадровойИстории);
			
			Если СоздаватьПромежуточныеТаблицы 
				И Не ПустаяСтрока(Параметры.КадровыеДанные) Тогда
				
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.Выполнить();
				
				Запрос.Текст = ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории;
				
			Иначе
				ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории);
			КонецЕсли;
			
			Если РаботникиПоТрудовымДоговорам <> Ложь Тогда
				
				Параметры.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра = ИмяВТРабочиеМестаСотрудников;
				Параметры.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ИмяВТСотрудникиОрганизацииДляКадровойИстории;
				
			КонецЕсли;
			
			ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(
				Запрос,
				ТолькоРазрешенные,
				ИмяВТСотрудникиОрганизации,
				ИмяВТСотрудникиОрганизацииДляКадровойИстории,
				Параметры.КадровыеДанные,
				Параметры.ИменаТаблицСКадровойИсториейСотрудников,
				МенеджерВременныхТаблиц);
			
			ЧастиЗапроса = Новый Массив;
			ЧастиЗапроса.Добавить(Запрос.Текст);
			
			Если ЗначениеЗаполнено(Параметры.КадровыеДанные) Тогда
				ЧастиЗапроса.Добавить("УНИЧТОЖИТЬ ВТСотрудникиОрганизацииБезКадровыхДанных");
			КонецЕсли;
			
			ЧастиЗапроса.Добавить("УНИЧТОЖИТЬ ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации");
			
			Запрос.Текст = СтрСоединить(ЧастиЗапроса, ЗарплатаКадрыОбщиеНаборыДанных.РазделительЗапросов());
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Создает временную таблицу содержащую сотрудников физических лиц, окончивших работу
// ранее на начало периода, переданного в параметре ПараметрыПолученияСотрудников.
//
// Параметры:
//		МенеджерВременныхТаблиц			- МенеджерВременныхТаблиц
//		ТолькоРазрешенные				- Булево
//		ФизическиеЛица					- Массив, СправочникСсылка.ФизическоеЛицо
//		ПараметрыПолученияСотрудников	- Структура, см Функцию ПараметрыПолученияВсехСотрудниковОрганизацийПоСпискуФизическихЛиц
//		ИмяВТПоследниеСотрудники		- Строка
//
Процедура СоздатьВТПоследниеРаботавшиеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, ФизическиеЛица, ПараметрыПолученияСотрудников, ИмяВТПоследниеСотрудники = "ВТПоследниеСотрудники") Экспорт
	
	ПараметрыПолучения = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПолученияСотрудников);
	ПараметрыПолучения.ОтбиратьПоГоловнойОрганизации = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ГоловнаяОрганизация = ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыПолучения.Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	Запрос.УстановитьПараметр("ДатаПолучения", ПараметрыПолучения.НачалоПериода);
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ГоловнаяОрганизация", "=", ГоловнаяОрганизация);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ФизическоеЛицо", "В", ФизическиеЛица);
	
	СоздатьВТТекущиеКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц, ТолькоРазрешенные, Отборы, "ТекущаяОрганизация,ДатаУвольнения,ОформленПоТрудовомуДоговору");
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) КАК ДатаУвольнения
		|ПОМЕСТИТЬ ВТФизическиеЛицаСПоследнимиДатамиУвольнения
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения < &ДатаПолучения
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА ФизическиеЛицаСПоследнимиДатамиУвольнения.ДатаУвольнения > ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(ФизическиеЛицаСПоследнимиДатамиУвольнения.ДатаУвольнения, МЕСЯЦ, -1)
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаНачала,
		|	ФизическиеЛицаСПоследнимиДатамиУвольнения.ДатаУвольнения КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиПериодыДляПолученияПоследнихСотрудников
		|ИЗ
		|	ВТФизическиеЛицаСПоследнимиДатамиУвольнения КАК ФизическиеЛицаСПоследнимиДатамиУвольнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ФизическиеЛицаСПоследнимиДатамиУвольнения.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И ФизическиеЛицаСПоследнимиДатамиУвольнения.ДатаУвольнения >= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|			И (ВЫБОР
		|				КОГДА ФизическиеЛицаСПоследнимиДатамиУвольнения.ДатаУвольнения > ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ДОБАВИТЬКДАТЕ(ФизическиеЛицаСПоследнимиДатамиУвольнения.ДатаУвольнения, МЕСЯЦ, -1)
		|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|			КОНЕЦ <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник,
		|	МИНИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала),
		|	МАКСИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания)
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|			И (НЕ ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору)
		|ГДЕ
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания < &ДатаПолучения
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТТекущиеКадровыеДанныеСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТФизическиеЛицаСПоследнимиДатамиУвольнения";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	
	Запрос.Выполнить();
	
	ЗапросСотрудникиБезБазы = ЗапросВТСотрудникиОрганизацииПоРабочимМестам(ТолькоРазрешенные, ИмяВТПоследниеСотрудники,
		"ВТСотрудникиПериодыДляПолученияПоследнихСотрудников", ПараметрыПолучения, МенеджерВременныхТаблиц);
	
	ЗапросСотрудникиБезБазы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросСотрудникиБезБазы.Выполнить();
	
	ЗарплатаКадры.УничтожитьВТ(МенеджерВременныхТаблиц, "ВТСотрудникиПериодыДляПолученияПоследнихСотрудников");
	
КонецПроцедуры

// Кадровые данные

Процедура ЗапомнитьСотрудниковДляОбновленияКадровыхДанных(Источник) Экспорт
	
	СотрудникиДляОбновления = СотрудникиДляОбновления(Источник);
	ЗапомнитьСписокСотрудниковДляОбновленияКадровыхДанных(Источник, СотрудникиДляОбновления);
	
КонецПроцедуры

Процедура ЗапомнитьСписокСотрудниковДляОбновленияКадровыхДанных(Источник, СотрудникиДляОбновления)
	
	Если СотрудникиДляОбновления.Количество() > 0 Тогда
		Источник.ДополнительныеСвойства.Вставить("СотрудникиДляОбновленияКадровыхДанных", СотрудникиДляОбновления);
	КонецЕсли;
	
КонецПроцедуры

// Данные об оплате труда

Процедура ЗапомнитьСотрудниковДляОбновленияДанныхОбОплатеТруда(Источник) Экспорт
	
	СотрудникиДляОбновления = СотрудникиДляОбновления(Источник);
	ЗапомнитьСписокСотрудниковДляОбновленияДанныхОбОплатеТруда(Источник, СотрудникиДляОбновления);
	
КонецПроцедуры

Процедура ЗапомнитьСписокСотрудниковДляОбновленияДанныхОбОплатеТруда(Источник, СотрудникиДляОбновления) Экспорт
	
	Если СотрудникиДляОбновления.Количество() > 0 Тогда
		
		Если Источник.ДополнительныеСвойства.Свойство("СотрудникиДляОбновленияДанныхОбОплатеТруда") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Источник.ДополнительныеСвойства.СотрудникиДляОбновленияДанныхОбОплатеТруда, СотрудникиДляОбновления, Истина);
			
		Иначе
			Источник.ДополнительныеСвойства.Вставить("СотрудникиДляОбновленияДанныхОбОплатеТруда", СотрудникиДляОбновления);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей) Экспорт
	
	КадровыйУчетВнутренний.ОбновитьВторичныеКадровыеДанныеСотрудников(НаборЗаписей);
	
КонецПроцедуры

Функция СотрудникиДляОбновления(НаборЗаписей)
	
	СписокСотрудников = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ИмяРегистраСведений = НаборЗаписей.Метаданные().Имя;
		
		// Обновлять записи необходимо, только при записи набора, содержащего первичные данные.
		Если Не НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") Тогда
			
			// Соберем информацию о сотрудниках, у которых меняются данные кадровой истории.
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			ИзмеренияДаты = Новый ТаблицаЗначений;
			ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
			ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
			СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
			
			ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ИзмеренияДаты);
			
			ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Регистратор", "=", НаборЗаписей.Отбор.Регистратор.Значение.Ссылка);
		
			ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
				ИмяРегистраСведений,
				Запрос.МенеджерВременныхТаблиц,
				Истина,
				ОписаниеФильтра,
				ПараметрыПостроения,
				"ВТПредыдущиеЗначения");
			
			Запрос.УстановитьПараметр("Регистратор", НаборЗаписей.Отбор.Регистратор.Значение.Ссылка);
			Запрос.УстановитьПараметр("Источник", НаборЗаписей.Выгрузить());
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НаборИсточник.Сотрудник
			|ПОМЕСТИТЬ ВТСохраняемыеЗначения
			|ИЗ
			|	&Источник КАК НаборИсточник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА СохраняемыеЗначения.Сотрудник ЕСТЬ NULL 
			|			ТОГДА ПредыдущиеЗначения.Сотрудник
			|		ИНАЧЕ СохраняемыеЗначения.Сотрудник
			|	КОНЕЦ КАК Сотрудник
			|ИЗ
			|	ВТПредыдущиеЗначения КАК ПредыдущиеЗначения
			|		ПОЛНОЕ СОЕДИНЕНИЕ ВТСохраняемыеЗначения КАК СохраняемыеЗначения
			|		ПО ПредыдущиеЗначения.Сотрудник = СохраняемыеЗначения.Сотрудник";
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				СписокСотрудников = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокСотрудников;
	
КонецФункции

Процедура ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления) Экспорт
	
	КадровыйУчетВнутренний.ОбновитьТекущиеТарифныеСтавки(МассивСотрудниковДляОбновления);
	
КонецПроцедуры

#КонецОбласти


#Область ПолучениеРабочихМест

// Возвращает структуру параметров для ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников.
//
// Параметры:
//				Сотрудники - СправочникСсылка.Сотрудники, массив сотрудников, если параметр опущен
//							рабочие места будут подбираться по всем сотрудникам соответствующим отбору
//							по организации и подразделению.
//				НачалоПериода - Дата, Строка (при встраивание в тест другого запроса).
//				ОкончаниеПериода - Дата, если не указана - будут отбираться все рабочие места,
//							начиная с НачалоПериода.
//								- Строка (при встраивание в тест другого запроса).
//
// Возвращаемое значение:
//   Структура - Содержит ключи, возвращаемые методом ПараметрыДляЗапросВТРабочиеМестаСотрудников.
//				СписокСотрудников - Массив ссылок справочника сотрудники.
//				НачалоПериода - Дата, значение по умолчанию '00010101'. 
//				ОкончаниеПериода - Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//					ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//					параметр не указан, выборка будет производиться на текущую дату сеанса.
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники = Неопределено, НачалоПериода = '00010101', ОкончаниеПериода = '00010101') Экспорт
		
	ПараметрыПолученияРабочихМестСотрудников = ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		СписокСотрудников = Сотрудники;
	КонецЕсли;
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("СписокСотрудников", СписокСотрудников);

	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

// Возвращает структуру параметров для ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице.
//
// Параметры:
//			ИмяВТСотрудникиПериоды - Строка
//			ИмяПоляСотрудник - Строка, 
//			ИмяПоляНачалоПериода - Строка
//			ИмяПоляОкончаниеПериода - Строка
//
// Возвращаемое значение:
//   Структура - Содержит ключи, возвращаемые методом ПараметрыДляЗапросВТРабочиеМестаСотрудников
//				ИмяВТСотрудникиПериоды
//				ИмяПоляСотрудник
//				ИмяПоляНачалоПериода
//				ИмяПоляОкончаниеПериода.
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяПоляСотрудник = "Сотрудник", ИмяПоляНачалоПериода = "НачалоПериода", ИмяПоляОкончаниеПериода = "ОкончаниеПериода") Экспорт
	
	ПараметрыПолученияРабочихМестСотрудников = ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляСотрудник", ИмяПоляСотрудник);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляНачалоПериода", ИмяПоляНачалоПериода);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляОкончаниеПериода", ИмяПоляОкончаниеПериода);
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ПериодВОдинДень", Ложь);
	
	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

// Создает временную таблицу в переданном менеджере временных таблиц.
//
// Параметры:
//		МенеджерВременныхТаблиц 		- МенеджерВременныхТаблиц
//		ТолькоРазрешенные				- Булево
//		Параметры 						- Структура, см. функцию ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников.
//		ИмяВТРабочиеМестаСотрудников	- Строка
//
Процедура СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТРабочиеМестаСотрудников = "ВТРабочиеМестаСотрудников") Экспорт
	
	Если ПривилегированныйРежим() Тогда
		
		Запрос = ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры, МенеджерВременныхТаблиц);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
	Иначе
		
		Если Параметры.Свойство("ИмяВТСотрудникиПериоды") Тогда
			ПараметрыПоВТ = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
		Иначе
			
			ИмяВТСотрудникиПериоды = "ВТСотрудникиПериодыДляПолученияРабочихМест";
			Запрос = ЗапросВТСотрудникиПериодыДляПолученияРабочихМестОрганизаций(ТолькоРазрешенные, ИмяВТСотрудникиПериоды, Параметры);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			Запрос.Выполнить();
			
			ПараметрыПоВТ = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
			ЗаполнитьЗначенияСвойств(ПараметрыПоВТ, Параметры);
			ПараметрыПоВТ.ИмяВТСотрудникиПериоды = ИмяВТСотрудникиПериоды;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, Ложь, ПараметрыПоВТ, ИмяВТРабочиеМестаСотрудников);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не Параметры.Свойство("ИмяВТСотрудникиПериоды") Тогда
			
			Запрос.Текст = "";
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВЗапросСозданияВременнойТаблицыТекстУничтоженияВспомогательной(
				Запрос.Текст, ИмяВТСотрудникиПериоды);
			
			Запрос.Выполнить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает временную таблицу в переданном менеджере временных таблиц.
//
// Параметры:
//		МенеджерВременныхТаблиц 		- МенеджерВременныхТаблиц
//		ТолькоРазрешенные				- Булево
//		Параметры 						- Структура, см. функцию ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице.
//		ИмяВТРабочиеМестаСотрудников	- Строка
//
Процедура СоздатьВТРабочиеМестаСотрудниковПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры, ИмяВТРабочиеМестаСотрудников = "ВТРабочиеМестаСотрудников") Экспорт
	
	Запрос = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры, МенеджерВременныхТаблиц);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТСотрудникиПериодыДляПолученияРабочихМестОрганизаций(ТолькоРазрешенные, ИмяВТСотрудникиПериоды, Параметры)
	
	Запрос = Новый Запрос;
	
	ТекстДатаВремя = "ДАТАВРЕМЯ(1, 1, 1)";
	
	Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
		ТекстДатаНачала = Параметры.НачалоПериода;
	Иначе
		Если ТипЗнч(Параметры.НачалоПериода) <> Тип("Дата") Тогда
			Параметры.НачалоПериода = '00010101';
		КонецЕсли;
		ТекстДатаНачала = СтрЗаменить(ТекстДатаВремя, "1, 1, 1", Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП="));
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
		ТекстДатаОкончания = Параметры.ОкончаниеПериода;
	Иначе
		Если ТипЗнч(Параметры.ОкончаниеПериода) <> Тип("Дата") Тогда
			Параметры.ОкончаниеПериода = '00010101';
		КонецЕсли;
		ТекстДатаОкончания = СтрЗаменить(ТекстДатаВремя, "1, 1, 1", Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП="));
	КонецЕсли;
	
	ТекстЗапросаВТСотрудникиПериоды =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&НачалоПериода КАК НачалоПериода,
		|	&ОкончаниеПериода КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	&ТекстОтборовСотрудникиПериоды";
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТСотрудникиПериоды, ТолькоРазрешенные);
	
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "&НачалоПериода", ТекстДатаНачала);
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "&ОкончаниеПериода", ТекстДатаОкончания);
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	ТекстОтборовСотрудникиПериоды = "";
	
	Если Параметры.Свойство("СписокСотрудников") И Параметры.СписокСотрудников <> Неопределено Тогда
		
		ТекстОтборовСотрудникиПериоды = "Сотрудники.Ссылка В(&СписокСотрудников)";
		Запрос.УстановитьПараметр("СписокСотрудников", Параметры.СписокСотрудников);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		
		ТекстОтборовГоловнаяОрганизация =  "Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
		Если ПустаяСтрока(ТекстОтборовСотрудникиПериоды) Тогда
			ТекстОтборовСотрудникиПериоды = ТекстОтборовГоловнаяОрганизация;
		Иначе
			
			МассивПодстрок = Новый Массив;
			МассивПодстрок.Добавить(ТекстОтборовСотрудникиПериоды);
			МассивПодстрок.Добавить(ТекстОтборовГоловнаяОрганизация);
			
			ТекстОтборовСотрудникиПериоды = СтрСоединить(МассивПодстрок, Символы.ПС + Символы.Таб + "И ");
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Параметры.Организация));
		
	КонецЕсли;
	
	ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "&ТекстОтборовСотрудникиПериоды", ?(ПустаяСтрока(ТекстОтборовСотрудникиПериоды), "(ИСТИНА)", ТекстОтборовСотрудникиПериоды));
	
	Запрос.Текст = ТекстЗапросаВТСотрудникиПериоды;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры, МенеджерВременныхТаблиц) Экспорт
	
	ИмяВТСотрудникиПериоды = "ВТСотрудникиПериодыДляПолученияРабочихМест";
	
	Запрос = ЗапросВТСотрудникиПериодыДляПолученияРабочихМестОрганизаций(ТолькоРазрешенные, ИмяВТСотрудникиПериоды, Параметры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ПараметрыПоВТ = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
	ЗаполнитьЗначенияСвойств(ПараметрыПоВТ, Параметры);
	
	ПараметрыПоВТ.ИмяВТСотрудникиПериоды = ИмяВТСотрудникиПериоды;
	
	Запрос = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, ПараметрыПоВТ, МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(
		Запрос.Текст, ИмяВТСотрудникиПериоды);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры, МенеджерВременныхТаблиц = Неопределено) Экспорт
	
	СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	ИменаВТКУничтожению = Новый Массив;
	
	Запрос = Новый Запрос;
	
	РаботникиПоТрудовымДоговорам = Ложь;
	ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	РаботникиПоДоговорамГПХ = Ложь;
	
	ВыбрасыватьИсключениеДоступа = Истина;
	Если Параметры.Свойство("ВыбрасыватьИсключениеДоступа")
		И Параметры.ВыбрасыватьИсключениеДоступа = Ложь Тогда
		
		ВыбрасыватьИсключениеДоступа = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("РаботникиПоТрудовымДоговорам")
		И Параметры.РаботникиПоТрудовымДоговорам = Истина Тогда
		
		РаботникиПоТрудовымДоговорам = Истина;
		
	КонецЕсли;
	
	ИспользоватьПодработки = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		ИмяФункциональнойОпции = "ИспользоватьПодработки";
		ИспользоватьПодработки = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	КонецЕсли;
	
	Если ИспользоватьПодработки
		И Параметры.Свойство("ПодработкиРаботниковПоТрудовымДоговорам")
		И Параметры.ПодработкиРаботниковПоТрудовымДоговорам = Истина Тогда
		
		Если ВыбрасыватьИсключениеДоступа = Ложь Тогда
			ПодработкиРаботниковПоТрудовымДоговорам = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.КадроваяИсторияСотрудников);
		Иначе
			ПодработкиРаботниковПоТрудовымДоговорам = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам")
		И Параметры.Свойство("РаботникиПоДоговорамГПХ")
		И Параметры.РаботникиПоДоговорамГПХ = Истина Тогда
		
		Если ВыбрасыватьИсключениеДоступа = Ложь Тогда
			РаботникиПоДоговорамГПХ = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера);
		Иначе
			РаботникиПоДоговорамГПХ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РаботникиПоТрудовымДоговорам
		И Не ПодработкиРаботниковПоТрудовымДоговорам
		И Не РаботникиПоДоговорамГПХ Тогда
		
		Если ВыбрасыватьИсключениеДоступа = Ложь Тогда
			РаботникиПоТрудовымДоговорам = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.КадроваяИсторияСотрудников);
		Иначе
			РаботникиПоТрудовымДоговорам = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не РаботникиПоТрудовымДоговорам
		И Не РаботникиПоДоговорамГПХ
		И Не ПодработкиРаботниковПоТрудовымДоговорам Тогда
		
		ПоляЗапроса = Новый Массив;
		Для Каждого ОписаниеПоля Из ПоляВТРабочиеМестаСотрудников() Цикл
			ПоляЗапроса.Добавить("NULL КАК " + ОписаниеПоля.Ключ);
		КонецЦикла;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	&ПоляЗапроса КАК ПоляЗапроса
			|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
			|ГДЕ
			|	ЛОЖЬ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляЗапроса КАК ПоляЗапроса", СтрСоединить(ПоляЗапроса, "," + Символы.ПС));
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
		
		Возврат Запрос;
		
	КонецЕсли;
	
	Если РаботникиПоТрудовымДоговорам
		Или ПодработкиРаботниковПоТрудовымДоговорам Тогда
		
		Если РаботникиПоДоговорамГПХ Тогда
			
			ИмяВТРабочиеМестаПоТрудовымДоговорам = "ВТРабочиеМестаПоТрудовымДоговорам";
			ИменаВТКУничтожению.Добавить(ИмяВТРабочиеМестаПоТрудовымДоговорам);
			
		Иначе
			ИмяВТРабочиеМестаПоТрудовымДоговорам = ИмяВТРабочиеМестаСотрудников;
		КонецЕсли;
		
		ПараметрыБазовые = Параметры;
		
		Если ПодработкиРаботниковПоТрудовымДоговорам Тогда
			
			Если Не ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
				
				ТекстЗапросаОтбораСотрудников =
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Сотрудники.Ссылка КАК Сотрудник,
					|	СотрудникиПериоды.ДатаНачала КАК НачалоПериода,
					|	СотрудникиПериоды.ДатаОкончания КАК ОкончаниеПериода
					|ПОМЕСТИТЬ ВТСотрудникиПодработкиПериоды
					|ИЗ
					|	Справочник.Сотрудники КАК Сотрудники
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
					|		ПО Сотрудники.ГоловнойСотрудник = СотрудникиПериоды.Сотрудник
					|			И (Сотрудники.ГоловнойСотрудник <> Сотрудники.Ссылка)
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК ПодработкиПериоды
					|		ПО Сотрудники.Ссылка = ПодработкиПериоды.Сотрудник
					|ГДЕ
					|	ПодработкиПериоды.Сотрудник ЕСТЬ NULL 
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	СотрудникиПериоды.Сотрудник,
					|	СотрудникиПериоды.ДатаНачала,
					|	СотрудникиПериоды.ДатаОкончания
					|ИЗ
					|	ВТСотрудникиПериоды КАК СотрудникиПериоды";
				
				ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаОтбораСотрудников, ТолькоРазрешенные);
				
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "ВТСотрудникиПериоды", Параметры.ИмяВТСотрудникиПериоды);
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "СотрудникиПериоды.ДатаНачала", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
				ТекстЗапросаОтбораСотрудников = СтрЗаменить(ТекстЗапросаОтбораСотрудников, "СотрудникиПериоды.ДатаОкончания", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
				
				ПараметрыБазовые = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице();
				ЗаполнитьЗначенияСвойств(ПараметрыБазовые, Параметры, , "ИмяВТСотрудникиПериоды,ИмяПоляСотрудник,ИмяПоляНачалоПериода,ИмяПоляОкончаниеПериода");
				ПараметрыБазовые.ИмяВТСотрудникиПериоды = "ВТСотрудникиПодработкиПериоды";
				
				ИменаВТКУничтожению.Добавить("ВТСотрудникиПодработкиПериоды");
				
				Если СоздаватьПромежуточныеТаблицы Тогда
					
					ЗапросВТСотрудникиПодработкиПериоды = Новый Запрос;
					ЗапросВТСотрудникиПодработкиПериоды.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
					
					ЗапросВТСотрудникиПодработкиПериоды.Текст = ТекстЗапросаОтбораСотрудников;
					ЗапросВТСотрудникиПодработкиПериоды.Выполнить();
					
				Иначе
					ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаОтбораСотрудников);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не РаботникиПоТрудовымДоговорам Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыБазовые.Отборы,
					"ЭтоГоловнойСотрудник", "=", Ложь);
				
			КонецЕсли;
			
		Иначе
			
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыБазовые.Отборы,
				"ЭтоГоловнойСотрудник", "=", Истина);
			
		КонецЕсли;
		
		// Сотрудники по трудовым договорам
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			ЗапросРабочихМест = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблицеСКадровымУчетом(ТолькоРазрешенные, ИмяВТРабочиеМестаПоТрудовымДоговорам, ПараметрыБазовые, МенеджерВременныхТаблиц);
		Иначе
			ЗапросРабочихМест = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблицеБезКадровогоУчета(ТолькоРазрешенные, ИмяВТРабочиеМестаПоТрудовымДоговорам, ПараметрыБазовые, МенеджерВременныхТаблиц);
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросРабочихМест);
		
	КонецЕсли;
	
	Если РаботникиПоДоговорамГПХ Тогда
		
		ТекстыЗапросаРабочиеМеста = Новый Массив;
		Если РаботникиПоТрудовымДоговорам
			Или ПодработкиРаботниковПоТрудовымДоговорам Тогда
			
			ПоляЗапроса = Новый Массив;
			Для Каждого ОписаниеПоля Из ПоляВТРабочиеМестаСотрудников() Цикл
				ПоляЗапроса.Добавить("РабочиеМестаПоТрудовымДоговорам." + ОписаниеПоля.Ключ + " КАК " + ОписаниеПоля.Ключ);
			КонецЦикла;
			
			ТекстЗапросаРабочиеМеста =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	"
				+ СтрСоединить(ПоляЗапроса, "," + Символы.ПС)
				+ "
				|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
				|ИЗ
				|	ВТРабочиеМестаПоТрудовымДоговорам КАК РабочиеМестаПоТрудовымДоговорам";
			
			ТекстЗапросаРабочиеМеста = СтрЗаменить(ТекстЗапросаРабочиеМеста, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаСотрудников);
			ТекстЗапросаРабочиеМеста = СтрЗаменить(ТекстЗапросаРабочиеМеста, "ВТРабочиеМестаПоТрудовымДоговорам", ИмяВТРабочиеМестаПоТрудовымДоговорам);
			
			ТекстыЗапросаРабочиеМеста.Добавить(ТекстЗапросаРабочиеМеста);
			
		КонецЕсли;
		
		УсловияОтбора = "";
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			
			ПараметрыОрганизации = ПараметрыОтбораПоОрганизациям(Параметры);
			
			УсловияОтбора = "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнаяОрганизация В (&ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация)";
			ТекущиеКадровыеДанныеСотрудниковОрганизация = ПараметрыОрганизации.ГоловныеОрганизации;
			
			Если Не Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				УсловияОтбора = "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация В (&ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация)";
				ТекущиеКадровыеДанныеСотрудниковОрганизация = ПараметрыОрганизации.Организации;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ПериодыДействияДоговоровГражданскоПравовогоХарактераОрганизация", ТекущиеКадровыеДанныеСотрудниковОрганизация);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			
			УсловияОтбора = ?(ПустаяСтрока(УсловияОтбора), "", УсловияОтбора + Символы.ПС + "	И ")
				+ "ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение В ИЕРАРХИИ (&ПериодыДействияДоговоровГражданскоПравовогоХарактераПодразделение)";
			
			Запрос.УстановитьПараметр("ПериодыДействияДоговоровГражданскоПравовогоХарактераПодразделение", Параметры.Подразделение);
			
		КонецЕсли;
		
		СоответствиеПолейЗапросаПоДоговорамГПХ = Новый Структура;
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("Период",
			"	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала > СотрудникиПериоды.НачалоПериода
			|			ТОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
			|		ИНАЧЕ СотрудникиПериоды.НачалоПериода
			|	КОНЕЦ");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("ПериодЗаписи",
			"	ВЫБОР
			|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала > СотрудникиПериоды.НачалоПериода
			|			ТОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
			|		ИНАЧЕ СотрудникиПериоды.НачалоПериода
			|	КОНЕЦ");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("ГоловнаяОрганизация",
			"ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнаяОрганизация");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("Организация",
			"ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("Сотрудник",
			"ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("ГоловнойСотрудник",
			"ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ГоловнойСотрудник");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("ФизическоеЛицо",
			"ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("Подразделение",
			"ПериодыДействияДоговоровГражданскоПравовогоХарактера.Подразделение");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("РольСотрудника",
			"ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Договорник)");
		СоответствиеПолейЗапросаПоДоговорамГПХ.Вставить("ДокументОснование",
			"ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование");
		
		ПоляЗапроса = Новый Массив;
		Для Каждого ОписаниеПоля Из ПоляВТРабочиеМестаСотрудников() Цикл
			Если СоответствиеПолейЗапросаПоДоговорамГПХ.Свойство(ОписаниеПоля.Ключ) Тогда
				ПоляЗапроса.Добавить(СоответствиеПолейЗапросаПоДоговорамГПХ[ОписаниеПоля.Ключ] + " КАК " + ОписаниеПоля.Ключ);
			Иначе
				ПоляЗапроса.Добавить("NULL КАК " + ОписаниеПоля.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТекстыЗапросаПоДоговорамГПХ = Новый Массив;
		ТекстыЗапросаПоДоговорамГПХ.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	"
			+ СтрСоединить(ПоляЗапроса, "," + Символы.ПС)
			+ "
			|ПОМЕСТИТЬ ВТРабочиеМестаПоДоговорамГПХ
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ПО (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала < ВЫБОР
			|				КОГДА СотрудникиПериоды.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(СотрудникиПериоды.ОкончаниеПериода, ДЕНЬ)
			|			КОНЕЦ)
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= СотрудникиПериоды.НачалоПериода
			|			И (ВЫБОР
			|				КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала > СотрудникиПериоды.НачалоПериода
			|					ТОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
			|				ИНАЧЕ СотрудникиПериоды.НачалоПериода
			|			КОНЕЦ <> ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания)
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник");
		
		Если Не ПустаяСтрока(УсловияОтбора) Тогда
			
			ТекстыЗапросаПоДоговорамГПХ.Добавить("ГДЕ");
			ТекстыЗапросаПоДоговорамГПХ.Добавить(УсловияОтбора);
			
		КонецЕсли;
		
		ТекстыЗапросаПоДоговорамГПХ.Добавить("ОБЪЕДИНИТЬ ВСЕ");
		ТекстыЗапросаПоДоговорамГПХ.Добавить(
			"ВЫБРАТЬ
			|	"
			+ СтрСоединить(ПоляЗапроса, "," + Символы.ПС)
			+ "
			|ИЗ
			|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
			|		ПО ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= СотрудникиПериоды.НачалоПериода
			|			И (ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания <= ВЫБОР
			|				КОГДА СотрудникиПериоды.ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
			|				ИНАЧЕ КОНЕЦПЕРИОДА(СотрудникиПериоды.ОкончаниеПериода, ДЕНЬ)
			|			КОНЕЦ)
			|			И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник");
		
		Если Не ПустаяСтрока(УсловияОтбора) Тогда
			
			ТекстыЗапросаПоДоговорамГПХ.Добавить("ГДЕ");
			ТекстыЗапросаПоДоговорамГПХ.Добавить(УсловияОтбора);
			
		КонецЕсли;
		
		ТекстЗапросаПоДоговорамГПХ = СтрСоединить(ТекстыЗапросаПоДоговорамГПХ, Символы.ПС);
		
		Если ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
			
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ,
				"И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник = СотрудникиПериоды.Сотрудник", "");
			
		КонецЕсли;
		
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВТСотрудникиПериоды", Параметры.ИмяВТСотрудникиПериоды);
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.НачалоПериода", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
		ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
		
		Если РаботникиПоТрудовымДоговорам
			Или ПодработкиРаботниковПоТрудовымДоговорам Тогда
			
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ПОМЕСТИТЬ ВТРабочиеМестаПоДоговорамГПХ", "");
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ", "ВЫБРАТЬ");
			
			ТекстыЗапросаРабочиеМеста.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			
		Иначе
			ТекстЗапросаПоДоговорамГПХ = СтрЗаменить(ТекстЗапросаПоДоговорамГПХ, "ВТРабочиеМестаПоДоговорамГПХ", ИмяВТРабочиеМестаСотрудников);
		КонецЕсли;
		
		ТекстыЗапросаРабочиеМеста.Добавить(ТекстЗапросаПоДоговорамГПХ);
		ТекстЗапросаРабочиеМеста = СтрСоединить(ТекстыЗапросаРабочиеМеста, Символы.ПС);
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаРабочиеМеста, ТолькоРазрешенные);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаРабочиеМеста);
		
	КонецЕсли;
	
	Если ИменаВТКУничтожению.Количество() > 0
		И Не ПустаяСтрока(ИмяВТРабочиеМестаСотрудников) Тогда
		
		Для каждого ИмяТаблицы Из ИменаВТКУничтожению Цикл
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, ИмяТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ПоляВТРабочиеМестаСотрудников() Экспорт
	
	Возврат КадровыйУчетВнутренний.ПоляВТРабочиеМестаСотрудников();
	
КонецФункции

// Возвращает структуру параметров для, формирующих ВТРабочиеМестаСотрудников.
//
// Возвращаемое значение:
//	Структура	- Содержит ключи:
//					* Организация						- СправочникСсылка.Организации, если параметр опустить в таблицу
//															войдут все сотрудник независимо от организации.
//					* ОтбиратьПоГоловнойОрганизации		- Булево, если Истина, то отбор по головной организации, иначе
//															по текущей организации.
//					* Подразделение						- СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут
//															сотрудники указанного подразделения и всех подразделений,
//															подчиненных указанному, если параметр опустить в таблицу
//															войдут все сотрудники.
//					* ИсключаемыйРегистратор
//					* Отборы							- Неопределено, Массив описаний отборов
//															см. ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор
//					* ВключаяУволенныхНаНачалоПериода	- Булево
//					* РаботникиПоТрудовымДоговорам		- Булево
//					* ПодработкиРаботниковПоТрудовымДоговорам	- Булево
//					* РаботникиПоДоговорамГПХ			- Булево
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудников()
	
	ПараметрыПолученияРабочихМестСотрудников = Новый Структура;
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Организация");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Подразделение");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИсключаемыйРегистратор");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Отборы");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ВключаяУволенныхНаНачалоПериода", Ложь);
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ПодработкиРаботниковПоТрудовымДоговорам", Ложь);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("РаботникиПоДоговорамГПХ", Ложь);
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ВыбрасыватьИсключениеДоступа", Истина);
	
	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

#КонецОбласти


#Область СобытияРегистровСведений

Процедура КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.КадроваяИсторияСотрудниковПередЗаписью(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.КадроваяИсторияСотрудниковПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.ПлановыеНачисленияПередЗаписью(НаборЗаписей, Отказ);
	
КонецПроцедуры

Процедура ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.ПлановыеНачисленияПриЗаписи(НаборЗаписей, Отказ);
	
КонецПроцедуры

#КонецОбласти


#Область ОсновныеСотрудникиФизическихЛиц

Процедура ОбновитьОсновныхСотрудниковФизическихЛицПоСотрудникам(Сотрудники) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	&МаксимальнаяДата КАК ДатаОкончания,
		|	МИНИМУМ(Сотрудники.Ссылка) КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
		|		ПО Сотрудники.ГоловнаяОрганизация = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Организация.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
		Запрос.УстановитьПараметр("ОбновляемыеСотрудники", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		
		// Удаление записей по сотрудникам сменившим головную организацию
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ОсновныеСотрудникиФизическихЛиц.ДатаНачала КАК ДатаНачала,
			|	ОсновныеСотрудникиФизическихЛиц.ДатаОкончания КАК ДатаОкончания
			|ИЗ
			|	РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
			|ГДЕ
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник В(&ОбновляемыеСотрудники)
			|	И ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация <> ОсновныеСотрудникиФизическихЛиц.Сотрудник.ГоловнаяОрганизация";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ЗаписиКУдалению = Новый Массив;
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				НаборЗаписей.Отбор.ДатаНачала.Установить(Выборка.ДатаНачала);
				НаборЗаписей.Отбор.ДатаОкончания.Установить(Выборка.ДатаОкончания);
				
				НаборЗаписей.Прочитать();
				Для Каждого Запись Из НаборЗаписей Цикл
					
					Если Сотрудники.Найти(Запись.Сотрудник) <> Неопределено Тогда
						ЗаписиКУдалению.Добавить(Запись);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЗаписиКУдалению.Количество() > 0 Тогда
					
					Для Каждого Запись Из ЗаписиКУдалению Цикл
						НаборЗаписей.Удалить(Запись);
					КонецЦикла;
					
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТГоловныеОрганизацииФизическихЛиц
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.Ссылка В(&ОбновляемыеСотрудники)
			|	И Сотрудники.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
			|	&МаксимальнаяДата КАК ДатаОкончания,
			|	МИНИМУМ(Сотрудники.Ссылка) КАК Сотрудник
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГоловныеОрганизацииФизическихЛиц КАК ГоловныеОрганизацииФизическихЛиц
			|		ПО Сотрудники.ГоловнаяОрганизация = ГоловныеОрганизацииФизическихЛиц.ГоловнаяОрганизация
			|			И Сотрудники.ФизическоеЛицо = ГоловныеОрганизацииФизическихЛиц.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
			|		ПО Сотрудники.ГоловнаяОрганизация = ВидыЗанятостиСотрудников.ГоловнаяОрганизация
			|			И Сотрудники.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
			|ГДЕ
			|	ВидыЗанятостиСотрудников.ФизическоеЛицо ЕСТЬ NULL
			|	И Сотрудники.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|
			|СГРУППИРОВАТЬ ПО
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.ФизическоеЛицо";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОбновитьОсновныхСотрудниковФизическихЛицПоТрудовымДоговорам(НаборЗаписейВидыЗанятостиСотрудников) Экспорт
	
	ИзменившиесяДанныеНабора = НаборЗаписейВидыЗанятостиСотрудников.ТаблицаИзменившихсяДанныхНабора();
	
	ОбновляемыеСотрудники = ИзменившиесяДанныеНабора.ВыгрузитьКолонку("Сотрудник");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбновляемыеСотрудники", ОбновляемыеСотрудники);
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОбновляемыеСотрудники)";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников.Имя,
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТСотрудникиПериоды", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ВидыЗанятостиСотрудников.Сотрудник) КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ВидыЗанятостиСотрудниковПредыдущие.Период) ЕСТЬ NULL
		|			ТОГДА ДАТАВРЕМЯ(1, 1, 1)
		|		ИНАЧЕ ВидыЗанятостиСотрудников.Период
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период) ЕСТЬ NULL
		|			ТОГДА &МаксимальнаяДата
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(ВидыЗанятостиСотрудниковСледующие.Период), ДЕНЬ, -1)
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковПредыдущие
		|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковПредыдущие.ГоловнаяОрганизация
		|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковПредыдущие.ФизическоеЛицо
		|			И (ВидыЗанятостиСотрудниковПредыдущие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
		|			И ВидыЗанятостиСотрудников.Период > ВидыЗанятостиСотрудниковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудниковСледующие
		|		ПО ВидыЗанятостиСотрудников.ГоловнаяОрганизация = ВидыЗанятостиСотрудниковСледующие.ГоловнаяОрганизация
		|			И ВидыЗанятостиСотрудников.ФизическоеЛицо = ВидыЗанятостиСотрудниковСледующие.ФизическоеЛицо
		|			И (ВидыЗанятостиСотрудниковСледующие.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)))
		|			И ВидыЗанятостиСотрудников.Период < ВидыЗанятостиСотрудниковСледующие.Период
		|ГДЕ
		|	ВидыЗанятостиСотрудников.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗанятостиСотрудников.Период,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ГоловнаяОрганизация,
		|	ДатаНачала";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				Пока Выборка.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиПериоды КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО Сотрудники.ГоловнаяОрганизация = ВидыЗанятостиСотрудников.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
		|ГДЕ
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновитьОсновныхСотрудниковФизическихЛицСотрудниковПоДоговорамГПХ(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОсновныхСотрудниковФизическихЛицСотрудниковПоДоговорамГПХ(Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОбновляемыеСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТГоловныеОрганизацииФизическихЛиц
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&ОбновляемыеСотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГПХ.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник КАК Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаНачала КАК ДатаНачала,
		|	ПериодыДействияДоговоровГПХ.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыДействияДоговоровГПХСотрудников
		|ИЗ
		|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГПХ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГоловныеОрганизацииФизическихЛиц КАК ГоловныеОрганизацииФизическихЛиц
		|		ПО ПериодыДействияДоговоровГПХ.Организация.ГоловнаяОрганизация = ГоловныеОрганизацииФизическихЛиц.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ГоловныеОрганизацииФизическихЛиц.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО ПериодыДействияДоговоровГПХ.Организация.ГоловнаяОрганизация = ВидыЗанятостиСотрудников.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ВидыЗанятостиСотрудников.ФизическоеЛицо
		|ГДЕ
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник КАК Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаНачала КАК ДатаНачала,
		|	ЕСТЬNULL(МАКСИМУМ(ПериодыДействияДоговоровГПХСледующиеСотрудники.ДатаОкончания), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыДействияДоговоровГПХСОкончанием
		|ИЗ
		|	ВТПериодыДействияДоговоровГПХСотрудников КАК ПериодыДействияДоговоровГПХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияДоговоровГПХСотрудников КАК ПериодыДействияДоговоровГПХСледующиеСотрудники
		|		ПО ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация = ПериодыДействияДоговоровГПХСледующиеСотрудники.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ПериодыДействияДоговоровГПХСледующиеСотрудники.ФизическоеЛицо
		|			И ПериодыДействияДоговоровГПХ.Сотрудник = ПериодыДействияДоговоровГПХСледующиеСотрудники.Сотрудник
		|			И ПериодыДействияДоговоровГПХ.ДатаНачала <= ПериодыДействияДоговоровГПХСледующиеСотрудники.ДатаНачала
		|			И ПериодыДействияДоговоровГПХ.ДатаОкончания >= ПериодыДействияДоговоровГПХСледующиеСотрудники.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(МИНИМУМ(ПериодыДействияДоговоровГПХ.ДатаНачала), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачала,
		|	ПериодыДействияДоговоровГПХ.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыДействияДоговоровГПХ
		|ИЗ
		|	ВТПериодыДействияДоговоровГПХСОкончанием КАК ПериодыДействияДоговоровГПХ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТОбновляемыеФизическиеЛица
		|ИЗ
		|	ВТПериодыДействияДоговоровГПХ КАК ПериодыДействияДоговоровГПХ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ПО ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация = ОсновныеСотрудникиФизическихЛиц.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
		|			И ПериодыДействияДоговоровГПХ.ДатаНачала = ОсновныеСотрудникиФизическихЛиц.ДатаНачала
		|			И ПериодыДействияДоговоровГПХ.ДатаОкончания = ОсновныеСотрудникиФизическихЛиц.ДатаОкончания
		|			И ПериодыДействияДоговоровГПХ.Сотрудник = ОсновныеСотрудникиФизическихЛиц.Сотрудник
		|ГДЕ
		|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыДействияДоговоровГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыДействияДоговоровГПХ.Сотрудник КАК Сотрудник,
		|	ПериодыДействияДоговоровГПХ.ДатаНачала КАК ДатаНачала,
		|	ПериодыДействияДоговоровГПХ.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТПериодыДействияДоговоровГПХ КАК ПериодыДействияДоговоровГПХ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбновляемыеФизическиеЛица КАК ОбновляемыеФизическиеЛица
		|		ПО ПериодыДействияДоговоровГПХ.ГоловнаяОрганизация = ОбновляемыеФизическиеЛица.ГоловнаяОрганизация
		|			И ПериодыДействияДоговоровГПХ.ФизическоеЛицо = ОбновляемыеФизическиеЛица.ФизическоеЛицо
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ГоловнаяОрганизация,
		|	ДатаНачала";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			Пока Выборка.СледующийПоЗначениюПоля("ГоловнаяОрганизация") Цикл
				
				НаборЗаписей = РегистрыСведений.ОсновныеСотрудникиФизическихЛиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ФизическоеЛицо.Установить(Выборка.ФизическоеЛицо);
				НаборЗаписей.Отбор.ГоловнаяОрганизация.Установить(Выборка.ГоловнаяОрганизация);
				
				ПредыдущаяЗапись = Неопределено;
				Пока Выборка.Следующий() Цикл
					
					Если ПредыдущаяЗапись = Неопределено Тогда
						
						Запись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Запись, Выборка);
						
						Запись.ДатаНачала = '00010101';
						
					Иначе
						
						Если Выборка.ДатаОкончания <= ПредыдущаяЗапись.ДатаОкончания
							Или ПредыдущаяЗапись.Сотрудник = Выборка.Сотрудник Тогда
							
							Продолжить;
							
						Иначе
							
							Запись = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(Запись, Выборка);
							
							Если ПредыдущаяЗапись.ДатаОкончания < Запись.ДатаНачала Тогда
								ПредыдущаяЗапись.ДатаОкончания = НачалоДня(Запись.ДатаНачала - 1);
							Иначе
								Запись.ДатаНачала = КонецДня(ПредыдущаяЗапись.ДатаОкончания) + 1;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ПредыдущаяЗапись = Запись;
					
				КонецЦикла;
				
				ПредыдущаяЗапись.ДатаОкончания = ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата();
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Обновление основных сотрудников, записи о которых удалены в наборах записей по договорам ГПХ.
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГоловныеОрганизацииФизическихЛиц КАК ГоловныеОрганизацииФизическихЛиц
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОбновляемыеФизическиеЛица КАК ОбновляемыеФизическиеЛица
		|			ПО ГоловныеОрганизацииФизическихЛиц.ГоловнаяОрганизация = ОбновляемыеФизическиеЛица.ГоловнаяОрганизация
		|				И ГоловныеОрганизацииФизическихЛиц.ФизическоеЛицо = ОбновляемыеФизическиеЛица.ФизическоеЛицо
		|		ПО Сотрудники.ГоловнаяОрганизация = ГоловныеОрганизацииФизическихЛиц.ГоловнаяОрганизация
		|			И Сотрудники.ФизическоеЛицо = ГоловныеОрганизацииФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ОбновляемыеФизическиеЛица.ФизическоеЛицо ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ОбновитьОсновныхСотрудниковФизическихЛицПоСотрудникам(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ФормированиеПечатныхФорм

Процедура ВывестиНаПечатьТ1(ДокументРезультат, ДанныеСсылок, МакетПечатнойФормы, ИдентификаторыМакета = Неопределено, ОбъектыПечати = Неопределено) Экспорт
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПриеме";
	
	СотрудникиПериоды = Новый ТаблицаЗначений;
	СотрудникиПериоды.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СотрудникиПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого ДанныеНаПечать Из ДанныеСсылок Цикл
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			НоваяСтрока = СотрудникиПериоды.Добавить();
			НоваяСтрока.Период = ДанныеДетальныхЗаписей.РаботаДатаПриема;
			НоваяСтрока.Сотрудник = ДанныеДетальныхЗаписей.РаботаСотрудник;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиПериоды", СотрудникиПериоды);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Период КАК Период,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&СотрудникиПериоды КАК СотрудникиПериоды";
	
	Запрос.Выполнить();
	
	НачисленияСотрудников = ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	Для Каждого ДанныеНаПечать Из ДанныеСсылок Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			ДанныеНачислений = Новый Структура("РаботаСведенияОбОплатеТрудаНадбавкаНаПечать");
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Период", ДанныеДетальныхЗаписей.РаботаДатаПриема);
			СтруктураПоиска.Вставить("Сотрудник", ДанныеДетальныхЗаписей.РаботаСотрудник);
			
			СтрокиНачисленийСотрудника = НачисленияСотрудников.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНачисленийСотрудника.Количество() > 0 Тогда
				
				Если Не ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаСведенияОбОплатеТрудаТарифнаяСтавкаНаПечать) Тогда
					
					ДанныеНачислений.Вставить("РаботаСведенияОбОплатеТрудаТарифнаяСтавкаНаПечать",
						ЗарплатаКадрыОтчеты.ТарифнаяСтавкаНаПечать(СтрокиНачисленийСотрудника[0].ТарифнаяСтавка));
					
				КонецЕсли;
				
				ДанныеНачислений.РаботаСведенияОбОплатеТрудаНадбавкаНаПечать = СтрокиНачисленийСотрудника[0].Надбавка;
				
			КонецЕсли;
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеДетальныхЗаписей);
			
			ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
				ДокументРезультат, МакетПечатнойФормы, "Шапка,Работник,Подвал",
				ДанныеНаПечать,
				ДанныеДетальныхЗаписей,
				ДанныеПользовательскихПолей,
				ДанныеНачислений);
			
		КонецЦикла;
		
		Если ОбъектыПечати <> Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеНаПечать.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьТ5(ДокументРезультат, ДанныеСсылок, МакетПечатнойФормы, ИдентификаторыМакета = Неопределено, ОбъектыПечати = Неопределено) Экспорт
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПереводе";
	
	СотрудникиПериоды = Новый ТаблицаЗначений;
	СотрудникиПериоды.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СотрудникиПериоды.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	
	Для Каждого ДанныеНаПечать Из ДанныеСсылок Цикл
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			НоваяСтрока = СотрудникиПериоды.Добавить();
			НоваяСтрока.Период = ДанныеДетальныхЗаписей.РаботаДатаНачалаПеревода;
			НоваяСтрока.Сотрудник = ДанныеДетальныхЗаписей.РаботаСотрудник;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиПериоды", СотрудникиПериоды);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СотрудникиПериоды.Период КАК Период,
		|	СотрудникиПериоды.Сотрудник КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	&СотрудникиПериоды КАК СотрудникиПериоды";
	
	Запрос.Выполнить();
	
	НачисленияСотрудников = ТаблицаНачисленийСотрудниковПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиПериоды");
	
	Для Каждого ДанныеНаПечать Из ДанныеСсылок Цикл
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДанныеНачислений = Новый Структура("РаботаСведенияОбОплатеТрудаНадбавкаНаПечать");
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Период", ДанныеДетальныхЗаписей.РаботаДатаНачалаПеревода);
			СтруктураПоиска.Вставить("Сотрудник", ДанныеДетальныхЗаписей.РаботаСотрудник);
			
			СтрокиНачисленийСотрудника = НачисленияСотрудников.НайтиСтроки(СтруктураПоиска);
			Если СтрокиНачисленийСотрудника.Количество() > 0 Тогда
				
				Если Не ЗначениеЗаполнено(ДанныеДетальныхЗаписей.РаботаСведенияОбОплатеТрудаТарифнаяСтавкаНаПечать) Тогда
					
					ДанныеНачислений.Вставить("РаботаСведенияОбОплатеТрудаТарифнаяСтавкаНаПечать",
						ЗарплатаКадрыОтчеты.ТарифнаяСтавкаНаПечать(СтрокиНачисленийСотрудника[0].ТарифнаяСтавка));
					
				КонецЕсли;
				
				ДанныеНачислений.РаботаСведенияОбОплатеТрудаНадбавкаНаПечать = СтрокиНачисленийСотрудника[0].Надбавка;
				
			КонецЕсли;
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеДетальныхЗаписей);
			
			ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
				ДокументРезультат, МакетПечатнойФормы, "Шапка,Работник,Подвал",
				ДанныеСсылок,
				ДанныеДетальныхЗаписей,
				ДанныеПользовательскихПолей,
				ДанныеНачислений);
			
		КонецЦикла;
		
		Если ОбъектыПечати <> Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеНаПечать.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьТ8(ДокументРезультат, ДанныеСсылок, МакетПечатнойФормы, ИдентификаторыМакета = Неопределено, ОбъектыПечати = Неопределено) Экспорт
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОбУвольнении";
	
	Для Каждого ДанныеНаПечать Из ДанныеСсылок Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеДетальныхЗаписей);
			
			ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
				ДокументРезультат, МакетПечатнойФормы, "Шапка,Работник,Подвал",
				ДанныеСсылок,
				ДанныеДетальныхЗаписей,
				ДанныеПользовательскихПолей);
			
		КонецЦикла;
		
		Если ОбъектыПечати <> Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеНаПечать.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиНаПечатьТ6(ДокументРезультат, ДанныеСсылок, МакетПечатнойФормы, ИдентификаторыМакета = Неопределено, ОбъектыПечати = Неопределено) Экспорт
	
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
	
	Для Каждого ДанныеНаПечать Из ДанныеСсылок Цикл
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПерваяСтрокаПечатнойФормы = ДокументРезультат.ВысотаТаблицы + 1;
		
		ДатаНачалаВсего = ?(ЗначениеЗаполнено(ДанныеНаПечать.СсылкаНаОбъектДатаНачалаОсновногоОтпуска), ДанныеНаПечать.СсылкаНаОбъектДатаНачалаОсновногоОтпуска, '00010101');
		ДатаОкончанияВсего = ?(ЗначениеЗаполнено(ДанныеНаПечать.СсылкаНаОбъектДатаОкончанияОсновногоОтпуска), ДанныеНаПечать.СсылкаНаОбъектДатаОкончанияОсновногоОтпуска, '00010101');
		
		Если ДанныеНаПечать.Строки.Количество() = 0 Тогда
			
			ДанныеВычисляемыеНаХоду = Новый Структура;
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДанныеОтпусковВидОтпускаНаименованиеОтпускаНаПечать");
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДанныеОтпусковПродолжительность");
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДанныеОтпусковДатаНачалаНаПечать", ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью('00010101'));
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДанныеОтпусковДатаОкончанияНаПечать", ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью('00010101'));
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектПродолжительностьВсего", ДанныеНаПечать.СсылкаНаОбъектПродолжительностьОсновногоОтпуска);
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДатаНачалаВсегоНаПечать", ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(ДатаНачалаВсего));
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДатаОкончанияВсегоНаПечать", ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(ДатаОкончанияВсего));
			
			ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеНаПечать);
			
			ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
				ДокументРезультат, МакетПечатнойФормы, "Шапка,Работник,Подвал",
				ДанныеНаПечать,
				ДанныеПользовательскихПолей,
				ДанныеВычисляемыеНаХоду);
			
		Иначе
			
			ДанныеВычисляемыеНаХоду = Новый Структура;
			Для Каждого ДанныеДетальныхЗаписей Из ДанныеНаПечать.Строки Цикл
				
				Если Не ЗначениеЗаполнено(ДатаНачалаВсего)
					Или ЗначениеЗаполнено(ДанныеДетальныхЗаписей.СсылкаНаОбъектДанныеОтпусковДатаНачала)
						И ДатаНачалаВсего > ДанныеДетальныхЗаписей.СсылкаНаОбъектДанныеОтпусковДатаНачала Тогда
					
					ДатаНачалаВсего = ДанныеДетальныхЗаписей.СсылкаНаОбъектДанныеОтпусковДатаНачала;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеДетальныхЗаписей.СсылкаНаОбъектДанныеОтпусковДатаОкончания)
						И ДатаОкончанияВсего < ДанныеДетальныхЗаписей.СсылкаНаОбъектДанныеОтпусковДатаОкончания Тогда
					
					ДатаОкончанияВсего = ДанныеДетальныхЗаписей.СсылкаНаОбъектДанныеОтпусковДатаОкончания;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ДанныеНаПечать.СсылкаНаОбъектПродолжительностьОсновногоОтпуска) Тогда
					
					Если ДанныеНаПечать.СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпускНаПечать <>
						ДанныеНаПечать.СсылкаНаОбъектДанныеОтпусковНачалоПериодаЗаКоторыйПредоставляетсяОтпускНаПечать Тогда
						
						ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектНачалоПериодаЗаКоторыйПредоставляетсяОтпускНаПечать",
							ДанныеНаПечать.СсылкаНаОбъектДанныеОтпусковНачалоПериодаЗаКоторыйПредоставляетсяОтпускНаПечать);
						
						ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектКонецПериодаЗаКоторыйПредоставляетсяОтпускНаПечать",
							ДанныеНаПечать.СсылкаНаОбъектДанныеОтпусковКонецПериодаЗаКоторыйПредоставляетсяОтпускНаПечать);
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеНаПечать.СсылкаНаОбъектДанныеОтпусковОснование) Тогда
						ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектОснование", ДанныеНаПечать.СсылкаНаОбъектДанныеОтпусковОснование);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДатаНачалаВсегоНаПечать", ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(ДатаНачалаВсего));
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДатаОкончанияВсегоНаПечать", ЗарплатаКадрыОтчеты.ФорматДатыЧислоВКавычкахМесяцПрописью(ДатаОкончанияВсего));
			ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектПродолжительностьОсновногоОтпуска", ДанныеНаПечать.СсылкаНаОбъектПродолжительностьОсновногоОтпуска);
			
			Если ЗначениеЗаполнено(ДанныеНаПечать.СсылкаНаОбъектПродолжительностьДополнительныхОтпусков) Тогда
				ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектПродолжительностьВсего", ДанныеНаПечать.СсылкаНаОбъектПродолжительностьОсновногоОтпуска + ДанныеНаПечать.СсылкаНаОбъектПродолжительностьДополнительныхОтпусков);
			Иначе
				ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектПродолжительностьВсего", ДанныеНаПечать.СсылкаНаОбъектПродолжительностьОсновногоОтпуска);
			КонецЕсли;
			
			Если ДанныеНаПечать.Строки.Количество() > 1 Тогда
				
				ДокументРезультатПриложений = Новый ТабличныйДокумент;
				
				ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
					ДокументРезультатПриложений, МакетПечатнойФормы, "ПриложениеШапка",
					ДанныеНаПечать,
					ДанныеВычисляемыеНаХоду);
				
				НаименованияОтпусковНаПечать = Новый Массив;
				
				ДанныеДополнительныхОтпусков = Новый Структура;
				ДанныеДополнительныхОтпусков.Вставить("СсылкаНаОбъектДанныеОтпусковВидОтпускаНаименованиеОтпускаНаПечать", "");
				ДанныеДополнительныхОтпусков.Вставить("СсылкаНаОбъектДанныеОтпусковПродолжительность", 0);
				ДанныеДополнительныхОтпусков.Вставить("СсылкаНаОбъектДанныеОтпусковДатаНачала", '00010101');
				ДанныеДополнительныхОтпусков.Вставить("СсылкаНаОбъектДанныеОтпусковДатаНачалаНаПечать");
				ДанныеДополнительныхОтпусков.Вставить("СсылкаНаОбъектДанныеОтпусковДатаОкончания", '00010101');
				ДанныеДополнительныхОтпусков.Вставить("СсылкаНаОбъектДанныеОтпусковДатаОкончанияНаПечать");
				
				Для ИндексСтроки = 0 По ДанныеНаПечать.Строки.Количество() - 1 Цикл
					
					ДанныеВычисляемыеНаХоду.Вставить("СсылкаНаОбъектДанныеОтпусковНомерПоПорядку", ИндексСтроки + 1);
					
					ДанныеСтроки = ДанныеНаПечать.Строки[ИндексСтроки];
					Если ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковВидОтпускаОтпускЯвляетсяЕжегодным = Истина Тогда
						ИменаОбластей = "ПриложениеСтрокаОтпуск,ПриложениеСтрокаПериод,ПриложениеСтрокаОснование";
					Иначе
						ИменаОбластей = "ПриложениеСтрокаОтпуск,ПриложениеСтрокаОснование";
					КонецЕсли;
					
					ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
						ДокументРезультатПриложений, МакетПечатнойФормы, ИменаОбластей,
						ДанныеНаПечать,
						ДанныеНаПечать.Строки[ИндексСтроки],
						ДанныеВычисляемыеНаХоду);
					
					НаименованияОтпусковНаПечать.Добавить(ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковВидОтпускаНаименованиеОтпускаНаПечать);
					
					Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковПродолжительность) Тогда
						
						ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковПродолжительность = ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковПродолжительность
							+ ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковПродолжительность;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаНачала) Тогда
						
						Если Не ЗначениеЗаполнено(ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковДатаНачала)
							Или ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковДатаНачала > ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаНачала Тогда
							
							ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковДатаНачала = ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаНачала;
							ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковДатаНачалаНаПечать = ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаНачалаНаПечать;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаОкончания) Тогда
						
						Если ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковДатаОкончания < ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаОкончания Тогда
							
							ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковДатаОкончания = ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаОкончания;
							ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковДатаОкончанияНаПечать = ДанныеСтроки.СсылкаНаОбъектДанныеОтпусковДатаОкончанияНаПечать;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ДанныеДополнительныхОтпусков.СсылкаНаОбъектДанныеОтпусковВидОтпускаНаименованиеОтпускаНаПечать =
					СтрСоединить(НаименованияОтпусковНаПечать, ", ");
				
				ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеНаПечать);
				
				ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
					ДокументРезультат, МакетПечатнойФормы, "Шапка,Работник,Подвал",
					ДанныеНаПечать,
					ДанныеПользовательскихПолей,
					ДанныеДополнительныхОтпусков,
					ДанныеВычисляемыеНаХоду);
				
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				
				ДокументРезультат.Вывести(ДокументРезультатПриложений);
				
			Иначе
				
				ДанныеПользовательскихПолей = ЗарплатаКадрыОтчеты.ЗначенияЗаполненияПользовательскихПолей(ИдентификаторыМакета, ДанныеНаПечать);
				
				ЗарплатаКадрыОтчеты.ВывестиВДокументРезультатОбластиМакета(
					ДокументРезультат, МакетПечатнойФормы, "Шапка,Работник,Подвал",
					ДанныеНаПечать,
					ДанныеПользовательскихПолей,
					ДанныеНаПечать.Строки[0],
					ДанныеВычисляемыеНаХоду);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбъектыПечати <> Неопределено Тогда
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, ПерваяСтрокаПечатнойФормы, ОбъектыПечати, ДанныеНаПечать.СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

Процедура ОписатьДокумент(СсылкаНаЭлемент = Неопределено, Наименование = "", КодМВД = "", КодПФР = "")

	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Если Наименование = "" Тогда
			Возврат
		КонецЕсли;
		СсылкаНаЭлемент = Справочники.ВидыДокументовФизическихЛиц.НайтиПоНаименованию(Наименование);
	КонецЕсли;

	Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		ДанныеИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "КодМВД, КодПФР");
		Если ДанныеИБ.КодМВД = КодМВД И ДанныеИБ.КодПФР = КодПФР Тогда
			Возврат
		КонецЕсли;
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();
	Иначе
		Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
	КонецЕсли;

	Если ЗначениеЗаполнено(Наименование) Тогда
		Элемент.Наименование = Наименование;
	КонецЕсли;
	Элемент.КодМВД = КодМВД;
	Элемент.КодПФР = КодПФР;
	
	Элемент.ОбменДанными.Загрузка = Истина;
	Элемент.Записать();

КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "КадровыйУчет.ОбновитьВидыКонтактнойИнформацииФизическогоЛица";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольнения) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.ОснованияУвольнения.НачальноеЗаполнение";
		Обработчик.НачальноеЗаполнение = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "СотрудникиФормы.ОбновитьРежимыРаботыФормы";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.6.22";
	Обработчик.Процедура = "РегистрыСведений.ВидыЗанятостиСотрудников.ЗаполнитьВидЗанятостиПустыхИнтерваловИнтервальногоРегистра";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4f0ca42c-e239-4a04-8568-b8741b7087c2");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("11ecc1bf-7823-4369-b241-acb0ed47f28e");
	Обработчик.Процедура = "Документы.КадровыйПеревод.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Кадровый перевод"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b8f6785c-cd7a-4e03-8c9c-571226403056");
	Обработчик.Процедура = "Документы.ПриемНаРаботу.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Прием на работу"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3d86441b-363b-499e-96f2-b0077a73441b");
	Обработчик.Процедура = "Документы.Увольнение.ЗаполнитьДатыЗапрета";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет даты запрета редактирования документов ""Увольнение"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.11.30";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7859c70c-db23-48f4-a0bf-6495edfc02e5");
	Обработчик.Процедура = "РегистрыСведений.ФИОФизическихЛиц.ЗаполнитьФИОСлужебные";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебные данные регистра сведений ""Фамилия, имя, отчество физического лица"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.12";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dcba9522-9556-4024-9d1d-fa1de9f01dfc");
	Обработчик.Процедура = "Справочники.ФизическиеЛица.ЗаполнитьИнициалы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет инициалы в справочнике ""Физические лица"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.12";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("7a033b5e-ee21-4828-b248-b25d3abe88dc");
	Обработчик.Процедура = "РегистрыСведений.ФИОФизическихЛиц.ЗаполнитьИнициалы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет инициалы в регистре сведений ""Фамилия, имя, отчество физического лица"".'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.13.214";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e75458e3-d08e-4688-a33d-80c9b267efd9");
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьГоловныхСотрудниковВКадровойИстории";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет не верно сформированные движения регистра сведений ""Кадровая история сотрудников"".'");
	
	Если ЗарплатаКадры.АвтономнаяРаботаРазрешеноИзменениеДанных(Метаданные.Справочники.ОснованияУвольнения) Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "3.1.14.265";
		Обработчик.Процедура = "Справочники.ОснованияУвольнения.ЗагрузитьКлассификатор";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "КадровыйУчет.ОбновитьВидыКонтактнойИнформацииФизическогоЛица";
	Обработчик.Версия = "3.1.14.297";
	
	ЭлектронныеТрудовыеКнижки.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
КонецПроцедуры

// Процедура заполняет справочник ДокументыФизическихЛиц по классификатору МВД.
//
Процедура ЗаполнитьДокументыФизическихЛицПоКлассификаторуМВД() Экспорт
	
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР,			"", 						"01", НСтр("ru='ПАСПОРТ'"));		// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР,		"", 						"02", НСтр("ru='ЗГПАСПОРТ'"));		// 99 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении,	"", 						"03", НСтр("ru='СВИД О РОЖД'"));	// R-ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера,	"", 						"04", НСтр("ru='УДОСТ ОФИЦЕРА'"));	// ББ 9999990
	ОписатьДокумент(, НСтр("ru='Справка об освобождении'"),														"05", НСтр("ru='СПРАВКА ОБ ОСВ'"));	// -
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота, 	"",							"06", НСтр("ru='ПАСПОРТ МОРФЛТ'"));	// ББ 999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет,
		НСтр("ru='Военный билет солдата (матроса, сержанта, старшины)'"), 										"07", НСтр("ru='ВОЕННЫЙ БИЛЕТ'"));	// ББ 0999999
	// -
	ОписатьДокумент(, НСтр("ru='Временное удостоверение, выданное взамен военного билета'"),					"08", НСтр("ru='ПРОЧЕЕ'"));
	// 99 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт, "",							"09", НСтр("ru='ДИППАСПОРТ РФ'"));
	ОписатьДокумент(, НСтр("ru='Иностранный паспорт'"),															"10", НСтр("ru='ИНПАСПОРТ'"));		// -
	// -
	ОписатьДокумент(, НСтр("ru='Свидетельство о регистрации ходатайства иммигранта о признании его беженцем'"), "11", НСтр("ru='СВИД БЕЖЕНЦА'"));
	ОписатьДокумент(, НСтр("ru='Вид на жительство'"),															"12", НСтр("ru='ВИД НА ЖИТЕЛЬ'"));	// -
	ОписатьДокумент(, НСтр("ru='Удостоверение беженца'"),														"13", НСтр("ru='УДОСТ БЕЖЕНЦА'"));	// -
	// -
	ОписатьДокумент(, НСтр("ru='Временное удостоверение личности гражданина РФ'"),								"14", НСтр("ru='ВРЕМ УДОСТ'"));
	// -
	ОписатьДокумент(, НСтр("ru='Разрешение на временное проживание в Российской Федерации'"),					"15", НСтр("ru='ПРОЧЕЕ'"));
	ОписатьДокумент(,
		// ББ-999 9999999
		НСтр("ru='Свидетельство о предоставлении временного убежища на территории Российской Федерации'"), 		"18", НСтр("ru='ПРОЧЕЕ'"));
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,				"",							"21", НСтр("ru='ПАСПОРТ РОССИИ'"));	// 99 99 9999990
	// 99 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ,		"",							"22", НСтр("ru='ЗГПАСПОРТ РФ'"));
	ОписатьДокумент(, 
		// -
		НСтр("ru='Свидетельство о рождении, выданное уполномоченным органом иностранного государства'"), 		"23", НСтр("ru='ПРОЧЕЕ'"));
	ОписатьДокумент(, НСтр("ru='Удостоверение личности военнослужащего Российской Федерации'"),					"24", НСтр("ru='ПРОЧЕЕ'"));			// ББ 9999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка,			"",							"26", НСтр("ru='ПАСПОРТ МОРЯКА'"));	// ББ 0999999
	ОписатьДокумент(Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса, "",						"27", НСтр("ru='БИЛЕТ ОЗ'"));		// ББ 0999999
	ОписатьДокумент(, НСтр("ru='Иные документы, выдаваемые органами МВД'"),										"91", НСтр("ru='ПРОЧЕЕ'"));			// -
	
КонецПроцедуры

// Процедура производит первоначальное заполнение ФИО физических лиц
// ФИО берется из поля наименование.
Процедура ОбновитьВидыКонтактнойИнформацииФизическогоЛица() Экспорт
	
	ОбновитьВидыКонтактнойИнформацииПоПорядку(1);
	ОбновитьПорядкиКонтактнойИнформации();
	
КонецПроцедуры

Процедура ОбновитьСобытияУвольнений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	ДОБАВИТЬКДАТЕ(Увольнение.ДатаУвольнения, ДЕНЬ, 1) КАК Период
		|ПОМЕСТИТЬ ВТРегистраторы
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
		|		ПО КадроваяИсторияСотрудников.Регистратор = Увольнение.Ссылка
		|			И (КадроваяИсторияСотрудников.Период = ЕСТЬNULL(Увольнение.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)))
		|			И (КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТРегистраторы.Регистратор
		|ИЗ
		|	ВТРегистраторы КАК ВТРегистраторы";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КадровыйУчетВнутренний.ОбновитьСобытияУвольнений(Запрос.МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПорядкиКонтактнойИнформации()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВидыКонтактнойИнформации.Ссылка) КАК Количество,
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ВТКоличествоВидовОдногоПорядка
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТКоличествоВидовОдногоПорядка.РеквизитДопУпорядочивания) КАК РеквизитДопУпорядочивания
		|ПОМЕСТИТЬ ВТМинимальныНарушенныйПорядок
		|ИЗ
		|	ВТКоличествоВидовОдногоПорядка КАК ВТКоличествоВидовОдногоПорядка
		|ГДЕ
		|	ВТКоличествоВидовОдногоПорядка.Количество > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка,
		|	ВТМинимальныНарушенныйПорядок.РеквизитДопУпорядочивания
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимальныНарушенныйПорядок КАК ВТМинимальныНарушенныйПорядок
		|		ПО ВидыКонтактнойИнформации.РеквизитДопУпорядочивания >= ВТМинимальныНарушенныйПорядок.РеквизитДопУпорядочивания
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания,
		|	ВидыКонтактнойИнформации.Наименование";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Счетчик = 0;
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.РеквизитДопУпорядочивания = Выборка.РеквизитДопУпорядочивания + Счетчик;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформацииПоПорядку(Порядок = Неопределено)
	
	// ТелефонМобильныйФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Мобильный телефон'");
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 1;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// EMailФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Email'");
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 1;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// ТелефонДомашнийФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Домашний телефон'");
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 2;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// ТелефонРабочийФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Рабочий телефон'");
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.РазрешитьВводНесколькихЗначений = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 3;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресПоПропискеФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Адрес по прописке'");
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Ложь;
	СвойстваВидаКИ.ВидРедактирования = "Диалог";
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 4;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресМестаПроживанияФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Адрес места проживания'");
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Ложь;
	СвойстваВидаКИ.ВидРедактирования = "Диалог";
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ТолькоНациональныйАдрес = Истина;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 5;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресЗаПределамиРФФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Адрес за пределами РФ'");
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Истина;
	СвойстваВидаКИ.ВидРедактирования = "Диалог";
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ТолькоНациональныйАдрес = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 6;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	// АдресДляИнформированияФизическиеЛица
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
	СвойстваВидаКИ.Наименование = НСтр("ru = 'Адрес для информирования'");
	СвойстваВидаКИ.МожноИзменятьСпособРедактирования = Ложь;
	СвойстваВидаКИ.ВидРедактирования = "Диалог";
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ТолькоНациональныйАдрес = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.СкрыватьНеактуальныеАдреса = Ложь;
	СвойстваВидаКИ.НастройкиПроверки.ВключатьСтрануВПредставление = Истина;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 7;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
КонецПроцедуры

#КонецОбласти


#Область Свойства

// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств.
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4c9-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Должности);
	УправлениеСвойствамиБЗК.ЗарегистрироватьНаборСвойств(Наборы, "c091b4e6-9802-11e9-80cd-4cedfb43b11a", Метаданные.Справочники.Сотрудники);
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольВеденияУчета

// См. КонтрольВеденияУчетаПереопределяемый.ПриОпределенииПроверок.
Процедура ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки) Экспорт
	
	КадровыйУчетВнутренний.ОпределитьПроверкиВеденияУчета(ГруппыПроверок, Проверки);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Справочники.Сотрудники, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.КадровыеДокументы, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВидыЗанятостиСотрудниковИнтервальный, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ГражданствоФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудниковИнтервальный, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ТекущиеКадровыеДанныеСотрудников, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ФИОФизическихЛиц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера, Истина);
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Списки.Вставить(Метаданные.Документы["ОтзывСогласияНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.Документы["СогласиеНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СогласияНаОбработкуПерсональныхДанных"], Ложь);
		Списки.Вставить(Метаданные.РегистрыСведений["СубъектыДляСкрытияПерсональныхДанных"], Ложь);
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	//   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	//   ЧтениеДанныхФизическихЛицЗарплатаКадры
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Если Список = Метаданные.Документы["ОтзывСогласияНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.Документы["СогласиеНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СогласияНаОбработкуПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Организация)
			|	И ЗначениеРазрешено(Субъект)";
		ИначеЕсли Список = Метаданные.РегистрыСведений["СубъектыДляСкрытияПерсональныхДанных"] Тогда
			Ограничение.Текст =
			"РазрешитьЧтениеИзменение
			|ГДЕ
			|	ЗначениеРазрешено(Субъект)";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область НастройкиКадровогоУчета

Процедура ПриЗаписиНастроекКадровогоУчета(НаборЗаписей, Отказ) Экспорт
	
	КадровыйУчетВнутренний.ПриЗаписиНастроекКадровогоУчета(НаборЗаписей, Отказ)
	
КонецПроцедуры

#КонецОбласти


Функция ПоляПредставленийКадровыхДанныхФизическихЛиц(Знач ПутьКПолямЛичныхДанных = "ЛичныеДанные") Экспорт
	
	ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
	ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных);
	
	Возврат ДополнительныеПоляПредставлений;
	
КонецФункции

Функция ПоляПредставленийКадровыхДанныхСотрудников(Знач ПутьКПолямСотрудника = "Работа", Знач ПутьКПолямЛичныхДанных = "ЛичныеДанные") Экспорт
	
	ДополнительныеПоляПредставлений = ЗарплатаКадрыОбщиеНаборыДанных.ПустаяТаблицаДополнительныхПолейПредставлений();
	ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ПутьКПолямЛичныхДанных);
	
	Возврат ДополнительныеПоляПредставлений;
	
КонецФункции

Процедура ОбновитьДанныеДляПодбораДоговорниковГПХ(ОбновляемыеСотрудники) Экспорт

	КадровыйУчетВнутренний.ОбновитьДанныеДляПодбораДоговорниковГПХ(ОбновляемыеСотрудники);

КонецПроцедуры

Функция КадровыеДанныеСотрудниковПоТаблицеЗначений(ТолькоРазрешенные, ТаблицаСотрудников, КадровыеДанные) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников", ТаблицаСотрудников);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ТаблицаСотрудников.Период КАК Период
		|ПОМЕСТИТЬ ВТТаблицаСотрудников
		|ИЗ
		|	&ТаблицаСотрудников КАК ТаблицаСотрудников";
	
	Запрос.Выполнить();
	
	ОписательВременнойТаблицыОтборов = ОписаниеВременнойТаблицыОтборовСотрудников(
		"ВТТаблицаСотрудников",
		"Сотрудник",
		"Период");
		
	ЗапросКадровыхДанных = ЗапросВТКадровыеДанныеСотрудников(
		ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, КадровыеДанные, , , , "");
	
	ЗапросКадровыхДанных.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	Возврат ЗапросКадровыхДанных.Выполнить().Выгрузить();
	
КонецФункции

// Формирует таблицу всех разрешенных сотрудников по физическим лицам.
// 
// Параметры:
// 	ФизическиеЛица - Массив - физические лица, для которых необходимо получить сотрудников.
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица с колонками
//		* Сотрудник - СправочникСсылка.Сотрудники
//		* ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//
Функция СотрудникиФизическихЛиц(ФизическиеЛица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Ссылка КАК Сотрудник,
		|	ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники
		|ГДЕ
		|	ФизическоеЛицо В (&ФизическиеЛица)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьКлассификаторОснованийУвольнения(ИмяСправочника, Макет, НормативныйДокумент = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОснованияУвольнения.Ссылка КАК Ссылка,
		|	ОснованияУвольнения.Наименование КАК Наименование,
		|	ОснованияУвольнения.ТекстОснования КАК ТекстОснования,
		|	ОснованияУвольнения.Статья КАК Статья,
		|	ОснованияУвольнения.Часть КАК Часть,
		|	ОснованияУвольнения.Пункт КАК Пункт,
		|	ОснованияУвольнения.Подпункт КАК Подпункт,
		|	ОснованияУвольнения.ДокументОснование КАК ДокументОснование,
		|	ОснованияУвольнения.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ОснованияУвольнения КАК ОснованияУвольнения
		|ГДЕ
		|	НЕ ОснованияУвольнения.ПометкаУдаления";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ОснованияУвольнения", "Справочник." + ИмяСправочника);
	
	ДанныеКлассификатора = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаДанных Из ДанныеКлассификатора Цикл
		СтрокаДанных.Наименование = ВРег(СтрокаДанных.Наименование);
	КонецЦикла;
	
	ДанныеМакетаКлассификатора = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	ИспользоватьПредопределенныеЭлементы =
		(ДанныеМакетаКлассификатора.Колонки.Найти("ID") <> Неопределено);
	
	Для Каждого СтрокаМакета Из ДанныеМакетаКлассификатора Цикл
		
		ДокументОснование = Перечисления.НормативныеДокументыОснованийКадровыхПриказов[СтрокаМакета.Document];
		
		Если ЗначениеЗаполнено(НормативныйДокумент)
			И ДокументОснование <> НормативныйДокумент Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаКлассификатора = ДанныеКлассификатора.Найти(ВРег(СтрокаМакета.Title), "Наименование");
		Если ИспользоватьПредопределенныеЭлементы И ЗначениеЗаполнено(СтрокаМакета.ID) Тогда
			
			Попытка
				
				СсылкаСправочника = ПредопределенноеЗначение("Справочник." + ИмяСправочника + "." + СтрокаМакета.ID);
				Если СтрокаКлассификатора = Неопределено Тогда
					ОбъектСправочника = СсылкаСправочника.ПолучитьОбъект();
				Иначе
					
					ОбъектСправочника = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
					Если СтрокаКлассификатора.Ссылка <> СсылкаСправочника Тогда
						
						ОбъектПредопределенного = СсылкаСправочника.ПолучитьОбъект();
						ОбъектПредопределенного.ИмяПредопределенныхДанных = "";
						ОбъектПредопределенного.ПометкаУдаления = Истина;
						ОбъектПредопределенного.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
						ОбъектПредопределенного.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПредопределенного);
						
						ОбъектСправочника.ИмяПредопределенныхДанных = СтрокаМакета.ID;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Исключение
				
				Если СтрокаКлассификатора = Неопределено Тогда
					ОбъектСправочника = Справочники[ИмяСправочника].СоздатьЭлемент();
				Иначе
					ОбъектСправочника = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
				КонецЕсли;
				
				ОбъектСправочника.ИмяПредопределенныхДанных = СтрокаМакета.ID;
				
			КонецПопытки;
			
		Иначе
			
			Если СтрокаКлассификатора = Неопределено Тогда
				ОбъектСправочника = Справочники[ИмяСправочника].СоздатьЭлемент();
			Иначе
				ОбъектСправочника = СтрокаКлассификатора.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектСправочника.Наименование = СтрокаМакета.Title;
		ОбъектСправочника.ТекстОснования = СтрокаМакета.Reason;
		ОбъектСправочника.Статья = СтрокаМакета.Article;
		ОбъектСправочника.Часть = СтрокаМакета.Part;
		ОбъектСправочника.Пункт = СтрокаМакета.Paragraph;
		ОбъектСправочника.Подпункт = СтрокаМакета.Subparagraph;
		ОбъектСправочника.ДокументОснование = ДокументОснование;
		ОбъектСправочника.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
		ОбъектСправочника.ДополнительныеСвойства.Вставить("ПроверятьБизнесЛогикуПриЗаписи");
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСправочника);
		
	КонецЦикла;
	
КонецПроцедуры

// См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	КадровыйУчетВнутренний.ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты);
	
КонецПроцедуры

// Возвращает соответсвие с ключи которого физические лица и значения соответсвующие им основные сотрудники
// в пределах всей информационной базы.
//
// Параметры:
//		ТолькоРазрешенные	- Булево
//		ФизическиеЛица		- Массив, ссылки на элементы справочника ФизическиеЛица
//		ДатаСведений		- Дата, на которую получаются сведения
//
// Возвращаемое значение:
//		Соответствие
//
Функция ОсновныеСотрудникиИнформационнойБазы(ТолькоРазрешенные, ФизическиеЛица, ДатаСведений) Экспорт
	
	СотрудникиИнформационнойБазы = Новый Соответствие;
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные,
		СписокФизическихЛиц, Неопределено, ДатаСведений, ДатаСведений);
	
	Описатель = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц, "ВТОсновныеСотрудникиФизическихЛиц");
	
	СоздатьВТКадровыеДанныеСотрудников(Описатель, ТолькоРазрешенные, "ВидЗанятости,ДатаПриема,ДатаУвольнения");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОсновныеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	ВЫБОР
		|		КОГДА КадровыеДанныеСотрудников.ВидЗанятости ЕСТЬ NULL
		|			ТОГДА 99999999999999999
		|		ИНАЧЕ РАЗНОСТЬДАТ(ВЫБОР
		|					КОГДА КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(2100, 1, 1)
		|					ИНАЧЕ КадровыеДанныеСотрудников.ДатаУвольнения
		|				КОНЕЦ, ДАТАВРЕМЯ(2100, 1, 1), ДЕНЬ) * 1000000000 + КадровыеДанныеСотрудников.ВидЗанятости.Порядок * 1000000 + РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1900, 1, 1), ВЫБОР
		|					КОГДА КадровыеДанныеСотрудников.ДатаПриема = ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДАТАВРЕМЯ(1900, 1, 1)
		|					ИНАЧЕ КадровыеДанныеСотрудников.ДатаПриема
		|				КОНЕЦ, ДЕНЬ)
		|	КОНЕЦ КАК ПриоритетСотрудника
		|ПОМЕСТИТЬ ВТСотрудникиСПриоритетами
		|ИЗ
		|	ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ОсновныеСотрудникиФизическихЛиц.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ОсновныеСотрудникиФизическихЛиц.Период = КадровыеДанныеСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСПриоритетами.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(СотрудникиСПриоритетами.ПриоритетСотрудника) КАК ПриоритетСотрудника
		|ПОМЕСТИТЬ ВТПриоритетыСотрудников
		|ИЗ
		|	ВТСотрудникиСПриоритетами КАК СотрудникиСПриоритетами
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиСПриоритетами.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиСПриоритетами.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МИНИМУМ(СотрудникиСПриоритетами.Сотрудник) КАК Сотрудник
		|ИЗ
		|	ВТСотрудникиСПриоритетами КАК СотрудникиСПриоритетами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриоритетыСотрудников КАК ПриоритетыСотрудников
		|		ПО СотрудникиСПриоритетами.ФизическоеЛицо = ПриоритетыСотрудников.ФизическоеЛицо
		|			И СотрудникиСПриоритетами.ПриоритетСотрудника = ПриоритетыСотрудников.ПриоритетСотрудника
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиСПриоритетами.ФизическоеЛицо";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СотрудникиИнформационнойБазы.Вставить(Выборка.ФизическоеЛицо, Выборка.Сотрудник);
	КонецЦикла;
	
	Возврат СотрудникиИнформационнойБазы;
	
КонецФункции

Процедура УстановитьОграничениеТиповПолюВводаОснованияУвольнения(УправляемаяФорма, ИмяПоля, ОграничениеТипа, ТипВыбранногоЗначения) Экспорт
	
	ЭлементОснованиеУвольнения = УправляемаяФорма.Элементы.Найти(ИмяПоля);
	Если ЭлементОснованиеУвольнения <> Неопределено Тогда
		
		Если ТипВыбранногоЗначения <> Тип("Неопределено") Тогда
			ЭлементОснованиеУвольнения.ОграничениеТипа = Новый ОписаниеТипов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипВыбранногоЗначения));
		Иначе
			ЭлементОснованиеУвольнения.ОграничениеТипа = ОграничениеТипа;
		КонецЕсли;
		
		ПараметрыВыбораЭлемента = Новый Массив(ЭлементОснованиеУвольнения.ПараметрыВыбора);
		Для Каждого ПараметрВыбора Из ПараметрыВыбораЭлемента Цикл
			Если ПараметрВыбора.Имя = "ТипОснования" Тогда
				ПараметрыВыбораЭлемента.Удалить(ПараметрыВыбораЭлемента.Найти(ПараметрВыбора));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("ТипОснования", ОграничениеТипа));
		ЭлементОснованиеУвольнения.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОснованияУвольненияОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		Если ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ОбщаяФорма.ФормаВыбораОснованияУвольнения";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбораОснованийУвольнения(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%" + Параметры.СтрокаПоиска + "%");
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 50
		|	Источник.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Представления.Использовать
		|			ТОГДА Представления.Наименование
		|		ИНАЧЕ Источник.Наименование
		|	КОНЕЦ КАК Наименование
		|ПОМЕСТИТЬ ВТВсеОснования
		|ИЗ
		|	#Источник КАК Источник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредставленияОснованийУвольнения КАК Представления
		|		ПО Источник.Ссылка = Представления.Объект
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Представления.Использовать
		|				ТОГДА Представления.Наименование
		|			ИНАЧЕ Источник.Наименование
		|		КОНЕЦ ПОДОБНО &СтрокаПоиска
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	ОснованияУвольненияПользовательские.Ссылка,
		|	ОснованияУвольненияПользовательские.Наименование
		|ИЗ
		|	Справочник.ОснованияУвольненияПользовательские КАК ОснованияУвольненияПользовательские
		|ГДЕ
		|	ОснованияУвольненияПользовательские.Наименование ПОДОБНО &СтрокаПоиска
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 50
		|	ВсеОснования.Ссылка КАК Ссылка,
		|	ВсеОснования.Наименование КАК Наименование
		|ИЗ
		|	ВТВсеОснования КАК ВсеОснования
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
	
	ТаблицаОснования = "Справочник.ОснованияУвольнения";
	Если Параметры.Свойство("ТипОснования")
		И ТипЗнч(Параметры.ТипОснования) = Тип("ОписаниеТипов")
		И Параметры.ТипОснования.Типы().Количество() > 0 Тогда
		
		ТипКлассификатора = Параметры.ТипОснования.Типы()[0];
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипКлассификатора);
		ТаблицаОснования = МетаданныеОбъекта.ПолноеИмя();
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Источник", ТаблицаОснования);
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ТаблицаАнализаИзменений() Экспорт
	
	ТаблицаАнализаИзменений = Новый ТаблицаЗначений;
	ТаблицаАнализаИзменений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаАнализаИзменений.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаАнализаИзменений.Колонки.Добавить("ФлагИзменений", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаАнализаИзменений;
	
КонецФункции

Функция ОбработатьИзменениеОрганизацийВНаборе(ИзмененияВНаборе) Экспорт
	
	ТаблицаАнализаИзменений = ТаблицаАнализаИзменений();
	
	Для Каждого ОписаниеИзменившихсяДанных Из ИзмененияВНаборе Цикл
		
		Если ОписаниеИзменившихсяДанных.ИзменилсяРесурсОрганизация Или ОписаниеИзменившихсяДанных.Добавление Или ОписаниеИзменившихсяДанных.Удаление Тогда
			
			Если ЗначениеЗаполнено(ОписаниеИзменившихсяДанных.СтароеЗначениеОрганизация) Тогда
				СтрокаАнализаИзменений = ТаблицаАнализаИзменений.Добавить();
				СтрокаАнализаИзменений.Организация = ОписаниеИзменившихсяДанных.СтароеЗначениеОрганизация;
				СтрокаАнализаИзменений.Сотрудник = ОписаниеИзменившихсяДанных.Сотрудник;
				СтрокаАнализаИзменений.ФлагИзменений = -1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОписаниеИзменившихсяДанных.НовоеЗначениеОрганизация) Тогда
				СтрокаАнализаИзменений = ТаблицаАнализаИзменений.Добавить();
				СтрокаАнализаИзменений.Организация = ОписаниеИзменившихсяДанных.НовоеЗначениеОрганизация;
				СтрокаАнализаИзменений.Сотрудник = ОписаниеИзменившихсяДанных.Сотрудник;
				СтрокаАнализаИзменений.ФлагИзменений = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьИзменениеОрганизацийВНабореПоТаблицеИзменений(ТаблицаАнализаИзменений)
	
КонецФункции

Процедура ОбработатьИзменениеОрганизацийВНабореПоТаблицеИзменений(ТаблицаАнализаИзменений) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	КадровыйУчетВнутренний.ОбработатьИзменениеОрганизацийВНабореПоТаблицеИзменений(ТаблицаАнализаИзменений);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(СтруктураПараметров)
	
	ИменаТаблицСКадровойИсториейСотрудников = Новый Структура;
	ИменаТаблицСКадровойИсториейСотрудников.Вставить("ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра", "");
	ИменаТаблицСКадровойИсториейСотрудников.Вставить("ИмяВТКадроваяИсторияСотрудниковСрезПоследних", "");
	
	СтруктураПараметров.Вставить("ИменаТаблицСКадровойИсториейСотрудников", ИменаТаблицСКадровойИсториейСотрудников);
	
КонецПроцедуры

Функция ТекстОписанияПолейКадровыхДанных(ТекстыОписанияПолей) Экспорт
	
	Если ТекстыОписанияПолей.Количество() = 0 Тогда
		ТекстОписанияПолей = "";
	ИначеЕсли ТекстыОписанияПолей.Количество() = 1 Тогда
		ТекстОписанияПолей = ТекстыОписанияПолей[0];
	Иначе
		ТекстОписанияПолей = СтрСоединить(ТекстыОписанияПолей, "," + Символы.ПС + Символы.Таб);
	КонецЕсли;
	
	Возврат ТекстОписанияПолей;
	
КонецФункции

Функция ДанныеСправокОСреднемЗаработкеДляПособияПоБезработице(МассивОбъектов) Экспорт
	
	ДанныеСправок = Новый Массив;
	
	ДатаСведений = ОбщегоНазначения.РабочаяДатаПользователя();
	Если Не ЗначениеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если Не ФОИспользоватьКадровыйУчет Тогда
		Сотрудники = ОбщегоНазначения.СкопироватьРекурсивно(МассивОбъектов);
	Иначе
		
		Если ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Сотрудники = ОбщегоНазначения.СкопироватьРекурсивно(МассивОбъектов);
			
			ИменаКадровыхДанных = "ПриказОбУвольнении";
			ПриказыОбУвольнении = КадровыеДанныеСотрудников(Истина, Сотрудники, ИменаКадровыхДанных, ДатаСведений).ВыгрузитьКолонку("ПриказОбУвольнении");
			
		Иначе
			ПриказыОбУвольнении = ОбщегоНазначения.СкопироватьРекурсивно(МассивОбъектов);
		КонецЕсли;
		
		СоздатьВТДанныеДокументовУвольнение(Запрос.МенеджерВременныхТаблиц, ПриказыОбУвольнении);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ДанныеДокументов.*
			|ИЗ
			|	ВТДанныеДокументов КАК ДанныеДокументов";
			
		ДанныеПриказов = Запрос.Выполнить().Выгрузить();
		
		Если ТипЗнч(МассивОбъектов[0]) <> Тип("СправочникСсылка.Сотрудники") Тогда
			Сотрудники = ДанныеПриказов.ВыгрузитьКолонку("Сотрудник");
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаКадровыхДанных = "ФИОПолные,Пол,ГоловнаяОрганизация,Организация,ДатаПриема,ДатаУвольнения,ПриказОбУвольнении,ПриказОбУвольненииДата,ВидЗанятости,EMailПредставление";
	КадровыеДанныеСотрудников = КадровыеДанныеСотрудников(Истина, Сотрудники, ИменаКадровыхДанных, ДатаСведений);
	
	Для Каждого ДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеСотрудника.ВидЗанятости) Тогда
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник %1 еще не оформлен на работу'"),
				ДанныеСотрудника.Сотрудник);
			
			ВызватьИсключение ТекстИсключения;
			
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) Тогда
			
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1 еще не оформлено увольнение'"),
				ДанныеСотрудника.Сотрудник);
			
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сбор сведений организаций
	Организации = КадровыеДанныеСотрудников.ВыгрузитьКолонку("Организация");
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
	
	СведенияОбОрганизациях = Новый ТаблицаЗначений;
	СведенияОбОрганизациях.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СведенияОбОрганизациях.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СведенияОбОрганизациях.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОКВЭД", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ОКВЭД2", Новый ОписаниеТипов("Строка"));
	СведенияОбОрганизациях.Колонки.Добавить("ТелефонОрганизации", Новый ОписаниеТипов("Строка"));
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Организации.Ссылка КАК Организация,
		|	&ДатаСведений КАК Период
		|ИЗ
		|	Справочник.Организации КАК Организации ГДЕ Организации.Ссылка В (&Организации)";
	
	РезультатЗапросаПоШапке = Запрос.Выполнить();
	Выборка = РезультатЗапросаПоШапке.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаСведенияОбОрганизациях = СведенияОбОрганизациях.Добавить();
		
		Сведения = Новый СписокЗначений;
		Сведения.Добавить("", "НаимЮЛПол");
		Сведения.Добавить("", "ИННЮЛ");
		Сведения.Добавить("", "ОКВЭД");
		Сведения.Добавить("", "ОКВЭД2");
		Сведения.Добавить("", "ТелОрганизации");
		
		УстановитьПривилегированныйРежим(Истина);
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		УстановитьПривилегированныйРежим(Ложь);
		
		НоваяСтрокаСведенияОбОрганизациях.Организация = Выборка.Организация;
		НоваяСтрокаСведенияОбОрганизациях.Период = Выборка.Период;
		НоваяСтрокаСведенияОбОрганизациях.НаименованиеПолное = ОргСведения.НаимЮЛПол;
		НоваяСтрокаСведенияОбОрганизациях.ИНН = ОргСведения.ИННЮЛ;
		НоваяСтрокаСведенияОбОрганизациях.ОКВЭД = ОргСведения.ОКВЭД;
		НоваяСтрокаСведенияОбОрганизациях.ОКВЭД2 = ОргСведения.ОКВЭД2;
		НоваяСтрокаСведенияОбОрганизациях.ТелефонОрганизации = ОргСведения.ТелОрганизации;
		
	КонецЦикла;
	
	// СборСведений о среднем заработке
	СведенияОСреднемЗаработке = КадровыйУчетВнутренний.СведенияОСреднемЗаработкеДляСправкиПоБезработице(КадровыеДанныеСотрудников);
	
	// СборСведений о графиках работы
	СведенияОГрафикахРаботы = КадровыйУчетВнутренний.СведенияОГрафикахРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников);
	
	// СборСведений о периодах не работы
	СведенияОПериодахНеРаботы = КадровыйУчетВнутренний.СведенияОПериодахНеРаботыДляСправкиПоБезработице(КадровыеДанныеСотрудников);
	
	Для Каждого КадровыеДанныеСотрудника Из КадровыеДанныеСотрудников Цикл
		
		ДанныеСправки = ПараметрыСправокОСреднемЗаработкеДляПособияПоБезработице();
		ДанныеСправки.Сотрудник = КадровыеДанныеСотрудника.Сотрудник;
		
		ДанныеСправки.EMail = КадровыеДанныеСотрудника.EMailПредставление;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			ДанныеСправки.ДатаСправки = КадровыеДанныеСотрудника.ПриказОбУвольненииДата;
		Иначе
			ДанныеСправки.ДатаСправки = КадровыеДанныеСотрудника.ДатаУвольнения;
		КонецЕсли;
		
		ФизическиеЛицаЗарплатаКадры.Просклонять(
			КадровыеДанныеСотрудника.ФИОПолные,
			3,
			ДанныеСправки.СотрудникФИОПолныеВДательномПадеже,
			КадровыеДанныеСотрудника.Пол,
			КадровыеДанныеСотрудника.ФизическоеЛицо);
		
		ДанныеСправки.НачалоПериодаРаботы = КадровыеДанныеСотрудника.ДатаПриема;
		ДанныеСправки.ОкончаниеПериодаРаботы = КадровыеДанныеСотрудника.ДатаУвольнения;
		
		ДанныеОрганизации = СведенияОбОрганизациях.НайтиСтроки(Новый Структура("Организация", КадровыеДанныеСотрудника.Организация));
		Если ДанныеОрганизации.Количество() > 0 Тогда
			
			СведенияОбОрганизации = ДанныеОрганизации[0];
			
			ДанныеСправки.ОрганизацияИНН = СведенияОбОрганизации.ИНН;
			
			Если ДанныеСправки.ДатаСправки < '20170101' И Не ПустаяСтрока(СведенияОбОрганизации.ОКВЭД) Тогда
				ДанныеСправки.ОрганизацияОКВЭД = СведенияОбОрганизации.ОКВЭД;
			Иначе
				ДанныеСправки.ОрганизацияОКВЭД = СведенияОбОрганизации.ОКВЭД2;
			КонецЕсли;
			
			ДанныеСправки.ОрганизацияНаименованиеПолное = СведенияОбОрганизации.НаименованиеПолное;
			ДанныеСправки.ОрганизацияТелефон = СведенияОбОрганизации.ТелефонОрганизации;
			
		КонецЕсли;
		
		СреднийЗаработок = СведенияОСреднемЗаработке.Получить(КадровыеДанныеСотрудника.Сотрудник);
		Если СреднийЗаработок <> Неопределено И СреднийЗаработок > 0 Тогда
			
			СреднийЗаработок = Окр(СреднийЗаработок, 2);
			
			ДанныеСправки.СреднийЗаработокРубли = Цел(СреднийЗаработок);
			ДанныеСправки.СреднийЗаработокКопейки = (СреднийЗаработок - ДанныеСправки.СреднийЗаработокРубли) * 100;
			
			ДанныеСправки.СреднийЗаработокПрописью = ЧислоПрописью(СреднийЗаработок, "Л = ru_RU", НСтр("ru='рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2'"));
			
		КонецЕсли;
		
		КалендарныхДней = 0;
		ПериодыРаботы = СведенияОГрафикахРаботы.Получить(КадровыеДанныеСотрудника.Сотрудник);
		Если ПериодыРаботы <> Неопределено Тогда
			
			ПоследняяУчтеннаяНеделя = Неопределено;
			Для Каждого ПериодРаботы Из ПериодыРаботы Цикл
				
				ЗаполнитьЗначенияСвойств(ДанныеСправки.ПериодыРаботы.Добавить(), ПериодРаботы);
				
				КалендарныхДнейПериода = (КонецДня(ПериодРаботы.ОкончаниеПериода) + 1 - НачалоДня(ПериодРаботы.НачалоПериода))
					/ ЗарплатаКадрыКлиентСервер.ДлительностьСутокВСекундах();
				
				КалендарныхДней = КалендарныхДней + КалендарныхДнейПериода;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеСправки.КалендарныхНедель = КалендарныхДней / 7;
		
		ПериодыНеРаботы = СведенияОПериодахНеРаботы.Получить(КадровыеДанныеСотрудника.Сотрудник);
		Если ПериодыНеРаботы <> Неопределено Тогда
			
			Для Каждого ПериодНеРаботы Из ПериодыНеРаботы Цикл
				
				ЗаполнитьЗначенияСвойств(ДанныеСправки.ПериодыНеРаботы.Добавить(), ПериодНеРаботы);
				
				Если Год(ПериодНеРаботы.НачалоПериода) = Год(ПериодНеРаботы.ОкончаниеПериода) Тогда
					НедельПериода = НеделяГода(ПериодНеРаботы.ОкончаниеПериода) - НеделяГода(ПериодНеРаботы.НачалоПериода) + 1;
				Иначе
					
					НедельПериодаПредварительно = (КонецДня(ПериодНеРаботы.ОкончаниеПериода) - ПериодНеРаботы.НачалоПериода + 1) / 60 / 60 / 24 / 7;
					НедельПериода = Цел(НедельПериодаПредварительно);
					Если НедельПериода < НедельПериодаПредварительно Тогда
						НедельПериода = НедельПериода + 1;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НачалоНедели(ПериодНеРаботы.НачалоПериода) < ПериодНеРаботы.НачалоПериода Тогда
					НедельПериода = НедельПериода - 1;
				КонецЕсли;
				
				Если КонецНедели(ПериодНеРаботы.ОкончаниеПериода) > КонецДня(ПериодНеРаботы.ОкончаниеПериода)
					И НеделяГода(ПериодНеРаботы.ОкончаниеПериода) > НеделяГода(ПериодНеРаботы.НачалоПериода) Тогда
					
					НедельПериода = НедельПериода - 1;
					
				КонецЕсли;
				
				ДанныеСправки.КалендарныхНедель = ДанныеСправки.КалендарныхНедель - НедельПериода;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Руководитель = Неопределено;
		ГлавныйБухгалтер = Неопределено;
		
		Если ФОИспользоватьКадровыйУчет Тогда
			
			СтрокиПриказа = ДанныеПриказов.НайтиСтроки(Новый Структура("Сотрудник", КадровыеДанныеСотрудника.Сотрудник));
			Если СтрокиПриказа.Количество() > 0 Тогда
				Руководитель = СтрокиПриказа[0].Руководитель;
				ГлавныйБухгалтер = СтрокиПриказа[0].ГлавныйБухгалтер;
			КонецЕсли;
			
		Иначе
			
			Подписанты = Новый Структура("Организация,Руководитель,ГлавныйБухгалтер", КадровыеДанныеСотрудника.ГоловнаяОрганизация);
			ЗарплатаКадры.ПолучитьЗначенияПоУмолчанию(Подписанты, КадровыеДанныеСотрудника.Период);
			
			Руководитель = Подписанты.Руководитель;
			ГлавныйБухгалтер = Подписанты.ГлавныйБухгалтер;
			
		КонецЕсли;
		
		СписокПодписантов = Новый Массив;
		Если ЗначениеЗаполнено(Руководитель) Тогда
			СписокПодписантов.Добавить(Руководитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ГлавныйБухгалтер) И Руководитель <> ГлавныйБухгалтер Тогда
			СписокПодписантов.Добавить(ГлавныйБухгалтер);
		КонецЕсли;
		
		Если СписокПодписантов.Количество() > 0 Тогда
			
			ДанныеПодписантов = КадровыеДанныеФизическихЛиц(Истина, СписокПодписантов, "ИОФамилия", КадровыеДанныеСотрудника.Период);
			
			Если ЗначениеЗаполнено(Руководитель) Тогда
				
				ДанныеПодписанта = ДанныеПодписантов.Найти(Руководитель, "ФизическоеЛицо");
				Если ДанныеПодписанта <> Неопределено Тогда
					
					ДанныеСправки.ИОФамилияРуководителя = ДанныеПодписанта.ИОФамилия;
					Если Руководитель = ГлавныйБухгалтер Тогда
						ДанныеСправки.ИОФамилияГлавногоБухгалтера = ДанныеПодписанта.ИОФамилия;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
				
			Если ЗначениеЗаполнено(ГлавныйБухгалтер) И Руководитель <> ГлавныйБухгалтер Тогда
				
				ДанныеПодписанта = ДанныеПодписантов.Найти(ГлавныйБухгалтер, "ФизическоеЛицо");
				Если ДанныеПодписанта <> Неопределено Тогда
					ДанныеСправки.ИОФамилияГлавногоБухгалтера = ДанныеПодписанта.ИОФамилия;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСправок.Добавить(ДанныеСправки);
		
	КонецЦикла;
	
	Возврат ДанныеСправок;
	
КонецФункции

Функция ПараметрыСправокОСреднемЗаработкеДляПособияПоБезработице()
	
	ПараметрыСправок = Новый Структура;
	
	ПараметрыСправок.Вставить("Сотрудник");
	ПараметрыСправок.Вставить("ДатаСправки", ОбщегоНазначения.РабочаяДатаПользователя());
	
	ПараметрыСправок.Вставить("ОрганизацияИНН");
	ПараметрыСправок.Вставить("ОрганизацияОКВЭД");
	ПараметрыСправок.Вставить("ОрганизацияНаименованиеПолное");
	ПараметрыСправок.Вставить("ОрганизацияТелефон");
	
	ПараметрыСправок.Вставить("СотрудникФИОПолныеВДательномПадеже");
	
	ПараметрыСправок.Вставить("НачалоПериодаРаботы");
	ПараметрыСправок.Вставить("ОкончаниеПериодаРаботы");
	
	ПараметрыСправок.Вставить("СреднийЗаработокРубли");
	ПараметрыСправок.Вставить("СреднийЗаработокКопейки");
	ПараметрыСправок.Вставить("СреднийЗаработокПрописью");
	
	ПараметрыСправок.Вставить("КалендарныхНедель", 0);
	
	ТаблицаПериодовРаботы = Новый ТаблицаЗначений;
	ТаблицаПериодовРаботы.Колонки.Добавить("Часов", Новый ОписаниеТипов("Число"));
	ТаблицаПериодовРаботы.Колонки.Добавить("Дней", Новый ОписаниеТипов("Число"));
	ТаблицаПериодовРаботы.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодовРаботы.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодовРаботы.Колонки.Добавить("ПериодРаботыСПолнымРабочимДнем", Новый ОписаниеТипов("Булево"));
	
	ПараметрыСправок.Вставить("ПериодыРаботы", ТаблицаПериодовРаботы);
	
	ТаблицаПериодовНеРаботы = Новый ТаблицаЗначений;
	ТаблицаПериодовНеРаботы.Колонки.Добавить("НачалоПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодовНеРаботы.Колонки.Добавить("ОкончаниеПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодовНеРаботы.Колонки.Добавить("ПричинаОтсутствия", Новый ОписаниеТипов("Строка"));
	
	ПараметрыСправок.Вставить("ПериодыНеРаботы", ТаблицаПериодовНеРаботы);
	
	ПараметрыСправок.Вставить("ИОФамилияРуководителя");
	ПараметрыСправок.Вставить("ИОФамилияГлавногоБухгалтера");
	
	ПараметрыСправок.Вставить("EMail");
	
	Возврат ПараметрыСправок;
	
КонецФункции

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, Знач ПутьКПолямЛичныхДанных = "ЛичныеДанные") Экспорт
	
	КадровыйУчетВнутренний.ЗаполнитьПоляПредставленийКадровыхДанныхФизическихЛиц(ДополнительныеПоляПредставлений, ПутьКПолямЛичныхДанных);
	
КонецПроцедуры

Процедура ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, Знач ПутьКПолямСотрудника = "Работа", Знач ПутьКПолямЛичныхДанных = "ЛичныеДанные")
	
	КадровыйУчетВнутренний.ЗаполнитьПоляПредставленийКадровыхДанныхСотрудников(ДополнительныеПоляПредставлений, ПутьКПолямСотрудника, ПутьКПолямЛичныхДанных);
	
КонецПроцедуры

Процедура ОписаниеГрафикаРаботыДляСправкиПоБезработице(ВходящиеДанные, ШаблонОписанияГрафика, СуммированныйУчетРабочегоВремени, ИсходящиеДанные) Экспорт
	
	КадровыйУчетВнутренний.ОписаниеГрафикаРаботыДляСправкиПоБезработице(ВходящиеДанные, ШаблонОписанияГрафика, СуммированныйУчетРабочегоВремени, ИсходящиеДанные);
	
КонецПроцедуры

#Область КадровыеДанныеФизическихЛиц

Процедура ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьВЗапросПоляКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ОписательВТОтборов, ИмяВТКадровыеДанныеФизическихЛиц);
	
КонецПроцедуры

Процедура ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьВЗапросСоединенияСИсточникамиКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВременнойТаблицыОтборов, ПоляОтбораПериодическихДанных, ИсточникиДанных, ИмяВТКадровыеДанныеФизическихЛиц);
	
КонецПроцедуры

Процедура ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьВЗапросПоляПостоянныхКадровыхДанныхФизическихЛиц(Запрос, КадровыеДанные, ИсточникиДанных, ИмяВТПостоянныеКадровыеДанныеФизическихЛиц);
	
КонецПроцедуры

Процедура ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных) Экспорт
	
	КадровыйУчетВнутренний.ДобавитьВЗапросСоединенияСИсточникамиПостоянныхКадровыхДанныхФизическихЛиц(Запрос, ТолькоРазрешенные, ОписательВТОтборов, ИсточникиДанных);
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.КонтрольВеденияУчета

Функция ИдентификаторГруппыПроверокВеденияКадровогоУчета() Экспорт
	
	Возврат "КонтрольВеденияКадровогоУчета";
	
КонецФункции

Функция ИдентификаторГруппыПроверокКонтрольОформленияКадровыхПриказов() Экспорт
	
	Возврат "КонтрольОформленияКадровыхПриказов";
	
КонецФункции

Функция ИдентификаторГруппыПроверокКонтрольЗаполненияЛичныхДанных() Экспорт
	
	Возврат "КонтрольЗаполненияЛичныхДанных";
	
КонецФункции

Функция ГруппаПроверокКонтрольВеденияКадровогоУчета(ГруппыПроверок) Экспорт
	
	Возврат ГруппыПроверок.Найти(ИдентификаторГруппыПроверокВеденияКадровогоУчета(), "Идентификатор");
	
КонецФункции

Функция ГруппаПроверокКонтрольЗаполненияЛичныхДанных(ГруппыПроверок) Экспорт
	
	Возврат ГруппыПроверок.Найти(ИдентификаторГруппыПроверокКонтрольЗаполненияЛичныхДанных(), "Идентификатор");
	
КонецФункции


// Конец СтандартныеПодсистемы.КонтрольВеденияУчета

Процедура УстановитьЗапросНабораДанныхПечатнойФормыСправкиОСреднемЗаработке(ОбъектОтчета) Экспорт
	
	КадровыйУчетВнутренний.УстановитьЗапросНабораДанныхПечатнойФормыСправкиОСреднемЗаработке(ОбъектОтчета);
	
КонецПроцедуры

Функция ДанныеГрафиковРаботыДляСправкиОСреднемЗаработке() Экспорт
	
	Возврат КадровыйУчетВнутренний.ДанныеГрафиковРаботыДляСправкиОСреднемЗаработке();
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизаций()
	
	ПараметрыПолучения = Новый Структура("Организация,Подразделение");
	
	ПараметрыПолучения.Вставить("КадровыеДанные", "");
	ПараметрыПолучения.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолучения.Вставить("НачалоПериода", '00010101');
	ПараметрыПолучения.Вставить("ОкончаниеПериода", '00010101');
	ПараметрыПолучения.Вставить("Отборы");
	ПараметрыПолучения.Вставить("ИсключаемыйРегистратор");
	ПараметрыПолучения.Вставить("ВключаяУволенныхНаНачалоПериода", Ложь);
	
	ПараметрыПолучения.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыПолучения.Вставить("ПодработкиРаботниковПоТрудовымДоговорам", Ложь);
	ПараметрыПолучения.Вставить("РаботникиПоДоговорамГПХ", Неопределено);
	
	ПараметрыПолучения.Вставить("ВыбрасыватьИсключениеДоступа", Истина);
	
	ДополнитьСтруктуруПараметровИменамиТаблицСКадровойИсториейСотрудников(ПараметрыПолучения);
	
	Возврат ПараметрыПолучения;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблицеБезКадровогоУчета(ТолькоРазрешенные, ИмяВТРабочиеМестаПоТрудовымДоговорам, Параметры, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловийОтбора = Новый Массив;
	
	ПараметрыОтбораПоОрганизациям = ПараметрыОтбораПоОрганизациям(Параметры);
	Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
		
		Если Параметры.ОтбиратьПоГоловнойОрганизации И ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
			ТекстыУсловийОтбора.Добавить("ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация В (&ТекущиеКадровыеДанныеСотрудниковОрганизации)");
			ТекущиеКадровыеДанныеСотрудниковОрганизации = ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации;
		Иначе
			ТекстыУсловийОтбора.Добавить("ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация В (&ТекущиеКадровыеДанныеСотрудниковОрганизации)");
			ТекущиеКадровыеДанныеСотрудниковОрганизации = ПараметрыОтбораПоОрганизациям.Организации;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТекущиеКадровыеДанныеСотрудниковОрганизации", ТекущиеКадровыеДанныеСотрудниковОрганизации);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		ТекстыУсловийОтбора.Добавить("ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В ИЕРАРХИИ (&ТекущиеКадровыеДанныеСотрудниковПодразделение)");
		Запрос.УстановитьПараметр("ТекущиеКадровыеДанныеСотрудниковПодразделение", Параметры.Подразделение);
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > СотрудникиПериоды.НачалоПериода
		|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|		ИНАЧЕ СотрудникиПериоды.НачалоПериода
		|	КОНЕЦ КАК Период,
		|	ВЫБОР
		|		КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > СотрудникиПериоды.НачалоПериода
		|			ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|		ИНАЧЕ СотрудникиПериоды.НачалоПериода
		|	КОНЕЦ КАК ПериодЗаписи,
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение КАК Подразделение,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Должность,
		|	ТекущиеКадровыеДанныеСотрудников.КоличествоСтавок КАК КоличествоСтавок,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник) КАК РольСотрудника,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия,
		|	NULL КАК ДокументОснование
		|ПОМЕСТИТЬ ВТРабочиеМестаСотрудников
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО СотрудникиПериоды.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И СотрудникиПериоды.ОкончаниеПериода >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|			И (ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1))
		|			И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ СотрудникиПериоды.НачалоПериода <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > ТекущиеКадровыеДанныеСотрудников.ДатаПриема)
		|			И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			И (ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору)
		|ГДЕ
		|	&УсловияОтбора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ, 1),
		|	ДОБАВИТЬКДАТЕ(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДЕНЬ, 1),
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник.ГоловнойСотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
		|	1,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.РолиСотрудников.Работник),
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение),
		|	NULL
		|ИЗ
		|	ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО СотрудникиПериоды.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|			И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > ТекущиеКадровыеДанныеСотрудников.ДатаПриема)
		|			И СотрудникиПериоды.НачалоПериода <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|			И СотрудникиПериоды.ОкончаниеПериода >= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|			И (ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			И (ТекущиеКадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору)
		|ГДЕ
		|	&УсловияОтбора";
	
	Если ТекстыУсловийОтбора.Количество() = 0 Тогда
		УсловияОтбора = "(ИСТИНА)";
	ИначеЕсли ТекстыУсловийОтбора.Количество() = 1 Тогда
		УсловияОтбора = ТекстыУсловийОтбора[0];
	Иначе
		УсловияОтбора = СтрСоединить(ТекстыУсловийОтбора, Символы.ПС + Символы.Таб + "И ");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ИмяПоляСотрудник) Тогда
		Запрос.Текст =СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник", "(ИСТИНА)")
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + Параметры.ИмяПоляСотрудник);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды",  Параметры.ИмяВТСотрудникиПериоды);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.НачалоПериода", "СотрудникиПериоды." + Параметры.ИмяПоляНачалоПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + Параметры.ИмяПоляОкончаниеПериода);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбора", УсловияОтбора);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТРабочиеМестаСотрудников", ИмяВТРабочиеМестаПоТрудовымДоговорам);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблицеСКадровымУчетом(ТолькоРазрешенные, ИмяВТРабочиеМестаПоТрудовымДоговорам, Параметры, МенеджерВременныхТаблиц)
	
	// Инициализация параметров получения таблицы регистра.
	ОписаниеФильтра = ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
		Параметры.ИмяВТСотрудникиПериоды,
		Параметры.ИмяПоляСотрудник);
	
	// Описание переименований полей таблицы отборов.
	Если Не ПустаяСтрока(Параметры.ИмяПоляСотрудник) Тогда
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Сотрудник", Параметры.ИмяПоляСотрудник);
	КонецЕсли;
	
	Если Параметры.ПериодВОдинДень Тогда
		
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("Период", Параметры.ИмяПоляНачалоПериода);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистраСрез();
		
	Иначе
		
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаНачала", Параметры.ИмяПоляНачалоПериода);
		ОписаниеФильтра.СоответствиеИзмеренийРегистраИзмерениямФильтра.Вставить("ДатаОкончания", Параметры.ИмяПоляОкончаниеПериода);
		
		ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
		
	КонецЕсли;
	
	Если Параметры.Отборы <> Неопределено Тогда
		
		КритерииПоиска = КритерииПоискаСотрудниковПоКоллекцииОтборов(Параметры.Отборы);
		Отборы = КритерииПоиска.Получить("РегистрСведений.КадроваяИсторияСотрудников");
		Если Отборы <> Неопределено Тогда
			
			Если Параметры.ПериодВОдинДень Тогда
				ПараметрыПостроения.ОтборыПрименяемыеКСрезу = ОбщегоНазначения.СкопироватьРекурсивно(Отборы);
			Иначе
				ПараметрыПостроения.Отборы = ОбщегоНазначения.СкопироватьРекурсивно(Отборы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка отбора по организации.
	ПараметрыОтбораПоОрганизациям = ПараметрыОтбораПоОрганизациям(Параметры);
	Если ТолькоРазрешенные
		И Не ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
		
		ДоступныеОрганизации = ЗарплатаКадры.ДоступныеОрганизации();
		
		Если Не ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
			ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации = ДоступныеОрганизации.Организации;
		КонецЕсли;
		
		ПараметрыОтбораПоОрганизациям.Организации = ДоступныеОрганизации.Филиалы;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "ГоловнаяОрганизация", "В", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
		КонецЕсли;
		
		Если Не Параметры.ОтбиратьПоГоловнойОрганизации Тогда
			
			Если Параметры.ПериодВОдинДень Тогда
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "Организация", "В", ПараметрыОтбораПоОрганизациям.Организации);
			Иначе
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Организация", "В", ПараметрыОтбораПоОрганизациям.Организации);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.ПериодВОдинДень Тогда
		
		// Установка отбора по подразделению.
		Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "Подразделение", " В ИЕРАРХИИ ", Параметры.Подразделение);
		КонецЕсли;
		
		// Исключение ранее уволенных.
		Если Не Параметры.ВключаяУволенныхНаНачалоПериода Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыПрименяемыеКСрезу, "ВидСобытия", " <> ", Перечисления.ВидыКадровыхСобытий.Увольнение);
		КонецЕсли;
		
	Иначе
		
		// Установка отбора по подразделению.
		Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.Отборы, "Подразделение", " В ИЕРАРХИИ ", Параметры.Подразделение);
		КонецЕсли;
		
		// Исключение из записей на начало периода ранее уволенных.
		Если Не Параметры.ВключаяУволенныхНаНачалоПериода Тогда
			ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(ПараметрыПостроения.ОтборыЗаписейНаНачалоПериода, "ВидСобытия", " <> ", Перечисления.ВидыКадровыхСобытий.Увольнение);
		КонецЕсли;
		
		// Дополнение таблицы регистра значениями на начало периода.
		ПараметрыПостроения.ВключатьЗаписиНаНачалоПериода = Истина;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИсключаемыйРегистратор) Тогда
		
		Если ТипЗнч(Параметры.ИсключаемыйРегистратор) = Тип("Массив")
			Или ТипЗнч(Параметры.ИсключаемыйРегистратор) = Тип("ФиксированныйМассив")
			Или ТипЗнч(Параметры.ИсключаемыйРегистратор) = Тип("СписокЗначений") Тогда
			
			ВидСравненияРегистратора = "НЕ В";
			
		Иначе
			ВидСравненияРегистратора = "<>";
		КонецЕсли;
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПостроения.Отборы,
			"Регистратор",
			ВидСравненияРегистратора,
			Параметры.ИсключаемыйРегистратор);
		
	КонецЕсли;
	
	Если ПараметрыПостроения.ПостоянныеПоля = Неопределено Тогда
		ПараметрыПостроения.ПостоянныеПоля = Новый Структура;
	КонецЕсли;
	
	Для Каждого ОписаниеПоля Из ПоляВТРабочиеМестаСотрудников() Цикл
		Если ЗначениеЗаполнено(ОписаниеПоля.Значение) Тогда
			ПараметрыПостроения.ПостоянныеПоля.Вставить(ОписаниеПоля.Ключ, ОписаниеПоля.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПостроения.СоответствиеПсевдонимовПолей.Вставить("Регистратор", "ДокументОснование");
	
	Если Параметры.ПериодВОдинДень Тогда
		
		// Получение готового запроса
		Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистраСрез(
			"КадроваяИсторияСотрудников",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			Истина,
			ИмяВТРабочиеМестаПоТрудовымДоговорам);
		
	Иначе
		
		// Получение готового запроса
		Запрос = ЗарплатаКадрыОбщиеНаборыДанных.ЗапросВТИмяРегистра(
			"КадроваяИсторияСотрудников",
			ТолькоРазрешенные,
			ОписаниеФильтра,
			ПараметрыПостроения,
			ИмяВТРабочиеМестаПоТрудовымДоговорам);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОтборСотрудниковОрганизации(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Запрос = ЗапросВТОтборСотрудниковОрганизацииСКадровымУчетом(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды);
	Иначе
		Запрос = ЗапросВТОтборСотрудниковОрганизацииБезКадровогоУчета(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОтборСотрудниковОрганизацииБезКадровогоУчета(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды)
	
	Перем СписокФизическихЛиц;
	Перем ИмяВТФизическиеЛица;
	
	ИменаВременныхТаблицКУничтожению = Новый Массив;
	
	ПараметрыОтбораПоОрганизациям = ПараметрыОтбораПоОрганизациям(Параметры);
	
	Параметры.Свойство("СписокФизическихЛиц", СписокФизическихЛиц);
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	УстановленыОтборы = Ложь;
	Отборы = Неопределено;
	Если Параметры.Свойство("Отборы",  Отборы)
		И Отборы <> Неопределено Тогда
		
		УстановленыОтборы = Истина;
		ИмяВТСотрудникиПоКритериямПоиска = "ВТСотрудникиПоКритериямПоиска";
		
		КритерииПоиска = КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы);
		Запрос = ЗапросВТСотрудникиПоКритериямПоиска(
			КритерииПоиска, ТолькоРазрешенные, "Справочник.Сотрудники", ИмяВТСотрудникиПоКритериямПоиска);
		
		ТекстЗапросаВТСотрудникиПериоды =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Сотрудники.Сотрудник КАК Сотрудник,
			|	&ДатаНачала КАК ДатаНачала,
			|	&ДатаОкончания КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	ВТСотрудникиПоКритериямПоиска КАК Сотрудники";
		
		ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "ВТСотрудникиПоКритериямПоиска", ИмяВТСотрудникиПоКритериямПоиска);
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТСотрудникиПериоды, ТолькоРазрешенные);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(
			Запрос.Текст, ТекстЗапросаВТСотрудникиПериоды);
		
		ИменаВременныхТаблицКУничтожению.Добавить(ИмяВТСотрудникиПоКритериямПоиска);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	&ДатаНачала КАК ДатаНачала,
			|	&ДатаОкончания КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТСотрудникиПериоды
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
		
		ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
		ТекстДатаНачала = Параметры.НачалоПериода;
		ТекстДатаОкончания = Параметры.ОкончаниеПериода;
	Иначе
		ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(Запрос.Текст);
	
	ТекстыУсловий = Новый Массив;
	Если СписокФизическихЛиц <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
		ТекстыУсловий.Добавить("Сотрудники.ФизическоеЛицо В (&МассивФизическихЛиц)");
		
	ИначеЕсли ИмяВТФизическиеЛица <> Неопределено Тогда
		
		ТекстСоединения =
			"ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
			|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо";
		
		ТекстСоединения = СтрЗаменить(ТекстСоединения, "ВТФизическиеЛица", ИмяВТФизическиеЛица);
		ТекстСоединения = СтрЗаменить(ТекстСоединения, "ФизическиеЛица.ФизическоеЛицо", "ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо);
		
		ТекстыЗапроса.Добавить(ТекстСоединения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации)  Тогда
		
		Запрос.УстановитьПараметр("ГоловныеОрганизации", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
		Если УстановленыОтборы Тогда
			ТекстыУсловий.Добавить("Сотрудники.Сотрудник.ГоловнаяОрганизация В (&ГоловныеОрганизации)");
		Иначе
			ТекстыУсловий.Добавить("Сотрудники.ГоловнаяОрганизация В (&ГоловныеОрганизации)");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		Если ТекстыУсловий.Количество() = 1 Тогда
			ТекстУсловий = ТекстыУсловий[0];
		Иначе
			ТекстУсловий = СтрСоединить(ТекстыУсловий, Символы.ПС + Символы.Таб + "И ");
		КонецЕсли;
		
		ТекстыЗапроса.Добавить("ГДЕ");
		ТекстыЗапроса.Добавить(ТекстУсловий);
		
	КонецЕсли;
	
	Если ТекстыЗапроса.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ИменаВременныхТаблицКУничтожению);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТОтборСотрудниковОрганизацииСКадровымУчетом(ТолькоРазрешенные, Параметры, ИмяВТСотрудникиПериоды)
	
	РаботникиПоТрудовымДоговорам = Параметры.РаботникиПоТрудовымДоговорам;
	ПодработкиРаботниковПоТрудовымДоговорам = Параметры.ПодработкиРаботниковПоТрудовымДоговорам;
	РаботникиПоДоговорамГПХ = Параметры.РаботникиПоДоговорамГПХ;
	
	// При отключенных функциональных опциях запрос формируется со значениями "по умолчанию".
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНачисленияПоДоговорам") Тогда
		РаботникиПоДоговорамГПХ = Неопределено;
	КонецЕсли;
	
	ИспользоватьПодработки = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.Подработки") Тогда
		ИмяФункциональнойОпции = "ИспользоватьПодработки";
		ИспользоватьПодработки = ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
	КонецЕсли;
	
	Если Не ИспользоватьПодработки Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	// Запрос подработок формируется если формируется запрос по работником на трудовых договорах.
	Если РаботникиПоТрудовымДоговорам = Ложь Тогда
		ПодработкиРаботниковПоТрудовымДоговорам = Ложь;
	КонецЕсли;
	
	Если РаботникиПоТрудовымДоговорам = Ложь
		И РаботникиПоДоговорамГПХ = Ложь Тогда
		
		Запрос = Новый Запрос;
		
	Иначе
		
		Если (РаботникиПоТрудовымДоговорам = Неопределено И ПодработкиРаботниковПоТрудовымДоговорам <> Истина И РаботникиПоДоговорамГПХ = Ложь)
			Или (РаботникиПоТрудовымДоговорам = Ложь И РаботникиПоДоговорамГПХ = Неопределено)
			Или (РаботникиПоТрудовымДоговорам = Неопределено И ПодработкиРаботниковПоТрудовымДоговорам <> Истина И РаботникиПоДоговорамГПХ = Неопределено) Тогда
			
			ВызватьИсключение НСтр("ru='Не верно заданы параметры получения сотрудников организации'");
			
		КонецЕсли;
		
		Если РаботникиПоТрудовымДоговорам = Неопределено
			И ПодработкиРаботниковПоТрудовымДоговорам = Истина
			И РаботникиПоДоговорамГПХ = Ложь Тогда
			
			ПараметрыПолучения = Параметры;
			
		Иначе
			
			Если Параметры.Свойство("СписокФизическихЛиц") Тогда
				ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
			Иначе
				ПараметрыПолучения = ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПолучения, Параметры);
			ПараметрыПолучения.РаботникиПоДоговорамГПХ = Ложь;
			
		КонецЕсли;
		
		СписокФизическихЛиц = Неопределено;
		ИмяВТФизическиеЛица = Неопределено;
		
		ИменаВременныхТаблицКУничтожению = Новый Массив;
		
		ПараметрыОтбораПоОрганизациям = ПараметрыОтбораПоОрганизациям(ПараметрыПолучения);
		
		ПараметрыПолучения.Свойство("СписокФизическихЛиц", СписокФизическихЛиц);
		ПараметрыПолучения.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
		
		Если ТипЗнч(ПараметрыПолучения.НачалоПериода) = Тип("Строка") Тогда
			ТекстДатаНачала = ПараметрыПолучения.НачалоПериода;
		ИначеЕсли ПараметрыПолучения.НачалоПериода = Неопределено Тогда
			ТекстДатаНачала = "ДАТАВРЕМЯ(1, 1, 1)";
		Иначе
			ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(ПараметрыПолучения.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыПолучения.ОкончаниеПериода) = Тип("Строка") Тогда
			ТекстДатаОкончания = ПараметрыПолучения.ОкончаниеПериода;
		ИначеЕсли ПараметрыПолучения.ОкончаниеПериода = Неопределено Тогда
			ТекстДатаОкончания = "ДАТАВРЕМЯ(1, 1, 1)";
		Иначе
			ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(ПараметрыПолучения.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		УстановленыОтборы = Ложь;
		ПараметрыОтборы = Неопределено;
		
		ПараметрыПолучения.Свойство("Отборы", ПараметрыОтборы);
		Если ПараметрыОтборы = Неопределено Тогда
			Отборы = Новый Массив;
		Иначе
			Отборы = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыОтборы);
		КонецЕсли;
		
		Если Отборы.Количество() > 0 Тогда
			
			УстановленыОтборы = Истина;
			ИмяВТСотрудникиПоКритериямПоиска = "ВТСотрудникиПоКритериямПоиска";
			
			Если ЗначениеЗаполнено(ПараметрыПолучения.НачалоПериода)
				И ПараметрыПолучения.НачалоПериода = ПараметрыПолучения.ОкончаниеПериода Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					Отборы, "Период", "=", ПараметрыПолучения.НачалоПериода);
				
			Иначе
				
				Если ЗначениеЗаполнено(ПараметрыПолучения.НачалоПериода) Тогда
					
					ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
						Отборы, "ДатаНачала", "=", ПараметрыПолучения.НачалоПериода);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПараметрыПолучения.ОкончаниеПериода) Тогда
					
					ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
						Отборы, "ДатаОкончания", "=", ПараметрыПолучения.ОкончаниеПериода);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					Отборы, "ГоловнаяОрганизация", "В", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
				
			КонецЕсли;
			
			Если СписокФизическихЛиц <> Неопределено Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					Отборы, "ФизическоеЛицо", "В", СписокФизическихЛиц);
				
				Отборы.Вставить(0, Отборы[Отборы.Количество() - 1]);
				Отборы.Удалить(Отборы.Количество() - 1);
				
			КонецЕсли;
			
			КритерииПоиска = КритерииПоискаСотрудниковПоКоллекцииОтборов(Отборы);
			Запрос = ЗапросВТСотрудникиПоКритериямПоиска(
				КритерииПоиска, ТолькоРазрешенные, "Справочник.Сотрудники", ИмяВТСотрудникиПоКритериямПоиска);
			
			ТекстЗапросаВТСотрудникиПериоды =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Сотрудник КАК Сотрудник,
				|	&ДатаНачала КАК ДатаНачала,
				|	&ДатаОкончания КАК ДатаОкончания
				|ПОМЕСТИТЬ ВТСотрудникиПериоды
				|ИЗ
				|	ВТСотрудникиПоКритериямПоиска КАК Сотрудники";
			
			ТекстЗапросаВТСотрудникиПериоды = СтрЗаменить(ТекстЗапросаВТСотрудникиПериоды, "ВТСотрудникиПоКритериямПоиска", ИмяВТСотрудникиПоКритериямПоиска);
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(ТекстЗапросаВТСотрудникиПериоды, ТолькоРазрешенные);
			
			ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(
				Запрос.Текст, ТекстЗапросаВТСотрудникиПериоды);
			
			ИменаВременныхТаблицКУничтожению.Добавить(ИмяВТСотрудникиПоКритериямПоиска);
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Сотрудники.Ссылка КАК Сотрудник,
				|	&ДатаНачала КАК ДатаНачала,
				|	&ДатаОкончания КАК ДатаОкончания
				|ПОМЕСТИТЬ ВТСотрудникиПериоды
				|ИЗ
				|	Справочник.Сотрудники КАК Сотрудники";
			
			ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
		
		ТекстыУсловий = Новый Массив;
		Если СписокФизическихЛиц <> Неопределено Или ИмяВТФизическиеЛица = Неопределено Тогда
			
			ТекстСоединения = "";
			
			Если УстановленыОтборы Тогда
				
				Если СписокФизическихЛиц <> Неопределено Тогда
					Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
					ТекстыУсловий.Добавить("Сотрудники.ФизическоеЛицо В (&МассивФизическихЛиц)");
				КонецЕсли;
				
			Иначе
			
				Если СписокФизическихЛиц = Неопределено Тогда
					
					Запрос.Текст =
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|	&ДатаНачала КАК ДатаНачала,
						|	&ДатаОкончания КАК ДатаОкончания
						|ПОМЕСТИТЬ ВТСотрудникиПериоды";
						
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", ТекстДатаНачала);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", ТекстДатаОкончания);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
				
				Иначе
					Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
					ТекстыУсловий.Добавить("Сотрудники.ФизическоеЛицо В (&МассивФизическихЛиц)");
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяВТФизическиеЛица <> Неопределено Тогда
			
			ТекстСоединения = "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
				|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо";
				
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ВТФизическиеЛица", ИмяВТФизическиеЛица);
			ТекстСоединения = СтрЗаменить(ТекстСоединения, "ФизическиеЛица.ФизическоеЛицо", "ФизическиеЛица." + ПараметрыПолучения.ИмяПоляФизическоеЛицо);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) 
			И (СписокФизическихЛиц <> Неопределено
				Или ИмяВТФизическиеЛица <> Неопределено) Тогда
			
			Запрос.УстановитьПараметр("ГоловныеОрганизации", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
			Если УстановленыОтборы
				Или ИмяВТФизическиеЛица <> Неопределено
				Или СписокФизическихЛиц <> Неопределено Тогда
				
				Если Отборы.Количество() > 0 Тогда
					ТекстыУсловий.Добавить("Сотрудники.Сотрудник.ГоловнаяОрганизация В (&ГоловныеОрганизации)");
				Иначе
					ТекстыУсловий.Добавить("Сотрудники.ГоловнаяОрганизация В (&ГоловныеОрганизации)");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстыЗапроса = Новый Массив;
		ТекстыЗапроса.Добавить(Запрос.Текст);
		
		Если Не ПустаяСтрока(ТекстСоединения) Тогда
			ТекстыЗапроса.Добавить(ТекстСоединения);
		КонецЕсли;
		
		Если ТекстыУсловий.Количество() > 0 Тогда
			
			Если ТекстыУсловий.Количество() = 1 Тогда
				ТекстУсловий = ТекстыУсловий[0];
			Иначе
				ТекстУсловий = СтрСоединить(ТекстыУсловий, Символы.ПС + Символы.Таб + "И ");
			КонецЕсли;
			
			ТекстыЗапроса.Добавить("ГДЕ");
			ТекстыЗапроса.Добавить(ТекстУсловий);
			
		КонецЕсли;
		
		Если УстановленыОтборы Тогда
			
			ТекстыЗапроса.Добавить(
				"{ГДЕ
				|	Сотрудники.Сотрудник.*,
				|	Сотрудники.Сотрудник.ГоловнаяОрганизация.* КАК ГоловнаяОрганизация,
				|	Сотрудники.ФизическоеЛицо.*}");
			
		ИначеЕсли СписокФизическихЛиц <> Неопределено Тогда
			
			ТекстыЗапроса.Добавить(
				"{ГДЕ
				|	Сотрудники.Ссылка.* КАК Сотрудник,
				|	Сотрудники.ГоловнаяОрганизация.*,
				|	Сотрудники.ФизическоеЛицо.*}");
			
		КонецЕсли;
		
		Запрос.Текст = СтрСоединить(ТекстыЗапроса, Символы.ПС);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросыУничтоженияВременныхТаблиц(Запрос.Текст, ИменаВременныхТаблицКУничтожению);
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизацииПоРабочимМестамБезКадровогоУчета(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц)
	
	Перем ИмяВТФизическиеЛица;
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	ПараметрыОтбораПоОрганизациям = ПараметрыОтбораПоОрганизациям(Параметры);
	
	Если ТолькоРазрешенные
		И Не ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
		
		ДоступныеОрганизации = ЗарплатаКадры.ДоступныеОрганизации();
		
		Если Не ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
			ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации = ДоступныеОрганизации.Организации;
		КонецЕсли;
		
		ПараметрыОтбораПоОрганизациям.Организации = ДоступныеОрганизации.Филиалы;
		
	КонецЕсли;
	
	Запрос = Новый запрос;
	
	ИмяВТКадровыеДанныеСотрудников = "ВТКадровыеДанныеДляПолученияСотрудниковОрганизацииПоРабочимМестам";
	
	МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ФизическоеЛицо,ОформленПоТрудовомуДоговору,ДатаПриема,ДатаЗавершенияРаботы,ГоловнаяОрганизация,Организация,Подразделение,ГоловнойСотрудник");
	
	Если ТипЗнч(Параметры.КадровыеДанные) = Тип("Строка") Тогда
		МассивЗаказанныхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.КадровыеДанные, ",", , Истина);
	Иначе
		МассивЗаказанныхКадровыхДанных = Параметры.КадровыеДанные;
	КонецЕсли;
	
	Для каждого ИмяПоля Из МассивЗаказанныхКадровыхДанных Цикл
		Если МассивНеобходимыхКадровыхДанных.Найти(ИмяПоля) = Неопределено Тогда
			МассивНеобходимыхКадровыхДанных.Добавить(ИмяПоля)
		КонецЕсли;
	КонецЦикла;
	
	ПоляОтбораСотрудников = ПоляОтбораСотрудников();
	
	ОписательВременнойТаблицыОтборов = ОписаниеВременнойТаблицыОтборовСотрудников(
		ИмяВТСотрудникиПериоды,
		ПоляОтбораСотрудников.Сотрудник,
		"ДатаОкончания");
	
	ЗапросВТКадровыеДанныеСотрудников = ЗапросВТКадровыеДанныеСотрудников(
		ТолькоРазрешенные,
		ОписательВременнойТаблицыОтборов,
		МассивНеобходимыхКадровыхДанных,
		,
		,
		,
		ИмяВТКадровыеДанныеСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТКадровыеДанныеСотрудников);
	
	ТекстыЗапросаПолейВТКадровыеДанныеСотрудников = Новый Массив;
	ТекстыЗапросаПолейВТКадровыеДанныеСотрудников.Добавить(
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК ПериодЗаписи,
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо");
	
	Для каждого ИмяПоля Из МассивЗаказанныхКадровыхДанных Цикл
		
		Если ВРег(ИмяПоля) = "ПЕРИОД"
			Или ВРег(ИмяПоля) = "СОТРУДНИК"
			Или ВРег(ИмяПоля) = "ФИЗИЧЕСКОЕЛИЦО" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстыЗапросаПолейВТКадровыеДанныеСотрудников.Добавить("КадровыеДанныеСотрудников." + ИмяПоля + " КАК " + ИмяПоля);
		
	КонецЦикла;
	
	ТекстЗапросаПолейВТКадровыеДанныеСотрудников = СтрСоединить(ТекстыЗапросаПолейВТКадровыеДанныеСотрудников, "," + Символы.ПС + Символы.Таб);
	
	ТекстыЗапросаВТКадровыеДанныеСотрудников = Новый Массив;
	ТекстыЗапросаВТКадровыеДанныеСотрудников.Добавить(ТекстЗапросаПолейВТКадровыеДанныеСотрудников);
	
	ТекстИсточниковВТКадровыеДанныеСотрудников =
		"ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ
		|	ВТДляПолученияСотрудниковКадровыеДанные КАК КадровыеДанныеСотрудников";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
		ТекстИсточниковВТКадровыеДанныеСотрудников, "ВТСотрудникиОрганизации", ИмяВТСотрудникиОрганизации);
	
	ТекстИсточниковВТКадровыеДанныеСотрудников = СтрЗаменить(ТекстИсточниковВТКадровыеДанныеСотрудников,
		"ВТДляПолученияСотрудниковКадровыеДанные", ИмяВТКадровыеДанныеСотрудников);
	
	ТекстыЗапросаВТКадровыеДанныеСотрудников.Добавить(ТекстИсточниковВТКадровыеДанныеСотрудников);
	
	ТекстЗапросаУсловий = "";
	ТекстыЗапросаУсловий = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты")
		И (ЗначениеЗаполнено(Параметры.НачалоПериода)
			Или ЗначениеЗаполнено(Параметры.ОкончаниеПериода)) Тогда
		
		Если ТипЗнч(Параметры.НачалоПериода) = Тип("Строка") Тогда
			ТекстНачалоПериода = Параметры.НачалоПериода;
		Иначе
			ТекстНачалоПериода = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		Если ТипЗнч(Параметры.ОкончаниеПериода) = Тип("Строка") Тогда
			ТекстОкончаниеПериода = Параметры.ОкончаниеПериода;
		Иначе
			ТекстОкончаниеПериода = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		КонецЕсли;
		
		ТекстЗапросаУсловий =
			"			КадровыеДанныеСотрудников.ОформленПоТрудовомуДоговору
			|			И КадровыеДанныеСотрудников.ДатаПриема > ДАТАВРЕМЯ(1, 1, 1)
			|			И (КадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериода
			|				ИЛИ &ОкончаниеПериода = ДАТАВРЕМЯ(1, 1, 1))";
		
		Если Не Параметры.ВключаяУволенныхНаНачалоПериода Тогда
			
			ТекстЗапросаУсловий = ТекстЗапросаУсловий + Символы.ПС + "
				|			И (КадровыеДанныеСотрудников.ДатаЗавершенияРаботы >= &НачалоПериода
				|				ИЛИ КадровыеДанныеСотрудников.ДатаЗавершенияРаботы = ДАТАВРЕМЯ(1, 1, 1))";
			
		КонецЕсли;
		
		ТекстЗапросаУсловий = СтрЗаменить(ТекстЗапросаУсловий, "&НачалоПериода", ТекстНачалоПериода);
		ТекстЗапросаУсловий = СтрЗаменить(ТекстЗапросаУсловий, "&ОкончаниеПериода", ТекстОкончаниеПериода);
		
		ТекстыЗапросаУсловий.Добавить(ТекстЗапросаУсловий);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Подразделение) Тогда
		
		ТекстыЗапросаУсловий.Добавить("КадровыеДанныеСотрудников.Подразделение В ИЕРАРХИИ (&Подразделение)");
		Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
			ТекстыЗапросаУсловий.Добавить("КадровыеДанныеСотрудников.ГоловнаяОрганизация В (&ГоловныеОрганизации)");
			Запрос.УстановитьПараметр("ГоловныеОрганизации", ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации);
		КонецЕсли;
		
		Если Не Параметры.ОтбиратьПоГоловнойОрганизации Тогда
			
			ТекстыЗапросаУсловий.Добавить("КадровыеДанныеСотрудников.Организация В (&Организации)");
			Запрос.УстановитьПараметр("Организации", ПараметрыОтбораПоОрганизациям.Организации);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстыЗапросаУсловий.Количество() > 0 Тогда
		
		ТекстЗапросаУсловий = СтрСоединить(ТекстыЗапросаУсловий, Символы.ПС + Символы.Таб + "И ");
		
		ТекстыЗапросаВТКадровыеДанныеСотрудников.Добавить("ГДЕ");
		ТекстыЗапросаВТКадровыеДанныеСотрудников.Добавить(ТекстЗапросаУсловий);
		
	КонецЕсли;
	
	ТекстЗапросаВТКадровыеДанныеСотрудников = СтрСоединить(ТекстыЗапросаВТКадровыеДанныеСотрудников, Символы.ПС);
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаВТКадровыеДанныеСотрудников);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТКадровыеДанныеДляПолученияСотрудниковОрганизацииПоРабочимМестам");
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизацииПоРабочимМестамСКадровымУчетом(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиПериоды, Параметры, МенеджерВременныхТаблиц)
	
	Перем ИмяВТФизическиеЛица;
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	СоздаватьПромежуточныеТаблицы = (МенеджерВременныхТаблиц <> Неопределено);
	ПараметрыОтбораПоОрганизациям = ПараметрыОтбораПоОрганизациям(Параметры);
	
	Если ТолькоРазрешенные
		И Не ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.Организации) Тогда
		
		ДоступныеОрганизации = ЗарплатаКадры.ДоступныеОрганизации();
		
		Если Не ЗначениеЗаполнено(ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации) Тогда
			ПараметрыОтбораПоОрганизациям.ГоловныеОрганизации = ДоступныеОрганизации.Организации;
		КонецЕсли;
		
		ПараметрыОтбораПоОрганизациям.Организации = ДоступныеОрганизации.Филиалы;
		
	КонецЕсли;
	
	ПараметрыПолученияРабочихМест = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(
		ИмяВТСотрудникиПериоды, , "ДатаНачала", "ДатаОкончания");
	
	Если ЗначениеЗаполнено(Параметры.НачалоПериода) И Параметры.НачалоПериода = Параметры.ОкончаниеПериода Тогда
		ПараметрыПолученияРабочихМест.ПериодВОдинДень = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияРабочихМест, Параметры, , "Отборы");
	
	Если Параметры.Отборы <> Неопределено Тогда
		
		Для каждого ОписаниеОтбора Из Параметры.Отборы Цикл
			
			Если ОписаниеОтбора.ОтносительныйПуть
				И ВРег(ОписаниеОтбора.ЛевоеЗначение) <> ВРег("Период")
				И ВРег(ОписаниеОтбора.ЛевоеЗначение) <> ВРег("ДатаНачала")
				И ВРег(ОписаниеОтбора.ЛевоеЗначение) <> ВРег("ДатаОкончания") Тогда
				
				ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
					ПараметрыПолученияРабочихМест.Отборы, ОписаниеОтбора.ЛевоеЗначение, ОписаниеОтбора.ВидСравнения, ОписаниеОтбора.ПравоеЗначение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Свойство("СписокФизическихЛиц")
		И ЗначениеЗаполнено(Параметры.СписокФизическихЛиц) Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			ПараметрыПолученияРабочихМест.Отборы, "ФизическоеЛицо", "В", Параметры.СписокФизическихЛиц);
		
	ИначеЕсли Параметры.Отборы = Неопределено
		И ИмяВТФизическиеЛица = Неопределено Тогда
		
		ПараметрыПолученияРабочихМест.ИмяПоляСотрудник = "";
		
	КонецЕсли;
	
	Если Параметры.ВключаяУволенныхНаНачалоПериода Тогда
		ПараметрыПолученияРабочихМест.ВключаяУволенныхНаНачалоПериода = Истина;
	КонецЕсли;
	
	Запрос = ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, "ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации", ПараметрыПолученияРабочихМест, МенеджерВременныхТаблиц);
	
	Если ЗначениеЗаполнено(Параметры.КадровыеДанные) Тогда
		ИмяВТСотрудникиОрганизацииДляКадровойИстории = "ВТСотрудникиОрганизацииДляКадровойИстории";
	Иначе
		ИмяВТСотрудникиОрганизацииДляКадровойИстории = ИмяВТСотрудникиОрганизации;
	КонецЕсли;
	
	ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПериоды.ОкончаниеПериода КАК Период,
		|	РабочиеМестаСотрудников.Сотрудник КАК Сотрудник,
		|	РабочиеМестаСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудникТаблицыРазличных,
		|	РабочиеМестаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(РабочиеМестаСотрудников.ПериодЗаписи) КАК ПериодЗаписи,
		|	РабочиеМестаСотрудников.РольСотрудника КАК РольСотрудника
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииДляКадровойИстории
		|ИЗ
		|	ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации КАК РабочиеМестаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПериоды КАК СотрудникиПериоды
		|		ПО РабочиеМестаСотрудников.Сотрудник = СотрудникиПериоды.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиПериоды.ОкончаниеПериода,
		|	РабочиеМестаСотрудников.Сотрудник,
		|	РабочиеМестаСотрудников.ГоловнойСотрудник,
		|	РабочиеМестаСотрудников.ФизическоеЛицо,
		|	РабочиеМестаСотрудников.РольСотрудника";
	
	ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
		СтрЗаменить(ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "ВТСотрудникиПериоды", ПараметрыПолученияРабочихМест.ИмяВТСотрудникиПериоды);
	
	Если ПустаяСтрока(ПараметрыПолученияРабочихМест.ИмяПоляСотрудник) Тогда
		
		ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
			СтрЗаменить(ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "РабочиеМестаСотрудников.Сотрудник = СотрудникиПериоды.Сотрудник", "(ИСТИНА)");
		
	Иначе
		
		ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
			СтрЗаменить(ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "СотрудникиПериоды.Сотрудник", "СотрудникиПериоды." + ПараметрыПолученияРабочихМест.ИмяПоляСотрудник);
		
	КонецЕсли;
	
	ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории =
		СтрЗаменить(ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "СотрудникиПериоды.ОкончаниеПериода", "СотрудникиПериоды." + ПараметрыПолученияРабочихМест.ИмяПоляОкончаниеПериода);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(
			ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории, "ВТСотрудникиОрганизацииДляКадровойИстории", ИмяВТСотрудникиОрганизацииДляКадровойИстории);
	
	Если СоздаватьПромежуточныеТаблицы 
		И Не ПустаяСтрока(Параметры.КадровыеДанные) Тогда
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
		
		Запрос.Текст = ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории;
		
	Иначе
		ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьТекстыЗапросов(Запрос.Текст, ТекстЗапросаСотрудникиОрганизацииДляКадровойИстории);
	КонецЕсли;
	
	Параметры.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра = "ВТРабочиеМестаСотрудников";
	Параметры.ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ИмяВТСотрудникиОрганизацииДляКадровойИстории;
	
	Если ЗначениеЗаполнено(Параметры.КадровыеДанные) Тогда
		
		ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(
			Запрос,
			ТолькоРазрешенные,
			ИмяВТСотрудникиОрганизации,
			ИмяВТСотрудникиОрганизацииДляКадровойИстории,
			Параметры.КадровыеДанные,
			Параметры.ИменаТаблицСКадровойИсториейСотрудников,
			МенеджерВременныхТаблиц);
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(
			Запрос.Текст, ИмяВТСотрудникиОрганизацииДляКадровойИстории);
		
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьЗапросУничтоженияВременнойТаблицы(Запрос.Текст, "ВТРабочиеМестаСотрудниковДляВТСотрудникиОрганизации");
	
	Возврат Запрос;
	
КонецФункции

Процедура ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(Запрос, ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиОрганизацииПромежуточная, КадровыеДанные, ИменаТаблицСКадровойИсториейСотрудников, МенеджерВременныхТаблиц)
	
	Если Не ЗначениеЗаполнено(КадровыеДанные) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные, ",", , Истина);
	Иначе
		МассивНеобходимыхКадровыхДанных = КадровыеДанные;
	КонецЕсли;
	
	ПоляОтбораСотрудников = ПоляОтбораСотрудников();
	
	ОписательВременнойТаблицыОтборов = ОписаниеВременнойТаблицыОтборовСотрудников(
		ИмяВТСотрудникиОрганизацииПромежуточная,
		ПоляОтбораСотрудников.Сотрудник,
		ПоляОтбораСотрудников.Период);
	
	Если ИменаТаблицСКадровойИсториейСотрудников <> Неопределено
		И Не ПустаяСтрока(ИменаТаблицСКадровойИсториейСотрудников.ИмяВТКадроваяИсторияСотрудниковТаблицаРегистра) Тогда
		
		ЗаполнитьЗначенияСвойств(ОписательВременнойТаблицыОтборов.ИменаТаблицСКадровойИсториейСотрудников, ИменаТаблицСКадровойИсториейСотрудников);
		
	КонецЕсли;
	
	ОписательВременнойТаблицыОтборов.ИмяВременнойТаблицыОтборовРазличныхСотрудников = ИмяВТСотрудникиОрганизацииПромежуточная;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросВТКадровыеДанныеСотрудников = ЗапросВТКадровыеДанныеСотрудников(
		ТолькоРазрешенные,
		ОписательВременнойТаблицыОтборов,
		МассивНеобходимыхКадровыхДанных,
		,
		,
		,
		ИмяВТСотрудникиОрганизации,
		Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ОбъединитьЗапросы(Запрос, ЗапросВТКадровыеДанныеСотрудников);
	
КонецПроцедуры

Процедура УстановитьИмяПредопределенногоОснованиюУвольнения(ИмяСправочника, ИмяПредопределенного, НаименованиеСуществующего) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Наименование", НаименованиеСуществующего);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОснованияУвольнения.Ссылка КАК Ссылка,
		|	ОснованияУвольнения.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
		|ИЗ
		|	Справочник.ОснованияУвольнения КАК ОснованияУвольнения
		|ГДЕ
		|	ОснованияУвольнения.Наименование = &Наименование";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ОснованияУвольнения", "Справочник." + ИмяСправочника);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ИмяПредопределенныхДанных <> ИмяПредопределенного Тогда
			
			Попытка
				СсылкаПредопределенного = ПредопределенноеЗначение("Справочник." + ИмяСправочника + "." + ИмяПредопределенного);
				ОбъектПредопределенного = СсылкаПредопределенного.ПолучитьОбъект();
			Исключение
				ОбъектПредопределенного = Выборка.Ссылка.ПолучитьОбъект();
			КонецПопытки;
			
			ОбъектПредопределенного.ИмяПредопределенныхДанных = ИмяПредопределенного;
			ОбъектПредопределенного.ДополнительныеСвойства.Вставить("ЗаписьОбщихДанных");
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектПредопределенного);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГоловныхСотрудниковВКадровойИстории(ПараметрыОбновления = Неопределено) Экспорт
	
	КадровыйУчетВнутренний.ЗаполнитьГоловныхСотрудниковВКадровойИстории(ПараметрыОбновления);
	
КонецПроцедуры

#Область ФункцииДляРегламентированнойОтчетности

Функция СреднесписочнаяЧисленностьДляРСВ1(ПараметрыОтчета)

	Возврат СтатистикаПерсонала.СреднесписочнаяЧисленностьРаботающих(
		ПараметрыОтчета.Организация, 
		НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 
		ПараметрыОтчета.ДатаКонцаПериодаОтчета,
		Ложь).СреднесписочнаяЧисленностьРаботников;

КонецФункции

Функция СреднесписочнаяЧисленностьДляРСВ(ПараметрыОтчета)

	Возврат СтатистикаПерсонала.СреднесписочнаяЧисленностьРаботающих(
		ПараметрыОтчета.Организация, 
		НачалоГода(ПараметрыОтчета.ДатаНачалаПериодаОтчета), 
		ПараметрыОтчета.ДатаКонцаПериодаОтчета, 
		Истина).СреднесписочнаяЧисленностьРаботников;

КонецФункции

#КонецОбласти

#КонецОбласти
