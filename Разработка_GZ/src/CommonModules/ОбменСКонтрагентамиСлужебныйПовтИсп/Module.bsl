
#Область СлужебныйПрограммныйИнтерфейс

#Область КлассификаторВалют

// Возвращает данные валюты по коду ОКВ.
//
// Параметры:
//  КодВалюты	 - Строка - код валюты согласно ОКВ.
// 
// Возвращаемое значение:
//  Структура - имеет ключи:
//    * КодВалютыЦифровой - цифровой код по классификатору.
//    * КодВалютыБуквенный - буквенный код по классификатору.
//    * Наименование - наименование по классификатору.
//
Функция ДанныеВалютыПоКлассификатору(КодВалюты) Экспорт

	Результат = Неопределено;
	
	ДанныеКлассификатора = ОбменСКонтрагентамиСлужебный.ДанныеКлассификатораВалют();
	Если ДанныеКлассификатора <> Неопределено И ДанныеКлассификатора.Количество() Тогда
		СтрокаВалюты = ДанныеКлассификатора.Найти(КодВалюты, "КодВалютыЦифровой");
		
		Если СтрокаВалюты <> Неопределено Тогда
			Результат = Новый Структура("КодВалютыЦифровой, КодВалютыБуквенный, Наименование");
			ЗаполнитьЗначенияСвойств(Результат, СтрокаВалюты);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции 

#КонецОбласти

#Область КлассификаторСтранМира

// см. УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду.
Функция ДанныеКлассификатораСтранМираПоКоду(Знач Код, Знач ТипКода = "КодСтраны") Экспорт

	Возврат УправлениеКонтактнойИнформацией.ДанныеКлассификатораСтранМираПоКоду(Код, ТипКода);

КонецФункции 

#КонецОбласти

#Область КонвертерЭлектронныхДокументов

Функция ПреобразованиеXSL_ПараметрыПроизвольногоДокумента() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИсходныйФормат", "ПроизвольныйXML");
	Параметры.Вставить("ИтоговыйФормат", "ПараметрыЭлектронногоДокумента");
	
	ТекстПравила = ОбменСКонтрагентамиСлужебный.ТекстПравилаПреобразованияФормата(Параметры);
	Если НЕ ЗначениеЗаполнено(ТекстПравила) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьТаблицуСтилейXSLИзСтроки(ТекстПравила);
	
	Возврат Преобразователь;
	
КонецФункции

Функция ФабрикаXDTOЭлектронногоДокумента(ФорматЭД) Экспорт
	
	ПараметрыСхемыXML = Новый Структура;
	ПараметрыСхемыXML.Вставить("ИсходныйФормат", ФорматЭД);
	ПараметрыСхемыXML.Вставить("ИтоговыйФормат", "СхемаXML");
	
	ТекстСхемыXML = ОбменСКонтрагентамиСлужебный.ТекстПравилаПреобразованияФормата(ПараметрыСхемыXML);
	Если НЕ ЗначениеЗаполнено(ТекстСхемыXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеСхемыXML = Новый ЧтениеXML;
	ЧтениеСхемыXML.УстановитьСтроку(ТекстСхемыXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеСхемыXML);
	ЧтениеСхемыXML.Закрыть();
	
	ПостроительСхемXML = Новый ПостроительСхемXML;
	СхемаXML = ПостроительСхемXML.СоздатьСхемуXML(ДокументDOM);
	
	НаборСхемXML = Новый НаборСхемXML;
	НаборСхемXML.Добавить(СхемаXML);
	
	Фабрика = Новый ФабрикаXDTO(НаборСхемXML);
	
	Возврат Фабрика;
	
КонецФункции

#КонецОбласти

// см. ОбменСКонтрагентамиСлужебный.ПолучитьРасшифровкуВариантовЗаполнения
//
Функция РасшифровкаВариантовЗаполненияФорматовЭДО() Экспорт
	
	Возврат ОбменСКонтрагентамиСлужебный.РасшифровкаВариантовЗаполненияФорматовЭДО();
	
КонецФункции

// см. РегистрыСведений.ОператорыЭДО.ТаблицаОператоровЭДО
//
Функция ТаблицаОператоровЭДО() Экспорт
	Возврат РегистрыСведений.ОператорыЭДО.ТаблицаОператоровЭДО();
КонецФункции

Функция КомандыПечатиВнутреннихЭлектронныхДокументов() Экспорт
	
	Результат = Новый Соответствие;
	
	ИдентификаторыОбъектовУчета = Новый Массив;
	
	Для каждого Тип Из Метаданные.ОпределяемыеТипы.ОснованияЭлектронныхДокументов.Тип.Типы() Цикл
		СтроковоеПредставлениеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(Тип);
		ОписаниеТипов = Новый ОписаниеТипов(СтроковоеПредставлениеТипа);
		ПустаяСсылка = ОписаниеТипов.ПривестиЗначение();
		Попытка
			ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(ПустаяСсылка);
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Внутренний Тогда
				ИдентификаторыОбъектовУчета.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип));
			КонецЕсли;
		Исключение
			ИмяСобытия = НСтр("ru = 'Получение идентификаторов объектов учета внутреннего электронного документооборота'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки = СтроковоеПредставлениеТипа + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ИдентификаторОбъектаУчета Из ИдентификаторыОбъектовУчета Цикл
		МетаданныеОбъектаУчета = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(ИдентификаторОбъектаУчета);
		КомандыПечати = ОбменСКонтрагентамиСлужебный.КомандыПечатиДоступныеВнутреннемуЭДО(МетаданныеОбъектаУчета);
		Результат.Вставить(ИдентификаторОбъектаУчета, КомандыПечати);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
