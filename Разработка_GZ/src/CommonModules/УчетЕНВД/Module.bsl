#Область ПрограммныйИнтерфейс

// Возвращает вмененный доход по всем видам деятельности
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  НачалоПериода - Дата - начало периода
//  КонецПериода - Дата - конец периода
//  СообщатьОбОшибках - Булево - Истина, если необходимо выводить сообщения об ошибках
//
Функция ВмененныйДоход(Организация, НачалоПериода, КонецПериода, СообщатьОбОшибках = Истина) Экспорт
	
	ВмененныйДоход = 0;
	
	Если НачалоПериода > КонецПериода Тогда
		Возврат ВмененныйДоход;
	КонецЕсли;
	
	Период = КонецКвартала(НачалоПериода);
	
	Пока Период <= КонецКвартала(КонецПериода) Цикл
		
		ВидыДеятельности = ПоказателиВидовДеятельности(Период, Организация);
		
		Если ВидыДеятельности = Неопределено Тогда
			Период = КонецКвартала(ДобавитьМесяц(Период, 3)); // Следующий квартал
			Продолжить;
		КонецЕсли;
		
		Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
			
			ПараметрыРасчетаСуммыНалога = УчетЕНВДКлиентСервер.НовыеПараметрыРасчетаСуммыНалога();
			ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСуммыНалога, ВидДеятельности);
			ПараметрыРасчетаСуммыНалога.Период = Период;
			
			ВмененныйДоход = ВмененныйДоход + УчетЕНВДКлиентСервер.ВмененныйДоходЗаКвартал(ПараметрыРасчетаСуммыНалога);
			
		КонецЦикла;
		
		Период = КонецКвартала(ДобавитьМесяц(Период, 3)); // Следующий квартал
		
	КонецЦикла;
	
	Возврат ВмененныйДоход;
	
КонецФункции

// Возвращает описание действий Помощника по ЕНВД
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//   СпособОплаты - ПеречислениеСсылка.СпособыУплатыНалогов
//   Период - Дата - налоговый период
//   ТекстОшибки - Строка - возвращаемый параметр
//
// Возвращаемое значение:
//   Структура
//     * Декларация - Структура, Неопределено
//     * ПлатежПоДаннымДекларации - Структура, Неопределено
//
Функция ОписанияДействийПомощника(Организация, РегистрацияВНалоговомОргане, СпособОплаты, Период, ТекстОшибки = "") Экспорт
	
	ОписанияДействий = Новый Структура("Декларация, ПлатежПоДаннымДекларации");
	
	ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Организация, ВидНалога, КонецКвартала(Период));
	
	Если Порядок <> Неопределено Тогда
		
		Если УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период)) Тогда 
			ОписанияДействий.Декларация = ОписаниеДействияДекларация(
				Организация, РегистрацияВНалоговомОргане, Порядок.Отчет);
				
			ОписанияДействий.ПлатежПоДаннымДекларации = ОписаниеДействияПлатежПоДаннымДекларации(
				Организация, РегистрацияВНалоговомОргане, Порядок.Уплата, СпособОплаты);
		Иначе
			ТекстОшибки = НСтр("ru = 'Организация не является плательщиком ЕНВД. Измените настройки системы налогообложения.'");
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Порядок уплаты налога не определен'");
		
	КонецЕсли;
	
	Возврат ОписанияДействий;
	
КонецФункции

// Возвращает таблицу видов деятельности ЕНВД
//
// Параметры:
//   Период - Дата - налоговый период
//   Организация - СправочникСсылка.Организации - головная организация, плательщик ЕНВД
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - отбор по налоговому органу
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ВидыДеятельности(Организация, РегистрацияВНалоговомОргане, ВидыДеятельности = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Для Индекс = 0 По СписокОрганизаций.ВГраница() Цикл
		Если ДоступныеОрганизации.Найти(СписокОрганизаций[Индекс]) = Неопределено Тогда
			СписокОрганизаций.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыДеятельности.Ссылка КАК ВидДеятельности,
	|	ВидыДеятельности.Наименование КАК Наименование,
	|	ВидыДеятельности.Подразделение КАК Подразделение,
	|	ВидыДеятельности.Адрес КАК Адрес,
	|	ВидыДеятельности.АдресСтрокой КАК АдресСтрокой,
	|	ВидыДеятельности.КодПоОКТМО КАК КодПоОКТМО,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.РегистрацияПоМестуНахожденияОрганизации, ЛОЖЬ) КАК РегистрацияПоМестуНахожденияОрганизации,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.Код, """") КАК Код,
	|	ВидыДеятельности.ДатаНачала КАК ДатаНачала,
	|	ВидыДеятельности.ДатаПрекращения КАК ДатаПрекращения
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовПредпринимательскойДеятельностиЕНВД КАК КлассификаторВидовПредпринимательскойДеятельности
	|		ПО ВидыДеятельности.КодВидаДеятельности = КлассификаторВидовПредпринимательскойДеятельности.Ссылка
	|ГДЕ
	|	ВидыДеятельности.Владелец В(&СписокОрганизаций)
	|	И &УсловиеПоРегистрацииВНалоговомОргане
	|	И &УсловиеПоВидамДеятельности
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторВидовПредпринимательскойДеятельности.Код,
	|	ВидыДеятельности.Наименование";
	
	// УсловиеПоРегистрацииВНалоговомОргане
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		РегистрацииВНалоговыхОрганах = Новый Массив;
		РегистрацииВНалоговыхОрганах.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		РегистрацииВНалоговыхОрганах.Добавить(РегистрацияВНалоговомОргане);
		
		Запрос.УстановитьПараметр("РегистрацииВНалоговыхОрганах", РегистрацииВНалоговыхОрганах);
		
		УсловиеПоРегистрацииВНалоговомОргане = "ВидыДеятельности.РегистрацияВНалоговомОргане В(&РегистрацииВНалоговыхОрганах)";
		
	Иначе
		УсловиеПоРегистрацииВНалоговомОргане = "ИСТИНА"
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистрацииВНалоговомОргане", УсловиеПоРегистрацииВНалоговомОргане);
	
	// УсловиеПоВидамДеятельности
	Если ЗначениеЗаполнено(ВидыДеятельности) Тогда
		Запрос.УстановитьПараметр("ВидыДеятельности", ВидыДеятельности);
		УсловиеПоВидамДеятельности = "ВидыДеятельности.Ссылка В(&ВидыДеятельности)";
	Иначе
		УсловиеПоВидамДеятельности = "НЕ ВидыДеятельности.ПометкаУдаления"
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоВидамДеятельности", УсловиеПоВидамДеятельности);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДеятельности = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьАдресПриРегистрацияПоМестуНахожденияОрганизации(Организация, ВидыДеятельности);
	
	Возврат ВидыДеятельности;
	
КонецФункции

// Проверяет наличие действующих видов деятельности в настройках ЕНВД.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация-плательщик ЕНВД,
//                 для которой проверяется наличие видов деятельности.
//   Период - Дата - день, в котором производится проверка.
//
// Возвращаемое значение:
//   Булево   - если Истина, то зарегистрированные и действующие на данный день виды деятельности в ИБ отсутствуют.
//
Функция ОтсутствуютДействующиеВидыДеятельности(Организация, Период) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ДеньПроверки", НачалоДня(Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыДеятельностиЕНВД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельностиЕНВД
	|ГДЕ
	|	НЕ ВидыДеятельностиЕНВД.ПометкаУдаления
	|	И ВидыДеятельностиЕНВД.Владелец = &Организация
	|	И (ВидыДеятельностиЕНВД.ДатаПрекращения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ ВидыДеятельностиЕНВД.ДатаПрекращения >= &ДеньПроверки)";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Функция РасходыНаПриобретениеККТ(Период, Организация, РегистрацияВНалоговомОргане = Неопределено)
	
	Если Не ЗначениеЗаполнено(Период) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоКвартала = НачалоКвартала(Период);
	КонецКвартала  = КонецКвартала(Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала);
	Запрос.УстановитьПараметр("КонецКвартала",  КонецКвартала);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СУММА(РасходыНаОнлайнКассыУменьшающиеЕНВДОбороты.СуммаРасход) КАК РасходыНаККТ,
	|	ДокументРасходыНаОнлайнКассы.Модель КАК МодельККТ,
	|	ДокументРасходыНаОнлайнКассы.ЗаводскойНомер КАК ЗаводскойНомерККТ,
	|	ДокументРасходыНаОнлайнКассы.РегистрационныйНомер КАК РегистрационныйНомерККТ,
	|	ДокументРасходыНаОнлайнКассы.ДатаРегистрации КАК ДатаРегистрацииККТ,
	|	ДокументРасходыНаОнлайнКассы.Дата КАК ПериодРасхода
	|ИЗ
	|	РегистрНакопления.РасходыНаОнлайнКассыУменьшающиеЕНВД.Обороты(
	|			&НачалоКвартала,
	|			&КонецКвартала,
	|			,
	|			Организация = &Организация
	|				И &УсловиеПоРегистрацииВНалоговомОргане) КАК РасходыНаОнлайнКассыУменьшающиеЕНВДОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходыНаОнлайнКассыУменьшающиеНалоги КАК ДокументРасходыНаОнлайнКассы
	|		ПО РасходыНаОнлайнКассыУменьшающиеЕНВДОбороты.ДокументРасхода = ДокументРасходыНаОнлайнКассы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументРасходыНаОнлайнКассы.Модель,
	|	ДокументРасходыНаОнлайнКассы.ЗаводскойНомер,
	|	ДокументРасходыНаОнлайнКассы.РегистрационныйНомер,
	|	ДокументРасходыНаОнлайнКассы.ДатаРегистрации,
	|	ДокументРасходыНаОнлайнКассы.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРасхода,
	|	ДатаРегистрацииККТ,
	|	РегистрационныйНомерККТ";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		Если ТипЗнч(РегистрацияВНалоговомОргане) = Тип("Массив") Тогда
			РегистрацииВНалоговыхОрганах = РегистрацияВНалоговомОргане;
		Иначе
			РегистрацииВНалоговыхОрганах = Новый Массив;
			РегистрацииВНалоговыхОрганах.Добавить(РегистрацияВНалоговомОргане);
		КонецЕсли;
		РегистрацииВНалоговыхОрганах.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("РегистрацииВНалоговыхОрганах", РегистрацииВНалоговыхОрганах);
		
		УсловиеПоРегистрацииВНалоговомОргане = "РегистрацияВНалоговомОргане В(&РегистрацииВНалоговыхОрганах)";
	Иначе
		УсловиеПоРегистрацииВНалоговомОргане = "ИСТИНА"
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистрацииВНалоговомОргане", УсловиеПоРегистрацииВНалоговомОргане);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу видов деятельности ЕНВД с показателями для расчета налога
//
// Параметры:
//   Период - Дата - налоговый период
//   Организация - СправочникСсылка.Организации - головная организация, плательщик ЕНВД
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - отбор по налоговому органу
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//     * ВидДеятельности - СправочникСсылка.ВидыДеятельностиЕНВД
//     * Код - код вида деятельности
//     * Наименование - Строка - наименование вида деятельности
//     * Подразделение - СправочникСсылка.ПодразделенияОрганизаций
//     * Адрес - Строка - значения контактной информации в JSON
//     * АдресСтрокой - Строка (200) - представление адреса
//     * КодПоОКТМО - Строка (11)
//     * БазоваяДоходность - Число (10,0) - базовая доходность
//     * ИмяФизическогоПоказателя - имя физического показателя
//     * ФизическийПоказатель1 - Число (10,0) - значение физического показателя в  1-й месяц квартала
//     * ФизическийПоказатель2 - Число (10,0) - значение физического показателя во 2-й месяц квартала
//     * ФизическийПоказатель3 - Число (10,0) - значение физического показателя в  3-й месяц квартала
//     * КорректирующийКоэффициент - Число (4,3) - корректирующий коэффициент К2
//     * НалоговаяСтавка - Число (4,2) - налоговая ставка
//     * ДатаНачала - Дата - дата начала деятельности
//     * ДатаПрекращения - Дата - дата прекращения деятельности
//
Функция ПоказателиВидовДеятельности(Период, Организация, РегистрацияВНалоговомОргане = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Период) Или Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокОрганизаций = Новый Массив; // Все подразделения организации с учетом RLS
	
	ВсяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	Для Каждого ЧастьОрганизации Из ВсяОрганизация Цикл
		Если ДоступныеОрганизации.Найти(ЧастьОрганизации) <> Неопределено Тогда
			СписокОрганизаций.Добавить(ЧастьОрганизации);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокОрганизаций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НачалоКвартала = НачалоКвартала(Период);
	КонецКвартала  = НачалоДня(КонецКвартала(Период));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("НачалоКвартала", НачалоКвартала);
	Запрос.УстановитьПараметр("КонецКвартала", КонецКвартала);
	Для Индекс = 0 По 2 Цикл
		Запрос.УстановитьПараметр(СтрШаблон("Месяц%1", Индекс + 1), ДобавитьМесяц(НачалоКвартала, Индекс));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КорректирующийКоэффициентПоУмолчанию", УчетЕНВДКлиентСервер.КорректирующийКоэффициентПоУмолчанию());
	Запрос.УстановитьПараметр("НалоговаяСтавкаПоУмолчанию", УчетЕНВДКлиентСервер.НалоговаяСтавкаПоУмолчанию());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыДеятельности.Ссылка КАК ВидДеятельности,
	|	ВидыДеятельности.Владелец КАК Организация,
	|	ВидыДеятельности.Наименование КАК Наименование,
	|	ВидыДеятельности.КодВидаДеятельности КАК КодВидаДеятельности,
	|	ВидыДеятельности.Подразделение КАК Подразделение,
	|	ВидыДеятельности.Адрес КАК Адрес,
	|	ВидыДеятельности.АдресСтрокой КАК АдресСтрокой,
	|	ВидыДеятельности.КодПоОКТМО КАК КодПоОКТМО,
	|	ВидыДеятельности.РегистрацияВНалоговомОргане,
	|	ВидыДеятельности.ДатаНачала КАК ДатаНачала,
	|	ВидыДеятельности.ДатаПрекращения КАК ДатаПрекращения
	|ПОМЕСТИТЬ ВТ_ВидыДеятельности
	|ИЗ
	|	Справочник.ВидыДеятельностиЕНВД КАК ВидыДеятельности
	|ГДЕ
	|	НЕ ВидыДеятельности.ПометкаУдаления
	|	И ВидыДеятельности.Владелец В(&СписокОрганизаций)
	|	И (ВидыДеятельности.ДатаПрекращения > &НачалоКвартала
	|			ИЛИ ВидыДеятельности.ДатаПрекращения = &ПустаяДата)
	|	И (ВидыДеятельности.ДатаНачала <= &КонецКвартала
	|			ИЛИ ВидыДеятельности.ДатаНачала = &ПустаяДата)
	|	И &УсловиеПоРегистрацииВНалоговомОргане
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.ВидДеятельности КАК ВидДеятельности,
	|	СУММА(ВложенныйЗапрос.ФизическийПоказатель1) КАК ФизическийПоказатель1,
	|	СУММА(ВложенныйЗапрос.ФизическийПоказатель2) КАК ФизическийПоказатель2,
	|	СУММА(ВложенныйЗапрос.ФизическийПоказатель3) КАК ФизическийПоказатель3
	|ПОМЕСТИТЬ ВТ_ФизическиеПоказатели
	|ИЗ
	|	(ВЫБРАТЬ
	|		ФизическиеПоказатели.Организация КАК Организация,
	|		ФизическиеПоказатели.ВидДеятельности КАК ВидДеятельности,
	|		ФизическиеПоказатели.ФизическийПоказатель КАК ФизическийПоказатель1,
	|		0 КАК ФизическийПоказатель2,
	|		0 КАК ФизическийПоказатель3
	|	ИЗ
	|		РегистрСведений.ФизическиеПоказателиЕНВД.СрезПоследних(
	|				&Месяц1,
	|				Организация В (&СписокОрганизаций)
	|					И ВидДеятельности В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыДеятельности.ВидДеятельности
	|						ИЗ
	|							ВТ_ВидыДеятельности)) КАК ФизическиеПоказатели
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФизическиеПоказатели.Организация,
	|		ФизическиеПоказатели.ВидДеятельности,
	|		0,
	|		ФизическиеПоказатели.ФизическийПоказатель,
	|		0
	|	ИЗ
	|		РегистрСведений.ФизическиеПоказателиЕНВД.СрезПоследних(
	|				&Месяц2,
	|				Организация В (&СписокОрганизаций)
	|					И ВидДеятельности В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыДеятельности.ВидДеятельности
	|						ИЗ
	|							ВТ_ВидыДеятельности)) КАК ФизическиеПоказатели
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФизическиеПоказатели.Организация,
	|		ФизическиеПоказатели.ВидДеятельности,
	|		0,
	|		0,
	|		ФизическиеПоказатели.ФизическийПоказатель
	|	ИЗ
	|		РегистрСведений.ФизическиеПоказателиЕНВД.СрезПоследних(
	|				&Месяц3,
	|				Организация В (&СписокОрганизаций)
	|					И ВидДеятельности В
	|						(ВЫБРАТЬ
	|							ВТ_ВидыДеятельности.ВидДеятельности
	|						ИЗ
	|							ВТ_ВидыДеятельности)) КАК ФизическиеПоказатели) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.ВидДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегиональныеОсобенности.Организация КАК Организация,
	|	РегиональныеОсобенности.ВидДеятельности КАК ВидДеятельности,
	|	РегиональныеОсобенности.КорректирующийКоэффициент,
	|	РегиональныеОсобенности.НалоговаяСтавка
	|ПОМЕСТИТЬ ВТ_РегиональныеОсобенности
	|ИЗ
	|	РегистрСведений.РегиональныеОсобенностиЕНВД.СрезПоследних(
	|			&НачалоКвартала,
	|			Организация В (&СписокОрганизаций)
	|				И ВидДеятельности В
	|					(ВЫБРАТЬ
	|						ВТ_ВидыДеятельности.ВидДеятельности
	|					ИЗ
	|						ВТ_ВидыДеятельности)) КАК РегиональныеОсобенности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДеятельности.ВидДеятельности,
	|	ВидыДеятельности.Наименование,
	|	ВидыДеятельности.Подразделение,
	|	ВидыДеятельности.Адрес,
	|	ВидыДеятельности.АдресСтрокой,
	|	ВидыДеятельности.КодПоОКТМО,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.РегистрацияПоМестуНахожденияОрганизации, ЛОЖЬ) КАК РегистрацияПоМестуНахожденияОрганизации,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.Код, """") КАК Код,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.БазоваяДоходность, 0) КАК БазоваяДоходность,
	|	ЕСТЬNULL(КлассификаторВидовПредпринимательскойДеятельности.ИмяФизическогоПоказателя, """") КАК ИмяФизическогоПоказателя,
	|	ВидыДеятельности.ДатаНачала,
	|	ВидыДеятельности.ДатаПрекращения,
	|	ЕСТЬNULL(ФизическиеПоказатели.ФизическийПоказатель1, 0) КАК ФизическийПоказатель1,
	|	ЕСТЬNULL(ФизическиеПоказатели.ФизическийПоказатель2, 0) КАК ФизическийПоказатель2,
	|	ЕСТЬNULL(ФизическиеПоказатели.ФизическийПоказатель3, 0) КАК ФизическийПоказатель3,
	|	ЕСТЬNULL(РегиональныеОсобенности.КорректирующийКоэффициент, &КорректирующийКоэффициентПоУмолчанию) КАК КорректирующийКоэффициент,
	|	ЕСТЬNULL(РегиональныеОсобенности.НалоговаяСтавка, &НалоговаяСтавкаПоУмолчанию) КАК НалоговаяСтавка,
	|	ВидыДеятельности.РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_ВидыДеятельности КАК ВидыДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовПредпринимательскойДеятельностиЕНВД КАК КлассификаторВидовПредпринимательскойДеятельности
	|		ПО ВидыДеятельности.КодВидаДеятельности = КлассификаторВидовПредпринимательскойДеятельности.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФизическиеПоказатели КАК ФизическиеПоказатели
	|		ПО ВидыДеятельности.Организация = ФизическиеПоказатели.Организация
	|			И ВидыДеятельности.ВидДеятельности = ФизическиеПоказатели.ВидДеятельности
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РегиональныеОсобенности КАК РегиональныеОсобенности
	|		ПО ВидыДеятельности.Организация = РегиональныеОсобенности.Организация
	|			И ВидыДеятельности.ВидДеятельности = РегиональныеОсобенности.ВидДеятельности
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлассификаторВидовПредпринимательскойДеятельности.Код,
	|	ВидыДеятельности.Наименование";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане) Тогда
		
		Если ТипЗнч(РегистрацияВНалоговомОргане) = Тип("Массив") Тогда
			РегистрацииВНалоговыхОрганах = РегистрацияВНалоговомОргане;
		Иначе
			РегистрацииВНалоговыхОрганах = Новый Массив;
			РегистрацииВНалоговыхОрганах.Добавить(РегистрацияВНалоговомОргане);
		КонецЕсли;
		РегистрацииВНалоговыхОрганах.Добавить(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
		
		Запрос.УстановитьПараметр("РегистрацииВНалоговыхОрганах", РегистрацииВНалоговыхОрганах);
		
		УсловиеПоРегистрацииВНалоговомОргане = "ВидыДеятельности.РегистрацияВНалоговомОргане В(&РегистрацииВНалоговыхОрганах)";
		
	Иначе
		УсловиеПоРегистрацииВНалоговомОргане = "ИСТИНА"
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПоРегистрацииВНалоговомОргане", УсловиеПоРегистрацииВНалоговомОргане);
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДеятельности = Запрос.Выполнить().Выгрузить();
	
	// Обнуляем значения физических показателей вне периода применения ЕНВД
	НачалоКвартала = НачалоКвартала(Период);
	Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
		
		Для НомерМесяца = 1 По 3 Цикл
			
			Месяц = ДобавитьМесяц(НачалоКвартала, НомерМесяца - 1);
			
			Если (ЗначениеЗаполнено(ВидДеятельности.ДатаПрекращения) И ВидДеятельности.ДатаПрекращения <= НачалоМесяца(Месяц))
				Или (ЗначениеЗаполнено(ВидДеятельности.ДатаНачала) И НачалоДня(КонецМесяца(Месяц)) < ВидДеятельности.ДатаНачала) Тогда
				ВидДеятельности["ФизическийПоказатель" + НомерМесяца] = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаполнитьАдресПриРегистрацияПоМестуНахожденияОрганизации(Организация, ВидыДеятельности);
	
	Возврат ВидыДеятельности;
	
КонецФункции

// Возвращает имя объекта метаданных
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторДекларации() Экспорт
	
	Возврат "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход";
	
КонецФункции

// Возвращает сведения о допустимости применении в организации - плательщике ЕНВД
// налогового вычета по расходам на приобретение онлайн-касс.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация для определения применимости вычета.
//   Период - Дата - дата, на которую определяется применение вычета.
//
// Возвращаемое значение:
//   Булево - если ИСТИНА, вычет применяется.
//
Функция ПрименяетсяВычетПоОнлайнКассам(Организация, Период) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И Период >= УчетЕНВДКлиентСервер.ДатаНачалаПримененияВычетаНаОнлайнКассы()
		И Период <= УчетЕНВДКлиентСервер.ДатаОкончанияПримененияВычетаНаОнлайнКассы();
	
КонецФункции

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхДекларации2016Кв1(ПоказателиОтчета) Экспорт
	
	КлючиПоказателей = КлючиПоказателейДекларации2016Кв1();
	
	// Раздел 2
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Код, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Индекс, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КодРегиона, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Район, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Город, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НаселенныйПункт, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Улица, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерДома, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерКорпуса, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерОфиса, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КодПоОКТМО, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.БазоваяДоходность, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КорректирующийКоэффициент, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ДатаПостановкиНаУчет, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ДатаСнятияСУчета, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель1, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель2, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель3, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НалоговаяСтавка, Истина, Ложь);
	
	// Раздел 3
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПризнакНалогоплательщика, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СуммаСтраховыхВзносов, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, Истина, Ложь);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхДекларации2018Кв1(ПоказателиОтчета) Экспорт
	
	КлючиПоказателей = КлючиПоказателейДекларации2018Кв1();
	
	// Раздел 2
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Код, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Индекс, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КодРегиона, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Район, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Город, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НаселенныйПункт, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.Улица, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерДома, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерКорпуса, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НомерОфиса, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КодПоОКТМО, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.БазоваяДоходность, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.КорректирующийКоэффициент, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ДатаПостановкиНаУчет, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ДатаСнятияСУчета, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель1, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель2, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ФизическийПоказатель3, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.НалоговаяСтавка, Истина, Ложь);
	
	// Раздел 3
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ПризнакНалогоплательщика, Истина, Ложь);
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СуммаСтраховыхВзносов, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, Истина, Ложь);
	
	// Раздел 4
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.МодельККТ, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ЗаводскойНомерККТ, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.РегистрационныйНомерККТ, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.ДатаРегистрацииККТ, Истина, Ложь);
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, КлючиПоказателей.РасходыНаККТ, Истина, Ложь);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьДекларацию2016Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем Раздел2, Раздел3;
	
	КлючиПоказателей = КлючиПоказателейДекларации2016Кв1();
	
	Период      = НачалоКвартала(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Организация = ПараметрыОтчета.Организация;
	
	ДанныеЗаполнения = ДанныеЗаполненияДекларации(ПараметрыОтчета);
	ВидыДеятельности = ДанныеЗаполнения.ВидыДеятельности;
	
	Если ВидыДеятельности <> Неопределено И Контейнер.Свойство("Раздел2", Раздел2) И ТипЗнч(Раздел2) = Тип("ТаблицаЗначений") Тогда
		
		// Обеспечим нужное количество страниц:
		КоличествоСтраницНужно  = Макс(ВидыДеятельности.Количество(), 1);
		КоличествоСтраницСейчас = Раздел2.Количество();
		
		// - удалим лишние
		Для НомерСтраницы = 1 По КоличествоСтраницСейчас - КоличествоСтраницНужно Цикл
			// a. КоличествоСтраницНужно - это меньше, чем сейчас
			// b. этот индекс на 1 больше, чем наибольший индекс нужной страницы
			Раздел2.Удалить(КоличествоСтраницНужно);
		КонецЦикла;
		
		// - добавим недостающие
		Для НомерСтраницы = 1 По КоличествоСтраницНужно - КоличествоСтраницСейчас Цикл
			ДобавитьСтраницуРазделаДекларации(Раздел2);
		КонецЦикла;
		
		Для Индекс = 0 По ВидыДеятельности.Количество() - 1 Цикл
			
			ВидДеятельности = ДанныеЗаполнения.ВидыДеятельности[Индекс];
			
			ДанныеРаздела2 = Раздел2[Индекс].Данные;
			ДанныеДопСтрокРаздела2 = Раздел2[Индекс].ДанныеДопСтрок;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Код, ВидДеятельности.Код);
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ВидДеятельности.Адрес, ДополнительныеПараметры);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Индекс,          СведенияОбАдресе.Индекс);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодРегиона,      СведенияОбАдресе.КодРегиона);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Район,           СведенияОбАдресе.Район);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Город,           СведенияОбАдресе.Город);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НаселенныйПункт, СведенияОбАдресе.НаселенныйПункт);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Улица,           СведенияОбАдресе.Улица);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерДома,       СведенияОбАдресе.Здание.Номер);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерКорпуса,   ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, ""));
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерОфиса,     ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, ""));
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодПоОКТМО, ВидДеятельности.КодПоОКТМО);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.БазоваяДоходность,         ВидДеятельности.БазоваяДоходность);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КорректирующийКоэффициент, ВидДеятельности.КорректирующийКоэффициент);
			
			Если НачалоДня(ПараметрыОтчета.ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаНачала И ВидДеятельности.ДатаНачала <= НачалоДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
			КонецЕсли;
			
			Если НачалоДня(ПараметрыОтчета.ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаПрекращения И ВидДеятельности.ДатаПрекращения <= НачалоДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
			КонецЕсли;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель1, ВидДеятельности.ФизическийПоказатель1);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель2, ВидДеятельности.ФизическийПоказатель2);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель3, ВидДеятельности.ФизическийПоказатель3);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.НалоговаяСтавка, ВидДеятельности.НалоговаяСтавка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел3", Раздел3) И ТипЗнч(Раздел3) = Тип("Структура") Тогда
		
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
		ИспользуетсяТрудНаемныхРаботников = ЭтоЮрЛицо Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация,
															Период,
															КонецКвартала(Период));
		
		Раздел3.Вставить(КлючиПоказателей.ПризнакНалогоплательщика, ?(ИспользуетсяТрудНаемныхРаботников, "1", "2"));
		
		УменьшатьНалогНаВзносыИПРаботодателя = Не ЭтоЮрЛицо И НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период);
		
		РасходыЕНВД = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыЕНВДЗаКвартал(Организация, Период, ПараметрыОтчета.РегистрацииВНО);
		
		СуммаСтраховыхВзносов       = РасходыЕНВД.СтраховыеВзносы + РасходыЕНВД.Больничные + РасходыЕНВД.ДобровольноеСтрахование;
		СуммаСтраховыхВзносовЗаСебя = РасходыЕНВД.ФиксированныеВзносыИП;
		
		Если ИспользуетсяТрудНаемныхРаботников Тогда
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов, СуммаСтраховыхВзносов);
			Если УменьшатьНалогНаВзносыИПРаботодателя Тогда
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
			Иначе
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, 0);
			КонецЕсли;
		Иначе
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов,       0);
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * ДатаНачалаПериодаОтчета - Дата
//    * ДатаКонцаПериодаОтчета -  Дата
//    * Организация - СправочникСсылка.Организации
//    * РегистрацииВНО - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьДекларацию2018Кв1(ПараметрыОтчета, Контейнер) Экспорт
	
	Перем Раздел2, Раздел3, Раздел4;
	
	КлючиПоказателей = КлючиПоказателейДекларации2018Кв1();
	
	Период      = НачалоКвартала(ПараметрыОтчета.ДатаНачалаПериодаОтчета);
	Организация = ПараметрыОтчета.Организация;
	
	ДанныеЗаполнения         = ДанныеЗаполненияДекларации(ПараметрыОтчета);
	ВидыДеятельности         = ДанныеЗаполнения.ВидыДеятельности;
	РасходыНаПриобретениеККТ = ДанныеЗаполнения.РасходыНаПриобретениеККТ;
	
	Если ВидыДеятельности <> Неопределено И Контейнер.Свойство("Раздел2", Раздел2) И ТипЗнч(Раздел2) = Тип("ТаблицаЗначений") Тогда
		
		// Обеспечим нужное количество страниц:
		КоличествоСтраницНужно  = Макс(ВидыДеятельности.Количество(), 1);
		КоличествоСтраницСейчас = Раздел2.Количество();
		
		// - удалим лишние
		Для НомерСтраницы = 1 По КоличествоСтраницСейчас - КоличествоСтраницНужно Цикл
			// a. КоличествоСтраницНужно - это меньше, чем сейчас
			// b. этот индекс на 1 больше, чем наибольший индекс нужной страницы
			Раздел2.Удалить(КоличествоСтраницНужно);
		КонецЦикла;
		
		// - добавим недостающие
		Для НомерСтраницы = 1 По КоличествоСтраницНужно - КоличествоСтраницСейчас Цикл
			ДобавитьСтраницуРазделаДекларации(Раздел2);
		КонецЦикла;
		
		Для Индекс = 0 По ВидыДеятельности.Количество() - 1 Цикл
			
			ВидДеятельности = ДанныеЗаполнения.ВидыДеятельности[Индекс];
			
			ДанныеРаздела2 = Раздел2[Индекс].Данные;
			ДанныеДопСтрокРаздела2 = Раздел2[Индекс].ДанныеДопСтрок;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Код, ВидДеятельности.Код);
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ВидДеятельности.Адрес, ДополнительныеПараметры);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Индекс,          СведенияОбАдресе.Индекс);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодРегиона,      СведенияОбАдресе.КодРегиона);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Район,           СведенияОбАдресе.Район);
			ДанныеРаздела2.Вставить(КлючиПоказателей.Город,           СведенияОбАдресе.Город);
			
			// Отдельное поле для территории в актуальной форме декларации отсутствует.
			// Добавляем территорию в "Населенный пункт".
			ДанныеНаселенногоПункта = Новый Массив;
			Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
				ДанныеНаселенногоПункта.Добавить(СокрЛП(СведенияОбАдресе.НаселенныйПункт));
			КонецЕсли;
			Если ЗначениеЗаполнено(СведенияОбАдресе.Территория) Тогда
				ДанныеНаселенногоПункта.Добавить(СокрЛП(СведенияОбАдресе.Территория));
			КонецЕсли;
			ДанныеРаздела2.Вставить(КлючиПоказателей.НаселенныйПункт, СтрСоединить(ДанныеНаселенногоПункта, " "));
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.Улица,           СведенияОбАдресе.Улица);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерДома,       СведенияОбАдресе.Здание.Номер);
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерКорпуса,   ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, ""));
			ДанныеРаздела2.Вставить(КлючиПоказателей.НомерОфиса,     ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, ""));
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.КодПоОКТМО, ВидДеятельности.КодПоОКТМО);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.БазоваяДоходность,         ВидДеятельности.БазоваяДоходность);
			ДанныеРаздела2.Вставить(КлючиПоказателей.КорректирующийКоэффициент, ВидДеятельности.КорректирующийКоэффициент);
			
			Если НачалоДня(ПараметрыОтчета.ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаНачала И ВидДеятельности.ДатаНачала <= НачалоДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, ВидДеятельности.ДатаНачала);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ПостановкаНаУчетВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаПостановкиНаУчет, Дата(1, 1, 1));
			КонецЕсли;
			
			Если НачалоДня(ПараметрыОтчета.ДатаНачалаПериодаОтчета) < ВидДеятельности.ДатаПрекращения И ВидДеятельности.ДатаПрекращения <= НачалоДня(ПараметрыОтчета.ДатаКонцаПериодаОтчета) Тогда
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, ВидДеятельности.ДатаПрекращения);
			Иначе
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Да, ПредставлениеФлажка(Ложь));
				ДанныеРаздела2.Вставить(КлючиПоказателей.СнятиеСУчетаВОтчетномПериоде_Нет, ПредставлениеФлажка(Истина));
				ДанныеРаздела2.Вставить(КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
				ВставитьЗначениеДопСтроки(ДанныеДопСтрокРаздела2, КлючиПоказателей.ДатаСнятияСУчета, Дата(1, 1, 1));
			КонецЕсли;
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель1, ВидДеятельности.ФизическийПоказатель1);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель2, ВидДеятельности.ФизическийПоказатель2);
			ДанныеРаздела2.Вставить(КлючиПоказателей.ФизическийПоказатель3, ВидДеятельности.ФизическийПоказатель3);
			
			ДанныеРаздела2.Вставить(КлючиПоказателей.НалоговаяСтавка, ВидДеятельности.НалоговаяСтавка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел4_ДанныеДопСтрок", Раздел4) И ТипЗнч(Раздел4) = Тип("ТаблицаЗначений") Тогда
		
		Раздел4.Очистить();
		
		Если ЗначениеЗаполнено(РасходыНаПриобретениеККТ) Тогда
		
			Для Каждого СтрокаДанных Из РасходыНаПриобретениеККТ Цикл
				СтрокаКонтейнера = Раздел4.Добавить();
				ДанныеСтроки = Новый Структура();
				ДанныеСтроки.Вставить(КлючиПоказателей.МодельККТ,               СтрокаДанных.МодельККТ);
				ДанныеСтроки.Вставить(КлючиПоказателей.ЗаводскойНомерККТ,       СтрокаДанных.ЗаводскойНомерККТ);
				ДанныеСтроки.Вставить(КлючиПоказателей.РегистрационныйНомерККТ, СтрокаДанных.РегистрационныйНомерККТ);
				ДанныеСтроки.Вставить(КлючиПоказателей.ДатаРегистрацииККТ,      СтрокаДанных.ДатаРегистрацииККТ);
				ДанныеСтроки.Вставить(КлючиПоказателей.РасходыНаККТ,            СтрокаДанных.РасходыНаККТ);
				ЗаполнитьЗначенияСвойств(СтрокаКонтейнера, ДанныеСтроки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Контейнер.Свойство("Раздел3", Раздел3) И ТипЗнч(Раздел3) = Тип("Структура") Тогда
		
		ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);
		ИспользуетсяТрудНаемныхРаботников = ЭтоЮрЛицо Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация,
															Период,
															КонецКвартала(Период));
		
		Раздел3.Вставить(КлючиПоказателей.ПризнакНалогоплательщика, ?(ИспользуетсяТрудНаемныхРаботников, "1", "2"));
		
		УменьшатьНалогНаВзносыИПРаботодателя = Не ЭтоЮрЛицо И НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период);
		
		РасходыЕНВД = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыЕНВДЗаКвартал(
			Организация, Период, ПараметрыОтчета.РегистрацииВНО);
		
		РасходыЕНВДПослеОтмены = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыУменьшающиеЕНВДПослеОтмены(
			Организация, Период, ПараметрыОтчета.РегистрацииВНО);
		
		СуммаСтраховыхВзносов = РасходыЕНВД.СтраховыеВзносы + РасходыЕНВД.Больничные + РасходыЕНВД.ДобровольноеСтрахование
			+ РасходыЕНВДПослеОтмены.СтраховыеВзносы + РасходыЕНВДПослеОтмены.Больничные + РасходыЕНВДПослеОтмены.ДобровольноеСтрахование;
		СуммаСтраховыхВзносовЗаСебя = РасходыЕНВД.ФиксированныеВзносыИП + РасходыЕНВДПослеОтмены.ФиксированныеВзносыИП;
		
		Если ИспользуетсяТрудНаемныхРаботников Тогда
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов, СуммаСтраховыхВзносов);
			Если УменьшатьНалогНаВзносыИПРаботодателя Тогда
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
			Иначе
				Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, 0);
			КонецЕсли;
		Иначе
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносов,       0);
			Раздел3.Вставить(КлючиПоказателей.СуммаСтраховыхВзносовЗаСебя, СуммаСтраховыхВзносовЗаСебя);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД1_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1, ПоказателиОтчета);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД2_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРИМЕНЕНЕНИ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2, ПоказателиОтчета);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД3_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3, ПоказателиОтчета);
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру показателей отчета
//
// Параметры:
//   ПоказателиОтчета - Структура
//
Процедура ПолучитьСведенияОПоказателяхЗаявленияЕНВД4_2014(ПоказателиОтчета) Экспорт
	
	РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, "ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД", Истина, Ложь);
	
	ПолучитьСведенияОбОбщихПоказателяхЗаявлений(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4, ПоказателиОтчета);
	
КонецПроцедуры

Процедура ПолучитьСведенияОбОбщихПоказателяхЗаявлений(ВидЗаявления, ПоказателиОтчета)
	
	КоличествоВидовДеятельностиНаЛисте = КоличествоВидовДеятельностиНаЛистеЗаявления();
	
	Для НомерВидаДеятельности = 1 По КоличествоВидовДеятельностиНаЛисте Цикл
		
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("КОД_ВИДА_ДЕЯТЕЛЬНОСТИ%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ИНДЕКС%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("РЕГИОН%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("РАЙОН%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("ГОРОД%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("НаселенныйПункт%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Улица%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Дом%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Корпус%1", НомерВидаДеятельности), Истина, Ложь);
		РегламентированнаяОтчетность.ВставитьПоказательВСтруктуру(ПоказателиОтчета, СтрШаблон("Квартира%1", НомерВидаДеятельности), Истина, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает имя объекта метаданных
//
// Параметры:
//   ВидЗаявления - ПеречислениеСсылка.ВидыУведомленийОСпецрежимахНалогообложения
//
// Возвращаемое значение:
//   Строка
//
Функция ИдентификаторЗаявления(ВидЗаявления) Экспорт
	
	Если ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД1"
	ИначеЕсли ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД2"
	ИначеЕсли ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД3"
	ИначеЕсли ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4 Тогда
		Идентификатор = "РегламентированноеУведомлениеЕНВД4"
	КонецЕсли;
	
	Возврат Идентификатор;
	
КонецФункции

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД1_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД2_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД3_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

// Заполняет переданную в виде контейнера структуру данных отчета
//
// Параметры:
//   ПараметрыОтчета - Структура
//    * Организация - СправочникСсылка.Организации
//    * КодНалоговогоОргана - СправочникСсылка.РегистрацииВНалоговомОргане
//   Контейнер - Структура
//
Процедура ЗаполнитьЗаявлениеЕНВД4_2014(ПараметрыОтчета, Контейнер) Экспорт
	
	ЗаполнитьЗаявление(Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4, ПараметрыОтчета, Контейнер)
	
КонецПроцедуры

Процедура ЗаполнитьЗаявление(ВидЗаявления, ПараметрыОтчета, Контейнер)
	
	ЭтоЗаявлениеОПостановкеНаУчет = ЭтоЗаявлениеОПостановкеНаУчет(ВидЗаявления);
	ЭтоЗаявлениеОСнятииСУчета = ЭтоЗаявлениеОСнятииСУчета(ВидЗаявления);
	
	ДанныеЗаполнения = ДанныеЗаполненияЗаявлений(ПараметрыОтчета);
	
	ДатаНачала = Дата(1, 1, 1);
	ДатаПрекращения = Дата(1, 1, 1);
	
	ТаблицаКонтейнера = Контейнер.ДопСтроки;
	ТаблицаКонтейнера.Очистить();
	
	ВидыДеятельности = ДанныеЗаполнения.ВидыДеятельности;
	
	ОшибкаВПериодеПримененияЕНВД = Ложь;
	
	Если ВидыДеятельности <> Неопределено  Тогда
		
		КоличествоВидовДеятельностиНаЛисте = КоличествоВидовДеятельностиНаЛистеЗаявления();
		
		НомерВидаДеятельности = 1;
		НоваяСтрока = ТаблицаКонтейнера.Добавить();
		
		Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
			
			НоваяСтрока[СтрШаблон("КОД_ВИДА_ДЕЯТЕЛЬНОСТИ%1", НомерВидаДеятельности)] = ВидДеятельности.Код;
			
			ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ВидДеятельности.Адрес, ДополнительныеПараметры);
			
			НоваяСтрока[СтрШаблон("ИНДЕКС%1", НомерВидаДеятельности)] = СведенияОбАдресе.Индекс;
			НоваяСтрока[СтрШаблон("РЕГИОН%1", НомерВидаДеятельности)] = СведенияОбАдресе.КодРегиона;
			НоваяСтрока[СтрШаблон("РАЙОН%1", НомерВидаДеятельности)] = СведенияОбАдресе.Район;
			НоваяСтрока[СтрШаблон("ГОРОД%1", НомерВидаДеятельности)] = СведенияОбАдресе.Город;
			НоваяСтрока[СтрШаблон("НаселенныйПункт%1", НомерВидаДеятельности)] = СведенияОбАдресе.НаселенныйПункт;
			НоваяСтрока[СтрШаблон("Улица%1", НомерВидаДеятельности)] = СведенияОбАдресе.Улица;
			НоваяСтрока[СтрШаблон("Дом%1", НомерВидаДеятельности)] = СведенияОбАдресе.Здание.Номер;
			НоваяСтрока[СтрШаблон("Корпус%1", НомерВидаДеятельности)] = ?(СведенияОбАдресе.Корпуса.Количество() > 0, СведенияОбАдресе.Корпуса[0].Номер, "");
			НоваяСтрока[СтрШаблон("Квартира%1", НомерВидаДеятельности)] = ?(СведенияОбАдресе.Помещения.Количество() > 0, СведенияОбАдресе.Помещения[0].Номер, "");
			
			Если НомерВидаДеятельности < КоличествоВидовДеятельностиНаЛисте Тогда
				НомерВидаДеятельности = НомерВидаДеятельности + 1;
			Иначе
				НомерВидаДеятельности = 1;
				НоваяСтрока = ТаблицаКонтейнера.Добавить();
			КонецЕсли;
			
			Если ЭтоЗаявлениеОПостановкеНаУчет И ЗначениеЗаполнено(ВидДеятельности.ДатаНачала) Тогда
				Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
					ДатаНачала = ВидДеятельности.ДатаНачала;
				ИначеЕсли ДатаНачала <> ВидДеятельности.ДатаНачала Тогда
					ОшибкаВПериодеПримененияЕНВД = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоЗаявлениеОСнятииСУчета И ЗначениеЗаполнено(ВидДеятельности.ДатаПрекращения) Тогда
				Если Не ЗначениеЗаполнено(ДатаПрекращения) Тогда
					ДатаПрекращения = ВидДеятельности.ДатаПрекращения;
				ИначеЕсли ДатаПрекращения <> ВидДеятельности.ДатаПрекращения Тогда
					ОшибкаВПериодеПримененияЕНВД = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОшибкаВПериодеПримененияЕНВД Тогда
		Если ЭтоЗаявлениеОПостановкеНаУчет Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Даты начала примененния ЕНВД не совпадают'"));
		КонецЕсли;
		Если ЭтоЗаявлениеОСнятииСУчета Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата прекращения примененния ЕНВД не совпадают'"));
		КонецЕсли;
	КонецЕсли;
	
	ТитульныйЛист = Контейнер.Титульный;
	
	Если ЭтоЗаявлениеОПостановкеНаУчет Тогда
		ТитульныйЛист.Вставить("ДАТА_ПРИМЕНЕНЕНИ_ЕНВД", ДатаНачала);
	КонецЕсли;
	
	Если ЭтоЗаявлениеОСнятииСУчета Тогда
		ТитульныйЛист.Вставить("ДАТА_ПРЕКРАЩЕНИЯ_ЕНВД", ДатаПрекращения);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает элемент КПП по виду организации
//
Функция КодПричиныПостановкиНаУчет(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИностраннаяОрганизация") Тогда
		Код = "77"; // Иностранная организация при постановке на учет в качестве плательщика единого налога на вмененный доход
	Иначе
		Код = "35"; // Российская организация при постановке на учет в качестве плательщика единого налога на вмененный доход
	КонецЕсли;
	
	Возврат Код
	
КонецФункции

// Отменяет начисление налога при изменении показателей для расчета
//
Процедура ОтменитьНачислениеЕНВД(Организация, Период) Экспорт
	
	РегламентнаяОперация = Документы.РегламентнаяОперация.НайтиДокумент(
		КонецКвартала(Период), Организация, Перечисления.ВидыРегламентныхОпераций.РасчетЕНВД);
	
	Если Не ЗначениеЗаполнено(РегламентнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РегламентнаяОперация, "Состояние");
	Если СостояниеОперации = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
		ДокументОбъект = РегламентнаяОперация.ПолучитьОбъект();
		ДокументОбъект.ОтменитьОперацию();
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаНачалаПоддержкиЕНВД() Экспорт
	
	Возврат Дата('20150101');
	
КонецФункции

Функция НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Период) Экспорт
	
	Возврат Период >= Дата('20170101'); // Действует статья 346.32 НК РФ в редакции федерального закона от 2 июня 2016 г. N 178-ФЗ.
	
КонецФункции

// Возвращает границы периода после отмены ЕНВД, в течение которого могут оплачиваться расходы, уменьшающие налог
// за последний квартал применения ЕНВД.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация (границы периода могут зависеть от вида организации).
//
// Возвращаемое значение:
//   Структура:
//    * НачалоПериода - Дата - начало периода уплаты расходов, уменьшающих ЕНВД после отмены.
//    * КонецПериода  - Дата - окончание периода уплаты расходов, уменьшающих ЕНВД после отмены.
//
Функция ПериодУменьшенияЕНВДПослеОтмены(Организация) Экспорт
	
	Результат = Новый Структура("НачалоПериода, КонецПериода", Дата(1, 1, 1), Дата(1, 1, 1));
	
	ДатаОтменыЕНВД = УчетЕНВДКлиентСервер.ДатаОтменыЕНВД();
	
	Результат.НачалоПериода = НачалоКвартала(ДатаОтменыЕНВД);
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		
		// Для организаций считаем, что все взносы за сотрудников, исчисленные в прошлом году,
		// точно будут уплачены до конца первого квартала следующего года.
		Результат.КонецПериода = КонецКвартала(ДатаОтменыЕНВД);
		
	Иначе
		
		// ИП могут уплачивать взносы за себя с доходов по 1 июля следующего года.
		
		СрокиУплатыВзносовЗаСебя = УчетСтраховыхВзносовИП.ГраницыПериодаУплатыСтраховыхВзносов(
			НачалоГода(ДатаОтменыЕНВД) - 1, // Последний год применения ЕНВД.
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
		
		Результат.КонецПериода = КонецКвартала(СрокиУплатыВзносовЗаСебя.КонецПериода);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет возможность уменьшения налога за последний квартал применения ЕНВД на расходы переданного периода,
// осуществленнные (оплаченные) даннной организацией.
//
//
// Параметры:
//  Организация - СправочникСсылка.Организации
//  Период  -     Дата - дата в пределах проверяемого квартала
//
// Возвращаемое значение:
//   Булево - если Истина, организация уменьшает налог за последний квартал действия ЕНВД
//            на расходы, оплаченные в заданном периоде.
//
Функция РасходыПериодаУменьшаютЕНВДПослеОтмены(Организация, Период) Экспорт
	
	ПериодУменьшенияЕНВДПослеОтмены = ПериодУменьшенияЕНВДПослеОтмены(Организация);
	
	ПоследнийДеньДействияЕНВД = УчетЕНВДКлиентСервер.ПоследнийДеньДействияЕНВД();
	
	НачалоПериодаПроверкиЕНВД    = НачалоКвартала(ПоследнийДеньДействияЕНВД);
	ОкончаниеПериодаПроверкиЕНВД = КонецКвартала(ПоследнийДеньДействияЕНВД);
	
	Возврат Период >= ПериодУменьшенияЕНВДПослеОтмены.НачалоПериода
		И Период <= ПериодУменьшенияЕНВДПослеОтмены.КонецПериода
		И УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериодаПроверкиЕНВД, ОкончаниеПериодаПроверкиЕНВД);
	
КонецФункции

Функция ОрганизацииПрименяющиеТолькоЕНВД(Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период, ) КАК НастройкиСистемыНалогообложенияСрезПоследних
	|ГДЕ
	|	НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяОсобыйПорядокНалогообложения
	|	И НастройкиСистемыНалогообложенияСрезПоследних.ПлательщикЕНВД";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОтражениеДоходов

// Возвращает список вариантов отражения доходов, допустимых для организации-плательщика ЕНВД на переданную дату
// с учетом совмещения с другими режимами и настроек функциональности.
// Для организаций-неплательщиков ЕНВД возвращает пустой список.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация.
//  Период       - Дата - дата, на которую требуются сведения.
//
// Возвращаемое значение:
//   СписокЗначений   - список с перечнем допустимых вариантов отражения доходов, содержимое:
//                       * значения - порядок отражения доходов, указывается в документах поступления денежных средств;
//                       * представления - представления вариантов отражения доходов для отображения в списках выбора.
//
Функция ДопустимыеВариантыОтраженияДоходов(Организация, Период) Экспорт
	
	СписокВариантов = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Период) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	Если Не (УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(Организация, Период)
			И УчетнаяПолитика.ПлательщикЕНВД(Организация, Период)) Тогда
		Возврат СписокВариантов;
	КонецЕсли;
	
	СписокВариантов.Добавить(Перечисления.ПорядокОтраженияАвансов.ДоходЕНВД, НСтр("ru = 'Доход ЕНВД'"));
	
	Возврат СписокВариантов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РегламентноеНачислениеЕНВД

// Описывает контекст, в котором выполняется расчет ЕНВД - организацию, период и т.п.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  ПериодРасчета    - Дата - дата из квартала, в котором рассчитывается налог.
//
// Возвращаемое значение:
//  Структура    - состав см. в теле функции
//  Неопределено - расчет не имеет смысла: в указанный период организация еще не зарегистрирована
//                 или не является плательщиком ЕНВД.
//
Функция НовыйКонтекстРасчетаНалога(Организация, ПериодРасчета) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаРегистрации = Справочники.Организации.ДатаРегистрацииОрганизации(Организация);
	
	Если КонецКвартала(ПериодРасчета) < ДатаРегистрации Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УменьшениеЕНВДПослеОтмены = РасходыПериодаУменьшаютЕНВДПослеОтмены(Организация, ПериодРасчета);
	
	Если УменьшениеЕНВДПослеОтмены Тогда
		// После отмены ЕНВД расчет налога возможен только за последний налоговый период применения ЕНВД.
		ПоследнийДеньЕНВД = УчетЕНВДКлиентСервер.ПоследнийДеньДействияЕНВД();
		
		НалоговыйПериод = ПоследнийДеньЕНВД;
		
		НачалоПериода = НачалоКвартала(ПоследнийДеньЕНВД);
		КонецПериода  = КонецКвартала(ПоследнийДеньЕНВД);
	Иначе
		НалоговыйПериод = ПериодРасчета;
		
		НачалоПериода = НачалоКвартала(ПериодРасчета);
		КонецПериода  = КонецКвартала(ПериодРасчета);
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Организация, НачалоПериода, КонецПериода) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстРасчета = Новый Структура;
	
	КонтекстРасчета.Вставить("Организация", Организация);
	КонтекстРасчета.Вставить("Период",      НалоговыйПериод);
	
	КонтекстРасчета.Вставить("ПериодРасчета", ПериодРасчета);
	
	// Границы периода, за который рассчитывается налог.
	КонтекстРасчета.Вставить("НачалоПериода", НачалоПериода);
	КонтекстРасчета.Вставить("КонецПериода",  КонецПериода);
	
	КонтекстРасчета.Вставить("УменьшениеЕНВДПослеОтмены", УменьшениеЕНВДПослеОтмены);
	
	// Границы периода, за который необходимо получать уменьшающие налог расходы.
	// При перерасчете налога после отмены ЕНВД расходы необходимо учесть не только расходы налогового периода,
	// но и расходы, оплаченные в следующих кварталах, но относящиеся к периоду применения ЕНВД.
	КонтекстРасчета.Вставить("НачалоПериодаАнализаРасходов", НачалоПериода);
	КонтекстРасчета.Вставить("КонецПериодаАнализаРасходов",  КонецКвартала(ПериодРасчета)); // Конец квартала, в котором производим перерасчет.
	
	КонтекстРасчета.Вставить("ЭтоИндивидуальныйПредприниматель",
		НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация));
	
	КонтекстРасчета.Вставить("ИПИспользуетТрудНаемныхРаботников",
		УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Организация, НачалоПериода, КонецПериода));
	
	КонтекстРасчета.Вставить("ПрименяетсяВычетПоОнлайнКассам",
		УчетЕНВД.ПрименяетсяВычетПоОнлайнКассам(Организация, НалоговыйПериод));
	
	Возврат КонтекстРасчета;
	
КонецФункции

// Рассчитывает налог к уплате за период в разрезе налоговых инспекций.
//
// Параметры:
//  КонтекстРасчета - Структура - контекст, в котором выполняется расчет (организация, период и т.п.),
//                                см. НовыйКонтекстРасчета().
//  ПоказателиВидовДеятельности - ТаблицаЗначений - параметры видов деятельности ЕНВД, влияющие на вмененный налог,
//                                см. ПоказателиВидовДеятельности().
//
// Возвращаемое значение:
//   ТаблицаЗначений   - суммы вмененного налога, налоговых вычетов и налога к уплате в разрезе инспекций,
//                       см. НоваяТаблицаРасчетаСуммНалога().
//
Функция ПолучитьРасчетНалога(КонтекстРасчета, ПоказателиВидовДеятельности) Экспорт
	
	РасчетСуммНалога = НоваяТаблицаРасчетаСуммНалога();
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат РасчетСуммНалога;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПоказателиВидовДеятельности) Тогда
		Возврат РасчетСуммНалога;
	КонецЕсли;
	
	// Федеральный закон № 172-ФЗ от 08.06.2020
	// В 2020 году некоторые организации и ИП освобождаются от уплаты налога за 2-й квартал
	// В этом случае начисление налога не производится.
	ПериодОсвобожденияОтНалогов = НалоговыйУчет.ПериодОсвобожденияОтНалоговПострадавшимОтКоронавируса();
	Если НалоговыйУчет.ДеятельностьОтнесенаКПострадавшимОтКоронавируса(КонтекстРасчета.Организация)
		 И ПериодОсвобожденияОтНалогов.Начало <= КонтекстРасчета.КонецПериода 
		 И КонтекстРасчета.КонецПериода <= ПериодОсвобожденияОтНалогов.Конец Тогда
		Возврат РасчетСуммНалога;
	КонецЕсли;
	
	// Суммы вмененного налога по физическим показателям, без налоговых вычетов.
	РассчитатьВмененныйНалогПоИнспекциям(КонтекстРасчета, ПоказателиВидовДеятельности, РасчетСуммНалога);
	
	// Вычеты из вмененного налога применяются последовательно.
	
	// В первую очередь налог уменьшается на суммы регулярных расходов:
	// страховые взносы, больничные за счет работодателя и добровольное страхование работников.
	ПрименитьРегулярныйНалоговыйВычет(КонтекстРасчета, РасчетСуммНалога);
	
	// После вычета регулярных расходов оставшийся налог может быть уменьшен на сумму расходов на покупку онлайн-касс.
	// Эти расходы уменьшают налог в течение нескольких налоговых периодов, поэтому списание расходов требуется регистрировать.
	ПрименитьВычетПоОнлайнКассам(КонтекстРасчета, РасчетСуммНалога);
	
	Возврат РасчетСуммНалога;
	
КонецФункции

// Рассчитывает налог ЕНВД по данным информационной базы и возвращает таблицы
// для отражения начисленного налога в проводках и вспомогательных регистрах.
//
// Параметры:
//  КонтекстРасчета - Структура - контекст, в котором выполняется расчет (организация, период и т.п.),
//                                см. НовыйКонтекстРасчета().
//  Отказ - Булево  - устанавливается Истина, если при расчете налога выявлены учетные ошибки.
//  Ошибки - ДеревоЗначений - коллекция для регистрации ошибок расчета,
//                            см. ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках().
//
// Возвращаемое значение:
//  Структура    - содержит таблицы для отражения начисленного налога в бухучете
//                 и для списания учтенных при уменьшении налога расходов на онлайн-кассы:
//                  * Проводки             - см. НоваяТаблицаНачисленияЕНВД()
//                  * РасходыНаОнлайнКассы - см. НоваяТаблицаСписанияРасходовНаОнлайнКассы()
Функция ПодготовитьТаблицыРасчетаЕНВД(КонтекстРасчета, Отказ, Ошибки) Экспорт
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("Проводки",             НоваяТаблицаНачисленияЕНВД());
	РезультатРасчета.Вставить("РасходыНаОнлайнКассы", НоваяТаблицаСписанияРасходовНаОнлайнКассы());
	
	Если КонтекстРасчета = Неопределено Тогда
		Возврат РезультатРасчета;
	КонецЕсли;
	
	Если КонтекстРасчета.УменьшениеЕНВДПослеОтмены Тогда
		// Расчет корректировки налога с учетом расходов, оплаченных после отмены ЕНВД, производится отдельно.
		Возврат РезультатРасчета;
	КонецЕсли;
	
	ПоказателиВидовДеятельности = ПоказателиВидовДеятельности(КонтекстРасчета.Период, КонтекстРасчета.Организация);
	
	Если Не ЗначениеЗаполнено(ПоказателиВидовДеятельности) Тогда
		Возврат РезультатРасчета;
	КонецЕсли;
	
	Если ВыявитьОшибкиПоказателейЕНВД(Ошибки, КонтекстРасчета.Период, ПоказателиВидовДеятельности) Тогда
		Отказ = Истина;
		Возврат РезультатРасчета;
	КонецЕсли;
	
	РасчетСуммНалога = ПолучитьРасчетНалога(КонтекстРасчета, ПоказателиВидовДеятельности);
	
	// Проводки по начислению ЕНВД с учетом всех вычетов.
	
	ПредставлениеНалоговогоПериода
		= ПредставлениеПериода(КонтекстРасчета.НачалоПериода, КонтекстРасчета.КонецПериода, "ФП=Истина");
	
	СодержаниеПроводки = СтрШаблон(
		НСтр("ru = 'Начислен единый налог на вмененный доход (ЕНВД) за %1'"),
		ПредставлениеНалоговогоПериода);
	
	Для Каждого РасчетПоИнспекции Из РасчетСуммНалога Цикл
		
		Если РасчетПоИнспекции.СуммаНалогаКУплате = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = РезультатРасчета.Проводки.Добавить();
		
		Проводка.РегистрацияВНалоговомОргане = РасчетПоИнспекции.РегистрацияВНалоговомОргане;
		Проводка.СчетДт                      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
		Проводка.СчетКт                      = ПланыСчетов.Хозрасчетный.ЕНВД;
		Проводка.ПрибылиИУбытки              = Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		Проводка.ВидыПлатежейВГосБюджет      = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Проводка.Сумма                       = РасчетПоИнспекции.СуммаНалогаКУплате;
		Проводка.Содержание                  = СодержаниеПроводки;
		
	КонецЦикла;
	
	// Списание расходов на онлайн-кассы.
	
	Для Каждого РасчетПоИнспекции Из РасчетСуммНалога Цикл
		
		Для Каждого УчтенныйРасход Из РасчетПоИнспекции.УчтенныеРасходыНаОнлайнКассы Цикл
			
			СтрокаСписания = РезультатРасчета.РасходыНаОнлайнКассы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСписания, РасчетПоИнспекции);
			ЗаполнитьЗначенияСвойств(СтрокаСписания, УчтенныйРасход);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РезультатРасчета;
	
КонецФункции

// Рассчитывает суммы корректировки начисленного налога за последний налоговый период применения ЕНВД
// с учетом уменьшающих расходов, оплаченных после завершения последнего налогового периода.
//
// Параметры:
//  КонтекстРасчета - Структура - контекст, в котором выполняется расчет (организация, период и т.п.),
//                                см. НовыйКонтекстРасчета().
//  Отказ - Булево  - устанавливается Истина, если при расчете налога выявлены учетные ошибки.
//  Ошибки - ДеревоЗначений - коллекция для регистрации ошибок расчета,
//                            см. ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках().
//
// Возвращаемое значение:
//  - ТаблицаЗначений - см. НоваяТаблицаНачисленияЕНВД() - таблица проводок корректировки налога.
//  - Неопределено - если корректировка налога не требуется либо невозможна.
//
Функция ПодготовитьПроводкиКорректировкиЕНВДПослеОтмены(КонтекстРасчета, Отказ, Ошибки) Экспорт
	
	Если КонтекстРасчета = Неопределено Или Не КонтекстРасчета.УменьшениеЕНВДПослеОтмены Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказателиВидовДеятельности = ПоказателиВидовДеятельности(КонтекстРасчета.Период, КонтекстРасчета.Организация);
	
	Если Не ЗначениеЗаполнено(ПоказателиВидовДеятельности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВыявитьОшибкиПоказателейЕНВД(Ошибки, КонтекстРасчета.Период, ПоказателиВидовДеятельности) Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	КорректирующиеПроводки = НоваяТаблицаНачисленияЕНВД();
	
	РасчетСуммНалога = ПолучитьРасчетНалога(КонтекстРасчета, ПоказателиВидовДеятельности);
	
	Корректировка = РассчитатьКорректировкуНалогаПослеОтмены(КонтекстРасчета, РасчетСуммНалога);
	
	// Проводки по начислению ЕНВД с учетом всех вычетов.
	
	ПредставлениеНалоговогоПериода = ПредставлениеПериода(
		КонтекстРасчета.НачалоПериода,
		КонтекстРасчета.КонецПериода,
		"ФП=Истина");
	ПредставлениеПериодаОперации = ПредставлениеПериода(
		НачалоКвартала(КонтекстРасчета.ПериодРасчета),
		КонецКвартала(КонтекстРасчета.ПериодРасчета),
		"ФП=Истина");
	
	СодержаниеПроводки = СтрШаблон(
		НСтр("ru = 'Скорректирован единый налог на вмененный доход (ЕНВД) за %1 с учетом оплаченных расходов за %2'"),
		ПредставлениеНалоговогоПериода,
		ПредставлениеПериодаОперации);
	
	Для Каждого СтрокаКорректировки Из Корректировка Цикл
		
		Если СтрокаКорректировки.СуммаНалогаКУплате = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = КорректирующиеПроводки.Добавить();
		
		Проводка.РегистрацияВНалоговомОргане = СтрокаКорректировки.РегистрацияВНалоговомОргане;
		Проводка.СчетДт                      = ПланыСчетов.Хозрасчетный.ЕНВД;
		Проводка.СчетКт                      = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
		Проводка.ПрибылиИУбытки              = Перечисления.ПрибылиИУбытки.НалогНаПрибыль;
		Проводка.ВидыПлатежейВГосБюджет      = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		Проводка.Сумма                       = СтрокаКорректировки.СуммаНалогаКУплате;
		Проводка.Содержание                  = СодержаниеПроводки;
		
	КонецЦикла;
	
	Возврат КорректирующиеПроводки;
	
КонецФункции

Процедура РассчитатьВмененныйНалогПоИнспекциям(КонтекстРасчета, ПоказателиВидовДеятельности, ТаблицаРасчетСумм)
	
	НалогПоИнспекциям = Новый ТаблицаЗначений;
	НалогПоИнспекциям.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	НалогПоИнспекциям.Колонки.Добавить("ВмененныйНалог",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	
	Для Каждого СтрокаПоказателя Из ПоказателиВидовДеятельности Цикл
		
		ПараметрыРасчетаСуммыНалога = УчетЕНВДКлиентСервер.НовыеПараметрыРасчетаСуммыНалога();
		ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСуммыНалога, СтрокаПоказателя);
		ПараметрыРасчетаСуммыНалога.Период = КонтекстРасчета.Период;
		
		СтрокаНалога = НалогПоИнспекциям.Добавить();
		СтрокаНалога.РегистрацияВНалоговомОргане = СтрокаПоказателя.РегистрацияВНалоговомОргане;
		СтрокаНалога.ВмененныйНалог = УчетЕНВДКлиентСервер.СуммаНалога(ПараметрыРасчетаСуммыНалога);
		
	КонецЦикла;
	
	НалогПоИнспекциям.Свернуть("РегистрацияВНалоговомОргане", "ВмененныйНалог");
	
	Для Каждого НалогПоИнспекции Из НалогПоИнспекциям Цикл
		
		НоваяСтрока = ТаблицаРасчетСумм.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НалогПоИнспекции);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьРегулярныйНалоговыйВычет(КонтекстРасчета, РасчетСуммНалога)
	
	Если НЕ ЗначениеЗаполнено(РасчетСуммНалога) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", КонтекстРасчета.НачалоПериодаАнализаРасходов);
	Запрос.УстановитьПараметр("КонецПериода",  КонтекстРасчета.КонецПериодаАнализаРасходов);
	Запрос.УстановитьПараметр("Организация",   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("Инспекции",
		ОбщегоНазначения.ВыгрузитьКолонку(РасчетСуммНалога, "РегистрацияВНалоговомОргане", Истина));
	
	СчетаФиксированныхВзносов = Новый Массив;
	СчетаФиксированныхВзносов.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод); // 69.06.3 - взносы в ФФОМС
	СчетаФиксированныхВзносов.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);        // 69.06.5 - взносы в ПФР=
	
	Запрос.УстановитьПараметр("СчетаФиксированныхВзносов", СчетаФиксированныхВзносов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыУменьшающиеНалог.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(ВЫБОР
	|			КОГДА РасходыУменьшающиеНалог.СчетУчета В (&СчетаФиксированныхВзносов)
	|				ТОГДА РасходыУменьшающиеНалог.СуммаРасходаЕНВДОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ФиксированныеВзносыИП,
	|	СУММА(ВЫБОР
	|			КОГДА РасходыУменьшающиеНалог.СчетУчета В (&СчетаФиксированныхВзносов)
	|				ТОГДА 0
	|			ИНАЧЕ РасходыУменьшающиеНалог.СуммаРасходаЕНВДОборот
	|		КОНЕЦ) КАК РасходыРаботодателя
	|ИЗ
	|	РегистрНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И РегистрацияВНалоговомОргане В (&Инспекции)) КАК РасходыУменьшающиеНалог
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыУменьшающиеНалог.РегистрацияВНалоговомОргане";
	
	РегулярныеРасходы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого РасчетПоИнспекции Из РасчетСуммНалога Цикл
		
		СтрокаРасход = РегулярныеРасходы.Найти(РасчетПоИнспекции.РегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане");
		
		Если СтрокаРасход <> Неопределено Тогда
			
			МаксимальныйНалоговыйВычет = 0;
			СуммаРасходов              = 0;
			
			Если КонтекстРасчета.ЭтоИндивидуальныйПредприниматель И Не КонтекстРасчета.ИПИспользуетТрудНаемныхРаботников Тогда
				МаксимальныйНалоговыйВычет = РасчетПоИнспекции.ВмененныйНалог;
				СуммаРасходов = Окр(СтрокаРасход.ФиксированныеВзносыИП, 0);
			Иначе
				МаксимальныйНалоговыйВычет = Окр(РасчетПоИнспекции.ВмененныйНалог/2, 0, РежимОкругления.Окр15как10);
				
				// При расчете вычета требуется отдельно округлить фиксированные взносы ИП и отдельно остальные расходы,
				// поскольку в декларации ЕНВД это разные строки раздела 3 с округлением по арифметическим правилам.
				ВычетПоФиксированнымВзносам = Окр(СтрокаРасход.ФиксированныеВзносыИП, 0);
				ВычетПоРасходамРаботодателя = Окр(СтрокаРасход.РасходыРаботодателя, 0);
				
				СуммаРасходов = ВычетПоФиксированнымВзносам + ВычетПоРасходамРаботодателя;
			КонецЕсли;
			
			РасчетПоИнспекции.РегулярныйНалоговыйВычет = Мин(СуммаРасходов, МаксимальныйНалоговыйВычет);
			
		КонецЕсли;
		
		РасчетПоИнспекции.СуммаНалогаКУплате = РасчетПоИнспекции.ВмененныйНалог - РасчетПоИнспекции.РегулярныйНалоговыйВычет;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьВычетПоОнлайнКассам(КонтекстРасчета, РасчетСуммНалога)
	
	Если НЕ КонтекстРасчета.ПрименяетсяВычетПоОнлайнКассам
		ИЛИ НЕ ЗначениеЗаполнено(РасчетСуммНалога) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",     КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонтекстРасчета.КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("РегистрацииВНалоговомОргане",
		ОбщегоНазначения.ВыгрузитьКолонку(РасчетСуммНалога, "РегистрацияВНалоговомОргане", Истина));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыНаОнлайнКассыОстатки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасходыНаОнлайнКассыОстатки.ДокументРасхода КАК ДокументРасхода,
	|	РасходыНаОнлайнКассыОстатки.ДокументРасхода.Дата КАК ПериодРасхода,
	|	РасходыНаОнлайнКассыОстатки.ДокументРасхода.ДатаРегистрации КАК ДатаРегистрацииКассы,
	|	РасходыНаОнлайнКассыОстатки.ДокументРасхода.РегистрационныйНомер КАК РегистрационныйНомерКассы,
	|	РасходыНаОнлайнКассыОстатки.СуммаОстаток КАК ОстатокРасходов
	|ИЗ
	|	РегистрНакопления.РасходыНаОнлайнКассыУменьшающиеЕНВД.Остатки(
	|			&ГраницаОстатков,
	|			Организация = &Организация
	|				И РегистрацияВНалоговомОргане В (&РегистрацииВНалоговомОргане)) КАК РасходыНаОнлайнКассыОстатки"
	;
	
	ОстаткиРасходов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого РасчетПоИнспекции Из РасчетСуммНалога Цикл
		
		РасчетПоИнспекции.УчтенныеРасходыНаОнлайнКассы = НоваяТаблицаРасходовНаОнлайнКассы();
		
		ОтборОстатков = Новый Структура("РегистрацияВНалоговомОргане", РасчетПоИнспекции.РегистрацияВНалоговомОргане);
		
		ОстаткиПоИнспекции = ОстаткиРасходов.Скопировать(ОтборОстатков);
		ОстаткиПоИнспекции.Сортировать("ПериодРасхода, ДатаРегистрацииКассы, РегистрационныйНомерКассы");
		
		СуммаРаспределения = РасчетПоИнспекции.ВмененныйНалог - РасчетПоИнспекции.РегулярныйНалоговыйВычет; // Подлежит уменьшению налог после вычета взносов, больничных и т.п.
		НалоговыйВычетПоИнспекции = 0;
		
		Для Каждого СтрокаОстатка Из ОстаткиПоИнспекции Цикл
			
			Если СуммаРаспределения = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СуммаРасходаКВычету = Мин(СуммаРаспределения, СтрокаОстатка.ОстатокРасходов);
			
			УчтенныйРасход = РасчетПоИнспекции.УчтенныеРасходыНаОнлайнКассы.Добавить();
			ЗаполнитьЗначенияСвойств(УчтенныйРасход, СтрокаОстатка);
			
			УчтенныйРасход.Сумма = СуммаРасходаКВычету;
			
			СуммаРаспределения        = СуммаРаспределения - СуммаРасходаКВычету;
			НалоговыйВычетПоИнспекции = НалоговыйВычетПоИнспекции + СуммаРасходаКВычету;
			
		КонецЦикла;
		
		РасчетПоИнспекции.ВычетНаОнлайнКассы = НалоговыйВычетПоИнспекции;
		РасчетПоИнспекции.СуммаНалогаКУплате = РасчетПоИнспекции.СуммаНалогаКУплате - РасчетПоИнспекции.ВычетНаОнлайнКассы;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьКорректировкуНалогаПослеОтмены(КонтекстРасчета, РасчетНалога)
	
	// Если учет налога в разрезе налоговых органов не ведется, будет возвращена таблица корректировки без детализации по инспекциям.
	
	// Как рассчитывается корректировка:
	// получаем начисленный налог за последний налоговый период применения ЕНВД в разрезе инспекций с учетом корректировок,
	// уже отраженных в предыдущих кварталах. Сравним с расчетом налога, учитывающим расходы текущего квартала.
	// Разницу в разрезе инспекций необходимо будет отразить в проводках перерасчета ЕНВД в текущем квартале.
	
	НачалоПериодаУчтенныхНачислений = КонтекстРасчета.НачалоПериода;
	КонецПериодаУчтенныхНачислений  = НачалоКвартала(КонтекстРасчета.ПериодРасчета) - 1; // Конец предыдущего квартала.
	
	АктуальныйРасчет = РасчетНалога.Скопировать(); // Чтобы не модифицировать входящий расчет.
	
	Если Не НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		АктуальныйРасчет.ЗаполнитьЗначения(Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка(), "РегистрацияВНалоговомОргане");
		АктуальныйРасчет.Свернуть("РегистрацияВНалоговомОргане", "СуммаНалогаКУплате");
	КонецЕсли;
	
	Корректировка = РасчетНалога.СкопироватьКолонки();
	
	НачисленныйРанееНалог = НачисленныйНалогЗаПериод(
		КонтекстРасчета.Организация,
		НачалоПериодаУчтенныхНачислений,
		КонецПериодаУчтенныхНачислений);
	
	ВсеНалоговыеИнспекции = АктуальныйРасчет.ВыгрузитьКолонку("РегистрацияВНалоговомОргане");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеНалоговыеИнспекции,
		НачисленныйРанееНалог.ВыгрузитьКолонку("РегистрацияВНалоговомОргане"),
		Истина);
	
	Для Каждого НалоговаяИнспекция Из ВсеНалоговыеИнспекции Цикл
		
		СтрокаРассчитано = АктуальныйРасчет.Найти(НалоговаяИнспекция, "РегистрацияВНалоговомОргане");
		СтрокаНачисленоРанее = НачисленныйРанееНалог.Найти(НалоговаяИнспекция, "РегистрацияВНалоговомОргане");
		
		СуммаРассчитано = ?(СтрокаРассчитано = Неопределено, 0, СтрокаРассчитано.СуммаНалогаКУплате);
		СуммаНачисленоРанее = ?(СтрокаНачисленоРанее = Неопределено, 0, СтрокаНачисленоРанее.СуммаНалогаКУплате);
		
		СуммаКорректировки = СуммаРассчитано - СуммаНачисленоРанее; // Как правило, новая сумма налога меньше, поэтому коррректировка отрицательная.
		
		Если СуммаКорректировки <> 0 Тогда
			
			НоваяСтрокаКорректировки = Корректировка.Добавить();
			НоваяСтрокаКорректировки.РегистрацияВНалоговомОргане = НалоговаяИнспекция;
			
			// Проводки по корректировке формируются в обратном виде (Дт 68.11 - Кт 99.01),
			// поэтому сумма проводки должна быть с обратным знаком относительно корректировки. Как правило, положительная.
			НоваяСтрокаКорректировки.СуммаНалогаКУплате = - СуммаКорректировки; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Корректировка;
	
КонецФункции

// Определяет сумму отраженного в бухгалтерском учете (начисленного) налога за указанный период
// в разрезе налоговых инспекций.
//
// Параметры:
//  Организация      - СправочникСсылка.Организации - налогоплательщик.
//  НачалоПериода    - Дата и время - начало анализируемого периода.
//  КонецПериода     - Дата и время - окончание анализируемого периода.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - налоговая инспекция.
//   * СуммаНалогаКУплате - сумма начисленного налога.
//
Функция НачисленныйНалогЗаПериод(Организация, НачалоПериода, КонецПериода)
	
	СчетОтраженияНалога  = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД;
	СчетНачисленияНалога = ПланыСчетов.Хозрасчетный.ЕНВД;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("НачалоПериода",        Новый Граница(НачалоПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецПериода",         Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетНачисленияНалога", СчетНачисленияНалога);
	Запрос.УстановитьПараметр("СчетОтраженияНалога",  СчетОтраженияНалога);
	Запрос.УстановитьПараметр("ВидыПлатежей",         Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	
	ВидыСубконтоУчетНалога = Новый Массив;
	ВидыСубконтоУчетНалога.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконтоУчетНалога);
	Запрос.УстановитьПараметр("ВидыСубконтоУчетНалога", ВидыСубконтоУчетНалога);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто2 КАК РегистрацияВНалоговомОргане,
	|	СУММА(-ХозрасчетныйОбороты.СуммаОборот) КАК СуммаНалогаКУплате
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			Счет = &СчетНачисленияНалога,
	|			&ВидыСубконтоУчетНалога,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыПлатежей),
	|			КорСчет = &СчетОтраженияНалога,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто2";
	
	Если Не НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		
		СхемаЗапроса = СхемыЗапросов.Создать(Запрос.Текст);
		ОператорЗапроса = СхемыЗапросов.НайтиТаблицуПоПсевдониму(СхемаЗапроса, "ХозрасчетныйОбороты");
		
		СхемыЗапросов.УстановитьВыражение(ОператорЗапроса,
			"РегистрацияВНалоговомОргане", "ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)");
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СформироватьДвиженияНачислениеЕНВД(ТаблицаПроводок, ТаблицаРасходовНаОнлайнКассы, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыДвиженийНачислениеЕНВД(ТаблицаПроводок,
		ТаблицаРасходовНаОнлайнКассы, ТаблицаРеквизитов);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаПроводки Из Параметры.Проводки Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ПрибылиИУбытки", СтрокаПроводки.ПрибылиИУбытки);
			
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ВидыПлатежейВГосБюджет", СтрокаПроводки.ВидыПлатежейВГосБюджет);
		
		Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
				"РегистрацияВНалоговомОргане", СтрокаПроводки.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		Движения.Хозрасчетный.Записывать = Истина;
	КонецЦикла;
	
	Для Каждого УчтенныйРасход Из Параметры.РасходыНаОнлайнКассы Цикл
		Движение = Движения.РасходыНаОнлайнКассыУменьшающиеЕНВД.ДобавитьРасход();
		
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, УчтенныйРасход);
		
		Движения.РасходыНаОнлайнКассыУменьшающиеЕНВД.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийНачислениеЕНВД(ТаблицаПроводок, ТаблицаРасходовНаОнлайнКассы, ТаблицаРеквизитов)

	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                      // <Дата> - период проводок - дата документа
		+ "Организация,"                 // <СправочникСсылка.Организации> - организация
		+ "Регистратор"                  // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"              // <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет,"      // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "РегистрацияВНалоговомОргане," // <СправочникСсылка.РегистрацииВНалоговомОргане> - субконто кредита
		+ "Сумма,"                       // <Число, 15, 2> - сумма проводки
		+ "Содержание";                  // <Строка, 150> - содержание проводки
		
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
		
	СписокОбязательныхКолонок = ""
		+ "РегистрацияВНалоговомОргане," // <СправочникСсылка.РегистрацииВНалоговомОргане> - субконто кредита
		+ "ДокументРасхода,"             // <ДокументСсылка.РасходыНаОнлайнКассыУменьшающиеНалоги> - документ, зарегистрировавший расходы на покупку онлайн-кассы
		+ "Сумма"                        // <Число, 10, 0> - сумма учтенных в налоге и списанных расходов
		;
	
	Параметры.Вставить("РасходыНаОнлайнКассы", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРасходовНаОнлайнКассы, СписокОбязательныхКолонок));
	
	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияКорректировкаЕНВД(ТаблицаПроводок, ТаблицаРеквизитов, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыДвиженийКорректировкаЕНВД(ТаблицаПроводок, ТаблицаРеквизитов);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаПроводки Из Параметры.Проводки Цикл
		Проводка = Движения.Хозрасчетный.Добавить();
		
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);
		ЗаполнитьЗначенияСвойств(Проводка, СтрокаПроводки);
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"ВидыПлатежейВГосБюджет", СтрокаПроводки.ВидыПлатежейВГосБюджет);
		
		Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
				"РегистрацияВНалоговомОргане", СтрокаПроводки.РегистрацияВНалоговомОргане);
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт,
			"ПрибылиИУбытки", СтрокаПроводки.ПрибылиИУбытки);
		
		Движения.Хозрасчетный.Записывать = Истина;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДвиженийКорректировкаЕНВД(ТаблицаПроводок, ТаблицаРеквизитов)
	
	Параметры = Новый Структура;
	
	СписокОбязательныхКолонок = ""
		+ "Период,"                      // <Дата> - период проводок - дата документа
		+ "Организация,"                 // <СправочникСсылка.Организации> - организация
		+ "Регистратор"                  // <ДокументСсылка.РегламентнаяОперация> - документ-регистратор движений
		;
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизитов, СписокОбязательныхКолонок));
	
	СписокОбязательныхКолонок = ""
		+ "СчетДт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет дебета
		+ "СчетКт,"                      // <ПланСчетовСсылка.Хозрасчетный> - счет кредита
		+ "ПрибылиИУбытки,"              // <ПеречислениеСсылка.ПрибылиИУбытки> - субконто счета дебета
		+ "ВидыПлатежейВГосБюджет,"      // <ПеречислениеСсылка.ВидыПлатежейВГосБюджет> - субконто кредита
		+ "РегистрацияВНалоговомОргане," // <СправочникСсылка.РегистрацииВНалоговомОргане> - субконто кредита
		+ "Сумма,"                       // <Число, 15, 2> - сумма проводки
		+ "Содержание";                  // <Строка, 150> - содержание проводки
		
	Параметры.Вставить("Проводки", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроводок, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ВыявитьОшибкиПоказателейЕНВД(Ошибки, Период, ПоказателиВидовДеятельности)
	
	ОшибкиВыявлены = Ложь;
	
	СсылкаПерехода = "e1cib/command/Обработка.ПомощникРасчетаЕНВД.Команда.ОтчетностьПоЕНВД";
	
	Для каждого СтрокаПоказателя Из ПоказателиВидовДеятельности Цикл
		
		Если ЗначениеЗаполнено(СтрокаПоказателя.КорректирующийКоэффициент)
			И ЗначениеЗаполнено(СтрокаПоказателя.НалоговаяСтавка) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ОшибкиВыявлены = Истина;
		
		Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
		ОписаниеШаблон = НСтр("ru = 'Недостаточно данных для расчета налога по виду деятельности""%1""'");
		Ошибка.Описание = СтрШаблон(ОписаниеШаблон, СтрокаПоказателя.Наименование);
	
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.КорректирующийКоэффициент) Тогда
		
			ШаблонСообщения = НСтр("ru = 'Укажите корректирующий коэффициент К2 за %1.'");
			
			МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
			МестоОшибки.Локализация = СтрШаблон(ШаблонСообщения, Формат(НачалоКвартала(Период), "Л=ru; ДФ='q ''квартал'' yyyy ''г.'''"));
			МестоОшибки.Ссылка = СсылкаПерехода;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаПоказателя.НалоговаяСтавка) Тогда
		
			ШаблонСообщения = НСтр("ru = 'Укажите ставку налога за %1.'");
			
			МестоОшибки = Ошибка.ЛокализацияДетально.Добавить();
			МестоОшибки.Локализация = СтрШаблон(ШаблонСообщения, Формат(НачалоГода(Период), "Л=ru; ДФ='yyyy ''г.'''"));
			МестоОшибки.Ссылка = СсылкаПерехода;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОшибкиВыявлены;
	
КонецФункции

Функция НоваяТаблицаНачисленияЕНВД()
	
	ТаблицаНачисления = Новый ТаблицаЗначений;
	
	ТаблицаНачисления.Колонки.Добавить("СчетДт",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНачисления.Колонки.Добавить("СчетКт",                      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаНачисления.Колонки.Добавить("ПрибылиИУбытки",              Новый ОписаниеТипов("ПеречислениеСсылка.ПрибылиИУбытки"));
	ТаблицаНачисления.Колонки.Добавить("ВидыПлатежейВГосБюджет",      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПлатежейВГосБюджет"));
	ТаблицаНачисления.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаНачисления.Колонки.Добавить("Сумма",                       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ТаблицаНачисления.Колонки.Добавить("Содержание",                  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Возврат ТаблицаНачисления;
	
КонецФункции

Функция НоваяТаблицаРасчетаСуммНалога()
	
	ТаблицаРасчета = Новый ТаблицаЗначений;
	
	ТаблицаРасчета.Колонки.Добавить("РегистрацияВНалоговомОргане",  Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаРасчета.Колонки.Добавить("ВмененныйНалог",               ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	ТаблицаРасчета.Колонки.Добавить("РегулярныйНалоговыйВычет",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 0)); // Расходы на взносы, больничные, страхование с учетом предельного ограничения.
	ТаблицаРасчета.Колонки.Добавить("ВычетНаОнлайнКассы",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 0)); // Расхолы на онлайн-кассы с учетом ограничения оставшейся суммой налога.
	ТаблицаРасчета.Колонки.Добавить("СуммаНалогаКУплате",           ОбщегоНазначения.ОписаниеТипаЧисло(15, 0)); // Сумма налога после всех вычетов.
	ТаблицаРасчета.Колонки.Добавить("УчтенныеРасходыНаОнлайнКассы", Новый ОписаниеТипов("ТаблицаЗначений"));      // Расходы на онлайн-кассы в разрезе документов расхода, подлежащие списанию.
	
	Возврат ТаблицаРасчета;
	
КонецФункции

Функция НоваяТаблицаСписанияРасходовНаОнлайнКассы()
	
	ТаблицаРасходов = Новый ТаблицаЗначений;
	
	ТаблицаРасходов.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаРасходов.Колонки.Добавить("ДокументРасхода",             Новый ОписаниеТипов("ДокументСсылка.РасходыНаОнлайнКассыУменьшающиеНалоги"));
	ТаблицаРасходов.Колонки.Добавить("Сумма",                       ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ТаблицаРасходов;
	
КонецФункции

Функция НоваяТаблицаРасходовНаОнлайнКассы()
	
	ТаблицаРасходов = Новый ТаблицаЗначений;
	
	ТаблицаРасходов.Колонки.Добавить("ДокументРасхода",             Новый ОписаниеТипов("ДокументСсылка.РасходыНаОнлайнКассыУменьшающиеНалоги"));
	ТаблицаРасходов.Колонки.Добавить("Сумма",                       ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	
	Возврат ТаблицаРасходов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеДекларации

Функция ДанныеЗаполненияДекларации(ПараметрыОтчета)
	
	ПоказателиВидовДеятельности = ПоказателиВидовДеятельности(
		ПараметрыОтчета.ДатаНачалаПериодаОтчета,
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.РегистрацииВНО);
		
		
	РасходыНаПриобретениеККТ = РасходыНаПриобретениеККТ(
		ПараметрыОтчета.ДатаНачалаПериодаОтчета,
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.РегистрацииВНО);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидыДеятельности",         ПоказателиВидовДеятельности);
	ДанныеЗаполнения.Вставить("РасходыНаПриобретениеККТ", РасходыНаПриобретениеККТ);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КлючиПоказателейДекларации2016Кв1()
	
	КлючиПоказателей = Новый Структура;
	
	// Раздел 2
	
	КлючиПоказателей.Вставить("Код", "П000020001000");
	
	КлючиПоказателей.Вставить("Индекс",          "П000020002001");
	КлючиПоказателей.Вставить("КодРегиона",      "П000020002002");
	КлючиПоказателей.Вставить("Район",           "П000020002003");
	КлючиПоказателей.Вставить("Город",           "П000020002004");
	КлючиПоказателей.Вставить("НаселенныйПункт", "П000020002005");
	КлючиПоказателей.Вставить("Улица",           "П000020002006");
	КлючиПоказателей.Вставить("НомерДома",       "П000020002007");
	КлючиПоказателей.Вставить("НомерКорпуса",    "П000020002008");
	КлючиПоказателей.Вставить("НомерОфиса",      "П000020002009");
	
	КлючиПоказателей.Вставить("КодПоОКТМО", "П000020003000");
	
	КлючиПоказателей.Вставить("БазоваяДоходность",         "П000020004003");
	КлючиПоказателей.Вставить("КорректирующийКоэффициент", "П000020006003");
	
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Да",  "П000020006101");
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Нет", "П000020006102");
	КлючиПоказателей.Вставить("ДатаПостановкиНаУчет", "П000020006201_1");
	
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Да",  "П000020006401");
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Нет", "П000020006402");
	КлючиПоказателей.Вставить("ДатаСнятияСУчета", "П000020006501_1");
	
	КлючиПоказателей.Вставить("ФизическийПоказатель1", "П000020007002");
	КлючиПоказателей.Вставить("ФизическийПоказатель2", "П000020008002");
	КлючиПоказателей.Вставить("ФизическийПоказатель3", "П000020009002");
	
	КлючиПоказателей.Вставить("НалоговаяСтавка", "П000020010503");
	
	// Раздел 3
	
	КлючиПоказателей.Вставить("ПризнакНалогоплательщика", "П000030000503");
	
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносов",       "П000030002003");
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносовЗаСебя", "П000030003003");
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция КлючиПоказателейДекларации2018Кв1()
	
	КлючиПоказателей = Новый Структура;
	
	// Раздел 2
	
	КлючиПоказателей.Вставить("Код", "П000020001000");
	
	КлючиПоказателей.Вставить("Индекс",          "П000020002001");
	КлючиПоказателей.Вставить("КодРегиона",      "П000020002002");
	КлючиПоказателей.Вставить("Район",           "П000020002003");
	КлючиПоказателей.Вставить("Город",           "П000020002004");
	КлючиПоказателей.Вставить("НаселенныйПункт", "П000020002005");
	КлючиПоказателей.Вставить("Улица",           "П000020002006");
	КлючиПоказателей.Вставить("НомерДома",       "П000020002007");
	КлючиПоказателей.Вставить("НомерКорпуса",    "П000020002008");
	КлючиПоказателей.Вставить("НомерОфиса",      "П000020002009");
	
	КлючиПоказателей.Вставить("КодПоОКТМО", "П000020003000");
	
	КлючиПоказателей.Вставить("БазоваяДоходность",         "П000020004003");
	КлючиПоказателей.Вставить("КорректирующийКоэффициент", "П000020006003");
	
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Да",  "П000020006101");
	КлючиПоказателей.Вставить("ПостановкаНаУчетВОтчетномПериоде_Нет", "П000020006102");
	КлючиПоказателей.Вставить("ДатаПостановкиНаУчет", "П000020006201_1");
	
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Да",  "П000020006401");
	КлючиПоказателей.Вставить("СнятиеСУчетаВОтчетномПериоде_Нет", "П000020006402");
	КлючиПоказателей.Вставить("ДатаСнятияСУчета", "П000020006501_1");
	
	КлючиПоказателей.Вставить("ФизическийПоказатель1", "П000020007002");
	КлючиПоказателей.Вставить("ФизическийПоказатель2", "П000020008002");
	КлючиПоказателей.Вставить("ФизическийПоказатель3", "П000020009002");
	
	КлючиПоказателей.Вставить("НалоговаяСтавка", "П000020010503");
	
	// Раздел 3
	
	КлючиПоказателей.Вставить("ПризнакНалогоплательщика", "П000030000503");
	
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносов",       "П000030002003");
	КлючиПоказателей.Вставить("СуммаСтраховыхВзносовЗаСебя", "П000030003003");
	
	// Раздел 4
	КлючиПоказателей.Вставить("МодельККТ",               "П000040001003");
	КлючиПоказателей.Вставить("ЗаводскойНомерККТ",       "П000040002003");
	КлючиПоказателей.Вставить("РегистрационныйНомерККТ", "П000040003003");
	КлючиПоказателей.Вставить("ДатаРегистрацииККТ",      "П000040004003");
	КлючиПоказателей.Вставить("РасходыНаККТ",            "П000040005003");
	
	Возврат КлючиПоказателей;
	
КонецФункции

Функция ПредставлениеФлажка(Значение)
	
	Возврат ?(Значение, "V", "");
	
КонецФункции

Процедура ДобавитьСтраницуРазделаДекларации(Раздел)
	
	НоваяСтраница = Раздел.Добавить();
	Образец = Раздел[0];
	НоваяСтраница.Данные         = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Образец.Данные);
	НоваяСтраница.ДанныеДопСтрок = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Образец.ДанныеДопСтрок);
	
КонецПроцедуры

Процедура ВставитьЗначениеДопСтроки(ДанныеДопСтрок, КлючПоказателя, Значение)
	
	Перем ТаблицаПоказателя;
	
	СоставКлюча = СтрРазделить(КлючПоказателя, "_");
	Если СоставКлюча.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = СоставКлюча[0];
	ИмяТаблицы = Лев(ИмяКолонки, СтрДлина(ИмяКолонки) - 2);
	
	ДанныеДопСтрок.Свойство(ИмяТаблицы, ТаблицаПоказателя);
	Если ТаблицаПоказателя = Неопределено Тогда
		ТаблицаПоказателя = Новый ТаблицаЗначений;
		ТаблицаПоказателя.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
	
	ТаблицаПоказателя.Очистить();
	НоваяСтрока = ТаблицаПоказателя.Добавить();
	НоваяСтрока[ИмяКолонки] = Значение;
	
	ДанныеДопСтрок.Вставить(ИмяТаблицы, ТаблицаПоказателя);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеЗаявлений

Функция ДанныеЗаполненияЗаявлений(ПараметрыОтчета)
	
	Перем ПараметрыЗаполнения;
	
	Если ПараметрыОтчета.Свойство("ПараметрыЗаполнения", ПараметрыЗаполнения) И ПараметрыЗаполнения <> Неопределено Тогда
		ВидыДеятельности = ПараметрыЗаполнения.ВидыДеятельности;
	Иначе
		ВидыДеятельности = Неопределено;
	КонецЕсли;
	
	ПоказателиВидовДеятельности = ВидыДеятельности(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.КодНалоговогоОргана,
		ВидыДеятельности);
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидыДеятельности", ПоказателиВидовДеятельности);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция КоличествоВидовДеятельностиНаЛистеЗаявления()
	
	Возврат 3;
	
КонецФункции

Функция ЭтоЗаявлениеОПостановкеНаУчет(ВидЗаявления)
	
	Возврат ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД1
		Или ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД2;
	
КонецФункции

Функция ЭтоЗаявлениеОСнятииСУчета(ВидЗаявления)
	
	Возврат ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД3
		Или ВидЗаявления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаЕНВД4;
	
КонецФункции

#КонецОбласти

#Область ПомощникРасчетаЕНВД

Функция ОписаниеДействияДекларация(Организация, РегистрацияВНалоговомОргане, ПорядокУплаты)
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияДекларация(
		ПорядокУплаты.Правило,
		ПорядокУплаты.ПериодСобытия,
		Организация,
		РегистрацияВНалоговомОргане);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПлатежПоДаннымДекларации(Организация, РегистрацияВНалоговомОргане, ПорядокУплаты, СпособОплаты)
	
	Если ПорядокУплаты = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияПлатежПоДаннымДекларации(
		Организация,
		РегистрацияВНалоговомОргане,
		СпособОплаты,
		ПорядокУплаты.Срок,
		ПорядокУплаты.Правило,
		ПорядокУплаты.ПериодСобытия,
		ПорядокУплаты.Наименование);
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

// Заполняет адрес и код ОКТМО для видов деятельности, которые регистрируются по месту нахождения организации
//
Процедура ЗаполнитьАдресПриРегистрацияПоМестуНахожденияОрганизации(Организация, ВидыДеятельности)
	
	НайденныеСтроки = ВидыДеятельности.НайтиСтроки(Новый Структура("РегистрацияПоМестуНахожденияОрганизации", Истина));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКИ = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация), , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	
	Если ТаблицаКИ.Количество() > 0 Тогда 
		ЮрАдресОрганизации = ТаблицаКИ[0];
	Иначе
		ЮрАдресОрганизации = Неопределено;
	КонецЕсли;
	
	КодПоОКТМО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "РегистрацияВНалоговомОргане.КодПоОКТМО");
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Если ЮрАдресОрганизации <> Неопределено Тогда 
			Строка.Адрес        = ЮрАдресОрганизации.Значение;
			Строка.АдресСтрокой = ЮрАдресОрганизации.Представление;
		КонецЕсли;
		
		Строка.КодПоОКТМО   = КодПоОКТМО;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
