
////////////////////////////////////////////////////////////////////////////////
// ЭлектронноеВзаимодействие: общий механизм обмена электронными документами.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Общие

// Поиск ссылки на объект информационной базы по типу, идентификатору и дополнительным реквизитам.
//
// Параметры:
//  ТипОбъекта				 - Строка	 - идентификатор типа объекта, который необходимо найти.
//  Идентификатор			 - Строка	 - идентификатор объекта заданного типа.
//  ДополнительныеРеквизиты	 - Структура - набор дополнительных полей объекта для поиска.
// 
// Возвращаемое значение:
//  Ссылка - ссылка на найденный объект.
//
Функция НайтиСсылку(ТипОбъекта, Идентификатор = "", ДополнительныеРеквизиты = Неопределено) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеПовтИсп.СсылкаНаОбъект(ТипОбъекта, Идентификатор, ДополнительныеРеквизиты);
	
КонецФункции

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
//   ВидОперации - Строка - вид операции при которой возникло исключение.
//   ПодробныйТекстОшибки - Строка - описание ошибки.
//   ТекстСообщения - Строка - текст ошибки который выводится в виде сообщения.
//   КодСобытия - Строка - код события, используется для стандартизации иерархии событий.
//                Может принимать значения: "ЭлектронноеВзаимодействие" - Общая подсистема, 
//                                          "ОбменСБанками" - Обмен с банками, 
//                                          "ОбменСКонтрагентами" - Обмен с контрагентами,
//                                          "ОбменССайтами" - Обмен с сайтами, 
//                                          "РегламентныеЗадания" - Регламентные задания, 
//                                          "БизнесСеть" - Бизнес-сеть,
//                                          "ИнтеграцияСЯндексКассой" - Интеграция с Яндекс.Кассой.
//   СсылкаНаОбъект - ДокументСсылка, СправочникСсылка - объект с которым связано данное событие.ЗаписатьОшибкуВЖурналРегистрации().
//
Процедура ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "", КодСобытия = "ОбменСКонтрагентами",
	СсылкаНаОбъект = Неопределено) Экспорт
	
	ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
		ВидОперации, ПодробныйТекстОшибки, ТекстСообщения, КодСобытия, СсылкаНаОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомДанных

// Очищает значение в дереве данных.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//                            (см. ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента).
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ОчиститьЗначениеВСтрокеДерева(Дерево, Реквизит, ПараметрыОбработкиОшибок = Неопределено) Экспорт

	СтрокаДерева = Дерево.Строки.Найти(Реквизит, "ПолныйПуть", Истина);
	Если СтрокаДерева = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка очистки реквизита дерева данных. Не найден реквизит ""%1""'"), Реквизит);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Заполним параметры обработки ошибок.
	ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаДерева, ПараметрыОбработкиОшибок);
	
	ТипЗначенияСтроки = СтрокаДерева.ТипЗначения;
	Если Не ТипЗнч(ТипЗначенияСтроки) = Тип("ОписаниеТипов") Тогда
		ТипЗначенияСтроки = Новый ОписаниеТипов();
	КонецЕсли;
	СтрокаДерева.Значение = ТипЗначенияСтроки.ПривестиЗначение();

КонецПроцедуры

// Сохраняет значение в дереве данных.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//                            (см. ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента).
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  Значение - Произвольный - сохраняемое в дереве значение.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок = Неопределено) Экспорт
	
	// Заполним значение в нужной строке дерева.
	СтрокаДерева = Дерево.Строки.Найти(Реквизит, "ПолныйПуть", Истина);
	Если СтрокаДерева = Неопределено Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка заполнения дерева данных. Не найден реквизит ""%1""'"), Реквизит);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	// Заполним параметры обработки ошибок.
	ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаДерева, ПараметрыОбработкиОшибок);
	
	СтрокаДерева.Значение = Значение;
	Если СтрокаДерева.Признак = "Группа" ИЛИ СтрокаДерева.Признак = "Выбор" Тогда
		Возврат;
	КонецЕсли;
	
	// Проставим значения в строках-родителях. При этом, если передана строка дерева, а не его корень, нужно пропустить
	// элементы пути вплоть до переданной строки.
	ПриведенныйПуть = Реквизит;
	Путь = "";
	Если ТипЗнч(Дерево) = Тип("СтрокаДереваЗначений") Тогда
		ПриведенныйПуть = Сред(Реквизит, СтрДлина(Дерево.ПолныйПуть) + 2);
		Путь = Путь + Дерево.ПолныйПуть;
	КонецЕсли;
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ПриведенныйПуть);
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева.Признак =  "Группа" Тогда
			СтрокаДерева.Значение = Истина;
		ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
			ТекИндекс = МассивРеквизитов.Найти(Элемент);
			СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает данные из таблицы значений в дерево значений.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные.
//  ТаблицаДанных - таблицаЗначений - записываемые в дерево данные. Таблица может предварительно дополняться данными
//                                    для обработки ошибок:
//                                    см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку,
//                                    ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы.
//  
//  НазваниеТаблицы - Строка - название таблицы в дереве.
//
Процедура ЗагрузитьТаблицуВДерево(Дерево, ТаблицаДанных, НазваниеТаблицы) Экспорт
	
	СтрокаТаблицы = Дерево.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
	НомерСтроки = 0;
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		НомерСтроки = НомерСтроки + 1;
		Если НомерСтроки = 1 Тогда
			ТекСтрока = СтрокаТаблицы.Строки[0];
		Иначе
			ПерваяСтрока = СтрокаТаблицы.Строки[0];
			ТекСтрока = СтрокаТаблицы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрока, ПерваяСтрока);
			СкопироватьСтрокиДереваДляТаблицыРекурсивно(ТекСтрока, ПерваяСтрока);
		КонецЕсли;
		ТекСтрока.Значение = НомерСтроки;
		Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
			Если Колонка.Имя = "ДопДанныеПодписанные" ИЛИ Колонка.Имя = "ДопДанныеНеПодписанные" Тогда
				
				СтрокаДопДанных = ТекСтрока.Строки.Найти(ТекСтрока.ПолныйПуть + "." + Колонка.Имя, "ПолныйПуть");
				СтруктураДопДанных = СтрокаДанных[Колонка.Имя];
				
				Если ЗначениеЗаполнено(СтруктураДопДанных) Тогда
					ДобавитьДопДанныеВДерево(
							СтрокаДопДанных,
							СтруктураДопДанных,
							?(Колонка.Имя = "ДопДанныеПодписанные", Истина, Ложь));
				КонецЕсли;
				
				Продолжить;	
			ИначеЕсли Колонка.Имя = "НаборПараметровОбработкиОшибок" Тогда
				// Для каждого реквизита, для которого заданы параметры обработки ошибок, запишем их в соответствующую
				// строку дерева (строку реквизита).
				НаборПараметровОбработкиОшибок = СтрокаДанных[Колонка.Имя];
				Если НаборПараметровОбработкиОшибок <> Неопределено Тогда
					Для Каждого ЭлементНабораОбработкиОшибок Из НаборПараметровОбработкиОшибок Цикл
						ПолныйПуть = НазваниеТаблицы + ".НомерСтроки." + ЭлементНабораОбработкиОшибок.ИмяКолонки;
						СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
						
						Если СтрокаРеквизита <> Неопределено Тогда
							ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаРеквизита,
								ЭлементНабораОбработкиОшибок.ПараметрыОбработкиОшибок);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				ПолныйПуть = НазваниеТаблицы + ?(Колонка.Имя = "НомерСтроки", ".", ".НомерСтроки.") + Колонка.Имя;
				СтрокаРеквизита = ТекСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
				ОбработатьРеквизитДереваСУчетомПризнака(СтрокаДанных, ТекСтрока, СтрокаРеквизита,
					Колонка.Имя, ПолныйПуть);
			КонецЕсли;
		КонецЦикла
		
	КонецЦикла;
	СтрокаТаблицы.Значение = ТаблицаДанных.Количество();
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(НазваниеТаблицы);
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	Путь = "";
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			Если СтрокаДерева.Признак = "Группа" Тогда
				СтрокаДерева.Значение = Истина;
			ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
				ТекИндекс = МассивРеквизитов.Найти(Элемент);
				СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает данные из структуры в группу дерева значений
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  СтруктураДанных - Структура - данные, которые должны быть загружены в группу
//  Путь - Строка - название группы в дереве.
//
Процедура ЗагрузитьСтруктуруВГруппуДерева(Дерево, СтруктураДанных, Путь) Экспорт
	
	СтрокаТаблицы = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
	Для Каждого Элемент Из СтруктураДанных Цикл
		ПолныйПуть = Путь + "." + Элемент.Ключ;
		СтрокаРеквизита = СтрокаТаблицы.Строки.Найти(ПолныйПуть, "ПолныйПуть");
		ОбработатьРеквизитДереваСУчетомПризнака(СтруктураДанных, СтрокаТаблицы, СтрокаРеквизита,
			Элемент.Ключ, ПолныйПуть);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет строку в таблицу из коллекции свойств
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево данных, в котором необходимо сохранить данные
//  Коллекция - Структура, Выборка, СтрокаТаблицыЗначений - коллекция для сохранения в дереве
//  НазваниеТаблицы - Строка - название таблицы в дереве.
//
Процедура ДобавитьЗаписьВТаблицуДерева(Дерево, Коллекция, НазваниеТаблицы) Экспорт
	
	ШапкаТаблицы = Дерево.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
	ШапкаТаблицы.Значение = ?(ЗначениеЗаполнено(ШапкаТаблицы.Значение), ШапкаТаблицы.Значение + 1, 1);
	
	СтруктураКолонок = СтруктураКолонокТаблицыДерева(Дерево, НазваниеТаблицы);
	ЗаполнитьЗначенияСвойств(СтруктураКолонок, Коллекция);
	ПерваяСтрокаДерева = Дерево.Строки.Найти(НазваниеТаблицы + ".НомерСтроки", "ПолныйПуть", Истина);
	
	Если ПустаяСтрока(ПерваяСтрокаДерева.Значение) Тогда
		НоваяСтрока = ПерваяСтрокаДерева;
		НомерСтроки = 1;
	Иначе
		Таблица = Дерево.Строки.Найти(НазваниеТаблицы, "ПолныйПуть", Истина);
		НомерСтроки = Таблица.Строки.Количество() + 1;
		НоваяСтрока = Таблица.Строки.Добавить();
		НоваяСтрока.ПолныйПуть = НазваниеТаблицы + ".НомерСтроки";
		СкопироватьСтрокиДереваДляТаблицыРекурсивно(НоваяСтрока, ПерваяСтрокаДерева);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерваяСтрокаДерева);
	НоваяСтрока.Значение = НомерСтроки;
	
	Для Каждого Элемент Из НоваяСтрока.Строки Цикл
		
		Если НазваниеКолонки(Элемент.ПолныйПуть) = "ДопДанные" Тогда
			Если СтруктураКолонок.Свойство("ДопДанныеПодписанные") Тогда
				ДобавитьДопДанныеВДерево(Элемент, СтруктураКолонок.ДопДанныеПодписанные, Истина);
			КонецЕсли;
			Если СтруктураКолонок.Свойство("ДопДанныеНеПодписанные") Тогда
				ДобавитьДопДанныеВДерево(Элемент, СтруктураКолонок.ДопДанныеНеПодписанные);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Элемент.Значение = СтруктураКолонок[НазваниеКолонки(Элемент.ПолныйПуть)];
		
	КонецЦикла;
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(НазваниеТаблицы);
	Если МассивРеквизитов.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;
	Путь = "";
	Для Каждого Элемент Из МассивРеквизитов Цикл
		Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
		
		СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			Если СтрокаДерева.Признак = "Группа" Тогда
				СтрокаДерева.Значение = Истина;
			ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
				ТекИндекс = МассивРеквизитов.Найти(Элемент);
				СтрокаДерева.Значение = МассивРеквизитов[ТекИндекс+1];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений с данными дерева значений
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево с данными
//  НазваниеТаблицы - Строка - название таблицы в дереве, если необходимо получить данные табличной части.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит данные дерева.
//
Функция ДанныеДерева(ДеревоДанных, НазваниеТаблицы = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(НазваниеТаблицы) Тогда
		Возврат ДанныеТаблицыДерева(ДеревоДанных, НазваниеТаблицы);
	Иначе
		Возврат ДанныеШапкиДерева(ДеревоДанных);
	КонецЕсли;
	
КонецФункции

// Возвращает строку дерева значений для заполнения в прикладном решении
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - дерево с данными
//  НазваниеПоля - Строка - название поля в дереве, содержащее полный путь к реквизиту
//  НайтиРекурсивно - Булево, Истина - если требуется рекурсивный поиск.
//
// Возвращаемое значение:
//  Строка таблицы значений - содержит строку дерева.
//
Функция СтрокаДерева(ДеревоДанных, НазваниеПоля, НайтиРекурсивно = Ложь) Экспорт
	
	СтрокаВозврата = ДеревоДанных.Строки.Найти(НазваниеПоля, "ПолныйПуть", НайтиРекурсивно);
	Если СтрокаВозврата.Признак = "Группа" Тогда
		СтрокаВозврата.Значение = Истина;
	КонецЕсли;
	Возврат СтрокаВозврата;

КонецФункции

// Копирует строки дерева значений
//
// Параметры:
//  СтрокаПолучатель - СтрокаДереваЗначений - строка дерева значений, в которую будут скопированы строки
//  СтрокаИсточник - СтрокаДереваЗначений - строка дерева значений, из которой будут скопированы строки.
Процедура СкопироватьСтрокиДереваРекурсивно(СтрокаПолучатель, СтрокаИсточник) Экспорт
	
	Для Каждого Реквизит Из СтрокаИсточник.Строки Цикл
		НовСтрока = СтрокаПолучатель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Реквизит);
		Если Реквизит.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДереваРекурсивно(НовСтрока, Реквизит);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// В процедуре происходит добавление данных из СтруктурыДанных в ДеревоЗначений.
//
// Параметры:
//  СтрокаДерева - ДеревоЗначений, СтрокаДереваЗначений - содержит данные.
//  СтруктураДопДанных - Структура - данные, которые необходимо поместить в дерево.
//  ЮридическиЗначимый - Булево - если Истина - то текущие данные необходимо по возможности поместить в основной ЭД.
//  ДобавлятьНовыеСтроки - Булево - если Истина - разрешает добавление строк с одинаковым путем в дерево.
//
Процедура ДобавитьДопДанныеВДерево(СтрокаДерева, СтруктураДопДанных, ЮридическиЗначимый = Ложь, ДобавлятьНовыеСтроки = Ложь) Экспорт
	
	Если СтруктураДопДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Родитель = Неопределено Тогда
		СтрокаДереваЗначений = СтрокаДерева(СтрокаДерева, "ДопДанные");
		Если ЮридическиЗначимый Тогда
			СтрокаДопДанные = СтрокаДереваЗначений.Строки.Найти("ДопДанные.Подписанные", "ПолныйПуть");
		Иначе
			СтрокаДопДанные = СтрокаДереваЗначений.Строки.Найти("ДопДанные.НеПодписанные", "ПолныйПуть");
		КонецЕсли;
	ИначеЕсли НазваниеКолонки(СтрокаДерева.ПолныйПуть) = "ДопДанныеПодписанные"
			ИЛИ НазваниеКолонки(СтрокаДерева.ПолныйПуть) = "ДопДанныеНеПодписанные" Тогда
		СтрокаДопДанные = СтрокаДерева;
	Иначе
		СтрокаДерева.Значение = Истина;
		СтрокаДопДанные = СтрокаДерева.Строки[?(ЮридическиЗначимый, 0 ,1)];
	КонецЕсли;
	СтрокаДопДанные.Значение = Истина;
	
	Для Каждого Элемент Из СтруктураДопДанных Цикл
		КлючДопДанных = СтрЗаменить(Элемент.Ключ, ".", "");
		НовСтрока = СтрокаДопДанные.Строки.Найти(СтрокаДопДанные.ПолныйПуть + "." + КлючДопДанных, "ПолныйПуть");
		Если НовСтрока = Неопределено Или ДобавлятьНовыеСтроки Тогда
			НовСтрока = СтрокаДопДанные.Строки.Добавить();
			НовСтрока.ПолныйПуть = СтрокаДопДанные.ПолныйПуть + "." + КлючДопДанных;
			НомерУровня = СтрЧислоВхождений(НовСтрока.ПолныйПуть, ".") + 1;
			НовСтрока["Уровень" + НомерУровня] = НазваниеКолонки(НовСтрока.ПолныйПуть);
		КонецЕсли;
		НовСтрока.Значение = Элемент.Значение;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает название реквизита из полного пути
//
// Параметры:
//  ПолныйПуть - Строка - Полный путь до реквизита в дереве.
//
// Возвращаемое значение:
//  Строка - Название реквизита
//
Функция НазваниеКолонки(ПолныйПуть) Экспорт
	
	ПозицияРазделителя = СтрНайти(ПолныйПуть, ".", НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя = 0 Тогда
		Результат = СокрЛП(ПолныйПуть);
	Иначе
		Результат = СокрЛП(Сред(ПолныйПуть, ПозицияРазделителя + 1));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет существование реквизита в дереве, по указанному пути.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - область данных поиска.
//  ПолныйПуть - Строка - значение поиска.
// 
// Возвращаемое значение:
//  Булево - Истина, если реквизит существует.
//
Функция СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Экспорт
	
	Существует = Ложь;
	НайденнаяСтрока = ДеревоДанных.Строки.Найти(ПолныйПуть, "ПолныйПуть", Истина);
	Если НайденнаяСтрока <> Неопределено Тогда
		Существует = Истина;
	КонецЕсли;
	
	Возврат Существует;
	
КонецФункции

// Возвращает значение реквизита в дереве.
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть - Произвольный - значение поиска.
//  СообщатьОбОшибке - Булево - если Истина сообщать об ошибках поиска.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке = Истина) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СообщатьОбОшибке);
	
КонецФункции

// Значение реквизита строки дерева разбора.
//
// Параметры:
//  ДеревоРазбора	 - ДеревоЗначений - объект поиска.
//  СтрокаДерева	 - КоллекцияСтрокДереваЗначений - строка дерева значений.
//  ПутьКРеквизиту	 - Строка - путь к реквизиту.
// 
// Возвращаемое значение:
//  Произвольный - результат поиска.
//
Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту);
	
КонецФункции

// Задает параметры обработки ошибок для реквизита дерева электронного документа.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//                            (см. ЭлектронноеВзаимодействие.ДеревоЭлектронногоДокумента).
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ДобавитьВРеквизитОбработкуОшибки(Дерево, Реквизит, ПараметрыОбработкиОшибок) Экспорт
	
	СтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("ПолныйПуть", Реквизит), Истина);
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаДерева, ПараметрыОбработкиОшибок);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через механизм сообщений пользователю.
//
// Параметры:
//  СтрокиТаблицы	 - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                   - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                       параметры обработки ошибок.
//  ПолеТаблицы		 - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  КлючДанных		 - Строка - имя колонки таблицы, значение которой будет использовано в качестве ключа данных
//                              при выводе сообщения пользователю.
//                   - ЛюбаяСсылка - ссылка, значение которой будет использовано в качестве ключа при выводе
//                                   сообщения пользователю.
//  ПутьКДанным		 - Строка - путь к данным, который будет указан в сообщении пользователю. Если указывается путь
//                              к реквизиту таблицы, скобки ("[", "]") указывать не следует. Передача индекса строки
//                              производится через параметр "ПолеНомераСтроки".
//  ТекстОшибки		 - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки.
//  ПолеНомераСтроки - Строка - имя колонки таблицы, из которой будет подставляться в параметр "ПутьКДанным"
//                              индекс строки.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных = "",
	ПутьКДанным = "", ТекстОшибки = "", ПолеНомераСтроки = Неопределено) Экспорт
	
	НаборСтрок = Неопределено;
	ПодготовитьВходныеПараметрыДляДобавленияОбработкиОшибки(СтрокиТаблицы, НаборСтрок);
	
	// Для каждой строки получим уникальные параметры обработки ошибки и добавим их в набор строки.
	Для Каждого СтрокаТаблицыДанных Из НаборСтрок Цикл
		// В первый раз нужно инициализировать значение служебного реквизита "НаборПараметровОбработкиОшибок".
		Если СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Неопределено Тогда
			СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Новый Массив;
		КонецЕсли;
		
		// Подготовим значения параметров.
		Если ЗначениеЗаполнено(КлючДанных) Тогда
			// В качестве ключа можно передавать либо путь к полю таблицы, содержащему ключ, либо сам ключ.
			Если ТипЗнч(КлючДанных) = Тип("Строка") Тогда
			 	ЗначениеКлюча = СтрокаТаблицыДанных[КлючДанных];
			Иначе
				ЗначениеКлюча = КлючДанных;
			КонецЕсли;
		Иначе
			ЗначениеКлюча = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПутьКДанным) Тогда
			// Если в таблице содержится номер строки, его нужно подставить в путь к полю.
			Если ПолеНомераСтроки <> Неопределено Тогда
				ИндексСтроки = СтрокаТаблицыДанных[ПолеНомераСтроки] - 1;
				
				ПозицияКонцаОсновногоПути = СтрНайти(ПутьКДанным, ".", НаправлениеПоиска.СКонца);
				Если ПозицияКонцаОсновногоПути <> 0 Тогда
					ОсновнойПуть = Лев(ПутьКДанным, ПозицияКонцаОсновногоПути - 1);
					ДополнительныйПуть = Сред(ПутьКДанным, ПозицияКонцаОсновногоПути + 1);
					ЗначениеПутиКДанным = СтрШаблон("%1[%2].%3", ОсновнойПуть, ИндексСтроки, ДополнительныйПуть);
				Иначе
					ЗначениеПутиКДанным = ПутьКДанным;
				КонецЕсли;
			Иначе
				ЗначениеПутиКДанным = ПутьКДанным;
			КонецЕсли;
		Иначе
			ЗначениеПутиКДанным = "";
		КонецЕсли;
		
		// Добавим параметры обработки ошибки в набор строки.
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(ЗначениеКлюча,
			ЗначениеПутиКДанным,,,, ТекстОшибки);
		ДобавитьПараметрыОбработкиОшибкиВНабор(СтрокаТаблицыДанных, ПолеТаблицы, ПараметрыОбработкиОшибки);
	КонецЦикла;

КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через механизм навигационных ссылок.
// Примечание: в данной версии библиотеки не используется.
//
// Параметры:
//  СтрокиТаблицы	        - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                          - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                              параметры обработки ошибок.
//  ПолеТаблицы		        - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  ПолеНавигационнойСсылки - Строка - имя колонки таблицы, из которой будет извлекаться навигационная ссылка для
//                                     открытия формы при клике на ошибку.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезНавигационнуюСсылку(СтрокиТаблицы, ПолеТаблицы, ПолеНавигационнойСсылки) Экспорт

	НаборСтрок = Неопределено;
	ПодготовитьВходныеПараметрыДляДобавленияОбработкиОшибки(СтрокиТаблицы, НаборСтрок);
	
	// Для каждой строки получим уникальные параметры обработки ошибки и добавим их в набор строки.
	Для Каждого СтрокаТаблицыДанных Из НаборСтрок Цикл
		// В первый раз нужно инициализировать значение служебного реквизита "НаборПараметровОбработкиОшибок".
		Если СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Неопределено Тогда
			СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Новый Массив;
		КонецЕсли;
		
		// Добавим параметры обработки ошибки в набор строки.
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(,, СтрокаТаблицыДанных[ПолеНавигационнойСсылки]);
		ДобавитьПараметрыОбработкиОшибкиВНабор(СтрокаТаблицыДанных, ПолеТаблицы, ПараметрыОбработкиОшибки);
	КонецЦикла;

КонецПроцедуры

// Сохраняет в таблице значений, подлежащей загрузке в дерево электронного документа, параметры ошибок
// для обработки через открытие формы.
// Примечание: в данной версии библиотеки не используется.
//
// Параметры:
//  СтрокиТаблицы	           - Массив - строки таблицы значений, в которых нужно заполнить параметры обработки ошибок.
//                             - ТаблицаЗначений - таблица значений, в каждой строке которой нужно сохранить переданные
//                                              параметры обработки ошибок.
//  ПолеТаблицы		           - Строка - имя колонки таблицы, для которой указываются параметры обработки ошибок.
//  ИмяФормы                   - Строка - полное имя формы, которую нужно открыть при клике по ошибке.
//  СтатичныеПараметрыФормы    - Структура - структура, которая будет передана в форму в качестве параметров.
//  ДинамическиеПараметрыФормы - Структура - описывает параметры, передаваемые в открываемую форму, значения по которым
//                                           формируются для каждой строки таблицы индивидуально:
//                                 * Ключ     - Строка - содержит имя параметра.
//                                 * Значение - Строка - имя поля таблицы, содержащего значение параметра.
//
Процедура ДобавитьВТаблицуОбработкуОшибкиЧерезОткрытиеФормы(СтрокиТаблицы, ПолеТаблицы, ИмяФормы,
	Знач СтатичныеПараметрыФормы = Неопределено, ДинамическиеПараметрыФормы = Неопределено) Экспорт

	НаборСтрок = Неопределено;
	ПодготовитьВходныеПараметрыДляДобавленияОбработкиОшибки(СтрокиТаблицы, НаборСтрок);
	
	// Для каждой строки получим уникальные параметры обработки ошибки и добавим их в набор строки.
	Для Каждого СтрокаТаблицыДанных Из НаборСтрок Цикл
		// В первый раз нужно инициализировать значение служебного реквизита "НаборПараметровОбработкиОшибок".
		Если СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Неопределено Тогда
			СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок = Новый Массив;
		КонецЕсли;
		
		// Подготовим значения параметров.
		Если СтатичныеПараметрыФормы = Неопределено Тогда
			ЗначениеПараметровФормы = Новый Структура;
		Иначе
			ЗначениеПараметровФормы = ОбщегоНазначения.СкопироватьРекурсивно(СтатичныеПараметрыФормы);
		КонецЕсли;
		
		// Могли быть переданы динамические параметры, значения которых будут разными для каждой строки.
		Если ДинамическиеПараметрыФормы <> Неопределено Тогда
			Для Каждого КлючИЗначение Из ДинамическиеПараметрыФормы Цикл
				ЗначениеПараметровФормы.Вставить(КлючИЗначение.Ключ, СтрокаТаблицыДанных[КлючИЗначение.Значение]);
			КонецЦикла;
		КонецЕсли;
		
		// Добавим параметры обработки ошибки в набор строки.
		ПараметрыОбработкиОшибки = ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки(,,, ИмяФормы, ЗначениеПараметровФормы);
		ДобавитьПараметрыОбработкиОшибкиВНабор(СтрокаТаблицыДанных, ПолеТаблицы, ПараметрыОбработкиОшибки);
	КонецЦикла;

КонецПроцедуры

// Формирует дерево данных для заполнения или чтения прикладным решением.
//
// Параметры:
//  ПутьКМакету - Строка - путь к макету в формате "ИмяОбработки.ИмяМакета", например,
//                         "ОбменСКонтрагентами.Акт501_Исполнитель" (см. Обработка.ОбменСКонтрагентами.Макеты).
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево документа.
//
//
Функция ДеревоЭлектронногоДокумента(ПутьКМакету) Экспорт
	
	Дерево = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ДеревоЭлектронногоДокумента(ПутьКМакету);
	
	Возврат Дерево.Скопировать();
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// ТехнологияСервиса.УправлениеТарифами

// См. ТарификацияПереопределяемый.ПриФормированииСпискаУслуг
//
Процедура ПриФормированииСпискаУслуг(ПоставщикиУслуг) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
		МодульОбменСКонтрагентами.ПриФормированииСпискаУслуг(ПоставщикиУслуг);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульОбменБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульОбменБизнесСеть.ПриФормированииСпискаУслуг(ПоставщикиУслуг);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.БизнесСеть
	
КонецПроцедуры

// Конец ТехнологияСервиса.УправлениеТарифами

// ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииСервисовСопровождения
//
Процедура ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриОпределенииИспользуемыхВерсийВнешнихКомпонент(Идентификаторы);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками

КонецПроцедуры

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриОпределенииСервисовСопровождения
//
Процедура ПриОпределенииСервисовСопровождения(МодулиСервисов) Экспорт
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда 
		ОбщийМодуль = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		ОбщийМодуль.ПриОпределенииСервисовСопровождения(МодулиСервисов);	
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
КонецПроцедуры

// Конец ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	// ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		ФООбменСКонтрагентами = "ИспользоватьОбменЭД";
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ОтправкаЭлектронныхДокументов"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
		НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
		НоваяСтрока.ДоступноВМоделиСервиса = Ложь;
		НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПолучениеЭлектронныхДокументов"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
		НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
		НоваяСтрока.ДоступноВМоделиСервиса = Ложь;
		НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПроверкаНовыхЭлектронныхДокументов"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
		НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПроверкаКонтрагентовБЭД"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПроверкаКонтрагентовБЭДВыполнение"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
		НоваяСтрока.Параметризуется = Истина;
		
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ПометкаНаУдалениеПакетовЭД"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции[ФООбменСКонтрагентами];
		НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
		
	КонецЕсли;
	
	// ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;

	// ОбменССайтами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменССайтами") Тогда
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ОбменССайтом"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменССайтом"];
		НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	КонецЕсли;

	// ТорговыеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		НоваяСтрока = Настройки.Добавить();
		НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["СинхронизацияТорговыхПредложений"];
		НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьОбменБизнесСеть"];
		НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	КонецЕсли;
	
	// ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульИнтеграцияСЯндексКассой.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	// РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульРаботаСНоменклатурой.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
	// БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриОпределенииНастроекРегламентныхЗаданий(Настройки);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует обработчики поставляемых данных.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - исходная таблица обработчиков поставляемых данных.
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	
	Если ЕстьОбменСКонтрагентами Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
		Обработчик = Обработчики.Добавить();
		Обработчик.ВидДанных = "ПравилаПреобразованияФорматовЭлектронныхДокументов";
		Обработчик.КодОбработчика = "ПравилаПреобразованияФорматовЭлектронныхДокументов";
		Обработчик.Обработчик = МодульОбменСКонтрагентами;
	КонецЕсли;
	
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
	
	Если ЕстьОбменСБанками Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		Обработчик = Обработчики.Добавить();
		Обработчик.ВидДанных = "DirectBankList";
		Обработчик.КодОбработчика = "DirectBankList";
		Обработчик.Обработчик = МодульОбменСБанками;
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	
	Если ЕстьОбменСКонтрагентами Тогда
		МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
		МодульОбменСКонтрагентами.ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииНастроек
//
Процедура ПриОпределенииНастроек(Настройки) Экспорт
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");

	Если ЕстьОбменСКонтрагентами Тогда
		Настройки.НеОчищатьФайлы.Добавить(Метаданные.Справочники["ЭДПрисоединенныеФайлы"]);
		Настройки.НеСинхронизироватьФайлы.Добавить(Метаданные.Справочники["ЭДПрисоединенныеФайлы"]);
		Настройки.НеВыводитьВИнтерфейс.Добавить(Метаданные.Справочники["ЭДПрисоединенныеФайлы"]);
	КонецЕсли;
	
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");

	Если ЕстьОбменСБанками Тогда
		Настройки.НеОчищатьФайлы.Добавить(Метаданные.Справочники["СообщениеОбменСБанкамиПрисоединенныеФайлы"]);
		Настройки.НеСинхронизироватьФайлы.Добавить(Метаданные.Справочники["СообщениеОбменСБанкамиПрисоединенныеФайлы"]);
		Настройки.НеВыводитьВИнтерфейс.Добавить(Метаданные.Справочники["СообщениеОбменСБанкамиПрисоединенныеФайлы"]);
	КонецЕсли;

	
КонецПроцедуры

// См. ЭлектроннаяПодписьПереопределяемый.ПриСозданииФормыПроверкаСертификата
//
Процедура ПриСозданииФормыПроверкаСертификата(Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок, СтандартныеПроверки, ВводитьПароль = Истина) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменаСБанками.ПриСозданииФормыПроверкаСертификата(
			Сертификат, ДополнительныеПроверки, ПараметрыДополнительныхПроверок, СтандартныеПроверки, ВводитьПароль);
	КонецЕсли;
	
КонецПроцедуры

// Формирование текстового представления рекламы.
//
// Параметры:
//  ДополнительнаяИнформация - Структура - с полями:
//   * Картинка - Картинка - картинка из библиотеки картинок;
//   * Текст - Строка - форматированный текст надписи с навигационными ссылками.
//  МассивСсылок - Массив - список ссылок на объекты.
//
Процедура ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок) Экспорт
	
	Если Не ЗначениеЗаполнено(МассивСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПлатежногоПоручения = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"ПлатежноеПоручениеВМетаданных");
	
	Если МассивСсылок[0].Метаданные().Имя = ИмяПлатежногоПоручения
		И ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок);
		
	ИначеЕсли ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульОбменСКонтрагентамиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиКлиентСервер");
		МодульОбменСКонтрагентамиКлиентСервер.ПриВыводеНавигационнойСсылкиВФормеОбъектаИБ(ДополнительнаяИнформация, МассивСсылок);
		
	КонецЕсли;
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		ШаблоныЗаданий.Добавить("ПроверкаНовыхЭлектронныхДокументов");
		ШаблоныЗаданий.Добавить("ПроверкаКонтрагентовБЭД");
		ШаблоныЗаданий.Добавить("ПометкаНаУдалениеПакетовЭД");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		ШаблоныЗаданий.Добавить("СинхронизацияТорговыхПредложений");
		ШаблоныЗаданий.Добавить("ОбновлениеПодсказокТорговыеПредложения");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульИнтеграцияСЯндексКассой.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульРаботаСНоменклатурой.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками

	// ЭлектронноеВзаимодействие.БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриПолученииСпискаШаблонов(ШаблоныЗаданий);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.БизнесСеть
	
КонецПроцедуры

// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		СоответствиеИменПсевдонимам.Вставить("ПроверкаНовыхЭлектронныхДокументов");
		СоответствиеИменПсевдонимам.Вставить("ОбменСКонтрагентамиСлужебный.ПроверитьКонтрагентовВыполнениеРегламентноеЗадание");
		СоответствиеИменПсевдонимам.Вставить("ОбменСКонтрагентамиСлужебный.ПометкаНаУдалениеПакетовЭлектронныхДокументов");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменССайтами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменССайтами") Тогда
		СоответствиеИменПсевдонимам.Вставить("ОбменССайтомСобытия.ЗаданиеВыполнитьОбмен", "ОбменССайтомСобытия.ЗаданиеВыполнитьОбмен");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменССайтами
	
	// ЭлектронноеВзаимодействие.ТорговыеПредложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		СоответствиеИменПсевдонимам.Вставить("СинхронизацияТорговыхПредложений");
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ТорговыеПредложения
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульИнтеграцияСЯндексКассой = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульИнтеграцияСЯндексКассой.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульРаботаСНоменклатурой.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// ЭлектронноеВзаимодействие.БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.БизнесСеть
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	// ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики);
	КонецЕсли;
	// Конец ОбменСБанками
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	// ЭлектронноеВзаимодействие
	Списки.Вставить(Метаданные.Справочники.МаршрутыПодписания, Истина);
	// Конец ЭлектронноеВзаимодействие
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческихПредложенийПоставщиков");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Отложенно

#Область Версия_1_7_2

#Область Справочники_МаршрутыПодписания_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.7.2.12";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Процедура = "Справочники.МаршрутыПодписания.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f776e15c-cdf3-4712-a8e7-128edbcf4b1c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.МаршрутыПодписания.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ЧитаемыеОбъекты = "Справочник.МаршрутыПодписания";
	Обработчик.ИзменяемыеОбъекты = "Справочник.МаршрутыПодписания";
	Обработчик.БлокируемыеОбъекты = "Справочник.МаршрутыПодписания";
	Обработчик.Комментарий = НСтр("ru = '1С:БЭД: Заполняет служебные свойства у предопределенных маршрутов. 
	|Работа с маршрутами подписания временно невозможна.'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "До";

		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "До";
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
		НоваяСтрока.Процедура = "ЭлектронноеВзаимодействие.Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию";
		НоваяСтрока.Порядок = "До";
	КонецЕсли;

#КонецОбласти

#КонецОбласти

#КонецОбласти
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульПодсистемы.ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриПопыткеЗанятьФайл.
Процедура ПриПопыткеЗанятьФайл(ДанныеФайла, ОписаниеОшибки) Экспорт
	
	// ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриПопыткеЗанятьФайл(ДанныеФайла, ОписаниеОшибки);
	КонецЕсли;
	// Конец ОбменСБанками
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.МаршрутыПодписания.Чтение.Организации
	|";
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСБанками
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСБанками
	
	// ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческихПредложенийПоставщиков");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.ЗапросКоммерческогоПредложенияОтКлиента");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческогоПредложенияОтКлиента
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеКлиенту");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту
	
	// ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика
	Если ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика") Тогда
		
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("Документы.КоммерческоеПредложениеПоставщика");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
		
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеПоставщика
	
	// ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.РаботаСНоменклатурой
	
	// ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов") Тогда 
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("СопоставлениеНоменклатурыКонтрагентов");
		МодульПодсистемы.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.СопоставлениеНоменклатурыКонтрагентов
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных()
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	// БизнесСеть
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриДобавленииПереименованийОбъектовМетаданных(Итог);
	КонецЕсли;
	// Конец Новости

КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд
//
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменаСБанками.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульОбменаСБанками.ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд);
	КонецЕсли;

КонецПроцедуры

// См. процедуру ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов
//
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульОбменаСБанками.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
	КонецЕсли;

КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменаСБанками.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
		
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульОбменаСБанками = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассой");
		МодульОбменаСБанками.ПриОпределенииКомандПодключенныхКОбъекту(
			НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды);
	КонецЕсли;
	
КонецПроцедуры

// См. РаботаВБезопасномРежимеПереопределяемый.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		МодульОбменСКонтрагентамиСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		МодульТорговыеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатуройСлужебный");
		МодульТорговыеПредложенияСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		МодульОбменСБанками.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой.ОблачныеКлассификаторы") Тогда
		МодульОблачныеКлассификаторыСлужебный = ОбщегоНазначения.ОбщийМодуль("ОблачныеКлассификаторыСлужебный");
		МодульОблачныеКлассификаторыСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;

	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		МодульБизнесСеть.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		МодульТорговыеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		МодульТорговыеПредложенияСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		МодульТорговыеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассойСлужебный");
		МодульТорговыеПредложенияСлужебный.ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений);
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПрофилиБезопасности

// СтандартныеПодсистемы.ОбновлениеКонфигурации

// Используется при добавлении отложенных обработчиков обновления,
// когда не требуется регистрировать данные к обработке. Не заполнять.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗаполнениеДанныхОбновления(Параметры) Экспорт
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроекОбновленияИнформационнойБазы(Параметры) Экспорт
	
	Параметры.ОбъектыСНачальнымЗаполнением.Добавить(Метаданные.Справочники.МаршрутыПодписания);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

#Область Справочники_ЭДПрисоединенныеФайлы

// См. Справочники.ЭДПрисоединенныеФайлы.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию
Процедура Справочники_ЭДПрисоединенныеФайлы_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.ЭДПрисоединенныеФайлы");
		МодульМенеджера.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.ЭДПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию
Процедура Справочники_ЭДПрисоединенныеФайлы_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.ЭДПрисоединенныеФайлы");
		МодульМенеджера.ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.ЭДПрисоединенныеФайлы.ДанныеОбновленыНаНовуюВерсиюПрограммы
Функция Справочники_ЭДПрисоединенныеФайлы_ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Результат = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.ЭДПрисоединенныеФайлы");
		Результат = МодульМенеджера.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Справочники_УдалитьПрофилиНастроекЭДО

// См. Справочники.УдалитьПрофилиНастроекЭДО.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию
Процедура Справочники_УдалитьПрофилиНастроекЭДО_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.УдалитьПрофилиНастроекЭДО");
		МодульМенеджера.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.УдалитьПрофилиНастроекЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию
Процедура Справочники_УдалитьПрофилиНастроекЭДО_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.УдалитьПрофилиНастроекЭДО");
		МодульМенеджера.ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.УдалитьПрофилиНастроекЭДО.ДанныеОбновленыНаНовуюВерсиюПрограммы
Функция Справочники_УдалитьПрофилиНастроекЭДО_ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Результат = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.УдалитьПрофилиНастроекЭДО");
		Результат = МодульМенеджера.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Справочники_НастройкиОбменСБанками

// См. Справочники.НастройкиОбменСБанками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию
Процедура Справочники_НастройкиОбменСБанками_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.НастройкиОбменСБанками");
		МодульМенеджера.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.НастройкиОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию
Процедура Справочники_НастройкиОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.НастройкиОбменСБанками");
		МодульМенеджера.ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// См. Справочники.НастройкиОбменСБанками.ДанныеОбновленыНаНовуюВерсиюПрограммы
Функция Справочники_НастройкиОбменСБанками_ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор) Экспорт
	
	Результат = Истина;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Справочники.НастройкиОбменСБанками");
		Результат = МодульМенеджера.ДанныеОбновленыНаНовуюВерсиюПрограммы(МетаданныеИОтбор);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Документы_СообщениеОбменСБанками

// См. Документы.СообщениеОбменСБанками.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию
Процедура Документы_СообщениеОбменСБанками_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Документы.СообщениеОбменСБанками");
		МодульМенеджера.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. Документы.СообщениеОбменСБанками.ОбработатьДанныеДляПереходаНаНовуюВерсию
Процедура Документы_СообщениеОбменСБанками_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками") Тогда
		
		МодульМенеджера = ОбщегоНазначения.ОбщийМодуль("Документы.СообщениеОбменСБанками");
		МодульМенеджера.ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
		
	Иначе
		
		Параметры.ОбработкаЗавершена = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ДеревоЭлектронногоДокумента.
// Формирует дерево данных для заполнения или чтения прикладным решением.
//
// Параметры:
//  Макет - Макет - Макет с описанием структуры дерева (см. Обработка.ОбменСКонтрагентами.Макеты).
//
// Возвращаемое значение:
//  ДеревоЗначений - Дерево документа.
//
Функция ДеревоДокумента(Макет) Экспорт
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ДеревоЭлектронногоДокумента(Макет);
	
КонецФункции

// Устарела. Функционал перенесен в прикладное решение.
// Обработчик обновления БЭД 1.3.10.24.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура УстановитьПризнакИспользованияНесколькихОрганизаций(Параметры) Экспорт
	
	ТипОрганизации = Неопределено;
	МассивТипов = Метаданные.ОпределяемыеТипы.Организация.Тип.Типы();
	Для Каждого ТипСправочника Из МассивТипов Цикл
		
		Если ТипСправочника <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			И Справочники.ТипВсеСсылки().СодержитТип(ТипСправочника) Тогда
			ТипОрганизации = ТипСправочника;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТипОрганизации = Неопределено Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ОрганизацияСсылка = Новый(ТипОрганизации);
	ИмяСправочникаОрганизации = ОрганизацияСсылка.Метаданные().Имя;
	
	Количество = 0;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	&СправочникОрганизации КАК Организации
		|ГДЕ
		|	НЕ Организации.Предопределенный
		|	И НЕ Организации.ПометкаУдаления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СправочникОрганизации", 
		"Справочник." + ИмяСправочникаОрганизации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Если Количество > 1 Тогда
		Константы.УдалитьИспользоватьНесколькоОрганизацийБЭД.Установить(Истина);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСДеревомДанных

Функция ДанныеШапкиДерева(ДеревоДанных)
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	Для Каждого Колонка Из ДеревоДанных.Колонки Цикл
		ТаблицаВозврата.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ЗаполнитьТаблицуРекурсивно(ТаблицаВозврата, ДеревоДанных.Строки);
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция ДанныеТаблицыДерева(ДеревоДанных, НазваниеТаблицы)
	
	ТаблицаВозврата = Новый ТаблицаЗначений;
	СтрокаТаблицы = ДеревоДанных.Строки.Найти(НазваниеТаблицы, "ПолныйПуть");
	НомерСтроки = СтрокаТаблицы.Строки[0];
	Для Каждого Строка Из НомерСтроки.Строки Цикл
		ТаблицаВозврата.Колонки.Добавить(НазваниеКолонки(Строка.ПолныйПуть));
	КонецЦикла;
	
	Для Каждого Строка Из СтрокаТаблицы.Строки Цикл
		НовСтрока = ТаблицаВозврата.Добавить();
		Для Каждого СтрокаРеквизита Из Строка.Строки Цикл
			ИмяКолонки = НазваниеКолонки(СтрокаРеквизита.ПолныйПуть);
			Если СтрокаРеквизита.Признак = "Таблица" Тогда
				НовСтрока[ИмяКолонки] = ДанныеТаблицыДерева(Строка, СтрокаРеквизита.ПолныйПуть);
			Иначе
				НовСтрока[ИмяКолонки] = СтрокаРеквизита.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Возврат ТаблицаВозврата;
	
КонецФункции

Процедура ЗаполнитьТаблицуРекурсивно(ТаблицаЗначений, СтрокиДерева, НазваниеТаблицы = Неопределено)
	
	Для Каждого Строка Из СтрокиДерева Цикл
		Если НЕ Строка.Признак = "Таблица" Тогда
			НовСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, Строка);
			Если Строка.Строки.Количество()>0 Тогда
				ЗаполнитьТаблицуРекурсивно(ТаблицаЗначений, Строка.Строки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьСтрокиДереваДляТаблицыРекурсивно(СтрокаПолучатель, СтрокаИсточник)
	
	СлужебныеСвойства = "ТекстОшибки, ПутьКДаннымСообщения, КлючСообщения, НавигационнаяСсылка, ИмяФормы, ПараметрыФормы";
	
	Для Каждого Реквизит Из СтрокаИсточник.Строки Цикл
		Если НазваниеКолонки(Реквизит.ПолныйПуть) = "НомерСтроки" И ТипЗнч(Реквизит.Значение) = Тип("Число")
				И Реквизит.Значение > 1 Тогда
			Прервать;
		КонецЕсли;
		НовСтрока = СтрокаПолучатель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Реквизит,, СлужебныеСвойства);
		НовСтрока.Значение = "";
		Если Реквизит.Строки.Количество() > 0 Тогда
			СкопироватьСтрокиДереваДляТаблицыРекурсивно(НовСтрока, Реквизит);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция СтруктураКолонокТаблицыДерева(Дерево, НазваниеТаблицы)
	
	СтруктураВозврата = Новый Структура;
	
	СтрокаДерева = Дерево.Строки.Найти(НазваниеТаблицы + ".НомерСтроки", "ПолныйПуть", Истина);
	Для Каждого Подстрока Из СтрокаДерева.Строки Цикл
		НазваниеКолонки = НазваниеКолонки(Подстрока.ПолныйПуть);
		Если НазваниеКолонки = "ДопДанные" Тогда
			СтруктураВозврата.Вставить("ДопДанныеПодписанные");
			СтруктураВозврата.Вставить("ДопДанныеНеПодписанные");
		Иначе
			СтруктураВозврата.Вставить(НазваниеКолонки);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьПараметрыОбработкиОшибокВСтрокеДерева(СтрокаДерева, ПараметрыОбработкиОшибок)
	
	Если ТипЗнч(ПараметрыОбработкиОшибок) = Тип("Структура") Тогда
		ПараметрыОбработкиОшибок.Свойство("ТекстОшибки", СтрокаДерева.ТекстОшибки);
		ПараметрыОбработкиОшибок.Свойство("КлючСообщения", СтрокаДерева.КлючСообщения);
		ПараметрыОбработкиОшибок.Свойство("ПутьКДаннымСообщения", СтрокаДерева.ПутьКДаннымСообщения);
		ПараметрыОбработкиОшибок.Свойство("НавигационнаяСсылка", СтрокаДерева.НавигационнаяСсылка);
		ПараметрыОбработкиОшибок.Свойство("ИмяФормы", СтрокаДерева.ИмяФормы);
		ПараметрыОбработкиОшибок.Свойство("ПараметрыФормы", СтрокаДерева.ПараметрыФормы);
	ИначеЕсли ТипЗнч(ПараметрыОбработкиОшибок) = Тип("Строка") Тогда
		СтрокаДерева.ТекстОшибки = ПараметрыОбработкиОшибок;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПараметрыОбработкиОшибкиВНабор(СтрокаТаблицыДанных, ПолеТаблицы, ПараметрыОбработкиОшибки)
	
	ЭлементНабораПараметров = Новый Структура("ИмяКолонки, ПараметрыОбработкиОшибок",
		ПолеТаблицы, ПараметрыОбработкиОшибки);
	СтрокаТаблицыДанных.НаборПараметровОбработкиОшибок.Добавить(ЭлементНабораПараметров);

КонецПроцедуры

Процедура ОбработатьРеквизитДереваСУчетомПризнака(СтрокаДанных, ТекущаяСтрока, СтрокаРеквизита,
		ИмяКолонки, ПолныйПуть)
	
	Если СтрокаРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаРеквизита.Признак = "Таблица"
		
		И Не СтрокаДанных[ИмяКолонки] = Неопределено Тогда
		ЗагрузитьТаблицуВДерево(ТекущаяСтрока, СтрокаДанных[ИмяКолонки], ПолныйПуть);
		
	ИначеЕсли СтрокаРеквизита.Признак = "Группа"
		
		И Не СтрокаДанных[ИмяКолонки] = Неопределено Тогда
		ЗагрузитьСтруктуруВГруппуДерева(ТекущаяСтрока, СтрокаДанных[ИмяКолонки], ПолныйПуть);
		СтрокаРеквизита.Значение = Истина;
		
	ИначеЕсли СтрокаРеквизита.Признак = "Выбор"
		И Не СтрокаДанных[ИмяКолонки] = Неопределено Тогда
		
		Для Каждого СтрокаРеквизитаПодчиненная Из СтрокаРеквизита.Строки Цикл
			
			ИмяКолонкиПодчиненной = Прав(СтрокаРеквизитаПодчиненная.ПолныйПуть,
			СтрДлина(СтрокаРеквизитаПодчиненная.ПолныйПуть) - СтрНайти(СтрокаРеквизитаПодчиненная.ПолныйПуть,
			".", НаправлениеПоиска.СКонца));
			
			Если (ТипЗнч(СтрокаДанных[ИмяКолонки]) = Тип("ТаблицаЗначений")
				И СтрокаДанных.Владелец().Колонки.Найти(ИмяКолонкиПодчиненной) = Неопределено)
				Или (ТипЗнч(СтрокаДанных[ИмяКолонки]) = Тип("Структура")
				И Не СтрокаДанных[ИмяКолонки].Свойство(ИмяКолонкиПодчиненной)) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрокаПодчиненная = ТекущаяСтрока.Строки.Найти(ПолныйПуть, "ПолныйПуть");
			
			Если ТекущаяСтрокаПодчиненная = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОбработатьРеквизитДереваСУчетомПризнака(СтрокаДанных[ИмяКолонки], ТекущаяСтрокаПодчиненная,
				СтрокаРеквизитаПодчиненная, ИмяКолонкиПодчиненной, СтрокаРеквизитаПодчиненная.ПолныйПуть);
			
			МассивРеквизитов = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(СтрокаРеквизитаПодчиненная.ПолныйПуть);
			
			Если МассивРеквизитов.Количество() = 1 Тогда
				Возврат;
			КонецЕсли;
			
			Путь = "";
			Дерево = ТекущаяСтрока.Владелец();
			
			Для Каждого Элемент Из МассивРеквизитов Цикл
				
				Путь = ?(ЗначениеЗаполнено(Путь), Путь + "." + Элемент, Элемент);
				
				Если Путь = ПолныйПуть Тогда
					СтрокаДерева = ТекущаяСтрока.Строки.Найти(Путь, "ПолныйПуть", Истина);
				Иначе
					СтрокаДерева = Дерево.Строки.Найти(Путь, "ПолныйПуть", Истина);
				КонецЕсли;
				
				Если СтрокаДерева <> Неопределено Тогда
					Если СтрокаДерева.Признак = "Группа" Тогда
						СтрокаДерева.Значение = Истина;
					ИначеЕсли СтрокаДерева.Признак = "Выбор" Тогда
						ТекущийИндекс = МассивРеквизитов.Найти(Элемент);
						СтрокаДерева.Значение = МассивРеквизитов[ТекущийИндекс + 1];
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Если СтрокаРеквизита.Признак <> "Выбор" Тогда
			
			СтрокаРеквизита.Значение = СтрокаДанных[ИмяКолонки];
			
			Если ЗначениеЗаполнено(СтрокаРеквизита.Родитель)
				И СтрокаРеквизита.Родитель.Признак = "Группа" Тогда
				СтрокаРеквизита.Родитель.Значение = Истина;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли
	
КонецПроцедуры

Процедура ПодготовитьВходныеПараметрыДляДобавленияОбработкиОшибки(СтрокиТаблицы, НаборСтрок)
	
	// Получим единую типизацию.
	Если ТипЗнч(СтрокиТаблицы) = Тип("Массив") Тогда
		ТаблицаДанных = СтрокиТаблицы[0].Владелец();
		НаборСтрок = СтрокиТаблицы;
	ИначеЕсли ТипЗнч(СтрокиТаблицы) = Тип("СтрокаТаблицыЗначений") Тогда
		ТаблицаДанных = СтрокиТаблицы.Владелец();
		НаборСтрок = Новый Массив;
		НаборСтрок.Добавить(СтрокиТаблицы);
	Иначе // таблица значений
		ТаблицаДанных = СтрокиТаблицы;
		НаборСтрок = СтрокиТаблицы;
	КонецЕсли;
	
	// Если в таблице нет служебной колонки, добавим ее.
	Если ТаблицаДанных.Колонки.Найти("НаборПараметровОбработкиОшибок") = Неопределено Тогда
		ТаблицаДанных.Колонки.Добавить("НаборПараметровОбработкиОшибок");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти
