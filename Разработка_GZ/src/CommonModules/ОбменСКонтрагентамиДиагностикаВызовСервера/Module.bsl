////////////////////////////////////////////////////////////////////////////////
// ОбменСКонтрагентамиДиагностикаВызовСервера: механизм диагностики обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// См. ОбменСКонтрагентамиДиагностика.ПолучитьРезультатыДиагностики.
Функция ВыполнитьДиагностику(ПараметрыВыполненияДиагностики = Неопределено) Экспорт
	
	ПараметрыПроцедуры = Новый Структура;
	
	ПараметрыПроцедуры.Вставить("ПараметрыВыполненияДиагностики", ПараметрыВыполненияДиагностики);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиДиагностика.ПолучитьРезультатыДиагностики",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительнаяОперация;
	
КонецФункции 

Функция СкачатьФайлСертификатаГУЦ(URL) Экспорт
	
	ДанныеСертификата = Новый Структура;
	РезультатЗагрузки = СкачатьФайлВоВременноеХранилище(URL);
	ДанныеСертификата.Вставить("РезультатЗагрузки", РезультатЗагрузки);
	Если РезультатЗагрузки.Статус Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(РезультатЗагрузки.Путь);
		СертификатКриптографии = Новый СертификатКриптографии(ДвоичныеДанные);
		ДанныеСертификата.Вставить("Отпечаток", СертификатКриптографии.Отпечаток);
	Иначе 
		ДанныеСертификата.Вставить("Отпечаток", Неопределено);
	КонецЕсли;
	
	Возврат ДанныеСертификата;
	
КонецФункции

Функция СкачатьФайлВоВременноеХранилище(URL) Экспорт
	
	Возврат ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(URL);
	
КонецФункции

Процедура ЗаполнитьОтчетыДляАдминистратора(РезультатДиагностики, ВидыДиагностики, ПараметрыВыполненияДляОтчета) Экспорт
	
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография()) Тогда
		
		РезультатДиагностикиКриптографии = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиКриптография());
		
		РезультатДиагностикиКриптографии.ОтчетДляАдминистратора =
			ОбменСКонтрагентамиДиагностика.ОтчетДляАдминистратораКриптография(РезультатДиагностикиКриптографии, ПараметрыВыполненияДляОтчета);
		
	КонецЕсли;
	
	Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьВидДиагностики(ВидыДиагностики,
		ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации())
		И Не ОбменСКонтрагентамиДиагностикаКлиентСервер.СкрыватьРезультатТестаАутентификации(РезультатДиагностики) Тогда
		
		РезультатТестаАутентификации = ОбменСКонтрагентамиДиагностикаКлиентСервер.РезультатВидаДиагностики(РезультатДиагностики,
			ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидДиагностикиТестАутентификации());
		
		РезультатТестаАутентификации.ОтчетДляАдминистратора =
			ОбменСКонтрагентамиДиагностика.ОтчетДляАдминистратораТестАутентификации(РезультатТестаАутентификации, ПараметрыВыполненияДляОтчета);
		
	КонецЕсли;
		
КонецПроцедуры

Функция УчетныеДанныеАбонентаТакском(ДанныеМаркера) Экспорт
	
	Если ЭтоАдресВременногоХранилища(ДанныеМаркера) Тогда
		ДвоичныеДанныеМаркера = ПолучитьИзВременногоХранилища(ДанныеМаркера);
	Иначе
		ДвоичныеДанныеМаркера = ДанныеМаркера;
	КонецЕсли;
	
	Результат = Неопределено;
	
	СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
	АдресРесурса = "GetMyAccountInfo";
	ВидОперации = НСтр("ru = 'Получение учетных данных'");
	
	РезультатОперации = ОбменСКонтрагентамиВнутренний.РезультатОперацииЭДОПолучить(ДвоичныеДанныеМаркера, СпособОбмена, АдресРесурса,
		ВидОперации);
		
	Если РезультатОперации <> Неопределено Тогда
		Если РезультатОперации.Свойства().Получить("TaxcomId") = Неопределено Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не обнаружено.'");
		ИначеЕсли Не ЗначениеЗаполнено(РезультатОперации.TaxcomId) Тогда
			ПодробноеОписаниеОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО: Поле ""TaxcomId"" в ответе сервера не заполнено.'");	
		Иначе
			Результат = Новый Структура;
			Результат.Вставить("ИдентификаторОрганизации", РезультатОперации.TaxcomId);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Ошибка чтения ответа сервиса ЭДО.'");
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(ВидОперации, ПодробноеОписаниеОшибки, ТекстОшибки);	
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция СинонимРолиДобавлениеИзменениеЭлектронныхДокументов() Экспорт
	Возврат Метаданные.Роли.ДобавлениеИзменениеЭлектронныхДокументов.Синоним;
КонецФункции

#Область УстранениеОшибок

Функция НачатьДобавлениеПакетовВИсключения(ПакетыЭД) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Добавление пакетов ЭД в исключения'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПакетыЭД", ПакетыЭД);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ДобавитьПакетыВИсключения",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Функция НачатьУдалениеУчетныхЗаписей(ПакетыЭД) Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление учетных записей ЭДО'");
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ПакетыЭД", ПакетыЭД);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.УдалитьУчетныеЗаписиЭДО",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Процедура ИзменитьДатуЗапросаДанных(КлючиЗаписей, КонтекстОперации, СоответствиеОшибокДанным,
	ИсправленныеОшибки) Экспорт
	
	ИсправитьПроблемуНеполученныхДокументовИПриглашений(КлючиЗаписей, КонтекстОперации, СоответствиеОшибокДанным,
		ИсправленныеОшибки, Истина);
	
КонецПроцедуры

Процедура ИгнорироватьПредупреждениеОНеполученныхДокументах(КлючиЗаписей, КонтекстОперации, СоответствиеОшибокДанным,
	ИсправленныеОшибки) Экспорт
	
	ИсправитьПроблемуНеполученныхДокументовИПриглашений(КлючиЗаписей, КонтекстОперации, СоответствиеОшибокДанным,
		ИсправленныеОшибки, Ложь);
	
КонецПроцедуры

Процедура ИсправитьПроблемуНеполученныхДокументовИПриглашений(КлючиЗаписей, КонтекстОперации, СоответствиеОшибокДанным,
	ИсправленныеОшибки, ИзменитьДату = Истина)
	
	УчетныеЗаписи = Новый Массив;
	Для каждого КлючЗаписи Из КлючиЗаписей Цикл
		УчетныеЗаписи.Добавить(КлючЗаписи.ИдентификаторЭДО);
	КонецЦикла;
	ИсправленныеОшибки = Новый Массив;
	Для каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		НоваяДатаЗапросаДанных = Дата(1, 1, 1);
		Отбор = Новый Структура("УчетнаяЗапись", УчетнаяЗапись); 
		ЗначенияСвойствОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(
			КонтекстОперации.Диагностика.Ошибки,
		"ДополнительныеДанные", Отбор);
		Если ЗначенияСвойствОшибок.Количество() Тогда
			Если ИзменитьДату Тогда
				НоваяДатаЗапросаДанных = ЗначенияСвойствОшибок[0].ПроверочнаяДатаПолученияЭД;
			Иначе 
				НоваяДатаЗапросаДанных = ЗначенияСвойствОшибок[0].ДатаПроверки;
			КонецЕсли;
		КонецЕсли;
		ЗначенияСвойствОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.ЗначенияСвойствОшибок(
			КонтекстОперации.Диагностика.Ошибки,
		"ВидОшибки", Отбор);
		ВидОшибки = "";
		Если ЗначенияСвойствОшибок.Количество() Тогда
			ВидОшибки = ЗначенияСвойствОшибок[0];
		КонецЕсли;
		Если ИзменитьДату Тогда
			Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиЕстьНеполученныеЭД() Тогда
				ИзменяемоеСвойство = "ДатаПолученияЭД";
				ШаблонСообщения = НСтр("ru = 'Начальная дата запроса электронных документов изменена на %1'");
			Иначе 
				ИзменяемоеСвойство = "ДатаПоследнегоПолученияПриглашений";
				ШаблонСообщения = НСтр("ru = 'Начальная дата запроса приглашений к обмену электронными документами изменена на %1'");
			КонецЕсли;
		Иначе 
			Если ВидОшибки = ОбменСКонтрагентамиДиагностикаКлиентСервер.ВидОшибкиЕстьНеполученныеЭД() Тогда
				ИзменяемоеСвойство = "ПроверочнаяДатаПолученияЭД";
			Иначе 
				ИзменяемоеСвойство = "ПроверочнаяДатаПолученияПриглашений";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяДатаЗапросаДанных) Тогда
			ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеОбмена(УчетнаяЗапись, ИзменяемоеСвойство, НоваяДатаЗапросаДанных);
			Если ИзменитьДату Тогда
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, НоваяДатаЗапросаДанных));
			КонецЕсли;
			Для каждого КлючИЗначение Из СоответствиеОшибокДанным Цикл
				Если УчетныеЗаписи.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИсправленныеОшибки, КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьИспользованиеОбменаЭД(Включить = Истина) Экспорт
	
	ИспользуетсяОбменЭД = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции(
		"ИспользоватьОбменЭД");
	Если Не ИспользуетсяОбменЭД Тогда
		Константы.ИспользоватьОбменЭД.Установить(Включить);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

