////////////////////////////////////////////////////////////////////////////////
// РасчетЗарплатыДляНебольшихОрганизаций: 
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗащитаПерсональныхДанных

// См. ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных.
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	Документы.НачислениеЗарплаты.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений)
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.БольничныйЛист, Истина);
	Списки.Вставить(Метаданные.Справочники.БольничныйЛистПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ИсполнительныйЛист, Истина);
	Списки.Вставить(Метаданные.Справочники.ИсполнительныйЛистПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.НачислениеЗарплаты, Истина);
	Списки.Вставить(Метаданные.Справочники.НачислениеЗарплатыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.Отпуск, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтпускПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.Документы.ОтпускБезСохраненияОплаты, Истина);
	Списки.Вставить(Метаданные.Справочники.ОтпускБезСохраненияОплатыПрисоединенныеФайлы, Истина);
	Списки.Вставить(Метаданные.ЖурналыДокументов.НачислениеЗарплаты, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.УсловияУдержанияПоИсполнительномуДокументу, Истина);
	
КонецПроцедуры

#КонецОбласти

// Возвращает признак возможности использования режима расчета зарплаты для
// небольших организаций.
//
// Возвращаемое значение;
//		Булево - Возвращает Истина, если использование возможно, Ложь - нет.
//
Функция РасчетЗарплатыДляНебольшихОрганизацийВозможен() Экспорт
	
	РасчетВозможен = Истина;
	Если НЕ Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		РасчетВозможен = Ложь;
	Иначе
		
		ТекущиеКоличества = ТекущееКоличествоСотрудников();
		Если ТекущиеКоличества.Количество() > 0 Тогда
			
			МаксимальноеКоличествоСотрудниковВОрганизации = ТекущиеКоличества[0].КоличествоСотрудников;
			РасчетВозможен = (МаксимальноеКоличествоСотрудниковВОрганизации <= ПорогЗапрета());
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат РасчетВозможен;
	
КонецФункции

// Возвращает текущее количество работающих сотрудников организации.
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//		Число
//
Функция КоличествоСотрудниковОрганизации(Организация) Экспорт
	
	КоличествоСотрудников = 0;
	
	КоличестваСотрудников = ТекущееКоличествоСотрудников(Организация);
	Если КоличестваСотрудников.Количество() > 0 Тогда
		КоличествоСотрудников = КоличестваСотрудников[0].КоличествоСотрудников;
	КонецЕсли; 
	
	Возврат КоличествоСотрудников;
	
КонецФункции

// Возвращает текст предупреждения об ограничениях использования режима расчета зарплаты
// для небольших организаций, если количество сотрудников, достигло порогового значения.
//
// Параметры:
//		Организация - СправочникСсылка.Организации
//
// Возвращаемое значение:
//		Строка
//
Функция ТекстПредупрежденияОбОграниченияхРежимаРасчетаЗарплатыДляНебольшихОрганизаций(Организация, ПредыдущееКоличествоСотрудников) Экспорт
	
	ТекстПредупреждения = "";
	КоличествоСотрудников = КоличествоСотрудниковОрганизации(Организация);
	Если ПредыдущееКоличествоСотрудников < КоличествоСотрудников
		И КоличествоСотрудников > ПорогЗапрета() - ПорогПредупреждения()
		И КоличествоСотрудников <= ПорогЗапрета() Тогда
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			РасчетЗарплатыДляНебольшихОрганизацийПереопределяемый.ТекстСообщенияОПриближенииКМаксимальноДопустимомуКоличествуРаботающихСотрудников(),
			ПорогЗапрета(),
			Организация,
			КоличествоСотрудников);
			
	ИначеЕсли ПредыдущееКоличествоСотрудников < КоличествоСотрудников
		И КоличествоСотрудников = ПорогЗапрета() + 1 Тогда
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			РасчетЗарплатыДляНебольшихОрганизацийПереопределяемый.ТекстСообщенияОПревышенииМаксимальноДопустимогоКоличестваРаботающихСотрудников(),
			ПорогЗапрета());
				
	КонецЕсли; 
	
	Возврат ТекстПредупреждения;
	
КонецФункции

// Запоминает во временном хранилище текущее количество работающих сотрудников организации.
//
// Параметры:
//		Форма		- ФормаКлиентскогоПриложения
//		Организация - СправочникСсылка.Организации
//
Процедура ЗапомнитьТекущееКоличествоСотрудников(Форма, Организация) Экспорт
	
	Если Форма.ПолучитьФункциональнуюОпциюФормы("РасчетЗарплатыДляНебольшихОрганизаций")
		И ЗначениеЗаполнено(Организация) Тогда
		
		Форма.ТекущееКоличествоСотрудников = КоличествоСотрудниковОрганизации(Организация);
		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает максимально возможное количество сотрудников, при  котором возможно
// использование режима расчета зарплаты для небольших организаций.
//
// Возвращаемое значение;
//		Число
//
Функция ПорогЗапрета() Экспорт
	
	Возврат 60;
	
КонецФункции

// Возвращает средний заработок на указанную дату.
//
// Параметры:
//		Сотрудник		- СправочникСсылка.Сотрудники
//		ДатаСведений	- Дата
//		ПериодЛет		- Число
//
// Возвращаемое значение:
//		Число
//
Функция СреднийЗаработок(Сотрудник, ДатаСведений, ПериодЛет = 1) Экспорт
	
	СреднийДневнойЗаработок = 0;
	
	ПериодМесяцев = ПериодЛет * 12 - 1;
	
	ОкончаниеПериода = НачалоМесяца(ДатаСведений) - 1;
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(ОкончаниеПериода), - ПериодМесяцев);
	
	КадровыеДанныеСотрудника = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ГоловнаяОрганизация");
	Если КадровыеДанныеСотрудника.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", КадровыеДанныеСотрудника[0].ГоловнаяОрганизация);
		Запрос.УстановитьПараметр("ФизическоеЛицо", КадровыеДанныеСотрудника[0].ФизическоеЛицо);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
		
		Запрос.УстановитьПараметр("СписокКатегорий", КатегорииОтсутствий());
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВЫБОР
			|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > &НачалоПериода
			|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
			|				ИНАЧЕ &НачалоПериода
			|			КОНЕЦ, ДЕНЬ)) КАК НачалоПериода,
			|	МАКСИМУМ(КОНЕЦПЕРИОДА(ВЫБОР
			|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения < &ОкончаниеПериода
			|						И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
			|				ИНАЧЕ &ОкончаниеПериода
			|			КОНЕЦ, ДЕНЬ)) КАК ОкончаниеПериода
			|ПОМЕСТИТЬ ВТПериодыРаботыФизическихЛиц
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|ГДЕ
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = &ГоловнаяОрганизация
			|	И ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизическоеЛицо
			|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериода
			|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
			|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &НачалоПериода
			|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
			|
			|СГРУППИРОВАТЬ ПО
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ПО НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
			|			И НачисленияУдержанияПоСотрудникам.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
			|			И НачисленияУдержанияПоСотрудникам.Период <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			И (НачисленияУдержанияПоСотрудникам.Период >= НАЧАЛОПЕРИОДА(ПериодыРаботыФизическихЛиц.НачалоПериода, МЕСЯЦ))
			|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
			|			И (НЕ НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий))
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА БольничныйЛист.ДатаНачала > ПериодыРаботыФизическихЛиц.НачалоПериода
			|			ТОГДА БольничныйЛист.ДатаНачала
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА БольничныйЛист.ДатаОкончания < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			ТОГДА БольничныйЛист.ДатаОкончания
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|	КОНЕЦ КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТОтсутствия
			|ИЗ
			|	Документ.БольничныйЛист КАК БольничныйЛист
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ПО БольничныйЛист.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
			|			И БольничныйЛист.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
			|			И БольничныйЛист.ДатаНачала <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			И БольничныйЛист.ДатаОкончания >= ПериодыРаботыФизическихЛиц.НачалоПериода
			|			И (БольничныйЛист.Проведен)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо,
			|	ВЫБОР
			|		КОГДА Отпуск.ДатаНачалаОсновногоОтпуска > ПериодыРаботыФизическихЛиц.НачалоПериода
			|			ТОГДА Отпуск.ДатаНачалаОсновногоОтпуска
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА Отпуск.ДатаОкончанияОсновногоОтпуска < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			ТОГДА Отпуск.ДатаОкончанияОсновногоОтпуска
			|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|	КОНЕЦ
			|ИЗ
			|	Документ.Отпуск КАК Отпуск
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ПО Отпуск.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
			|			И Отпуск.ФизическоеЛицо = ПериодыРаботыФизическихЛиц.ФизическоеЛицо
			|			И Отпуск.ДатаНачалаОсновногоОтпуска <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
			|			И Отпуск.ДатаОкончанияОсновногоОтпуска >= ПериодыРаботыФизическихЛиц.НачалоПериода
			|			И (Отпуск.Проведен)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Отсутствия.ФизическоеЛицо КАК ФизическоеЛицо,
			|	СУММА(РАЗНОСТЬДАТ(Отсутствия.ДатаНачала, Отсутствия.ДатаОкончания, ДЕНЬ) + 1) КАК НеОтработанныеДни
			|ПОМЕСТИТЬ ВТНеОтработанныеДни
			|ИЗ
			|	ВТОтсутствия КАК Отсутствия
			|
			|СГРУППИРОВАТЬ ПО
			|	Отсутствия.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ПериодыРаботыФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ЕСТЬNULL(Начисления.Сумма, 0) КАК Сумма,
			|	РАЗНОСТЬДАТ(ПериодыРаботыФизическихЛиц.НачалоПериода, ПериодыРаботыФизическихЛиц.ОкончаниеПериода, ДЕНЬ) + 1 КАК КалендарныеРабочиеДни,
			|	ЕСТЬNULL(НеОтработанныеКалендарныеДни.НеОтработанныеДни, 0) КАК НеОтработанныеДни
			|ПОМЕСТИТЬ ВТДанныеДляРасчета
			|ИЗ
			|	ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеОтработанныеДни КАК НеОтработанныеКалендарныеДни
			|		ПО ПериодыРаботыФизическихЛиц.ФизическоеЛицо = НеОтработанныеКалендарныеДни.ФизическоеЛицо
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
			|		ПО ПериодыРаботыФизическихЛиц.ФизическоеЛицо = Начисления.ФизическоеЛицо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ДанныеДляРасчета.КалендарныеРабочиеДни = ДанныеДляРасчета.НеОтработанныеДни
			|			ТОГДА 0
			|		КОГДА ДанныеДляРасчета.КалендарныеРабочиеДни - ДанныеДляРасчета.НеОтработанныеДни = 0
			|			ТОГДА 0
			|		ИНАЧЕ ДанныеДляРасчета.Сумма / (ДанныеДляРасчета.КалендарныеРабочиеДни - ДанныеДляРасчета.НеОтработанныеДни)
			|	КОНЕЦ КАК СреднийДневнойЗаработок
			|ИЗ
			|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			СреднийДневнойЗаработок = Выборка.СреднийДневнойЗаработок;
			
		КонецЕсли; 
			
	КонецЕсли; 
	
	Возврат СреднийДневнойЗаработок;
	
КонецФункции

// Уточняет отработанное время в табличной части Начисления.
//
// Параметры:
//		Объект - ДокументОбъект.НачислениеЗарплаты
//
Процедура ЗаполнитьРезультатНачисления(Объект, Начисления) Экспорт
	
	КалендарьОрганизации = РасчетЗарплатыДляНебольшихОрганизацийПовтИсп.КалендарьОрганизации(Объект.Организация);
	Если КалендарьОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокКатегорий", КатегорииОтсутствий());
	
	НачалоПериода = НачалоДня(Объект.МесяцНачисления);
	КонецПериода = НачалоДня(КонецМесяца(НачалоПериода));
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоПериода", Объект.МесяцНачисления);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.МесяцНачисления));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НачисленияУдержанияПоСотрудникам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.ДатаНачала < &НачалоПериода
		|			ТОГДА &НачалоПериода
		|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.ДатаНачала
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.ДатаОкончания > &ОкончаниеПериода
		|			ТОГДА &ОкончаниеПериода
		|		ИНАЧЕ НачисленияУдержанияПоСотрудникам.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникам.ДатаНачала <= &ОкончаниеПериода
		|	И НачисленияУдержанияПоСотрудникам.ДатаОкончания >= &НачалоПериода
		|	И НачисленияУдержанияПоСотрудникам.Регистратор <> &Ссылка
		|	И НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В(&СписокКатегорий)";
		
	ВытесненноеВремяПоСотрудникам = Новый Соответствие;
	
	ТаблицаВытеснений = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаВытеснения Из ТаблицаВытеснений Цикл
		
		РабочихДнейЧасов = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(КалендарьОрганизации, СтрокаВытеснения.ДатаНачала, СтрокаВытеснения.ДатаОкончания);
		
		ВытесненноеВремяСотрудника = ВытесненноеВремяПоСотрудникам.Получить(СтрокаВытеснения.ФизическоеЛицо);
		Если ВытесненноеВремяСотрудника = Неопределено Тогда
			
			ВытесненноеВремяСотрудника = Новый Структура("ДатаНачала,ДатаОкончания,Дней,Часов,ПредпраздничныхДней",
				СтрокаВытеснения.ДатаНачала, СтрокаВытеснения.ДатаОкончания, 0, 0, 0);
			
		КонецЕсли;
		
		ВытесненноеВремяСотрудника.Дней =
			ВытесненноеВремяСотрудника.Дней + РабочихДнейЧасов.Дней;
		ВытесненноеВремяСотрудника.Часов = 
			ВытесненноеВремяСотрудника.Часов + РабочихДнейЧасов.Часов;
		ВытесненноеВремяСотрудника.ПредпраздничныхДней =
			ВытесненноеВремяСотрудника.ПредпраздничныхДней + РабочихДнейЧасов.ПредпраздничныхДней;
		
		ВытесненноеВремяПоСотрудникам.Вставить(СтрокаВытеснения.ФизическоеЛицо, ВытесненноеВремяСотрудника);
		
	КонецЦикла;
	
	КоэффициентыПересчета = Новый Соответствие;
	
	Если ВытесненноеВремяПоСотрудникам.Количество() > 0 Тогда
		
		Если ТипЗнч(Начисления) = Тип("ДанныеФормыКоллекция") Тогда
			СотрудникиНачислений = Начисления.Выгрузить(, "Сотрудник").ВыгрузитьКолонку("Сотрудник");
		Иначе
			СотрудникиНачислений = Начисления.ВыгрузитьКолонку("Сотрудник");
		КонецЕсли;
		
		КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиНачислений, "ФизическоеЛицо,ДатаПриема,ДатаЗавершенияРаботы,ДоляНеполногоРабочегоВремени");
		КатегорииНачислений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбщегоНазначения.ВыгрузитьКолонку(Начисления, "Начисление"), "КатегорияНачисленияИлиНеоплаченногоВремени");
		
		Для каждого СтрокаНачислений Из Начисления Цикл
			
			Если КатегорииНачислений[СтрокаНачислений.Начисление] = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
				
				Если ЗначениеЗаполнено(СтрокаНачислений.ОтработаноДней) И СтрокаНачислений.ОтработаноДней > 0 Тогда
					
					ОтработаноДней = СтрокаНачислений.ОтработаноДней;
					
					ДанныеСотрудника = КадровыеДанные.Найти(СтрокаНачислений.Сотрудник, "Сотрудник");
					Если ДанныеСотрудника <> Неопределено Тогда
						
						ВытеснениеСотрудника = ВытесненноеВремяПоСотрудникам.Получить(ДанныеСотрудника.ФизическоеЛицо);
						Если ВытеснениеСотрудника <> Неопределено Тогда
							
							СтрокаНачисленийДатаНачала = Макс(ДанныеСотрудника.ДатаПриема, Объект.МесяцНачисления);
							Если ЗначениеЗаполнено(ДанныеСотрудника.ДатаЗавершенияРаботы) Тогда
								СтрокаНачисленийДатаОкончания = Мин(ДанныеСотрудника.ДатаЗавершенияРаботы, КонецМесяца(Объект.МесяцНачисления));
							Иначе
								СтрокаНачисленийДатаОкончания = КонецМесяца(Объект.МесяцНачисления);
							КонецЕсли;
							
							Если ВытеснениеСотрудника.ДатаНачала >= СтрокаНачисленийДатаНачала И ВытеснениеСотрудника.ДатаНачала <= СтрокаНачисленийДатаОкончания
								Или ВытеснениеСотрудника.ДатаОкончания >= СтрокаНачисленийДатаНачала И ВытеснениеСотрудника.ДатаОкончания <= СтрокаНачисленийДатаОкончания Тогда
								
								Если ВытеснениеСотрудника.ДатаНачала >= СтрокаНачисленийДатаНачала И ВытеснениеСотрудника.ДатаОкончания <= СтрокаНачисленийДатаОкончания Тогда
									
									Дней                = ВытеснениеСотрудника.Дней;
									Часов               = ВытеснениеСотрудника.Часов;
									ПредпраздничныхДней = ВытеснениеСотрудника.ПредпраздничныхДней;
									
								Иначе
									
									ДатаНачала = Макс(ВытеснениеСотрудника.ДатаНачала, СтрокаНачисленийДатаНачала);
									ДатаОкончания = Мин(ВытеснениеСотрудника.ДатаОкончания, СтрокаНачисленийДатаОкончания);
									
									РабочихДнейЧасов = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(КалендарьОрганизации, ДатаНачала, ДатаОкончания);
									
									Дней                = РабочихДнейЧасов.Дней;
									Часов               = РабочихДнейЧасов.Часов;
									ПредпраздничныхДней = РабочихДнейЧасов.ПредпраздничныхДней;
									
								КонецЕсли;
							
								// Для расчета отработанного времени с учетом доли неполного времени сначала "возвращаем" часы, на которые
								// короче предпраздничный день: 1 час за каждый день (т.к. прибавляем количество предпраздничных дней).
								// После поправки отработанного времени на долю неполного времени, количество предпраздничных часов вычитаем
								// (предпраздничный день короче на 1 час независимо от того какова доля рабочего времени).
								Часов = Макс(0,
									(Часов + ПредпраздничныхДней) *
										ДанныеСотрудника.ДоляНеполногоРабочегоВремени - ПредпраздничныхДней);
								
								СтрокаНачислений.ОтработаноДней = СтрокаНачислений.ОтработаноДней - Дней;
								Если СтрокаНачислений.ОтработаноДней < 0 Тогда
									СтрокаНачислений.ОтработаноДней = 0;
								КонецЕсли;
								
								СтрокаНачислений.ОтработаноЧасов = СтрокаНачислений.ОтработаноЧасов - Часов;
								Если СтрокаНачислений.ОтработаноЧасов < 0 Тогда
									СтрокаНачислений.ОтработаноЧасов = 0;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если СтрокаНачислений.ОтработаноДней <> ОтработаноДней Тогда
						КоэффициентыПересчета.Вставить(СтрокаНачислений.Сотрудник, СтрокаНачислений.ОтработаноДней / ОтработаноДней);
					КонецЕсли;
					
				Иначе
					
					ДанныеСотрудника = КадровыеДанные.Найти(СтрокаНачислений.Сотрудник, "Сотрудник");
					Если ДанныеСотрудника <> Неопределено Тогда
						
						ВытеснениеСотрудника = ВытесненноеВремяПоСотрудникам.Получить(ДанныеСотрудника.ФизическоеЛицо);
						Если ВытеснениеСотрудника <> Неопределено
							И ВытеснениеСотрудника.Дней = 0 Тогда
							
							Если КоэффициентыПересчета.Получить(СтрокаНачислений.Сотрудник) = Неопределено Тогда
								КоэффициентыПересчета.Вставить(СтрокаНачислений.Сотрудник, 0);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КоэффициентыПересчета.Количество() > 0 Тогда
		
		Для каждого ОписаниеКоэффициентаПересчета Из КоэффициентыПересчета Цикл
			
			КоэффициентПересчета = ОписаниеКоэффициентаПересчета.Значение;
			СтрокиНачислений = Начисления.НайтиСтроки(Новый Структура("Сотрудник", ОписаниеКоэффициентаПересчета.Ключ));
			Для каждого СтрокаНачислений Из СтрокиНачислений Цикл
				СтрокаНачислений.Результат = СтрокаНачислений.Результат * КоэффициентПересчета;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет табличную часть Удержания, плановыми удержаниями сотрудников. При заданной
// таблице значений ДобавляемыеНачисления производится дозаполнение табличной части Удержания.
//
// Параметры:
//		Объект 					- ДокументОбъект.НачислениеЗарплаты
//		ДобавляемыеНачисления	- ТаблицаЗначений, по составу колонок идентичная табличной части Начисления,
//									документа НачислениеЗарплаты.
//
Процедура ЗаполнитьРезультатУдержаний(Объект, ДобавляемыеНачисления = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций")
		ИЛИ НЕ РасчетЗарплатыДляНебольшихОрганизацийВозможен() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДобавляемыеНачисления = Неопределено Тогда
		Объект.Удержания.Очистить();
		Начисления = Объект.Начисления.Выгрузить();
	Иначе
		Начисления = ДобавляемыеНачисления;
	КонецЕсли;
	
	ИсполнительныеЛисты.РассчитатьУдержанияПоИсполнительнымЛистам(Объект, Начисления);
	
КонецПроцедуры

// Обработчик события формы документа НачислениеЗарплаты.
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения
//
Процедура ПриСозданииФормыДокументаНачислениеЗарплаты(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ПриПолученииДанных(Форма);
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций")
		ИЛИ НЕ РасчетЗарплатыДляНебольшихОрганизацийВозможен() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГлавноеСтраница",
			"Видимость",
			Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"УдержанияКонтрагент",
			"Видимость",
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// При чтении данных документа НачислениеЗарплаты в форму, дозаполняет
// вторичные данные ТЧ Сотрудники.
//
// Параметры:
//		Форма - ФормаКлиентскогоПриложения
//
Процедура ПриПолученииДанных(Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНачисленияПоОтсутствиям(Запрос.МенеджерВременныхТаблиц, Истина, Форма.Объект.МесяцНачисления, Форма.Объект.Организация, Форма.Объект.Подразделение, , Форма.Объект.Ссылка);
	
	Запрос.УстановитьПараметр("Ссылка", Форма.Объект.Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноДней) КАК ОтработаноДней,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Начислено
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
		|ГДЕ
		|	НачислениеЗарплатыНачисления.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	НачислениеЗарплатыНачисления.Сотрудник.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыНачисленияПоДоговорам.Результат) КАК Договоры
		|ПОМЕСТИТЬ ВТДоговорыДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачислениеЗарплатыНачисленияПоДоговорам
		|ГДЕ
		|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник,
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Сотрудник КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыУдержания.Результат) КАК Удержано
		|ПОМЕСТИТЬ ВТУдержанияДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.Удержания КАК НачислениеЗарплатыУдержания
		|ГДЕ
		|	НачислениеЗарплатыУдержания.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыУдержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыНДФЛ.Налог + НачислениеЗарплатыНДФЛ.НалогСПревышения) КАК НДФЛ,
		|	МАКСИМУМ(НачислениеЗарплатыНДФЛ.ФиксРасчет) КАК ФиксРасчет_НДФЛ
		|ПОМЕСТИТЬ ВТНДФЛДокументаВременная
		|ИЗ
		|	Документ.НачислениеЗарплаты.НДФЛ КАК НачислениеЗарплатыНДФЛ
		|ГДЕ
		|	НачислениеЗарплатыНДФЛ.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыКорректировкиВыплаты.ФизическоеЛицо,
		|	СУММА(0),
		|	МАКСИМУМ(НачислениеЗарплатыКорректировкиВыплаты.ФиксРасчет)
		|ИЗ
		|	Документ.НачислениеЗарплаты.КорректировкиВыплаты КАК НачислениеЗарплатыКорректировкиВыплаты
		|ГДЕ
		|	НачислениеЗарплатыКорректировкиВыплаты.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыКорректировкиВыплаты.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНДФЛДокументаВременная.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВТНДФЛДокументаВременная.НДФЛ) КАК НДФЛ,
		|	МАКСИМУМ(ВТНДФЛДокументаВременная.ФиксРасчет_НДФЛ) КАК ФиксРасчет_НДФЛ
		|ПОМЕСТИТЬ ВТНДФЛДокумента
		|ИЗ
		|	ВТНДФЛДокументаВременная КАК ВТНДФЛДокументаВременная
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНДФЛДокументаВременная.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(&ПоляВзносов) КАК ПоляВзносов,
		|	МАКСИМУМ(НачислениеЗарплатыВзносы.ФиксРасчет) КАК ФиксРасчет_Взносы
		|ПОМЕСТИТЬ ВТВзносыДокумента
		|ИЗ
		|	Документ.НачислениеЗарплаты.Взносы КАК НачислениеЗарплатыВзносы
		|ГДЕ
		|	НачислениеЗарплатыВзносы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыСотрудники.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыСотрудники.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Документ.НачислениеЗарплаты.Сотрудники КАК НачислениеЗарплатыСотрудники
		|ГДЕ
		|	НачислениеЗарплатыСотрудники.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник,
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник.ФизическоеЛицо
		|ИЗ
		|	Документ.НачислениеЗарплаты.НачисленияПоДоговорам КАК НачислениеЗарплатыНачисленияПоДоговорам
		|ГДЕ
		|	НачислениеЗарплатыНачисленияПоДоговорам.Ссылка = &Ссылка";
		
	ПоляВзносов = СтрРазделить(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(), ",");
	ТекстЗапросаСуммПолей = "";
	
	ДобавитьЗапятую = Ложь;
	Для каждого ПолеВзносов Из  ПоляВзносов Цикл
		
		Если ДобавитьЗапятую Тогда
			
			ТекстЗапросаСуммПолей = ТекстЗапросаСуммПолей + ",
				|	";
			
		Иначе
			ДобавитьЗапятую = Истина;
		КонецЕсли;
		
		ТекстЗапросаСуммПолей = ТекстЗапросаСуммПолей + "СУММА(НачислениеЗарплатыВзносы." + ПолеВзносов + ") КАК " + ПолеВзносов;
			
	КонецЦикла;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(&ПоляВзносов) КАК ПоляВзносов", ТекстЗапросаСуммПолей);
	
	Запрос.Выполнить();
	
	ТаблицаСотрудники = ТаблицаСотрудники(Запрос.МенеджерВременныхТаблиц);
	
	Для каждого СтрокаТЧСотрудники Из Форма.Объект.Сотрудники Цикл
		
		СтрокиТаблицы = ТаблицаСотрудники.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТЧСотрудники.Сотрудник));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧСотрудники, СтрокиТаблицы[0],
				"ФизическоеЛицо,ОтработаноДней,ОтработаноЧасов,Начислено,ОтпускаБольничные,Договоры,ВсегоНачислено,"
					+ "НДФЛ,НДФЛОтпускаБольничные,ПрочееУдержано,ВсегоУдержано,Взносы,ФиксРасчет_НДФЛ,ФиксРасчет_Взносы,Совместитель");
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу значений, содержащую сумму начислений по больничным листам
// и отпускам сотрудников.
//
// Параметры:
//		СписокСотрудников		- Массив, элементу - СправочникСсылка.Сотрудники.
//		МесяцНачисления			- Дата, первое число месяца за который получаются данные.
//		Организация				- СправочникСсылка.Организации
//		Подразделение			- СправочникСсылка.ПодразделенияОрганизаций
//									если подразделение не указывать, сведения будут собираться без
//									учета подразделения.
//		ИсключаемыйРегистратор - ДокументСсылка.НачислениеЗарплаты
//
// Возвращаемое значение:
//		ТаблицаЗначений - содержит колонки.
//			* Сотрудник			- СправочникСсылка.Сотрудники
//			* ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			* Сумма				- Число
//
Функция СведенияНачисленийПоОтсутствиям(СписокСотрудников, МесяцНачисления, Организация, Подразделение, ИсключаемыйРегистратор) Экспорт
	
	РезультатЗапроса = СоздатьВТНачисленияПоОтсутствиям(
		Новый МенеджерВременныхТаблиц,
		Истина,
		МесяцНачисления,
		Организация,
		Подразделение,
		СписокСотрудников,
		ИсключаемыйРегистратор,
		"");
		
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Формирует табличную часть Сотрудники, документа НачислениеЗарплаты.
//
// Параметры:
//		Объект  - ДокументОбъект.НачислениеЗарплаты
//
Процедура СформироватьТабличнуюЧастьСотрудники(Объект) Экспорт
	
	Объект.Сотрудники.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТНачисленияПоОтсутствиям(Запрос.МенеджерВременныхТаблиц, Истина, Объект.МесяцНачисления, Объект.Организация, Объект.Подразделение, , Объект.Ссылка);
	
	Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить());
	Запрос.УстановитьПараметр("НачисленияПоДоговорам", Объект.НачисленияПоДоговорам.Выгрузить());
	Запрос.УстановитьПараметр("Удержания", Объект.Удержания.Выгрузить());
	Запрос.УстановитьПараметр("НДФЛ", Объект.НДФЛ.Выгрузить());
	Запрос.УстановитьПараметр("Взносы", Объект.Взносы.Выгрузить());
	Запрос.УстановитьПараметр("КорректировкиВыплаты", Объект.КорректировкиВыплаты.Выгрузить());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыНачисления.ОтработаноДней КАК ОтработаноДней,
		|	НачислениеЗарплатыНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
		|	НачислениеЗарплатыНачисления.Результат КАК Результат
		|ПОМЕСТИТЬ ВТНачисленияДокументаПредварительно
		|ИЗ
		|	&Начисления КАК НачислениеЗарплатыНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисления.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноДней) КАК ОтработаноДней,
		|	МАКСИМУМ(НачислениеЗарплатыНачисления.ОтработаноЧасов) КАК ОтработаноЧасов,
		|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Начислено
		|ПОМЕСТИТЬ ВТНачисленияДокумента
		|ИЗ
		|	ВТНачисленияДокументаПредварительно КАК НачислениеЗарплатыНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисления.Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисления.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыНачисленияПоДоговорам.Результат КАК Результат
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамДокументаПредварительно
		|ИЗ
		|	&НачисленияПоДоговорам КАК НачислениеЗарплатыНачисленияПоДоговорам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыНачисленияПоДоговорам.Результат) КАК Начислено
		|ПОМЕСТИТЬ ВТНачисленияПоДоговорамДокумента
		|ИЗ
		|	ВТНачисленияПоДоговорамДокументаПредварительно КАК НачислениеЗарплатыНачисленияПоДоговорам
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыНачисленияПоДоговорам.Результат) КАК Договоры
		|ПОМЕСТИТЬ ВТДоговорыДокумента
		|ИЗ
		|	ВТНачисленияПоДоговорамДокументаПредварительно КАК НачислениеЗарплатыНачисленияПоДоговорам
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник,
		|	ВЫРАЗИТЬ(НачислениеЗарплатыНачисленияПоДоговорам.Сотрудник КАК Справочник.Сотрудники).ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Сотрудник КАК Сотрудник,
		|	НачислениеЗарплатыУдержания.Результат КАК Результат
		|ПОМЕСТИТЬ ВТУдержанияДокументаПредварительно
		|ИЗ
		|	&Удержания КАК НачислениеЗарплатыУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыУдержания.Сотрудник КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыУдержания.Результат) КАК Удержано
		|ПОМЕСТИТЬ ВТУдержанияДокумента
		|ИЗ
		|	ВТУдержанияДокументаПредварительно КАК НачислениеЗарплатыУдержания
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыУдержания.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачислениеЗарплатыНДФЛ.Налог + НачислениеЗарплатыНДФЛ.НалогСПревышения КАК Налог,
		|	НачислениеЗарплатыНДФЛ.ФиксРасчет КАК ФиксРасчет
		|ПОМЕСТИТЬ ВТНДФЛДокументаПредварительно
		|ИЗ
		|	&НДФЛ КАК НачислениеЗарплатыНДФЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыКорректировкиВыплаты.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачислениеЗарплатыКорректировкиВыплаты.КорректировкаВыплаты КАК КорректировкаВыплаты,
		|	НачислениеЗарплатыКорректировкиВыплаты.ФиксРасчет КАК ФиксРасчет
		|ПОМЕСТИТЬ ВТКорректировкиВыплатыДокументаПредварительно
		|ИЗ
		|	&КорректировкиВыплаты КАК НачислениеЗарплатыКорректировкиВыплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачислениеЗарплатыНДФЛ.Налог) КАК НДФЛ,
		|	МАКСИМУМ(НачислениеЗарплатыНДФЛ.ФиксРасчет) КАК ФиксРасчет_НДФЛ
		|ПОМЕСТИТЬ ВТНДФЛДокументаВременная
		|ИЗ
		|	ВТНДФЛДокументаПредварительно КАК НачислениеЗарплатыНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыНДФЛ.ФизическоеЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплатыКорректировкиВыплаты.ФизическоеЛицо,
		|	СУММА(0),
		|	МАКСИМУМ(НачислениеЗарплатыКорректировкиВыплаты.ФиксРасчет)
		|ИЗ
		|	ВТКорректировкиВыплатыДокументаПредварительно КАК НачислениеЗарплатыКорректировкиВыплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыКорректировкиВыплаты.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТНДФЛДокументаВременная.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВТНДФЛДокументаВременная.НДФЛ) КАК НДФЛ,
		|	МАКСИМУМ(ВТНДФЛДокументаВременная.ФиксРасчет_НДФЛ) КАК ФиксРасчет_НДФЛ
		|ПОМЕСТИТЬ ВТНДФЛДокумента
		|ИЗ
		|	ВТНДФЛДокументаВременная КАК ВТНДФЛДокументаВременная
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТНДФЛДокументаВременная.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачислениеЗарплатыВзносы.ФиксРасчет КАК ФиксРасчет,
		|	&ПоляВзносов КАК ПоляВзносов
		|ПОМЕСТИТЬ ВТВзносыДокументаПредварительно
		|ИЗ
		|	&Взносы КАК НачислениеЗарплатыВзносы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(НачислениеЗарплатыВзносы.ФиксРасчет) КАК ФиксРасчет_Взносы,
		|	СУММА(НачислениеЗарплатыВзносы.ПоляВзносов) КАК ПоляВзносов
		|ПОМЕСТИТЬ ВТВзносыДокумента
		|ИЗ
		|	ВТВзносыДокументаПредварительно КАК НачислениеЗарплатыВзносы
		|
		|СГРУППИРОВАТЬ ПО
		|	НачислениеЗарплатыВзносы.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачисленияДокумента.Сотрудник КАК Сотрудник,
		|	НачисленияДокумента.ФизическоеЛицо КАК ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПредварительно
		|ИЗ
		|	ВТНачисленияДокумента КАК НачисленияДокумента
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТНачисленияПоДоговорамДокумента.Сотрудник,
		|	ВТНачисленияПоДоговорамДокумента.ФизическоеЛицо
		|ИЗ
		|	ВТНачисленияПоДоговорамДокумента КАК ВТНачисленияПоДоговорамДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдержанияДокумента.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТУдержанияДокумента КАК УдержанияДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПредварительно КАК СотрудникиПредварительно
		|		ПО УдержанияДокумента.ФизическоеЛицо = СотрудникиПредварительно.ФизическоеЛицо
		|ГДЕ
		|	СотрудникиПредварительно.ФизическоеЛицо ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДФЛДокумента.ФизическоеЛицо
		|ИЗ
		|	ВТНДФЛДокумента КАК НДФЛДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПредварительно КАК СотрудникиПредварительно
		|		ПО НДФЛДокумента.ФизическоеЛицо = СотрудникиПредварительно.ФизическоеЛицо
		|ГДЕ
		|	СотрудникиПредварительно.ФизическоеЛицо ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВзносыДокумента.ФизическоеЛицо
		|ИЗ
		|	ВТВзносыДокумента КАК ВзносыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПредварительно КАК СотрудникиПредварительно
		|		ПО ВзносыДокумента.ФизическоеЛицо = СотрудникиПредварительно.ФизическоеЛицо
		|ГДЕ
		|	СотрудникиПредварительно.ФизическоеЛицо ЕСТЬ NULL";
	
	ПоляВзносов = СтрРазделить(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(), ",");
	ТекстЗапросаПолей = "";
	ТекстЗапросаСуммПолей = "";
	
	ДобавитьЗапятую = Ложь;
	Для каждого ПолеВзносов Из  ПоляВзносов Цикл
		
		Если ДобавитьЗапятую Тогда
			
			ТекстЗапросаПолей = ТекстЗапросаПолей + ",
				|	";
				
			ТекстЗапросаСуммПолей = ТекстЗапросаСуммПолей + ",
				|	";
			
		Иначе
			ДобавитьЗапятую = Истина;
		КонецЕсли;
		
		ТекстЗапросаПолей = ТекстЗапросаПолей + "НачислениеЗарплатыВзносы." + ПолеВзносов + " КАК " + ПолеВзносов;
		ТекстЗапросаСуммПолей = ТекстЗапросаСуммПолей + "СУММА(НачислениеЗарплатыВзносы." + ПолеВзносов + ") КАК " + ПолеВзносов;
			
	КонецЦикла;
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПоляВзносов КАК ПоляВзносов", ТекстЗапросаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СУММА(НачислениеЗарплатыВзносы.ПоляВзносов) КАК ПоляВзносов", ТекстЗапросаСуммПолей);
		
	ФизическиеЛицаБезСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВТСотрудникиПредварительно.Сотрудник,
		|	ВТСотрудникиПредварительно.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	ВТСотрудникиПредварительно КАК ВТСотрудникиПредварительно";
	
	Если ФизическиеЛицаБезСотрудников.Количество() > 0 Тогда
		
		КадровыйУчет.СоздатьВТОсновныеСотрудникиФизическихЛиц(
			Запрос.МенеджерВременныхТаблиц,
			Истина,
			ФизическиеЛицаБезСотрудников,
			Объект.Организация,
			Объект.МесяцНачисления,
			КонецМесяца(Объект.МесяцНачисления));
		
		Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ОсновныеСотрудникиФизическихЛиц.Сотрудник,
			|	ОсновныеСотрудникиФизическихЛиц.ФизическоеЛицо
			|ИЗ
			|	ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц";
		
	КонецЕсли; 
	
	Запрос.Выполнить();
	
	Объект.Сотрудники.Загрузить(ТаблицаСотрудники(Запрос.МенеджерВременныхТаблиц));
	
КонецПроцедуры

// Возвращает данные о заработке для расчета среднего заработка пособий ФСС.
//
// Параметры:
//		Сотрудник			- СправочникСсылка.Сотрудники
//		Организация			- СправочникСсылка.Организации
//		ДатаНачалаСобытия	- Дата
//		РасчетныеГоды		- Массив, года за которые рассчитывается заработок.
// Возвращаемое значение%
//		Соответствие
//
Функция ДанныеОЗаработкеДляРасчетаСреднегоФСС(Сотрудник, Организация, ДатаНачалаСобытия, РасчетныеГоды) Экспорт
	
	ДанныеОЗаработке = Новый Соответствие;
	
	ПараметрыЗаполнения = УчетПособийСоциальногоСтрахования.ПараметрыЗаполненияСправкиОЗаработкеИДняхОтсутствия(Неопределено);
	ПараметрыЗаполнения.Сотрудник = Сотрудник;
	ПараметрыЗаполнения.Организация = Организация;
	ПараметрыЗаполнения.РасчетныеГоды = РасчетныеГоды;
	ПараметрыЗаполнения.ГодНачала = ПараметрыЗаполнения.РасчетныеГоды[0];
	ПараметрыЗаполнения.ГодОкончания = ПараметрыЗаполнения.РасчетныеГоды[1];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо"));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(ПараметрыЗаполнения.Организация));
	Запрос.УстановитьПараметр("ОграничиватьРазмерЗаработка", ПараметрыЗаполнения.ОграничиватьРазмерЗаработка);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ФизическоеЛицо КАК ФизическоеЛицо,
		|	&ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|ПОМЕСТИТЬ ВТФизЛицаОрганизаций";
		
	Запрос.Выполнить();
	
	УчетСтраховыхВзносов.СформироватьВТРасширенныеСведенияОДоходахИВзносах(Дата(ПараметрыЗаполнения.ГодНачала, 1, 1), КонецГода(Дата(ПараметрыЗаполнения.ГодОкончания, 1, 1)), ПараметрыЗаполнения.Организация, Запрос.МенеджерВременныхТаблиц, Истина, , , , Истина);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ГОД(СведенияОДоходах.Период) КАК Год,
		|	МЕСЯЦ(СведенияОДоходах.Период) КАК Месяц,
		|	СУММА(СведенияОДоходах.БазаФСС) КАК Заработок
		|ИЗ
		|	ВТРасширенныеСведенияОДоходах КАК СведенияОДоходах
		|
		|СГРУППИРОВАТЬ ПО
		|	ГОД(СведенияОДоходах.Период),
		|	МЕСЯЦ(СведенияОДоходах.Период)
		|
		|ИМЕЮЩИЕ
		|	СУММА(СведенияОДоходах.БазаФСС) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Год";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
		
		СведенияГода = ДанныеОЗаработке.Получить(Выборка.Год);
		Если СведенияГода = Неопределено Тогда
			СведенияГода = Новый Соответствие;
		КонецЕсли; 
		
		Пока Выборка.Следующий() Цикл
			СведенияМесяца = Новый Структура("Сумма,ДнейБолезниУходаЗаДетьми", Выборка.Заработок, 0);
			СведенияГода.Вставить(Выборка.Месяц, СведенияМесяца);
		КонецЦикла;
		
		ДанныеОЗаработке.Вставить(Выборка.Год, СведенияГода);
		
	КонецЦикла;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.ДатаНачала,
		|	БольничныйЛист.ДатаОкончания
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Проведен
		|	И БольничныйЛист.Сотрудник = &Сотрудник
		|	И БольничныйЛист.ДатаНачала <= &ОкончаниеВторогоГода
		|	И БольничныйЛист.ДатаОкончания >= &НачалоПервогоГода";
		
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("НачалоПервогоГода", НачалоГода(Дата(ПараметрыЗаполнения.ГодНачала, 1, 1)));
	Запрос.УстановитьПараметр("ОкончаниеВторогоГода", КонецГода(Дата(ПараметрыЗаполнения.ГодОкончания, 1, 1)));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДатаНачала = Выборка.ДатаНачала;
			ДатаОкончания = Выборка.ДатаОкончания;
			
			Если ДатаНачала < Дата(ПараметрыЗаполнения.ГодНачала, 1, 1) Тогда
				ДатаНачала = Дата(ПараметрыЗаполнения.ГодНачала, 1, 1);
			КонецЕсли;
			
			Пока ДатаНачала <= ДатаОкончания Цикл
				
				Год = Год(ДатаНачала);
				Если Год = ПараметрыЗаполнения.ГодНачала
					Или Год = ПараметрыЗаполнения.ГодОкончания Тогда
					
					Месяц = Месяц(ДатаНачала);
					ДатаОкончанияВМесяце = Мин(НачалоДня(КонецМесяца(ДатаНачала)), ДатаОкончания);
					
					СведенияГода = ДанныеОЗаработке.Получить(Год);
					Если СведенияГода = Неопределено Тогда
						СведенияГода = Новый Соответствие;
					КонецЕсли; 
					
					СведенияМесяца = СведенияГода.Получить(Месяц);
					Если СведенияМесяца = Неопределено Тогда
						СведенияМесяца = Новый Структура("Сумма,ДнейБолезниУходаЗаДетьми", 0, 0);
					КонецЕсли; 
					
					ДнейБолезниУходаЗаДетьми = (КонецДня(ДатаОкончанияВМесяце) - ДатаНачала + 1) / 86400;
					СведенияМесяца.ДнейБолезниУходаЗаДетьми = СведенияМесяца.ДнейБолезниУходаЗаДетьми + ДнейБолезниУходаЗаДетьми;
					
					СведенияГода.Вставить(Месяц, СведенияМесяца);
					ДанныеОЗаработке.Вставить(Год, СведенияГода);
					
				КонецЕсли; 
				
				ДатаНачала = КонецМесяца(ДатаНачала) + 1;
				
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат ДанныеОЗаработке;
	
КонецФункции

// Возвращает структуру, содержащую параметры получения среднего заработка для расчета отпусков.
//
//	Возвращаемое значение:
//	Структура
//
Функция ПараметрыПолученияДанныхСреднегоОбщего() Экспорт
	
	ПараметрыПолученияДанныхСреднего = Новый Структура;
	
	ПараметрыПолученияДанныхСреднего.Вставить("ТаблицыПоСотруднику"); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаПериода"); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаОкончанияПериода"); 
	ПараметрыПолученияДанныхСреднего.Вставить("ДатаНачалаСобытия", '00010101');
	
	Возврат	ПараметрыПолученияДанныхСреднего;
	
КонецФункции

// Возвращает результат расчета среднего заработка для расчета отпусков.
//
// Параметры:
//		ПараметрыПолученияДанныхСреднего - Структура
//
// Возвращаемое значение:
//		Структура
//
Функция ДанныеРасчетаСреднегоЗаработкаОбщего(ПараметрыПолученияДанныхСреднего) Экспорт
	
	ДанныеОНачислениях 			= ПараметрыПолученияДанныхСреднего.ТаблицыПоСотруднику["ДанныеОНачислениях"]; 
	ДанныеОВремени 				= ПараметрыПолученияДанныхСреднего.ТаблицыПоСотруднику["ДанныеОВремени"]; 
	ДатаНачалаПериода 			= ПараметрыПолученияДанныхСреднего.ДатаНачалаПериода; 
	ДатаОкончанияПериода 		= ПараметрыПолученияДанныхСреднего.ДатаОкончанияПериода; 
	ДатаНачалаСобытия 			= ПараметрыПолученияДанныхСреднего.ДатаНачалаСобытия;
	
	Заработок = Новый ТаблицаЗначений;
	Заработок.Колонки.Добавить("Месяц", 						Новый ОписаниеТипов("Дата"));
	Заработок.Колонки.Добавить("Сумма", 						Новый ОписаниеТипов("Число"));
	Заработок.Колонки.Добавить("Учтено", 						Новый ОписаниеТипов("Число"));
	
	ОтработанноеВремя = Новый ТаблицаЗначений;
	ОтработанноеВремя.Колонки.Добавить("Месяц", 							Новый ОписаниеТипов("Дата"));
	ОтработанноеВремя.Колонки.Добавить("КалендарныхДней", 					Новый ОписаниеТипов("Число"));
	ОтработанноеВремя.Колонки.Добавить("Учтено", 							Новый ОписаниеТипов("Число"));
	
	ДанныеОВремениПоПериодам = Новый Соответствие;
	
	Для Каждого СтрокаВремени Из ДанныеОВремени Цикл
		
		// Используем данные только за рассчитываемый период.
		Если СтрокаВремени.Период < ДатаНачалаПериода Или СтрокаВремени.Период > ДатаОкончанияПериода Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтработанноеВремя = СтрокаКоллекцииПоПериоду(ОтработанноеВремя, СтрокаВремени.Период);
		
		СтрокаОтработанноеВремя.КалендарныхДней = СтрокаВремени.ОтработаноДнейКалендарных;
		
		// Если отработано календарных дней меньше, 
		// чем всего в месяце уменьшаем среднемесячное количество дней пропорционально.
		ДнейПериода = КоличествоУчтенныхДнейОтпуска(ДатаНачалаСобытия, СтрокаВремени.Период, СтрокаВремени.ОтработаноДнейКалендарных);
		СтрокаОтработанноеВремя.Учтено = ДнейПериода;
		
	КонецЦикла;	
	
	КоличествоМесяцевПериодаРасчета = КоличествоМесяцевПериодаРасчетаСреднего(ДатаНачалаПериода, ДатаОкончанияПериода);
	
	ОтражатьДолюВремени = Ложь;
	
	Для Каждого СтрокаНачислений Из ДанныеОНачислениях Цикл
		
		// Используем данные только за рассчитываемый период.
		Если СтрокаНачислений.Период < ДатаНачалаПериода 
			Или СтрокаНачислений.Период > ДатаОкончанияПериода Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаработка 		= СтрокаКоллекцииПоПериоду(Заработок, СтрокаНачислений.Период);
		СтрокаЗаработка.Сумма 	= СтрокаЗаработка.Сумма + СтрокаНачислений.Сумма;
		СтрокаЗаработка.Учтено 	= Окр(СтрокаЗаработка.Сумма, 2);
		
	КонецЦикла;	
	
	Заработок.Сортировать("Месяц");
	ОтработанноеВремя.Сортировать("Месяц");
	
	Итоги = Новый Структура;
	Итоги.Вставить("ВсегоЗаработка",				Заработок.Итог("Учтено"));
	Итоги.Вставить("ВсегоКалендарныхДней", 			ОтработанноеВремя.Итог("КалендарныхДней"));
	Итоги.Вставить("ВсегоДнейЧасов", 				ОтработанноеВремя.Итог("Учтено"));
	
	ВсегоЗаработок = ?(Итоги.ВсегоДнейЧасов = 0, 0, Итоги.ВсегоЗаработка / Итоги.ВсегоДнейЧасов);
	Итоги.Вставить("СреднедневнойЗаработок", 		Окр(ВсегоЗаработок, 2));
	
	Возврат Новый Структура("Итоги,Заработок,ОтработанноеВремя", Итоги, Заработок, ОтработанноеВремя);
	
КонецФункции

// Возвращает количество учетных дней отпуска.
//
// Параметры:
//		ДатаСобытия					- Дата
//		Месяц						- Дата
//		ОтработаноДнейКалендарных	- Число
//
// Возвращаемое значение:
//		Число
//
Функция КоличествоУчтенныхДнейОтпуска(ДатаСобытия, Месяц, ОтработаноДнейКалендарных) Экспорт
	
	Возврат Окр(КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаСобытия) * (ОтработаноДнейКалендарных / ЗарплатаКадрыКлиентСервер.КоличествоДнейМесяца(Месяц)), 2);
	
КонецФункции

// Возвращает среднее количество дней в месяце для оплаты отпусков.
//
// Параметры:
//		ДатаНачалаСобытия - Дата
//
// Возвращаемое значение:
//		Число
//
Функция КоличествоДнейВМесяцеДляОплатыОтпусков(ДатаНачалаСобытия) Экспорт
	
	Возврат ?(Не ЗначениеЗаполнено(ДатаНачалаСобытия), 29.4, ?(ДатаНачалаСобытия < ДатаИзмененияКоличестваДнейДляОтпускных(), 29.4, 29.3));	

КонецФункции

// Возвращает данные для расчета среднего заработка, для расчета отпусков.
//
// Параметры:
//		Сотрудник				- СправочникСсылка.Сотрудники
//		Организация				- СправочникСсылка.Организации
//		НачалоПериодаРасчета	- Дата
//		ОкончаниеПериодаРасчета - Дата
//
// Возвращаемое значение:
//		Структура
//
Функция ДанныеДляРасчетаОбщегоСреднегоЗаработкаСотрудника(Сотрудник, Организация, НачалоПериодаРасчета, ОкончаниеПериодаРасчета) Экспорт
	
	ДанныеДляРасчета = Новый Структура("ДанныеОНачислениях,ДанныеОВремени");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадры.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаРасчета);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериодаРасчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВЫБОР
		|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема > &НачалоПериода
		|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|				ИНАЧЕ &НачалоПериода
		|			КОНЕЦ, ДЕНЬ)) КАК НачалоПериода,
		|	МАКСИМУМ(КОНЕЦПЕРИОДА(ВЫБОР
		|				КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения < &ОкончаниеПериода
		|						И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|				ИНАЧЕ &ОкончаниеПериода
		|			КОНЕЦ, ДЕНЬ)) КАК ОкончаниеПериода
		|ПОМЕСТИТЬ ВТПериодыРаботыФизическихЛиц
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &ОкончаниеПериода
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
		|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &НачалоПериода
		|			ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация";
	
	Запрос.Выполнить();
	
	СоздатьВТНачисленияЗарплаты(Запрос.МенеджерВременныхТаблиц, "ВТНачисления");
	СоздатьВТПериодыОтсутствий(Запрос.МенеджерВременныхТаблиц, "ВТОтсутствияПредварительно");
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", РасчетЗарплатыДляНебольшихОрганизацийПовтИсп.ПроизводственныйКалендарьОрганизации(Организация));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Отсутствия.ДатаНачала, МЕСЯЦ) КАК Период,
		|	Отсутствия.Сотрудник КАК Сотрудник,
		|	Отсутствия.ДатаНачала КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА Отсутствия.ДатаОкончания > НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Отсутствия.ДатаНачала, МЕСЯЦ), ДЕНЬ)
		|			ТОГДА НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(Отсутствия.ДатаНачала, МЕСЯЦ), ДЕНЬ)
		|		ИНАЧЕ Отсутствия.ДатаОкончания
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтсутствия
		|ИЗ
		|	ВТОтсутствияПредварительно КАК Отсутствия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ОтсутствияСледующийМесяц.ДатаОкончания, МЕСЯЦ),
		|	ОтсутствияСледующийМесяц.Сотрудник,
		|	НАЧАЛОПЕРИОДА(ОтсутствияСледующийМесяц.ДатаОкончания, МЕСЯЦ),
		|	ОтсутствияСледующийМесяц.ДатаОкончания
		|ИЗ
		|	ВТОтсутствияПредварительно КАК ОтсутствияСледующийМесяц
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ОтсутствияСледующийМесяц.ДатаОкончания, ДЕНЬ) > НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(ОтсутствияСледующийМесяц.ДатаНачала, МЕСЯЦ), ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отсутствия.ДатаНачала КАК ДатаНачала,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК ДнейПраздников
		|ПОМЕСТИТЬ ВТПраздничныеДниОтсутствий
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтсутствия КАК Отсутствия
		|		ПО (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ Отсутствия.ДатаНачала И Отсутствия.ДатаОкончания)
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|	И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|			ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				И ДанныеПроизводственногоКалендаря.ДатаПереноса <> ДАТАВРЕМЯ(1, 1, 1))
		|
		|СГРУППИРОВАТЬ ПО
		|	Отсутствия.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Отсутствия.Период КАК Период,
		|	Отсутствия.Сотрудник КАК Сотрудник,
		|	СУММА(РАЗНОСТЬДАТ(Отсутствия.ДатаНачала, Отсутствия.ДатаОкончания, ДЕНЬ) + 1) - ЕСТЬNULL(ПраздничныеДниОтсутствий.ДнейПраздников, 0) КАК НеОтработанныеДни
		|ПОМЕСТИТЬ ВТНеОтработанныеДни
		|ИЗ
		|	ВТОтсутствия КАК Отсутствия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздничныеДниОтсутствий КАК ПраздничныеДниОтсутствий
		|		ПО Отсутствия.ДатаНачала = ПраздничныеДниОтсутствий.ДатаНачала
		|
		|СГРУППИРОВАТЬ ПО
		|	Отсутствия.Сотрудник,
		|	Отсутствия.Период,
		|	ПраздничныеДниОтсутствий.ДнейПраздников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Период КАК Период,
		|	ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыРаботыФизическихЛиц.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(Начисления.Сумма, 0) КАК Сумма,
		|	РАЗНОСТЬДАТ(Начисления.ДатаНачала, Начисления.ДатаОкончания, ДЕНЬ) + 1 КАК КалендарныеРабочиеДни,
		|	ЕСТЬNULL(НеОтработанныеКалендарныеДни.НеОтработанныеДни, 0) КАК НеОтработанныеДни
		|ПОМЕСТИТЬ ВТДанныеДляРасчета
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНеОтработанныеДни КАК НеОтработанныеКалендарныеДни
		|		ПО Начисления.Период = НеОтработанныеКалендарныеДни.Период
		|			И Начисления.Сотрудник = НеОтработанныеКалендарныеДни.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
		|		ПО Начисления.Сотрудник = ПериодыРаботыФизическихЛиц.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.Сотрудник КАК Сотрудник,
		|	Начисления.Сумма КАК Сумма,
		|	Начисления.Период КАК Период
		|ИЗ
		|	ВТНачисления КАК Начисления";
	
	ДанныеДляРасчета.ДанныеОНачислениях = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДляРасчета.Период,
		|	ДанныеДляРасчета.КалендарныеРабочиеДни - ДанныеДляРасчета.НеОтработанныеДни КАК ОтработаноДнейКалендарных
		|ИЗ
		|	ВТДанныеДляРасчета КАК ДанныеДляРасчета";
	
	ДанныеДляРасчета.ДанныеОВремени = Запрос.Выполнить().Выгрузить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, НачалоПериодаРасчета, ОкончаниеПериодаРасчета);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Периоды.Период КАК Месяц
		|ПОМЕСТИТЬ ВТНедостающиеМесяцы
		|ИЗ
		|	ВТПериоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО Периоды.Период = Начисления.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеДляРасчета КАК ДанныеДляРасчета
		|		ПО Периоды.Период = ДанныеДляРасчета.Период
		|ГДЕ
		|	Начисления.Период ЕСТЬ NULL 
		|	И ДанныеДляРасчета.Период ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ОтпускСреднийЗаработокОбщий.Ссылка,
			|	ОтпускСреднийЗаработокОбщий.Ссылка.Дата,
			|	ОтпускСреднийЗаработокОбщий.Период
			|ПОМЕСТИТЬ ВТДокументыДаты
			|ИЗ
			|	Документ.Отпуск.СреднийЗаработокОбщий КАК ОтпускСреднийЗаработокОбщий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНедостающиеМесяцы КАК НедостающиеМесяцы
			|		ПО ОтпускСреднийЗаработокОбщий.Период = НедостающиеМесяцы.Месяц
			|ГДЕ
			|	ОтпускСреднийЗаработокОбщий.Ссылка.Проведен
			|	И ОтпускСреднийЗаработокОбщий.Ссылка.Сотрудник = &Сотрудник
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОтпускОтработанноеВремяДляСреднегоОбщий.Ссылка,
			|	ОтпускОтработанноеВремяДляСреднегоОбщий.Ссылка.Дата,
			|	ОтпускОтработанноеВремяДляСреднегоОбщий.Период
			|ИЗ
			|	Документ.Отпуск.ОтработанноеВремяДляСреднегоОбщий КАК ОтпускОтработанноеВремяДляСреднегоОбщий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНедостающиеМесяцы КАК НедостающиеМесяцы
			|		ПО ОтпускОтработанноеВремяДляСреднегоОбщий.Период = НедостающиеМесяцы.Месяц
			|ГДЕ
			|	ОтпускОтработанноеВремяДляСреднегоОбщий.Ссылка.Проведен
			|	И ОтпускОтработанноеВремяДляСреднегоОбщий.Ссылка.Сотрудник = &Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыДаты.Период,
			|	МАКСИМУМ(ДокументыДаты.Дата) КАК Дата
			|ПОМЕСТИТЬ ВТПоследниеДатыПериодов
			|ИЗ
			|	ВТДокументыДаты КАК ДокументыДаты
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыДаты.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(ДокументыДаты.Ссылка) КАК Ссылка,
			|	ДокументыДаты.Период
			|ПОМЕСТИТЬ ВТДокументыПериодов
			|ИЗ
			|	ВТПоследниеДатыПериодов КАК ПоследниеДатыПериодов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыДаты КАК ДокументыДаты
			|		ПО ПоследниеДатыПериодов.Период = ДокументыДаты.Период
			|			И ПоследниеДатыПериодов.Дата = ДокументыДаты.Дата
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыДаты.Период";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОтпускСреднийЗаработокОбщий.Сотрудник КАК Сотрудник,
			|	ОтпускСреднийЗаработокОбщий.Период,
			|	ОтпускСреднийЗаработокОбщий.Сумма
			|ИЗ
			|	Документ.Отпуск.СреднийЗаработокОбщий КАК ОтпускСреднийЗаработокОбщий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыПериодов КАК ВТДокументыПериодов
			|		ПО ОтпускСреднийЗаработокОбщий.Ссылка = ВТДокументыПериодов.Ссылка
			|			И ОтпускСреднийЗаработокОбщий.Период = ВТДокументыПериодов.Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ДанныеОНачислениях.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ОтпускОтработанноеВремяДляСреднегоОбщий.Период,
			|	ОтпускОтработанноеВремяДляСреднегоОбщий.ОтработаноДнейКалендарных
			|ИЗ
			|	Документ.Отпуск.ОтработанноеВремяДляСреднегоОбщий КАК ОтпускОтработанноеВремяДляСреднегоОбщий
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыПериодов КАК ДокументыПериодов
			|		ПО ОтпускОтработанноеВремяДляСреднегоОбщий.Ссылка = ДокументыПериодов.Ссылка
			|			И ОтпускОтработанноеВремяДляСреднегоОбщий.Период = ДокументыПериодов.Период";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(ДанныеДляРасчета.ДанныеОВремени.Добавить(), Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчета;
	
КонецФункции

// Возвращает признак того, что в месяце начисления есть работающие сотрудники
//
// Параметры;
//		МесяцНачисления	- Дата
//		Организация		- СправочникСсылка.Организации
//		Подразделение	- СправочникСсылка.ПодразделенияОрганизаций, Неопределено
//
// Возвращаемое значение:
//		Булево - Истина, если в месяце начисления есть работающие сотрудники
//
Функция ВМесяцеНачисленияЕстьРаботавшиеСотрудники(МесяцНачисления, Организация, Подразделение = Неопределено) Экспорт
	
	Результат = Ложь;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = Организация;
	ПараметрыПолученияСотрудников.Подразделение = Подразделение;
	ПараметрыПолученияСотрудников.НачалоПериода = МесяцНачисления;
	ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецМесяца(МесяцНачисления);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ДатаПриема,ДатаЗавершенияРаботы";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудников);
	
	Если ЗарплатаКадры.ВТСодержитСтроки(Запрос.МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации") Тогда
		
		Запрос.УстановитьПараметр("КатегорииОтсутствий", КатегорииОтсутствий());
		Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
		
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизации.ДатаПриема > &МесяцНачисления
			|			ТОГДА СотрудникиОрганизации.ДатаПриема
			|		ИНАЧЕ &МесяцНачисления
			|	КОНЕЦ КАК ДатаНачала,
			|	ВЫБОР
			|		КОГДА СотрудникиОрганизации.ДатаЗавершенияРаботы <> ДАТАВРЕМЯ(1, 1, 1)
			|				И СотрудникиОрганизации.ДатаЗавершенияРаботы < НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ), ДЕНЬ)
			|			ТОГДА СотрудникиОрганизации.ДатаЗавершенияРаботы
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ), ДЕНЬ)
			|	КОНЕЦ КАК ДатаОкончания,
			|	НачисленияУдержанияПоСотрудникам.ДатаНачала КАК ДатаНачалаОтсутствия,
			|	НачисленияУдержанияПоСотрудникам.ДатаОкончания КАК ДатаОкончанияОтсутствий
			|ИЗ
			|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|		ПО СотрудникиОрганизации.Сотрудник = НачисленияУдержанияПоСотрудникам.Сотрудник
			|			И (НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.ДатаНачала, МЕСЯЦ) = &МесяцНачисления)
			|			И (НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (&КатегорииОтсутствий))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.ДатаНачалаОтсутствия) Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
			
			РабочихДнейЧасов = РабочихДнейЧасовВПериодеОрганизации(Выборка.ДатаНачала, Выборка.ДатаОкончания, Организация);
			
			РабочихДней = 0;
			Пока Выборка.Следующий() Цикл
				
				РабочихДнейЧасовВПериоде = РабочихДнейЧасовВПериодеОрганизации(Выборка.ДатаНачалаОтсутствия, Выборка.ДатаОкончанияОтсутствий, Организация);
				РабочихДней = РабочихДней + РабочихДнейЧасовВПериоде.Дней;
				
			КонецЦикла;
			
			Если РабочихДнейЧасов.Дней <> РабочихДней Тогда
				
				Результат = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйГрафикРаботыОрганизации(Организация, ПроизводственныйКалендарь) Экспорт
	
	НовыйГрафикРаботы = Справочники.Календари.СоздатьЭлемент();
	НовыйГрафикРаботы.ВладелецГрафика           = Организация;
	НовыйГрафикРаботы.Наименование              = НСтр("ru = 'Пятидневная рабочая неделя'");
	
	Если ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		НовыйГрафикРаботы.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	Иначе
		НовыйГрафикРаботы.ПроизводственныйКалендарь = КалендарныеГрафики.ОсновнойПроизводственныйКалендарь();
	КонецЕсли;
	
	НовыйГрафикРаботы.СпособЗаполнения          = Перечисления.СпособыЗаполненияГрафикаРаботы.ПоНеделям;
	НовыйГрафикРаботы.ДатаНачала                = Дата(2000, 1, 1);
	НовыйГрафикРаботы.УчитыватьПраздники         = Истина;
	
	// График работы в предпраздничные дни
	ПериодРаботы = НовыйГрафикРаботы.РасписаниеРаботы.Добавить();
	ПериодРаботы.НомерДня = 0;
	ПериодРаботы.ВремяНачала = Дата(1, 1, 1, 9, 0, 0);
	ПериодРаботы.ВремяОкончания = Дата(1, 1, 1, 13, 0, 0);
	
	ПериодРаботы = НовыйГрафикРаботы.РасписаниеРаботы.Добавить();
	ПериодРаботы.НомерДня = 0;
	ПериодРаботы.ВремяНачала = Дата(1, 1, 1, 14, 0, 0);
	ПериодРаботы.ВремяОкончания = Дата(1, 1, 1, 17, 0, 0);
	
	// Заполняем недельный цикл как пятидневку.
	Для НомерДня = 1 По 7 Цикл
		
		НовыйГрафикРаботы.ШаблонЗаполнения.Добавить().ДеньВключенВГрафик = НомерДня <= 5;
		Если НомерДня < 6 Тогда
			
			ПериодРаботы = НовыйГрафикРаботы.РасписаниеРаботы.Добавить();
			ПериодРаботы.НомерДня = НомерДня;
			ПериодРаботы.ВремяНачала = Дата(1, 1, 1, 9, 0, 0);
			ПериодРаботы.ВремяОкончания = Дата(1, 1, 1, 13, 0, 0);
			
			ПериодРаботы = НовыйГрафикРаботы.РасписаниеРаботы.Добавить();
			ПериодРаботы.НомерДня = НомерДня;
			ПериодРаботы.ВремяНачала = Дата(1, 1, 1, 14, 0, 0);
			ПериодРаботы.ВремяОкончания = Дата(1, 1, 1, 18, 0, 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйГрафикРаботы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьВТНачисленияЗарплаты(МенеджерВременныхТаблиц, ИмяВТНачисленияЗарплаты = "ВТНачисленияЗарплаты") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокКатегорий", КатегорииОтсутствий());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма,
		|	НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) КАК Период,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) > ПериодыРаботыФизическихЛиц.НачалоПериода
		|			ТОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			ТОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТНачисленияЗарплаты
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
		|		ПО НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
		|			И НачисленияУдержанияПоСотрудникам.Сотрудник = ПериодыРаботыФизическихЛиц.Сотрудник
		|			И НачисленияУдержанияПоСотрудникам.Период <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			И (НачисленияУдержанияПоСотрудникам.Период >= НАЧАЛОПЕРИОДА(ПериодыРаботыФизическихЛиц.НачалоПериода, МЕСЯЦ))
		|			И (НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено))
		|			И (НЕ НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий))
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация,
		|	НачисленияУдержанияПоСотрудникам.Сотрудник,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
		|	НачисленияУдержанияПоСотрудникам.Период,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) > ПериодыРаботыФизическихЛиц.НачалоПериода
		|			ТОГДА НАЧАЛОПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ) < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			ТОГДА КОНЕЦПЕРИОДА(НачисленияУдержанияПоСотрудникам.Период, МЕСЯЦ)
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|	КОНЕЦ";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТНачисленияЗарплаты", ИмяВТНачисленияЗарплаты);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТПериодыОтсутствий(МенеджерВременныхТаблиц, ИмяВТПериодыОтсутствий = "ВТПериодыОтсутствий") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокКатегорий", КатегорииОтсутствий());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтработанноеВремяПоСотрудникам.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ОтработанноеВремяПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ОтработанноеВремяПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.ДатаНачала > ПериодыРаботыФизическихЛиц.НачалоПериода
		|			ТОГДА НачисленияУдержанияПоСотрудникам.ДатаНачала
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.НачалоПериода
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА НачисленияУдержанияПоСотрудникам.ДатаОкончания < ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|			ТОГДА НачисленияУдержанияПоСотрудникам.ДатаОкончания
		|		ИНАЧЕ ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|	КОНЕЦ КАК ДатаОкончания,
		|	ОтработанноеВремяПоСотрудникам.Регистратор КАК СсылкаНаДокумент,
		|	БольничныйЛист.ПричинаНетрудоспособности КАК ПричинаНеРаботы
		|ПОМЕСТИТЬ ВТПериодыОтсутствий
		|ИЗ
		|	РегистрНакопления.ОтработанноеВремяПоСотрудникам КАК ОтработанноеВремяПоСотрудникам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыРаботыФизическихЛиц КАК ПериодыРаботыФизическихЛиц
		|			ПО НачисленияУдержанияПоСотрудникам.Организация.ГоловнаяОрганизация = ПериодыРаботыФизическихЛиц.ГоловнаяОрганизация
		|				И НачисленияУдержанияПоСотрудникам.Сотрудник = ПериодыРаботыФизическихЛиц.Сотрудник
		|				И НачисленияУдержанияПоСотрудникам.ДатаНачала <= ПериодыРаботыФизическихЛиц.ОкончаниеПериода
		|				И НачисленияУдержанияПоСотрудникам.ДатаОкончания >= ПериодыРаботыФизическихЛиц.НачалоПериода
		|		ПО ОтработанноеВремяПоСотрудникам.Период = НачисленияУдержанияПоСотрудникам.Период
		|			И ОтработанноеВремяПоСотрудникам.Регистратор = НачисленияУдержанияПоСотрудникам.Регистратор
		|			И ОтработанноеВремяПоСотрудникам.ИдентификаторСтроки = НачисленияУдержанияПоСотрудникам.ИдентификаторСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.БольничныйЛист КАК БольничныйЛист
		|		ПО ОтработанноеВремяПоСотрудникам.Регистратор = БольничныйЛист.Ссылка
		|ГДЕ
		|	ОтработанноеВремяПоСотрудникам.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени В(&СписокКатегорий)";
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТПериодыОтсутствий", ИмяВТПериодыОтсутствий);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.УнифицированнаяФормаТ13);
	
КонецПроцедуры

Процедура УстановитьИсключаемыеПунктыМенюВводаНаОснованииСотрудников(ИсключаемыеПунктыМеню) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("РасчетЗарплатыДляНебольшихОрганизаций") Тогда
		ИсключаемыеПунктыМеню.Добавить("Документы.БольничныйЛист");
		ИсключаемыеПунктыМеню.Добавить("Документы.Отпуск");
		ИсключаемыеПунктыМеню.Добавить("Документы.ОтпускБезСохраненияОплаты");
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает максимально возможное значение разницы между максимально возможным количеством
// сотрудников и фактическим количеством сотрудников, при достижении которого выдаются предупреждения
// об ограничениях применения режима расчета зарплаты для небольших организаций.
//
// Возвращаемое значение:
//		Число
//
Функция ПорогПредупреждения()
	
	Возврат 5;
	
КонецФункции

Функция ТекущееКоличествоСотрудников(Организация = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Отборы = Новый Массив;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ОформленПоТрудовомуДоговору", "=", Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаПриема", "<>", "ДАТАВРЕМЯ(1, 1, 1)");
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		Отборы, "ДатаУвольнения", "=", "ДАТАВРЕМЯ(1, 1, 1)");
	
	Если Организация <> Неопределено Тогда
		
		ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
			Отборы, "ТекущаяОрганизация", "=", Организация);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КадровыйУчет.СоздатьВТТекущиеКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, 
		Ложь, Отборы, "ТекущаяОрганизация");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация КАК Организация,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущиеКадровыеДанныеСотрудников.Сотрудник) КАК КоличествоСотрудников
		|ИЗ
		|	ВТТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|
		|СГРУППИРОВАТЬ ПО
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоСотрудников УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СоздатьВТНачисленияПоОтсутствиям(МенеджерВременныхТаблиц, ТолькоРазрешенные, МесяцНачисления, Организация, Подразделение = Неопределено, СписокСотрудников = Неопределено, ИсключаемыйРегистратор = Неопределено, ИмяВТНачисленияПоОтсутствиям = "ВТНачисленияПоОтсутствиям")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокКатегорий", КатегорииОтсутствий());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Начислено)
		|					И ВЫРАЗИТЬ(НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК ПланВидовРасчета.Начисления).КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникам.ГруппаНачисленияУдержанияВыплаты = ЗНАЧЕНИЕ(Перечисление.ГруппыНачисленияУдержанияВыплаты.Удержано)
		|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛСПревышения))
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДФЛ
		|ПОМЕСТИТЬ ВТНачисленияПоОтсутствиям
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период = &МесяцНачисления
		|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникам.Подразделение В ИЕРАРХИИ(&Подразделение)
		|	И НачисленияУдержанияПоСотрудникам.Сотрудник В(&СписокСотрудников)
		|	И НачисленияУдержанияПоСотрудникам.Регистратор <> &ИсключаемыйРегистратор
		|
		|СГРУППИРОВАТЬ ПО
		|	НачисленияУдержанияПоСотрудникам.Сотрудник,
		|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ИсключаемыйРегистратор);
	
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Подразделение В ИЕРАРХИИ(&Подразделение)", "");
	КонецЕсли;
	
	Если СписокСотрудников = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НачисленияУдержанияПоСотрудникам.Сотрудник В(&СписокСотрудников)", "");
	Иначе
		Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	КонецЕсли;
	
	ЗарплатаКадрыОбщиеНаборыДанных.УстановитьВыборкуТолькоРазрешенныхДанных(Запрос.Текст, ТолькоРазрешенные);
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаменитьИмяСоздаваемойВременнойТаблицы(Запрос.Текст, "ВТНачисленияПоОтсутствиям", ИмяВТНачисленияПоОтсутствиям);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТаблицаСотрудники(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МИНИМУМ(Сотрудники.Сотрудник) КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СУММА(ОтпускаБольничные.НДФЛ) КАК НДФЛОтпускаБольничные,
		|	МАКСИМУМ(ЕСТЬNULL(НДФЛДокумента.НДФЛ, 0)) + СУММА(ЕСТЬNULL(ОтпускаБольничные.НДФЛ, 0)) КАК НДФЛ,
		|	МАКСИМУМ(ЕСТЬNULL(УдержанияДокумента.Удержано, 0)) КАК ПрочееУдержано,
		|	МАКСИМУМ(ЕСТЬNULL(УдержанияДокумента.Удержано, 0)) + МАКСИМУМ(ЕСТЬNULL(НДФЛДокумента.НДФЛ, 0)) + СУММА(ЕСТЬNULL(ОтпускаБольничные.НДФЛ, 0)) КАК ВсегоУдержано,
		|	МАКСИМУМ(&Взносы) КАК Взносы,
		|	МАКСИМУМ(ВзносыДокумента.ФиксРасчет_Взносы) КАК ФиксРасчет_Взносы,
		|	МАКСИМУМ(НДФЛДокумента.ФиксРасчет_НДФЛ) КАК ФиксРасчет_НДФЛ
		|ПОМЕСТИТЬ ВТУдержанияСотрудников
		|ИЗ
		|	ВТСотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияДокумента КАК УдержанияДокумента
		|		ПО Сотрудники.ФизическоеЛицо = УдержанияДокумента.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНДФЛДокумента КАК НДФЛДокумента
		|		ПО Сотрудники.ФизическоеЛицо = НДФЛДокумента.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносыДокумента КАК ВзносыДокумента
		|		ПО Сотрудники.ФизическоеЛицо = ВзносыДокумента.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоОтсутствиям КАК ОтпускаБольничные
		|		ПО Сотрудники.Сотрудник = ОтпускаБольничные.Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	Сотрудники.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСотрудников.Сотрудник КАК Сотрудник,
		|	ВЫРАЗИТЬ(ТаблицаСотрудников.Сотрудник КАК Справочник.Сотрудники).Наименование КАК СотрудникНаименование,
		|	ТаблицаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НачисленияДокумента.ОтработаноДней КАК ОтработаноДней,
		|	НачисленияДокумента.ОтработаноЧасов КАК ОтработаноЧасов,
		|	НачисленияДокумента.Начислено КАК Начислено,
		|	ДоговорыДокумента.Договоры КАК Договоры,
		|	НачисленияПоОтсутствиям.Сумма КАК ОтпускаБольничные,
		|	УдержанияСотрудников.НДФЛОтпускаБольничные КАК НДФЛОтпускаБольничные,
		|	ЕСТЬNULL(НачисленияДокумента.Начислено, 0) + ЕСТЬNULL(НачисленияПоОтсутствиям.Сумма, 0) + ЕСТЬNULL(ДоговорыДокумента.Договоры, 0) КАК ВсегоНачислено,
		|	УдержанияСотрудников.НДФЛ КАК НДФЛ,
		|	УдержанияСотрудников.ПрочееУдержано КАК ПрочееУдержано,
		|	УдержанияСотрудников.ВсегоУдержано КАК ВсегоУдержано,
		|	УдержанияСотрудников.Взносы КАК Взносы,
		|	УдержанияСотрудников.ФиксРасчет_Взносы КАК ФиксРасчет_Взносы,
		|	УдержанияСотрудников.ФиксРасчет_НДФЛ КАК ФиксРасчет_НДФЛ,
		|	ВЫБОР
		|		КОГДА УдержанияСотрудников.Сотрудник ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Совместитель
		|ИЗ
		|	ВТСотрудники КАК ТаблицаСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияСотрудников КАК УдержанияСотрудников
		|		ПО ТаблицаСотрудников.Сотрудник = УдержанияСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияДокумента КАК НачисленияДокумента
		|		ПО ТаблицаСотрудников.Сотрудник = НачисленияДокумента.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияПоОтсутствиям КАК НачисленияПоОтсутствиям
		|		ПО ТаблицаСотрудников.Сотрудник = НачисленияПоОтсутствиям.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоговорыДокумента КАК ДоговорыДокумента
		|		ПО ТаблицаСотрудников.Сотрудник = ДоговорыДокумента.Сотрудник
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаСотрудников.Сотрудник
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ПоляВзносов = СтрРазделить(УчетСтраховыхВзносовКлиентСервер.РассчитываемыеВзносы(), ",");
	ТекстЗапросаПолей = "";
	
	ДобавитьПлюс = Ложь;
	Для каждого ПолеВзносов Из ПоляВзносов Цикл
		
		Если ДобавитьПлюс Тогда
			ТекстЗапросаПолей = ТекстЗапросаПолей + " + ";
		Иначе
			ДобавитьПлюс = Истина;
		КонецЕсли;
		
		ТекстЗапросаПолей = ТекстЗапросаПолей + "ВзносыДокумента." + ПолеВзносов;
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "МАКСИМУМ(&Взносы) КАК Взносы", "МАКСИМУМ(" + ТекстЗапросаПолей + ") КАК Взносы");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтрокаКоллекцииПоПериоду(Коллекция, Месяц)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Месяц", Месяц);
	
	НайденныеСтроки = Коллекция.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаКоллекции = НайденныеСтроки[0];
	Иначе
		СтрокаКоллекции = Коллекция.Добавить();
		СтрокаКоллекции.Месяц = Месяц;
	КонецЕсли;
	
	Возврат  СтрокаКоллекции
	
КонецФункции

// Функция возвращает количество месяцев между двумя датами.
//
Функция КоличествоМесяцевПериодаРасчетаСреднего(ДатаНачалаПериода, ДатаОкончанияПериода)
	
	Возврат (Год(ДатаОкончанияПериода) - Год(ДатаНачалаПериода)) * 12 + Месяц(ДатаОкончанияПериода) - Месяц(ДатаНачалаПериода) + 1;	
	
КонецФункции	

Функция ДатаИзмененияКоличестваДнейДляОтпускных()

	Возврат '20140402'

КонецФункции

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.БольничныйЛист);
	СписокОбъектов.Добавить(Документы.ИсполнительныйЛист);
	СписокОбъектов.Добавить(Документы.НачислениеЗарплаты);
	СписокОбъектов.Добавить(Документы.Отпуск);
	СписокОбъектов.Добавить(ЖурналыДокументов.НачислениеЗарплаты);
	СписокОбъектов.Добавить(Документы.ОтпускБезСохраненияОплаты);
	
КонецПроцедуры

Функция КатегорииОтсутствий() Экспорт
	
	СписокКатегорий = Новый Массив;
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоПрофзаболевание);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.БолезньБезОплаты);
	СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты);
	
	Возврат СписокКатегорий;
	
КонецФункции

Функция РабочихДнейЧасовВПериоде(Календарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	РабочихДнейЧасов = Новый Структура("Дней,Часов,ПредпраздничныхДней", 0, 0, 0);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Календарь", Календарь);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	ГрафикиРаботы.СоздатьВТРасписанияРаботыНаПериод(
		Запрос.МенеджерВременныхТаблиц, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Календарь), НачалоПериода, ОкончаниеПериода);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РасписанияРаботы.ДатаГрафика КАК День,
		|	СУММА(РАЗНОСТЬДАТ(ЕСТЬNULL(РасписанияРаботы.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 10, 0, 0)), ЕСТЬNULL(РасписанияРаботы.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 18, 0, 0)), МИНУТА)) / 60 КАК Часы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТДатыНомераДней.ПредпраздничныйДень, ЛОЖЬ)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПредпраздничныйДень
		|ПОМЕСТИТЬ ВТ_РабочихДнейЧасов
		|ИЗ
		|	ВТРасписанияРаботы КАК РасписанияРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыНомераДней КАК ВТДатыНомераДней
		|		ПО РасписанияРаботы.ДатаГрафика = ВТДатыНомераДней.ДатаГрафика
		|			И РасписанияРаботы.ГрафикРаботы = ВТДатыНомераДней.ГрафикРаботы
		|
		|СГРУППИРОВАТЬ ПО
		|	РасписанияРаботы.ДатаГрафика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ВТДатыНомераДней.ПредпраздничныйДень, ЛОЖЬ)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочихДнейЧасов.День) КАК Дней,
		|	СУММА(РабочихДнейЧасов.Часы) КАК Часов,
		|	СУММА(РабочихДнейЧасов.ПредпраздничныйДень) КАК ПредпраздничныхДней
		|ПОМЕСТИТЬ ВТ_РабочееВремяПоГрафику
		|ИЗ
		|	ВТ_РабочихДнейЧасов КАК РабочихДнейЧасов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_РабочееВремяПоГрафику.Дней, 0) КАК Дней,
		|	ЕСТЬNULL(ВТ_РабочееВремяПоГрафику.Часов, 0) КАК Часов,
		|	ЕСТЬNULL(ВТ_РабочееВремяПоГрафику.ПредпраздничныхДней, 0) КАК ПредпраздничныхДней
		|ИЗ
		|	ВТ_РабочееВремяПоГрафику КАК ВТ_РабочееВремяПоГрафику";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РабочихДнейЧасов, Выборка);
	КонецЕсли;
	
	Возврат РабочихДнейЧасов;
	
КонецФункции

Функция КоличествоДнейОтпуска(ДатаНачалаОтпуска, ДатаОкончанияОтпуска, Организация) Экспорт
	
	КоличествоДней = 0;
	
	Если ЗначениеЗаполнено(ДатаНачалаОтпуска) И ДатаНачалаОтпуска <= ДатаОкончанияОтпуска Тогда
		
		КоличествоДней = КонецДня(ДатаОкончанияОтпуска) - НачалоДня(ДатаНачалаОтпуска) + 1;
		КоличествоДней = КоличествоДней / 86400;
		
		ПроизводственныйКалендарь = РасчетЗарплатыДляНебольшихОрганизацийПовтИсп.ПроизводственныйКалендарьОрганизации(Организация);
		Если ПроизводственныйКалендарь <> Неопределено Тогда
			
			РазностьДат = РасчетЗарплатыБазовый.РазностьДатПроизводственныхКалендарейПоВидамДней(
				ПроизводственныйКалендарь , ДатаНачалаОтпуска, ДатаОкончанияОтпуска);
				
			КоличествоДней = КоличествоДней - РазностьДат.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КоличествоДней;
	
КонецФункции

Функция РабочихДнейЧасовВПериодеОрганизации(ДатаНачала, ДатаОкончания, Организация) Экспорт
	
	РабочихДнейЧасовВПериоде = Неопределено;
	Если ЗначениеЗаполнено(ДатаНачала) И ДатаНачала <= ДатаОкончания Тогда
		
		КалендарьОрганизации = РасчетЗарплатыДляНебольшихОрганизацийПовтИсп.КалендарьОрганизации(Организация);
		Если КалендарьОрганизации <> Неопределено Тогда
			
			РабочихДнейЧасовВПериоде = РасчетЗарплатыБазовый.РабочихДнейЧасовВПериоде(
				КалендарьОрганизации, ДатаНачала, ДатаОкончания);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РабочихДнейЧасовВПериоде;
	
КонецФункции

#Область ПервоначальноеЗаполнениеИОбновлениеИнформационнойБазы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.УстановитьФОРасчетЗарплатыДляНебольшихОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.50";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.ЗарегистрироватьНачисленияЗарплатыКакУчтенныеПриРасчетеНДФЛ";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bac17069-e442-4393-9ba5-35272791a6c6");
	Обработчик.Комментарий = НСтр("ru = 'Регистрация Начислений зарплаты как учтенных при расчете НДФЛ документов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.112";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьТабличнуюЧастьНДФЛВедомостейНаВыплатуЗарплаты";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.10.133";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.ЗаполнитьУдержаноОтпусковИБольничных";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("272531fe-ad76-4e3e-bbfa-3a099afaba66");
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Удержано"" отпусков и больничных листов.'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.14.14";
	Обработчик.Процедура = "РасчетЗарплатыДляНебольшихОрганизаций.СоздатьГрафикиРаботыОрганизаций";
	Обработчик.РежимВыполнения = ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ОсновнойРежимВыполненияОбновления();
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0c737488-ca51-4722-b545-f13d6cd9dee8");
	Обработчик.Комментарий = НСтр("ru = 'Создание графиков работы организаций.'");
	
КонецПроцедуры

Процедура УстановитьФОРасчетЗарплатыДляНебольшихОрганизаций() Экспорт
	
	Константы.РасчетЗарплатыДляНебольшихОрганизаций.Установить(
		Константы.ИспользоватьНачислениеЗарплаты.Получить() И РасчетЗарплатыДляНебольшихОрганизацийВозможен());
	
КонецПроцедуры

Процедура ЗарегистрироватьНачисленияЗарплатыКакУчтенныеПриРасчетеНДФЛ(ПараметрыОбновления = Неопределено) Экспорт
	
	УчетНДФЛ.ЗарегистрироватьДокументыКакУчтенныеПриРасчетеНДФЛ("НачислениеЗарплаты", ПараметрыОбновления)
	
КонецПроцедуры

Процедура ЗаполнитьУдержаноОтпусковИБольничных(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 500
		|	БольничныйЛистНДФЛ.Ссылка КАК Ссылка,
		|	СУММА(БольничныйЛистНДФЛ.Налог) КАК Удержано
		|ИЗ
		|	Документ.БольничныйЛист.НДФЛ КАК БольничныйЛистНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	БольничныйЛистНДФЛ.Ссылка
		|
		|ИМЕЮЩИЕ
		|	ЕСТЬNULL(СУММА(БольничныйЛистНДФЛ.Налог), 0) <> БольничныйЛистНДФЛ.Ссылка.Удержано
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 500
		|	ОтпускНДФЛ.Ссылка,
		|	СУММА(ОтпускНДФЛ.Налог)
		|ИЗ
		|	Документ.Отпуск.НДФЛ КАК ОтпускНДФЛ
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтпускНДФЛ.Ссылка
		|
		|ИМЕЮЩИЕ
		|	ЕСТЬNULL(СУММА(ОтпускНДФЛ.Налог), 0) <> ОтпускНДФЛ.Ссылка.Удержано";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 500", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Истина);
	Иначе
		
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.УстановитьПараметрОбновления(ПараметрыОбновления, "ОбработкаЗавершена", Ложь);
		Пока Выборка.Следующий() Цикл
			
			Если Не ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПодготовитьОбновлениеДанных(ПараметрыОбновления, Выборка.Ссылка.Метаданные().ПолноеИмя(), "Ссылка", Выборка.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектДокумента.Удержано = Выборка.Удержано;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектДокумента);
			ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбновлениеДанных(ПараметрыОбновления);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьГрафикиРаботыОрганизаций(ПараметрыОбновления = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	Организации.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА УдалитьПроизводственныеКалендариОрганизаций.ПроизводственныйКалендарь.Код ЕСТЬ NULL
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		ИНАЧЕ УдалитьПроизводственныеКалендариОрганизаций.ПроизводственныйКалендарь
		|	КОНЕЦ КАК ПроизводственныйКалендарь
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Календари КАК Календари
		|		ПО Организации.Ссылка = Календари.ВладелецГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьПроизводственныеКалендариОрганизаций КАК УдалитьПроизводственныеКалендариОрганизаций
		|		ПО Организации.Ссылка = УдалитьПроизводственныеКалендариОрганизаций.Организация
		|ГДЕ
		|	Календари.Ссылка ЕСТЬ NULL";
	
	Если ПараметрыОбновления = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда
		ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ЗавершитьОбработчик(ПараметрыОбновления);
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПродолжитьОбработчик(ПараметрыОбновления);
	
	Пока Выборка.Следующий() Цикл
		
		НовыйГрафикРаботы = НовыйГрафикРаботыОрганизации(Выборка.Ссылка, Выборка.ПроизводственныйКалендарь);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НовыйГрафикРаботы, Истина, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#Область ЗаполнитьТабличнуюЧастьНДФЛВедомостейНаВыплатуЗарплаты

Процедура ЗаполнитьТабличнуюЧастьНДФЛВедомостейНаВыплатуЗарплаты() Экспорт
	
	// Для оплаченных ведомостей 
	// НДФЛ заполняем по движениям платежных документов.
	ЗаполнитьТабличнуюЧастьНДФЛВедомостейНаВыплатуЗарплатыОплаченных();		
	
	// Для проведенных, но не оплаченных ведомостей
	// НДФЛ рассчитываем по данным учета.
	ЗаполнитьТабличнуюЧастьНДФЛВедомостейНаВыплатуЗарплатыНеОплаченных();		
	
	// Не проведенные ведомости не обновляем.
	
КонецПроцедуры	

Процедура ЗаполнитьТабличнуюЧастьНДФЛВедомостейНаВыплатуЗарплатыОплаченных()
	
	КолонкиНДФЛ =
		"ФизическоеЛицо,
		|МесяцНалоговогоПериода,
		|КатегорияДохода,
		|СтавкаНалогообложенияРезидента,
		|КодДохода,
		|Сумма,
		|Подразделение,
		|ДокументОснование,
		|РегистрацияВНалоговомОргане,
		|Сумма";
	
	// Выбираем оплаченные ведомости с пустым НДФЛ
	Запрос = ЗапросВедомостейНаВыплатуЗарплатыСПустымНДФЛ(Истина);
	ВедомостиБезНДФЛ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Получаем выдачу зарплаты по этим ведомостям.
	Запрос.УстановитьПараметр("ВедомостиБезНДФЛ", ВедомостиБезНДФЛ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Регистратор КАК Регистратор,
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость В(&ВедомостиБезНДФЛ)";		
	ОплатаВедомостей = Запрос.Выполнить().Выгрузить();
	ОплатаВедомостей.Индексы.Добавить("Регистратор");

	// Определяем платежные документы, регистрировавшие оплаты по обновляемым ведомостям.
	ПлатежныеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ОплатаВедомостей, "Регистратор", Истина);
	
	// Переносим НДФЛ из платежных документов в ведомости
	
	// Накопитель НДФЛ ведомостей (ведомость - таблица НДФЛ)
	НФДЛВедомостей = Новый Соответствие;
	Ведомость = Документы.ВедомостьНаВыплатуЗарплатыВКассу.СоздатьДокумент();
	Для Каждого ВедомостьБезНДФЛ Из ВедомостиБезНДФЛ Цикл
		 НФДЛВедомостей.Вставить(
		 	ВедомостьБезНДФЛ, 
			Ведомость.НДФЛ.ВыгрузитьКолонки(КолонкиНДФЛ));
	КонецЦикла;
	
	// Из движений платежного документа переносим налог
	// в накопитель НДФЛ оплаченных этим документом ведомостей
	Для Каждого ПлатежныйДокумент Из ПлатежныеДокументы Цикл
		
		// Ведомости и физические лица, зарплата которым выдана текущим документом
		ОплатыПлатежногоДокумента = ОплатаВедомостей.НайтиСтроки(Новый Структура("Регистратор", ПлатежныйДокумент));
		Ведомости = ОбщегоНазначения.ВыгрузитьКолонку(ОплатыПлатежногоДокумента, "Ведомость",      Истина);
		ФизЛица   = ОбщегоНазначения.ВыгрузитьКолонку(ОплатыПлатежногоДокумента, "ФизическоеЛицо", Истина);
		
		// суммы к выплате оплаченных документом ведомостей
		Выплаты = ВзаиморасчетыССотрудниками.ДанныеВедомостейДляОплатыДокументом(ПлатежныйДокумент, Ведомости, ФизЛица, Неопределено);
		Выплаты.Свернуть("Ведомость, ФизическоеЛицо", "СуммаКВыплате");
		Выплаты.Индексы.Добавить("ФизическоеЛицо");
		
		// удержанный документом налог
		НДФЛДокумента = РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
		НДФЛДокумента.Отбор.Регистратор.Установить(ПлатежныйДокумент);
		НДФЛДокумента.Прочитать();
		НДФЛДокумента = НДФЛДокумента.Выгрузить(, СтрЗаменить(КолонкиНДФЛ, Символы.ПС, " ")); // СтрЗаменить - обход ошибки платформы.
		НДФЛДокумента.Индексы.Добавить("ФизическоеЛицо");
		
		// Пополняем налогами физлица накопитель НДФЛ ведомостей
		Для Каждого ФизЛицо Из ФизЛица Цикл
			НДФЛФизлица = НДФЛДокумента.Скопировать(Новый Структура("ФизическоеЛицо", ФизЛицо));
			ВедомостиСФизЛицом = Выплаты.Скопировать(Новый Структура("ФизическоеЛицо", ФизЛицо), "Ведомость, СуммаКВыплате");
			ВедомостиСФизЛицом.Свернуть("Ведомость", "СуммаКВыплате");
			
			Если ВедомостиСФизЛицом.Количество() = 1 Тогда
				// Физлицо в платежном документе проходит по единственной ведомости,
				// весь налог работника можно переносить в эту ведомость.
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
					НДФЛФизлица, 
					НФДЛВедомостей[ВедомостиСФизЛицом[0].Ведомость]);
			Иначе	
				// Физлицо входит в несколько ведомостей, оплаченных одним документом,
				// налог работника необходимо распределить между этими ведомостями.
				// Разносим пропорционально суммам выплат по физлицу в ведомостях.
				// Не строго, но правдоподобно.
				ОбщаяСуммаНалогаФизлица = НДФЛФизлица.Итог("Сумма");
				СуммыНалогаПоВедомостям = 
					ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
						ОбщаяСуммаНалогаФизлица,
						ВедомостиСФизЛицом.ВыгрузитьКолонку("СуммаКВыплате"),
						0);
				Если СуммыНалогаПоВедомостям = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Для Индекс = 0 По ВедомостиСФизЛицом.Количество()-1 Цикл
					НДФЛВедомости = НДФЛФизлица.Скопировать();
					ЗарплатаКадры.РазнестиСуммуПоБазе(СуммыНалогаПоВедомостям[Индекс], НДФЛВедомости, "Сумма", 0);
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(
						НДФЛВедомости, 
						НФДЛВедомостей[ВедомостиСФизЛицом[Индекс].Ведомость]);
					КонецЦикла;
			КонецЕсли		
		КонецЦикла;	
			
	КонецЦикла;	
	
	// Собранный налог переносим в ведомости
	Для Каждого НФДЛВедомости Из НФДЛВедомостей Цикл
		
		Ведомость = НФДЛВедомости.Ключ.ПолучитьОбъект();
		
		Ведомость.УстановитьНДФЛ(НФДЛВедомости.Значение);
		
		// Ведомости могла быть оплачена частично.
		// Для физлиц без налога рассчитываем его.
		
		ФизЛицаВедомости = Ведомость.Состав.ВыгрузитьКолонку("ФизическоеЛицо");
		ФизЛицаНДФЛ      = Ведомость.НДФЛ.ВыгрузитьКолонку("ФизическоеЛицо");
		ФизЛицаБезНалога = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ФизЛицаВедомости, ФизЛицаНДФЛ);
		ФизЛицаБезНалога = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ФизЛицаБезНалога);
		
		Если ФизЛицаБезНалога.Количество() > 0 Тогда
			ЗаполнитьТабличнуюЧастьНДФЛВедомостиНаВыплатуЗарплатыРасчетно(Ведомость, ФизЛицаБезНалога);
		КонецЕсли;	
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Ведомость);
		
	КонецЦикла	
	
КонецПроцедуры	

Процедура ЗаполнитьТабличнуюЧастьНДФЛВедомостейНаВыплатуЗарплатыНеОплаченных()

	// Выбираем не оплаченные ведомости
	Запрос = ЗапросВедомостейНаВыплатуЗарплатыСПустымНДФЛ(Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Ведомость = Выборка.Ссылка.ПолучитьОбъект();
		
		ЗаполнитьТабличнуюЧастьНДФЛВедомостиНаВыплатуЗарплатыРасчетно(Ведомость);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Ведомость);
		
	КонецЦикла	
	
КонецПроцедуры	

Функция ЗапросВедомостейНаВыплатуЗарплатыСПустымНДФЛ(Оплаченные)
	
	// Выбираем для обновления проведенные ведомости,
	// имеющие заполненную ТЧ Зарплата и пустую ТЧ НДФЛ
	// наличие оплаты проверяем в зависимости от параметра вызова.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка КАК Ссылка,
	|	ВедомостьНаВыплатуЗарплаты.Дата КАК Дата
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплаты
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплаты.Проведен
	|	И &Оплаченные В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЕстьОплата
	|			ИЗ
	|				РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|			ГДЕ
	|				ОплатаВедомостей.Ведомость = ВедомостьНаВыплатуЗарплаты.Ссылка)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЕстьЗарплата
	|			ИЗ
	|				Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьЗарплата
	|			ГДЕ
	|				ВедомостьЗарплата.Ссылка = ВедомостьНаВыплатуЗарплаты.Ссылка)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЕстьНДФЛ
	|				ИЗ
	|					Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК ВедомостьСостав
	|				ГДЕ
	|					ВедомостьСостав.Ссылка = ВедомостьНаВыплатуЗарплаты.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка,
	|	ВедомостьНаВыплатуЗарплаты.Дата
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплаты
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплаты.Проведен
	|	И &Оплаченные В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЕстьОплата
	|			ИЗ
	|				РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|			ГДЕ
	|				ОплатаВедомостей.Ведомость = ВедомостьНаВыплатуЗарплаты.Ссылка)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА КАК ЕстьЗарплата
	|			ИЗ
	|				Документ.ВедомостьНаВыплатуЗарплатыВКассу.Зарплата КАК ВедомостьЗарплата
	|			ГДЕ
	|				ВедомостьЗарплата.Ссылка = ВедомостьНаВыплатуЗарплаты.Ссылка)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА КАК ЕстьНДФЛ
	|				ИЗ
	|					Документ.ВедомостьНаВыплатуЗарплатыВКассу.НДФЛ КАК ВедомостьСостав
	|				ГДЕ
	|					ВедомостьСостав.Ссылка = ВедомостьНаВыплатуЗарплаты.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	Если Оплаченные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Оплаченные", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Оплаченные", "НЕ ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьНДФЛВедомостиНаВыплатуЗарплатыРасчетно(Ведомость, ФизическиеЛица = Неопределено)
	
	Если Ведомость.ВводНачальныхДанных Тогда
		Возврат
	КонецЕсли;
	
	// Проверка заполнения обязательных полей, необходимых для расчета НДФЛ
	Если Не	ЗначениеЗаполнено(Ведомость.Организация)
		Или Не ЗначениеЗаполнено(Ведомость.СпособВыплаты)
		Или Не ЗначениеЗаполнено(Ведомость.ПериодРегистрации)
		Или Не ЗначениеЗаполнено(Ведомость.Дата) Тогда
		Возврат
	КонецЕсли;
	
	// Контроль битых ссылок
	ОбязательныеСсылки = Новый Массив;
	ОбязательныеСсылки.Добавить(Ведомость.Организация);
	ОбязательныеСсылки.Добавить(Ведомость.СпособВыплаты);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбязательныеСсылки, "ПометкаУдаления").Количество()
		<> ОбязательныеСсылки.Количество() Тогда
		Возврат
	КонецЕсли;	
	
	Если ФизическиеЛица = Неопределено Тогда
		СтрокиЗарплатыФизЛиц = Неопределено
	Иначе
		СтрокиЗарплатыФизЛиц = Новый Массив;
		Для Каждого СтрокаЗарплаты Из Ведомость.Зарплата Цикл
			Если ФизическиеЛица.Найти(СтрокаЗарплаты.ФизическоеЛицо) <> Неопределено Тогда
				СтрокиЗарплатыФизЛиц.Добавить(СтрокаЗарплаты);
			КонецЕсли
		КонецЦикла;	
	КонецЕсли;	
	
	Зарплата = 
		Ведомость.Зарплата.Выгрузить(
			СтрокиЗарплатыФизЛиц,
			"ФизическоеЛицо,
			|ДокументОснование, 
			|СтатьяФинансирования, 
			|СтатьяРасходов, 
			|КВыплате");
	
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка);
	ПараметрыЗаполнения = МенеджерВедомости.ПараметрыЗаполненияПоОбъекту(Ведомость);
	
	НДФЛ = ВедомостьНаВыплатуЗарплаты.НалогиКУдержанию(
		Зарплата, 
		ПараметрыЗаполнения.ОписаниеОперации, 
		ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ, 
		ПараметрыЗаполнения.Финансирование,
		Ведомость.Ссылка);
		
	Ведомость.УстановитьНДФЛ(НДФЛ, ФизическиеЛица);
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#КонецОбласти
