///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Подключение 1С-Такском".
// ОбщийМодуль.Подключение1СТакскомВызовСервера.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет, доступно ли текущему пользователю использование сервиса
// 1С-Такском в соответствии с текущим режимом работы и правами пользователя.
//
// Возвращаемое значение:
//	Булево - Истина - использование доступно, Ложь - в противном случае.
//
Функция ДоступноИспользованиеСервиса1СТакском() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	ИнтеграцияПодсистемБИП.ИспользоватьСервис1СТакском(
		Отказ);
	Подключение1СТакскомПереопределяемый.ИспользоватьСервис1СТакском(
		Отказ);
	Если Отказ = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает отпечаток указанного сертификата.
//
// Параметры:
//	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//		ссылка справочника сертификатов.
//
// Возвращаемое значение:
//	Строка - отпечаток указанного сертификата;
//	Неопределено - если сертификат не найден в справочнике сертификатов.
//
Функция ОтпечатокСертификата(Сертификат) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "Отпечаток");
	
КонецФункции

// Возвращается двоичные данные и представление сертификата.
//
Функция ДвоичныеДанныеСертификата(Знач СертификатСсылка, ПредставлениеСертификата) Экспорт
	
	ПредставлениеСертификата = Строка(СертификатСсылка);
	ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификатаСлужебная(СертификатСсылка);
	
	Возврат ДвоичныеДанныеСертификата;
	
КонецФункции

#Область ОбработкаБизнесПроцессов

// Создает новый контекст взаимодействия с сервисом ИПП, в рамках которого
// выполняются все команды сервиса ИПП.
//
// Параметры:
//	МестоЗапуска - Строка - имя команды, использованной для запуска
//		механизма ИПП;
//	ПараметрыИПП - Структура - см. функцию ПараметрыСозданияКонтекста().
//	ПовторныйЗапуск - Булево - Истина, если запуск выполняется повторно.
//	СтартовыеПараметры - Структура, Неопределено - параметры, переданные при
//		запуске механизма.
//	ПриНачалеРаботыСистемы - Булево - признак начала бизнес-процесса при
//		при начале работы системы.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ОписаниеСервисаИПП - Структура - см. функцию
//		Подключение1СТакскомКлиентСервер.НовыйОписаниеСервисаИПП();
//	* СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//			только при подключении из клиентского приложения;
//		** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//	* КСКонтекст - Структура - клиент-серверный контекст взаимодействия;
//		** ОсновныеПараметры - Структура - см. функцию НовыйОсновныеПараметрыКонтекста();
//		** КонтекстРегистрации - Структура, Неопределено - контекст регистрации
//			программного продукта;
//		** Логин - Строка - Логин, с которым авторизовался пользователь ИПП;
//		** Пароль - Строка - Пароль,  с которым авторизовался пользователь ИПП;
//		** СессионныеПараметры - Соответствие - сеансовые данные, хранимые и
//			в сеансе взаимодействия с сервисом ИПП;
//		** СетевыеПараметрыИПП - Структура - сетевые параметры ИПП, присутствует
//				только при подключении из клиентского приложения;
//			*** ТаймаутСети - Число - таймаут подключения к сервису ИПП;
//		** ПриНачалеРаботыСистемы - Булево - запуск выполняется при начале работы системы;
//	* СтартовыеПараметрыМеханизма - Структура - параметры, с которыми был
//		выполнен запуск механизма. Копия параметра СтартовыеПараметры.
//
Функция НовыйКонтекстВзаимодействия(
	Знач МестоЗапуска,
	Знач ПовторныйЗапуск,
	Знач СтартовыеПараметры,
	Знач ПриНачалеРаботыСистемы = Ложь)
	
	Результат = Новый Структура;
	
	ПараметрыИПП = ПараметрыСозданияКонтекста(МестоЗапуска, ПриНачалеРаботыСистемы);
	
	СтруктураЗапуска = Подключение1СТакском.ОпределитьВозможностьЗапускаПоМестуИПараметрам(
		МестоЗапуска,
		ПараметрыИПП);
	
	Если СтруктураЗапуска <> Неопределено Тогда
		// Если запуск запрещен, тогда возврат
		Результат.Вставить("УправляющаяСтруктураЗапуска", СтруктураЗапуска);
		Возврат Результат;
	КонецЕсли;
	
	// Создание контекста, используемого на клиенте и на сервере
	КСКонтекст = Новый Структура;
	КСКонтекст.Вставить("КонтекстРегистрации"         , Неопределено);
	КСКонтекст.Вставить("Логин"                       , "");
	КСКонтекст.Вставить("СессионныеПараметры"         , Новый Соответствие);
	КСКонтекст.Вставить("ПриНачалеРаботыСистемы"      , ПриНачалеРаботыСистемы);
	КСКонтекст.Вставить("ВыполненВызовОперацииСервиса", Ложь);
	
	ОсновныеПараметры = НовыйОсновныеПараметрыКонтекста();
	ОсновныеПараметры.МестоЗапуска          = МестоЗапуска;
	ОсновныеПараметры.ИмяWSОпределения      = Подключение1СТакском.АдресWSDLСервисаБизнесПроцессов();
	ОсновныеПараметры.URIСервиса            = Подключение1СТакском.URIСервисаСервисаБизнесПроцессов();
	ОсновныеПараметры.ПовторныйЗапуск       = ПовторныйЗапуск;
	ОсновныеПараметры.ОбращениеССервера     = ПараметрыИПП.ОбращениеССервера;
	
	СетевыеПараметрыИПП = Новый Структура;
	СетевыеПараметрыИПП.Вставить("ТаймаутСети", ПараметрыИПП.ТаймаутСети);
	
	Если ОсновныеПараметры.ОбращениеССервера Тогда
		
		ОсновныеПараметры.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
		
	Иначе
		Результат.Вставить("ОписаниеСервисаИПП" , Неопределено);
		Результат.Вставить("СетевыеПараметрыИПП", СетевыеПараметрыИПП);
	КонецЕсли;
	
	ЗаписатьСтартовыеПараметрыКонтекста(СтартовыеПараметры, КСКонтекст);
	
	КСКонтекст.Вставить("ОсновныеПараметры", ОсновныеПараметры);
	
	Результат.Вставить("КСКонтекст"    , КСКонтекст);
	Результат.Вставить("ФормыОбработки", Новый Соответствие);
	
	// Сохранение в контексте взаимодействия стартовых параметров механизма.
	// Необходимы для повтора подключения из формы ошибки обращения к сервису ИПП.
	Результат.Вставить("СтартовыеПараметрыМеханизма", СтартовыеПараметры);
	
	Если МестоЗапуска = "taxcomGetID" Тогда
		Результат.Вставить("СообщениеОНедоступностиДействия",
			НСтр("ru = 'Получение уникального идентификатора абонента Такском недоступно для этой конфигурации.'"));
	ИначеЕсли МестоЗапуска = "taxcomPrivat" Тогда
		Результат.Вставить("СообщениеОНедоступностиДействия",
			НСтр("ru = 'Работа с личным кабинетом абонента Такском недоступна для этой конфигурации.'"));
	КонецЕсли;
	
	Результат.Вставить("ДополнительныеСтартовыеПараметры", ПараметрыИПП.ДополнительныеСтартовыеПараметры);
	
	Возврат Результат;
	
КонецФункции

// Служебная Функция для определения зарегистрирована ли текущая конфигурация
// в сервисе Интернет-поддержки.
// Предназначена для выполнения на стороне сервера 1С:Предприятия
// в клиент-серверном варианте работы (если взаимодействие с веб-сервисом
// ИПП осуществляется на стороне кластера серверов) или в режиме веб-клиента.
//
// Параметры:
//	ОбращениеССервера - Булево - выходной параметр - Истина, если
//		обращение к сервису ИПП осуществляется с сервера 1С:Предприятия;
//	ПараметрыИПП - Структура - если обращение выполняется из клиента,
//		то в структуре возвращаются необходимые параметры для
//		работы на клиентской стороне (см. функцию СетевыеПараметрыИнтернетПоддержки());
//	ОшибкаОбращенияКВебСервису - Булево - выходной параметр - Истина,
//		если в процессе обращения к сервису ИПП произошла ошибка
//		и "зарегистрированность" конфигурации проверить не удалось.
//
// Возвращаемое значение:
//	Булево - Истина, если конфигурация зарегистрирована в сервисе ИПП,
//		Ложь - если не зарегистрирована или в процессе обращения к сервису ИПП
//		произошла ошибка.
//
Функция КонфигурацияЗарегистрированаВСервисеИПП(ОшибкаОбращенияКВебСервису = Ложь) Экспорт
	
	Возврат Подключение1СТакском.КонфигурацияЗарегистрированаВСервисеИПП(
		ОшибкаОбращенияКВебСервису);
	
КонецФункции

// Возвращает все необходимые для работы с сервисом Интернет-поддержки
// параметры за одно обращение к серверу.
// Для минимизации объема передаваемой между клиентом и сервером информации
// возвращаются только необходимые параметры в зависимости от места вызова
// (клиент или сервер).
//
// Параметры:
//	МестоЗапуска - Строка - кнопка старта механизма ИПП;
//	ПриНачалеРаботыСистемы - Булево - признак начала бизнес-процесса при
//		при начале работы системы.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* МестоЗапуска - Строка - точка входа бизнес-процесса;
//	* ПриНачалеРаботыСистемы - Булево - Истина, если запуск бизнес-процесса
//		выполняется при начале работы системы;
//	* ИспользоватьИнтернетПоддержку - Булево - Истина, если разрешено
//		использование ИПП для текущего режима работы ИБ;
//	* ЗапускРазрешен - Булево - Истина, если текущему пользователю разрешен
//		запуск ИПП;
//	* ИспользоватьИнформационноеОкно - Булево - Истина, если в конфигурации
//		предусмотрено использование информационного окна;
//	* ТаймаутСети - Число - таймаут подключения к сервису ИПП в секундах;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		осуществляется на сервере информационной базы;
//	* НеНапоминатьОбАвторизацииДо - Дата - дата, по которую включительно
//		необходимо отключить напоминание об авторизации в ИПП при
//		старте программы
//	* ОбщиеСтартовыеПараметры - Структура - стартовые параметры механизма,
//		зачитанные из настроек подсистемы.
//
Функция ПараметрыСозданияКонтекста(МестоЗапуска, ПриНачалеРаботыСистемы)
	
	Результат = Новый Структура;
	
	Результат.Вставить("МестоЗапуска"          , МестоЗапуска);
	Результат.Вставить("ПриНачалеРаботыСистемы", ПриНачалеРаботыСистемы);
	Результат.Вставить("ДополнительныеСтартовыеПараметры", Новый Массив);
	
	Результат.Вставить("РаботаВМоделиСервиса", ОбщегоНазначения.РазделениеВключено());
	Если Результат.РаботаВМоделиСервиса Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("ИспользоватьПодключение1СТакском", Истина);
	
	Если Не Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь) Тогда
		Результат.Вставить("ЗапускРазрешен", Ложь);
		Возврат Результат;
	Иначе
		Результат.Вставить("ЗапускРазрешен", Истина);
	КонецЕсли;
	
	Результат.Вставить("ОбращениеССервера", Истина);
	Результат.Вставить("ТаймаутСети"      , 30);
	
	Возврат Результат;
	
КонецФункции

// Определяет состав основных параметров контекста взаимодействия с сервисом
// ИПП.
//
// Возвращаемое значение:
// Структура - структура с полями:
//	* ИмяWSОпределения - Строка - адрес WSDL-описания сервиса ИПП;
//	* URIСервиса - Строка - URI пространства имен сервиса;
//	* МестоЗапуска - Строка - имя кнопки вызова сервиса ИПП;
//	* ПовторныйЗапуск - Булево - Истина, если выполняется повторный запуск
//		механизма ИПП;
//	* ОбращениеССервера - Булево - Истина, если соединение с сервисом ИПП
//		устанавливается на сервере ИБ;
//
Функция НовыйОсновныеПараметрыКонтекста()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяWSОпределения" , "");
	Результат.Вставить("URIСервиса"       , "");
	Результат.Вставить("МестоЗапуска"     , "");
	Результат.Вставить("ПовторныйЗапуск"  , Ложь);
	Результат.Вставить("ОбращениеССервера", Истина);
	
	Возврат Результат;
	
КонецФункции

// Получение команд сервиса ИПП и выполнение команд сервиса или возврат
// управления клиентской стороне.
//
Процедура ОбработкаКомандСервиса(
	КСКонтекст,
	Знач ПараметрыЗапроса,
	КонтекстОбработчика,
	Знач Продолжение,
	СоздаваемыйКонтекстВзаимодействия = Неопределено,
	Знач ДопПараметры = Неопределено) Экспорт
	
	Если Не ПравоИспользованияБизнесПроцессов() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	ПараметрыОбращенияКСервисуИПП     = Неопределено;
	МассивСессионныхПараметровЗапроса = Неопределено;
	ПараметрыСозданияКонтекста        = Неопределено;
	Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Если ДопПараметры.Свойство("ПараметрыОбращенияКСервисуИПП") Тогда
			ПараметрыОбращенияКСервисуИПП = ДопПараметры.ПараметрыОбращенияКСервисуИПП;
		КонецЕсли;
		Если ДопПараметры.Свойство("МассивСессионныхПараметровЗапроса") Тогда
			МассивСессионныхПараметровЗапроса = ДопПараметры.МассивСессионныхПараметровЗапроса;
		КонецЕсли;
		Если ДопПараметры.Свойство("ПараметрыСозданияКонтекста") Тогда
			ПараметрыСозданияКонтекста = ДопПараметры.ПараметрыСозданияКонтекста;
		КонецЕсли;
	КонецЕсли;
	
	Если КСКонтекст = Неопределено Тогда
		
		// Создание контекста взаимодействия с сервисом ИПП при первом запуске
		СоздаваемыйКонтекстВзаимодействия = НовыйКонтекстВзаимодействия(
			ПараметрыСозданияКонтекста.МестоЗапуска,
			ПараметрыСозданияКонтекста.ПовторныйЗапуск,
			ПараметрыСозданияКонтекста.СтартовыеПараметры);
		
		Если СоздаваемыйКонтекстВзаимодействия.Свойство("УправляющаяСтруктураЗапуска")
			ИЛИ НЕ СоздаваемыйКонтекстВзаимодействия.КСКонтекст.ОсновныеПараметры.ОбращениеССервера Тогда
			Возврат;
		КонецЕсли;
		
		КСКонтекст = СоздаваемыйКонтекстВзаимодействия.КСКонтекст;
		
	КонецЕсли;
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ОбработатьОтвет = Истина;
	
	Если ТипЗнч(ПараметрыОбращенияКСервисуИПП) = Тип("Структура") Тогда
		ПараметрыОбращенияКСервисуИПП.Свойство("ОбработатьОтвет", ОбработатьОтвет);
	КонецЕсли;
	
	// При продолжении обращение к веб-сервису не выполняется
	Если НЕ Продолжение Тогда
		
		// Всегда будет хотя бы один параметр запроса
		Если ТипЗнч(ПараметрыЗапроса) <> Тип("Массив") Тогда
			ПараметрыЗапроса = Новый Массив;
		КонецЕсли;
		
		ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			ПараметрыЗапроса,
			МассивСессионныхПараметровЗапроса);
		
		Если СоздаваемыйКонтекстВзаимодействия <> Неопределено Тогда
			Подключение1СТакском.ДобавитьДополнительныеСтартовыеПараметрыЗапроса(
				КСКонтекст,
				СоздаваемыйКонтекстВзаимодействия.ДополнительныеСтартовыеПараметры,
				ПараметрыЗапроса);
		КонецЕсли;
		
		ИспользоватьТаймаутПервогоВызова = Ложь;
		
		ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗапроса,
			КонтекстОбработчика,
			ИспользоватьТаймаутПервогоВызова);
		
		КСКонтекст.ВыполненВызовОперацииСервиса = Истина;
		
		Если ОбработатьОтвет <> Истина Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Пока нет ошибки, препятствующей продолжению выполнения команд,
	// выполнять команды сервера.
	Попытка
		
		// Пока есть команды для выполнения
		Пока КонтекстОбработчика.Команды.Количество() > 0
			И НЕ КонтекстОбработчика.ПроизошлаОшибка
			И НЕ КонтекстОбработчика.ВыполнитьОстановку Цикл
			
			ТекущаяКоманда = КонтекстОбработчика.Команды[0];
			ТипКоманды = Подключение1СТакскомКлиентСервер.ТипКоманды(
				ТекущаяКоманда,
				ОсновныеПараметры.ОбращениеССервера,
				ОсновныеПараметры.МестоЗапуска);
			
			// Определение контекста выполнения - на сервере или на клиенте
			Если ТипКоманды = -1 Тогда
				
				// Если тип команды определить не удалось, тогда извлечь ее из стека и
				// продолжить выполнение.
				КонтекстОбработчика.Команды.Удалить(0);
				Продолжить;
				
			ИначеЕсли ТипКоманды = 0 Тогда
				
				// Извлечение команды из стека и выполнение ее на сервере информационной базы
				КонтекстОбработчика.Команды.Удалить(0);
				ВыполнитьКомандуСервиса(КСКонтекст, ТекущаяКоманда, КонтекстОбработчика);
				
			Иначе
				
				// Возврат управления клиентскому приложению
				Возврат;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПолноеОписаниеОшибки = НСтр("ru = 'Произошло необрабатываемое исключение.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Неизвестная ошибка. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		
	КонецПопытки;
	
	// Если произошла ошибка, тогда завершить сеанс Интернет-поддержки с обработкой ошибок.
	Если КонтекстОбработчика.ПроизошлаОшибка Тогда
		ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика);
	КонецЕсли;
	
КонецПроцедуры

// Обращение к сервису ИПП и добавление команд в стек команд контекста
// обработчика команд.
//
Процедура ДобавитьКомандыСервиса(
	ОсновныеПараметры,
	ДополнительныеПараметры,
	КонтекстОбработчика = Неопределено,
	ИспользоватьТаймаутПервогоВызова = Ложь)
	
	Попытка
		
		ОписаниеСервисаИППНаСервере =
			Подключение1СТакском.НовыйОписаниеСервисаИПП(
				ОсновныеПараметры.ИмяWSОпределения,
				-1);
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при подключении к сервису Интернет-поддержки'");
		КонецЕсли;
		
		Возврат;
		
	КонецПопытки;
	
	ДлительностьПолученияОписанияСервиса =
		ОписаниеСервисаИППНаСервере.ПроксиСервиса.ДлительностьПолученияОписанияСервиса;
	Если ИспользоватьТаймаутПервогоВызова Тогда
		Таймаут = 10 - ДлительностьПолученияОписанияСервиса;
		Если Таймаут < 1 Тогда
			Таймаут = 1;
		КонецЕсли;
	Иначе
		Таймаут = -1; // Использовать таймаут по умолчанию.
	КонецЕсли;
	
	Попытка
		
		Подключение1СТакском.ДобавитьКомандыСервиса(
			ОписаниеСервисаИППНаСервере,
			ДополнительныеПараметры,
			КонтекстОбработчика,
			ОсновныеПараметры,
			Таймаут);
		
	Исключение
		
		Если ТипЗнч(КонтекстОбработчика) = Тип("Структура") Тогда
			КонтекстОбработчика.ПроизошлаОшибка      = Истина;
			КонтекстОбработчика.ПолноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
			КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ОтобразитьФормуОтсутствуетПодключение";
			КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
				НСтр("ru = 'Ошибка при получении данных с сервера Интернет-поддержки.'");
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

// Диспетчер выполнения команд сервиса ИПП на стороне сервера 1С:Предприятия
//
Процедура ВыполнитьКомандуСервиса(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ИмяКоманды = Неопределено;
	СтруктураКоманды.Свойство("ИмяКоманды", ИмяКоманды);
	
	Если ИмяКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "store.get" Тогда
		ВыполнениеКомандыПрочитатьПараметры(
			Новый Структура("КСКонтекст", КСКонтекст),
			СтруктураКоманды,
			КонтекстОбработчика,
			Истина);
		
	ИначеЕсли ИмяКоманды = "store.put" Тогда
		ВыполнениеКомандыЗаписьПараметров(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.delete" Тогда
		УдалитьПараметрыКонтекста(
			КСКонтекст,
			СтруктураКоманды,
			КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "launchservice" Тогда
		ИзменитьБизнесПроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "store.putorganizations" Тогда
		Подключение1СТакском.ЗаписатьСписокОрганизаций(КСКонтекст, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "store.putadressclassifier" Тогда
		Подключение1СТакском.ЗаписатьАдресныйКлассификатор(КСКонтекст, СтруктураКоманды);
		
	ИначеЕсли ИмяКоманды = "performtheaction.getcertificate" Тогда
		ПодготовитьСертификатЭПкОтправке(КСКонтекст, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "performtheaction.getinformationaboutorganization" Тогда
		ПодготовитьДанныеОбОрганизации(КСКонтекст, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "performtheaction.findcertificatefingerprint" Тогда
		ПодготовитьДанныеСертификатаПоОтпечатку(КСКонтекст, КонтекстОбработчика);
		
	ИначеЕсли ИмяКоманды = "setcodesregion" Тогда
		Подключение1СТакскомКлиентСервер.СохранитьВПараметрахКодыРегионов(КСКонтекст, СтруктураКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнение команды "Прочитать параметры". Выполняется чтение параметров
// и отправка их сервису посредством вызова метода process().
//
Процедура ВыполнениеКомандыПрочитатьПараметры(
	КонтекстВзаимодействия,
	СтруктураКоманды,
	КонтекстОбработчика,
	ВыполнениеНаСервере)

	МассивПараметров = СтруктураКоманды.Параметры;
	ПараметрыЗапроса = Новый Массив;

	КСКонтекст        = КонтекстВзаимодействия.КСКонтекст;
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	ИменаСтартовыхПараметров = "";
	Для Каждого Параметр Из МассивПараметров Цикл
		
		ЭтоСтартовыйПараметр = (НРег(Параметр.ОбластьВидимости) = "startup");
		
		ЗначениеПараметра = Подключение1СТакском.ЗначениеСессионногоПараметра(
			КСКонтекст,
			Параметр.Имя);
		
		Если ЗначениеПараметра = Неопределено И ЭтоСтартовыйПараметр Тогда
			ИменаСтартовыхПараметров = ИменаСтартовыхПараметров
				+ ?(ПустаяСтрока(ИменаСтартовыхПараметров), "", ", ")
				+ Параметр.Имя;
		Иначе
			
			ПередаваемыйПараметр = Новый Структура;
			ПередаваемыйПараметр.Вставить("Имя"             , Параметр.Имя);
			ПередаваемыйПараметр.Вставить("Значение"        , ЗначениеПараметра);
			ПередаваемыйПараметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
			ПередаваемыйПараметр.Вставить("ОбластьВидимости", Параметр.ОбластьВидимости);
			ПараметрыЗапроса.Добавить(ПередаваемыйПараметр);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИменаСтартовыхПараметров) Тогда
		ДобавитьЗначенияСтартовыхПараметров(
			ПараметрыЗапроса,
			ИменаСтартовыхПараметров,
			ОсновныеПараметры.ИмяWSОпределения,
			КСКонтекст);
	КонецЕсли;
	
	ДобавитьСессионныеПараметрыКЗапросу(КСКонтекст, ПараметрыЗапроса);
	
	ДобавитьКомандыСервиса(
		ОсновныеПараметры,
		ПараметрыЗапроса,
		КонтекстОбработчика);
	
КонецПроцедуры

// Выполнение команды "Записать параметры".
//
Процедура ВыполнениеКомандыЗаписьПараметров(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)

	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		ЗаписываемыеПараметры = СтруктураКоманды.Параметры;
	Иначе
		ЗаписываемыеПараметры = СтруктураКоманды;
	КонецЕсли;

	ОбщиеСтартовыеПараметры = Новый Соответствие; // Параметры, записываемые в РС
	Для каждого Параметр Из ЗаписываемыеПараметры Цикл

		// Сохранение параметров как сессионных
		Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(
			КСКонтекст,
			Параметр.Имя,
			Параметр.Значение,
			Параметр.ОбластьВидимости,
			ОбщиеСтартовыеПараметры);

	КонецЦикла;

	Если ОбщиеСтартовыеПараметры.Количество() > 0 Тогда
		ЗаписатьОбщиеПараметрыИПП(ОбщиеСтартовыеПараметры);
	КонецЕсли;

КонецПроцедуры

// Удаление параметров контекста. Также удаляются общие стартовые параметры.
//
Процедура УдалитьПараметрыКонтекста(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)

	СессионныеПараметры = КСКонтекст.СессионныеПараметры;

	Если ТипЗнч(СтруктураКоманды) = Тип("Структура") Тогда
		Если СтруктураКоманды.Свойство("Параметры") Тогда
			МассивПараметров = СтруктураКоманды.Параметры;
		Иначе
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(СтруктураКоманды);
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтруктураКоманды) = Тип("Массив") Тогда
		МассивПараметров = СтруктураКоманды;
	Иначе
		Возврат;
	КонецЕсли;

	УдаляемыеИзРС = Новый Соответствие;

	Для каждого ПараметрКоманды Из МассивПараметров Цикл

		Если ПараметрКоманды = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		СессионныеПараметры.Удалить(ПараметрКоманды.Имя);

		// Если параметр стартовый, то он удаляется из регистра параметров ИПП
		Если ПараметрКоманды.Свойство("ОбластьВидимости") И НРег(ПараметрКоманды.ОбластьВидимости) = "startup" Тогда
			УдаляемыеИзРС.Вставить(ПараметрКоманды.Имя, Истина);
		КонецЕсли;

	КонецЦикла;

	Если УдаляемыеИзРС.Количество() > 0 Тогда
		УдалитьОбщиеПараметрыИПП(УдаляемыеИзРС);
	КонецЕсли;

КонецПроцедуры

// Выполняет команду изменения адреса текущего сервиса ИПП.
//
Процедура ИзменитьБизнесПроцесс(КСКонтекст, СтруктураКоманды, КонтекстОбработчика)
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	ПараметрыКоманды = Неопределено;
	СтруктураКоманды.Свойство("Параметры", ПараметрыКоманды);
	
	БизнесПроцесс = Неопределено;
	ИмяURI        = Неопределено;
	
	Для каждого ПараметрКоманды Из ПараметрыКоманды Цикл
		
		Если ПараметрКоманды.Свойство("bp", БизнесПроцесс) Тогда
			ОсновныеПараметры.ИмяWSОпределения = БизнесПроцесс;
		КонецЕсли;
		
		Если ПараметрКоманды.Свойство("nameURI", ИмяURI) Тогда
			ОсновныеПараметры.URIСервиса = ИмяURI;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление номера сессии
	ПараметрыЗапроса = Новый Массив;
	ЗначениеПараметра = Подключение1СТакском.ЗначениеСессионногоПараметра(
		КСКонтекст,
		"session_id");
	
	СтруктураЗначений = Новый Структура;
	СтруктураЗначений.Вставить("Имя"             , "session_id");
	СтруктураЗначений.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
	СтруктураЗначений.Вставить("Значение"        , ЗначениеПараметра);
	СтруктураЗначений.Вставить("ОбластьВидимости", "sessionParameter");
	
	ПараметрыЗапроса.Добавить(СтруктураЗначений);
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	// Изменение бизнес-процесса на веб-сервере.
	// Будет создано новое подключение к сервису.
	ДобавитьКомандыСервиса(ОсновныеПараметры, ПараметрыЗапроса, КонтекстОбработчика);
	
КонецПроцедуры

// Завершение сеанса Интернет-поддержки на стороне сервера 1С:Предприятия.
//
Процедура ЗавершитьСеансИнтернетПоддержки(КСКонтекст, КонтекстОбработчика) Экспорт
	
	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
	
	НомерКоманды = 0;
	Пока НомерКоманды < КонтекстОбработчика.ДействияПриОшибкеДляСервера.Количество() Цикл
		
		ДействиеВыполнено = Ложь;
		Действие = КонтекстОбработчика.ДействияПриОшибкеДляСервера[НомерКоманды];
		Если Действие = "СоздатьЗаписьВЖурналеРегистрации" Тогда
			
			Если НЕ ПустаяСтрока(КонтекстОбработчика.ПолноеОписаниеОшибки) Тогда
				ЗаписатьОшибкуВЖурналРегистрации(КонтекстОбработчика.ПолноеОписаниеОшибки);
			КонецЕсли;
			
			ДействиеВыполнено = Истина;
			
		ИначеЕсли Действие = "ПрерватьБизнесПроцесс" Тогда
			
			Если ОсновныеПараметры.ОбращениеССервера Тогда
				ЗавершитьБизнесПроцесс(КСКонтекст);
				ДействиеВыполнено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДействиеВыполнено Тогда
			КонтекстОбработчика.ДействияПриОшибкеДляСервера.Удалить(НомерКоманды);
		Иначе
			НомерКоманды = НомерКоманды + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если какие-либо действия не были выполнены на сервере, тогда они будут возвращены
	// на клиентскую сторону для дальнейшего выполнения.
	
КонецПроцедуры

// Отправка оповещения сервису ИПП о завершении сеанса ИПП.
//
Процедура ЗавершитьБизнесПроцесс(КСКонтекст)
	
	Попытка
		
		ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;
		
		ПараметрыЗакрытияБП = Новый Массив;
		ПараметрыЗакрытияБП.Добавить(Новый Структура("Имя, Значение", "CloseBP", "true"));
		
		ДобавитьСессионныеПараметрыКЗапросу(
			КСКонтекст,
			ПараметрыЗакрытияБП);
		
		ДобавитьКомандыСервиса(
			ОсновныеПараметры,
			ПараметрыЗакрытияБП,
			Неопределено);
		
	Исключение
		// Обработка ответа сервиса не требуется, т.к. сервер просто оповещается
		// о закрытии бизнес-процесса для освобождения ресурсов.
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Сохранение стартовых параметров при в сессионных параметрах при запуске ИПП
//
Процедура ЗаписатьСтартовыеПараметрыКонтекста(Знач СтартовыеПараметрыСтруктура, КСКонтекст)
	
	Если СтартовыеПараметрыСтруктура <> Неопределено Тогда
		
		Для каждого ПараметрВСтруктуре Из СтартовыеПараметрыСтруктура Цикл
			
			Параметр = Подключение1СТакскомКлиентСервер.НовыйПараметрИПП(
				ПараметрВСтруктуре.Ключ,
				ПараметрВСтруктуре.Значение,
				"startUp");
			
			КСКонтекст.СессионныеПараметры.Вставить(ПараметрВСтруктуре.Ключ, Параметр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись общих стартовых параметров.
//
Процедура ЗаписатьОбщиеПараметрыИПП(Знач ОбщиеПараметры)
	
	// Проверка прав.
	Если Не Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для записи параметров Интернет-поддержки.'");
	КонецЕсли;
	
	// Запись параметров
	УстановитьПривилегированныйРежим(Истина);
	ЗаписатьОбщиеПараметрыИППСлужебная(ОбщиеПараметры);
	
КонецПроцедуры

// Удаление общих стартовых параметров.
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров.
//
Процедура УдалитьОбщиеПараметрыИПП(Знач УдаляемыеИзРС)
	
	// Проверка прав.
	Если Не Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав для записи параметров Интернет-поддержки.'");
	КонецЕсли;
	
	// Запись параметров
	УстановитьПривилегированныйРежим(Истина);
	УдалитьОбщиеПараметрыИППСлужебная(УдаляемыеИзРС);
	
КонецПроцедуры

// Возвращает ссылку на элемент справочника сертификатов по отпечатку
// сертификата.
//
// Параметры:
//	Отпечаток - Строка - отпечаток сертификата;
//
// Возвращаемое значение:
//	СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования - ссылка
//		на найденный по отпечатку сертификат;
//	Неопределено - если сертификат не найден по отпечатку.
//
Функция НайтиСертификатПоОтпечатку(Отпечаток)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Отпечаток = &Отпечаток");
	
	Запрос.УстановитьПараметр("Отпечаток", Отпечаток);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

// Записывает в сессионные параметры контекста двоичные данные сертификата пользователя в
//	виде Base64-строки.
//
Процедура ПодготовитьСертификатЭПКОтправке(КСКонтекст, КонтекстОбработчика)
	
	// При старте механизма сертификат был записан в виде строки внутреннего представления
	// в регистр как стартовый параметр ЭД в процедуре СохранитьСтартовыеПараметрыЭД.
	
	// Получение ссылки сертификата и его двоичных данных
	СертификатЭП = Подключение1СТакском.ЗначениеСессионногоПараметра(
		КСКонтекст,
		"IDCertificateED");
	
	Если СертификатЭП = Неопределено Тогда
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить двоичные данные сертификата. Сертификат не обнаружен в списке параметров.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		Возврат;
		
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ДвоичныеДанныеСертификатаСлужебная(СертификатЭП);
	Если ДвоичныеДанныеСертификата = Неопределено Тогда
		
		СообщениеДляЖурналаРегистрации = НСтр("ru = 'Ошибка при получении двоичных данных сертификата. Двоичные данные сертификата отсутствуют, либо сертификат был удален.'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СообщениеДляЖурналаРегистрации, СертификатЭП);
		
		КонтекстОбработчика.ПроизошлаОшибка                = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки           = СообщениеДляЖурналаРегистрации;
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Ошибка при получении данных сертификата. Подробнее см. в журнале регистрации.'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		Возврат;
		
	КонецЕсли;
	
	// Запись в регистр двоичных данных сертификата для отправки на сервер
	СтрокаBase64 = Base64Строка(ДвоичныеДанныеСертификата);
	
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(
		КСКонтекст,
		"certificateED",
		СтрокаBase64);
	
КонецПроцедуры

// Записывает в журнал регистрации описание ошибки
// с именем события "Интернет-поддержка пользователей.Ошибка".
//
// Параметры:
//	СообщениеОбОшибке - Строка - строковое представление ошибки.
//	Данные - Произвольный - данные, к которым относится сообщение об ошибке.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке, Данные = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		Данные,
		СообщениеОбОшибке);
	
КонецПроцедуры

// Возвращается имя события журнала регистрации для записи ошибок
// Интернет-поддержки пользователей.
//
// Возвращаемое значение:
//	Строка - имя события ошибки Интернет-поддержки.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Подключение 1С-Такском'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Подготавливает и сохраняет в сессионных параметрах сведения об организации.
//
Процедура ПодготовитьДанныеОбОрганизации(КСКонтекст, КонтекстОбработчика)
	
	// При старте механизма ссылка на организацию была записана в виде строки
	// внутреннего представления как стартовый параметр ЭД.
	
	Организация = Подключение1СТакском.ЗначениеСессионногоПараметра(КСКонтекст,
		"IDOrganizationED");
	
	Если Организация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхОбОрганизации = Новый Структура;
	
	Попытка
		ИнтеграцияПодсистемБИП.ЗаполнитьРегистрационныеДанныеОрганизации(
			Организация,
			СтруктураДанныхОбОрганизации);
		Подключение1СТакскомПереопределяемый.ЗаполнитьРегистрационныеДанныеОрганизации(
			Организация,
			СтруктураДанныхОбОрганизации);
	Исключение
		
		КонтекстОбработчика.ПроизошлаОшибка = Истина;
		КонтекстОбработчика.ПолноеОписаниеОшибки =
			НСтр("ru = 'Не удалось получить регистрационные данные организации.'")
			+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("СоздатьЗаписьВЖурналеРегистрации");
		КонтекстОбработчика.ДействияПриОшибкеДляСервера.Добавить("ПрерватьБизнесПроцесс");
		
		КонтекстОбработчика.ПользовательскоеОписаниеОшибки =
			НСтр("ru = 'Ошибка при получении данных организации.
				 |Подробнее см. в журнале регистрации'");
		КонтекстОбработчика.ДействиеПриОшибкеДляКлиента = "ПоказатьСообщение";
		Возврат;
		
	КонецПопытки;
	
	Если СтруктураДанныхОбОрганизации = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс          = "";
	Регион          = "";
	Район           = "";
	Город           = "";
	НаселенныйПункт = "";
	Улица           = "";
	Дом             = "";
	Корпус          = "";
	Квартира        = "";
	Телефон         = "";
	Наименование    = "";
	ИНН             = "";
	КПП             = "";
	ОГРН            = "";
	КодИМНС         = "";
	ЮрФизЛицо       = "";
	Фамилия         = "";
	Имя             = "";
	Отчество        = "";
	
	СтруктураДанныхОбОрганизации.Свойство("Индекс"         , Индекс);
	СтруктураДанныхОбОрганизации.Свойство("Регион"         , Регион);
	СтруктураДанныхОбОрганизации.Свойство("Район"          , Район);
	СтруктураДанныхОбОрганизации.Свойство("Город"          , Город);
	СтруктураДанныхОбОрганизации.Свойство("НаселенныйПункт", НаселенныйПункт);
	СтруктураДанныхОбОрганизации.Свойство("Улица"          , Улица);
	СтруктураДанныхОбОрганизации.Свойство("Дом"            , Дом);
	СтруктураДанныхОбОрганизации.Свойство("Корпус"         , Корпус);
	СтруктураДанныхОбОрганизации.Свойство("Квартира"       , Квартира);
	СтруктураДанныхОбОрганизации.Свойство("Телефон"        , Телефон);
	СтруктураДанныхОбОрганизации.Свойство("Наименование"   , Наименование);
	СтруктураДанныхОбОрганизации.Свойство("ИНН"            , ИНН);
	СтруктураДанныхОбОрганизации.Свойство("КПП"            , КПП);
	СтруктураДанныхОбОрганизации.Свойство("ОГРН"           , ОГРН);
	СтруктураДанныхОбОрганизации.Свойство("КодИМНС"        , КодИМНС);
	СтруктураДанныхОбОрганизации.Свойство("ЮрФизЛицо"      , ЮрФизЛицо);
	СтруктураДанныхОбОрганизации.Свойство("Фамилия"        , Фамилия);
	СтруктураДанныхОбОрганизации.Свойство("Имя"            , Имя);
	СтруктураДанныхОбОрганизации.Свойство("Отчество"       , Отчество);
	
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "postindexED", Индекс);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressregionED", Регион);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addresscoderegionED", "");
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addresstownshipED",
		Район);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addresscityED", Город);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addresslocalityED",
		НаселенныйПункт);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressstreetED", Улица);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressbuildingED", Дом);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addresshousingED",
		Корпус);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст,
		"addressapartmentED",
		Квартира);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "addressphoneED", Телефон);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "agencyED", Наименование);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "orgindED", ЮрФизЛицо);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "innED", ИНН);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "kppED", КПП);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "ogrnED", ОГРН);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "codeimnsED", КодИМНС);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "lastnameED", Фамилия);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "firstnameED", Имя);
	Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(КСКонтекст, "middlenameED", Отчество);
	
КонецПроцедуры

// Поиск сертификата по отпечатку, хранимому в сессионных параметрах
// и запись ссылки а сертификат в сессионные параметры.
//
Процедура ПодготовитьДанныеСертификатаПоОтпечатку(КСКонтекст, КонтекстОбработчика)
	
	// Отпечаток сертификата должен быть передан в сессионные параметры
	
	ОтпечатокСертификата = Подключение1СТакском.ЗначениеСессионногоПараметра(
		КСКонтекст,
		"certificatefingerprintED");
	
	СертификатЭП = Неопределено;
	Если ОтпечатокСертификата <> Неопределено Тогда
		СертификатЭП = НайтиСертификатПоОтпечатку(ОтпечатокСертификата);
	КонецЕсли;
	
	Если СертификатЭП <> Неопределено Тогда
		Подключение1СТакскомКлиентСервер.ЗаписатьПараметрКонтекста(
			КСКонтекст,
			"IDCertificateED",
			СертификатЭП);
	КонецЕсли;
	
КонецПроцедуры

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Выполняет запись общих стартовых параметров.
//
Процедура ЗаписатьОбщиеПараметрыИППСлужебная(Знач ОбщиеПараметры)

	Логин  = Неопределено;
	Пароль = Неопределено;

	ИдентификаторПодсистемы = ИнтернетПоддержкаПользователей.ИдентификаторПодсистемы();

	// Запись выполняется в транзакции, т.к. данные (например, пара Логин-Пароль)
	// должны зачитываться неделимо другими механизмами.
	НачатьТранзакцию();
	Попытка
		
		Для каждого КлючЗначение Из ОбщиеПараметры Цикл
			Если КлючЗначение.Ключ = "login" Тогда
				Логин = КлючЗначение.Значение;
			ИначеЕсли КлючЗначение.Ключ = "password" Тогда
				Пароль = КлючЗначение.Значение;
			Иначе
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(
					ИдентификаторПодсистемы,
					КлючЗначение.Значение,
					КлючЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;

	Если Логин <> Неопределено И Пароль <> Неопределено Тогда
		ИнтернетПоддержкаПользователей.СлужебнаяСохранитьДанныеАутентификации(
			Новый Структура("Логин, Пароль", Логин, Пароль));
	КонецЕсли;

КонецПроцедуры

// В вызывающем коде должны быть проверены права пользователя и установлен
// привилегированный режим.
// Удаление общих стартовых параметров.
//
// Параметры:
//	УдаляемыеИзРС - Массив - массив строк - имена удаляемых параметров.
//
Процедура УдалитьОбщиеПараметрыИППСлужебная(Знач УдаляемыеИзРС)
	
	УдаленыДанныеАутентификации = Ложь;
	ИДПодсистемы = ИнтернетПоддержкаПользователей.ИдентификаторПодсистемы();
	НачатьТранзакцию();
	Попытка
		
		Для Каждого КлючЗначение Из УдаляемыеИзРС Цикл
			Если КлючЗначение.Ключ = "login" Или КлючЗначение.Ключ = "password" Тогда
				УдаленыДанныеАутентификации = Истина;
			Иначе
				ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(ИДПодсистемы, КлючЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если УдаленыДанныеАутентификации Тогда
		ИнтернетПоддержкаПользователей.СлужебнаяСохранитьДанныеАутентификации(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает Истина, если у текущего пользователя есть право записи параметров ИПП.
// Ложь - в противном случае.
//
Функция ПравоИспользованияБизнесПроцессов()
	
	Возврат Пользователи.РолиДоступны("ИспользованиеСервиса1СТакском", , Ложь);
	
КонецФункции

Процедура ДобавитьЗначенияСтартовыхПараметров(ПараметрыЗапроса, ИменаСтартовыхПараметров, ИмяWSОпределения, КСКонтекст)
	
	Если ПустаяСтрока(ИменаСтартовыхПараметров) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоИспользованияБизнесПроцессов() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеИПП = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		ИнтернетПоддержкаПользователей.ИдентификаторПодсистемы(),
		ИменаСтартовыхПараметров);
	
	Если СтрНайти(ИменаСтартовыхПараметров, ",") > 0 Тогда
		
		Для Каждого КлючЗначение Из ДанныеИПП Цикл
			
			ПередаваемыйПараметр = Новый Структура;
			ПередаваемыйПараметр.Вставить("Имя"             , КлючЗначение.Ключ);
			ПередаваемыйПараметр.Вставить("Значение"        , КлючЗначение.Значение);
			ПередаваемыйПараметр.Вставить("БизнесПроцесс"   , ИмяWSОпределения);
			ПередаваемыйПараметр.Вставить("ОбластьВидимости", "startup");
			ПараметрыЗапроса.Добавить(ПередаваемыйПараметр);
			
			Если НРег(СокрЛП(КлючЗначение.Ключ)) <> "password" Тогда
				СессионныйПараметр = Подключение1СТакскомКлиентСервер.НовыйПараметрИПП(
					КлючЗначение.Ключ,
					КлючЗначение.Значение,
					"startup");
				КСКонтекст.СессионныеПараметры.Вставить(КлючЗначение.Ключ, СессионныйПараметр);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПередаваемыйПараметр = Новый Структура;
		ПередаваемыйПараметр.Вставить("Имя"             , ИменаСтартовыхПараметров);
		ПередаваемыйПараметр.Вставить("Значение"        , ДанныеИПП);
		ПередаваемыйПараметр.Вставить("БизнесПроцесс"   , ИмяWSОпределения);
		ПередаваемыйПараметр.Вставить("ОбластьВидимости", "startup");
		ПараметрыЗапроса.Добавить(ПередаваемыйПараметр);
		
		Если НРег(СокрЛП(ИменаСтартовыхПараметров)) <> "password" Тогда
			СессионныйПараметр = Подключение1СТакскомКлиентСервер.НовыйПараметрИПП(
				ИменаСтартовыхПараметров,
				ДанныеИПП,
				"startup");
			КСКонтекст.СессионныеПараметры.Вставить(ИменаСтартовыхПараметров, СессионныйПараметр);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает двоичные данные сертификата.
//
// Параметры:
//	Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//		ссылка справочника сертификатов.
//
// Возвращаемое значение:
//	ДвоичныеДанные - двоичные данные сертификата;
//	Неопределено - если сертификат не обнаружен в справочнике сертификатов.
//
Функция ДвоичныеДанныеСертификатаСлужебная(Сертификат)
	
	ДанныеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сертификат, "ДанныеСертификата");
	Возврат ?(ДанныеСертификата = Неопределено, Неопределено, ДанныеСертификата.Получить());
	
КонецФункции

// Добавление сессионных параметров к параметрам запроса при вызове операции
// process() сервиса ИПП.
//
Процедура ДобавитьСессионныеПараметрыКЗапросу(
	КСКонтекст,
	ПараметрыЗапроса,
	ИменаСессионныхПараметров = Неопределено)

	Если ПараметрыЗапроса = Неопределено Тогда
		ПараметрыЗапроса = Новый Массив;
	КонецЕсли;

	ОсновныеПараметры = КСКонтекст.ОсновныеПараметры;

	ИдентификаторСеансаДобавлен = Ложь;
	Если ИменаСессионныхПараметров <> Неопределено Тогда

		Для каждого ИмяПараметра Из ИменаСессионныхПараметров Цикл

			ЗначениеПараметра = Подключение1СТакском.ЗначениеСессионногоПараметра(КСКонтекст, ИмяПараметра);

			СессионныйПараметр = Новый Структура;
			СессионныйПараметр.Вставить("Имя"             , ИмяПараметра);
			СессионныйПараметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
			СессионныйПараметр.Вставить("Значение"        , ЗначениеПараметра);
			СессионныйПараметр.Вставить("ОбластьВидимости", "sessionParameter");

			ПараметрыЗапроса.Добавить(СессионныйПараметр);

			Если ИмяПараметра = "session_id" Тогда
				ИдентификаторСеансаДобавлен = Истина;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Если НЕ ИдентификаторСеансаДобавлен Тогда

		ИдентификаторСеансаИПП = Подключение1СТакском.ЗначениеСессионногоПараметра(КСКонтекст, "session_id");

		СессионныйПараметр = Новый Структура;
		СессионныйПараметр.Вставить("Имя"             , "session_id");
		СессионныйПараметр.Вставить("БизнесПроцесс"   , ОсновныеПараметры.ИмяWSОпределения);
		СессионныйПараметр.Вставить("Значение"        , ИдентификаторСеансаИПП);
		СессионныйПараметр.Вставить("ОбластьВидимости", "sessionParameter");

		ПараметрыЗапроса.Добавить(СессионныйПараметр);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти