
Процедура ГЗ_ВыполнитьОбработкуПо223ФЗ() Экспорт 
	
	ГЗ_223ФЗ_ЗагрузитьФайлыZIPсFTP();
	
	ГЗ_223ФЗ_РаспаковатьФайлыZIP();
	
	//ГЗ_223ФЗ_СформироватьПотокиОбработкиФайловXML();
	ГЗ_223ФЗ_ОбработатьФайлыXML();
КонецПроцедуры

Процедура ГЗ_223ФЗ_ОбработатьФайлыXML() Экспорт
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо223ФЗ.Получить();
	
	ПутьДляОбработанныхФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо223ФЗ.Получить();
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	//Для Сч = 1 По РазмерПорции Цикл
	//	
	//	Индекс = ?(Сч=1,ИндексНачала,Индекс+1);			
	//	НайденныйФайл = НайденныеФайлыXML[Индекс];		
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
		
		ПрочитанныйФайл = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		Если ПрочитанныйФайл.Свойства().Получить("body") <> Неопределено Тогда 
			СтруктураПрочитанныхДанных = ПрочитанныйФайл.body.item;
		Иначе
			СтруктураПрочитанныхДанных = ПрочитанныйФайл;
		КонецЕсли;
		
		НаименованиеПроцедуры = ГЗ_РаботаСXML.ОпределитьНаименованиеИзвещения223ФЗ(СтруктураПрочитанныхДанных);
		
		Если НаименованиеПроцедуры <> Неопределено Тогда 
			ОбъектXDTOСДанными =  СтруктураПрочитанныхДанных[НаименованиеПроцедуры];
			
			//МассивИзвещений.Добавить("purchaseNoticeAEData");
			//МассивИзвещений.Добавить("purchaseNoticeData");
			//МассивИзвещений.Добавить("purchaseNoticeOKData");
			//МассивИзвещений.Добавить("purchaseNoticeOAData");
			//МассивИзвещений.Добавить("purchaseNoticeEPData");
			//МассивИзвещений.Добавить("purchaseNoticeAE94FZData");
			//МассивИзвещений.Добавить("purchaseNoticeKESMBOData");
			//МассивИзвещений.Добавить("purchaseNoticeAESMBOData");
			//МассивИзвещений.Добавить("purchaseNoticeZKESMBOData");
			//МассивИзвещений.Добавить("purchaseNoticeZPESMBOData");
			//МассивИзвещений.Добавить("purchaseContractData");
			//МассивИзвещений.Добавить("purchaseRejectionData");
			
			//Если НаименованиеПроцедуры  = "purchaseNoticeAEData"  Тогда
			//Обязательныереквизиты
			СтруктураРеквизитовДляДокумента = ГЗ_Процедура_purchaseNoticeAEData_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_purchaseNoticeAEData_(ОбъектXDTOСДанными);
			СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
			
			Документы.ГЗ_ИзвещениеОПроведенииЗакупок223ФЗ.СоздатьДокументИзвещение(СтруктураРеквизитовДляДокумента);
			
			
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotification111"  Тогда  
			//	//СтруктураРеквизитовДляДокумента = ГЗ_Процедура_notification111_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_notification111_(ОбъектXDTOСДанными); //Прочие закупки
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsNotificationEF"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsNotificationEF_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_epNotificationEF_(ОбъектXDTOСДанными,НайденныйФайл.Имя);	
			//	СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
			//
			//	Документы.ГЗ_ИзвещениеОПроведенииЗакупок223ФЗ.СоздатьДокументИзвещение(СтруктураРеквизитовДляДокумента);
			//  		
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationOKD"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationOKD_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationOKD_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//	СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
			//
			//	Документы.ГЗ_ИзвещениеОПроведенииЗакупок223ФЗ.СоздатьДокументИзвещение(СтруктураРеквизитовДляДокумента);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationOKOU"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationOKOU_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationOKOU_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationOK"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationOK_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationOK_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationPO"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationPO_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationPO_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationZakA"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationZakA_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationZakA_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationZakKD"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationZakKD_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationZakKD_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationZakKOU"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationZakKOU_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationZakKOU_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationZakK"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationZakK_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationZakK_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationZK"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationZK_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationZK_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationZP"  Тогда  
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationZP_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationZP_(ОбъектXDTOСДанными,НайденныйФайл.Имя);				
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationLotChange"  Тогда  	
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationLotChange_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationLotChange_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//ИначеЕсли  НаименованиеПроцедуры  = "fcsnotificationEP"  Тогда 	
			//	СтруктураРеквизитовДляДокумента = ГЗ_Процедура_fcsnotificationEP_Сервер.СформироватьСтруктуруОбязательныхРеквизитовПоПроцедуре_fcsnotificationEP_(ОбъектXDTOСДанными,НайденныйФайл.Имя);
			//Иначе 
			//	
			//КонецЕсли; 
			ЧтениеXML.Закрыть();
			ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
			
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГЗ_223ФЗ_ПереместитьФайлыXML() Экспорт 
	
	НайденныеФайлыXML = НайтиФайлы(Константы.ГЗ_КаталогХраненияФайловXMLПо223ФЗ.Получить(), "*.xml");
	ПутьДляПереносаФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо223ФЗ.Получить();
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл 
		Попытка
			ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляПереносаФайлов+НайденныйФайл.Имя);
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_223_ПеремещениеФайловXMLВКаталогОбработанных", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Завершено перемещение файлов в папку обработанных");
			
		Исключение
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_223_ПеремещениеФайловXMLВКаталогОбработанных", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Ошибка при перемещении файлов в папку обработанных");
			
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ГЗ_223ФЗ_СформироватьПотокиОбработкиФайловXML() Экспорт 
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо223ФЗ.Получить();
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	ЧислоПотоков = 5;
	
	ЧислоСтрокВТаблице = НайденныеФайлыXML.Количество();
	
	// объем порции данных для обработки каждым потоком 
	
	РазмерПорции = Цел(ЧислоСтрокВТаблице/ЧислоПотоков);
	
	// массив, где будут храниться фоновые задания 
	
	МассивЗаданий = Новый Массив;
	
	Для НомерПотока = 1 По ЧислоПотоков Цикл
		
		// определяем индекс для начала обработки данных данным потоком 
		
		// разные потоки обрабатывают разные части таблицы 
		
		ИндексНачала = (НомерПотока - 1)*РазмерПорции;
		
		Если (НомерПотока = ЧислоПотоков) Тогда
			
			// если это последний поток, то он обрабатывает все оставшиеся данные 
			
			// т.к. число потоков может не быть кратно количеству строк в таблице 
			
			РазмерПорции = ЧислоСтрокВТаблице -(ЧислоПотоков*РазмерПорции)+РазмерПорции;
			
		КонецЕсли;
		
		// определяем массив параметров для процедуры 
		
		НаборПараметров = Новый Массив;
		
		//НаборПараметров.Добавить(НайденныеФайлыXML);
		
		НаборПараметров.Добавить(ИндексНачала);		
		
		НаборПараметров.Добавить(РазмерПорции);		
		
		// запуск фонового задания 		
		
		//ЗапуститьВыполнениеДлительнойОперации("ГЗ_РегламентныеЗадания223ФЗ.ГЗ_223ФЗ_ОбработатьФайлыXML",НаборПараметров, Строка("Обработка файлов XML в потоке №"+НомерПотока),Ложь,Новый УникальныйИдентификатор);  
		Задание = ФоновыеЗадания.Выполнить("ГЗ_РегламентныеЗадания223ФЗ.ГЗ_223ФЗ_ОбработатьФайлыXML",НаборПараметров);
		// добавляем задание в массив, чтобы потом отследить выполнение 		
		
		МассивЗаданий.Добавить(Задание);
	КонецЦикла;
	
	//Если МассивЗаданий.Количество() > 0 Тогда
	//	Попытка
	//		ФоновыеЗадания.ОжидатьЗавершенияВыполнения(МассивЗаданий);
	//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_223_ЗагрузкаДанныхИзXML", 
	//		УровеньЖурналаРегистрации.Информация, , ,
	//		"Загрузка файлов XML по 223 ФЗ завершена");
	//		
	//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_223_ПеремещениеФайловXMLВКаталогОбработанных", 
	//		УровеньЖурналаРегистрации.Информация, , ,
	//		"Начато перемещение файлов в папку обработанных");
	//		ГЗ_223ФЗ_ПереместитьФайлыXML();
	//	Исключение
	//		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ФЗ_223_ПеремещениеФайловXMLВКаталогОбработанных", 
	//		УровеньЖурналаРегистрации.Ошибка, , ,
	//		"Ошибка перемещения файлов в папку обработанных");
	//	КонецПопытки;
	//	МассивЗаданий.Очистить();
	//КонецЕсли;		
КонецПроцедуры

Функция ЗапуститьВыполнениеДлительнойОперации(ИмяЭкспортнойПроцедуры,
	ПараметрыЭкспортнойПроцедуры, НаименованиеЗадания, РежимДлительнойОперации,
	УникальныйИдентификаторЗадания)
	
	ЗаданиеВыполнено = Ложь;
	
	
	// Режим длительной операции.
	//ВремяОжидания = 0.8;
	
	Задание = ФоновыеЗадания.Выполнить(ИмяЭкспортнойПроцедуры, ПараметрыЭкспортнойПроцедуры, , НаименованиеЗадания);
	
	Задание = Задание.ОжидатьЗавершенияВыполнения();//(ВремяОжидания);
	
	УникальныйИдентификаторЗадания = Задание.УникальныйИдентификатор;
	
	// Если операция уже завершилась, то сразу обрабатываем результат.
	СообщениеОбОшибке = Неопределено;
	ЗаданиеВыполнено = ПроверитьВыполнениеЗадания(УникальныйИдентификаторЗадания, СообщениеОбОшибке);
	
	//Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда			
	//	ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
	//КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

// Проверяет завершение длительной операции по идентификатору.
//
// Параметры:
//		ИдентификаторЗадания 	- УникальныйИдентификатор - идентификатор фонового задания.
//		СообщениеОбОшибке	  	- Строка - возвращает сообщение об ошибке.
//
// Возвращаемое значение:
//		Булево - Истина, если длительная операция завершена, в том числе с ошибками.
//
Функция ПроверитьВыполнениеЗадания(ИдентификаторЗадания,
	СообщениеОбОшибке) Экспорт
	
	Если ИдентификаторЗадания = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
		СообщениеОбОшибке = "";
		
	Исключение
		// что-то произошло, нужно сообщить
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выполнить данную операцию. 
		|Подробности см. в Журнале регистрации.
		|" + ОписаниеОшибки() + "'");
		Выполнено = Истина;
		
	КонецПопытки;
	
	Возврат Выполнено;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовКонтрагента()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Наименование");
	СтруктураВозврата.Вставить("НаименованиеПолное");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("Банк");
	СтруктураВозврата.Вставить("БИК");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("КоррСчет");
	СтруктураВозврата.Вставить("БанкДляРасчетов");
	СтруктураВозврата.Вставить("БанкДляРасчетовБИК");
	СтруктураВозврата.Вставить("БанкДляРасчетовКоррСчет");
	СтруктураВозврата.Вставить("ДолжностьРуководителя");
	СтруктураВозврата.Вставить("Руководитель");
	СтруктураВозврата.Вставить("ЮридическоеФизическоеЛицо");
	СтруктураВозврата.Вставить("СвидетельствоДатаВыдачи");
	СтруктураВозврата.Вставить("СвидетельствоСерияНомер");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("АдресРегистрации");
	СтруктураВозврата.Вставить("РеквизитыАдресРегистрации");
	СтруктураВозврата.Вставить("Телефон");
	СтруктураВозврата.Вставить("АдресЭлектроннойПочты");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ПолучитьПлощадкуETP (СтруктураДанных)
	СпрПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.НайтиПоРеквизиту("GZcode", СтруктураДанных.code);
	Если СпрПлощадка.Пустая() Тогда 
		Площадка = СоздатьНовуюПлощадку(СтруктураДанных);
	Иначе
		Площадка = СпрПлощадка;
	КонецЕсли;
	
	Возврат   Площадка;
КонецФункции

Функция СоздатьНовуюПлощадку(СтруктураДанных)
	
	НоваяПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.СоздатьЭлемент();
	НоваяПлощадка.url= СтруктураДанных.url;
	НоваяПлощадка.Наименование = СтруктураДанных.name;
	НоваяПлощадка.GZcode = СтруктураДанных.code;
	НоваяПлощадка.ГЗ_НаименованиеПолное = СтруктураДанных.name;
	НоваяПлощадка.Записать();
	
	Возврат НоваяПлощадка.Ссылка;
КонецФункции

Функция ПолучитьСпособЗакупки (СтруктураДанных)
	СпрСпособЗакупки = Справочники.ГЗ_placingWay_ПодспособОпределенияПоставщика.НайтиПоРеквизиту("GZcode", СтруктураДанных.code);
	Если СпрСпособЗакупки.Пустая() Тогда 
		СпособЗакупки = СоздатьНовыйСпособЗакупки(СтруктураДанных);
	Иначе
		СпособЗакупки = СпрСпособЗакупки;
	КонецЕсли;
	
	Возврат  СпособЗакупки;
КонецФункции

Функция СоздатьНовыйСпособЗакупки(СтруктураДанных)
	
	НовыйСпособЗакупки = Справочники.ГЗ_placingWay_ПодспособОпределенияПоставщика.СоздатьЭлемент();
	НовыйСпособЗакупки.Наименование = СтруктураДанных.name;
	НовыйСпособЗакупки.ГЗ_НаименованиеПолное = СтруктураДанных.name;
	НовыйСпособЗакупки.GZcode = СтруктураДанных.code;
	НовыйСпособЗакупки.Записать();
	
	Возврат НовыйСпособЗакупки.Ссылка;
КонецФункции

Функция ПроверитьТипЗначения (ПроверяемоеЗначение)
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("ОбъектXDTO") Тогда 
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ГЗ_ОбработкаФайловZIP() Экспорт
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ГЗ_ОбработкаФайловZIP);
	ГЗ_223ФЗ_РаспаковатьФайлы();
КонецПроцедуры

Процедура ГЗ_223ФЗ_ЗагрузитьФайлыZIPсFTP() Экспорт
	//ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ГЗ_223ФЗ_ЗагрузитьФайлыZIPсFTP);
	
	ГЗ_223ФЗ_НайтиФайлыНаFTP_Сервере();
КонецПроцедуры

Процедура ГЗ_223ФЗ_НайтиФайлыНаFTP_Сервере() Экспорт 
	АдресСайта = "ftp.zakupki.gov.ru" ;
	Порт = 21;
	Логин = "fz223free";
	Пароль = "fz223free";
	ИмяКаталога = "/out/published";///<регион>/*Notice*/daily";
	ГодПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) ;
	МесяцПоиска = Строка(формат(Месяц(ТекущаяДата()),"ЧГ=0"));
	ДеньПоиска =  Строка(формат(День(ТекущаяДата()),"ЧГ=0")-1);
	
	ЧастьИмениФайлаДляПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) + ?(СтрДлина(МесяцПоиска)=1, "0"+МесяцПоиска, МесяцПоиска)+?(СтрДлина(ДеньПоиска)=1, "0"+ДеньПоиска, ДеньПоиска);
	
	ГодСтрока = СтрЗаменить(Строка(Год(ТекущаяДата())),Символы.НПП,"");
	МесяцСтрока = Формат(Строка(Месяц(ТекущаяДата())),"ЧГ=0");
	ДеньСтрока = Формат(Строка(День(ТекущаяДата())-1),"ЧГ=0");
	
	СтрокаПоискаТекущаяДата = ГодСтрока + ?(СтрДлина(МесяцСтрока)=1, "0"+МесяцСтрока, МесяцСтрока) + ?(СтрДлина(ДеньСтрока)=1, "0"+ДеньСтрока, ДеньСтрока);	
	
	
	НачалоПериодаОбработкиФайлов = ТекущаяДата()-(60*60*30)*2; //регламентное на 06-00, обрабатываются файлы после 00-01 вчерашнего числа
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль,,Истина,900,,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	КаталогиПапокОбластей = FTPСоединение.НайтиФайлы(ИмяКаталога+"/*");	
	
	ГодДляПоиска   = Формат(Год(ТекущаяДата()), "ЧГ=0");
	МесяцДляПоиска = Формат(Месяц(ТекущаяДата()), "ЧГ=0");
	ДеньДляПоиска  = Формат(День(ТекущаяДата()-86400), "ЧГ=0");
	
	ЗначениеПоискаИмениФайла = ГодДляПоиска+?(СтрДлина(МесяцДляПоиска)=2, МесяцДляПоиска, "0"+МесяцДляПоиска)+?(СтрДлина(ДеньДляПоиска)=2, ДеньДляПоиска, "0"+ДеньДляПоиска); 
	
	Для Каждого КаталогФТП Из КаталогиПапокОбластей Цикл
		Если КаталогФТП.Расширение = "" Тогда 
			СписокПапокВКаталогеОбласти =FTPСоединение.НайтиФайлы(КаталогФТП.ПолноеИмя+"/"+"*"+"Notice"+"*");
			Для Каждого ПапкаИзКаталога Из СписокПапокВКаталогеОбласти Цикл
				ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/daily/","*"+ ЗначениеПоискаИмениФайла+ "*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);
				Для Каждого ФайлИзМассива Из ПоискФайловДляЗагрузки Цикл
					Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
						Попытка
							FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо223ФЗ.Получить() + ФайлИзМассива.Имя);
						Исключение
							ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
							УровеньЖурналаРегистрации.Ошибка, , ,
							"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;				
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ГЗ_223ФЗ_РаспаковатьФайлыZIP() Экспорт
	ГЗ_223ФЗ_РаспаковатьФайлы();
КонецПроцедуры

Процедура ГЗ_223ФЗ_РаспаковатьФайлы() Экспорт
	НайдФайлы = НайтиФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо223ФЗ.Получить(), "*.zip", Истина);
	Для Каждого ФайлЗип Из НайдФайлы Цикл 
		
		Попытка
			ЧтениеЗипФалов = Новый ЧтениеZipФайла(ФайлЗип.ПолноеИмя);
			ЧтениеЗипФалов.ИзвлечьВсе(Константы.ГЗ_КаталогХраненияФайловXMLПо223ФЗ.Получить());	
			
		Исключение
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Получение файла завершилось с ошибкой. Имя файла: "+ФайлЗип.ПолноеИмя);
		КонецПопытки;
	КонецЦикла;
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо223ФЗ.Получить(), "*.zip");
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловXMLПо223ФЗ.Получить(), "*.sig");
КонецПроцедуры

Процедура Тест(ХДТО)
	Для Каждого СвойствоХДТО Из ХДТО.Свойства() Цикл
		ОбъектПакета_1_ХДТО = ХДТО[СвойствоХДТО.Имя];
		
		Если ТипЗнч(ОбъектПакета_1_ХДТО) = Тип("ОбъектXDTO") Тогда 
			Для Каждого СтрокаПакета_1_ХДТО Из ОбъектПакета_1_ХДТО.Свойства() Цикл
				//ОбъектПакета_1_ХДТО[СтрокаПакета_1_ХДТО.Имя]
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры

Процедура ГЗ_ВыполнитьОбработкуПо44ФЗ() Экспорт
	
	ГЗ_ВыполнитьОбработкуПо223ФЗ();
	
КонецПроцедуры



































