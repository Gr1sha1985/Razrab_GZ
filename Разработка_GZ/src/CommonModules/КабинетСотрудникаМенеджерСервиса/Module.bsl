
#Область СлужебныеПроцедурыИФункции

#Область ФоновыеЗадания

Процедура ПолучитьАбонентовИнтернетПоддержкиФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	Результат = Новый Структура("ИнтернетПоддержкаДоступна,АбонентыИП,СообщениеОбОшибке", Ложь);
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ИнтернетПоддержкаДоступна = Истина;
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Ответ = АбонентыИППользователяИП(Тикет);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.АбонентыИП = Ответ.Абоненты;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗарезервироватьИмяДоменаФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Ответ = ЗарезервироватьИмяДомена(Параметры.ИмяДомена, Параметры.ИдентификаторВладельца);
	ПоместитьВоВременноеХранилище(Ответ, АдресХранилища);

КонецПроцедуры

Процедура СоздатьНовоеПриложениеФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Структура("ОписаниеПриложения,ОтложенноеПодключениеКСервису,СообщениеОбОшибке",Неопределено,Ложь,Неопределено);
	
	ИдентификаторИП 	= Параметры.ИдентификаторИП;
	ОписаниеПриложения 	= Параметры.ОписаниеПриложения;
	
	// Запрос режима создания приложений
	Ответ = РежимСозданияПриложений();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ОтложенноеПодключениеКСервису = Ответ.РежимСоздания = "queue";
	КонецЕсли;
	
	// Создание АбонентаСервиса
	Если Не Отказ Тогда
		КлючиПриложения = Неопределено;
		Ответ = СоздатьАбонентаСервиса(ИдентификаторИП);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			СохранитьКлючиМенеджера(Ответ.Абонент.ИдентификаторКлиента, Ответ.Абонент.СекретКлиента);
			ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Токен");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// Создание Приложения
	Если Не Отказ Тогда
		Ответ = СоздатьНовоеПриложение(ОписаниеПриложения);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.ОписаниеПриложения = Ответ.Приложение;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверкаСозданияПриложенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	// Получение информации о приложении
	Ответ = ИнформацияОПриложении(Параметры.ИдентификаторПриложения, Истина);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		Результат.ОписаниеПриложения = Ответ.ОписаниеПриложения;
		Если Результат.ОписаниеПриложения.Статус <> "working" Или Результат.ОписаниеПриложения.Статус <> "booked" Тогда
			Результат.СообщениеОбОшибке = СтрШаблон("%1 %2",НСтр("ru = 'Статус приложения:'"),Результат.ОписаниеПриложения.Статус);
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура СоздатьИнформационнуюСистемуФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	Результат = Новый Структура("ОписаниеИнформационнойСистемы,СообщениеОбОшибке", Ложь);

	ИдентификаторПриложения = Параметры.ОписаниеПриложения.Идентификатор;
	
	// Создание информационной системы Приложения
	Ответ = СоздатьИнформационнуюСистему(ИдентификаторПриложения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		
		НоваяИС = Ответ.ИнформационнаяСистема;
		Результат.ОписаниеИнформационнойСистемы = НоваяИС;
		
		УстановитьПривилегированныйРежим(Истина);
		КабинетСотрудника.СохранитьКлючиПриложенияВБезопасномХранилище(НоваяИС.ИдентификаторКлиента, НоваяИС.СекретКлиента);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	// обновим функциональность сервиса
	Если Не Отказ Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
		КабинетСотрудника.ОбновитьНастройкиФункциональностиСервиса();
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура СоздатьНовогоАдминистратораПриложенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Результат = Новый Структура("СсылкаДляАдминистратора,СообщениеОбОшибке");
	
	ИдентификаторПриложения = Параметры.ОписаниеПриложения.Идентификатор;
	// Создание администратора
	Ответ = СоздатьАдминистратораПриложения(ИдентификаторПриложения, Параметры.ОписаниеАдминистратора);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
	Иначе
		Результат.СсылкаДляАдминистратора = Ответ.ОписаниеАдминистратора.СсылкаДляАдминистратора;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ИнформацияОСервисеФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Структура("ОписаниеПриложения,Абонент,СервисЗаблокирован,СообщениеОбОшибке");
	
	// Получение информации о приложении
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Ответ = ИнформацияОПриложении(Настройки.ИдентификаторПриложения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ОписаниеПриложения = Ответ.ОписаниеПриложения;
	КонецЕсли;
	
	// Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;	
	КонецЕсли;
	
	// Получение состояния ИС.
	Если Не Отказ Тогда
		ИСДоступна = КабинетСотрудника.СостояниеИнформационнойСистемы();
		Если ИСДоступна <> Неопределено Тогда
			Результат.СервисЗаблокирован = Не ИСДоступна;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОбновлениеСведенийОбОплатеФоновоеЗадание(Параметры, АдресХранилища) Экспорт

	Отказ = Ложь;
	Результат = Новый Структура("Абонент,СервисЗаблокирован,СообщениеОбОшибке");
	
	// Обновление данных тарифа текущего абонента.
	Ответ = ОбновитьДанныеТарифа();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	КонецЕсли;
	
	// Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;	
	КонецЕсли;
	
	// Получение состояния ИС.
	Если Не Отказ Тогда
		ИСДоступна = КабинетСотрудника.СостояниеИнформационнойСистемы();
		Если ИСДоступна <> Неопределено Тогда
			Результат.СервисЗаблокирован = Не ИСДоступна;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);	

КонецПроцедуры

Процедура ОбновитьСвойстваПриложенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	Результат = Новый Структура("ОписаниеПриложения,ОписаниеАдминистратора,СообщениеОбОшибке");
	
	Если ЗначениеЗаполнено(Параметры.ОписаниеПриложения) Тогда
		Ответ = ОбновитьСвойстваПриложения(Параметры.Идентификатор, Параметры.ОписаниеПриложения);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			Результат.ОписаниеПриложения = Ответ.ОписаниеПриложения;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И ЗначениеЗаполнено(Параметры.ОписаниеАдминистратора) Тогда
		
		Отказ = КабинетСотрудника.ОпубликоватьОтветственноеЛицо(Параметры.Ответственный);
		
		Если Не Отказ Тогда
			
			Ответ = ОбновитьАдминистратораПриложения(Параметры.Идентификатор, Параметры.ОписаниеАдминистратора);
			Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
				Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			ИначеЕсли Ответ.АдминистраторИзменен Тогда
				Результат.ОписаниеАдминистратора = Параметры.ОписаниеАдминистратора;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Если ЗначениеЗаполнено(Результат.ОписаниеПриложения) Тогда
			Настройки.НаименованиеПриложения = Результат.ОписаниеПриложения.Наименование;
		КонецЕсли;
		Если ЗначениеЗаполнено(Результат.ОписаниеАдминистратора) Тогда
			Настройки.Ответственный = Параметры.Ответственный;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ИзменитьАбонентаИнтернетПоддержкиФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	// Порядок смены абонента ИП:
	// - получение тикета ИП
	// - получение абонента ИП для пользователя ИП
	// - создание нового абонента сервиса
	// - смена абонента сервиса в приложении
	// - сохранение новых ключей менеджера
	// - обновление данных об оплате.
	
	Отказ = Ложь;
	Результат = Новый Структура("ИнтернетПоддержкаДоступна, Абонент, СервисЗаблокирован, СообщениеОбОшибке");
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Отказ = Истина;
	Иначе
		Результат.ИнтернетПоддержкаДоступна = Истина;
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	// Получение абонента ИП для пользователя ИП.
	ИдентификаторИП = "";
	Если Не Отказ Тогда
		Ответ = АбонентыИППользователяИП(Тикет);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			ИдентификаторИП = Ответ.Абоненты[0].Идентификатор;
		КонецЕсли;
	КонецЕсли;

	// Создание нового абонента сервиса.
	НовыеКлючиМенеджера = Неопределено;
	ИдентификаторАбонентаСервиса = "";
	Если Не Отказ Тогда
		Ответ = СоздатьАбонентаСервиса(ИдентификаторИП);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		Иначе
			НовыеКлючиМенеджера = Новый Структура;
			НовыеКлючиМенеджера.Вставить("ИдентификаторКлиента", Ответ.Абонент.ИдентификаторКлиента);
			НовыеКлючиМенеджера.Вставить("СекретКлиента", Ответ.Абонент.СекретКлиента);
			ИдентификаторАбонентаСервиса = Ответ.Абонент.ИдентификаторАбонентаСервиса;
		КонецЕсли;
	КонецЕсли;
	
	// Смена абонента сервиса в приложении.
	Если Не Отказ Тогда
		Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
		Ответ = СменаАбонентаСервиса(ИдентификаторАбонентаСервиса, Настройки.ИдентификаторПриложения);
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Сохранение новых ключей менеджера.
	Если Не Отказ Тогда
		УстановитьПривилегированныйРежим(Истина);
		СохранитьКлючиМенеджера(НовыеКлючиМенеджера.ИдентификаторКлиента, НовыеКлючиМенеджера.СекретКлиента);
		ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Токен");
		УстановитьПривилегированныйРежим(Ложь);	
	КонецЕсли;
	
	// Обновление данных об оплате. Получение информации об абоненте.
	Если Не Отказ Тогда
		Ответ = ИнформацияОбАбоненте();
		Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Иначе
			Результат.Абонент = Ответ.Абонент;
		КонецЕсли;	
	КонецЕсли;
	
	// Обновление данных об оплате. Получение состояния ИС.
	Если Не Отказ Тогда
		ИСДоступна = КабинетСотрудника.СостояниеИнформационнойСистемы();
		Если ИСДоступна <> Неопределено Тогда
			Результат.СервисЗаблокирован = Не ИСДоступна;
		КонецЕсли;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ОтключениеСервисаФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	ЗаписатьСобытиеОтключениеСервиса(Истина);
	
	// Не обрабатываем ответ сервера.
	УдалениеИнформационнойСистемы();
	ПоместитьВоВременноеХранилище(Истина, АдресХранилища);

КонецПроцедуры

Процедура ЗавершитьСценарийОтложенногоПодключенияФоновоеЗадание(Параметры, АдресХранилища) Экспорт
	
	КабинетСотрудника.ВключитьНастройкиПрограммыПослеПодключенияСервиса();
	АктивироватьТестовыйТариф();

КонецПроцедуры

#КонецОбласти

#Область ВзаимодействиеСМенеджеромСервиса

Процедура ИнициализироватьАбонентаСервиса() Экспорт

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Ответ = ОбновитьАбонента();
		Если Ответ.СообщениеОбОшибке = Неопределено Тогда
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьАбонентСервисаИнициализирован();
		КонецЕсли;
	Иначе
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьАбонентСервисаИнициализирован();
	КонецЕсли;

КонецПроцедуры

Процедура ОтправитьСообщениеОбАктивацииТестовогоТарифа() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не Настройки.ТребуетсяАктивацияТестовогоТарифа Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСообщениеОбАктивацииТестовогоТарифаОтправлено();
		Возврат;
	ИначеЕсли Не Настройки.ТестовыйТарифАктивирован Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОПодключенииТестовогоТарифа();

КонецПроцедуры

Процедура ПолучитьВерсиюПриложения() Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Ответ = ИнформацияОПриложении(Настройки.ИдентификаторПриложения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВерсияПриложения = Ответ.ОписаниеПриложения.Версия;
	ВерсияПриложения = ?(ВерсияПриложения = Неопределено, "", ВерсияПриложения);
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьВерсиюПриложения(ВерсияПриложения);

КонецПроцедуры

#КонецОбласти

#Область ЗапросыКМенеджеруСервиса

// Получает список абонентов интернет-поддержки пользователя интернет-поддержки.
//
// Параметры:
// 		ИдентификаторПользователя - Строка
//
// Возвращаемое значение:
// 		Структура - содержит ключи
// 			* Абоненты - Массив - массив структур с ключами
// 					** Идентификатор - Строка
// 					** Наименование - Строка - наименование абонента для показа пользователю
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция АбонентыИППользователяИП(Тикет)

	Результат = Новый Структура("Абоненты, СообщениеОбОшибке", Новый Массив);
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", 	КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", 	"application/json");
	Заголовки.Вставить("ticket", 		Тикет);
	
	РесурсAPI = "/api/users/subscribers";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200  Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		МассивОбъектов = ПрочитатьJSON(ЧтениеJSON, Истина);
		Для каждого ЭлементМассива Из МассивОбъектов Цикл
			Абонент = АбонентИППоОтветуНаЗапрос(ЭлементМассива);
			Результат.Абоненты.Добавить(Абонент);
		КонецЦикла;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Тикет ИПП не прошел проверку.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru='Ошибка аутентификации пользователя интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет резервирование выбранного имени домена в сервисе.
//
// Параметры:
// 		ИмяДомена - Строка
// 		ИдентификаторВладельца - Строка - определяет для кого резервируется имя.
//
// Возвращаемое значение:
// 		Структура - содержит ключи
// 			* ИмяЗарезервировано - Булево - Истина, если имя зарезервировано.
// 			* Пояснение - Строка, Неопределено - описание причины отказа резервирования.
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке при выполнении резервирования.
//
Функция ЗарезервироватьИмяДомена(ИмяДомена, ИдентификаторВладельца)
	
	Результат = Новый Структура("Зарезервировано, Пояснение, СообщениеОбОшибке", Ложь);
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	// Формируем запрос.
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("ticket", 		Тикет);
	
	РесурсAPI = "/api/hostnames/check";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("hostname", 		ИмяДомена);
	ТелоЗапроса.Вставить("reserve",  		true);
	ТелоЗапроса.Вставить("subscriberID", 	ИдентификаторВладельца);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 201 Тогда
		// Доменное имя доступно.
		Результат.Зарезервировано = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		// Некорректный запрос.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Токен не прошел проверку.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru='Ошибка аутентификации пользователя интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 409 Тогда
		// Доменное имя занято.
		Результат.Пояснение = НСтр("ru='Это имя домена занято, введите другое имя.'");
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет GET запрос для получения режима создания приложений.
Функция РежимСозданияПриложений()
	
	Результат = Новый Структура("РежимСоздания, СообщениеОбОшибке");
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	// Формируем запрос.
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("ticket", 		Тикет);
	
	РесурсAPI = "/api/info/app-creation-mode";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.РежимСоздания = ОбъектОтвета["mode"];
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Токен не прошел проверку.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru='Ошибка аутентификации пользователя интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает абонента сервиса по идентификатору пользователя интернет-поддержки.
//
// Параметры:
// 		ИдентификаторИП - Строка - ключ связи с интернет-поддержкой.
//
// Возвращаемое значение:
// 		Структура - содержит ключи
// 			* АбонентСоздан - Булево
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция СоздатьАбонентаСервиса(ИдентификаторИП)

	Результат = Новый Структура("Абонент,СообщениеОбОшибке");
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("ticket", Тикет);
	
	РесурсAPI = "/api/subscribers/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторИП);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, Истина);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Или Ответ.КодСостояния = 201 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.Абонент = АбонентПоОтветуНаЗапрос(ОбъектОтвета);
		Если Ответ.КодСостояния = 201 Тогда
			// новый абонент
			РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяАктивацияТестовогоТарифа(Истина);
		КонецЕсли;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru='Ошибка аутентификации пользователя интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		СообщениеОбОшибке = НСтр("ru='Абонент интернет-поддержки не найден.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Создает новое приложение в сервисе.
//
// Параметры:
// 		ОписаниеПриложения - Структура - см НовоеОписаниеПриложения.
//
// Возвращаемое значение:
// 		Структура - результат создания приложения
// 			* ПриложениеСоздано - Булево
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция СоздатьНовоеПриложение(ОписаниеПриложения)

	Результат = Новый Структура("Приложение,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъектаПриложение(), ОписаниеПриложения);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, Истина);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 201 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.Приложение = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 409 Тогда
		// Доменное имя не уникально.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Это доменное имя занято, укажите другое имя.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Создает новую информационную систему в приложении сервиса.
//
// Возвращаемое значение:
// 		Структура - результат создания приложения
// 			* Создана - Булево
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция СоздатьИнформационнуюСистему(ИдентификаторПриложения)

	Результат = Новый Структура("ИнформационнаяСистема,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/information-systems";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("name", НСтр("ru='1С:Предприятие'"));
	ТелоЗапроса.Вставить("applicationID", ИдентификаторПриложения);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;

	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 201 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Результат.ИнформационнаяСистема = ИнформационнаяСистемаПоОтветуНаЗапрос(ОбъектОтвета)
		
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибки());
		СообщениеОбОшибке = НСтр("ru='Не найдено приложение сервиса.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция УдалениеИнформационнойСистемы()

	Результат = Новый Структура("ИнформационнаяСистемаУдалена,СообщениеОбОшибке", Ложь);
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	ИдентификаторИС = Настройки.Идентификатор;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/information-systems/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторИС);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "DELETE";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		Результат.ИнформационнаяСистемаУдалена = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// ИС не найдена, считаем что удаление выполнено.
		Результат.ИнформационнаяСистемаУдалена = Истина;
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

// Выполняет GET запрос для получения объекта Приложение.
//
// Параметры:
// 		ИдентификаторПриложения - Строка - идентификатор приложения
//
// Возвращаемое значение:
// 		Структура
// 			* ОписаниеПриложения - Структура, Неопределено - описание структуры см НовоеОписаниеПриложения.
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция ИнформацияОПриложении(ИдентификаторПриложения, РегистрироватьОшибкуСозданияПриложения = Ложь)

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеПриложения = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета);
		
		Если РегистрироватьОшибкуСозданияПриложения Тогда
			СтатусПриложения = Результат.ОписаниеПриложения.Статус;
			Если СтатусПриложения = "stopped" Или СтатусПриложения = "error" Или СтатусПриложения = "deleted" Тогда
				ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, НСтр("ru = 'Не удалось создать приложение.'"));	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru='Сервис с идентификатором %1 не найден.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Выполняет GET запрос для получения объекта Абонент сервиса.
//
// Возвращаемое значение:
// 		Структура
// 			* Абонент - Структура, Неопределено - описание структуры см НовоеОписаниеАбонента.
// 			* СообщениеОбОшибке - Строка, Неопределено - сообщение об ошибке.
//
Функция ИнформацияОбАбоненте()

	Результат = Новый Структура("Абонент,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/subscribers";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "GET";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина, ИменаСвойствСервисаСоЗначениямиДата());
		Результат.Абонент = АбонентПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьДанныеТарифа()

	Результат = Новый Структура("СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/subscribers/plans/updates";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния <> 200 Тогда
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьСвойстваПриложения(ИдентификаторПриложения, ОписаниеПриложения)

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъектаПриложение(), ОписаниеПриложения);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PATCH";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеПриложения = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru='Сервис с идентификатором %1 не найден.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ОбновитьАдминистратораПриложения(ИдентификаторПриложения, ОписаниеАдминистратора)

	Результат = Новый Структура("АдминистраторИзменен,СообщениеОбОшибке", Ложь);
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api//applications/{ID}/administrators";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъектаАдминистратор(), ОписаниеАдминистратора);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PUT";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		Результат.АдминистраторИзменен = Истина;
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru='Сервис с идентификатором %1 не найден.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;	

КонецФункции

Функция ОбновитьАбонента()

	Результат = Новый Структура("Абонент,СообщениеОбОшибке");
	
	Тикет = Неопределено;
	Ответ = ТикетАутентификацииНаПорталеПоддержке();
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Тикет = Ответ.Тикет;
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/subscribers";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("ticket", Тикет);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PATCH";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.Абонент = АбонентПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Токен не прошел проверку.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru='Ошибка аутентификации пользователя интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
		СообщениеОбОшибке = НСтр("ru='Не найден пользователь интернет-поддержки.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура СообщениеОПодключенииТестовогоТарифа()

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Ресурс = "isItsPromocode";
	Иначе
		Ресурс = "isItsTrialPeriod";
	КонецЕсли;
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Возврат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/subscribers";
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить(Ресурс, true);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PATCH";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Возврат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьСообщениеОбАктивацииТестовогоТарифаОтправлено();
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
	ИначеЕсли Ответ.КодСостояния = 403 Тогда
		// Токен не прошел проверку.
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;

КонецПроцедуры

Функция СоздатьАдминистратораПриложения(ИдентификаторПриложения, ОписаниеАдминистратора) Экспорт

	Результат = Новый Структура("ОписаниеАдминистратора,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications/{ID}/administrators";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъектаАдминистратор(), ОписаниеАдминистратора);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "POST";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 201 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеАдминистратора = АдминистраторПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru='Сервис с идентификатором %1 не найден.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция СменаАбонентаСервиса(ИдентификаторАбонентаСервиса, ИдентификаторПриложения)

	Результат = Новый Структура("ОписаниеПриложения,СообщениеОбОшибке");
	
	ПараметрыСоединения = ПараметрыСоединения();
	Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
	
	Токен = Неопределено;
	Ответ = ТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", КабинетСотрудникаПовтИсп.ОписаниеКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	РесурсAPI = "/api/applications/{ID}";
	РесурсAPI = СтрЗаменить(РесурсAPI,"{ID}",ИдентификаторПриложения);
	Запрос = Новый HTTPЗапрос("/"+ПараметрыСоединения.ПутьНаСервере+РесурсAPI, Заголовки);
	
	ТелоЗапроса = Новый Соответствие;
	ТелоЗапроса.Вставить("subscriber", ИдентификаторАбонентаСервиса);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ТелоЗапроса);
	СтрокаТела = ЗаписьJSON.Закрыть();
	Запрос.УстановитьТелоИзСтроки(СтрокаТела);
	
	ИмяМетода = "PATCH";
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
	КонецЕсли;
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Возврат Результат;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Если Ответ.КодСостояния = 401 Тогда
		ОтветПовторногоЗапроса = ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения);
		Если ОтветПовторногоЗапроса.СообщениеОбОшибке <> Неопределено Тогда
			Результат.СообщениеОбОшибке = ОтветПовторногоЗапроса.СообщениеОбОшибке;
			Возврат Результат;
		Иначе
			Ответ = ОтветПовторногоЗапроса.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		Результат.ОписаниеПриложения = ПриложениеПоОтветуНаЗапрос(ОбъектОтвета);
	ИначеЕсли Ответ.КодСостояния = 400 Тогда
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, ОписаниеОшибкиОтветаСервера(Ответ));
		СообщениеОбОшибке = НСтр("ru='Некорректный запрос.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());	
	ИначеЕсли Ответ.КодСостояния = 404 Тогда
		// Приложение не найдено.
		СообщениеОбОшибке = СтрШаблон(НСтр("ru='Сервис с идентификатором %1 не найден.'"), ИдентификаторПриложения);
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	Иначе
		СообщениеОбОшибке = НСтр("ru='Неизвестный ответ сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, Ответ, СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПовторитьЗапросСНовымТокеном(Запрос, ИмяМетода, Соединение, ПараметрыСоединения)
	
	Результат = Новый Структура("Ответ,СообщениеОбОшибке");
	Токен = "";
	
	Ответ = НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		Результат.СообщениеОбОшибке = Ответ.СообщениеОбОшибке;
		Возврат Результат;
	Иначе
		Токен = Ответ.Токен;
	КонецЕсли;
	Запрос.Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	Попытка
		Соединение = НовоеHTTPСоединение(ПараметрыСоединения);
		Если ПараметрыСоединения.ВестиПротокол Тогда
			ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос);
		КонецЕсли;
		Ответ = Соединение.ВызватьHTTPМетод(ИмяМетода, Запрос);
	Исключение
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		ЗаписатьОшибкуВызова(ПараметрыСоединения, ИмяМетода, Запрос, , ОписаниеОшибки());
		Ответ = Неопределено;
	КонецПопытки;
	
	Если ПараметрыСоединения.ВестиПротокол Тогда
		ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, Запрос, Ответ);
	КонецЕсли;
	
	Результат.Ответ = Ответ;
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#Область РаботаСКлючамиМенеджераСервиса

Процедура СохранитьКлючиМенеджера(ИдентификаторКлиента, СекретКлиента)

	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Ключи",ИдентификаторКлиента, "ИдентификаторКлиента");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Ключи",СекретКлиента, "СекретКлиента");
	
КонецПроцедуры

Функция КлючиМенеджера()
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Менеджер.Ключи",
		"ИдентификаторКлиента,СекретКлиента");
	УстановитьПривилегированныйРежим(Ложь);

	Если ДанныеВБезопасномХранилище.ИдентификаторКлиента <> Неопределено
		И ДанныеВБезопасномХранилище.СекретКлиента <> Неопределено Тогда
		Возврат Новый Структура(
			"ИдентификаторКлиента,СекретКлиента",
			ДанныеВБезопасномХранилище.ИдентификаторКлиента,
			ДанныеВБезопасномХранилище.СекретКлиента);
	КонецЕсли;
		
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхАутентификации

Функция ТокенАутентификации(Соединение, ПараметрыСоединения)
	
	Результат = Новый Структура("Токен,СообщениеОбОшибке");
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеВБезопасномХранилище = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(
		"1СКабинетСотрудника.Менеджер.Токен",
		"Токен,СрокГодности");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеВБезопасномХранилище.Токен <> Неопределено
		И ДанныеВБезопасномХранилище.СрокГодности <> Неопределено Тогда
		
		Если ТекущаяУниверсальнаяДатаВМиллисекундах() > ДанныеВБезопасномХранилище.СрокГодности Тогда
			Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
		Иначе
			Результат.Токен = ДанныеВБезопасномХранилище.Токен;
			Возврат Результат;
		КонецЕсли;
		
	Иначе
		Возврат НовыйТокенАутентификации(Соединение, ПараметрыСоединения);
	КонецЕсли;
	
КонецФункции 

Функция НовыйТокенАутентификации(Соединение, ПараметрыСоединения)

	Результат = Новый Структура("Токен,СообщениеОбОшибке");
	
	УстановитьПривилегированныйРежим(Истина);
	КлючиМенеджера = КлючиМенеджера();
	УстановитьПривилегированныйРежим(Ложь);
	Если КлючиМенеджера = Неопределено Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Ошибка аутентификации в сервисе 1С:Кабинет сотрудника. Отсутствуют ключи доступа к менеджеру сервиса'");
		Возврат Результат;
	КонецЕсли;
	
	СтрокаКлючей = ПолучитьДвоичныеДанныеИзСтроки(СтрШаблон("%1:%2", КлючиМенеджера.ИдентификаторКлиента, КлючиМенеджера.СекретКлиента));
	СтрокаBase64 = Base64Строка(СтрокаКлючей);
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
	СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("User-Agent", ЗарплатаКадры.ИмяКлиентскогоПриложения());
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	Заголовки.Вставить("Authorization", СтрШаблон("Basic %1", СтрокаBase64));
	Запрос = Новый HTTPЗапрос("/auth/oidc/token", Заголовки);
	Запрос.УстановитьТелоИзСтроки("grant_type=client_credentials");
		
	Попытка
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	Исключение
		ЗаписатьОшибкуВызова(ПараметрыСоединения, "POST", Запрос, , ОписаниеОшибки());
		СообщениеОбОшибке = НСтр("ru='Не удалось получить ответ от сервера.'");
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, ПодробностиВЖурналеРегистрации());
		Возврат Результат;
	КонецПопытки;
	
	Если Ответ.КодСостояния = 200 Тогда
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		РезультатЧтенияJSON = ПрочитатьJSON(ЧтениеJSON);
		Если РезультатЧтенияJSON.Свойство("id_token") Тогда
			Результат.Токен = РезультатЧтенияJSON["id_token"];
			СрокГодности = ТекущаяУниверсальнаяДатаВМиллисекундах() + 3600*100;
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Токен",Результат.Токен, "Токен");
			ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("1СКабинетСотрудника.Менеджер.Токен",СрокГодности, "СрокГодности");
			УстановитьПривилегированныйРежим(Ложь);	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.Токен) Тогда
		
		Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось получить токен аутентификации.
				|Сервер вернул код:%1
				|%2'"), Ответ.КодСостояния, Ответ.ПолучитьТелоКакСтроку());
		
		ЗаписьЖурналаРегистрации(
			КабинетСотрудника.ИмяСобытияМенеджера(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			Комментарий);
			
		Результат.СообщениеОбОшибке = СтрШаблон("%1 %2",
											НСтр("ru = 'Ошибка аутентификации в сервисе.'"),
											ПодробностиВЖурналеРегистрации());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ТикетАутентификацииНаПорталеПоддержке()

	Результат = Новый Структура("Тикет,СообщениеОбОшибке");
	
	ОтветСервиса = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
		УстановитьПривилегированныйРежим(Истина);
		ОтветСервиса = Модуль.ТикетАутентификацииНаПорталеПоддержки(ИдентификаторСервиса());
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ОтветСервиса = Неопределено Тогда
		Результат.СообщениеОбОшибке = НСтр("ru = 'Интернет-поддержка пользователей недоступна.'");
	Иначе
		Если ПустаяСтрока(ОтветСервиса.КодОшибки) Тогда
			Результат.Тикет = ОтветСервиса.Тикет;
		Иначе
			Результат.СообщениеОбОшибке = ОтветСервиса.СообщениеОбОшибке;
			Если ОтветСервиса.КодОшибки = "ОшибкаСервиса"
				Или ОтветСервиса.КодОшибки = "ОшибкаПодключения"
				Или ОтветСервиса.КодОшибки = "НеизвестнаяОшибка" Тогда
				
				Комментарий = СтрШаблон("%1 %2",
								НСтр("ru = 'Ошибка аутентификации Интернет-поддержки.'"),
								ОтветСервиса.ИнформацияОбОшибке);
								
				ЗаписьЖурналаРегистрации(
					КабинетСотрудника.ИмяСобытияМенеджера(),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					Комментарий);
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаписьСобытийВЖурналРегистрации

// Добавление текстового блока Подробности см. в журнале регистрации.
//
Функция ПодробностиВЖурналеРегистрации()

	Возврат НСтр("ru = 'Подробности см. в журнале регистрации.'");

КонецФункции

Процедура ЗаписатьОшибкуВызова(ПараметрыСоединения, Метод, HTTPЗапрос, HTTPОтвет = Неопределено, ОписаниеОшибки = Неопределено)
	
	ИмяСобытияЖР = КабинетСотрудника.ИмяСобытияМенеджера();
	Сервер = ПараметрыСоединения.Схема + "://" + ПараметрыСоединения.ИмяСервера;
	
	ЗапросТекст = Метод + " " + Сервер + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Заголовок.Ключ = "ticket" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(ТелоОтвета) Тогда
			ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		ОтветТекст = ОтветТекст + Символы.ПС + ОписаниеОшибки;
	КонецЕсли;

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
	
КонецПроцедуры			

Процедура ЗаписатьСобытиеЗапросВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, HTTPЗапрос)

	Сервер = ПараметрыСоединения.Схема + "://" + ПараметрыСоединения.ИмяСервера;
	
	ЗапросТекст = ИмяМетода + " " + Сервер + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Заголовок.Ключ = "ticket" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	ТелоЗапроса = HTTPЗапрос.ПолучитьТелоКакСтроку();

	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ТелоЗапроса);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПротоколЗапрос(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

Процедура ЗаписатьСобытиеОтветВЖурналРегистрации(ПараметрыСоединения, ИмяМетода, HTTPЗапрос, HTTPОтвет, СкрытьКлючи = Ложь)

	Сервер = ПараметрыСоединения.Схема + "://" + ПараметрыСоединения.ИмяСервера;
	
	ЗапросТекст = ИмяМетода + " " + Сервер + HTTPЗапрос.АдресРесурса+ Символы.ПС;
	Для Каждого Заголовок Из HTTPЗапрос.Заголовки Цикл
		ЗначениеЗаголовка = Заголовок.Значение;
		Если Заголовок.Ключ = "Authorization" Тогда
			ЗначениеЗаголовка = "*";
		ИначеЕсли Заголовок.Ключ = "ticket" Тогда
			ЗначениеЗаголовка = "*";
		КонецЕсли;
		ЗапросТекст = ЗапросТекст + Символы.ПС + Заголовок.Ключ + ": " + ЗначениеЗаголовка;
	КонецЦикла;
	
	Если HTTPОтвет = Неопределено Тогда
		ОтветТекст = НСтр("ru = 'Не удалось получить ответ от сервера.'");
	Иначе
		ОтветТекст = СтрШаблон(НСтр("ru = 'Сервер вернул код состояния: %1'"), HTTPОтвет.КодСостояния);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		Если ЗначениеЗаполнено(ТелоОтвета) Тогда
			Если СкрытьКлючи Тогда
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ТелоОтвета);
				ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
				Если ЗначениеЗаполнено(ОбъектОтвета["clientID"]) Тогда
					ОбъектОтвета.Вставить("clientID", "*");
				КонецЕсли;
				Если ЗначениеЗаполнено(ОбъектОтвета["clientSecret"]) Тогда
					ОбъектОтвета.Вставить("clientSecret", "*");
				КонецЕсли;
				ЗаписьJSON = Новый ЗаписьJSON;
				ЗаписьJSON.УстановитьСтроку();
				ЗаписатьJSON(ЗаписьJSON, ОбъектОтвета);
				ТелоОтвета = ЗаписьJSON.Закрыть();
			КонецЕсли;
			ОтветТекст = ОтветТекст + Символы.ПС + Символы.ПС + ТелоОтвета;
		КонецЕсли;
	КонецЕсли;
	
	Комментарий = НСтр(
	"ru = '%1
	|
	|%2'");
	
	Комментарий = СтрШаблон(Комментарий, ЗапросТекст, ОтветТекст);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияПротоколОтвет(), УровеньЖурналаРегистрации.Информация,,,Комментарий);
	
КонецПроцедуры

Процедура ЗаписатьСобытиеОтключениеСервиса(СервисУдаляется) Экспорт

	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	СтрокаПриложение 	= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор приложения'"), Настройки.ИдентификаторПриложения);
	СтрокаИС 			= СтрШаблон("%1: %2",  НСтр("ru = 'Идентификатор информационной системы'"), Настройки.Идентификатор);
	СтрокаСобытие 		= НСтр("ru = 'Отключение сервиса 1С:Кабинет сотрудника.'");
	Если СервисУдаляется Тогда
		СтрокаСобытие = СтрШаблон("%1 %2",СтрокаСобытие, НСтр("ru = 'Сервис удален.'"));
	КонецЕсли;
	Шаблон = ("%1
			|%2
			|%3");
	Комментарий = СтрШаблон(Шаблон, СтрокаСобытие, СтрокаПриложение, СтрокаИС);
	ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияОтключениеСервиса(), УровеньЖурналаРегистрации.Информация,,,Комментарий);

КонецПроцедуры

// Формирует текстовое описание ошибки из ответа сервера
// переданного в объекте "error".
//
// Параметры:
// 		HTTPОтвет - HTTPОтвет - ответ полученный от сервиса.
//
// Возвращаемое значение:
// 		Строка - Описание ошибки.
//
Функция ОписаниеОшибкиОтветаСервера(HTTPОтвет)
	
	ОписаниеОшибки = "";
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ТелоКакСтрока = HTTPОтвет.ПолучитьТелоКакСтроку();
	Если Не ПустаяСтрока(ТелоКакСтрока) Тогда
		
		ЧтениеJSON.УстановитьСтроку(ТелоКакСтрока);
		ОбъектОтвета = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		Ошибка = ОбъектОтвета["error"];
		Если Ошибка <> Неопределено Тогда
			
			ОписаниеИзОтвета = Ошибка["description"];
			Если ОписаниеИзОтвета = Неопределено Тогда
				ОписаниеОшибки = НСтр("ru = 'отсутствует'");
			КонецЕсли;
			
			ШаблонОписания = НСтр("ru = 'Описание: %1
			|Подробно:'");
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания, Ошибка["description"]);
			
			Если Ошибка["value"] <> Неопределено Тогда
				Для Каждого КлючЗначение Из Ошибка["value"] Цикл
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + КлючЗначение.Ключ + ": " + КлючЗначение.Значение;
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			ОписаниеОшибки = НСтр("ru = 'Неизвестное описание ошибки.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

#КонецОбласти

#Область КонструкторыОбъектов

Функция ОписаниеОбъектаПриложение()
	
	ОписаниеВложенногоОбъекта = Новый Соответствие;
	ОписаниеВложенногоОбъекта.Вставить("administrator", "Администратор");
	ОписаниеВложенногоОбъекта.Вставить("ОписаниеПолей", ОписаниеОбъектаАдминистратор());
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"Идентификатор");
	СоответствиеПолей.Вставить("name",				"Наименование"); 
	СоответствиеПолей.Вставить("subscriber",		"ИдентификаторАбонентаСервиса");
	СоответствиеПолей.Вставить("hostname",			"ИмяДомена");
	СоответствиеПолей.Вставить("url",				"АдресПриложения");
	СоответствиеПолей.Вставить("status",			"Статус");
	СоответствиеПолей.Вставить("version",			"Версия");
	СоответствиеПолей.Вставить("administrator", 	ОписаниеВложенногоОбъекта);
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаАдминистратор()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("personID", 	"ФизическоеЛицо");
	СоответствиеПолей.Вставить("username", 	"Логин");
	СоответствиеПолей.Вставить("phone", 	"Телефон");
	СоответствиеПолей.Вставить("email", 	"АдресЭлектроннойПочты");
	СоответствиеПолей.Вставить("logonUrl",	"СсылкаДляАдминистратора");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаАбонентСервиса()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"ИдентификаторАбонентаСервиса");
	СоответствиеПолей.Вставить("userUeid",			"ИдентификаторПользователяИП");
	СоответствиеПолей.Вставить("subscriberUeid",	"ИдентификаторАбонентаИП");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("isTrial",			"ИспользуетсяПробныйПериод");
	СоответствиеПолей.Вставить("trialEndDate",		"ДатаОкончанияПробногоПериода");
	СоответствиеПолей.Вставить("paidLimitAccounts",	"ОплаченоКабинетов");
	СоответствиеПолей.Вставить("paymentEndDate",	"ДатаОкончанияОплаченногоПериода");
	СоответствиеПолей.Вставить("activeAccounts",	"КоличествоАктивированныхКабинетов");
	СоответствиеПолей.Вставить("clientID",			"ИдентификаторКлиента");
	СоответствиеПолей.Вставить("clientSecret",		"СекретКлиента");
	
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаИнформационнаяСистема()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"Идентификатор");
	СоответствиеПолей.Вставить("name",				"Наименование");
	СоответствиеПолей.Вставить("clientID",			"ИдентификаторКлиента");
	СоответствиеПолей.Вставить("clientSecret",		"СекретКлиента");
	СоответствиеПолей.Вставить("applicationID", 	"ИдентификаторПриложения");
	Возврат СоответствиеПолей;
	
КонецФункции

Функция ОписаниеОбъектаАбонентИП()
	
	СоответствиеПолей = Новый Соответствие;
	СоответствиеПолей.Вставить("ID",				"Идентификатор");
	СоответствиеПолей.Вставить("name",				"Наименование"); 
	
	Возврат СоответствиеПолей;

КонецФункции

// Возвращает структуру с описанием приложения сервиса.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаПриложение.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеПриложения() Экспорт

	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИдентификаторАбонентаСервиса");
	Описание.Вставить("ИмяДомена");
	Описание.Вставить("АдресПриложения");
	Описание.Вставить("Статус");
	Описание.Вставить("Версия");
	Описание.Вставить("Администратор", НовоеОписаниеАдминистратора());
	
	Возврат Описание;

КонецФункции

// Возвращает структуру с описанием Администратора сервиса.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаАдминистратор.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеАдминистратора() Экспорт

	Описание = Новый Структура;
	Описание.Вставить("ФизическоеЛицо");
	Описание.Вставить("Логин");
	Описание.Вставить("Телефон");
	Описание.Вставить("АдресЭлектроннойПочты");
	Описание.Вставить("СсылкаДляАдминистратора");
	
	Возврат Описание;

КонецФункции

// Возвращает структуру с описанием Абонента сервиса.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаАбонентСервиса.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеАбонента()

	Описание = Новый Структура;
	Описание.Вставить("ИдентификаторАбонентаСервиса");
	Описание.Вставить("ИдентификаторПользователяИП");
	Описание.Вставить("ИдентификаторАбонентаИП");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИспользуетсяПробныйПериод");
	Описание.Вставить("ДатаОкончанияПробногоПериода");
	Описание.Вставить("ОплаченоКабинетов");
	Описание.Вставить("ДатаОкончанияОплаченногоПериода");
	Описание.Вставить("КоличествоАктивированныхКабинетов");
	Описание.Вставить("ИдентификаторКлиента");
	Описание.Вставить("СекретКлиента");
	
	Возврат Описание;

КонецФункции

// Возвращает структуру с описанием Информационной системы.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаИнформационнаяСистема.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеИнформационнойСистемы()
	
	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование");
	Описание.Вставить("ИдентификаторКлиента");
	Описание.Вставить("СекретКлиента");
	Описание.Вставить("ИдентификаторПриложения");
	Возврат Описание;
	
КонецФункции

// Возвращает структуру с описанием абонента интернет-поддержки.
// Ключи описания соответствуют значениям ключей см ОписаниеОбъектаАбонентИП.
//
// Возвращаемое значение:
// 		Структура
//
Функция НовоеОписаниеАбонентаИП()
	
	Описание = Новый Структура;
	Описание.Вставить("Идентификатор");
	Описание.Вставить("Наименование"); 
	
	Возврат Описание;

КонецФункции

#КонецОбласти

#Область ЗначенияКонстант

Функция АдресМенеджераСервиса()
	
	Возврат "https://ess-manager.1c-cabinet.ru/applications/ess-manager";
	
КонецФункции

Функция ИдентификаторСервиса()

	Возврат "1C-ESS";

КонецФункции

#КонецОбласти

#Область Прочие

// Заполняет соответствие для тела запроса по описанию объекта и значениям полей. 
//
// Параметры:
// 		ОписаниеОбъекта - Соответствие
// 		ЗначенияПолейОбъекта - Структура
//
// Возвращаемое значение:
// 		Соответствие - ключи описаны в ОписаниеОбъекта, значения указаны в ЗначенияПолейОбъекта.
//
Функция ТелоЗапросаПоОписаниюОбъекта(ОписаниеОбъекта, ЗначенияПолейОбъекта)
	
	Результат = Новый Соответствие;
	
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		Если ТипЗнч(ЭлементКоллекции.Значение) = Тип("Соответствие") Тогда
			// вложенный объект
			Для каждого ЭлементВложеннойКоллекции Из ЭлементКоллекции.Значение Цикл
				Если ТипЗнч(ЭлементВложеннойКоллекции.Значение) = Тип("Соответствие") Тогда
					ОписаниеВложенногоОбъекта = ЭлементВложеннойКоллекции.Значение;
				Иначе
					ИмяВложенногоОбъекта = ЭлементВложеннойКоллекции.Значение;
				КонецЕсли;
			КонецЦикла;
			ВложенныйОбъект = ТелоЗапросаПоОписаниюОбъекта(ОписаниеВложенногоОбъекта, ЗначенияПолейОбъекта[ИмяВложенногоОбъекта]);
			Если ВложенныйОбъект.Количество() > 0 Тогда
				Результат.Вставить(ЭлементКоллекции.Ключ, ВложенныйОбъект);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ЗначенияПолейОбъекта[ЭлементКоллекции.Значение]) Тогда
				Результат.Вставить(ЭлементКоллекции.Ключ, ЗначенияПолейОбъекта[ЭлементКоллекции.Значение]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовоеHTTPСоединение(ПараметрыСоединения, Таймаут = 120)
	
	ИнтернетПрокси = Неопределено;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначения.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		ИнтернетПрокси = МодульПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыСоединения.Схема);
	КонецЕсли;
	ЗащищенноеСоединение = Неопределено;
	Если ВРег(ПараметрыСоединения.Схема) = "HTTPS" Или ВРег(ПараметрыСоединения.Схема) = "FTPS" Тогда
		ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	Соединение = Новый HTTPСоединение(ПараметрыСоединения.Хост, ПараметрыСоединения.Порт,,, ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
	Возврат Соединение;
	
КонецФункции

Функция ПараметрыСоединения()
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресМенеджераСервиса());
	
	ПараметрыСоединения = Новый Структура("Хост,Порт,ПутьНаСервере,Схема,ИмяСервера,ВестиПротокол");
	ЗаполнитьЗначенияСвойств(ПараметрыСоединения, СтруктураURI);
	ПараметрыСоединения.Вставить("ВестиПротокол", Константы.РегистрироватьВЖурналеСобытийЗапросы.Получить());
	
	Возврат ПараметрыСоединения;

КонецФункции

Функция ИменаСвойствСервисаСоЗначениямиДата()

	Результат = Новый Массив;
	Результат.Добавить("trialEndDate");
	Результат.Добавить("paymentEndDate");
	Возврат Результат;	

КонецФункции

// Заполняет структуру описания приложения на основании ответа на запрос.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеПриложения
//
Функция ПриложениеПоОтветуНаЗапрос(ОбъектОтвета)
	
	НовоеПриложение = НовоеОписаниеПриложения();
	НовоеПриложение.Идентификатор 		= ОбъектОтвета["ID"];
	НовоеПриложение.Наименование 		= ОбъектОтвета["name"];
	НовоеПриложение.ИмяДомена 			= ОбъектОтвета["hostname"];
	НовоеПриложение.АдресПриложения 	= ОбъектОтвета["url"];
	НовоеПриложение.Статус 				= ОбъектОтвета["status"];
	НовоеПриложение.Версия 				= ОбъектОтвета["version"];
	НовоеПриложение.ИдентификаторАбонентаСервиса = ОбъектОтвета["subscriber"];
	
	АдминистраторПриложения = ОбъектОтвета["administrator"];
	Если АдминистраторПриложения <> Неопределено Тогда
		НовоеПриложение.Администратор.Логин 				  = АдминистраторПриложения["username"];
		НовоеПриложение.Администратор.Телефон 				  = АдминистраторПриложения["phone"];
		НовоеПриложение.Администратор.АдресЭлектроннойПочты   = АдминистраторПриложения["email"];
		НовоеПриложение.Администратор.СсылкаДляАдминистратора = АдминистраторПриложения["logonUrl"];
		НовоеПриложение.Администратор.ФизическоеЛицо 		  = АдминистраторПриложения["personID"];
	КонецЕсли;
	
	Возврат НовоеПриложение;
	
КонецФункции

// Заполняет структуру описания Администратора на основании ответа на запрос.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеАдминистратора
//
Функция АдминистраторПоОтветуНаЗапрос(ОбъектОтвета)

	ОписаниеОбъекта 		= ОписаниеОбъектаАдминистратор();
	ОписаниеАдминистратора = НовоеОписаниеАдминистратора();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОписаниеАдминистратора[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат ОписаниеАдминистратора;	

КонецФункции

// Заполняет структуру описания информационной системы на основании ответа на запрос
// создания новой информационной системы.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеПриложения
//
Функция ИнформационнаяСистемаПоОтветуНаЗапрос(ОбъектОтвета)
	
	ОписаниеОбъекта = ОписаниеОбъектаИнформационнаяСистема();
	ОписаниеИС 		= НовоеОписаниеИнформационнойСистемы();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОписаниеИС[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат ОписаниеИС;
	
КонецФункции

// Заполняет структуру описания Абонента на основании ответа на запрос.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеАбонента
//
Функция АбонентПоОтветуНаЗапрос(ОбъектОтвета)

	ОписаниеОбъекта  = ОписаниеОбъектаАбонентСервиса();
	ОписаниеАбонента = НовоеОписаниеАбонента();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОписаниеАбонента[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат ОписаниеАбонента;

КонецФункции

// Заполняет структуру описания Абонента на основании ответа на запрос.
//
// Параметры:
// 		ОбъектОтвета - HTTPОтвет
//
// Возвращаемое значение:
// 		Структура - см НовоеОписаниеАбонента
//
Функция АбонентИППоОтветуНаЗапрос(ОбъектОтвета)

	ОписаниеОбъекта  = ОписаниеОбъектаАбонентИП();
	ОписаниеАбонента = НовоеОписаниеАбонентаИП();
	Для каждого ЭлементКоллекции Из ОписаниеОбъекта Цикл
		ОписаниеАбонента[ЭлементКоллекции.Значение] = ОбъектОтвета[ЭлементКоллекции.Ключ];
	КонецЦикла;
	
	Возврат ОписаниеАбонента;

КонецФункции

// Возвращается признак доступности работы с менеджером сервиса
// на основании наличия ключей менеджера.
//
Функция МенеджерСервисаДоступен() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Возврат КлючиМенеджера() <> Неопределено;

КонецФункции

Процедура АктивироватьТестовыйТариф() Экспорт
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Если Не Настройки.ТребуетсяАктивацияТестовогоТарифа Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТестовыйТарифАктивирован(Истина);
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СообщениеОбОшибке = "";
		ПромокодАктивирован = ПрограммныйИнтерфейсСервиса.ИспользоватьПромокод("testcabinet", Ложь,,, СообщениеОбОшибке);
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТестовыйТарифАктивирован(ПромокодАктивирован);
		Если ПромокодАктивирован Тогда
			// передаем менеджеру сервиса информацию об активации промокода
			СообщениеОПодключенииТестовогоТарифа();
		Иначе
			Комментарий = НСтр(
			"ru = '%1
			|
			|%2'");
			Комментарий = СтрШаблон(Комментарий,  НСтр("ru = 'Ошибка активации промокода.'"), СообщениеОбОшибке);
			ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияМенеджера(), УровеньЖурналаРегистрации.Ошибка,,,Комментарий);
		КонецЕсли;
	Иначе
		ПодключитьТестовыйПериод();
	КонецЕсли;

КонецПроцедуры

Процедура СохранитьНастройкиПодключенияПриложения(ОписаниеПриложения) Экспорт
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.АдресПриложения 			= ОписаниеПриложения.АдресПриложения;
	Настройки.ИдентификаторПриложения 	= ОписаниеПриложения.Идентификатор;
	Настройки.НаименованиеПриложения  	= ОписаниеПриложения.Наименование;
	Настройки.ВерсияПриложения  		= ОписаниеПриложения.Версия;
	Настройки.АбонентСервисаИнициализирован = Истина;
	
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ОчиститьДанныеПриОтключенииСервиса(ОчищатьДанныеОтложенногоПодключения = Истина) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Токен");
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Менеджер.Ключи");
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Ключи");
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("1СКабинетСотрудника.Приложение.Токен");
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей().Записать();
	Если ОчищатьДанныеОтложенногоПодключения Тогда
		РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей().Записать();
	КонецЕсли;
	КабинетСотрудника.ОчиститьДанныеПриОтключенииСервиса();
	УстановитьПривилегированныйРежим(Ложь);	

КонецПроцедуры

#КонецОбласти

#Область ОтложенноеПодключениеКСервису

// Процедура регламентного задания ПодключениеСервисаКабинетСотрудника
Процедура ОтложенноеПодключениеСервиса(ПараметрыСоздания) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника);
	
	СостояниеПодключения = РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СостояниеПодключенияКСервису().Состояние;
	
	Попытка
		Если СостояниеПодключения = Перечисления.СостоянияПодключенияКабинетСотрудника.СозданиеПриложения Тогда
			ОписаниеПриложения = ОписаниеСоздаваемогоПриложения(ПараметрыСоздания);
			Если ОписаниеПриложения <> Неопределено
				И ОписаниеПриложения.Статус = "working" Тогда
				ПараметрыСоздания.АдресПриложения = ОписаниеПриложения.АдресПриложения;
				СохранитьНастройкиПодключенияПриложения(ОписаниеПриложения);
				НачатьСозданиеИнформационнойСистемы(ПараметрыСоздания);
				ОбновитьПараметрыРегламентногоЗаданияПодключениеСервисаКабинетСотрудника(ПараметрыСоздания);
			КонецЕсли;
		ИначеЕсли СостояниеПодключения = Перечисления.СостоянияПодключенияКабинетСотрудника.СозданиеИнформационнойСистемы Тогда
			НачатьПубликациюОтветственногоЛица(ПараметрыСоздания);
		ИначеЕсли СостояниеПодключения = Перечисления.СостоянияПодключенияКабинетСотрудника.ПубликацияОтветственногоЛица Тогда
			НачатьСозданиеАдминистратораСервиса(ПараметрыСоздания);
		ИначеЕсли СостояниеПодключения = Перечисления.СостоянияПодключенияКабинетСотрудника.СозданиеАдминистратораСервиса Тогда
			НачатьПубликациюДанных(ПараметрыСоздания);
		ИначеЕсли СостояниеПодключения = Перечисления.СостоянияПодключенияКабинетСотрудника.ПубликацияДанных Тогда
			ЗавершитьПодключениеКСервису(ПараметрыСоздания);
		Иначе
			ЗавершитьПодключениеКСервису(ПараметрыСоздания);
		КонецЕсли;
	Исключение
		ЗавершитьПодключениеКСервису(ПараметрыСоздания);
		ЗаписьЖурналаРегистрации(КабинетСотрудника.ИмяСобытияМенеджера(),
			УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция НовыеПараметрыПодключенияКСервису() Экспорт
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ИдентификаторЗадания", "");
	ПараметрыСоздания.Вставить("ИдентификаторПриложения", "");
	ПараметрыСоздания.Вставить("НаименованиеПриложения", "");
	ПараметрыСоздания.Вставить("АдресПриложения", "");
	ПараметрыСоздания.Вставить("Ответственный");
	ПараметрыСоздания.Вставить("ИдентификаторИнформационнойСистемы", "");
	ПараметрыСоздания.Вставить("НаименованиеИнформационнойСистемы", "");
	ПараметрыСоздания.Вставить("ПериодыРасчетныхЛистков", Новый Массив);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

Функция НачатьПодключениеКСервисуВОтложенномРежиме(ПараметрыСоздания) Экспорт
	
	НаборЗаписей = РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей();
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.ИдентификаторПриложения = ПараметрыСоздания.ИдентификаторПриложения;
	НоваяСтрока.Состояние = Перечисления.СостоянияПодключенияКабинетСотрудника.СозданиеПриложения;
	НаборЗаписей.Записать();
		
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 3600;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные",		Метаданные.РегламентныеЗадания.ПодключениеСервисаКабинетСотрудника);
	ПараметрыЗадания.Вставить("Наименование",	НСтр("ru = 'Подключение сервиса ""1С:Кабинет сотрудника""'"));
	ПараметрыЗадания.Вставить("Использование",	Истина);
	ПараметрыЗадания.Вставить("Расписание",		Расписание);
	ПараметрыЗадания.Вставить("Параметры",		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСоздания));
	Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	ПараметрыСоздания.ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	ОбновитьПараметрыРегламентногоЗаданияПодключениеСервисаКабинетСотрудника(ПараметрыСоздания);
	
КонецФункции

Функция ОписаниеСоздаваемогоПриложения(ПараметрыСоздания)
	
	Ответ = ИнформацияОПриложении(ПараметрыСоздания.ИдентификаторПриложения, Истина);
	
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		ЗавершитьПодключениеКСервису(ПараметрыСоздания, Истина);
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПриложения = Ответ.ОписаниеПриложения;
	Если ОписаниеПриложения.Статус <> "working" И ОписаниеПриложения.Статус <> "booked" Тогда
		ЗавершитьПодключениеКСервису(ПараметрыСоздания, Истина);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеПриложения;
	
КонецФункции

Процедура НачатьСозданиеИнформационнойСистемы(ПараметрыСоздания)
	
	Ответ = СоздатьИнформационнуюСистему(ПараметрыСоздания.ИдентификаторПриложения);
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		ЗавершитьПодключениеКСервису(ПараметрыСоздания, Истина);
		Возврат;
	КонецЕсли;
	
	ИнформационнаяСистема = Ответ.ИнформационнаяСистема;
	ПараметрыСоздания.ИдентификаторИнформационнойСистемы = ИнформационнаяСистема.Идентификатор;
	ПараметрыСоздания.НаименованиеИнформационнойСистемы = ИнформационнаяСистема.Наименование;
	
	УстановитьПривилегированныйРежим(Истина);
	КабинетСотрудника.СохранитьКлючиПриложенияВБезопасномХранилище(
		ИнформационнаяСистема.ИдентификаторКлиента, ИнформационнаяСистема.СекретКлиента);
	УстановитьПривилегированныйРежим(Ложь);
	
	// обновим функциональность сервиса
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТребуетсяОбновитьНастройкиФункциональности(Истина);
	КабинетСотрудника.ОбновитьНастройкиФункциональностиСервиса();
		
	ИзменитьРасписаниеПодключенияСервиса(ПараметрыСоздания.ИдентификаторЗадания, 10);
	УстановитьСостояниеПодключенияСервиса(
		Перечисления.СостоянияПодключенияКабинетСотрудника.СозданиеИнформационнойСистемы);
	
КонецПроцедуры

Процедура НачатьПубликациюОтветственногоЛица(ПараметрыСоздания)
	
	БылиОшибки = КабинетСотрудника.ОпубликоватьОтветственноеЛицо(ПараметрыСоздания.Ответственный);
	Если БылиОшибки Тогда
		ЗавершитьПодключениеКСервису(ПараметрыСоздания, Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьСостояниеПодключенияСервиса(
		Перечисления.СостоянияПодключенияКабинетСотрудника.ПубликацияОтветственногоЛица);
	
КонецПроцедуры

Процедура НачатьСозданиеАдминистратораСервиса(ПараметрыСоздания)
	
	ОписаниеАдминистратора = НовоеОписаниеАдминистратора();
	ОписаниеАдминистратора.ФизическоеЛицо = Строка(ПараметрыСоздания.Ответственный.УникальныйИдентификатор());
	Ответ = СоздатьАдминистратораПриложения(
		ПараметрыСоздания.ИдентификаторПриложения, ОписаниеАдминистратора);
		
	Если Ответ.СообщениеОбОшибке <> Неопределено Тогда
		ЗавершитьПодключениеКСервису(ПараметрыСоздания, Истина);
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиСервисаКабинетСотрудника.НастройкиСервиса();
	Настройки.Идентификатор = ПараметрыСоздания.ИдентификаторИнформационнойСистемы;
	Настройки.Наименование  = ПараметрыСоздания.НаименованиеИнформационнойСистемы;
	Настройки.Ответственный = ПараметрыСоздания.Ответственный;
	
	НаборЗаписей = РегистрыСведений.НастройкиСервисаКабинетСотрудника.СоздатьНаборЗаписей();
	ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Настройки);
	НаборЗаписей.Записать();
	
	УстановитьСостояниеПодключенияСервиса(
		Перечисления.СостоянияПодключенияКабинетСотрудника.СозданиеАдминистратораСервиса);
	
КонецПроцедуры

Процедура НачатьПубликациюДанных(ПараметрыСоздания)
	
	КабинетСотрудника.ВыполнитьПубликациюПослеПодключенияКСервисуВФоне(ПараметрыСоздания.ПериодыРасчетныхЛистков);
	
	УстановитьСостояниеПодключенияСервиса(
		Перечисления.СостоянияПодключенияКабинетСотрудника.ПубликацияДанных);
		
КонецПроцедуры

Процедура ЗавершитьПодключениеКСервису(ПараметрыСоздания, ОшибкаСоздания = Ложь)
	
	РегламентныеЗаданияСервер.УдалитьЗадание(ПараметрыСоздания.ИдентификаторЗадания);
	Если ОшибкаСоздания Тогда
		ОчиститьДанныеПриОтключенииСервиса(Ложь);
		УстановитьСостояниеПодключенияСервиса(
			Перечисления.СостоянияПодключенияКабинетСотрудника.ОшибкаСоздания);
	Иначе
		УстановитьСостояниеПодключенияСервиса(
			Перечисления.СостоянияПодключенияКабинетСотрудника.Создано);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПараметрыРегламентногоЗаданияПодключениеСервисаКабинетСотрудника(ПараметрыСоздания)
	Изменения = Новый Структура;
	Изменения.Вставить("Параметры", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСоздания));
	РегламентныеЗаданияСервер.ИзменитьЗадание(ПараметрыСоздания.ИдентификаторЗадания, Изменения);
КонецПроцедуры

Процедура ИзменитьРасписаниеПодключенияСервиса(ИдентификаторЗадания, ПериодПовтора)
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = ПериодПовтора;
	Изменения = Новый Структура;
	Изменения.Вставить("Расписание", Расписание);
	РегламентныеЗаданияСервер.ИзменитьЗадание(ИдентификаторЗадания, Изменения);
	
КонецПроцедуры

Процедура УстановитьСостояниеПодключенияСервиса(Состояние)
	
	НаборЗаписей = РегистрыСведений.СостояниеОтложенногоПодключенияКСервису.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяСтрока = НаборЗаписей.Добавить();
	Иначе
		НоваяСтрока = НаборЗаписей[0];
	КонецЕсли;
	
	НоваяСтрока.Состояние = Состояние;
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ПодключениеТестовогоПериода

Процедура ПодключитьТестовыйПериод() Экспорт
	
	ИдентификаторТестовогоПериода = ИдентификаторТестовогоПериода();
	Если ПустаяСтрока(ИдентификаторТестовогоПериода) Тогда
		// не удалось получить идентификатор
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТестовыйТарифАктивирован(Ложь);
		Возврат;
	ИначеЕсли ИдентификаторТестовогоПериода = "НЕТ" Тогда
		// Нет тестовых периодов.
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТестовыйТарифАктивирован(Истина);
		// передаем менеджеру сервиса информацию о подключении тестового тарифа
		Возврат;
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ПараметрыПодключения.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения);
	Если РезультатОперации.Ошибка Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТестовыйТарифАктивирован(Ложь);
		Возврат;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
	"/trial/tariffs/activate",
	ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТестовыйТарифАктивирован(Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаJSON = tariffsActivate(
	ИдентификаторТестовогоПериода,
	ДанныеАутентификации,
	ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
	URLОперации,
	,
	,
	ПараметрыОтправки);
	
	ТестовыйПериодПодключен = Ложь;
	Если ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ИдентификаторЗапроса = ПрочитатьДанные_tariffsActivate(РезультатОтправки.Содержимое);
		РезультатОперации.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		
		РезультатОперации = СостояниеЗапросаНаПодключение(
			ИдентификаторЗапроса,
			ИдентификаторТестовогоПериода);
			
		ТестовыйПериодПодключен = РезультатОперации.РезультатПодключения.Подключен;
		
	КонецЕсли;
	
	РегистрыСведений.НастройкиСервисаКабинетСотрудника.УстановитьТестовыйТарифАктивирован(ТестовыйПериодПодключен);
	Если ТестовыйПериодПодключен Тогда
		// передаем менеджеру сервиса информацию о подключении тестового тарифа
		СообщениеОПодключенииТестовогоТарифа();
	КонецЕсли;
	
КонецПроцедуры

Функция ИдентификаторТестовогоПериода() Экспорт

	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ПараметрыПодключения.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения);
	Если РезультатОперации.Ошибка Тогда
		Возврат "";
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
		"/trial/services/available/list",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ИдентификаторыСервисов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСервиса());
	
	ПараметрыЗапросаJSON = availableList(
		ИдентификаторыСервисов,
		ДанныеАутентификации,
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		Возврат "";
	КонецЕсли;
	
	ИдентификаторТестовогоПериода = "НЕТ";
	СодержаниеОтвета = ПрочитатьДанные_availableList(РезультатОтправки.Содержимое);
	ДанныеСервисовСопровождения = СодержаниеОтвета.ДанныеСервисовСопровождения;
	Для каждого ДанныеСервиса Из ДанныеСервисовСопровождения Цикл
		Если ДанныеСервиса.ТестовыеПериоды.Количество() > 0 Тогда
			Для каждого ОписательТестовогоПериодов Из ДанныеСервиса.ТестовыеПериоды Цикл
				ИдентификаторТестовогоПериода = ОписательТестовогоПериодов.Идентификатор;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторТестовогоПериода;

КонецФункции

// Выполняет проверку статуса запроса на подключение тестового периода пользователю.
//
// Параметры:
//  ИдентификаторЗапроса          - Строка - идентификатор запроса по которому будет
//                                произведена проверка;
//  ИдентификаторТестовогоПериода - Строка - уникальный идентификатор тестового периода;
//  ПроверитьДоступность - Булево - если истина, будет вызвана операция ping.
//
// Возвращаемое значение:
//  Структура - результат проверки запроса на подключение.
//
Функция СостояниеЗапросаНаПодключение(
		ИдентификаторЗапроса,
		ИдентификаторТестовогоПериода,
		ПроверитьДоступность = Ложь)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка состояния запроса на подключение тестового периода:
			|Идентификатор запроса: %1
			|Идентификатор тестового периода: %2'"),
		ИдентификаторЗапроса,
		ИдентификаторТестовогоПериода);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатОперации = Новый Структура;
	РезультатОперации.Вставить("Ошибка",             Ложь);
	РезультатОперации.Вставить("ИнформацияОбОшибке", "");
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("НастройкиСоединения"   , ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ПараметрыПодключения.Вставить("НастройкиПроксиСервера", ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере());
	
	// Вызов операции ping необходимо производить только при проверке запроса
	// на подключение тестового периода регламентным заданием, в других случаях
	// проверять не имеет смысла, т.к. операция парная:
	//   1. trial/tariffs/activate
	//   2. /trial/tariffs/request/status/{uid}.
	Если ПроверитьДоступность Тогда
		ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения);
		Если РезультатОперации.Ошибка Тогда
			Возврат РезультатОперации;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов операции сервиса.
	Операция = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"/trial/tariffs/request/status/%1",
		Строка(ИдентификаторЗапроса));
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
		Операция,
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = requestStatus(
		ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса());
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при проверке запроса на подключение:
				|%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить состояние запроса на подключение.
				|При проверке запроса на подключение тестовых периодов сервис вернул ошибку: %1.
				|Причина:
				|%2'"),
			URLОперации,
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробноеОписаниеОшибки);
		
		Возврат РезультатОперации;
		
	КонецЕсли;
	
	РезультатПодключения = ПрочитатьДанные_requestStatus(РезультатОтправки.Содержимое);
	
	ОбработатьРезультатПроверкиПодключения(
		РезультатПодключения,
		ИдентификаторТестовогоПериода,
		ПараметрыПодключения);
	
	РезультатОперации.Вставить("РезультатПодключения", РезультатПодключения);
	
	Возврат РезультатОперации;
	
КонецФункции

// Обрабатывает ошибку подключения тестового периода.
//
Процедура ОбработатьРезультатПроверкиПодключения(
		РезультатПодключения,
		ИдентификаторТестовогоПериода,
		ПараметрыПодключения)
	
	// Если запрос на подключение еще не обработан,
	// результат проверки не отображается.
	Если Не РезультатПодключения.Подключен Тогда
		Возврат;
	КонецЕсли;
	
	// Если тестовый период успешно подключен,
	// нет необходимости обрабатывать ошибку.
	Если Не РезультатПодключения.Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	ПодробноеПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка при проверке статуса запроса на подключение тестового периода:
			|Код ошибки: %1
			|Информация об ошибке: %2'"),
		РезультатПодключения.КодОшибки,
		РезультатПодключения.ИнформацияОбОшибке);
	
	ЗаписатьИнформациюВЖурналРегистрации(ПодробноеПредставлениеОшибки, Истина);
	
	Если РезультатПодключения.КодОшибки = "HAS_ACTIVE_OPTION_PACKAGES_BY_APPLICATION"
		Или РезультатПодключения.КодОшибки = "HAS_ANY_OPTION_PACKAGES_BY_APPLICATION"
		Или РезультатПодключения.КодОшибки = "HAS_ACTIVE_OPTION_PACKAGES_BY_TARIFF"
		Или РезультатПодключения.КодОшибки = "HAS_ANY_OPTION_PACKAGES_BY_TARIFF" Тогда
		
		// Группа ошибок, которые могут возникнуть при одновременном подключении несколькими
		// пользователями тестового периода. Перед выводом сообщения об ошибке будет проверена
		// доступность тестового периода.
		Подключен = ТестовыйПериодПодключен(ИдентификаторТестовогоПериода, ПараметрыПодключения);
		
		Если Подключен Тогда
			// Не смотря на ошибку тестовый период подключен, вероятно подключение было произведено
			// из другого сеанса, либо напрямую на Портале 1С:ИТС.
			РезультатПодключения.Подключен          = Истина;
			РезультатПодключения.Ошибка             = Ложь;
			РезультатПодключения.ИнформацияОбОшибке = "";
		Иначе
			// Тестовый период не подключен.
			РезультатПодключения.ИнформацияОбОшибке = НСтр("ru = 'Не удалось подключить тестовый период.
				|Подробнее см. в журнале регистрации.'");
		КонецЕсли;
		
	ИначеЕсли РезультатПодключения.КодОшибки = "UNKNOWN_CAUSE" Тогда
		РезультатПодключения.ИнформацияОбОшибке = НСтр("ru = 'Неизвестная ошибка при обработке запроса.
			|Подробнее см. в журнале регистрации.'");
	Иначе
		РезультатПодключения.ИнформацияОбОшибке = НСтр("ru = 'Внутренняя ошибка при обработке запроса.
			|Подробнее см. в журнале регистрации.'");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку активности тестового периода сервиса.
//
Функция ТестовыйПериодПодключен(ИдентификаторТестовогоПериода, ПараметрыПодключения)
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Проверка активности тестового периода:
		|%1'"),
		ИдентификаторТестовогоПериода);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
		
	// Вызов операции сервиса.
	URLОперации = URLОперацииСервисаПодключенияТестовыхПериодов(
		"/trial/tariffs/active/check",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыЗапросаJSON = tariffActiveCheck(
		ИдентификаторТестовогоПериода, ДанныеАутентификации);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , ПараметрыПодключения.НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		ПодробноеОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить активность тестового периода.
				|При проверке активности тестового периода сервис вернул ошибку: %1.
				|Причина:
				|%2'"),
			URLОперации,
			РезультатОтправки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробноеОписаниеОшибки);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ПрочитатьДанные_tariffActiveCheck(РезультатОтправки.Содержимое);
	
КонецФункции

Функция tariffActiveCheck(ИдентификаторТестовогоПериода, ДанныеАутентификации)
	
	// {
	//   "additionalParameters": {
	//   }
	// }.
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("tariffUeid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(ИдентификаторТестовогоПериода);
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции trial/tariffs/active/check.
//
Функция ПрочитатьДанные_tariffActiveCheck(ТелоJSON)
	
	// active - true или false, если тестовый период подключен или нет.
	//
	// {
	// "active": "true"
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "active" Тогда
			Возврат ЗначениеСвойстваJSON(ЧтениеОтвета, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Чтение ответа операции /trial/tariffs/request/status/{uid}.
//
Функция ПрочитатьДанные_requestStatus(ТелоJSON)
	
	// Данные ответа:
	// status - статус заявки на подключение бесплатного периода,
	//          может принимать значения: "processing", "done";
	// result - результат обработки:
	//    code - код результата, допустимые значения success, rejected;
	//    cause - причина отклонения, в наличии, только если код имеет значение "rejected":
	//       code - код ошибки;
	//       text - описание ошибки.
	//
	// {
	//  "status" : "",
	//  "result" : {
	//   "code" : "",
	//   "cause": {
	//    "code": "",
	//    "text": ""
	//    }
	//  }
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	РезультатПодключения = Новый Структура;
	РезультатПодключения.Вставить("Подключен",          Ложь);
	РезультатПодключения.Вставить("Ошибка",             Ложь);
	РезультатПодключения.Вставить("КодОшибки",          "");
	РезультатПодключения.Вставить("ИнформацияОбОшибке", "");
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "status" Тогда
			
			Значение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			Если Значение = "done" Тогда
				РезультатПодключения.Подключен = Истина;
			КонецЕсли;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 2
			И ЧтениеОтвета.ТекущееЗначение = "code" Тогда
			
			Значение = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			Если Значение <> "success" Тогда
				РезультатПодключения.Ошибка = Истина;
			КонецЕсли;
			
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 3 Тогда
			
			Если ЧтениеОтвета.ТекущееЗначение = "code" Тогда
				РезультатПодключения.КодОшибки = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ЧтениеОтвета.ТекущееЗначение = "text" Тогда
				РезультатПодключения.ИнформацияОбОшибке = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПодключения;
	
КонецФункции

// Формирует параметры запроса для операции
// /trial/tariffs/request/status/{uid}.
//
Функция requestStatus(ДополнительныеПараметры)
	
	// {
	//   "additionalParameters": {
	//   }
	// }.
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции trial/tariffs/activate.
//
Функция ПрочитатьДанные_tariffsActivate(ТелоJSON)
	
	// trialRequestUuid - идентификатор запроса на подключение подключения периода.
	//
	// { 
	//  "trialRequestUuid" : ""
	// }
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ИдентификаторЗапроса = "";
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	Пока ЧтениеОтвета.Прочитать() Цикл
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ЧтениеОтвета.ТекущееЗначение = "trialRequestUuid" Тогда
			ИдентификаторЗапроса = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый УникальныйИдентификатор(ИдентификаторЗапроса);
	
КонецФункции

// Проверяет доступность сервиса подключения тестовых периодов.
//
// Параметры:
//  РезультатОперации  - Структура - описатель результата операции;
//  ПараметрыПодключения  - Структура - см. функцию
//                          ИнициализироватьПараметрыПодключенияТестовыхПериодов().
//
Процедура ПроверитьДоступностьСервиса(РезультатОперации, ПараметрыПодключения)
	
	// Проверка доступности сервиса.
	URLОперацииPing = URLОперацииСервисаПодключенияТестовыхПериодов(
		"/trial/ping",
		ПараметрыПодключения.НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(
		URLОперацииPing,
		ПараметрыПодключения.НастройкиПроксиСервера);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		РезультатОперации.Ошибка             = Истина;
		РезультатОперации.ИнформацияОбОшибке = РезультатПроверки.СообщениеОбОшибке;
		ПодробнаяИнформацияОбОшибке          = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса тестовых периодов:
				|%1.
				|Причина:
				|%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ЗаписатьИнформациюВЖурналРегистрации(ПодробнаяИнформацияОбОшибке, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Определяет URL для вызова сервиса подключения тестовых периодов.
//
// Параметры:
//  Операция  - Строка - путь к ресурсу;
//  Домен     - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - URL операции.
//
Функция URLОперацииСервисаПодключенияТестовыхПериодов(Операция, Домен)
	
	Возврат "https://"
		+ ХостСервисаПодключенияТестовыхПериодов(Домен)
		+ "/external-api"
		+ Операция;
	
КонецФункции
	
// Определяет хост для вызова сервиса подключения тестовых периодов.
//
// Параметры:
//  Домен - Число  - идентификатор домена.
//
// Возвращаемое значение:
//  Строка - хост подключения.
//
Функция ХостСервисаПодключенияТестовыхПериодов(Домен)
	
	
	Возврат "sales-manager.1c.ru";
	
КонецФункции

// Формирует параметры запроса для операции
// trial/tariffs/activate.
//
Функция tariffsActivate(Идентификатор, ДанныеАутентификации, ДополнительныеПараметры)
	
	//{
	//  "tariffUeid": "b65e14f2-1465-471a-b0da-eaf541ca361e"
	//  "authenticationInfo": {
	//    "login": "User",
	//    "password": "UserPassword",
	//    "authToken": "someToken"
	//  },
	//  "additionalParameters": {
	//  }
	//}.
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("tariffUeid");
	ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Добавлен в запись JSON данные аутентификации.
//
// Параметры:
//  ЗаписьДанныхСообщения  - ЗаписьJSON - запись, в которую необходимо
//                           добавить данные аутентификации;
//  ДанныеАутентификации   - Структура - параметры аутентификации пользователя
//                         Интернет-поддержки. См. ДанныеАутентификации().
//
Процедура ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации)
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authenticationInfo");
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	Если ДанныеАутентификации.Свойство("Тикет") Тогда
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("authToken");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Тикет);
	Иначе
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("login");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Логин);
		ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("password");
		ЗаписьДанныхСообщения.ЗаписатьЗначение(ДанныеАутентификации.Пароль);
	КонецЕсли;
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
КонецПроцедуры

// Формирует параметры запроса для операции
// trial/services/available/list.
//
Функция availableList(Идентификаторы, ДанныеАутентификации, ДополнительныеПараметры)
	
	// {
	//    "authenticationInfo": {
	//        "login": "User",
	//         "password": "UserPassword"
	//        },
	// "applicationNicks": ["SPARK"],
	// "additionalParameters":{...}
	// }
	
	ЗаписьДанныхСообщения = Новый ЗаписьJSON;
	ЗаписьДанныхСообщения.УстановитьСтроку();
	ЗаписьДанныхСообщения.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеАутентификации(ЗаписьДанныхСообщения, ДанныеАутентификации);
	
	ЗаписьДанныхСообщения.ЗаписатьИмяСвойства("applicationNicks");
	ЗаписьДанныхСообщения.ЗаписатьНачалоМассива();
	Для каждого Идентификатор Из Идентификаторы Цикл
		ЗаписьДанныхСообщения.ЗаписатьЗначение(Идентификатор);
	КонецЦикла;
	ЗаписьДанныхСообщения.ЗаписатьКонецМассива();
	
	ИнтернетПоддержкаПользователей.ЗаписатьДополнительныеПараметрыЗапроса(
		ДополнительныеПараметры,
		ЗаписьДанныхСообщения);
	
	ЗаписьДанныхСообщения.ЗаписатьКонецОбъекта();
	
	Возврат ЗаписьДанныхСообщения.Закрыть();
	
КонецФункции

// Чтение ответа операции trial/services/available/list.
//
Функция ПрочитатьДанные_availableList(ТелоJSON)
	
	// Данные ответа:
	// isProcessingTrialRequestPresent - флаг, обозначающий наличие или отсутствие обрабатываемых запросов,
	//                                   на подключение тестовых периодов. Принимает значения false или true
	//                                   соответственно. Не может быть true, если список сервисов не пустой;
	// services - список сервисов:
	//  nick - внешний идентификатор сервиса;
	//  descriptionUrl - ссылка на страницу сервиса на Портале 1С:ИТС;
	//  conditionsAchor - якорь для перехода на условия подключения;
	//  tarifs - список доступных тестовых периодов:
	//   ueid - уникальный идентификатор тестового периода;
	//   name - наименование тестового периода;
	//   description - описание тестового периода.
	// 
	// {
	//   "isProcessingTrialRequestPresent": "",
	//   "services": [
	//     {
	//       "ueid": "",
	//       "nick": "",
	//       "applicationsUrl": "",
	//       "applicationsSoftwareUrl": "",
	//       "conditionsAchor": "",
	//       "tariffs": [
	//         {
	//           "ueid": "",
	//           "name": "",
	//           "description": ""
	//         }
	//       ]
	//     }
	//   ]
	// }.
	
	ПодключениеДоступно         = Истина;
	ДанныеСервисовСопровождения = НовыйОписательДанныхСервисовСопровождения();
	
	ТекстЖурналРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Получен ответ сервиса Подключения тестовых периодов:
			|%1'"),
		ТелоJSON);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		ТекстЖурналРегистрации,
		Ложь);
	
	ЧтениеОтвета = Новый ЧтениеJSON;
	ЧтениеОтвета.УстановитьСтроку(ТелоJSON);
	ТекущийУровень = 0;
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "isProcessingTrialRequestPresent" Тогда
			ПодключениеДоступно = Не ЗначениеСвойстваJSON(ЧтениеОтвета, Истина);
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 1
			И ЧтениеОтвета.ТекущееЗначение = "services" Тогда
			
			ЧтениеОтвета.Прочитать();
			Если ЧтениеОтвета.ТипТекущегоЗначения <> ТипЗначенияJSON.НачалоМассива Тогда
				Продолжить;
			КонецЕсли;
			
			ПрочитатьДанные_availableList_services(
				ЧтениеОтвета,
				ДанныеСервисовСопровождения,
				ТекущийУровень);
				
		КонецЕсли;
		
	КонецЦикла;
	
	СодержаниеОтвета = Новый Структура;
	СодержаниеОтвета.Вставить("ПодключениеДоступно",         ПодключениеДоступно);
	СодержаниеОтвета.Вставить("ДанныеСервисовСопровождения", ДанныеСервисовСопровождения);
	
	Возврат СодержаниеОтвета;
	
КонецФункции

// Создает таблицу с описанием данных сервисов сопровождения.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержит информацию, которая используется
//                    для обновления данных справочника "ИдентификаторыСервисовСопровождения"
//   *УникальныйИдентификатор           - Строка - уникальный идентификатор сервиса сопровождения;
//   *Идентификатор                     - Строка - идентификатор сервиса сопровождения;
//   *URLОписание                       - Строка - URL для перехода на страницу с описанием сервиса;
//   *URLУсловияПолучения               - Строка - якорь для перехода к условиям получения;
//   *ИдентификаторСервисаСопровождения - Строка - идентификатор сервиса;
//   *ТестовыеПериоды                   - Массив из Массив - описание тестовых периодов.
//
Функция НовыйОписательДанныхСервисовСопровождения()
	
	ОписательСервисовСопровождения = Новый ТаблицаЗначений;
	ОписательСервисовСопровождения.Колонки.Добавить("УникальныйИдентификатор",             ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОписательСервисовСопровождения.Колонки.Добавить("Идентификатор",                       ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ОписательСервисовСопровождения.Колонки.Добавить("URLОписание",                         ОбщегоНазначения.ОписаниеТипаСтрока(2000));
	ОписательСервисовСопровождения.Колонки.Добавить("URLУсловияПолучения",                 ОбщегоНазначения.ОписаниеТипаСтрока(2000));
	ОписательСервисовСопровождения.Колонки.Добавить("ИдентификаторСервисаСопровождения",   ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ОписательСервисовСопровождения.Колонки.Добавить("ТестовыеПериоды",                     Новый ОписаниеТипов("Массив"));
	
	Возврат ОписательСервисовСопровождения;
	
КонецФункции

// Добавляет запись в журнал регистрации.
//
// Параметры:
//  СообщениеОбОшибке - Строка - комментарий к записи журнала регистрации;
//  Ошибка - Булево - если истина будет установлен уровень журнала регистрации "Ошибка".
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(СообщениеОбОшибке, Ошибка = Истина)
	
	УровеньЖР = ?(Ошибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖР,
		,
		,
		Лев(СообщениеОбОшибке, 5120));
	
КонецПроцедуры
	
// Возвращает имя события для журнала регистрации
//
// Возвращаемое значение:
//  Строка - имя события.
//
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Подключение тестовых периодов.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции
	
// Определяет значение свойства из чтения JSON.
//
// Параметры:
//  ЧтениеОбъектаJSON    - ЧтениеJSON - чтение JSON для определения значения;
//  ЗначениеПоУмолчанию  - Неопределено, Строка, Число, Булево - определяет
//                         значение по умолчанию.
//
// Возвращаемое значение:
//  Неопределено, Строка, Число, Булево - значение.
//
Функция ЗначениеСвойстваJSON(ЧтениеОбъектаJSON, ЗначениеПоУмолчанию = Неопределено)
	
	ИмяСвойства = ЧтениеОбъектаJSON.ТекущееЗначение;
	
	ЧтениеОбъектаJSON.Прочитать();
	Если ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Строка Тогда
		Возврат СокрЛП(ЧтениеОбъектаJSON.ТекущееЗначение);
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Число
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Тогда
		Возврат ЧтениеОбъектаJSON.ТекущееЗначение;
	ИначеЕсли ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Null
		Или ЧтениеОбъектаJSON.ТипТекущегоЗначения = ТипЗначенияJSON.Ничего Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось прочитать значение свойства %1.
				|Некорректный тип значения свойства (%2).'"),
			ИмяСвойства,
			Строка(Строка(ЧтениеОбъектаJSON.ТипТекущегоЗначения)));
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецФункции

// Чтение ответа операции trial/services/available/list.
// Обработка раздела "services".
//
Процедура ПрочитатьДанные_availableList_services(
		ЧтениеОтвета,
		ДанныеСервисовСопровождения,
		ТекущийУровень)
		
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
			И ТекущийУровень = 1 Тогда
			// Закончено чтение объектов из "services".
			Прервать;
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
			Если ТекущийУровень > 2 Тогда
				Продолжить;
			Иначе
				ДанныеСервисаСопровождения = Новый Структура;
				ДанныеСервисаСопровождения.Вставить("УникальныйИдентификатор",  "");
				ДанныеСервисаСопровождения.Вставить("Идентификатор",            "");
				ДанныеСервисаСопровождения.Вставить("URLОписание",              "");
				ДанныеСервисаСопровождения.Вставить("URLУсловияПолучения",      "");
				ДанныеСервисаСопровождения.Вставить("ТестовыеПериоды",          Неопределено);
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
			Если ТекущийУровень = 1 Тогда
				// Прочитан очередной объект из "services".
				ЗаполнитьЗначенияСвойств(ДанныеСервисовСопровождения.Добавить(), ДанныеСервисаСопровождения);
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 2 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "nick" Тогда
				ДанныеСервисаСопровождения.Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "ueid" Тогда
				ДанныеСервисаСопровождения.УникальныйИдентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "applicationsUrl" Тогда
				ДанныеСервисаСопровождения.URLОписание = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "conditionsAnchor" Тогда
				ДанныеСервисаСопровождения.URLУсловияПолучения = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "tariffs" Тогда
				ДанныеСервисаСопровождения.ТестовыеПериоды = ПрочитатьДанные_availableList_services_tariffs(
					ЧтениеОтвета,
					ТекущийУровень);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Чтение ответа операции trial/services/available/list.
// Обработка раздела "tariffs".
//
Функция ПрочитатьДанные_availableList_services_tariffs(
		ЧтениеОтвета,
		ТекущийУровень)
	
	ТестовыеПериоды = Новый Массив;
	
	Пока ЧтениеОтвета.Прочитать() Цикл
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецМассива
			И ТекущийУровень = 2 Тогда
			// Закончено чтение объектов из "tariffs".
			Прервать;
		КонецЕсли;
		
		Если ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.НачалоОбъекта Тогда
			ТекущийУровень = ТекущийУровень + 1;
			Если ТекущийУровень > 3 Тогда
				Продолжить;
			Иначе
				ДанныеТестовогоПериода = Новый Структура;
				ДанныеТестовогоПериода.Вставить("Идентификатор", "");
				ДанныеТестовогоПериода.Вставить("Наименование",  "");
				ДанныеТестовогоПериода.Вставить("Описание",      "");
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.КонецОбъекта Тогда
			ТекущийУровень = ТекущийУровень - 1;
			Если ТекущийУровень = 2 Тогда
				// Прочитан очередной объект из "tariffs".
				ТестовыеПериоды.Добавить(ДанныеТестовогоПериода);
			КонецЕсли;
		ИначеЕсли ЧтениеОтвета.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства
			И ТекущийУровень = 3 Тогда
			
			ИмяСвойства = ЧтениеОтвета.ТекущееЗначение;
			Если ИмяСвойства = "ueid" Тогда
				ДанныеТестовогоПериода.Идентификатор = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "name" Тогда
				ДанныеТестовогоПериода.Наименование = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			ИначеЕсли ИмяСвойства = "description" Тогда
				ДанныеТестовогоПериода.Описание = ЗначениеСвойстваJSON(ЧтениеОтвета, "");
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТестовыеПериоды;
	
КонецФункции

#КонецОбласти

#КонецОбласти
