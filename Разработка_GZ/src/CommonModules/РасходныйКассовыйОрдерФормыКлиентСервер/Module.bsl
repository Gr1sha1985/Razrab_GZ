#Область СлужебныеФункцииИПроцедуры

Функция ПараметрыУстановкиСвойствСубконто(Форма, Постфикс = "") Экспорт
	
	Результат = БухгалтерскийУчетКлиентСервер.ПараметрыУстановкиСвойствСубконтоПоШаблону(
		"СубконтоДт"      + Постфикс,
		"ПодразделениеДт" + Постфикс,
		"СубконтоДт",
		"ПодразделениеДт",
		"СчетУчетаРасчетовСКонтрагентом");
	
	Результат.ДопРеквизиты.Вставить("Организация", Форма.Объект.Организация);
	
	Возврат Результат;
	
КонецФункции

// Показывает предупреждение что надо напечатать чек коррекции, 
// если по документу уже был напечатан чек
Процедура ПоказатьПредупреждениеПечатьЧека(Форма) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьФискальныеОперацииПоДокументу") Тогда
		ПечатьФискальныхДокументовФормыКлиентСервер.ПоказатьПредупреждениеПечатьЧека(Форма);
	КонецЕсли; 
КонецПроцедуры

Процедура ОбновитьИтоги(Форма) Экспорт
	
	Если ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
	
	ИтогоСуммаПлатежа = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	ИтогоВсегоНДС     = РасшифровкаПлатежа.Итог("СуммаНДС");
	
	Если НЕ ФормаРасшифровкиПлатежа(Форма) Тогда
		Форма.ИтогоСуммаПлатежа = ИтогоСуммаПлатежа;
		Форма.ИтогоВсегоНДС     = ИтогоВсегоНДС;
	КонецЕсли;
	
	Если ЕстьРасшифровкаПлатежа(Объект.ВидОперации) Тогда
		Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(ИтогоСуммаПлатежа, "ЧЦ=15; ЧДЦ=2");
		Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала     = Формат(ИтогоВсегоНДС,     "ЧЦ=15; ЧДЦ=2");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) Экспорт
	
	ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют(СтрокаПлатеж, Форма) Экспорт
	
	Форма.КурсДокумента      = ?(Форма.КурсДокумента      = 0, 1, Форма.КурсДокумента);
	Форма.КратностьДокумента = ?(Форма.КратностьДокумента = 0, 1, Форма.КратностьДокумента);
	
	Если СтрокаПлатеж <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов      = 0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, Форма) Экспорт
	
	Объект = Форма.Объект;
	ПроверкаКурсовВалют(СтрокаПлатеж, Форма);
	СтрокаПлатеж.СуммаВзаиморасчетов = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа,
		Объект.ВалютаДокумента,   СтрокаПлатеж.ДоговорКонтрагентаВалютаВзаиморасчетов,
		Форма.КурсДокумента,      СтрокаПлатеж.КурсВзаиморасчетов,
		Форма.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры

Процедура ОпределитьНаличиеРасчетовВУсловныхЕдиницах(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ЕстьРасчетыВУЕ = Ложь;
	РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
	Для каждого СтрокаПлатеж Из РасшифровкаПлатежа Цикл
		Если СтрокаПлатеж.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах Тогда
			ЕстьРасчетыВУЕ = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Форма.ЕстьРасчетыВУсловныхЕдиницах = ЕстьРасчетыВУЕ;
	
КонецПроцедуры

Процедура УстановитьПодразделениеДт(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратРозничномуПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДивидендов")
		Тогда
		
		Объект.ПодразделениеДт = Неопределено;
		
	Иначе
		// В следующих операциях в проводках в подразделение дебета всегда подставляется подразделение организации:
		//  - Инкассация
		//  - ПрочийРасход
		//  - ЛичныеСредстваПредпринимателя
		//  - ВыдачаПодотчетномуЛицу
		//  - ВзносНаличнымиВБанк
		//  - ВыдачаЗаймаРаботнику
		Объект.ПодразделениеДт = Объект.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораСчетаБанка(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	НовыйМассивПараметров = Новый Массив;
	Для каждого СтарыйПараметр Из Элементы.СчетБанк.ПараметрыВыбора Цикл
		Если СтарыйПараметр.Имя = "Отбор.Ссылка" Тогда
			НовыйМассивПараметров.Добавить(СтарыйПараметр);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ЗапретитьИспользоватьВПроводках", Ложь));
	
	Элементы.СчетБанк.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораДоговораСКонтрагентом(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЭлементРасшифровкаПлатежаДоговорКонтрагента = Элементы.Найти("РасшифровкаПлатежаДоговорКонтрагента");
	Если ЭлементРасшифровкаПлатежаДоговорКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПараметры = Новый Массив();
	ВидыДоговора   = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(Объект.ВидОперации);
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",   Новый ФиксированныйМассив(ВидыДоговора)));
	НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ОплатаВВалюте", Форма.ОплатаВВалюте));
	Если Форма.ОплатаВВалюте ИЛИ НЕ ДокументМожетБытьОформленВВалюте(Объект.ВидОперации) Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.ВалютаВзаиморасчетов", Объект.ВалютаДокумента));
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Форма.ОплатаВВалюте));
	КонецЕсли;
	
	ЭлементРасшифровкаПлатежаДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораВалютыДокумента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЭлементВалютаДокумента = Элементы.Найти("ВалютаДокумента");
	Если ЭлементВалютаДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыеПараметры = Новый Массив();
	Если НЕ Форма.ОплатаВВалюте И Форма.ПользовательУправляетСчетамиУчета Тогда
		НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Форма.ВалютаРегламентированногоУчета));
	КонецЕсли;
	
	ЭлементВалютаДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
	
КонецПроцедуры

Процедура ЗаполнитьНадписиВРасшифровке(СтрокаПлатеж) Экспорт
	
	СтрокаПлатеж.НадписьКурс   = НСтр("ru = 'Курс'");
	СтрокаПлатеж.НадписьСумма  = НСтр("ru = 'Сумма'");
	
КонецПроцедуры

Процедура ОбновитьИтогиУСН(Форма) Экспорт
	
	Если Форма.ПрименениеУСН И НЕ Форма.ПрименениеУСНДоходы Тогда
		Объект = Форма.Объект;
		Если ФормаДокументаОднострочная(Форма) Тогда
			Объект.Графа7_УСН = Форма.РасшифровкаПлатежаРасходыУСН;
		Иначе
			РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
			Объект.Графа7_УСН = РасшифровкаПлатежа.Итог("РасходыУСН");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтражениеСтрокиВУСН(Форма, СтрокаПлатеж) Экспорт
	
	Объект = Форма.Объект;
	
	Если Форма.ПрименениеУСН
		И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту")) Тогда
		
		ПараметрыУСН = УчетУСНКлиентСервер.ПараметрыФормыДокументаДляУСН(Форма);
		ДанныеСтроки = Новый Структура("СуммаПлатежа, РасходыУСН, РаспределятьРасходыУСН, СчетУчетаРасчетовСКонтрагентом, ВидПлатежаПоКредитамЗаймам");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаПлатеж);
		РасходныйКассовыйОрдерВызовСервера.ЗаполнитьОтражениеСтрокиВУСННаСервере(ДанныеСтроки, ПараметрыУСН);
		ЗаполнитьЗначенияСвойств(СтрокаПлатеж, ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьТекстРасходыУСН(Форма) Экспорт
	
	Если Не Форма.ПрименениеУСН Или Форма.ПрименениеУСНДоходы  Тогда
		Форма.ТекстРасходыУСН = "";
		Возврат;
	КонецЕсли;
	
	Объект     = Форма.Объект;
	ВалютаРегл = Форма.ВалютаРегламентированногоУчета;
	СтрФорматСумм = "Л=ru; ЧРД=,; ЧРГ=' '; ЧН=0; ЧГ=3,0";
	
	СуммаРасходыВсего = Объект.СуммаДокумента;
	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета Тогда
		СуммаРасходыВсего = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СуммаРасходыВсего,
			Объект.ВалютаДокумента,   Форма.ВалютаРегламентированногоУчета,
			Форма.КурсДокумента,      1,
			Форма.КратностьДокумента, 1);
	КонецЕсли;
	
	ТекстРасходы = "";
	
	СуммаРасходыНеПринимаемые = СуммаРасходыВсего - Объект.Графа7_УСН;
	Если СуммаРасходыВсего = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Сумма документа не указана'");
	ИначеЕсли СуммаРасходыНеПринимаемые = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Расходы принимаются полностью'");
	ИначеЕсли Объект.Графа7_УСН = 0 Тогда
		ТекстРасходы = НСтр("ru = 'Принимаемые расходы отсутствуют'");
	Иначе
		ТекстРасходы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Непринимаемые расходы: %1 %2'"),
			Формат(СуммаРасходыНеПринимаемые, СтрФорматСумм), ВалютаРегл);
	КонецЕсли;
	
	Форма.ТекстРасходыУСН = ТекстРасходы;
	
КонецПроцедуры

Процедура УправлениеЭлементамиОтраженияВУСН(Форма) Экспорт
	
	Если БанкИКассаФормыКлиентСервер.ФормаДокументаИнтеграцииСБанком(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ПрименениеУСН Или Форма.ПрименениеУСНДоходы  Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Форма.ВалютаРасходовУСН = Форма.ВалютаРегламентированногоУчета;
	
	Элементы.ГруппаОтражениеВУСН.ОтображатьЗаголовок = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда");
	Элементы.ГруппаОтражениеВУСН.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ПрочийРасход")
		ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
				И Форма.ВидНалога = ПредопределенноеЗначение("Перечисление.ВидыНалогов.ПрочиеНалогиИСборы"))
		ИЛИ (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда")
			И НЕ ЗначениеЗаполнено(Объект.ПлатежнаяВедомость)));
	
	Элементы.НДСУСН.Доступность                = (Объект.Графа7_УСН <> 0);
	Элементы.РаспределятьРасходУСН.Доступность = (Объект.Графа7_УСН <> 0);
	
	СформироватьТекстРасходыУСН(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлатежаВБюджет(Форма, НастройкаЗаполнения = Неопределено, ИзменилсяКонтрагент = Ложь) Экспорт
	
	Объект = Форма.Объект;
	
	ЭтоУплатаНалога = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога"));
	
	Если НастройкаЗаполнения = Неопределено
		И ЭтоУплатаНалога
		И Объект.Налог = ПредопределенноеЗначение("Справочник.ВидыНалоговИПлатежейВБюджет.ПрочиеНалогиИСборы") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОбъекта = ПлатежиВБюджетКлиентСерверПереопределяемый.НовыеРеквизитыПлатежаВБюджет(Объект, ЭтоУплатаНалога);
	Если ЭтоУплатаНалога Тогда
		РасходныйКассовыйОрдерВызовСервера.ЗаполнитьРеквизитыПлатежаВБюджетНаСервере(РеквизитыОбъекта, ИсточникДанныхКонтекстаПлатежногоДокумента(Форма), НастройкаЗаполнения);
	КонецЕсли;
	
	ИсключатьСвойства = Новый Массив;
	
	// Функция вызвана из обработчика изменения контрагента
	Если ИзменилсяКонтрагент И РеквизитыОбъекта.Свойство("Контрагент") Тогда
		ИсключатьСвойства.Добавить("Контрагент");
		Если РеквизитыОбъекта.Свойство("СчетКонтрагента") Тогда
			ИсключатьСвойства.Добавить("СчетКонтрагента");
		КонецЕсли;
	КонецЕсли;
	
	ИсключатьСвойстваИзЗаполнения = СтрСоединить(ИсключатьСвойства, ",");
	Если ПустаяСтрока(ИсключатьСвойстваИзЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта);
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыОбъекта,, ИсключатьСвойстваИзЗаполнения);
	КонецЕсли;
	
	Если Форма.Элементы.Найти("НадписьРеквизитыПлатежейВБюджет") <> Неопределено Тогда
		Форма.НадписьРеквизитыПлатежейВБюджет = НадписьРеквизитыПлатежейВБюджет(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбора(Элемент, СписокДанных) Экспорт
	
	Элемент.СписокВыбора.Очистить();
	Для каждого ЭлементДанных Из СписокДанных Цикл
		Элемент.СписокВыбора.Добавить(ЭлементДанных.Значение, ЭлементДанных.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ИсточникДанныхКонтекстаПлатежногоДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураДанныхОбъекта = Новый Структура("СчетУчетаРасчетовСКонтрагентом, СубконтоДт1, СубконтоДт2, СубконтоДт3");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхОбъекта, Объект);
	
	ИсточникДанныхКонтекста = Новый Структура;
	ИсточникДанныхКонтекста.Вставить("Период",                      Объект.Дата);
	ИсточникДанныхКонтекста.Вставить("Организация",                 Объект.Организация);
	ИсточникДанныхКонтекста.Вставить("Получатель",                  Объект.Контрагент);
	ИсточникДанныхКонтекста.Вставить("СчетПолучателя",              Объект.СчетКонтрагента);
	ИсточникДанныхКонтекста.Вставить("Налог",                       Объект.Налог);
	ИсточникДанныхКонтекста.Вставить("ВидНалоговогоОбязательства",  Объект.ВидНалоговогоОбязательства);
	ИсточникДанныхКонтекста.Вставить("РегистрацияВНалоговомОргане", РасходныйКассовыйОрдерВызовСервера.ПолучитьРегистрациюВНалоговомОргане(СтруктураДанныхОбъекта));
	
	Возврат ИсточникДанныхКонтекста;
	
КонецФункции

Функция ЕстьРасшифровкаПлатежа(ВидОперации) Экспорт
	
	ЕстьРасшифровка = (ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ОплатаПоставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратПокупателю")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту"));
	
	Возврат ЕстьРасшифровка;
	
КонецФункции

Функция ПустаяСтруктураСвойстваПлатежа() Экспорт
	
	СвойстваПлатежа = Новый Структура;
	СвойстваПлатежа.Вставить("ДоговорКонтрагента",                         ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("Сделка",                                     Неопределено);
	СвойстваПлатежа.Вставить("СчетУчетаРасчетовСКонтрагентом",             ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("СчетУчетаРасчетовПоАвансам",                 ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("ДоговорКонтрагентаВалютаВзаиморасчетов",     ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("СпособПогашенияЗадолженности",               ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.Автоматически"));
	СвойстваПлатежа.Вставить("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Ложь);
	СвойстваПлатежа.Вставить("СтавкаНДС",                                  ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("КурсВзаиморасчетов",                         0);
	СвойстваПлатежа.Вставить("КратностьВзаиморасчетов",                    0);
	СвойстваПлатежа.Вставить("СтатьяДвиженияДенежныхСредств",              ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("ВидПлатежаПоКредитамЗаймам",                 ПредопределенноеЗначение("Перечисление.ВидыПлатежейПоКредитамЗаймам.ПустаяСсылка"));
	СвойстваПлатежа.Вставить("ПорядокОтраженияДохода",                     Неопределено);
	
	Возврат СвойстваПлатежа;
	
КонецФункции

Функция ТекущиеПараметрыОбъекта(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОбъекта = Новый Структура("Дата, ВидОперации, Организация, Налог, Контрагент, СчетКонтрагента, 
		|ВалютаДокумента, СчетКасса, БезЗакрывающихДокументов");
	ЗаполнитьЗначенияСвойств(ПараметрыОбъекта, Объект);
	
	
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено,   Форма.СвойстваПлатежа.ДоговорКонтрагента));
	ПараметрыОбъекта.Вставить("ВалютаРегламентированногоУчета", Форма.ВалютаРегламентированногоУчета);
	ПараметрыОбъекта.Вставить("ОплатаВВалюте",                  Форма.ОплатаВВалюте);
	ПараметрыОбъекта.Вставить("ПрименениеУСН",                  Форма.ПрименениеУСН);
	ПараметрыОбъекта.Вставить("ПлательщикНДС",                  Форма.ПлательщикНДС);
	ПараметрыОбъекта.Вставить("РозничнаяТорговляОблагаетсяЕНВД", Форма.РозничнаяТорговляОблагаетсяЕНВД);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда") Тогда
		ПараметрыОбъекта.Вставить("ПлатежнаяВедомость", Объект.ПлатежнаяВедомость);
		ПараметрыОбъекта.Вставить("Ссылка",             Объект.Ссылка);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов") Тогда
		ПараметрыОбъекта.Вставить("ВыплатаДепонентов",  Объект.ВыплатаДепонентов);
		ПараметрыОбъекта.Вставить("Ссылка",             Объект.Ссылка);
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратЗайма")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВозвратКредита") Тогда
		ПараметрыОбъекта.Вставить("ВидПлатежаПоКредитамЗаймам",
			?(Форма.СвойстваПлатежа = Неопределено, Неопределено, Форма.СвойстваПлатежа.ВидПлатежаПоКредитамЗаймам));
	КонецЕсли;
	
	СтатьяДДС = УчетДенежныхСредствВызовСервера.СтатьяДДСПоУмолчанию(Объект.ВидОперации);
	Если НЕ ЗначениеЗаполнено(СтатьяДДС) Тогда
		ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств",
		?(Форма.СвойстваПлатежа = Неопределено, Неопределено, Форма.СвойстваПлатежа.СтатьяДвиженияДенежныхСредств));
	Иначе
		ПараметрыОбъекта.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДДС);
	КонецЕсли;
	
	Возврат ПараметрыОбъекта;
	
КонецФункции

Функция НадписьРеквизитыПлатежейВБюджет(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.НадписьРеквизитыПлатежейВБюджет(Объект);
	
КонецФункции

Процедура ЗаголовокГруппыРеквизитовПечатнойФормы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если Элементы.Найти("ГруппаРеквизитыПечатнойФормы") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Выдать)
		ИЛИ ЗначениеЗаполнено(Объект.ПоДокументу)
		ИЛИ ЗначениеЗаполнено(Объект.Основание)
		ИЛИ ЗначениеЗаполнено(Объект.Приложение) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Реквизиты печатной формы: '")
			+ ?(ЗначениеЗаполнено(Объект.Выдать), СокрЛП(Строка(Объект.Выдать)) + "; ", "")
			+ ?(ЗначениеЗаполнено(Объект.ПоДокументу), СокрЛП(Строка(Объект.ПоДокументу)) + "; ", "")
			+ ?(ЗначениеЗаполнено(Объект.Основание), СокрЛП(Строка(Объект.Основание)) + "; ", "")
			+ ?(ЗначениеЗаполнено(Объект.Приложение), СокрЛП(Строка(Объект.Приложение)) + ";", "");
		ТекстЗаголовка = СокрЛП(ТекстЗаголовка);
		Если Прав(ТекстЗаголовка, 1) = ";" Тогда
			
			ФрагментТекста = Лев(ТекстЗаголовка, СтрДлина(ТекстЗаголовка) - 1);
			ТекстЗаголовка = ФрагментТекста + ?(Прав(ФрагментТекста, 1) = ".", "", ".");
			
		КонецЕсли;
		УстановитьЗаголовокГруппы(Форма, "ГруппаРеквизитыПечатнойФормы", ТекстЗаголовка);
		
	Иначе
		
		УстановитьЗаголовокГруппы(Форма, "ГруппаРеквизитыПечатнойФормы", НСтр("ru = 'Реквизиты печатной формы'"));
		
	КонецЕсли;

КонецПроцедуры // ЗаголовокГруппыРеквизитовПечатнойФормы()

Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст) Экспорт
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

Функция ДокументМожетБытьОформленВВалюте(ВидОперации) Экспорт
	
	Возврат   ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДепонентов")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаРаботнику")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаСотрудникуПоДоговоруПодряда")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыдачаЗаймаКонтрагенту")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.УплатаНалога")
			И ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРКО.ВыплатаДивидендов");
	
КонецФункции

Функция НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект = Неопределено, СтрокаСписка = Неопределено, КонтейнерОбъект = Неопределено, КонтейнерСтрокаСписка = Неопределено) Экспорт

	// Код этой функции сформирован автоматически с помощью СчетаУчетаВДокументах.КодФункцииНачатьЗаполнениеСчетовУчета()

	ПараметрыЗаполнения = СчетаУчетаВДокументахКлиентСервер.НовыйПараметрыЗаполнения(
		"РасходныйКассовыйОрдер",
		ПричиныИзменения,
		Объект,
		СтрокаСписка,
		КонтейнерОбъект,
		КонтейнерСтрокаСписка);

	// 1. Заполняемые реквизиты
	// ВалютаДокумента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетКасса");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// ВидОперации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// СтатьяДвиженияДенежныхСредств
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// Организация
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// ПодразделениеОрганизации
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// РасшифровкаПлатежа.СпособПогашенияЗадолженности
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// Контрагент
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// РасшифровкаПлатежа.ДоговорКонтрагента
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовПоАвансам");
	КонецЕсли;

	// РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом");
	КонецЕсли;

	// Дата
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "ПодразделениеДт");
	КонецЕсли;

	// Налог
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СчетУчетаРасчетовСКонтрагентом");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// СубконтоДт1
	Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт1");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт2");
		СчетаУчетаВДокументахКлиентСервер.НачатьЗаполнениеРеквизита(ПараметрыЗаполнения, "СубконтоДт3");
	КонецЕсли;

	// 2. (если требуется) Передадим на сервер данные, необходимые для заполнения
	Если ПараметрыЗаполнения.Свойство("Контейнер") Тогда
		// ВалютаДокумента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВалютаДокумента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетКасса");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
		КонецЕсли;

		// ВидОперации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ВидОперации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// СтатьяДвиженияДенежныхСредств
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// Организация
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Организация") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// ПодразделениеОрганизации
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
		КонецЕсли;

		// РасшифровкаПлатежа.СпособПогашенияЗадолженности
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СпособПогашенияЗадолженности") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// Контрагент
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Контрагент") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// РасшифровкаПлатежа.ДоговорКонтрагента
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ДоговорКонтрагента") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
		КонецЕсли;

		// РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовПоАвансам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
		КонецЕсли;

		// РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("РасшифровкаПлатежа.ВидПлатежаПоКредитамЗаймам") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ВидПлатежаПоКредитамЗаймам");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "СпособПогашенияЗадолженности");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Строка", "ДоговорКонтрагента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
		КонецЕсли;

		// Дата
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Дата") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеДт");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ПодразделениеОрганизации");
		КонецЕсли;

		// Налог
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("Налог") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

		// СубконтоДт1
		Если ПараметрыЗаполнения.ПричиныИзменения.Найти("СубконтоДт1") <> Неопределено Тогда
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт1");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СчетУчетаРасчетовСКонтрагентом");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВалютаДокумента");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "ВидОперации");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СтатьяДвиженияДенежныхСредств");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Организация");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Дата");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Налог");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "Контрагент");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт2");
			СчетаУчетаВДокументахКлиентСервер.ДополнитьДанныеЗаполнения(ПараметрыЗаполнения, "Объект", "СубконтоДт3");
		КонецЕсли;

	КонецЕсли; // Нужно передавать на сервер данные заполнения
	
	Возврат ПараметрыЗаполнения;

КонецФункции

Процедура ИнициализироватьСвойстваПлатежа(Форма) Экспорт
	
	Если Форма.СвойстваПлатежа = Неопределено Тогда
		Форма.СвойстваПлатежа = ПустаяСтруктураСвойстваПлатежа();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступностьСтавкиНДС(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.РасшифровкаПлатежаСуммаНДС.ТолькоПросмотр = (Форма.РасшифровкаПлатежаСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") 
		Или Форма.РасшифровкаПлатежаСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	
КонецПроцедуры

#Область РасшифровкаПлатежа

Функция СтруктураРеквизитовРасшифровкаПлатежа()
	
	Возврат Новый Структура("ДоговорКонтрагента,
		|СпособПогашенияЗадолженности,
		|Сделка,
		|СтатьяДвиженияДенежныхСредств,
		|КурсВзаиморасчетов,
		|КратностьВзаиморасчетов,
		|СуммаПлатежа,
		|СуммаВзаиморасчетов,
		|СтавкаНДС,
		|СуммаНДС,
		|СчетНаОплату,
		|СчетУчетаРасчетовСКонтрагентом,
		|СчетУчетаРасчетовПоАвансам,
		|ДоговорКонтрагентаВалютаВзаиморасчетов,
		|РасходыУСН,
		|РаспределятьРасходыУСН,
		|ВидПлатежаПоКредитамЗаймам,
		|ОтражениеДоходаПредставление,
		|ПорядокОтраженияДохода");
	
КонецФункции

Функция ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма) Экспорт
	
	РеквизитыРасшифровки = СтруктураРеквизитовРасшифровкаПлатежа();
	
	Результат = Новый Структура;
	Для каждого КлючИЗначение Из РеквизитыРасшифровки Цикл
		Результат.Вставить(КлючИЗначение.Ключ, Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ]);
	КонецЦикла;
	
	// Временные реквизиты формы
	Результат.Вставить("ДоговорКонтрагентаВалютаВзаиморасчетов",     Форма.РасшифровкаПлатежаДоговорКонтрагентаВалютаВзаиморасчетов);
	Результат.Вставить("ДоговорКонтрагентаРасчетыВУсловныхЕдиницах", Форма.ЕстьРасчетыВУсловныхЕдиницах);
	
	Возврат Результат;
	
КонецФункции

// Переносит строку табличной части РасшифровкаПлатежа в реквизиты однострочной формы, если взведен флаг "ЗаполнитьРеквизитыФормы"
// или, наоборот, заполняет первую строку названной табличной части на основании реквизитов однострочной формы.
//
// Параметры:
//  Форма                    - ФормаКлиентскогоПриложения - однострочная форма РКО
//  ЗаполнитьРеквизитыФормы	 - Булево - если ИСТИНА, то заполняются реквизиты однострочной формы, если Ложь - первая строка ТЧ
//  СтрокаПлатежа - Структура - данные строки табличной части, являющейся источником изменений.
//
Процедура ЗаполнитьРеквизитыРасшифровкаПлатежа(Форма, ЗаполнитьРеквизитыФормы = Ложь, СтрокаПлатежа = Неопределено) Экспорт
	
	Если НЕ ЗаполнитьРеквизитыФормы И НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если НЕ ФормаДокументаОднострочная(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Если НЕ ЗаполнитьРеквизитыФормы Тогда
			Возврат;
		ИначеЕсли СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		Если НЕ ЗаполнитьРеквизитыФормы И СтрокаПлатежа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураРеквизитовРасшифровкаПлатежа() Цикл
		Если ЗаполнитьРеквизитыФормы Тогда
			Если СтрокаПлатежа <> Неопределено Тогда
				// Заполняются реквизиты однострочной формы
				СтрокаПлатежа.Свойство(КлючИЗначение.Ключ, Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ]);
			Иначе
				Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ] = Объект.РасшифровкаПлатежа[0][КлючИЗначение.Ключ];
			КонецЕсли;
		Иначе
			// Заполняются реквизиты ТЧ документа
			Объект.РасшифровкаПлатежа[0][КлючИЗначение.Ключ] = Форма["РасшифровкаПлатежа" + КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаполнитьРеквизитыФормы Тогда
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Форма.РасшифровкаПлатежаСуммаПлатежа;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция НазваниеТаблицыРасшифровкиПлатежа(ВидОперации) Экспорт
	Перем НазваниеТабличнойЧасти;
	
	Если ЕстьРасшифровкаПлатежа(ВидОперации) Тогда
		НазваниеТабличнойЧасти = "РасшифровкаПлатежа";
	КонецЕсли;
	
	Возврат НазваниеТабличнойЧасти;
	
КонецФункции

Функция РасшифровкаПлатежаТекущиеДанные(Форма, ТабличнаяЧасть = "РасшифровкаПлатежа") Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Результат = Неопределено;
	Если ФормаДокументаОднострочная(Форма) Тогда
		Результат = ДанныеРасшифровкиПлатежаОднострочнойФормы(Форма);
	Иначе
		РасшифровкаПлатежа = ПолучитьРасшифровкаПлатежа(Форма);
		Если Элементы.Найти(ТабличнаяЧасть) <> Неопределено
			И Элементы[ТабличнаяЧасть].ТекущаяСтрока <> Неопределено Тогда
			Результат = РасшифровкаПлатежа.НайтиПоИдентификатору(Элементы[ТабличнаяЧасть].ТекущаяСтрока);
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			Если РасшифровкаПлатежа.Количество() = 0 Тогда
				РасшифровкаПлатежа.Добавить();
			КонецЕсли;
			
			Результат = РасшифровкаПлатежа[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФормаДокументаОднострочная(Форма) Экспорт
	
	Возврат БанкИКассаФормыКлиентСервер.ФормаДокументаОднострочная(Форма);
	
КонецФункции

Функция ПолучитьРасшифровкаПлатежа(Форма) Экспорт
	
	Возврат РеквизитДокумента(Форма, "РасшифровкаПлатежа");
	
КонецФункции

Функция РеквизитДокумента(Форма, ИмяРеквизита) Экспорт
	
	Если ФормаРасшифровкиПлатежа(Форма) Тогда
		// Это дополнительная форма редактирования табличной части.
		// Необходимые реквизиты документа хранятся в ней в качестве отдельных реквизитов.
		Объект = Форма;
	Иначе
		// Это основная форма документа, у нее есть реквизит Объект.
		Объект = Форма.Объект;
	КонецЕсли;
	
	Возврат Объект[ИмяРеквизита];
	
КонецФункции

Функция ФормаРасшифровкиПлатежа(Форма) Экспорт
	
	Возврат СтрНайти(Форма.ИмяФормы, "ФормаРасшифровкаПлатежа") > 0;
	
КонецФункции

#КонецОбласти

#Область ОтражениеДоходов

Функция ИменаЭлементовОтраженияДохода() Экспорт
	
	Имена = Новый Массив;
	
	Имена.Добавить("РасшифровкаПлатежаОтражениеДоходаПредставление");
	
	Возврат Имена;
	
КонецФункции

#КонецОбласти

#Область УплатаНалога

Функция ПредставлениеПериодаУплатыНалога(Период, ВидНалога) Экспорт
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.ПредставлениеПериодаУплатыНалога(Период, ВидНалога);
	
КонецФункции

#КонецОбласти

#Область ВыплатаЗаработнойПлаты

Процедура ЗаполнитьРеквизитыВыплатаЗарплаты(Форма) Экспорт
	
	Если НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.ВыплатаЗаработнойПлаты.Количество() = 0 Тогда
		СтрокаПлатеж = Объект.ВыплатаЗаработнойПлаты.Добавить();
	Иначе
		СтрокаПлатеж = Объект.ВыплатаЗаработнойПлаты[0];
	КонецЕсли;
	
	СтрокаПлатеж.Ведомость    = Форма.ВыплатаЗаработнойПлатыВедомость;
	СтрокаПлатеж.СуммаКВыплате = Объект.СуммаДокумента;
	
КонецПроцедуры

Процедура УстановитьПустоеЗначениеВыплатаЗарплатыВедомость(Ведомость, УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыплатаДепонентов

Процедура ЗаполнитьРеквизитыВыплатаДепонентов(Форма, ЗаполнитьРеквизитыФормы = Ложь) Экспорт
	
	Если НЕ Форма.Модифицированность Тогда
		// Если ничего не менялось в документе, то и программно не модифицируем.
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.ВыплатаДепонентов.Количество() = 0 Тогда
		СтрокаПлатеж = Объект.ВыплатаДепонентов.Добавить();
		УстановитьПустоеЗначениеВыплатаДепонентовВедомость(СтрокаПлатеж.Ведомость, Форма.УчетЗарплатыИКадровВоВнешнейПрограмме);
	Иначе
		СтрокаПлатеж = Объект.ВыплатаДепонентов[0];
	КонецЕсли;
	
	Если ЗаполнитьРеквизитыФормы Тогда
		Форма.ВыплатаДепонентовВедомость = СтрокаПлатеж.Ведомость;
		Объект.СуммаДокумента            = Объект.ВыплатаДепонентов.Итог("СуммаКВыплате");
	Иначе
		СтрокаПлатеж.Ведомость     = Форма.ВыплатаДепонентовВедомость;
		СтрокаПлатеж.СуммаКВыплате = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПустоеЗначениеВыплатаДепонентовВедомость(Ведомость, УчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт
	
	Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда
		Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплаты.ПустаяСсылка");
	Иначе
		Ведомость = ПредопределенноеЗначение("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ДанныеТабличнойЧасти(Объект, ФормаСТаблицей, ИмяТабличнойЧасти) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") И Объект.Свойство(ИмяТабличнойЧасти) 
		Или ФормаСТаблицей = Неопределено Тогда
		
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	Иначе
		ТабличнаяЧасть = ФормаСТаблицей[ИмяТабличнойЧасти];
	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции

Процедура ВидимостьДоступностьПолейПриИзмененииСпособаПогашения(Форма) Экспорт
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	НазваниеТабличнойЧасти = НазваниеТаблицыРасшифровкиПлатежа(Объект.ВидОперации);
	Если НазваниеТабличнойЧасти <> "РасшифровкаПлатежа" Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлатежа = РасшифровкаПлатежаТекущиеДанные(Форма);
	
	Элементы.РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентом.Доступность =
		СтрокаПлатежа.СпособПогашенияЗадолженности <> ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.НеПогашать");
	Элементы.РасшифровкаПлатежаСделка.Видимость = СтрокаПлатежа.СпособПогашенияЗадолженности = ПредопределенноеЗначение("Перечисление.СпособыПогашенияЗадолженности.ПоДокументу");
	
КонецПроцедуры

#КонецОбласти
