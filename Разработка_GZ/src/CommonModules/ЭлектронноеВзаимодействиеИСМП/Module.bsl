#Область ПрограммныйИнтерфейс

#Область ЗаполнениеДанныхЭДОПоПрикладнымДокументам

#Область ПроверкаЗаполнения

//Проверяет совпадение табличной части "Штрихкоды упаковок" и табличной части ("Товары")
//   в отношении маркируемой продукции перед формированием документа ЭДО.
//   Проверка не выполняется если по документу уже оформлена отгрузка товаров ИСМП (прямой обмен).
//   Допущение: в документе по одной номенклатуре нет отновременно строк с указанием серий и строк без серий.
//
// Параметры:
//   ПроверяемыйДокумент - ДокументСсылка - проверяемый документ
// Возвращаемое значение:
//   Булево - номенклатура и количество по маркируемой продукции совпадают
Функция ДанныеДокументаСоответствуютДаннымУпаковок(ПроверяемыйДокумент) Экспорт
	
	// Проверка прямого обмена: при его использовании проверка штрихкодов не производится
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ПроверяемыйДокумент);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтгрузкаТоваровИСМП.Ссылка
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК ОтгрузкаТоваровИСМП
	|ГДЕ
	|	НЕ ОтгрузкаТоваровИСМП.ПометкаУдаления
	|	И ОтгрузкаТоваровИСМП.ДокументОснование = &ДокументОснование";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИмяДокумента = ПроверяемыйДокумент.Метаданные().Имя;
	
	ИмяТаблицы = СтрШаблон("Документ.%1.ШтрихкодыУпаковок", ИмяДокумента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаШтрихКодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	&ИмяТаблицы КАК ТаблицаШтрихКодыУпаковок
	|ГДЕ
	|	ТаблицаШтрихКодыУпаковок.Ссылка = &ПроверяемыйДокумент";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	Запрос.УстановитьПараметр("ПроверяемыйДокумент", ПроверяемыйДокумент);
	
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	ВидыПродукции = Новый Массив(ИнтеграцияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции(НачалоДня(ПроверяемыйДокумент.Дата), Ложь));
	
	ДанныеДерева    = Содержимое(ШтрихкодыУпаковок, ВидыПродукции);
	ДанныеДокумента = ТаблицаМаркируемойПродукцииДокумента(ПроверяемыйДокумент, ВидыПродукции);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДерева.Номенклатура,
	|	ДанныеДерева.Характеристика,
	|	ДанныеДерева.Серия,
	|	ДанныеДерева.Количество
	|ПОМЕСТИТЬ ДанныеДерева
	|ИЗ
	|	&ДанныеДерева КАК ДанныеДерева
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ДанныеДокумента.Серия,
	|	ДанныеДокумента.Количество
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура      КАК Номенклатура,
	|	ДанныеДокумента.Характеристика    КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДокумента.Серия
	|	КОНЕЦ                             КАК Серия,
	|	СУММА(ДанныеДокумента.Количество) КАК Количество
	|ПОМЕСТИТЬ ОчищенныеДанныеДокумента
	|ИЗ
	|	ДанныеДокумента КАК ДанныеДокумента
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Номенклатура,
	|	ДанныеДокумента.Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДокумента.Серия
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДерева.Номенклатура      КАК Номенклатура,
	|	ДанныеДерева.Характеристика    КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Не ДанныеДокумента.Номенклатура ЕСТЬ NULL
	|			ТОГДА &ПустаяСерия
	|		КОГДА ДанныеДерева.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДерева.Серия
	|	КОНЕЦ                          КАК Серия,
	|	СУММА(ДанныеДерева.Количество) КАК Количество
	|ПОМЕСТИТЬ ОчищенныеДанныеДерева
	|ИЗ
	|	ДанныеДерева КАК ДанныеДерева
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОчищенныеДанныеДокумента КАК ДанныеДокумента
	|		ПО ДанныеДерева.Номенклатура = ДанныеДокумента.Номенклатура
	|		И ДанныеДерева.Характеристика = ДанныеДокумента.Характеристика
	|		И ДанныеДокумента.Серия = &ПустаяСерия
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДерева.Номенклатура,
	|	ДанныеДерева.Характеристика,
	|	ВЫБОР
	|		КОГДА Не ДанныеДокумента.Номенклатура ЕСТЬ NULL
	|			ТОГДА &ПустаяСерия
	|		КОГДА ДанныеДерева.Серия В (&НезаполненнаяСерия)
	|			ТОГДА &ПустаяСерия
	|		ИНАЧЕ ДанныеДерева.Серия
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДанныеДокумента.Номенклатура, ДанныеДерева.Номенклатура)     КАК Номенклатура,
	|	ЕСТЬNULL(ДанныеДокумента.Характеристика, ДанныеДерева.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(ДанныеДокумента.Серия, ДанныеДерева.Серия)                   КАК Серия,
	|	ЕСТЬNULL(ДанныеДерева.Количество , 0) - ЕСТЬNULL(ДанныеДокумента.Количество,0) КАК Различие
	|ИЗ
	|	ОчищенныеДанныеДокумента КАК ДанныеДокумента
	|		ПОЛНОЕ СОЕДИНЕНИЕ ОчищенныеДанныеДерева КАК ДанныеДерева
	|		ПО ДанныеДерева.Номенклатура = ДанныеДокумента.Номенклатура
	|		И ДанныеДерева.Характеристика = ДанныеДокумента.Характеристика
	|		И ДанныеДерева.Серия = ДанныеДокумента.Серия
	|ГДЕ
	|	ЕСТЬNULL(ДанныеДерева.Количество , 0) - ЕСТЬNULL(ДанныеДокумента.Количество,0) <> 0");
	
	Запрос.УстановитьПараметр("ДанныеДерева",    ДанныеДерева);
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	Запрос.УстановитьПараметр("ПустаяСерия",        ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("НезаполненнаяСерия", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

//Проверяет что по текущему прикладному документу есть электронный документ (входящий или исходящий).
//   Вариант: по текущему прикладному документу есть электронный документ с данными о маркируемых товарах.
//
// Параметры:
//   Ссылка - ДокументСсылка - проверяемый документ
//   СодержащимДанныеОМаркируемыхТоварах - Булево - отбор документа ЭДО с данными о маркируемых товарах
//
// Возвращаемое значение:
//   Булево - с текущим документом связан электронный документ.
//
Функция ДокументСвязанСЭлектронным(Ссылка, СодержащимДанныеОМаркируемыхТоварах = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МодульОбменСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентами");
	Статус = МодульОбменСКонтрагентами.СтатусДокументооборота(Ссылка);
	
	Если Статус.ЭлектронныйДокумент = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Не СодержащимДанныеОМаркируемыхТоварах Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВерсияАПИ() = 1 Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статус.ЭлектронныйДокумент, "СодержитДанныеОМаркируемыхТоварах");
	Иначе 
		Возврат МодульОбменСКонтрагентами.СведенияОбЭлектронномДокументе(Статус.ЭлектронныйДокумент).СодержитМаркируемыеТовары;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СоставШтрихкодовУпаковок

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
//   для дальнейшего сопоставления информации об упаковках с товарной частью.
// Для транспортных мультитоварных упаковок номенклатура (характеристика, серия)- это различная номенклатура 
//   (характеристика, серия) каждого вложенного (на любом уровне) индивидуального штрихкода, для монотоварных упаковок и
//   кодов маркировки - содержимое.
// 
// Параметры:
// 	ТаблицаУпаковок - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Ссылка   - Произвольный - объект-владелец штрихкода
// 	 * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод
// Возвращаемое значение:
// ТаблицаЗначений - таблица упаковок с товарными данными:
// 	 * Ссылка             - Произвольный - объект-владелец штрихкода - исходная колонка
// 	 * Штрихкод           - СправочникСсылка.ШтрихкодыУпаковокТоваров - ссылка на индивидуальный штрихкод содержимого или мультитоварную упаковку
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
// 	 * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
// 	 * ЗначениеШтрихкода  - Строка - текстовое представление исходного штрихкода для передачи в ЭДО
// 	 * Мультитоварная     - Булево - признак мультитоварной упаковки
// 	 * ВидПродукции       - Перечислениессылка.ВидыПродукцииИС - вид продукции номенклатуры для кодировки значения штрихкода
// 	 * ВидУпаковки        - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки номенклатуры для кодировки значения штрихкода
// 	 * Обработан          - Булево - признак сопоставления строки товарной части документа
//
Функция ЧастичноеСодержимое(ТаблицаУпаковок) Экспорт
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка   КАК Ссылка,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ПОМЕСТИТЬ ШтрихкодыВходящие
		|ИЗ
		|	&ШтрихкодУпаковки КАК ШтрихкодыУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Штрихкод
		|");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка            КАК Ссылка,
		|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыВходящие.Штрихкод          КАК Штрихкод,
		|	ШтрихкодыУпаковок.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковок.Серия             КАК Серия,
		|	ШтрихкодыУпаковок.ТипУпаковки       КАК ТипУпаковки,
		|	ШтрихкодыУпаковок.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка) КАК Мультитоварная,
		|	ЛОЖЬ                                КАК Обработан
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|");
	
	СписокЗапросов.Добавить(
		ШтрихкодированиеИС.ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Ссылка                    КАК Ссылка,
		|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
		|	ДанныеШтрихкодовУпаковок.Штрихкод                  КАК Штрихкод,
		|	ДанныеШтрихкодовУпаковок.Номенклатура              КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика            КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Серия                     КАК Серия,
		|	ДанныеШтрихкодовУпаковок.Мультитоварная            КАК Мультитоварная,
		|	ДанныеШтрихкодовУпаковок.Обработан                 КАК Обработан,
		|	ДанныеШтрихкодовУпаковок.ТипУпаковки               КАК ТипУпаковки,
		|	СвойстваМаркируемойПродукции.ВидПродукции          КАК ВидПродукции,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыУпаковокИС.ПустаяСсылка) КАК ВидУпаковки
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		 И ДанныеШтрихкодовУпаковок.Характеристика = СвойстваМаркируемойПродукции.Характеристика
		|",
		"Результат");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка   КАК Ссылка,
		|	ШтрихкодыВходящие.Штрихкод КАК Родитель,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|		И ШтрихкодыУпаковок.НомерСтроки = 1
		|		И ШтрихкодыУпаковок.Ссылка.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)",
		"ВложенныеЗаписи");
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыВходящие.Ссылка   КАК Ссылка,
		|	ШтрихкодыВходящие.Штрихкод КАК Родитель,
		|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШтрихкодыВходящие КАК ШтрихкодыВходящие
		|		ПО ШтрихкодыВходящие.Штрихкод = ШтрихкодыУпаковок.Ссылка
		|		И ШтрихкодыВходящие.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)",
		"МультитоварныеУпаковки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ТаблицаУпаковок);
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
	
	Результат              = РезультатыЗапроса["Результат"].Выгрузить(); // Коды маркировки и шаблоны для упаковок
	ВложенныеЗаписи        = РезультатыЗапроса["ВложенныеЗаписи"].Выгрузить(); // Монотоварные упаковки
	МультитоварныеУпаковки = РезультатыЗапроса["МультитоварныеУпаковки"].Выгрузить(); // Мультитоварные упаковки
	
	Результат.Индексы.Добавить("Ссылка, Штрихкод");
	СтруктураПоиска = Новый Структура("Ссылка, Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов["Результат"].Выгрузить();
		ВложенныеЗаписи.Индексы.Добавить("Ссылка, Штрихкод");
		Для Каждого ДанныеШтрихКода Из ДочерниеЗаписи Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеШтрихКода);
			ДанныеРодителя = ВложенныеЗаписи.НайтиСтроки(СтруктураПоиска)[0];
			СтруктураПоиска.Штрихкод = ДанныеРодителя.Родитель;
			СтрокаЗаполнения = Результат.НайтиСтроки(СтруктураПоиска)[0];
			ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, ДанныеШтрихКода, "Штрихкод, Номенклатура, Характеристика, Серия, ВидПродукции");
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов["ВложенныеЗаписи"].Выгрузить();
	КонецЦикла;
	
	//После первичного получения мультитоварной упаковки нужна вся вложенность
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"И ШтрихкодыВходящие.Штрихкод.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)", "");
	СоответствиеПоОбъектам = Новый Соответствие;
	
	Результат.Индексы.Добавить("Ссылка, Штрихкод, Номенклатура, Характеристика, Серия, ВидПродукции");
	ПоляПоискаДублей = Новый Структура("Ссылка, Штрихкод, Номенклатура, Характеристика, Серия, ВидПродукции");
		
	Пока МультитоварныеУпаковки.Количество() Цикл
		
		Для Каждого СтрокаВложение Из МультитоварныеУпаковки Цикл
			
			СоответствиеУпаковок = СоответствиеПоОбъектам.Получить(СтрокаВложение.Ссылка);
			Если СоответствиеУпаковок = Неопределено Тогда
				СоответствиеУпаковок = Новый Соответствие;
				СоответствиеУпаковок.Вставить(СтрокаВложение.Штрихкод, СтрокаВложение.Родитель);
				СоответствиеПоОбъектам.Вставить(СтрокаВложение.Ссылка, СоответствиеУпаковок);
			ИначеЕсли СоответствиеУпаковок.Получить(СтрокаВложение.Родитель) = Неопределено Тогда
				СоответствиеУпаковок.Вставить(СтрокаВложение.Штрихкод, СтрокаВложение.Родитель);
			Иначе
				СоответствиеУпаковок.Вставить(СтрокаВложение.Штрихкод, СоответствиеУпаковок.Получить(СтрокаВложение.Родитель));
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", МультитоварныеУпаковки);
		ДанныеВложенныхШтрихкодов = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов["Результат"].Выгрузить();
		
		МультитоварныеУпаковки.Индексы.Добавить("Ссылка, Штрихкод");
		
		Для Каждого ДанныеШтрихКода Из ДочерниеЗаписи Цикл
			Если ЗначениеЗаполнено(ДанныеШтрихКода.Номенклатура) Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеШтрихКода);
				ДанныеРодителя = МультитоварныеУпаковки.НайтиСтроки(СтруктураПоиска)[0];
				СтруктураПоиска.Штрихкод = СоответствиеУпаковок.Получить(ДанныеРодителя.Штрихкод);
				СтрокаЗаполнения = Результат.НайтиСтроки(СтруктураПоиска)[0];
				Если Не ЗначениеЗаполнено(СтрокаЗаполнения.Номенклатура) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаЗаполнения, ДанныеШтрихКода, "Номенклатура, Характеристика, Серия, ВидПродукции");
				Иначе
					ЗаполнитьЗначенияСвойств(ПоляПоискаДублей, ДанныеШтрихКода);
					ПоляПоискаДублей.Штрихкод = СтруктураПоиска.Штрихкод;
					Если Результат.НайтиСтроки(ПоляПоискаДублей).Количество() = 0 Тогда
						НоваяСтрокаМультитоварнойУпаковки = Результат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаМультитоварнойУпаковки, СтрокаЗаполнения);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаМультитоварнойУпаковки, ПоляПоискаДублей);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		МультитоварныеУпаковки = ДанныеВложенныхШтрихкодов["МультитоварныеУпаковки"].Выгрузить();
	КонецЦикла;
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	ПараметрыНормализацииТабакМаркируемыйТовар = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакМаркируемыйТовар.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакМаркируемыйТовар.НачинаетсяСоСкобки       = Истина;
	ПараметрыНормализацииТабакМаркируемыйТовар.ВключатьМРЦ              = Истина;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			СтрокаТаблицы.ЗначениеШтрихкода, СтрокаТаблицы.ВидПродукции, Ложь);
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаТаблицы.ВидПродукции) Тогда
			
			Если РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, СтрокаТаблицы.ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			Иначе
				НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, СтрокаТаблицы.ВидПродукции, ПараметрыНормализацииТабакМаркируемыйТовар);
			КонецЕсли;
			
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаТаблицы.ВидПродукции) Тогда
			
			НормализованныйКодМаркировки = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(
				РезультатРазбора, ПараметрыНормализацииПрочее);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатРазбора.ВидУпаковки) Тогда
			СтрокаТаблицы.ВидУпаковки = РезультатРазбора.ВидУпаковки;
		ИначеЕсли СтрокаТаблицы.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		ИначеЕсли ШтрихкодированиеИСКлиентСервер.ВозможнаГрупповаяУпаковка(
			РезультатРазбора.ВидУпаковки, РезультатРазбора.ДанныеРазбора) Тогда
			СтрокаТаблицы.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
		КонецЕсли;
		
		СтрокаТаблицы.ЗначениеШтрихкода = НормализованныйКодМаркировки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разворачивает таблицу транспортных и индивидуальных штрихкодов до номенклатуры, характеристики, серии
// для дальнейшего сравнения информации об упаковках с товарной частью.
// 
// Параметры:
//   ШтрихкодыУпаковок - Массив Из СправочникСсылка.ШтрихкодыУпаковокТоваров - Исходные штрихкоды упаковок
//   ВидыПродукцииИС   - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС, Неопределено -
//      ограничение содержимого штрихкодов упаковок по виду/видам маркируемой продукции.
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица состава упаковок:
//   * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
//   * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
//   * Серия              - ОпределяемыйТип.СерияНоменклатуры - содержимое
//   * Количество         - Число - количество единиц содержимого
Функция Содержимое(Знач ШтрихкодыУпаковок, Знач ВидыПродукцииИС = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыУпаковок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Номенклатура             КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика           КАК Характеристика,
	|	ШтрихкодыУпаковок.Серия                    КАК Серия,
	|	ВЫБОР
	|		КОГДА ШтрихкодыУпаковок.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ ШтрихкодыУпаковок.Количество
	|	КОНЕЦ                                      КАК Количество
	|	
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК Вложенные
	|		ПО ШтрихкодыУпаковок.Ссылка = Вложенные.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И Вложенные.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод КАК Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	Результат = МассивРезультатов[0].Выгрузить();
	ВложенныеЗаписи = МассивРезультатов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	Пока ВложенныеЗаписи.Количество() Цикл
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ВложенныеЗаписи);
		ДанныеВложенныхШтрихкодов = Запрос.ВыполнитьПакет();
		ДочерниеЗаписи = ДанныеВложенныхШтрихкодов[0].Выбрать();
		Пока ДочерниеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), ДочерниеЗаписи);
		КонецЦикла;
		ВложенныеЗаписи = ДанныеВложенныхШтрихкодов[1].Выгрузить().ВыгрузитьКолонку("Штрихкод");
	КонецЦикла;
	
	Результат.Свернуть("Номенклатура, Характеристика, Серия", "Количество");
	
	Возврат Результат;
	
КонецФункции

// Дополняет таблицу транспортных и индивидуальных штрихкодов видом продукции, видом упаковок
// для дальнейшего заполнения данных о кодах маркировки при формировании ТОРГ-2.
// 
// Параметры:
// 	ТаблицаУпаковок - ТаблицаЗначений - исходная таблица упаковок:
// 	 * Ссылка   - Произвольный - объект-владелец штрихкода
// 	 * Штрихкод - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
//   ПолеТипРасхождения - Строка - путь к данным тип расхождения, необязательный параметр.
// 
// Возвращаемое значение:
// ТаблицаЗначений - таблица упаковок с товарными данными:
// 	 * Ссылка             - Произвольный - объект-владелец штрихкода - исходная колонка
// 	 * Номенклатура       - ОпределяемыйТип.Номенклатура - содержимое
// 	 * Характеристика     - ОпределяемыйТип.ХарактеристикаНоменклатуры - содержимое
// 	 * ЗначениеШтрихкода  - Строка - текстовое представление исходного штрихкода для передачи в ЭДО
// 	 * ВидПродукции       - Перечислениессылка.ВидыПродукцииИС - вид продукции номенклатуры для кодировки значения штрихкода
// 	 * ВидУпаковки        - ПеречислениеСсылка.ВидыУпаковокИС - вид упаковки номенклатуры для кодировки значения штрихкода
// 	 * Обработан          - Булево - признак сопоставления строки товарной части документа
//   * ТипРасхождения     - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
Функция ЧастичноеСодержимоеТОРГ2(ТаблицаУпаковок, ПолеТипРасхождения = Неопределено) Экспорт
	
	НормализоватьТаблицуЗначений(ТаблицаУпаковок);
	
	СписокЗапросов = Новый СписокЗначений;
	
	ТекстЗапросаДанныеШтрихкодовУпаковок = 
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.Ссылка            КАК Ссылка,
		|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ШтрихкодыУпаковок.Номенклатура      КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика    КАК Характеристика,
		|	ШтрихкодыУпаковок.Количество        КАК Количество,
		|	ШтрихкодыУпаковок.ВидУпаковки       КАК ВидУпаковки,
		|	&ПолеТипРасхождения КАК ТипРасхождения 
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	&ШтрихкодУпаковки КАК ШтрихкодыУпаковок
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗначениеШтрихкода
		|";
	
	Если ПолеТипРасхождения = Неопределено Тогда
		ПолеТипРасхождения = "&ПустойТипРасхождения";
	Иначе
		ПолеТипРасхождения = "ШтрихкодыУпаковок." + ПолеТипРасхождения;
	КонецЕсли;
	ТекстЗапросаДанныеШтрихкодовУпаковок = СтрЗаменить(ТекстЗапросаДанныеШтрихкодовУпаковок, "&ПолеТипРасхождения", ПолеТипРасхождения);

	СписокЗапросов.Добавить(ТекстЗапросаДанныеШтрихкодовУпаковок);
	СписокЗапросов.Добавить(
		ШтрихкодированиеИС.ОпределитьТекстЗапросаСвойстваМаркируемойПродукции());
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ДанныеШтрихкодовУпаковок.Ссылка                    КАК Ссылка,
		|	ДанныеШтрихкодовУпаковок.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
		|	ДанныеШтрихкодовУпаковок.Номенклатура              КАК Номенклатура,
		|	ДанныеШтрихкодовУпаковок.Характеристика            КАК Характеристика,
		|	ДанныеШтрихкодовУпаковок.Количество                КАК Количество,
		|	ДанныеШтрихкодовУпаковок.ТипРасхождения            КАК ТипРасхождения,
		|	Ложь                                               КАК Обработан,
		|	СвойстваМаркируемойПродукции.ВидПродукции          КАК ВидПродукции,
		|	ДанныеШтрихкодовУпаковок.ВидУпаковки               КАК ВидУпаковки
		|ИЗ
		|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура
		|		 И ДанныеШтрихкодовУпаковок.Характеристика = СвойстваМаркируемойПродукции.Характеристика
		|",
		"Результат");
		
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ШтрихкодУпаковки", ТаблицаУпаковок);
	Запрос.УстановитьПараметр("ПустойТипРасхождения", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП"));
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Ложь);
	
	Результат = РезультатыЗапроса["Результат"].Выгрузить();
	
	ПараметрыНормализацииТабакЛогистическаяУпаковка = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакЛогистическаяУпаковка.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакЛогистическаяУпаковка.НачинаетсяСоСкобки       = Ложь;
	
	ПараметрыНормализацииТабакМаркируемыйТовар = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииТабакМаркируемыйТовар.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииТабакМаркируемыйТовар.НачинаетсяСоСкобки       = Истина;
	ПараметрыНормализацииТабакМаркируемыйТовар.ВключатьМРЦ              = Истина;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		
		РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
			СтрокаТаблицы.ЗначениеШтрихкода, СтрокаТаблицы.ВидПродукции);
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(СтрокаТаблицы.ВидПродукции) Тогда
			
			Если РезультатРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, СтрокаТаблицы.ВидПродукции, ПараметрыНормализацииТабакЛогистическаяУпаковка);
			Иначе
				НормализованныйКодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					РезультатРазбора, СтрокаТаблицы.ВидПродукции, ПараметрыНормализацииТабакМаркируемыйТовар);
			КонецЕсли;
			
		ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаТаблицы.ВидПродукции) Тогда
			
			НормализованныйКодМаркировки = ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(
				РезультатРазбора, ПараметрыНормализацииПрочее);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатРазбора.ВидУпаковки)
			И Не ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
			СтрокаТаблицы.ВидУпаковки = РезультатРазбора.ВидУпаковки;
		КонецЕсли;
		
		СтрокаТаблицы.ЗначениеШтрихкода = НормализованныйКодМаркировки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура НормализоватьШтрихкодыУпаковок(Товары, ШтрихкодыУпаковок) Экспорт
	
	РазделительЗапросов = "
						  |;
				          |///////////////////////////////////////////////////////////////
						  |";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика
		|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
		|ИЗ
		|	&Товары КАК Товары
		|";
	
	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов;
	ТекстЗапроса = ТекстЗапроса + ШтрихкодированиеИС.ОпределитьТекстЗапросаСвойстваМаркируемойПродукции();
	ТекстЗапроса = ТекстЗапроса + РазделительЗапросов;
	
	ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваМаркируемойПродукции.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|ГДЕ
		|	СвойстваМаркируемойПродукции.ВидПродукции <> НЕОПРЕДЕЛЕНО";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ВидыПродукции = Неопределено;
	Иначе
		ВидыПродукции = Результат.Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	КонецЕсли;
	
	НастройкиРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(ВидыПродукции);
	
	Для Каждого СтрокаДанных из ШтрихкодыУпаковок Цикл
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					СтрокаДанных.ЗначениеШтрихкода, ВидыПродукции, , НастройкиРазбораКодаМаркировки);
		Если ДанныеРазбора <> Неопределено Тогда
			СтрокаДанных.ЗначениеШтрихкода =  ДанныеРазбора.НормализованныйКодМаркировки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
//  ОбъектыСОграничениемДлины - Массив Из ДокументСсылка - документы в которых сработало ограничение на длину строки
//
Процедура ЗаполнитьСведенияОМаркировке(Приемник, Источник, ДанныеШтрихкодовУпаковок, ОбъектыСОграничениемДлины) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировке(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДаннымДляОшибки = "Объект";
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодУпаковки");
	
	СведенияОМаркировке = Новый Структура;
	СведенияОМаркировке.Вставить("КодыИндивидуальныхУпаковок", ТаблицаКодов);
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия")
			И ЗначениеЗаполнено(Источник.Серия) Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник.Количество;
	ОбщаяДлинаКодов = 0;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		ОбщаяДлинаКодов = ОбщаяДлинаКодов + СтрДлина(СтрокаУпаковки.ЗначениеШтрихКода) + 2;
		Если (Количество<=0) Тогда
			Прервать;
		ИначеЕсли ОбщаяДлинаКодов > 2000 Тогда
			ОбъектыСОграничениемДлины.Добавить(Источник.Ссылка);
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаКодов.Добавить();
		НоваяСтрока.КодУпаковки = СтрокаУпаковки.ЗначениеШтрихКода;
		СтрокаУпаковки.Обработан = Истина;
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковок, ПараметрыПоиска, СтрокаУпаковки);
		
		Количество = Количество - 1;
	КонецЦикла;
	
	ВывестиОшибкуЗаполненияПользователю(ТаблицаКодов, "КодУпаковки", Источник.Ссылка, ПутьКДаннымДляОшибки);
	
КонецПроцедуры

// Проверяет распределение штрихкодов по строкам товаров. Требуется использование в формате ЭДО с ограничением
// количества символов кодов маркировки для строки маркируемой продукции (после применения ограничения могут быть
// распределены не все коды).
//
// Параметры:
//   ДанныеШтрихкодовУпаковок  - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
//   ОбъектыСОграничениемДлины - Массив Из ДокументСсылка      - ссылки на документы, где требуется проверка
//   Отказ                     - Булево - признак что не все коды распределены
//
Процедура ПроверитьСведенияОМаркировке(ДанныеШтрихкодовУпаковок, ОбъектыСОграничениемДлины, Отказ) Экспорт

	Если ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Обработан, Ссылка", Ложь);
	Для Каждого Ссылка Из ОбъектыСОграничениемДлины Цикл
		ПараметрыПоиска.Ссылка = Ссылка;
		СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
		Если СтрокиУпаковок.Количество() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировке_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировке_2019(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код");
	
	КонтрольныеИдентификационныеЗнаки = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнаки.Колонки.Добавить("Код");
	
	ИндивидуальныеУпаковки = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковки.Колонки.Добавить("Код");
	
	ТранспортныеУпаковки = Новый ТаблицаЗначений;
	ТранспортныеУпаковки.Колонки.Добавить("Код");
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия")
			И ЗначениеЗаполнено(Источник.Серия) Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник.Количество;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		Если (Количество <= 0) Тогда
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковки.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			НоваяСтрока = ИндивидуальныеУпаковки.Добавить();
		Иначе
			НоваяСтрока = КонтрольныеИдентификационныеЗнаки.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		
		СтрокаУпаковки.Обработан = Истина;
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковок, ПараметрыПоиска, СтрокаУпаковки);
		
		Количество = Количество - 1;
	КонецЦикла;
	
	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнаки.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнаки);
	КонецЕсли;
	Если ИндивидуальныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки",            ИндивидуальныеУпаковки);
	КонецЕсли;
	Если ТранспортныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковки);
	КонецЕсли;
	
	Приемник.СведенияОМаркировке = СведенияОМаркировке;
	
КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки Маркировка.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки). Имя колонки определяется в 4м параметре.
//  ДанныеШтрихкодовУпаковок - Неопределено, ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимоеТОРГ2)
//  ПолеКоличество - Строка - имя поля количество строки источника
//  ОтборПоТипуРасхождений - Булево - истина, если требуется отбирать коды маркировки с учетом типа расхождения
//  ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
Процедура ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(Приемник, Источник, ДанныеШтрихкодовУпаковок,
	ПолеКоличество, ОтборПоТипуРасхождений = Ложь, ТипРасхождения = Неопределено) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировкеАктОРасхождениях_2019(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковок,
		ПолеКоличество,
		ОтборПоТипуРасхождений,
		ТипРасхождения,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковок = Неопределено 
		Или ДанныеШтрихкодовУпаковок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКодов = Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("Код");
	
	КонтрольныеИдентификационныеЗнаки = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнаки.Колонки.Добавить("Код");
	
	ИндивидуальныеУпаковки = Новый ТаблицаЗначений;
	ИндивидуальныеУпаковки.Колонки.Добавить("Код");
	
	ТранспортныеУпаковки = Новый ТаблицаЗначений;
	ТранспортныеУпаковки.Колонки.Добавить("Код");
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
//	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
//		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
//	КонецЕсли;
	Если ОтборПоТипуРасхождений Тогда
		ПараметрыПоиска.Вставить("ТипРасхождения", ТипРасхождения);
	КонецЕсли;

	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковок = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник[ПолеКоличество];
	УчитыватьКоличество = Истина;
	Если ОтборПоТипуРасхождений И Количество = 0 Тогда
		УчитыватьКоличество = Ложь; 
	КонецЕсли;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковок Цикл
		Если УчитыватьКоличество И (Количество <= 0) Тогда
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковки.Добавить();
		ИначеЕсли СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			НоваяСтрока = ИндивидуальныеУпаковки.Добавить();
		Иначе
			НоваяСтрока = КонтрольныеИдентификационныеЗнаки.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		
		СтрокаУпаковки.Обработан = Истина;
		
		Количество = Количество - 1;
	КонецЦикла;
	
	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнаки.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнаки);
	КонецЕсли;
	Если ИндивидуальныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ИндивидуальныеУпаковки",            ИндивидуальныеУпаковки);
	КонецЕсли;
	Если ТранспортныеУпаковки.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковки);
	КонецЕсли;
	
	Приемник.Вставить("Маркировка", СведенияОМаркировке);

КонецПроцедуры

// Заполняет в приемнике сведения по маркировке если они есть во входящих данных.
//
// Параметры:
//  Приемник - СтрокаТаблицыЗначений - для заполнения колонки СведенияОМаркировке.
//  Источник - СтрокаТаблицыЗначений - строка документа, содержащая колонки:
//   * Ссылка         - ДокументСсылка - ссылка на документ, для которого заполняются данные,
//   * Номенклатура   - ОпределяемыйТип.Номенклатура - номенклатура в строке документа,
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика в строке,
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры - серия в строке,
//   * Количество     - Число - количество в строке (ограничивает привязанные строки маркировки).
//  ДанныеШтрихкодовУпаковокДо - ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
//  ДанныеШтрихкодовУпаковокПосле  - ТаблицаЗначений - содержит сведения об упаковках (См. ЧастичноеСодержимое)
Процедура ЗаполнитьСведенияОМаркировкеУКД(Приемник, Источник, ДанныеШтрихкодовУпаковокДо, ДанныеШтрихкодовУпаковокПосле) Экспорт

	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ЗаполнитьСведенияОМаркировкеУКД(
		Приемник,
		Источник,
		ДанныеШтрихкодовУпаковокДо,
		ДанныеШтрихкодовУпаковокПосле,
		СтандартнаяОбработка);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	ИначеЕсли ДанныеШтрихкодовУпаковокДо = Неопределено 
		И ДанныеШтрихкодовУпаковокПосле = Неопределено  Тогда 
		Возврат;
	КонецЕсли;
	
	КонтрольныеИдентификационныеЗнакиДо = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнакиДо.Колонки.Добавить("Код");
	
	ТранспортныеУпаковкиДо = Новый ТаблицаЗначений;
	ТранспортныеУпаковкиДо.Колонки.Добавить("Код");
	
	КонтрольныеИдентификационныеЗнакиПосле = Новый ТаблицаЗначений;
	КонтрольныеИдентификационныеЗнакиПосле.Колонки.Добавить("Код");
	
	ТранспортныеУпаковкиПосле = Новый ТаблицаЗначений;
	ТранспортныеУпаковкиПосле.Колонки.Добавить("Код");
	
	ПараметрыПоиска = Новый Структура("Ссылка, Номенклатура");
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Источник);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Характеристика") Тогда
		ПараметрыПоиска.Вставить("Характеристика", Источник.Характеристика);
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "Серия") Тогда
		ПараметрыПоиска.Вставить("Серия", Источник.Серия);
	КонецЕсли;
	ПараметрыПоиска.Вставить("Обработан", Ложь);
	
	СтрокиУпаковокДо = ДанныеШтрихкодовУпаковокДо.НайтиСтроки(ПараметрыПоиска);
	КоличествоДо = Источник.КоличествоДо;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковокДо Цикл
		Если (КоличествоДо <= 0) Тогда
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковкиДо.Добавить();
		Иначе //групповая и индивидульная
			НоваяСтрока = КонтрольныеИдентификационныеЗнакиДо.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		
		СтрокаУпаковки.Обработан = Истина;
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковокДо, ПараметрыПоиска, СтрокаУпаковки);
		
		КоличествоДо = КоличествоДо - 1;
	КонецЦикла;
	
	СтрокиУпаковокПосле = ДанныеШтрихкодовУпаковокПосле.НайтиСтроки(ПараметрыПоиска);
	Количество = Источник.Количество;
	Для Каждого СтрокаУпаковки Из СтрокиУпаковокПосле Цикл
		Если (Количество <= 0) Тогда
			Прервать;
		ИначеЕсли СтрокаУпаковки.Обработан Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			НоваяСтрока = ТранспортныеУпаковкиПосле.Добавить();
		Иначе //групповая и индивидульная
			НоваяСтрока = КонтрольныеИдентификационныеЗнакиПосле.Добавить();
		КонецЕсли;
		
		НоваяСтрока.Код = СтрокаУпаковки.ЗначениеШтрихКода;
		
		СтрокаУпаковки.Обработан = Истина;
		ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковокПосле, ПараметрыПоиска, СтрокаУпаковки);
		
		Количество = Количество - 1;
	КонецЦикла;

	Если КонтрольныеИдентификационныеЗнакиДо.Количество() = 0 и КонтрольныеИдентификационныеЗнакиПосле.Количество() > 0 Тогда
		НоваяСтрока = КонтрольныеИдентификационныеЗнакиДо.Добавить();
		НоваяСтрока.Код = "-";
	ИначеЕсли КонтрольныеИдентификационныеЗнакиДо.Количество() > 0 и КонтрольныеИдентификационныеЗнакиПосле.Количество() = 0 Тогда
		НоваяСтрока = КонтрольныеИдентификационныеЗнакиПосле.Добавить();
		НоваяСтрока.Код = "-";
	КонецЕсли;
	
	Если ТранспортныеУпаковкиДо.Количество() = 0 и ТранспортныеУпаковкиПосле.Количество() > 0 Тогда
		НоваяСтрока = ТранспортныеУпаковкиДо.Добавить();
		НоваяСтрока.Код = "-";
	ИначеЕсли ТранспортныеУпаковкиДо.Количество() > 0 и ТранспортныеУпаковкиПосле.Количество() = 0 Тогда
		НоваяСтрока = ТранспортныеУпаковкиПосле.Добавить();
		НоваяСтрока.Код = "-";
	КонецЕсли;

	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнакиДо.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнакиДо);
	КонецЕсли;
	Если ТранспортныеУпаковкиДо.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковкиДо);
	КонецЕсли;
	Приемник.СведенияОМаркировкеДо = СведенияОМаркировке;
	
	СведенияОМаркировке = Новый Структура;
	Если КонтрольныеИдентификационныеЗнакиПосле.Количество() Тогда
		СведенияОМаркировке.Вставить("КонтрольныеИдентификационныеЗнаки", КонтрольныеИдентификационныеЗнакиПосле);
	КонецЕсли;
	Если ТранспортныеУпаковкиПосле.Количество() Тогда
		СведенияОМаркировке.Вставить("ТранспортныеУпаковки",              ТранспортныеУпаковкиПосле);
	КонецЕсли;
	Приемник.СведенияОМаркировкеПосле = СведенияОМаркировке;
	
КонецПроцедуры

// Рассчитывает по таблице расхождений количество бракованных кодов
// 
// Параметры:
//  ВыборкаТовары - ВыборкаИзРезультатаЗапроса - данные выборки по строке товара.
//  ТаблицаУпаковкиРасхождения - См. ЧастичноеСодержимоеТОРГ2.
//
// Возвращаемое значение:
//  Число - количество, доступное к оформлению как брак по расхождениям.
//
Функция ПолучитьКоличествоОформитьРасхожденияКакБрак(ВыборкаТовары, ТаблицаУпаковкиРасхождения) Экспорт
	
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Номенклатура", ВыборкаТовары.Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", ВыборкаТовары.Характеристика);
	
	Количество = 0;

	ПараметрыОтбора.Вставить("Обработан", Ложь);
	ПараметрыОтбора.Вставить("ТипРасхождения", ИнтеграцияИСМП.ТипРасхожденияИСМПБрак());
	
	СтрокиРасхожденийБрак = ТаблицаУпаковкиРасхождения.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаРасхождения Из СтрокиРасхожденийБрак Цикл
		Количество = Количество + СтрокаРасхождения.Количество;
	КонецЦикла;
	Возврат Количество;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеПрикладныхДокументовНаОснованииДокументовЭДО

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;.
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре)
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		Для Каждого СтрокаКодаУпаковки Из КодыУпаковок.Строки Цикл
			
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КодыИндивидуальныхУпаковок.НомерСтроки.КодУпаковки");
			ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;.
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре)
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировке", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		
		КонтрольныеИдентификационныеЗнаки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из КонтрольныеИдентификационныеЗнаки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.КонтрольныеИдентификационныеЗнаки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ИндивидуальныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ИндивидуальныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ИндивидуальныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ТранспортныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ТранспортныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировке.ТранспортныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Возвращает коды маркировки для строки товара из дерева электронного документа ЭДО.
//
// Параметры:
//	СведенияОТоваре - СтрокаДереваЗначений - строка товаров дерева электронного документа ЭДО.
//
// Пример использования:
//	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
//	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
//		ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
//	КонецЦикла;.
//
Функция ШтрихкодыУпаковокИзСтрокиДереваЭДО_УКД(СведенияОТоваре)
	
	ШтрихкодыУпаковок = Новый Массив;
	
	КодыУпаковок = СведенияОТоваре.Строки.Найти(
		"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле", "ПолныйПуть", Истина);
	
	Если КодыУпаковок <> Неопределено И ЗначениеЗаполнено(КодыУпаковок.Значение) Тогда
		
		КонтрольныеИдентификационныеЗнаки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из КонтрольныеИдентификационныеЗнаки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.КонтрольныеИдентификационныеЗнаки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) 
				И Не ШтрихкодУпаковки = "-" Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
		
		ТранспортныеУпаковки = КодыУпаковок.Строки.Найти(
			"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ТранспортныеУпаковки", "ПолныйПуть", Истина);
		Для Каждого СтрокаКодаУпаковки Из ТранспортныеУпаковки.Строки Цикл
			ШтрихкодУпаковки = ЗначениеРеквизитаВДереве(СтрокаКодаУпаковки,
				"СведенияОТоварах.НомерСтроки.СведенияОМаркировкеПосле.ТранспортныеУпаковки.НомерСтроки.Код");
			Если ЗначениеЗаполнено(ШтрихкодУпаковки) 
				И Не ШтрихкодУпаковки = "-" Тогда 
				ШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции

// Создает новую таблицу значений для штрихкодов упаковок.
// В прикладных документах должна существовать табличная часть с аналогичным набором колонок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений штрихкодов упаковок:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
// * ЗначениеШтрихкода - Строка - Значение штрихкода
Функция НоваяТаблицаШтрихкодыУпаковок() Экспорт
	
	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ШтрихкодыУпаковок.Колонки.Добавить("ЗначениеШтрихкода",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	
	Возврат ШтрихкодыУпаковок;
	
КонецФункции


// Создает таблицу значений для штрихкодов упаковок, полученных в ТОРГ-2
// В прикладных документах должна существовать табличная часть с аналогичным набором колонок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица значений штрихкодов упаковок:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
// * ЗначениеШтрихкода - Строка - Значение штрихкода
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика
// * ТипРасхождения - ОпределяемыйТип.ТипРасхожденияИСМП - тип расхождения.
// * Количество - Число - количество единиц.
//
Функция ТаблицаШтрихкодыУпаковокНоменклатура() Экспорт

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ЗначениеШтрихкода",Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200)));
	ТаблицаДанных.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДанных.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДанных.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаДанных.Колонки.Добавить("ТипРасхождения", Метаданные.ОпределяемыеТипы.ТипРасхожденияИСМП.Тип);
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО_2019(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. НоваяТаблицаШтрихкодыУпаковок).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_УКД(ШтрихкодыУпаковок, СведенияОТоваре) Экспорт
	
	ШтрихкодыУпаковокСтрокиТЧ = ШтрихкодыУпаковокИзСтрокиДереваЭДО_УКД(СведенияОТоваре);
	Для Каждого ЗначениеШтрихкода Из ШтрихкодыУпаковокСтрокиТЧ Цикл
		
		НоваяСтрока = ШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в таблицы штрихкодов упаковок (факт и расхождения).
// 
// Параметры:
//  ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов для заполнения данными раздела Факт (См. ТаблицаШтрихкодыУпаковокНоменклатура).
//  ШтрихкодыУпаковокРасхождения - ТаблицаЗначений - Таблица штрихкодов для заполнения данными по расхождениям (См. ТаблицаШтрихкодыУпаковокНоменклатура).
//  СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
Процедура ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(ШтрихкодыУпаковок, ШтрихкодыУпаковокРасхождения,
		СведенияОТоваре) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ДобавитьШтрихкодыТаблицыШтрихкодовАктОРасхождениях(
		ШтрихкодыУпаковок,
		ШтрихкодыУпаковокРасхождения,
		СведенияОТоваре);
	
	Если СтандартнаяОбработка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПарамерыЗаполнения = ПараметрыЗаполненияТаблицыШтрихкодовАктОРасхождениях();
	
	Если ЗначениеЗаполнено(СведенияОТоваре.Сопоставление.НоменклатураИБ) Тогда
		ПарамерыЗаполнения.Номенклатура = СведенияОТоваре.Сопоставление.НоменклатураИБ;
	КонецЕсли;
	Если ЗначениеЗаполнено(СведенияОТоваре.Сопоставление.ХарактеристикаИБ) Тогда
		ПарамерыЗаполнения.Характеристика = СведенияОТоваре.Сопоставление.ХарактеристикаИБ;
	КонецЕсли;
	
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковок, СведенияОТоваре.ПоФакту, ПарамерыЗаполнения);
	
	ПарамерыЗаполнения.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПИзлишек();
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковокРасхождения, СведенияОТоваре.Излишки, ПарамерыЗаполнения);
	
	ПарамерыЗаполнения.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПНедостача();
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковокРасхождения, СведенияОТоваре.Недостача, ПарамерыЗаполнения);
	
	ПарамерыЗаполнения.ТипРасхождения = ИнтеграцияИСМП.ТипРасхожденияИСМПБрак();
	ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковокРасхождения, СведенияОТоваре.Брак, ПарамерыЗаполнения);
	
КонецПроцедуры

Функция ПараметрыЗаполненияТаблицыШтрихкодовАктОРасхождениях()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Номенклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	ПараметрыЗаполнения.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	ПараметрыЗаполнения.Вставить("ЗаполнятьТипРасходения", Ложь);
	ПараметрыЗаполнения.Вставить("ТипРасхождения", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ТипРасхожденияИСМП"));
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Сворачивает таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов упаковок.
Процедура СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок.Свернуть("ЗначениеШтрихкода, ШтрихкодУпаковки");
	
КонецПроцедуры

Процедура СвернутьТаблицуШтрихкодовУпаковокАкт(ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок.Свернуть("ЗначениеШтрихкода, Номенклатура, Характеристика, ТипРасхождения", "Количество");
	
КонецПроцедуры

Процедура ОчиститьРезультатыПроверкиДокументаПриЗагрузкеДокумента(Документ) Экспорт
	
	РегистрыСведений.СтатусыПроверкиИПодбораДокументовИСМП.ОчиститьРезультатыПроверкиДокумента(Документ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВерсияАПИ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсииПодсистем = ОбновлениеИнформационнойБазы.ВерсииПодсистем();
	СтрокаБЭД = ВерсииПодсистем.Найти("БиблиотекаЭлектронныхДокументов", "ИмяПодсистемы");
	Если СтрокаБЭД = Неопределено Тогда
		Возврат 0;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтрокаБЭД.Версия, "1.9.1.1") >= 0 Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

Функция ЗавершенОбменПоЭДО(ПроверяемыйДокумент) Экспорт
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(ПроверяемыйДокумент)
		И Не Метаданные.ОпределяемыеТипы.ДокументыИСМП.Тип.СодержитТип(ТипЗнч(ПроверяемыйДокумент)) Тогда
		СтатусДокументаПоЭДО = ОбменСКонтрагентами.СтатусДокументооборота(ПроверяемыйДокумент).Статус;
		Если СтатусДокументаПоЭДО = "Утвержден" Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПрикладныхДокументовНаОснованииДокументовЭДО

// Предназначена для получения значения из дерева значений по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве)
//
// Параметры:
//  ДеревоДанных - ДеревоЗначений - объект поиска.
//  ПолныйПуть   - Строка         - значение поиска.
// 
Функция ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть)
	
	СтандартнаяОбработка = Истина;
	ЗначениеРеквизита = "";
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриОпределенииЗначенияРеквизитаВДереве(ЗначениеРеквизита, ДеревоДанных, ПолныйПуть, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		ЗначениеРеквизита = Модуль.ЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть);
	КонецЕсли;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

// Предназначена для получения значения из дерева значений по полному пути.
// (См. ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве)
//
// Параметры:
//Параметры:
//   СтрокиТаблицы - Массив,ТаблицаЗначений - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.СтрокиТаблицы.
//   ПолеТаблицы   - Строка                 - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ПолеТаблицы.
//   КлючДанных    - Строка, ЛюбаяСсылка    - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.КлючДанных.
//   ПутьКДанным   - Строка                 - см. ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю.ПутьКДанным.
// 
Процедура ВывестиОшибкуЗаполненияПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных, ПутьКДанным)
	
	СтандартнаяОбработка = Истина;
	ЭлектронноеВзаимодействиеИСМППереопределяемый.ПриВыводеОшибкиЗаполненияПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных, ПутьКДанным, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеВзаимодействие");
		Модуль.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиТаблицы, ПолеТаблицы, КлючДанных, ПутьКДанным);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет коды маркировки из сведений о товаре документа ЭДО в общую таблицу штрихкодов упаковок.
// 
// Параметры:
// 	ШтрихкодыУпаковок - ТаблицаЗначений - Таблица штрихкодов (См. ТаблицаШтрихкодыУпаковокНоменклатура).
// 	СведенияОТоваре - СтрокаДереваЗначений - Строка сведений о товаре из документа ЭДО.
// 	ПараметрыЗаполнения - Структура - Структура (См. ПараметрыЗаполненияТаблицыШтрихкодовАктОРасхождениях).
Процедура ДобавитьШтрихкодыТаблицуШтрихкодовАктОРасхождениях(ШтрихкодыУпаковок, СведенияОТоваре,
		ПараметрыЗаполнения)
	
	Маркировка = Неопределено;
	
	Если Не СведенияОТоваре.Свойство("Маркировка", Маркировка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Маркировка.Свойство("КонтрольныеИдентификационныеЗнаки") Тогда
		Для Каждого ЗначениеШтрихкода Из Маркировка.КонтрольныеИдентификационныеЗнаки Цикл
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода.Код;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Маркировка.Свойство("ИндивидуальныеУпаковки") Тогда
		Для Каждого ЗначениеШтрихкода Из Маркировка.ИндивидуальныеУпаковки Цикл
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода.Код;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения);
		КонецЦикла;
	КонецЕсли;
	
	Если Маркировка.Свойство("ТранспортныеУпаковки") Тогда
		Для Каждого ЗначениеШтрихкода Из Маркировка.ТранспортныеУпаковки Цикл
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.ЗначениеШтрихкода = ЗначениеШтрихкода.Код;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаполнения);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

Функция ТаблицаМаркируемойПродукцииДокумента(Документ, ВидыМаркируемойПродукции)
	
	ТаблицаПродукции = Новый ТаблицаЗначений;
	ТаблицаПродукции.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПродукции.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПродукции.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПродукции.Колонки.Добавить("Количество",     ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ИнтеграцияИСМППереопределяемый.СформироватьТаблицуМаркируемойПродукцииДокумента(Документ,
		ТаблицаПродукции, ВидыМаркируемойПродукции);
	
	Возврат ТаблицаПродукции;
	
КонецФункции

Процедура ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, Знач ВидыПродукцииИС)
	
	Если НЕ ШтрихкодыУпаковок.Количество() Тогда
		Возврат;
	ИначеЕсли ВидыПродукцииИС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукцииИС);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанныхЭДОПоПрикладнымДокументам
//Для случаев когда в электронный документ попадает не детализированная до серий информация
Процедура ОтметитьОбработанныеСтрокиДляМультитоварныхУпаковок(ДанныеШтрихкодовУпаковок, ПараметрыПоиска, СтрокаУпаковки)
	
	Если Не СтрокаУпаковки.Мультитоварная Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска.Вставить("Штрихкод", СтрокаУпаковки.Штрихкод);
	СтрокиАналоги = ДанныеШтрихкодовУпаковок.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрокаАналог Из СтрокиАналоги Цикл
		СтрокаАналог.Обработан = Истина;
	КонецЦикла;
	
	ПараметрыПоиска.Удалить("Штрихкод");
КонецПроцедуры

//Удаляет тип значения NULL для всех колонок в исходной таблице
Процедура НормализоватьТаблицуЗначений(Таблица) Экспорт
	
	ИсходныеКолонки = Новый Массив;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		ИсходныеКолонки.Добавить(Колонка);
	КонецЦикла; 
	
	Для Каждого Колонка Из ИсходныеКолонки Цикл
		
		ИмяКолонки = Колонка.Имя;
		ТипКолонки = Колонка.ТипЗначения;
		
		Таблица.Колонки[ИмяКолонки].Имя = "Удалить" + ИмяКолонки;
		
		Таблица.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ТипКолонки, , "NULL"));
		Таблица.ЗагрузитьКолонку(Таблица.ВыгрузитьКолонку("Удалить"+ИмяКолонки), ИмяКолонки);
		
		Таблица.Колонки.Удалить("Удалить" + ИмяКолонки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти