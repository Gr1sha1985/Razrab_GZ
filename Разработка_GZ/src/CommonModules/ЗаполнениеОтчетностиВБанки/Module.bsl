////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ОТЧЕТНОСТИ ДЛЯ БАНКОВ
//  Модуль предназначен для заполнения отчета 
// "Бухгалтерская отчетность для предоставления в банк".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура ДобавитьСчетаЗаполнения(ИмяФормы, ВидОтчета, ТаблицаСчетов) Экспорт
	
	Если ИмяФормы = "ФормаОтчета2017Кв3" Тогда
		Если ВидОтчета = "ОСВПоСчету" Тогда
			ЗаполнениеОтчетностиВБанкиПереопределяемый.ДобавитьСчетаЗаполненияОСВПоСчету2017Кв3(ТаблицаСчетов);
		ИначеЕсли ВидОтчета = "АнализСчета" Тогда
			ЗаполнениеОтчетностиВБанкиПереопределяемый.ДобавитьСчетаЗаполненияАнализСчета2017Кв3(ТаблицаСчетов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПоказателях(ИДРедакцииОтчета, ПоказателиОтчета, ПараметрыОтчета) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2011Кв4" Тогда
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ДобавитьПоказатели2011Кв4(ПоказателиОтчета, ПараметрыОтчета);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв3" Тогда
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ДобавитьПоказатели2017Кв3(ПоказателиОтчета, ПараметрыОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтчетностьВБанки(ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	Если ИДРедакцииОтчета = "ФормаОтчета2011Кв4" Тогда
		ЗаполнитьОтчетБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4(ПараметрыОтчета, Контейнер);
		
	ИначеЕсли ИДРедакцииОтчета = "ФормаОтчета2017Кв3" Тогда
		ЗаполнитьОтчетБухгалтерскаяОтчетностьВБанкФормаОтчета2017Кв3(ПараметрыОтчета, Контейнер);
		
	КонецЕсли;
	
КонецПроцедуры

Функция НоваяТаблицаРасшифровки() Экспорт
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	
	ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
	ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
	ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
	ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
	ТаблицаРасшифровки.Колонки.Добавить("Сумма");
	ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
	ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	
	Возврат ТаблицаРасшифровки;
	
КонецФункции

Процедура РазместитьРезультыАвтозаполнения(СтраницаРаздела, РассчитанныеПоказатели) Экспорт
	
	Контейнер = СтраницаРаздела.Данные;
	
	Для Каждого СтрокаПоказателя Из РассчитанныеПоказатели Цикл
		ИмяПоказателя = СтрокаПоказателя.Показатель;
		ЗначениеПоказателя = СтрокаПоказателя.Сумма;
		
		Если Контейнер.Свойство(ИмяПоказателя) Тогда
			Контейнер.Вставить(ИмяПоказателя, ЗначениеПоказателя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РазместитьРасшифровкуАвтозаполнения(ПараметрыЗаполнения, СтраницаРаздела, ТаблицаРасшифровки) Экспорт
	
	Если СтраницаРаздела.Параметры.Свойство("Расшифровка")
	   И ЗначениеЗаполнено(СтраницаРаздела.Параметры.Расшифровка) Тогда
		ИдентификаторРасшифровки = СтраницаРаздела.Параметры.Расшифровка;
	Иначе
		ИдентификаторРасшифровки = "Расшифровка_"
			+ СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		СтраницаРаздела.Параметры.Вставить("Расшифровка", ИдентификаторРасшифровки);
	КонецЕсли;
	
	ПараметрыЗаполнения.РасшифровкиПоказателей.Вставить(ИдентификаторРасшифровки, ТаблицаРасшифровки);
	
КонецПроцедуры

Функция РасширенныйПериодОтчета(ДатаНачалаПериодаОтчета) Экспорт
	
	Возврат НачалоГода(ДатаНачалаПериодаОтчета) <> НачалоДня(ДатаНачалаПериодаОтчета);
	
КонецФункции

Процедура ЗаполнитьСведенияОбОперацияхПоБанковскимСчетам(Параметры, СведенияОбОперациях) Экспорт
	
	СведенияОбОперациях.Расчетные.СчетУчета   = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетРасчетныеСчета();
	СведенияОбОперациях.Валютные.СчетУчета    = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетВалютныеСчета();
	СведенияОбОперациях.Специальные.СчетУчета = ЗаполнениеОтчетностиВБанкиПереопределяемый.СчетСпециальныеСчетаВБанках();
	
	ПараметрыЗапроса = ОбщегоНазначения.СкопироватьРекурсивно(Параметры);
	
	ПараметрыЗапроса.Вставить("СчетБанковскихОпераций", СведенияОбОперациях.Расчетные.СчетУчета);
	СведенияОбОперациях.Расчетные.СводныеСведения = СводныеСведенияПоБанковскимОперациям2017Кв3(ПараметрыЗапроса);
	СведенияОбОперациях.Расчетные.ДетальныеСведения = ДетальныеСведенияПоБанковскимОперациям2017Кв3(ПараметрыЗапроса);
	
	ПараметрыЗапроса.Вставить("СчетБанковскихОпераций", СведенияОбОперациях.Валютные.СчетУчета);
	СведенияОбОперациях.Валютные.СводныеСведения = СводныеСведенияПоБанковскимОперациям2017Кв3(ПараметрыЗапроса);
	СведенияОбОперациях.Валютные.ДетальныеСведения = ДетальныеСведенияПоБанковскимОперациям2017Кв3(ПараметрыЗапроса);
	
	ПараметрыЗапроса.Вставить("СчетБанковскихОпераций", СведенияОбОперациях.Специальные.СчетУчета);
	СведенияОбОперациях.Специальные.СводныеСведения = СводныеСведенияПоБанковскимОперациям2017Кв3(ПараметрыЗапроса);
	СведенияОбОперациях.Специальные.ДетальныеСведения = ДетальныеСведенияПоБанковскимОперациям2017Кв3(ПараметрыЗапроса);
	
КонецПроцедуры

Функция СведенияОСВПоСчету(Параметры) Экспорт
	
	Запрос = ЗапросОСВПоСчету_5_11_01(Параметры);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СчетаОСВПоСчетам() Экспорт
	
	СписокСчетов =
		"01, 02, 03, 04, 05, 07, 08, 09, 10, 11, 15, 20, 23, 25, 26,
		|40, 41, 43, 44, 45, 50, 51, 52, 55, 58, 59, 60, 62, 63, 66, 67, 68, 69,
		|70, 71, 75, 76, 77, 79, 80, 81, 84, 86, 90, 91, 001, 003, 007, 008, 009";
	
	Возврат ЗаполнениеБухгалтерскойОтчетности.СчетаИзСписка(СписокСчетов);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьОтчетБухгалтерскаяОтчетностьВБанкФормаОтчета2011Кв4(ПараметрыОтчета, Контейнер)
	
	Перем ТаблДанныхДопСтрокОбщ;
	Перем РассчитанныеПоказатели; // Таблица для сбора сумм показателей по организациям
	
	Если ПараметрыОтчета.Свойство("ТаблицаРасшифровки") И ЗначениеЗаполнено(ПараметрыОтчета.ТаблицаРасшифровки) Тогда
		ТаблицаРасшифровки = ПараметрыОтчета.ТаблицаРасшифровки;
	Иначе
		ТаблицаРасшифровки = НоваяТаблицаРасшифровки();
	КонецЕсли;
	
	// Очистка таблицы расшифровки от сведений заполняемых отчетов.
	ЗаполнятьБаланс = НЕ ПараметрыОтчета.Свойство("ЗаполнятьБаланс")
	              ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьБаланс") И ПараметрыОтчета.ЗаполнятьБаланс);
	Если ЗаполнятьБаланс Тогда
		ОчиститьРазделРасшифровки(ТаблицаРасшифровки, "Баланс");
	КонецЕсли;
	
	ЗаполнятьОФР = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОФР")
	           ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьОФР") И ПараметрыОтчета.ЗаполнятьОФР);
	Если ЗаполнятьОФР Тогда
		ОчиститьРазделРасшифровки(ТаблицаРасшифровки, "ФормаОтчета");
	КонецЕсли;
	
	ЗаполнятьОИК = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОИК")
	           ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьОИК") И ПараметрыОтчета.ЗаполнятьОИК);
	Если ЗаполнятьОИК Тогда
		ОчиститьРазделРасшифровки(ТаблицаРасшифровки, "ОИК");
	КонецЕсли;
	
	ЗаполнятьОДДС = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОДДС")
	            ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьОДДС") И ПараметрыОтчета.ЗаполнятьОДДС);
	Если ЗаполнятьОДДС Тогда
		ОчиститьРазделРасшифровки(ТаблицаРасшифровки, "ОДДС");
	КонецЕсли;
	
	ЗаполнятьДополнительныеПоказатели = НЕ ПараметрыОтчета.Свойство("ЗаполнятьДополнительныеПоказатели")
	                                ИЛИ (ПараметрыОтчета.Свойство("ЗаполнятьДополнительныеПоказатели") И ПараметрыОтчета.ЗаполнятьДополнительныеПоказатели);
	Если ЗаполнятьДополнительныеПоказатели Тогда
		ОчиститьРазделРасшифровки(ТаблицаРасшифровки, "ДополнительныеПоказатели");
	КонецЕсли;
	
	ЗаполнятьОСВ_008 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОСВ_008")
	               ИЛИ ПараметрыОтчета.ЗаполнятьОСВ_008;
	
	ЗаполнятьОСВ_009 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОСВ_009")
	               ИЛИ ПараметрыОтчета.ЗаполнятьОСВ_009;
	
	ЗаполнятьОСВ_66 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОСВ_66")
	              ИЛИ ПараметрыОтчета.ЗаполнятьОСВ_66;
	
	ЗаполнятьОСВ_67 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьОСВ_67")
	              ИЛИ ПараметрыОтчета.ЗаполнятьОСВ_67;
	
	ЗаполнятьАнализ_50 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьАнализ_50")
	                 ИЛИ ПараметрыОтчета.ЗаполнятьАнализ_50;
	
	ЗаполнятьАнализ_51 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьАнализ_51")
	                 ИЛИ ПараметрыОтчета.ЗаполнятьАнализ_51;
	
	ЗаполнятьАнализ_52 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьАнализ_52")
	                 ИЛИ ПараметрыОтчета.ЗаполнятьАнализ_52;
	
	ЗаполнятьАнализ_55 = НЕ ПараметрыОтчета.Свойство("ЗаполнятьАнализ_55")
	                 ИЛИ ПараметрыОтчета.ЗаполнятьАнализ_55;
	
	РассчитанныеПоказатели = Новый ТаблицаЗначений;
	РассчитанныеПоказатели.Колонки.Добавить("Раздел");
	РассчитанныеПоказатели.Колонки.Добавить("Показатель");
	РассчитанныеПоказатели.Колонки.Добавить("Сумма");
	
	ТаблицаСведенийСчета75_01 = Новый ТаблицаЗначений;
	ТаблицаСведенийСчета75_01.Колонки.Добавить("Графа");
	ТаблицаСведенийСчета75_01.Колонки.Добавить("Сумма");
	
	МногострочныеПоказатели = Новый Структура;
	
	// Вспомогательные значения.
	ОсновнаяОрганизация = ПараметрыОтчета.Организация;
	ГруппаОрганизаций = ПараметрыОтчета.ГруппаОрганизаций;
	
	ДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	ДатаНачалаПериодаПредыдущегоГода = ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредыдущегоГода  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -12));
	
	ДатаНачалаПредыдущегоГода = НачалоГода(ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12));
	ДатаКонцаПредыдущегоГода  = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ДатаНачалаГодаПредшествующегоПредыдущему = НачалоГода(ДобавитьМесяц(ДатаНачалаПредыдущегоГода, -12));
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	ПолныйСписокОрганизаций = Новый Массив;
	
	Если ДоступныеОрганизации.Найти(ОсновнаяОрганизация) <> Неопределено Тогда
		ПолныйСписокОрганизаций.Добавить(ОсновнаяОрганизация);
	КонецЕсли;
	
	Если ПараметрыОтчета.Свойство("ГруппаОрганизаций") Тогда
		Для Каждого Организация Из ПараметрыОтчета.ГруппаОрганизаций Цикл
			Если ДоступныеОрганизации.Найти(Организация.Значение) <> Неопределено Тогда
				ПолныйСписокОрганизаций.Добавить(Организация.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнятьПредыдущиеПериоды = НЕ РасширенныйПериодОтчета(ДатаНачалаПериодаОтчета);
	
	Для Каждого Организация Из ПолныйСписокОрганизаций Цикл
		
		КонтекстВыполнения = Новый Структура;
		КонтекстВыполнения.Вставить("Организация", Организация);
		КонтекстВыполнения.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
		КонтекстВыполнения.Вставить("РассчитанныеПоказатели", РассчитанныеПоказатели);
		КонтекстВыполнения.Вставить("МногострочныеПоказатели", Новый Структура);
		КонтекстВыполнения.Вставить("СтруктураОтчета", ПараметрыОтчета.СтруктураОтчета);
		КонтекстВыполнения.Вставить("КонецОтчетногоПериода", ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		КонтекстВыполнения.Вставить("ТаблицаСведенийСчета75_01", ТаблицаСведенийСчета75_01);
		
		КонтекстВыполнения.Вставить("УчетНа70ВедетсяСводно",
			ЗаполнениеОтчетностиВБанкиПереопределяемый.УчетНа70ВедетсяСводно());
		
		// Бухгалтерский баланс.
		Если ЗаполнятьБаланс Тогда
			
			КонтекстОтчета = Новый Структура;
			КонтекстВыполнения.Вставить("КонтекстОтчета", КонтекстОтчета);
			
			КонтекстОтчета.Вставить("СоставДополнительныхСтрокБаланс", ПараметрыОтчета.СоставДополнительныхСтрокБаланс);
			
			КонтекстОтчета.Вставить("Графа", "04");
			КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.");
			КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
			КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
			
			ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_БалансПоГрафе(КонтекстВыполнения);
			
			Если ЗаполнятьПредыдущиеПериоды Тогда
				КонтекстОтчета.Вставить("Графа", "05");
				КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПредыдущегоГода, "ДФ = 'дд ММММ гггг'")+ " г.");
				КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПредыдущегоГода);
				КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПредыдущегоГода);
				
				ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_БалансПоГрафе(КонтекстВыполнения);
				
				КонтекстОтчета.Вставить("Графа", "06");
				КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаГодаПредшествующегоПредыдущему, "ДФ = 'дд ММММ гггг'")+ " г.");
				КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаГодаПредшествующегоПредыдущему);
				КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаГодаПредшествующегоПредыдущему);
				
				ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_БалансПоГрафе(КонтекстВыполнения);
			КонецЕсли;
			
			КонтекстВыполнения.Удалить("КонтекстОтчета");
			
		КонецЕсли;
		
		// Отчет о финансовых результатах.
		Если ЗаполнятьОФР Тогда
			КонтекстВыполнения.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
			КонтекстВыполнения.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
			КонтекстВыполнения.Вставить("СоставДополнительныхСтрокОПУ", ПараметрыОтчета.СоставДополнительныхСтрокОПУ);
			КонтекстВыполнения.Вставить("ПрименениеЕНВД", ПараметрыОтчета.ПрименениеЕНВД);
			КонтекстВыполнения.Вставить("ОрганизацияПрименяетЕНВД", УчетнаяПолитика.ПлательщикЕНВД(Организация, ДатаКонцаПериодаОтчета));
			КонтекстВыполнения.Вставить("ОрганизацияПрименяетПБУ18", РегламентированнаяОтчетностьПереопределяемый.ПрименяетсяПБУ18(Организация, ДатаКонцаПериодаОтчета));
			
			ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_ОФР(КонтекстВыполнения);
		КонецЕсли;
		
		// Отчет об изменениях капитала.
		Если ЗаполнятьОИК Тогда
			КонтекстОтчета = Новый Структура;
			КонтекстВыполнения.Вставить("КонтекстОтчета", КонтекстОтчета);
			
			КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
			КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
			
			ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьФормаОтчета2011Кв4_ОИК(КонтекстВыполнения);
			
			КонтекстВыполнения.Удалить("КонтекстОтчета");
			
		КонецЕсли;
		
		// Отчет о движении денежных средств.
		Если ЗаполнятьОДДС Тогда
			СтрПериод           = "За " + ОписаниеПериода(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
			СтрПериодПрошлыйГод = "За " + ОписаниеПериода(ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода);
			
			КонтекстВыполнения.Вставить("Графа", "03");
			КонтекстВыполнения.Вставить("ЗаголовокГрафы", СтрПериод);
			КонтекстВыполнения.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
			КонтекстВыполнения.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
			ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьФормаОтчета2011Кв4_ОДДС(КонтекстВыполнения);
			
			Если ЗаполнятьПредыдущиеПериоды Тогда
				КонтекстВыполнения.Вставить("Графа", "04");
				КонтекстВыполнения.Вставить("ЗаголовокГрафы", СтрПериодПрошлыйГод);
				КонтекстВыполнения.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаПредыдущегоГода);
				КонтекстВыполнения.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаПредыдущегоГода);
				ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьФормаОтчета2011Кв4_ОДДС(КонтекстВыполнения);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементРаздел Из КонтекстВыполнения.МногострочныеПоказатели Цикл
			Раздел = ЭлементРаздел.Ключ;
			МногострочныеЧасти = ЭлементРаздел.Значение;
			
			Если НЕ МногострочныеПоказатели.Свойство(Раздел) Тогда
				МногострочныеПоказатели.Вставить(Раздел, Новый Структура);
			КонецЕсли;
			
			Для Каждого ЭлементМСЧ Из МногострочныеЧасти Цикл
				ИдентификаторМСЧ = ЭлементМСЧ.Ключ;
				МСЧ = ЭлементМСЧ.Значение;
				
				Если МногострочныеПоказатели.Свойство(ИдентификаторМСЧ) Тогда
					МногострочныеПоказатели[Раздел].Вставить(ИдентификаторМСЧ, МСЧ);
				Иначе
					МногострочныеПоказатели[Раздел].Вставить(ИдентификаторМСЧ, МСЧ);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		// Дополнительные показатели.
		Если ЗаполнятьДополнительныеПоказатели Тогда
			
			КонтекстОтчета = Новый Структура;
			КонтекстВыполнения.Вставить("КонтекстОтчета", КонтекстОтчета);
			
			КонтекстОтчета.Вставить("Графа", "03");
			КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.");
			КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
			КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
			
			ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе(КонтекстВыполнения);
			
			Если ЗаполнятьПредыдущиеПериоды Тогда
				КонтекстОтчета.Вставить("Графа", "04");
				КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПредыдущегоГода, "ДФ = 'дд ММММ гггг'")+ " г.");
				КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПредыдущегоГода);
				КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПредыдущегоГода);
				
				ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе(КонтекстВыполнения);
				
				КонтекстОтчета.Вставить("Графа", "05");
				КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаГодаПредшествующегоПредыдущему, "ДФ = 'дд ММММ гггг'")+ " г.");
				КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаГодаПредшествующегоПредыдущему);
				КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаГодаПредшествующегоПредыдущему);
				
				ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе(КонтекстВыполнения);
			КонецЕсли;
			
			КонтекстВыполнения.Удалить("КонтекстОтчета");
			
		КонецЕсли;
		
		// Расшифровки обеспечений.
		
		ДатаНачалаПериодаРаздела = ДобавитьМесяц(НачалоМесяца(ДатаКонцаПериодаОтчета), -3);
		
		Если ЗаполнятьОСВ_008 Тогда
			ПараметрыОСВ = Новый Структура;
			ПараметрыОСВ.Вставить("Организация", Организация);
			ПараметрыОСВ.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаРаздела);
			ПараметрыОСВ.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			ПараметрыОСВ.Вставить("Счет", Счет("008"));
			
			СведенияОСВ = ОСВ_ПоКонтрагентамДоговорам(ПараметрыОСВ);
			ПоместитьВоВременноеХранилище(СведенияОСВ, Контейнер.ОСВ_008.АдресСведений);
			
			ПредставлениеОтчета = ПредставлениеРасшифровкиОбеспечений(ПараметрыОтчета.ШаблонПредставленияОСВ_008, СведенияОСВ, ПараметрыОтчета);
			ПоместитьВоВременноеХранилище(ПредставлениеОтчета, Контейнер.ОСВ_008.АдресПредставления);
			
		КонецЕсли;
		
		Если ЗаполнятьОСВ_009 Тогда
			ПараметрыОСВ = Новый Структура;
			ПараметрыОСВ.Вставить("Организация", Организация);
			ПараметрыОСВ.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаРаздела);
			ПараметрыОСВ.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			ПараметрыОСВ.Вставить("Счет", Счет("009"));
			
			СведенияОСВ = ОСВ_ПоКонтрагентамДоговорам(ПараметрыОСВ);
			ПоместитьВоВременноеХранилище(СведенияОСВ, Контейнер.ОСВ_009.АдресСведений);
			
			ПредставлениеОтчета = ПредставлениеРасшифровкиОбеспечений(ПараметрыОтчета.ШаблонПредставленияОСВ_009, СведенияОСВ, ПараметрыОтчета);
			ПоместитьВоВременноеХранилище(ПредставлениеОтчета, Контейнер.ОСВ_009.АдресПредставления);
			
		КонецЕсли;
		
		// Задолженность по кредитам и займам. ОСВ 66 и 67 счетов.
		
		ДатаНачалаПериодаРаздела = НачалоМесяца(ДатаКонцаПериодаОтчета);
		
		Если ЗаполнятьОСВ_66 Тогда
			
			ПараметрыОСВ = Новый Структура;
			ПараметрыОСВ.Вставить("Организация", Организация);
			ПараметрыОСВ.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаРаздела);
			ПараметрыОСВ.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			ПараметрыОСВ.Вставить("Счет", Счет("66"));
			
			СведенияОСВ = ОСВ_ПоКредитамЗаймам(ПараметрыОСВ);
			
			ДеревоДанных = Новый ДеревоЗначений;
			ДеревоДанных.Колонки.Добавить("Данные");
			ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
			
			ДанныеРаздела = ДеревоДанных.Скопировать();
			
			СтрокаРаздела = ДанныеРаздела.Строки.Добавить();
			СтрокаРаздела.Данные = Новый Структура;
			СтрокаРаздела.ДанныеМногострочныхЧастей = Новый Структура("П00007М1", ДеревоДанных.Скопировать());
			
			МСЧ1 = СтрокаРаздела.ДанныеМногострочныхЧастей.П00007М1;
			
			Если СведенияОСВ.Количество() <> 0 Тогда
				Для Каждого СтрокаОСВ из СведенияОСВ Цикл
					СтрокаМСЧ1 = МСЧ1.Строки.Добавить();
					
					СтрокаМСЧ1.Данные = Новый Структура;
					
					СтрокаМСЧ1.Данные.Вставить("П00007М100001", СтрокаОСВ.КодСчета);
					СтрокаМСЧ1.Данные.Вставить("П00007М100002", СтрокаОСВ.СНД);
					СтрокаМСЧ1.Данные.Вставить("П00007М100003", СтрокаОСВ.СНК);
					СтрокаМСЧ1.Данные.Вставить("П00007М100004", СтрокаОСВ.ДО);
					СтрокаМСЧ1.Данные.Вставить("П00007М100005", СтрокаОСВ.КО);
					СтрокаМСЧ1.Данные.Вставить("П00007М100006", СтрокаОСВ.СКД);
					СтрокаМСЧ1.Данные.Вставить("П00007М100007", СтрокаОСВ.СКК);
					СтрокаМСЧ1.Данные.Вставить("П00007М100008", СтрокаОСВ.КонтрагентНаименование);
					СтрокаМСЧ1.Данные.Вставить("П00007М100009", СтрокаОСВ.КонтрагентИНН);
					СтрокаМСЧ1.Данные.Вставить("П00007М100010", СтрокаОСВ.КонтрагентКПП);
					СтрокаМСЧ1.Данные.Вставить("П00007М100011", СтрокаОСВ.ДоговорПредставление);
					СтрокаМСЧ1.Данные.Вставить("П00007М100012", СтрокаОСВ.ДоговорНомер);
					СтрокаМСЧ1.Данные.Вставить("П00007М100013", СтрокаОСВ.ДоговорДата);
					СтрокаМСЧ1.Данные.Вставить("П00007М100014", '0001-01-01');
					СтрокаМСЧ1.Данные.Вставить("П00007М100015", "");
					СтрокаМСЧ1.Данные.Вставить("П00007М100016", 0);
					СтрокаМСЧ1.Данные.Вставить("П00007М100017", "");
					СтрокаМСЧ1.Данные.Вставить("П00007М100018", 0);
					
					СтрокаМСЧ1.ДанныеМногострочныхЧастей = Новый Структура("П00007М2", ДеревоДанных.Скопировать());
					
					МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей.П00007М2;
					
					СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
					
					СтрокаМСЧ2.Данные = Новый Структура;
					СтрокаМСЧ2.Данные.Вставить("П00007М200001", '0001-01-01');
					СтрокаМСЧ2.Данные.Вставить("П00007М200002", 0);
					
					СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЦикла;
				
			Иначе
				// Пустой раздел.
				СтрокаМСЧ1 = МСЧ1.Строки.Добавить();
				
				СтрокаМСЧ1.Данные = Новый Структура;
				
				СтрокаМСЧ1.Данные.Вставить("П00007М100001", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100002", 0);
				СтрокаМСЧ1.Данные.Вставить("П00007М100003", 0);
				СтрокаМСЧ1.Данные.Вставить("П00007М100004", 0);
				СтрокаМСЧ1.Данные.Вставить("П00007М100005", 0);
				СтрокаМСЧ1.Данные.Вставить("П00007М100006", 0);
				СтрокаМСЧ1.Данные.Вставить("П00007М100007", 0);
				СтрокаМСЧ1.Данные.Вставить("П00007М100008", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100009", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100010", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100011", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100012", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100013", '0001-01-01');
				СтрокаМСЧ1.Данные.Вставить("П00007М100014", '0001-01-01');
				СтрокаМСЧ1.Данные.Вставить("П00007М100015", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100016", 0);
				СтрокаМСЧ1.Данные.Вставить("П00007М100017", "");
				СтрокаМСЧ1.Данные.Вставить("П00007М100018", 0);
				
				СтрокаМСЧ1.ДанныеМногострочныхЧастей = Новый Структура("П00007М2", ДеревоДанных.Скопировать());
				
				МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей.П00007М2;
				
				СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
				
				СтрокаМСЧ2.Данные = Новый Структура;
				СтрокаМСЧ2.Данные.Вставить("П00007М200001", '0001-01-01');
				СтрокаМСЧ2.Данные.Вставить("П00007М200002", 0);
				
				СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
				
			КонецЕсли;
			
			ПоместитьВоВременноеХранилище(ДанныеРаздела, Контейнер.ОСВ_66);
			
		КонецЕсли;
		
		Если ЗаполнятьОСВ_67 Тогда
			
			ПараметрыОСВ = Новый Структура;
			ПараметрыОСВ.Вставить("Организация", Организация);
			ПараметрыОСВ.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаРаздела);
			ПараметрыОСВ.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			ПараметрыОСВ.Вставить("Счет", Счет("67"));
			
			СведенияОСВ = ОСВ_ПоКредитамЗаймам(ПараметрыОСВ);
			
			ДеревоДанных = Новый ДеревоЗначений;
			ДеревоДанных.Колонки.Добавить("Данные");
			ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
			
			ДанныеРаздела = ДеревоДанных.Скопировать();
			
			СтрокаРаздела = ДанныеРаздела.Строки.Добавить();
			СтрокаРаздела.Данные = Новый Структура;
			СтрокаРаздела.ДанныеМногострочныхЧастей = Новый Структура("П00008М1", ДеревоДанных.Скопировать());
			
			МСЧ1 = СтрокаРаздела.ДанныеМногострочныхЧастей.П00008М1;
			
			Если СведенияОСВ.Количество() <> 0 Тогда
				Для Каждого СтрокаОСВ из СведенияОСВ Цикл
					СтрокаМСЧ1 = МСЧ1.Строки.Добавить();
					
					СтрокаМСЧ1.Данные = Новый Структура;
					
					СтрокаМСЧ1.Данные.Вставить("П00008М100001", СтрокаОСВ.КодСчета);
					СтрокаМСЧ1.Данные.Вставить("П00008М100002", СтрокаОСВ.СНД);
					СтрокаМСЧ1.Данные.Вставить("П00008М100003", СтрокаОСВ.СНК);
					СтрокаМСЧ1.Данные.Вставить("П00008М100004", СтрокаОСВ.ДО);
					СтрокаМСЧ1.Данные.Вставить("П00008М100005", СтрокаОСВ.КО);
					СтрокаМСЧ1.Данные.Вставить("П00008М100006", СтрокаОСВ.СКД);
					СтрокаМСЧ1.Данные.Вставить("П00008М100007", СтрокаОСВ.СКК);
					СтрокаМСЧ1.Данные.Вставить("П00008М100008", СтрокаОСВ.КонтрагентНаименование);
					СтрокаМСЧ1.Данные.Вставить("П00008М100009", СтрокаОСВ.КонтрагентИНН);
					СтрокаМСЧ1.Данные.Вставить("П00008М100010", СтрокаОСВ.КонтрагентКПП);
					СтрокаМСЧ1.Данные.Вставить("П00008М100011", СтрокаОСВ.ДоговорПредставление);
					СтрокаМСЧ1.Данные.Вставить("П00008М100012", СтрокаОСВ.ДоговорНомер);
					СтрокаМСЧ1.Данные.Вставить("П00008М100013", СтрокаОСВ.ДоговорДата);
					СтрокаМСЧ1.Данные.Вставить("П00008М100014", '0001-01-01');
					СтрокаМСЧ1.Данные.Вставить("П00008М100015", "");
					СтрокаМСЧ1.Данные.Вставить("П00008М100016", 0);
					СтрокаМСЧ1.Данные.Вставить("П00008М100017", "");
					СтрокаМСЧ1.Данные.Вставить("П00008М100018", 0);
					
					СтрокаМСЧ1.ДанныеМногострочныхЧастей = Новый Структура("П00008М2", ДеревоДанных.Скопировать());
					
					МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей.П00008М2;
					
					СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
					
					СтрокаМСЧ2.Данные = Новый Структура;
					СтрокаМСЧ2.Данные.Вставить("П00008М200001", '0001-01-01');
					СтрокаМСЧ2.Данные.Вставить("П00008М200002", 0);
					
					СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
					
				КонецЦикла;
				
			Иначе
				// Пустой раздел.
				СтрокаМСЧ1 = МСЧ1.Строки.Добавить();
				
				СтрокаМСЧ1.Данные = Новый Структура;
				
				СтрокаМСЧ1.Данные.Вставить("П00008М100001", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100002", 0);
				СтрокаМСЧ1.Данные.Вставить("П00008М100003", 0);
				СтрокаМСЧ1.Данные.Вставить("П00008М100004", 0);
				СтрокаМСЧ1.Данные.Вставить("П00008М100005", 0);
				СтрокаМСЧ1.Данные.Вставить("П00008М100006", 0);
				СтрокаМСЧ1.Данные.Вставить("П00008М100007", 0);
				СтрокаМСЧ1.Данные.Вставить("П00008М100008", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100009", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100010", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100011", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100012", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100013", '0001-01-01');
				СтрокаМСЧ1.Данные.Вставить("П00008М100014", '0001-01-01');
				СтрокаМСЧ1.Данные.Вставить("П00008М100015", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100016", 0);
				СтрокаМСЧ1.Данные.Вставить("П00008М100017", "");
				СтрокаМСЧ1.Данные.Вставить("П00008М100018", 0);
				
				СтрокаМСЧ1.ДанныеМногострочныхЧастей = Новый Структура("П00008М2", ДеревоДанных.Скопировать());
				
				МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей.П00008М2;
				
				СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
				
				СтрокаМСЧ2.Данные = Новый Структура;
				СтрокаМСЧ2.Данные.Вставить("П00008М200001", '0001-01-01');
				СтрокаМСЧ2.Данные.Вставить("П00008М200002", 0);
				
				СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
				
			КонецЕсли;
			
			ПоместитьВоВременноеХранилище(ДанныеРаздела, Контейнер.ОСВ_67);
			
		КонецЕсли;
		
		// Анализ счетов 50, 51, 52, 55.
		
		ДатаНачалаАнализа = ДобавитьМесяц(НачалоМесяца(ДатаКонцаПериодаОтчета), -11);
		
		Если ЗаполнятьАнализ_50 Тогда
			
			ПараметрыАнализа = Новый Структура;
			ПараметрыАнализа.Вставить("Организация", Организация);
			ПараметрыАнализа.Вставить("Счет", Счет("50"));
			ПараметрыАнализа.Вставить("НачалоПериодаОтчета", ДатаНачалаАнализа);
			ПараметрыАнализа.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			
			СведенияАнализа = АнализБезСубконтоПоМесяцам(ПараметрыАнализа);
			ПоместитьВоВременноеХранилище(СведенияАнализа, Контейнер.Анализ_50.АдресСведений);
			
			ПредставлениеОтчета = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредствКасса(
				ПараметрыОтчета.ШаблонПредставленияАнализ_50, СведенияАнализа);
			ПоместитьВоВременноеХранилище(ПредставлениеОтчета, Контейнер.Анализ_50.АдресПредставления);
			
		КонецЕсли;
		
		Если ЗаполнятьАнализ_51 Тогда
			
			ПараметрыАнализа = Новый Структура;
			ПараметрыАнализа.Вставить("Организация", Организация);
			ПараметрыАнализа.Вставить("Счет", Счет("51"));
			ПараметрыАнализа.Вставить("НачалоПериодаОтчета", ДатаНачалаАнализа);
			ПараметрыАнализа.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			
			СведенияАнализа = АнализПоБанковскимСчетам(ПараметрыАнализа);
			ПоместитьВоВременноеХранилище(СведенияАнализа, Контейнер.Анализ_51.АдресСведений);
			
			ПредставлениеОтчета = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредств(
				ПараметрыОтчета.ШаблонПредставленияАнализ_51, СведенияАнализа);
			ПоместитьВоВременноеХранилище(ПредставлениеОтчета, Контейнер.Анализ_51.АдресПредставления);
			
		КонецЕсли;
		
		Если ЗаполнятьАнализ_52 Тогда
			
			ПараметрыАнализа = Новый Структура;
			ПараметрыАнализа.Вставить("Организация", Организация);
			ПараметрыАнализа.Вставить("Счет", Счет("52"));
			ПараметрыАнализа.Вставить("НачалоПериодаОтчета", ДатаНачалаАнализа);
			ПараметрыАнализа.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			
			СведенияАнализа = АнализПоБанковскимСчетам(ПараметрыАнализа);
			ПоместитьВоВременноеХранилище(СведенияАнализа, Контейнер.Анализ_52.АдресСведений);
			
			ПредставлениеОтчета = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредств(
				ПараметрыОтчета.ШаблонПредставленияАнализ_52, СведенияАнализа);
			ПоместитьВоВременноеХранилище(ПредставлениеОтчета, Контейнер.Анализ_52.АдресПредставления);
			
		КонецЕсли;
		
		Если ЗаполнятьАнализ_55 Тогда
			
			ПараметрыАнализа = Новый Структура;
			ПараметрыАнализа.Вставить("Организация", Организация);
			ПараметрыАнализа.Вставить("Счет", Счет("55"));
			ПараметрыАнализа.Вставить("НачалоПериодаОтчета", ДатаНачалаАнализа);
			ПараметрыАнализа.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
			
			СведенияАнализа = АнализПоБанковскимСчетам(ПараметрыАнализа);
			ПоместитьВоВременноеХранилище(СведенияАнализа, Контейнер.Анализ_55.АдресСведений);
			
			ПредставлениеОтчета = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредств(
				ПараметрыОтчета.ШаблонПредставленияАнализ_55, СведенияАнализа);
			ПоместитьВоВременноеХранилище(ПредставлениеОтчета, Контейнер.Анализ_55.АдресПредставления);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Дополнительные строки ОФР по номенклатурным группам.
	Если ЗаполнятьОФР
	   И ПараметрыОтчета.Свойство("СоставДополнительныхСтрокОПУ")
	   И ПараметрыОтчета.СоставДополнительныхСтрокОПУ.Колонки.Найти("Существенность") <> Неопределено
	   И ВыводитьСведенияПоНоменклатурнымГруппам(ПараметрыОтчета) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = ТекстЗапросаСведенийСчета90_Кт_Дт();
		
		Запрос.УстановитьПараметр("Организации", ПолныйСписокОрганизаций);
		
		Запрос.УстановитьПараметр("НачПериодаОтч",  ДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("КонПериодаОтч",  ДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("НачПериодаПред", ДатаНачалаПериодаПредыдущегоГода);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			Запрос.УстановитьПараметр("КонПериодаПред", ДатаКонцаПериодаПредыдущегоГода);
		Иначе
			// Интервал за который не может быть сведений;
			Запрос.УстановитьПараметр("КонПериодаПред", ДатаНачалаПериодаПредыдущегоГода - 1);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетаПлюс",  СчетаИзСписка("90.01.1, 90.01.2"));
		Запрос.УстановитьПараметр("СчетаМинус", СчетаИзСписка("90.02.1, 90.02.2, 90.03, 90.04, 90.05"));
		Запрос.УстановитьПараметр("ВидСубконтоРазвертки", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.Выполнить();
		
		Если ПараметрыОтчета.ПрименениеЕНВД Тогда
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "21101", Запрос, "90.01.1, 90.03, 90.04, 90.05");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "21102", Запрос, "90.01.2");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "21201", Запрос, "90.02.1");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "21202", Запрос, "90.02.2");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
		Иначе
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "2110", Запрос, "90.01.1, 90.03, 90.04, 90.05");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "2120", Запрос, "90.02.1");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.Текст = ТекстЗапросаСведенийСчета90_Дт_Кт();
		
		Запрос.УстановитьПараметр("Организации", ПолныйСписокОрганизаций);
		
		Запрос.УстановитьПараметр("НачПериодаОтч",  ДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("КонПериодаОтч",  ДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("НачПериодаПред", ДатаНачалаПериодаПредыдущегоГода);
		Если ЗаполнятьПредыдущиеПериоды Тогда
			Запрос.УстановитьПараметр("КонПериодаПред", ДатаКонцаПериодаПредыдущегоГода);
		Иначе
			// Интервал за который не может быть сведений;
			Запрос.УстановитьПараметр("КонПериодаПред", ДатаНачалаПериодаПредыдущегоГода - 1);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СчетаПлюс",  СчетаИзСписка("90.07.1, 90.07.2, 90.08.1, 90.08.2"));
		Запрос.УстановитьПараметр("СчетаМинус", СчетаИзСписка(""));
		Запрос.УстановитьПараметр("ВидСубконтоРазвертки", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Запрос.Выполнить();
		
		Если ПараметрыОтчета.ПрименениеЕНВД Тогда
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "22101", Запрос, "90.07.1");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "22102", Запрос, "90.07.2");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "22201", Запрос, "90.08.1");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "22202", Запрос, "90.08.2");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
		Иначе
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "2210", Запрос, "90.07.1");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
			МногострочнаяЧасть = СведенияСчета90ПоСубконто(ПараметрыОтчета, "2220", Запрос, "90.08.1");
			ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РассчитанныеПоказатели.Свернуть("Раздел, Показатель", "Сумма");
	Для Каждого СтрокаПоказателя Из РассчитанныеПоказатели Цикл
		Контейнер[СтрокаПоказателя.Раздел].Вставить(СтрокаПоказателя.Показатель, СтрокаПоказателя.Сумма);
	КонецЦикла;
	
	Для Каждого ЭлементРаздел Из МногострочныеПоказатели Цикл
		Раздел = ЭлементРаздел.Ключ;
		МногострочныеЧасти = ЭлементРаздел.Значение;
		Для Каждого ЭлементМСЧ Из МногострочныеЧасти Цикл
			ИдентификаторМСЧ = ЭлементМСЧ.Ключ;
			МСЧ = ЭлементМСЧ.Значение;
			СвернутьТаблицуЗначенийДопСтрок(МСЧ);
			
			СтруктураСтроки = ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав[0];
			ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав.Очистить();
			ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав.Добавить(СтруктураСтроки);
			
			Для Инд = 0 По МСЧ.Количество() - 1 Цикл
				
				Если Инд >= 1 Тогда
					ПараметрыОтчета.СтруктураМногострочныхЧастей[ИдентификаторМСЧ].Состав.Добавить(СтруктураСтроки);
				КонецЕсли;
				
				Постфикс = "_" + Формат(Инд + 1, "ЧГ=0");
				Для Каждого Колонка Из МСЧ.Колонки Цикл
					Показатель = Колонка.Имя + Постфикс;
					Контейнер[Раздел].Вставить(Показатель, МСЧ[Инд][Колонка.Имя]);
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	// Сведения счета 75.01 для вычета из авторасчета расчета стоимости чистых активов.
	ОборотыСчета75_01 = Новый Структура;
	ОборотыСчета75_01.Вставить("Графа04", 0);
	ОборотыСчета75_01.Вставить("Графа05", 0);
	ОборотыСчета75_01.Вставить("Графа06", 0);
	
	ТаблицаСведенийСчета75_01.Свернуть("Графа", "Сумма");
	Для Каждого Строка75_01 Из ТаблицаСведенийСчета75_01 Цикл
		ОборотыСчета75_01["Графа" + Строка75_01.Графа] = Строка75_01.Сумма;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Контейнер", Контейнер);
	СтруктураДанных.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	СтруктураДанных.Вставить("СтруктураМногострочныхЧастей", ПараметрыОтчета.СтруктураМногострочныхЧастей);
	СтруктураДанных.Вставить("ОборотыСчета75_01", ОборотыСчета75_01);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

Процедура ЗаполнитьОтчетБухгалтерскаяОтчетностьВБанкФормаОтчета2017Кв3(ПараметрыОтчета, Контейнер)
	
	Если ПараметрыОтчета.РасшифровкиПоказателей = Неопределено Тогда
		ПараметрыОтчета.РасшифровкиПоказателей = Новый Структура;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Заполнить2017Кв3_Баланс(ПараметрыОтчета);
	
	Заполнить2017Кв3_ОФР(ПараметрыОтчета);
	
	Заполнить2017Кв3_ОИК(ПараметрыОтчета);
	
	Заполнить2017Кв3_ОДДС(ПараметрыОтчета);
	
	Заполнить2017Кв3_ДополнительныеПоказатели(ПараметрыОтчета);
	
	Заполнить2017Кв3_РасшифровкиОбеспеченийПолученные(ПараметрыОтчета);
	
	Заполнить2017Кв3_РасшифровкиОбеспеченийВыданные(ПараметрыОтчета);
	
	Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймамКраткосрочная(ПараметрыОтчета);
	
	Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймамДолгосрочная(ПараметрыОтчета);
	
	Заполнить2017Кв3_ЛизингОбязательства(ПараметрыОтчета);
	
	Заполнить2017Кв3_ДенежныеСредства50(ПараметрыОтчета);
	
	Заполнить2017Кв3_ДенежныеСредства51(ПараметрыОтчета);
	
	Заполнить2017Кв3_ДенежныеСредства52(ПараметрыОтчета);
	
	Заполнить2017Кв3_ДенежныеСредства55(ПараметрыОтчета);
	
	Заполнить2017Кв3_ОСВ(ПараметрыОтчета);
	
	Заполнить2017Кв3_ОСВПоСчету(ПараметрыОтчета);
	
	Заполнить2017Кв3_АнализСчета(ПараметрыОтчета);
	
	Заполнить2017Кв3_Операции51(ПараметрыОтчета);
	
	Заполнить2017Кв3_Операции52(ПараметрыОтчета);
	
	Заполнить2017Кв3_Операции55(ПараметрыОтчета);
	
	Заполнить2017Кв3_Дебиторская(ПараметрыОтчета);
	
	Заполнить2017Кв3_Кредиторская(ПараметрыОтчета);
	
	Заполнить2017Кв3_ДоходыРасходы(ПараметрыОтчета);
	
	Заполнить2017Кв3_ФинансовыеВложенияКраткосрочные(ПараметрыОтчета);
	
	Заполнить2017Кв3_ФинансовыеВложенияДолгосрочные(ПараметрыОтчета);
	
	Заполнить2017Кв3_СтруктураВыручки(ПараметрыОтчета);
	
	Заполнить2017Кв3_ПрочиеПоказатели(ПараметрыОтчета);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
	
	ПоместитьВоВременноеХранилище(СтруктураДанных, ПараметрыОтчета.АдресВоВременномХранилище);
	
КонецПроцедуры

#Область ЗаполнениеФормаОтчета2011Кв4

Функция ПредставлениеРасшифровкиОбеспечений(ШаблонПредставления, ДанныеОтчета, ПараметрыОтчета)
	
	ПредставлениеОтчета = Новый ТабличныйДокумент;
	
	ДатаНачалаПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	ДатаКонцаПериодаОтчета  = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	
	Если ШаблонПредставления.Области.Найти("Заголовок") <> Неопределено Тогда
		Секция_Заголовок = ШаблонПредставления.ПолучитьОбласть("Заголовок");
		ПредставлениеОтчета.Вывести(Секция_Заголовок);
	КонецЕсли;
	
	Если ШаблонПредставления.Области.Найти("ПустаяСтрока") <> Неопределено Тогда
		Секция_ПустаяСтрока = ШаблонПредставления.ПолучитьОбласть("ПустаяСтрока");
		ПредставлениеОтчета.Вывести(Секция_ПустаяСтрока);
	КонецЕсли;
	
	Секция_ШапкаТаблицы = ШаблонПредставления.ПолучитьОбласть("ШапкаТаблицы");
	Секция_ШапкаТаблицы.Параметры.НачалоПериода = Формат(ДатаНачалаПериодаОтчета, "ДФ=dd.MM.yyyy");
	Секция_ШапкаТаблицы.Параметры.КонецПериода  = Формат(ДатаКонцаПериодаОтчета,  "ДФ=dd.MM.yyyy");
	ПредставлениеОтчета.Вывести(Секция_ШапкаТаблицы);
	
	Для Каждого СтрокаОбеспечения ИЗ ДанныеОтчета Цикл
		НомерСтроки = СтрокаЧГ0(ДанныеОтчета.Индекс(СтрокаОбеспечения) + 1);
		ИмяСекцииСтроки = "Строка_" + НомерСтроки;
		
		Секция_СтрокаТаблицы = ШаблонПредставления.ПолучитьОбласть("СтрокаТаблицы");
		Секция_СтрокаТаблицы.Область(1, , Секция_СтрокаТаблицы.ВысотаТаблицы, ).Имя = ИмяСекцииСтроки;
		
		Секция_СтрокаТаблицы.Параметры.КодСчета      = СтрокаОбеспечения.КодСчета;
		Секция_СтрокаТаблицы.Параметры.Контрагент    = СтрокаОбеспечения.КонтрагентНаименование;
		Секция_СтрокаТаблицы.Параметры.Договор       = СтрокаОбеспечения.ДоговорПредставление;
		Секция_СтрокаТаблицы.Параметры.СрокОкончания = Формат(СтрокаОбеспечения.ДоговорСрокДействия, "ДФ=dd.MM.yyyy");
		
		Секция_СтрокаТаблицы.Параметры.СНД = СтрокаОбеспечения.СНД;
		Секция_СтрокаТаблицы.Параметры.ДО  = СтрокаОбеспечения.ДО;
		Секция_СтрокаТаблицы.Параметры.КО  = СтрокаОбеспечения.КО;
		Секция_СтрокаТаблицы.Параметры.СКД = СтрокаОбеспечения.СКД;
		
		ПредставлениеОтчета.Вывести(Секция_СтрокаТаблицы);
		
	КонецЦикла;
	
	Секция_ИтогТаблицы = ШаблонПредставления.ПолучитьОбласть("ИтогТаблицы");
	Секция_ИтогТаблицы.Параметры.СНД = ДанныеОтчета.Итог("СНД");
	Секция_ИтогТаблицы.Параметры.ДО  = ДанныеОтчета.Итог("ДО");
	Секция_ИтогТаблицы.Параметры.КО  = ДанныеОтчета.Итог("КО");
	Секция_ИтогТаблицы.Параметры.СКД = ДанныеОтчета.Итог("СКД");
	ПредставлениеОтчета.Вывести(Секция_ИтогТаблицы);
	
	Возврат ПредставлениеОтчета;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеФормаОтчета2017Кв3

Процедура Заполнить2017Кв3_Баланс(ПараметрыОтчета)
	
	ИмяРаздела = "Баланс";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СтраницаРаздела.Параметры.Вставить("ЗаполненАвтоматически", Истина);
		
		ОчиститьПоказателиПоПрефиксу(СтраницаРаздела.Данные, "П00010");
		
		НачалоПериода = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
		КонецПериода  = КонецКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода",  КонецПериода);
		ПараметрыЗаполнения.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
		
		Заполнить2017Кв3_Баланс_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Баланс_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела)
	
	ТаблицаРасшифровки = НоваяТаблицаРасшифровки();
	
	ДатаНачалаПериодаОтчета = ПараметрыЗаполнения.НачалоПериода;
	ДатаКонцаПериодаОтчета  = ПараметрыЗаполнения.КонецПериода;
	
	ДатаНачалаПредыдущегоГода = НачалоГода(ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12));
	ДатаКонцаПредыдущегоГода  = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ДатаНачалаГодаПредшествующегоПредыдущему = НачалоГода(ДобавитьМесяц(ДатаНачалаПредыдущегоГода, -12));
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	// Эмуляция окружения автозаполнения.
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("Организация", ПараметрыЗаполнения.Организация);
	КонтекстВыполнения.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	КонтекстВыполнения.Вставить("КонецОтчетногоПериода", ПараметрыЗаполнения.КонецПериода);
	КонтекстВыполнения.Вставить("УчетНа70ВедетсяСводно",
		ЗаполнениеОтчетностиВБанкиПереопределяемый.УчетНа70ВедетсяСводно());
	
	СтруктураОтчета = Новый Структура;
	СтруктураОтчета.Вставить("Баланс", Новый Структура);
	СтруктураОтчета.Баланс.Вставить("ИдентификаторАвтозаполнения", "Баланс_2012Кв4_3");
	
	КонтекстВыполнения.Вставить("СтруктураОтчета", СтруктураОтчета);
	
	РассчитанныеПоказатели = Новый ТаблицаЗначений;
	РассчитанныеПоказатели.Колонки.Добавить("Раздел");
	РассчитанныеПоказатели.Колонки.Добавить("Показатель");
	РассчитанныеПоказатели.Колонки.Добавить("Сумма");
	
	КонтекстВыполнения.Вставить("РассчитанныеПоказатели", РассчитанныеПоказатели);
	
	ТаблицаСведенийСчета75_01 = Новый ТаблицаЗначений;
	ТаблицаСведенийСчета75_01.Колонки.Добавить("Графа");
	ТаблицаСведенийСчета75_01.Колонки.Добавить("Сумма");
	
	КонтекстВыполнения.Вставить("ТаблицаСведенийСчета75_01", ТаблицаСведенийСчета75_01);
	
	БухгалтерскиеВеличины = БухгалтерскиеВеличиныПоПериодам(
		ПараметрыЗаполнения.Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	КонтекстОтчета = Новый Структура;
	КонтекстВыполнения.Вставить("КонтекстОтчета", КонтекстОтчета);
	
	СоставДополнительныхСтрокБаланс = Новый ДеревоЗначений;
	СоставДополнительныхСтрокБаланс.Колонки.Добавить("ИмяОбластиДопСтроки");
	
	КонтекстОтчета.Вставить("СоставДополнительныхСтрокБаланс", СоставДополнительныхСтрокБаланс); //ПараметрыОтчета.СоставДополнительныхСтрокБаланс
	
	КонтекстОтчета.Вставить("Графа", "04");
	КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.");
	КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
	КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_БалансПоГрафе(КонтекстВыполнения);
	
	ЗаполнятьПредыдущиеПериоды = НЕ РасширенныйПериодОтчета(ДатаНачалаПериодаОтчета);
	
	Если ЗаполнятьПредыдущиеПериоды Тогда
		КонтекстОтчета.Вставить("Графа", "05");
		КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПредыдущегоГода, "ДФ = 'дд ММММ гггг'")+ " г.");
		КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПредыдущегоГода);
		КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПредыдущегоГода);
		
		ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_БалансПоГрафе(КонтекстВыполнения);
		
		КонтекстОтчета.Вставить("Графа", "06");
		КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаГодаПредшествующегоПредыдущему, "ДФ = 'дд ММММ гггг'")+ " г.");
		КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаГодаПредшествующегоПредыдущему);
		КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаГодаПредшествующегоПредыдущему);
		
		ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_БалансПоГрафе(КонтекстВыполнения);
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстОтчета");
	
	РазместитьРезультыАвтозаполнения(СтраницаРаздела, РассчитанныеПоказатели);
	РазместитьРасшифровкуАвтозаполнения(ПараметрыЗаполнения, СтраницаРаздела, ТаблицаРасшифровки);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОФР(ПараметрыОтчета)
	
	ИмяРаздела = "ОФР";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СтраницаРаздела.Параметры.Вставить("ЗаполненАвтоматически", Истина);
		
		ОчиститьПоказателиПоПрефиксу(СтраницаРаздела.Данные, "П00010");
		
		НачалоПериода = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
		КонецПериода  = КонецКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода",  КонецПериода);
		ПараметрыЗаполнения.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
		
		Заполнить2017Кв3_ОФР_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОФР_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела)
	
	ТаблицаРасшифровки = НоваяТаблицаРасшифровки();
	
	ДатаНачалаПериодаОтчета = ПараметрыЗаполнения.НачалоПериода;
	ДатаКонцаПериодаОтчета  = ПараметрыЗаполнения.КонецПериода;
	
	ДатаНачалаПериодаПредыдущегоГода = ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредыдущегоГода  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -12));
	
	// Эмуляция окружения автозаполнения.
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("Организация", ПараметрыЗаполнения.Организация);
	КонтекстВыполнения.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	РассчитанныеПоказатели = Новый ТаблицаЗначений;
	РассчитанныеПоказатели.Колонки.Добавить("Раздел");
	РассчитанныеПоказатели.Колонки.Добавить("Показатель");
	РассчитанныеПоказатели.Колонки.Добавить("Сумма");
	
	КонтекстВыполнения.Вставить("РассчитанныеПоказатели", РассчитанныеПоказатели);
	
	БухгалтерскиеВеличины = БухгалтерскиеВеличиныПоПериодам(
		ПараметрыЗаполнения.Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	КонтекстОтчета = Новый Структура;
	КонтекстВыполнения.Вставить("КонтекстОтчета", КонтекстОтчета);
	
	СоставДополнительныхСтрокОПУ = Новый ДеревоЗначений;
	СоставДополнительныхСтрокОПУ.Колонки.Добавить("ИмяОбластиДопСтроки");
	
	КонтекстВыполнения.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
	КонтекстВыполнения.Вставить("КонецПериодаОтчета",  ДатаКонцаПериодаОтчета);
	КонтекстВыполнения.Вставить("СоставДополнительныхСтрокОПУ", СоставДополнительныхСтрокОПУ);
	КонтекстВыполнения.Вставить("ПрименениеЕНВД", ЛОЖЬ); // ПараметрыОтчета.ПрименениеЕНВД
	КонтекстВыполнения.Вставить("ОрганизацияПрименяетЕНВД", УчетнаяПолитика.ПлательщикЕНВД(ПараметрыЗаполнения.Организация, ДатаКонцаПериодаОтчета));
	КонтекстВыполнения.Вставить("ОрганизацияПрименяетПБУ18", РегламентированнаяОтчетностьПереопределяемый.ПрименяетсяПБУ18(ПараметрыЗаполнения.Организация, ДатаКонцаПериодаОтчета));
	
	ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьОтчетБухОтчетностьФормаОтчета2011Кв4_ОФР(КонтекстВыполнения);
	
	РазместитьРезультыАвтозаполнения(СтраницаРаздела, РассчитанныеПоказатели);
	РазместитьРасшифровкуАвтозаполнения(ПараметрыЗаполнения, СтраницаРаздела, ТаблицаРасшифровки);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОИК(ПараметрыОтчета)
	
	ИмяРаздела = "ОИК";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СтраницаРаздела.Параметры.Вставить("ЗаполненАвтоматически", Истина);
		
		ОчиститьПоказателиПоПрефиксу(СтраницаРаздела.Данные, "П00010");
		
		НачалоПериода = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
		КонецПериода  = КонецГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода",  КонецПериода);
		ПараметрыЗаполнения.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
		
		Заполнить2017Кв3_ОИК_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОИК_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела)
	
	ТаблицаРасшифровки = НоваяТаблицаРасшифровки();
	
	ДатаНачалаПериодаОтчета = ПараметрыЗаполнения.НачалоПериода;
	ДатаКонцаПериодаОтчета  = ПараметрыЗаполнения.КонецПериода;
	
	ДатаНачалаПериодаПредыдущегоГода = ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредыдущегоГода  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -12));
	
	ДатаНачалаПредыдущегоГода = НачалоГода(ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12));
	ДатаКонцаПредыдущегоГода  = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ДатаНачалаГодаПредшествующегоПредыдущему = НачалоГода(ДобавитьМесяц(ДатаНачалаПредыдущегоГода, -12));
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	// Эмуляция окружения автозаполнения.
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("Организация", ПараметрыЗаполнения.Организация);
	КонтекстВыполнения.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	РассчитанныеПоказатели = Новый ТаблицаЗначений;
	РассчитанныеПоказатели.Колонки.Добавить("Раздел");
	РассчитанныеПоказатели.Колонки.Добавить("Показатель");
	РассчитанныеПоказатели.Колонки.Добавить("Сумма");
	
	КонтекстВыполнения.Вставить("РассчитанныеПоказатели", РассчитанныеПоказатели);
	
	БухгалтерскиеВеличины = БухгалтерскиеВеличиныПоПериодам(
		ПараметрыЗаполнения.Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	КонтекстОтчета = Новый Структура;
	КонтекстВыполнения.Вставить("КонтекстОтчета", КонтекстОтчета);
	
	КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
	КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьФормаОтчета2011Кв4_ОИК(КонтекстВыполнения);
	
	КонтекстВыполнения.Удалить("КонтекстОтчета");
	
	РазместитьРезультыАвтозаполнения(СтраницаРаздела, РассчитанныеПоказатели);
	РазместитьРасшифровкуАвтозаполнения(ПараметрыЗаполнения, СтраницаРаздела, ТаблицаРасшифровки);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОДДС(ПараметрыОтчета)
	
	ИмяРаздела = "ОДДС";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СтраницаРаздела.Параметры.Вставить("ЗаполненАвтоматически", Истина);
		
		ОчиститьПоказателиПоПрефиксу(СтраницаРаздела.Данные, "П00010");
		
		НачалоПериода = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
		КонецПериода  = КонецГода(НачалоПериода);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода",  КонецПериода);
		ПараметрыЗаполнения.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
		
		Заполнить2017Кв3_ОДДС_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОДДС_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела)
	
	ТаблицаРасшифровки = НоваяТаблицаРасшифровки();
	
	ДатаНачалаПериодаОтчета = ПараметрыЗаполнения.НачалоПериода;
	ДатаКонцаПериодаОтчета  = ПараметрыЗаполнения.КонецПериода;
	
	ДатаНачалаПериодаПредыдущегоГода = ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредыдущегоГода  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -12));
	
	ДатаНачалаПредыдущегоГода = НачалоГода(ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12));
	ДатаКонцаПредыдущегоГода  = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ДатаНачалаГодаПредшествующегоПредыдущему = НачалоГода(ДобавитьМесяц(ДатаНачалаПредыдущегоГода, -12));
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	// Эмуляция окружения автозаполнения.
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("Организация", ПараметрыЗаполнения.Организация);
	КонтекстВыполнения.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	РассчитанныеПоказатели = Новый ТаблицаЗначений;
	РассчитанныеПоказатели.Колонки.Добавить("Раздел");
	РассчитанныеПоказатели.Колонки.Добавить("Показатель");
	РассчитанныеПоказатели.Колонки.Добавить("Сумма");
	
	КонтекстВыполнения.Вставить("РассчитанныеПоказатели", РассчитанныеПоказатели);
	
	БухгалтерскиеВеличины = БухгалтерскиеВеличиныПоПериодам(
		ПараметрыЗаполнения.Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	СтрПериод           = "За " + ОписаниеПериода(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	СтрПериодПрошлыйГод = "За " + ОписаниеПериода(ДатаНачалаПериодаПредыдущегоГода, ДатаКонцаПериодаПредыдущегоГода);
	
	КонтекстВыполнения.Вставить("Графа", "03");
	КонтекстВыполнения.Вставить("ЗаголовокГрафы", СтрПериод);
	КонтекстВыполнения.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
	КонтекстВыполнения.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
	ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьФормаОтчета2011Кв4_ОДДС(КонтекстВыполнения);
	
	ЗаполнятьПредыдущиеПериоды = НЕ РасширенныйПериодОтчета(ДатаНачалаПериодаОтчета);
	
	Если ЗаполнятьПредыдущиеПериоды Тогда
		КонтекстВыполнения.Вставить("Графа", "04");
		КонтекстВыполнения.Вставить("ЗаголовокГрафы", СтрПериодПрошлыйГод);
		КонтекстВыполнения.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаПредыдущегоГода);
		КонтекстВыполнения.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаПредыдущегоГода);
		ЗаполнениеБухгалтерскойОтчетностиОсновная.ЗаполнитьФормаОтчета2011Кв4_ОДДС(КонтекстВыполнения);
	КонецЕсли;
	
	РазместитьРезультыАвтозаполнения(СтраницаРаздела, РассчитанныеПоказатели);
	РазместитьРасшифровкуАвтозаполнения(ПараметрыЗаполнения, СтраницаРаздела, ТаблицаРасшифровки);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДополнительныеПоказатели(ПараметрыОтчета)
	
	ИмяРаздела = "ДополнительныеПоказатели";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СтраницаРаздела.Параметры.Вставить("ЗаполненАвтоматически", Истина);
		
		ОчиститьПоказателиПоПрефиксу(СтраницаРаздела.Данные, "П00010");
		
		НачалоПериода = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
		КонецПериода  = КонецКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода",  КонецПериода);
		ПараметрыЗаполнения.Вставить("РасшифровкиПоказателей", ПараметрыОтчета.РасшифровкиПоказателей);
		
		Заполнить2017Кв3_ДополнительныеПоказатели_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДополнительныеПоказатели_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела)
	
	ТаблицаРасшифровки = НоваяТаблицаРасшифровки();
	
	ДатаНачалаПериодаОтчета = ПараметрыЗаполнения.НачалоПериода;
	ДатаКонцаПериодаОтчета  = ПараметрыЗаполнения.КонецПериода;
	
	ДатаНачалаПериодаПредыдущегоГода = ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредыдущегоГода  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -12));
	
	ДатаНачалаПредыдущегоГода = НачалоГода(ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12));
	ДатаКонцаПредыдущегоГода  = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ДатаНачалаГодаПредшествующегоПредыдущему = НачалоГода(ДобавитьМесяц(ДатаНачалаПредыдущегоГода, -12));
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	// Эмуляция окружения автозаполнения.
	
	КонтекстВыполнения = Новый Структура;
	КонтекстВыполнения.Вставить("Организация", ПараметрыЗаполнения.Организация);
	КонтекстВыполнения.Вставить("ТаблицаРасшифровки", ТаблицаРасшифровки);
	
	РассчитанныеПоказатели = Новый ТаблицаЗначений;
	РассчитанныеПоказатели.Колонки.Добавить("Раздел");
	РассчитанныеПоказатели.Колонки.Добавить("Показатель");
	РассчитанныеПоказатели.Колонки.Добавить("Сумма");
	
	КонтекстВыполнения.Вставить("РассчитанныеПоказатели", РассчитанныеПоказатели);
	
	БухгалтерскиеВеличины = БухгалтерскиеВеличиныПоПериодам(
		ПараметрыЗаполнения.Организация, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета);
	
	КонтекстОтчета = Новый Структура;
	КонтекстВыполнения.Вставить("КонтекстОтчета", КонтекстОтчета);
	
	КонтекстОтчета.Вставить("Графа", "03");
	КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг'")+ " г.");
	КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПериодаОтчета);
	КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПериодаОтчета);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе(КонтекстВыполнения);
	
	ЗаполнятьПредыдущиеПериоды = НЕ РасширенныйПериодОтчета(ДатаНачалаПериодаОтчета);
	
	Если ЗаполнятьПредыдущиеПериоды Тогда
		КонтекстОтчета.Вставить("Графа", "04");
		КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаПредыдущегоГода, "ДФ = 'дд ММММ гггг'")+ " г.");
		КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаПредыдущегоГода);
		КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаПредыдущегоГода);
		
		ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе(КонтекстВыполнения);
		
		КонтекстОтчета.Вставить("Графа", "05");
		КонтекстОтчета.Вставить("ЗаголовокГрафы", "На " + Формат(ДатаКонцаГодаПредшествующегоПредыдущему, "ДФ = 'дд ММММ гггг'")+ " г.");
		КонтекстОтчета.Вставить("НачалоПериодаОтчета", ДатаНачалаГодаПредшествующегоПредыдущему);
		КонтекстОтчета.Вставить("КонецПериодаОтчета", ДатаКонцаГодаПредшествующегоПредыдущему);
		
		ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2011Кв4_ДополнительныеПоказателиПоГрафе(КонтекстВыполнения);
	КонецЕсли;
	
	КонтекстВыполнения.Удалить("КонтекстОтчета");
	
	РазместитьРезультыАвтозаполнения(СтраницаРаздела, РассчитанныеПоказатели);
	РазместитьРасшифровкуАвтозаполнения(ПараметрыЗаполнения, СтраницаРаздела, ТаблицаРасшифровки);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_РасшифровкиОбеспеченийПолученные(ПараметрыОтчета)
	
	ИмяРаздела = "РасшифровкиОбеспеченийПолученные";
	ИмяКорневогоРаздела = "РасшифровкиОбеспечений";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	КонецПериода = КонецКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	ДанныеИПредставлениеСтраницы.Вставить("Данные", Неопределено);
	ДанныеИПредставлениеСтраницы.Вставить("Представление", Неопределено);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_РасшифровкиОбеспеченийПолученные(
		ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_РасшифровкиОбеспеченийВыданные(ПараметрыОтчета)
	
	ИмяРаздела = "РасшифровкиОбеспеченийВыданные";
	ИмяКорневогоРаздела = "РасшифровкиОбеспечений";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	КонецПериода = КонецКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	ДанныеИПредставлениеСтраницы.Вставить("Данные", Неопределено);
	ДанныеИПредставлениеСтраницы.Вставить("Представление", Неопределено);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_РасшифровкиОбеспеченийВыданные(
		ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймамКраткосрочная(ПараметрыОтчета)
	
	ИмяРаздела = "ЗадолженностьПоКредитамЗаймамКраткосрочная";
	ИмяКорневогоРаздела = "ЗадолженностьПоКредитамЗаймам";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	НачалоПериода = ПараметрыОтчета[ИмяРаздела + "_ДатаНачалаОтчета"];
	КонецПериода  = ПараметрыОтчета[ИмяРаздела + "_ДатаКонцаОтчета"];
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	ПараметрыЗаполнения.Вставить("СчетСтраницы", Счет("66"));
	ПараметрыЗаполнения.Вставить("ПрефиксМСЧ", "П00007");
	
	Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймам_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела);
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймамДолгосрочная(ПараметрыОтчета)
	
	ИмяРаздела = "ЗадолженностьПоКредитамЗаймамДолгосрочная";
	ИмяКорневогоРаздела = "ЗадолженностьПоКредитамЗаймам";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	НачалоПериода = ПараметрыОтчета[ИмяРаздела + "_ДатаНачалаОтчета"];
	КонецПериода  = ПараметрыОтчета[ИмяРаздела + "_ДатаКонцаОтчета"];
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	ПараметрыЗаполнения.Вставить("СчетСтраницы", Счет("67"));
	ПараметрыЗаполнения.Вставить("ПрефиксМСЧ", "П00008");
	
	Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймам_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела);
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймам_ЗаПериод(ПараметрыЗаполнения, СтраницаРаздела)
	
	Организация   = ПараметрыЗаполнения.Организация;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	СчетСтраницы  = ПараметрыЗаполнения.СчетСтраницы;
	ПрефиксМСЧ    = ПараметрыЗаполнения.ПрефиксМСЧ;
	
	ПараметрыОСВ = Новый Структура;
	ПараметрыОСВ.Вставить("Организация", Организация);
	ПараметрыОСВ.Вставить("НачалоПериодаОтчета", НачалоПериода);
	ПараметрыОСВ.Вставить("КонецПериодаОтчета",  КонецПериода);
	ПараметрыОСВ.Вставить("Счет", СчетСтраницы);
	
	СведенияОСВ = ОСВ_ПоКредитамЗаймам(ПараметрыОСВ);
	
	МСЧ1 = СтраницаРаздела.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М1"];
	
	МСЧ1.Строки.Очистить();
	
	Если СведенияОСВ.Количество() <> 0 Тогда
		Для Каждого СтрокаОСВ из СведенияОСВ Цикл
			СтрокаМСЧ1 = Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймам_НоваяСтрокаМСЧ(МСЧ1, ПрефиксМСЧ);
			
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100001"] = СтрокаОСВ.КодСчета;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100002"] = СтрокаОСВ.СНД;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100003"] = СтрокаОСВ.СНК;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100004"] = СтрокаОСВ.ДО;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100005"] = СтрокаОСВ.КО;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100006"] = СтрокаОСВ.СКД;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100007"] = СтрокаОСВ.СКК;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100008"] = СтрокаОСВ.КонтрагентНаименование;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100009"] = СтрокаОСВ.КонтрагентИНН;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100010"] = СтрокаОСВ.КонтрагентКПП;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100011"] = СтрокаОСВ.ДоговорПредставление;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100012"] = СтрокаОСВ.ДоговорНомер;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100013"] = СтрокаОСВ.ДоговорДата;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100017"] = СтрокаОСВ.Валюта;
			
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100020"] = СтрокаОСВ.ВалСНД;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100021"] = СтрокаОСВ.ВалСНК;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100022"] = СтрокаОСВ.ВалДО;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100023"] = СтрокаОСВ.ВалКО;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100024"] = СтрокаОСВ.ВалСКД;
			СтрокаМСЧ1.Данные[ПрефиксМСЧ + "М100025"] = СтрокаОСВ.ВалСКК;
			
		КонецЦикла;
		
	Иначе
		СтрокаМСЧ1 = Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймам_НоваяСтрокаМСЧ(МСЧ1, ПрефиксМСЧ);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Заполнить2017Кв3_ЗадолженностьПоКредитамЗаймам_НоваяСтрокаМСЧ(МСЧ, ПрефиксМСЧ)
	
	ДеревоДанных = Новый ДеревоЗначений; // Прототип дерева для многострочных частей
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СтрокаМСЧ1 = МСЧ.Строки.Добавить();
	
	СтрокаМСЧ1.Данные = Новый Структура;
	
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100001", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100002", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100003", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100004", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100005", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100006", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100007", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100008", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100009", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100010", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100011", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100012", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100013", '0001-01-01');
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100014", '0001-01-01');
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100015", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100016", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100017", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100018", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100019", 0);
	
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100020", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100021", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100022", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100023", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100024", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100025", 0);
	
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100026", '0001-01-01');
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100027", '0001-01-01');
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100028", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100029", 0);
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100030", "");
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100031", '0001-01-01');
	СтрокаМСЧ1.Данные.Вставить(ПрефиксМСЧ + "М100032", "");
	
	СтрокаМСЧ1.ДанныеМногострочныхЧастей = Новый Структура(ПрефиксМСЧ + "М2", ДеревоДанных.Скопировать());
	
	МСЧ2 = СтрокаМСЧ1.ДанныеМногострочныхЧастей[ПрефиксМСЧ + "М2"];
	
	СтрокаМСЧ2 = МСЧ2.Строки.Добавить();
	
	СтрокаМСЧ2.Данные = Новый Структура;
	СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200001", '0001-01-01');
	СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200002", 0);
	СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200003", 0);
	СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200004", 0);
	СтрокаМСЧ2.Данные.Вставить(ПрефиксМСЧ + "М200005", 0);
	
	СтрокаМСЧ2.ДанныеМногострочныхЧастей = Новый Структура;
	
	Возврат СтрокаМСЧ1;
	
КонецФункции

Процедура Заполнить2017Кв3_ЛизингОбязательства(ПараметрыОтчета)
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_ЛизингОбязательства(ПараметрыОтчета);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДенежныеСредства50(ПараметрыОтчета)
	
	ИмяРаздела = "ДенежныеСредства50";
	ИмяКорневогоРаздела = "ДенежныеСредства";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	ДанныеИПредставлениеСтраницы = Неопределено;
	
	КонецПериода = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(КонецПериода), -11);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	ПараметрыЗаполнения.Вставить("ЕдиницаИзмерения", ПараметрыОтчета[ИмяРаздела + "_Делитель"]);
	ПараметрыЗаполнения.Вставить("Макет", ПараметрыОтчета[ИмяРаздела + "_МакетРаздела"]);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	
	Заполнить2017Кв3_ДенежныеСредстваКасса_ЗаПериод(ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДенежныеСредства51(ПараметрыОтчета)
	
	ИмяРаздела = "ДенежныеСредства51";
	ИмяКорневогоРаздела = "ДенежныеСредства";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	ДанныеИПредставлениеСтраницы = Неопределено;
	
	КонецПериода = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(КонецПериода), -11);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	ПараметрыЗаполнения.Вставить("ЕдиницаИзмерения", ПараметрыОтчета[ИмяРаздела + "_Делитель"]);
	ПараметрыЗаполнения.Вставить("Макет", ПараметрыОтчета[ИмяРаздела + "_МакетРаздела"]);
	ПараметрыЗаполнения.Вставить("СчетСтраницы", Счет("51"));
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	
	Заполнить2017Кв3_ДенежныеСредства_ЗаПериод(ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДенежныеСредства52(ПараметрыОтчета)
	
	ИмяРаздела = "ДенежныеСредства52";
	ИмяКорневогоРаздела = "ДенежныеСредства";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[2].Строки[0];
	
	ДанныеИПредставлениеСтраницы = Неопределено;
	
	КонецПериода = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(КонецПериода), -11);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	ПараметрыЗаполнения.Вставить("ЕдиницаИзмерения", ПараметрыОтчета[ИмяРаздела + "_Делитель"]);
	ПараметрыЗаполнения.Вставить("Макет", ПараметрыОтчета[ИмяРаздела + "_МакетРаздела"]);
	ПараметрыЗаполнения.Вставить("СчетСтраницы", Счет("52"));
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	
	Заполнить2017Кв3_ДенежныеСредства_ЗаПериод(ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДенежныеСредства55(ПараметрыОтчета)
	
	ИмяРаздела = "ДенежныеСредства55";
	ИмяКорневогоРаздела = "ДенежныеСредства";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[3].Строки[0];
	
	ДанныеИПредставлениеСтраницы = Неопределено;
	
	КонецПериода = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = ДобавитьМесяц(НачалоМесяца(КонецПериода), -11);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
	ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
	ПараметрыЗаполнения.Вставить("ЕдиницаИзмерения", ПараметрыОтчета[ИмяРаздела + "_Делитель"]);
	ПараметрыЗаполнения.Вставить("Макет", ПараметрыОтчета[ИмяРаздела + "_МакетРаздела"]);
	ПараметрыЗаполнения.Вставить("СчетСтраницы", Счет("55"));
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	
	Заполнить2017Кв3_ДенежныеСредства_ЗаПериод(ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДенежныеСредстваКасса_ЗаПериод(ЗаполняемаяСтруктура, ПараметрыЗаполнения)
	
	Организация    = ПараметрыЗаполнения.Организация;
	НачалоПериода  = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода   = ПараметрыЗаполнения.КонецПериода;
	Макет          = ПараметрыЗаполнения.Макет;
	
	ЕдиницаИзмерения   = ПараметрыЗаполнения.ЕдиницаИзмерения;
	
	ПостфиксЕдИзм = "";
	Если ЕдиницаИзмерения = 1000 Тогда
		ПостфиксЕдИзм = "10Е3";
	ИНачеЕсли ЕдиницаИзмерения = 1000000 Тогда
		ПостфиксЕдИзм = "10Е6";
	КонецЕсли;
	
	ПараметрыАнализа = Новый Структура;
	ПараметрыАнализа.Вставить("Организация", Организация);
	ПараметрыАнализа.Вставить("НачалоПериодаОтчета", НачалоПериода);
	ПараметрыАнализа.Вставить("КонецПериодаОтчета",  КонецПериода);
	ПараметрыАнализа.Вставить("Счет", Счет("50"));
	
	СведенияСтраницы = АнализБезСубконтоПоМесяцам(ПараметрыАнализа);
	ТабличныйДокументСтраницы = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредствКасса(
		Макет, СведенияСтраницы, ПостфиксЕдИзм);
	
	ЗаполняемаяСтруктура.Вставить("Данные", СведенияСтраницы);
	ЗаполняемаяСтруктура.Вставить("Представление", ТабличныйДокументСтраницы);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДенежныеСредства_ЗаПериод(ЗаполняемаяСтруктура, ПараметрыЗаполнения)
	
	Организация   = ПараметрыЗаполнения.Организация;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	Макет         = ПараметрыЗаполнения.Макет;
	СчетСтраницы  = ПараметрыЗаполнения.СчетСтраницы;
	
	ЕдиницаИзмерения   = ПараметрыЗаполнения.ЕдиницаИзмерения;
	
	ПостфиксЕдИзм = "";
	Если ЕдиницаИзмерения = 1000 Тогда
		ПостфиксЕдИзм = "10Е3";
	ИНачеЕсли ЕдиницаИзмерения = 1000000 Тогда
		ПостфиксЕдИзм = "10Е6";
	КонецЕсли;
	
	ПараметрыАнализа = Новый Структура;
	ПараметрыАнализа.Вставить("Организация", Организация);
	ПараметрыАнализа.Вставить("НачалоПериодаОтчета", НачалоПериода);
	ПараметрыАнализа.Вставить("КонецПериодаОтчета",  КонецПериода);
	ПараметрыАнализа.Вставить("Счет", СчетСтраницы);
	
	СведенияСтраницы = АнализПоБанковскимСчетам(ПараметрыАнализа);
	ТабличныйДокументСтраницы = ОтчетностьВБанкиСлужебный.ПредставлениеАнализаДенежныхСредств(
		Макет, СведенияСтраницы, ПостфиксЕдИзм);
	
	ЗаполняемаяСтруктура.Вставить("Данные", СведенияСтраницы);
	ЗаполняемаяСтруктура.Вставить("Представление", ТабличныйДокументСтраницы);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОСВ(ПараметрыОтчета)
	
	ИмяРаздела = "ОСВ";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеИПредставлениеСтраницы = Неопределено;
		
		СтраницаРаздела.Параметры.Вставить("ЗаполненАвтоматически", Истина);
		
		НачалоПериода = НачалоМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		КонецПериода  = КонецМесяца(НачалоПериода);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
		ПараметрыЗаполнения.Вставить("Макет", ПараметрыОтчета[ИмяРаздела + "_МакетРаздела"]);
		
		ДанныеИПредставлениеСтраницы = Новый Структура;
		
		Заполнить2017Кв3_ОСВ_ЗаПериод(ДанныеИПредставлениеСтраницы, ПараметрыЗаполнения);
		
		СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОСВ_ЗаПериод(ЗаполняемаяСтруктура, ПараметрыЗаполнения)
	
	Организация   = ПараметрыЗаполнения.Организация;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	Макет         = ПараметрыЗаполнения.Макет;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Родитель.Ссылка ЕСТЬ NULL
	               |			ТОГДА ХозрасчетныйОстаткиИОбороты.Счет
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ХозрасчетныйОстаткиИОбороты.Счет.Родитель.Родитель.Ссылка ЕСТЬ NULL
	               |					ТОГДА ХозрасчетныйОстаткиИОбороты.Счет.Родитель
	               |				ИНАЧЕ ХозрасчетныйОстаткиИОбороты.Счет.Родитель.Родитель
	               |			КОНЕЦ
	               |	КОНЕЦ КАК КорневойСчет,
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , , , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Счет.Порядок
	               |ИТОГИ
	               |	СУММА(СНД),
	               |	СУММА(СНК),
	               |	СУММА(ДО),
	               |	СУММА(КО),
	               |	СУММА(СКД),
	               |	СУММА(СКК)
	               |ПО
	               |	КорневойСчет";
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	ТабличныйДокументОтчета = Новый ТабличныйДокумент;
	ТабличныйДокументЗабалансовыеСчета = Новый ТабличныйДокумент;
	
	Секция_ШапкаТаблицы = Макет.ПолучитьОбласть("ОСВ_Шапка");
	Секция_ШапкаТаблицы.Параметры.НачалоПериода = Формат(НачалоПериода, "ДФ=dd.MM.yyyy");
	Секция_ШапкаТаблицы.Параметры.КонецПериода  = Формат(КонецПериода,  "ДФ=dd.MM.yyyy");
	
	ТабличныйДокументОтчета.Вывести(Секция_ШапкаТаблицы);
	
	СведенияОСВ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ИтогиОСВ = Новый Структура("СНД, СНК, ДО, КО, СКД, СКК", 0, 0, 0, 0, 0, 0);
	
	Для Каждого СтрокаКорневогоСчета Из СведенияОСВ.Строки Цикл
		Секция_Строка = Макет.ПолучитьОбласть("ОСВ_Строка");
		
		ИтогиПоСчету = Новый Структура("СНД, СНК, ДО, КО, СКД, СКК", 0, 0, 0, 0, 0, 0);
		Для Каждого СтрокаСчета Из СтрокаКорневогоСчета.Строки Цикл
			ИтогиПоСчету.СНД = ИтогиПоСчету.СНД + СтрокаСчета.СНД;
			ИтогиПоСчету.СНК = ИтогиПоСчету.СНК + СтрокаСчета.СНК;
			ИтогиПоСчету.ДО  = ИтогиПоСчету.ДО  + СтрокаСчета.ДО;
			ИтогиПоСчету.КО  = ИтогиПоСчету.КО  + СтрокаСчета.КО;
			ИтогиПоСчету.СКД = ИтогиПоСчету.СКД + СтрокаСчета.СКД;
			ИтогиПоСчету.СКК = ИтогиПоСчету.СКК + СтрокаСчета.СКК;
		КонецЦикла;
		
		Секция_Строка.Параметры.Заполнить(ИтогиПоСчету);
		Секция_Строка.Параметры.КорневойСчет = СтрокаКорневогоСчета.КорневойСчет;
		
		Если СтрокаКорневогоСчета.КорневойСчет.Забалансовый = Истина Тогда
			ТабличныйДокументЗабалансовыеСчета.Вывести(Секция_Строка);
			
		Иначе
			ТабличныйДокументОтчета.Вывести(Секция_Строка);
			
			ИтогиОСВ.СНД = ИтогиОСВ.СНД + ИтогиПоСчету.СНД;
			ИтогиОСВ.СНК = ИтогиОСВ.СНК + ИтогиПоСчету.СНК;
			ИтогиОСВ.ДО  = ИтогиОСВ.ДО  + ИтогиПоСчету.ДО;
			ИтогиОСВ.КО  = ИтогиОСВ.КО  + ИтогиПоСчету.КО;
			ИтогиОСВ.СКД = ИтогиОСВ.СКД + ИтогиПоСчету.СКД;
			ИтогиОСВ.СКК = ИтогиОСВ.СКК + ИтогиПоСчету.СКК;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Секция_Итого = Макет.ПолучитьОбласть("ОСВ_Итого");
	Секция_Итого.Параметры.Заполнить(ИтогиОСВ);
	
	ТабличныйДокументОтчета.Вывести(Секция_Итого);
	ТабличныйДокументОтчета.Вывести(ТабличныйДокументЗабалансовыеСчета);
	
	ЗаполняемаяСтруктура.Вставить("Данные", СведенияОСВ);
	ЗаполняемаяСтруктура.Вставить("Представление", ТабличныйДокументОтчета);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОСВПоСчету(ПараметрыОтчета)
	
	ИмяРаздела = "ОСВПоСчету";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОтчета = СтраницаРаздела.Параметры.Счет;
		Если ЗначениеЗаполнено(СчетОтчета)
		   И СчетОтмеченВСписке(СчетОтчета, ПараметрыОтчета[ИмяРаздела + "_Счета"]) Тогда
			КонецПериода = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			НачалоПериода = НачалоМесяца(КонецПериода);
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
			ПараметрыЗаполнения.Вставить("Счет", СчетОтчета);
			ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
			ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
			
			ПараметрыЗаполнения.Вставить("РегламентированныйОтчет", ПараметрыОтчета.РегламентированныйОтчет);
			
			Если ДействуетСВерсииФормата("5.11.01", ПараметрыОтчета.ВерсияФормата) Тогда
				Заполнить2017Кв3_ОСВПоСчету_ЗаПериод_5_11_01(ПараметрыЗаполнения);
			Иначе
				Заполнить2017Кв3_ОСВПоСчету_ЗаПериод(ПараметрыЗаполнения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОСВПоСчету_ЗаПериод(ПараметрыЗаполнения)
	
	Счет = ПараметрыЗаполнения.Счет;
	РегламентированныйОтчет = ПараметрыЗаполнения.РегламентированныйОтчет;
	
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайлов(РегламентированныйОтчет, "ОСВПоСчету", Счет);
	
	Запрос = ЗапросОСВПоСчету(ПараметрыЗаполнения);
	
	ИтогиОСВ = Новый Структура("СНД, СНК, ДО, КО, СКД, СКК", 0, 0, 0, 0, 0, 0);
	
	ПрефиксВидаФайла = "ОСВПоСчету" + "."
	                 + Счет.УникальныйИдентификатор() + ".";
	ВеличинаОтсечки = 3000;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТаблицаДанныхСтраницы = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаДанныхСтраницы.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные", ТаблицаДанныхСтраницы);
	
	НомерСегмента = 1;
	НакопленоЗаписей = 0;
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаДанных = ТаблицаДанныхСтраницы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, Выборка);
		
		ИтогиОСВ.СНД = ИтогиОСВ.СНД + Выборка.СНД;
		ИтогиОСВ.СНК = ИтогиОСВ.СНК + Выборка.СНК;
		ИтогиОСВ.ДО  = ИтогиОСВ.ДО  + Выборка.ДО;
		ИтогиОСВ.КО  = ИтогиОСВ.КО  + Выборка.КО;
		ИтогиОСВ.СКД = ИтогиОСВ.СКД + Выборка.СКД;
		ИтогиОСВ.СКК = ИтогиОСВ.СКК + Выборка.СКК;
		
		НакопленоЗаписей = НакопленоЗаписей + 1;
		Если НакопленоЗаписей < ВеличинаОтсечки Тогда
			Продолжить; // накопление данных в таблице
		КонецЕсли;
		
		// Сброс в регистр по отсечке.
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " ОСВ по счету " + Счет.Код);
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		
		ТаблицаДанныхСтраницы.Очистить();
		НомерСегмента = НомерСегмента + 1;
		НакопленоЗаписей = 0;
		
	КонецЦикла;
	
	// Сброс в регистр финального непустого сегмента или пустого сегмента.
	Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " ОСВ по счету " + Счет.Код);
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	КонецЕсли;
	
	// Сброс итогов в 0-сегмент.
	ПараметрыЗаписи.Вставить("Данные", ИтогиОСВ);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "ОСВПоСчетуИтоги" + "." + Счет.УникальныйИдентификатор() + ".0");
	ПараметрыЗаписи.Вставить("ИмяФайла", "Итоги ОСВ по счету " + Счет.Код);
	ПараметрыЗаписи.Вставить("КоличествоЗаписей", 1);
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ОСВПоСчету_ЗаПериод_5_11_01(ПараметрыЗаполнения)
	
	Счет = ПараметрыЗаполнения.Счет;
	РегламентированныйОтчет = ПараметрыЗаполнения.РегламентированныйОтчет;
	
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайлов(РегламентированныйОтчет, "ОСВПоСчету", Счет);
	
	Запрос = ЗапросОСВПоСчету_5_11_01(ПараметрыЗаполнения);
	
	ИтогиОСВ = Новый Структура("СНД, СНК, ДО, КО, СКД, СКК", 0, 0, 0, 0, 0, 0);
	
	ПрефиксВидаФайла = "ОСВПоСчету" + "."
	                 + Счет.УникальныйИдентификатор() + ".";
	ВеличинаОтсечки = 3000;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеСтраницы = Новый ДеревоЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если Колонка.Имя <> "Субконто1Оборотное" И Колонка.Имя <> "Субконто2Оборотное" Тогда
			ДанныеСтраницы.Колонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные", ДанныеСтраницы);
	
	НомерСегмента = 1;
	НакопленоЗаписей = 0;
	
	ВыборкаПоСчетам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		ИтогиОСВ.СНД = ИтогиОСВ.СНД + ВыборкаПоСчетам.СНД;
		ИтогиОСВ.СНК = ИтогиОСВ.СНК + ВыборкаПоСчетам.СНК;
		ИтогиОСВ.ДО  = ИтогиОСВ.ДО  + ВыборкаПоСчетам.ДО;
		ИтогиОСВ.КО  = ИтогиОСВ.КО  + ВыборкаПоСчетам.КО;
		ИтогиОСВ.СКД = ИтогиОСВ.СКД + ВыборкаПоСчетам.СКД;
		ИтогиОСВ.СКК = ИтогиОСВ.СКК + ВыборкаПоСчетам.СКК;
		
		СтрокаПоСчету = ДанныеСтраницы.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоСчету, ВыборкаПоСчетам);
		
		ВыборкаПоСубконто1 = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСубконто1.Следующий() Цикл
			Если ДанныеСтраницы.Строки.Количество() = 0 Тогда
				// Восстановление сведений о счете после сброса данных в регистр.
				СтрокаПоСчету = ДанныеСтраницы.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоСчету, ВыборкаПоСчетам, "Счет, КодСчета");
			КонецЕсли;
			
			Если ВыборкаПоСубконто1.Субконто1 <> Null Тогда
				СтрокаПоСубконто1 = СтрокаПоСчету.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоСубконто1, ВыборкаПоСубконто1);
				
				ВыборкаПоСубконто2 = ВыборкаПоСубконто1.Выбрать();
				
				Пока ВыборкаПоСубконто2.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаПоСубконто1.ПредставлениеСубконто1) Тогда
						СтрокаПоСубконто1.ПредставлениеСубконто1 = ВыборкаПоСубконто2.ПредставлениеСубконто1;
					КонецЕсли;
					
					Если ВыборкаПоСубконто2.Субконто2Оборотное
					   И ВыборкаПоСубконто2.ДО = 0 И ВыборкаПоСубконто2.КО = 0 Тогда
						// Пропуск строка с остатками по субконто 1 для группировки.
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаПоСубконто2.Субконто2 <> Null Тогда
						СтрокаПоСубконто2 = СтрокаПоСубконто1.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПоСубконто2, ВыборкаПоСубконто2);
						
						НакопленоЗаписей = НакопленоЗаписей + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НакопленоЗаписей < ВеличинаОтсечки Тогда
					Продолжить; // накопление данных в таблице
				КонецЕсли;
				
				// Сброс в регистр по отсечке.
				ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
				ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " ОСВ по счету " + Счет.Код);
				ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
				ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
				
				ДанныеСтраницы.Строки.Очистить();
				НомерСегмента = НомерСегмента + 1;
				НакопленоЗаписей = 0;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сброс в регистр финального непустого сегмента или пустого сегмента.
	Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " ОСВ по счету " + Счет.Код);
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	КонецЕсли;
	
	// Сброс итогов в 0-сегмент.
	ПараметрыЗаписи.Вставить("Данные", ИтогиОСВ);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "ОСВПоСчетуИтоги" + "." + Счет.УникальныйИдентификатор() + ".0");
	ПараметрыЗаписи.Вставить("ИмяФайла", "Итоги ОСВ по счету " + Счет.Код);
	ПараметрыЗаписи.Вставить("КоличествоЗаписей", 1);
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_АнализСчета(ПараметрыОтчета)
	
	ИмяРаздела = "АнализСчета";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СчетОтчета = СтраницаРаздела.Параметры.Счет;
		Если ЗначениеЗаполнено(СчетОтчета)
		   И СчетОтмеченВСписке(СчетОтчета, ПараметрыОтчета[ИмяРаздела + "_Счета"]) Тогда
			
			КонецПериода = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
			НачалоПериода = НачалоМесяца(КонецПериода);
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
			ПараметрыЗаполнения.Вставить("Счет", СтраницаРаздела.Параметры.Счет);
			ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
			ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
			
			ПараметрыЗаполнения.Вставить("РегламентированныйОтчет", ПараметрыОтчета.РегламентированныйОтчет);
			
			Если ДействуетСВерсииФормата("5.11.01", ПараметрыОтчета.ВерсияФормата) Тогда
				Заполнить2017Кв3_АнализСчета_ЗаПериод_5_11_01(ПараметрыЗаполнения);
			Иначе
				Заполнить2017Кв3_АнализСчета_ЗаПериод(ПараметрыЗаполнения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_АнализСчета_ЗаПериод(ПараметрыЗаполнения)
	
	Счет = ПараметрыЗаполнения.Счет;
	РегламентированныйОтчет = ПараметрыЗаполнения.РегламентированныйОтчет;
	
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайлов(РегламентированныйОтчет, "АнализСчета", Счет);
	
	Запрос = ЗапросАнализСчета(ПараметрыЗаполнения);
	
	ИтогиАнализаСчета = Новый Структура("СНД, СНК, ДО, КО, СКД, СКК", 0, 0, 0, 0, 0, 0);
	
	ПрефиксВидаФайла = "АнализСчета" + "."
	                 + Счет.УникальныйИдентификатор() + ".";
	ВеличинаОтсечки = 3000;
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТаблицаДанныхСтраницы = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаДанныхСтраницы.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные", ТаблицаДанныхСтраницы);
	
	НомерСегмента = 1;
	НакопленоЗаписей = 0;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Уровень = 1 И НакопленоЗаписей >= ВеличинаОтсечки Тогда
			// Сброс в регистр по отсечке.
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " анализа счета " + Счет.Код);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
			
			ТаблицаДанныхСтраницы.Очистить();
			НомерСегмента = НомерСегмента + 1;
			НакопленоЗаписей = 0;
			
		КонецЕсли;
		
		НоваяСтрокаДанных = ТаблицаДанныхСтраницы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, Выборка);
		
		Если Выборка.Уровень = 1 Тогда
			ИтогиАнализаСчета.СНД = ИтогиАнализаСчета.СНД + Выборка.СНД;
			ИтогиАнализаСчета.СНК = ИтогиАнализаСчета.СНК + Выборка.СНК;
			
			ИтогиАнализаСчета.СКД = ИтогиАнализаСчета.СКД + Выборка.СКД;
			ИтогиАнализаСчета.СКК = ИтогиАнализаСчета.СКК + Выборка.СКК;
			
		КонецЕсли;
		
		Если Выборка.Уровень = 2 Тогда
			ИтогиАнализаСчета.ДО  = ИтогиАнализаСчета.ДО  + Выборка.ДО;
			ИтогиАнализаСчета.КО  = ИтогиАнализаСчета.КО  + Выборка.КО;
			
		КонецЕсли;
		
		НакопленоЗаписей = НакопленоЗаписей + 1;
		
	КонецЦикла;
	
	// Сброс в регистр финального непустого сегмента или пустого сегмента.
	Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " анализа счета " + Счет.Код);
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	КонецЕсли;
	
	// Сброс итогов в 0-сегмент.
	ПараметрыЗаписи.Вставить("Данные", ИтогиАнализаСчета);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "АнализСчетаИтоги" + "." + Счет.УникальныйИдентификатор() + ".0");
	ПараметрыЗаписи.Вставить("ИмяФайла", "Итоги анализа счета " + Счет.Код);
	ПараметрыЗаписи.Вставить("КоличествоЗаписей", 1);
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_АнализСчета_ЗаПериод_5_11_01(ПараметрыЗаполнения)
	
	Счет = ПараметрыЗаполнения.Счет;
	РегламентированныйОтчет = ПараметрыЗаполнения.РегламентированныйОтчет;
	
	ОчиститьДанныеОтчетаВРегистреДополнительныхФайлов(РегламентированныйОтчет, "АнализСчета", Счет);
	
	Запрос = ЗапросАнализСчета_5_11_01(ПараметрыЗаполнения);
	
	ИтогиПоОтчету = Новый Структура("СНД, СНК, ДО, КО, СКД, СКК", 0, 0, 0, 0, 0, 0);
	
	ПрефиксВидаФайла = "АнализСчета" + "."
	                 + Счет.УникальныйИдентификатор() + ".";
	ВеличинаОтсечки = 3000;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеСтраницы = Новый ДеревоЗначений;
	СтекСтрок = Новый Массив;
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если Колонка.Имя <> "Уровень"
		   И Колонка.Имя <> "Субконто1Оборотное" И Колонка.Имя <> "Субконто2Оборотное" Тогда
			ДанныеСтраницы.Колонки.Добавить(Колонка.Имя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные", ДанныеСтраницы);
	
	НомерСегмента = 1;
	НакопленоЗаписей = 0;
	
	ВыборкаПоСчетам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСчетам.Следующий() Цикл
		ИтогиПоОтчету.СНД = ИтогиПоОтчету.СНД + ВыборкаПоСчетам.СНД;
		ИтогиПоОтчету.СНК = ИтогиПоОтчету.СНК + ВыборкаПоСчетам.СНК;
		ИтогиПоОтчету.ДО  = ИтогиПоОтчету.ДО  + ВыборкаПоСчетам.ДО;
		ИтогиПоОтчету.КО  = ИтогиПоОтчету.КО  + ВыборкаПоСчетам.КО;
		ИтогиПоОтчету.СКД = ИтогиПоОтчету.СКД + ВыборкаПоСчетам.СКД;
		ИтогиПоОтчету.СКК = ИтогиПоОтчету.СКК + ВыборкаПоСчетам.СКК;
		
		СтрокаПоСчету = ДанныеСтраницы.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПоСчету, ВыборкаПоСчетам);
		
		СтекСтрок.Очистить();
		СтекСтрок.Вставить(0, СтрокаПоСчету);
		НакопленоЗаписей = НакопленоЗаписей + 1;
		
		ВыборкаПоСубконто1 = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСубконто1.Следующий() Цикл
			Если ДанныеСтраницы.Строки.Количество() = 0 Тогда
				// Восстановление сведений о счете после сброса данных в регистр.
				СтрокаПоСчету = ДанныеСтраницы.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоСчету, ВыборкаПоСчетам, "Счет, КодСчета");
				
				СтекСтрок.Вставить(0, СтрокаПоСчету);
				НакопленоЗаписей = НакопленоЗаписей + 1;
				
			КонецЕсли;
			
			Если ВыборкаПоСубконто1.Субконто1<> Null Тогда
				СтрокаПоСубконто1 = СтекСтрок[0].Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПоСубконто1, ВыборкаПоСубконто1);
				
				СтекСтрок.Вставить(0, СтрокаПоСубконто1);
				НакопленоЗаписей = НакопленоЗаписей + 1;
				
			КонецЕсли;
			
			ВыборкаПоСубконто2 = ВыборкаПоСубконто1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСубконто2.Следующий() Цикл
				Если ВыборкаПоСубконто2.Субконто2 <> Null Тогда
					СтрокаПоСубконто2 = СтекСтрок[0].Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПоСубконто2, ВыборкаПоСубконто2);
					
					СтекСтрок.Вставить(0, СтрокаПоСубконто2);
					НакопленоЗаписей = НакопленоЗаписей + 1;
					
				КонецЕсли;
				
				ВыборкаПоКорСчетам = ВыборкаПоСубконто2.Выбрать();
				
				Пока ВыборкаПоКорСчетам.Следующий() Цикл
					ГлубинаСтека = СтекСтрок.Количество();
					Если ГлубинаСтека = 3 Тогда
						Если НЕ ЗначениеЗаполнено(СтекСтрок[1].ПредставлениеСубконто1) Тогда
							СтекСтрок[1].ПредставлениеСубконто1 = ВыборкаПоКорСчетам.ПредставлениеСубконто1;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(СтекСтрок[0].ПредставлениеСубконто1) Тогда
							СтекСтрок[0].ПредставлениеСубконто1 = ВыборкаПоКорСчетам.ПредставлениеСубконто1;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(СтекСтрок[0].ПредставлениеСубконто2) Тогда
							СтекСтрок[0].ПредставлениеСубконто2 = ВыборкаПоКорСчетам.ПредставлениеСубконто2;
						КонецЕсли;
						
					ИначеЕсли ГлубинаСтека = 2 Тогда
						Если НЕ ЗначениеЗаполнено(СтекСтрок[0].ПредставлениеСубконто1) Тогда
							СтекСтрок[0].ПредставлениеСубконто1 = ВыборкаПоКорСчетам.ПредставлениеСубконто1;
						КонецЕсли;
						
					КонецЕсли;
					
					Если ВыборкаПоКорСчетам.Уровень = 2 Тогда
						СтрокаПоКорСчету = СтекСтрок[0].Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаПоКорСчету, ВыборкаПоКорСчетам);
						
						НакопленоЗаписей = НакопленоЗаписей + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ВыборкаПоСубконто2.Субконто2 <> Null Тогда
					Если НЕ ЗначениеЗаполнено(СтекСтрок[0].ПредставлениеСубконто2) Тогда
						СтекСтрок[0].ПредставлениеСубконто2 = Строка(СтекСтрок[0].Субконто2);
					КонецЕсли;
					СтекСтрок.Удалить(0);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВыборкаПоСубконто1.Субконто1 <> Null Тогда
				Если НЕ ЗначениеЗаполнено(СтекСтрок[0].ПредставлениеСубконто1) Тогда
					СтекСтрок[0].ПредставлениеСубконто1 = Строка(СтекСтрок[0].Субконто1);
				КонецЕсли;
				СтекСтрок.Удалить(0);
			КонецЕсли;
			
			Если НакопленоЗаписей < ВеличинаОтсечки Тогда
				Продолжить; // накопление данных в таблице
			КонецЕсли;
			
			// Сброс в регистр по отсечке.
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " анализа счета " + Счет.Код);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
			
			ДанныеСтраницы.Строки.Очистить();
			СтекСтрок.Очистить();
			НомерСегмента = НомерСегмента + 1;
			НакопленоЗаписей = 0;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сброс в регистр финального непустого сегмента или пустого сегмента.
	Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
		ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксВидаФайла + СтрокаЧГ0(НомерСегмента));
		ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " анализа счета " + Счет.Код);
		ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
		ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	КонецЕсли;
	
	// Сброс итогов в 0-сегмент.
	ПараметрыЗаписи.Вставить("Данные", ИтогиПоОтчету);
	ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", "АнализСчетаИтоги" + "." + Счет.УникальныйИдентификатор() + ".0");
	ПараметрыЗаписи.Вставить("ИмяФайла", "Итоги анализа счета " + Счет.Код);
	ПараметрыЗаписи.Вставить("КоличествоЗаписей", 1);
	ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Операции51(ПараметрыОтчета)
	
	ИмяРаздела = "Операции51";
	ИмяКорневогоРаздела = "ОперацииПоБанковскимСчетам";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	СчетВерхнегоУровня = Счет("51");
	
	КонецПериода  = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = НачалоМесяца(КонецПериода);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", ПараметрыОтчета.Организация);
	Параметры.Вставить("СчетБанковскихОпераций", СчетВерхнегоУровня);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("КонецПериода", КонецПериода);
	
	СводныеДанные = СводныеСведенияПоБанковскимОперациям2017Кв3(Параметры);
	
	Заполнить2017Кв3_Операции_ДетальныеСведения(ПараметрыОтчета, СчетВерхнегоУровня);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	
	ДанныеИПредставлениеСтраницы.Вставить("Данные", СводныеДанные);
	ДанныеИПредставлениеСтраницы.Вставить("Представление", Новый ТабличныйДокумент);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Операции52(ПараметрыОтчета)
	
	ИмяРаздела = "Операции52";
	ИмяКорневогоРаздела = "ОперацииПоБанковскимСчетам";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	СчетВерхнегоУровня = Счет("52");
	
	КонецПериода  = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = НачалоМесяца(КонецПериода);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", ПараметрыОтчета.Организация);
	Параметры.Вставить("СчетБанковскихОпераций", СчетВерхнегоУровня);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("КонецПериода", КонецПериода);
	
	СводныеДанные = СводныеСведенияПоБанковскимОперациям2017Кв3(Параметры);
	
	Заполнить2017Кв3_Операции_ДетальныеСведения(ПараметрыОтчета, СчетВерхнегоУровня);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	
	ДанныеИПредставлениеСтраницы.Вставить("Данные", СводныеДанные);
	ДанныеИПредставлениеСтраницы.Вставить("Представление", Новый ТабличныйДокумент);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Операции55(ПараметрыОтчета)
	
	ИмяРаздела = "Операции55";
	ИмяКорневогоРаздела = "ОперацииПоБанковскимСчетам";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[2].Строки[0];
	
	СчетВерхнегоУровня = Счет("55");
	
	КонецПериода  = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = НачалоМесяца(КонецПериода);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", ПараметрыОтчета.Организация);
	Параметры.Вставить("СчетБанковскихОпераций", СчетВерхнегоУровня);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("КонецПериода", КонецПериода);
	
	СводныеДанные = СводныеСведенияПоБанковскимОперациям2017Кв3(Параметры);
	
	Заполнить2017Кв3_Операции_ДетальныеСведения(ПараметрыОтчета, СчетВерхнегоУровня);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	
	ДанныеИПредставлениеСтраницы.Вставить("Данные", СводныеДанные);
	ДанныеИПредставлениеСтраницы.Вставить("Представление", Новый ТабличныйДокумент);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Функция Заполнить2017Кв3_Операции_НовыеСводныеДанные()
	
	ТипДенежнаяСумма = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(15, 2));
	
	СводныеДанные = Новый ДеревоЗначений;
	
	СводныеДанные.Колонки.Добавить("Счет");
	СводныеДанные.Колонки.Добавить("Представление");
	СводныеДанные.Колонки.Добавить("Расшифровка");
	СводныеДанные.Колонки.Добавить("ЗаголовокВалюта");
	СводныеДанные.Колонки.Добавить("Валютный", Новый ОписаниеТипов("Булево"));
	СводныеДанные.Колонки.Добавить("НомерСчета");
	СводныеДанные.Колонки.Добавить("БИКБанка");
	СводныеДанные.Колонки.Добавить("НаименованиеБанка");
	СводныеДанные.Колонки.Добавить("КодВалюты");
	
	СводныеДанные.Колонки.Добавить("СальдоНачальноеДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоНачальноеКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеКт", ТипДенежнаяСумма);
	
	СводныеДанные.Колонки.Добавить("СальдоНачальноеВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоНачальноеВалКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("ОборотыВалКт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеВалДт", ТипДенежнаяСумма);
	СводныеДанные.Колонки.Добавить("СальдоКонечноеВалКт", ТипДенежнаяСумма);
	
	Возврат СводныеДанные;
	
КонецФункции

Процедура Заполнить2017Кв3_Операции_СводныеСведенияПоСубсчету(СтрокиПоСубсчетам, ВыборкаПоСубсчетам, Запрос)
	
	Если ВыборкаПоСубсчетам.ТипЗаписи() <> ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
		НоваяСтрокаСубсчета = СтрокиПоСубсчетам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСубсчета, ВыборкаПоСубсчетам);
		
		// Рекурсивный разбор субсчетов.
		Выборка = ВыборкаПоСубсчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		Если Выборка.Количество() = 0 Тогда
			Выборка = ВыборкаПоСубсчетам.Выбрать();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			Заполнить2017Кв3_Операции_СводныеСведенияПоСубсчету(
				НоваяСтрокаСубсчета.Строки, Выборка, Запрос);
		КонецЦикла;
		
	Иначе
		СтрокиПоБанковскимСчетам = СтрокиПоСубсчетам;
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Счет,
			|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1) КАК Представление,
			|	ВЫБОР
			|		КОГДА БанковскиеСчета.Валютный
			|			ТОГДА ""Вал.""
			|		ИНАЧЕ """"
			|	КОНЕЦ КАК ЗаголовокВалюта,
			|	БанковскиеСчета.Валютный КАК Валютный,
			|	БанковскиеСчета.НомерСчета КАК НомерСчета,
			|	БанковскиеСчета.БИКБанка КАК БИКБанка,
			|	БанковскиеСчета.НаименованиеБанка КАК НаименованиеБанка,
			|	БанковскиеСчета.КодВалюты КАК КодВалюты,
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СальдоНачальноеДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СальдоНачальноеКт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОборотыДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ОборотыКт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СальдоКонечноеДт,
			|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СальдоКонечноеКт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК СальдоНачальноеВалДт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК СальдоНачальноеВалКт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ОборотыВалДт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ОборотыВалКт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК СальдоКонечноеВалДт,
			|	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК СальдоКонечноеВалКт
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет = &СчетУчетаБС, &СубконтоБанковскиеСчета, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчетаПереопределяемый КАК БанковскиеСчета
			|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = БанковскиеСчета.Счет
			|
			|УПОРЯДОЧИТЬ ПО
			|	Счет
			|АВТОУПОРЯДОЧИВАНИЕ";
		
		СубконтоБанковскиеСчета = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета;
		Запрос.УстановитьПараметр("СубконтоБанковскиеСчета", СубконтоБанковскиеСчета);
		Запрос.УстановитьПараметр("СчетУчетаБС", ВыборкаПоСубсчетам.Счет);
		
		ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
		ВыборкаПоБанковскимСчетам = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоБанковскимСчетам.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаПоБанковскимСчетам.Счет) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаБанковскогоСчета = СтрокиПоБанковскимСчетам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаБанковскогоСчета, ВыборкаПоБанковскимСчетам);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Операции_ДетальныеСведения(ПараметрыОтчета, СчетВерхнегоУровня)
	
	РегламентированныйОтчет = ПараметрыОтчета.РегламентированныйОтчет;
	
	КонецПериода  = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	НачалоПериода = НачалоМесяца(КонецПериода);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация", ПараметрыОтчета.Организация);
	Параметры.Вставить("СчетБанковскихОпераций", СчетВерхнегоУровня);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("КонецПериода", КонецПериода);
	
	РезультатВыполненияЗапроса = ДетальныеСведенияПоБанковскимОперациям2017Кв3(Параметры);
	
	ВыборкаПоБанковскимСчетам = РезультатВыполненияЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПрефиксВидаФайла = "БанковскиеСчета" + "."
	                 + СчетВерхнегоУровня.УникальныйИдентификатор() + ".";
	ВеличинаОтсечки = 1000;
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	ТаблицаОпераций.Колонки.Добавить("ДатаОперации", Новый ОписаниеТипов("Дата"));
	ТаблицаОпераций.Колонки.Добавить("Документ");
	ТаблицаОпераций.Колонки.Добавить("ВходящийДокумент", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("НомерДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ДатаДокумента", Новый ОписаниеТипов("Дата"));
	ТаблицаОпераций.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Назначение", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ВидДвиженияПоСчету", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СчетДт", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОпераций.Колонки.Добавить("СчетКт", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОпераций.Колонки.Добавить("СчетДтКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СчетКтКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаДт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаКт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("ВалютаДт", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ВалютаКт", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВал", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВалДт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("СуммаВалКт", Новый ОписаниеТипов("Число"));
	ТаблицаОпераций.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("КПП", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("Договор", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СчетКонтрагентаБИК", Новый ОписаниеТипов("Строка"));
	ТаблицаОпераций.Колонки.Добавить("СчетКонтрагентаНомер", Новый ОписаниеТипов("Строка"));
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РегламентированныйОтчет", РегламентированныйОтчет);
	ПараметрыЗаписи.Вставить("Данные", ТаблицаОпераций);
	
	// Очистка регистра от ранее заполненных сведений.
	ШаблонОтбора = ПрефиксВидаФайла + "%";
	ВыборкаСегментов = ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора);
	
	Пока ВыборкаСегментов.Следующий() Цикл
		ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьСегмента.РегламентированныйОтчет = РегламентированныйОтчет;
		ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
		
		ЗаписьСегмента.Удалить();
		
	КонецЦикла;
	
	Пока ВыборкаПоБанковскимСчетам.Следующий() Цикл
		БанковскийСчет = ВыборкаПоБанковскимСчетам.БанковскийСчет;
		
		Если НЕ ЗначениеЗаполнено(БанковскийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		ПрефиксПоБанковсомуСчету = ПрефиксВидаФайла
		                         + БанковскийСчет.УникальныйИдентификатор() + ".";
		
		ТаблицаОпераций.Очистить();
		
		НомерСегмента = 1;
		НакопленоЗаписей = 0;
		
		ВыборкаПоОперациям = ВыборкаПоБанковскимСчетам.Выбрать();
		
		Пока ВыборкаПоОперациям.Следующий() Цикл
			НоваяСтрокаДанных = ТаблицаОпераций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных, ВыборкаПоОперациям);
			
			Если ЗначениеЗаполнено(НоваяСтрокаДанных.НомерДокумента) Тогда
				НоваяСтрокаДанных.ВходящийДокумент = "№" + СокрЛП(НоваяСтрокаДанных.НомерДокумента);
				
				Если ЗначениеЗаполнено(НоваяСтрокаДанных.ДатаДокумента) Тогда
					НоваяСтрокаДанных.ВходящийДокумент = НоваяСтрокаДанных.ВходящийДокумент + " от "
					                                   + Формат(НоваяСтрокаДанных.ДатаДокумента, "ДЛФ=D");
				КонецЕсли;
				
			КонецЕсли;
			
			Если НоваяСтрокаДанных.СуммаВалДт = 0 Тогда
				НоваяСтрокаДанных.ВалютаДт = "";
			КонецЕсли;
			
			Если НоваяСтрокаДанных.СуммаВалКт = 0 Тогда
				НоваяСтрокаДанных.ВалютаКт = "";
			КонецЕсли;
			
			НакопленоЗаписей = НакопленоЗаписей + 1;
			Если НакопленоЗаписей < ВеличинаОтсечки Тогда
				Продолжить; // накопление данных в таблице
			КонецЕсли;
			
			// Сброс в регистр по отсечке.
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксПоБанковсомуСчету + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " перечня проводок по счету" + БанковскийСчет);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
			
			ТаблицаОпераций.Очистить();
			НомерСегмента = НомерСегмента + 1;
			НакопленоЗаписей = 0;
			
		КонецЦикла;
		
		// Сброс в регистр финального непустого сегмента или пустого первого сегмента.
		Если НомерСегмента = 1 ИЛИ НакопленоЗаписей > 0 Тогда
			ПараметрыЗаписи.Вставить("ВидДополнительногоФайла", ПрефиксПоБанковсомуСчету + СтрокаЧГ0(НомерСегмента));
			ПараметрыЗаписи.Вставить("ИмяФайла", "Сегмент " + СтрокаЧГ0(НомерСегмента) + " перечня проводок по счету " + БанковскийСчет);
			ПараметрыЗаписи.Вставить("КоличествоЗаписей", НакопленоЗаписей);
			ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Дебиторская(ПараметрыОтчета)
	
	ИмяРаздела = "Дебиторская";
	ИмяКорневогоРаздела = "ДебКредЗадолженность";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	Интервалы = ПараметрыОтчета[ИмяРаздела + "_Интервалы"];
	ДанныеОтчета = ЗаполнениеОтчетностиВБанкиДебКредЗадолж.НовоеДеревоДанныхОтчета2017Кв3_Дебиторская(Интервалы);
	
	КонтекстЗаполнения = ЗаполнениеОтчетностиВБанкиДебКредЗадолж.НовыйКонтекстЗаполнения2017Кв3();
	КонтекстЗаполнения.Организация = ПараметрыОтчета.Организация;
	КонтекстЗаполнения.КонецПериодаОтчета = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	КонтекстЗаполнения.ДанныеОтчета = ДанныеОтчета;
	КонтекстЗаполнения.Интервалы = Интервалы;
	
	ЗаполнениеОтчетностиВБанкиДебКредЗадолж.Заполнить2017Кв3_Дебиторская(КонтекстЗаполнения);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	ДанныеИПредставлениеСтраницы.Вставить("Данные", ДанныеОтчета);
	ДанныеИПредставлениеСтраницы.Вставить("Представление", Новый ТабличныйДокумент);
	ДанныеИПредставлениеСтраницы.Вставить("Интервалы", Интервалы);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_Кредиторская(ПараметрыОтчета)
	
	ИмяРаздела = "Кредиторская";
	ИмяКорневогоРаздела = "ДебКредЗадолженность";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	Интервалы = ПараметрыОтчета[ИмяРаздела + "_Интервалы"];
	ДанныеОтчета = ЗаполнениеОтчетностиВБанкиДебКредЗадолж.НовоеДеревоДанныхОтчета2017Кв3_Кредиторская(Интервалы);
	
	КонтекстЗаполнения = ЗаполнениеОтчетностиВБанкиДебКредЗадолж.НовыйКонтекстЗаполнения2017Кв3();
	КонтекстЗаполнения.Организация = ПараметрыОтчета.Организация;
	КонтекстЗаполнения.КонецПериодаОтчета = ПараметрыОтчета.мДатаКонцаПериодаОтчета;
	КонтекстЗаполнения.ДанныеОтчета = ДанныеОтчета;
	КонтекстЗаполнения.Интервалы = Интервалы;
	
	ЗаполнениеОтчетностиВБанкиДебКредЗадолж.Заполнить2017Кв3_Кредиторская(КонтекстЗаполнения);
	
	ДанныеИПредставлениеСтраницы = Новый Структура;
	ДанныеИПредставлениеСтраницы.Вставить("Данные", ДанныеОтчета);
	ДанныеИПредставлениеСтраницы.Вставить("Представление", Новый ТабличныйДокумент);
	ДанныеИПредставлениеСтраницы.Вставить("Интервалы", Интервалы);
	
	СтраницаРаздела.ДополнительныеДанные = ДанныеИПредставлениеСтраницы;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ДоходыРасходы(ПараметрыОтчета)
	
	ИмяРаздела = "ДоходыРасходы";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяРаздела + "_ДанныеРаздела"];
	
	Для Каждого СтраницаРаздела Из ДанныеРаздела.Строки Цикл
		НомерСтраницы = ДанныеРаздела.Строки.Индекс(СтраницаРаздела) + 1;
		Если ЗначениеЗаполнено(ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"])
		   И НомерСтраницы <> ПараметрыОтчета[ИмяРаздела + "_ЗаполняемыеСтраницы"] Тогда
			Продолжить;
		КонецЕсли;
		
		СтраницаРаздела.Параметры.Вставить("ЗаполненАвтоматически", Истина);
		
		КонецПериода  = КонецМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета);
		НачалоПериода = НачалоГода(КонецПериода);
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("Организация", ПараметрыОтчета.Организация);
		ПараметрыЗаполнения.Вставить("НачалоПериода", НачалоПериода);
		ПараметрыЗаполнения.Вставить("КонецПериода", КонецПериода);
		ПараметрыЗаполнения.Вставить("ДанныеОтчета", Неопределено);
		
		ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_ДоходыРасходы(ПараметрыЗаполнения);
		
		СтраницаРаздела.ДополнительныеДанные = ПараметрыЗаполнения.ДанныеОтчета;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ФинансовыеВложенияКраткосрочные(ПараметрыОтчета)
	
	ИмяРаздела = "ФинансовыеВложенияКраткосрочные";
	ИмяКорневогоРаздела = "ФинансовыеВложения";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[0].Строки[0];
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_ФинансовыеВложенияКраткосрочные(ПараметрыОтчета, СтраницаРаздела);
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ФинансовыеВложенияДолгосрочные(ПараметрыОтчета)
	
	ИмяРаздела = "ФинансовыеВложенияДолгосрочные";
	ИмяКорневогоРаздела = "ФинансовыеВложения";
	
	ЗаполнятьРаздел = ПараметрыОтчета.Свойство("Заполнять" + ИмяРаздела)
	                И ПараметрыОтчета["Заполнять" + ИмяРаздела];
	Если НЕ ЗаполнятьРаздел Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРаздела = ПараметрыОтчета[ИмяКорневогоРаздела + "_ДанныеРаздела"];
	СтраницаРаздела = ДанныеРаздела.Строки[0].Строки[1].Строки[0];
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_ФинансовыеВложенияДолгосрочные(ПараметрыОтчета, СтраницаРаздела);
	
	ПоместитьВоВременноеХранилище(ДанныеРаздела, ПараметрыОтчета[ИмяРаздела + "_АдресДанныхРаздела"]);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_СтруктураВыручки(ПараметрыОтчета)
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_СтруктураВыручки(ПараметрыОтчета);
	
КонецПроцедуры

Процедура Заполнить2017Кв3_ПрочиеПоказатели(ПараметрыОтчета)
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.Заполнить2017Кв3_ПрочиеПоказатели(ПараметрыОтчета);
	
КонецПроцедуры

Процедура ОчиститьДанныеОтчетаВРегистреДополнительныхФайлов(РегламентированныйОтчет, ИмяРаздела, Счет)
	
	ВыборкаСегментов = ВыборкаСегментовОтчетаПоСчету(РегламентированныйОтчет, ИмяРаздела, Счет);
	
	Пока ВыборкаСегментов.Следующий() Цикл
		ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьСегмента.РегламентированныйОтчет = РегламентированныйОтчет;
		ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментов.ВидДополнительногоФайла;
		
		ЗаписьСегмента.Удалить();
		
	КонецЦикла;
	
	ВыборкаСегментовИтогов = ВыборкаСегментовОтчетаПоСчету(РегламентированныйОтчет, ИмяРаздела + "Итоги", Счет);
	
	Пока ВыборкаСегментовИтогов.Следующий() Цикл
		ЗаписьСегмента = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
		ЗаписьСегмента.РегламентированныйОтчет = РегламентированныйОтчет;
		ЗаписьСегмента.ВидДополнительногоФайла = ВыборкаСегментовИтогов.ВидДополнительногоФайла;
		
		ЗаписьСегмента.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыборкаСегментовОтчета(РегламентированныйОтчет, ШаблонОтбора) Экспорт
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ВидДополнительногоФайла";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", ШаблонОтбора);
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", РегламентированныйОтчет);
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	Возврат ВыборкаСегментов;
	
КонецФункции

Функция ВыборкаСегментовОтчетаПоСчету(РегламентированныйОтчет, ИмяРаздела, СчетУчета)
	
	ШаблонОтбора = ИмяРаздела + "." + СчетУчета.УникальныйИдентификатор() + ".%";
	
	ЗапросПоДанным = Новый Запрос;
	ЗапросПоДанным.Текст = "ВЫБРАТЬ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла КАК ВидДополнительногоФайла
	                       |ИЗ
	                       |	РегистрСведений.ДополнительныеФайлыРегламентированныхОтчетов КАК ДополнительныеФайлыРегламентированныхОтчетов
	                       |ГДЕ
	                       |	ДополнительныеФайлыРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	                       |	И ДополнительныеФайлыРегламентированныхОтчетов.ВидДополнительногоФайла ПОДОБНО &ШаблонОтбора
	                       |
	                       |УПОРЯДОЧИТЬ ПО
	                       |	ВидДополнительногоФайла";
	
	ЗапросПоДанным.УстановитьПараметр("ШаблонОтбора", ШаблонОтбора);
	ЗапросПоДанным.УстановитьПараметр("РегламентированныйОтчет", РегламентированныйОтчет);
	
	ВыборкаСегментов = ЗапросПоДанным.Выполнить().Выбрать();
	
	Возврат ВыборкаСегментов;
	
КонецФункции

Процедура ЗаписатьДанныеВРегистрДополнительныхФайлов(ПараметрыЗаписи) Экспорт
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистраСведений.РегламентированныйОтчет = ПараметрыЗаписи.РегламентированныйОтчет;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = ПараметрыЗаписи.ВидДополнительногоФайла;
	
	ЗаписьРегистраСведений.СодержимоеФайла =
		Новый ХранилищеЗначения(ПараметрыЗаписи.Данные, Новый СжатиеДанных(9));
	
	ЗаписьРегистраСведений.ИмяФайла           = ПараметрыЗаписи.ИмяФайла;
	ЗаписьРегистраСведений.Размер             = ПараметрыЗаписи.КоличествоЗаписей;
	ЗаписьРегистраСведений.ДатаИзмененияФайла = ТекущаяДатаСеанса();
	ЗаписьРегистраСведений.ДатаДобавления     = ЗаписьРегистраСведений.ДатаИзмененияФайла;
	
	ЗаписьРегистраСведений.Записать();
	
КонецПроцедуры

Функция СчетОтмеченВСписке(СчетОтчета, СписокСчетов)
	
	СтрокаСчета = СписокСчетов.Найти(СчетОтчета, "Счет");
	
	Возврат СтрокаСчета <> Неопределено И СтрокаСчета.Включен;
	
КонецФункции

Функция ЗапросОСВПоСчету(ПараметрыЗаполнения)
	
	Организация   = ПараметрыЗаполнения.Организация;
	Счет          = ПараметрыЗаполнения.Счет;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	ПараметрыСчета = ПараметрыОтправкиСчета(Счет);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
	               |	NULL КАК Субконто1,
	               |	"""" КАК ПредставлениеСубконто1,
	               |	NULL КАК Субконто2,
	               |	"""" КАК ПредставлениеСубконто2,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК,
	               |	NULL КАК Субконто1ИНН,
	               |	NULL КАК Субконто1КПП,
	               |	NULL КАК Субконто2ИНН,
	               |	NULL КАК Субконто2КПП
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета0), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("Счета0", ПараметрыСчета[0].Счета);
	
	ШаблонЗапроса = "ВЫБРАТЬ
	                |	ХозрасчетныйОстаткиИОбороты.Счет,
	                |	ХозрасчетныйОстаткиИОбороты.Счет.Код,
	                |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
	                |	ХозрасчетныйОстаткиИОбороты.Субконто2,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
	                |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
	                |	ВТ_ДанныеКонтрагентов1.ИНН,
	                |	ВТ_ДанныеКонтрагентов1.КПП,
	                |	ВТ_ДанныеКонтрагентов2.ИНН,
	                |	ВТ_ДанныеКонтрагентов2.КПП
	                |ИЗ
	                |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов1
	                |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов1.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов2
	                |		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеКонтрагентов2.Ссылка";
	
	Для Инд = 1 По ПараметрыСчета.Количество() - 1 Цикл
		Если ПараметрыСчета[Инд].Счета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстИмениТаблицы = "ХозрасчетныйОстаткиИОбороты" + СтрокаЧГ0(Инд);
		ТекстПараметраСчета = "Счета" + СтрокаЧГ0(Инд);
		ТекстПараметраВидыСубконто = "ВидыСубконто" + СтрокаЧГ0(Инд);
		
		ТекстСегментаЗапроса = ШаблонЗапроса;
		
		Если ПараметрыСчета[Инд].Субконто.Количество() < 2 Тогда
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто2", "null");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2)", "null");
		КонецЕсли;
		
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты", ТекстИмениТаблицы);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Счета", "&" + ТекстПараметраСчета);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&ВидыСубконто", "&" + ТекстПараметраВидыСубконто);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
		             + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС
		             + ТекстСегментаЗапроса;
		
		Запрос.УстановитьПараметр(ТекстПараметраСчета, ПараметрыСчета[Инд].Счета);
		Запрос.УстановитьПараметр(ТекстПараметраВидыСубконто, ПараметрыСчета[Инд].Субконто);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
	             + "
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет,
	               |	Субконто1,
	               |	Субконто2
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросОСВПоСчету_5_11_01(ПараметрыЗаполнения)
	
	Организация   = ПараметрыЗаполнения.Организация;
	Счет          = ПараметрыЗаполнения.Счет;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	ПараметрыСчета = ПараметрыОтправкиСчета(Счет);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
	               |	NULL КАК Субконто1,
	               |	ЛОЖЬ КАК Субконто1Оборотное,
	               |	"""" КАК ПредставлениеСубконто1,
	               |	NULL КАК Субконто2,
	               |	ЛОЖЬ КАК Субконто2Оборотное,
	               |	"""" КАК ПредставлениеСубконто2,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК,
	               |	NULL КАК Субконто1ИНН,
	               |	NULL КАК Субконто1КПП,
	               |	NULL КАК Субконто2ИНН,
	               |	NULL КАК Субконто2КПП
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета0), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("Счета0", ПараметрыСчета[0].Счета);
	
	ШаблонЗапроса = "ВЫБРАТЬ
	                |	ХозрасчетныйОстаткиИОбороты.Счет,
	                |	ХозрасчетныйОстаткиИОбороты.Счет.Код,
	                |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	                |	&Субконто1Оборотное,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
	                |	ХозрасчетныйОстаткиИОбороты.Субконто2,
	                |	&Субконто2Оборотное,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
	                |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
	                |	ВТ_ДанныеКонтрагентов1.ИНН,
	                |	ВТ_ДанныеКонтрагентов1.КПП,
	                |	ВТ_ДанныеКонтрагентов2.ИНН,
	                |	ВТ_ДанныеКонтрагентов2.КПП
	                |ИЗ
	                |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов1
	                |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов1.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов2
	                |		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеКонтрагентов2.Ссылка";
	
	Для Инд = 1 По ПараметрыСчета.Количество() - 1 Цикл
		Если ПараметрыСчета[Инд].Счета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПараметрыСчета[Инд].Счета[0]);
		
		ТекстИмениТаблицы = "ХозрасчетныйОстаткиИОбороты" + СтрокаЧГ0(Инд);
		ТекстПараметраСчета = "Счета" + СтрокаЧГ0(Инд);
		ТекстПараметраВидыСубконто = "ВидыСубконто" + СтрокаЧГ0(Инд);
		ТекстПараметраСубконто1Оборотное = "Субконто1Оборотное" + СтрокаЧГ0(Инд);
		ТекстПараметраСубконто2Оборотное = "Субконто2Оборотное" + СтрокаЧГ0(Инд);
		
		ТекстСегментаЗапроса = ШаблонЗапроса;
		
		Если ПараметрыСчета[Инд].Субконто.Количество() < 2 Тогда
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2)", "null");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто2", "null");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Субконто2Оборотное", "ЛОЖЬ");
		КонецЕсли;
		
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты", ТекстИмениТаблицы);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Счета", "&" + ТекстПараметраСчета);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&ВидыСубконто", "&" + ТекстПараметраВидыСубконто);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Субконто1Оборотное", "&" + ТекстПараметраСубконто1Оборотное);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Субконто2Оборотное", "&" + ТекстПараметраСубконто2Оборотное);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
		             + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС
		             + ТекстСегментаЗапроса;
		
		Запрос.УстановитьПараметр(ТекстПараметраСчета, ПараметрыСчета[Инд].Счета);
		Запрос.УстановитьПараметр(ТекстПараметраВидыСубконто, ПараметрыСчета[Инд].Субконто);
		Запрос.УстановитьПараметр(ТекстПараметраСубконто1Оборотное, СвойстваСчета.ВидСубконто1ТолькоОбороты);
		Запрос.УстановитьПараметр(ТекстПараметраСубконто2Оборотное, СвойстваСчета.ВидСубконто2ТолькоОбороты);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
	             + "
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет,
	               |	Субконто1,
	               |	Субконто2
	               |ИТОГИ
	               |	СУММА(СНД),
	               |	СУММА(СНК),
	               |	СУММА(ДО),
	               |	СУММА(КО),
	               |	СУММА(СКД),
	               |	СУММА(СКК),
	               |	МАКСИМУМ(Субконто1ИНН),
	               |	МАКСИМУМ(Субконто1КПП),
	               |	МАКСИМУМ(Субконто2ИНН),
	               |	МАКСИМУМ(Субконто2КПП)
	               |ПО
	               |	Счет,
	               |	Субконто1
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросАнализСчета(ПараметрыЗаполнения)
	
	Организация   = ПараметрыЗаполнения.Организация;
	Счет          = ПараметрыЗаполнения.Счет;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	ПараметрыСчета = ПараметрыОтправкиСчета(Счет);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
	               |	NULL КАК Субконто1,
	               |	"""" КАК ПредставлениеСубконто1,
	               |	NULL КАК Субконто2,
	               |	"""" КАК ПредставлениеСубконто2,
	               |	NULL КАК КорСчет,
	               |	"""" КАК КодКорСчета,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК,
	               |	NULL КАК Субконто1ИНН,
	               |	NULL КАК Субконто1КПП,
	               |	NULL КАК Субконто2ИНН,
	               |	NULL КАК Субконто2КПП,
	               |	1 КАК Уровень
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета0), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Счет,
	               |	ХозрасчетныйОбороты.Счет.Код,
	               |	ХозрасчетныйОбороты.Субконто1,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1),
	               |	ХозрасчетныйОбороты.Субконто2,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2),
	               |	ХозрасчетныйОбороты.КорСчет,
	               |	ХозрасчетныйОбороты.КорСчет.Код,
	               |	0,
	               |	0,
	               |	ХозрасчетныйОбороты.СуммаОборотДт,
	               |	ХозрасчетныйОбороты.СуммаОборотКт,
	               |	0,
	               |	0,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	2
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета0), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("Счета0", ПараметрыСчета[0].Счета);
	
	ШаблонЗапроса = "ВЫБРАТЬ
	                |	ХозрасчетныйОстаткиИОбороты.Счет,
	                |	ХозрасчетныйОстаткиИОбороты.Счет.Код,
	                |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
	                |	ХозрасчетныйОстаткиИОбороты.Субконто2,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
	                |	NULL,
	                |	"""",
	                |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	                |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
	                |	ВТ_ДанныеКонтрагентов1.ИНН,
	                |	ВТ_ДанныеКонтрагентов1.КПП,
	                |	ВТ_ДанныеКонтрагентов2.ИНН,
	                |	ВТ_ДанныеКонтрагентов2.КПП,
	                |	1
	                |ИЗ
	                |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов1
	                |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов1.Ссылка
	                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов2
	                |		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеКонтрагентов2.Ссылка
	                |
	                |ОБЪЕДИНИТЬ ВСЕ
	                |
	                |ВЫБРАТЬ
	                |	ХозрасчетныйОбороты.Счет,
	                |	ХозрасчетныйОбороты.Счет.Код,
	                |	ХозрасчетныйОбороты.Субконто1,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1),
	                |	ХозрасчетныйОбороты.Субконто2,
	                |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2),
	                |	ХозрасчетныйОбороты.КорСчет,
	                |	ХозрасчетныйОбороты.КорСчет.Код,
	                |	0,
	                |	0,
	                |	ХозрасчетныйОбороты.СуммаОборотДт,
	                |	ХозрасчетныйОбороты.СуммаОборотКт,
	                |	0,
	                |	0,
	                |	NULL,
	                |	NULL,
	                |	NULL,
	                |	NULL,
	                |	2
	                |ИЗ
	                |	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Для Инд = 1 По ПараметрыСчета.Количество() - 1 Цикл
		Если ПараметрыСчета[Инд].Счета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстИмениТаблицы = "ХозрасчетныйОстаткиИОбороты" + СтрокаЧГ0(Инд);
		ТекстИмениТаблицыОборотов = "ХозрасчетныйОбороты" + СтрокаЧГ0(Инд);
		ТекстПараметраСчета = "Счета" + СтрокаЧГ0(Инд);
		ТекстПараметраВидыСубконто = "ВидыСубконто" + СтрокаЧГ0(Инд);
		
		ТекстСегментаЗапроса = ШаблонЗапроса;
		
		Если ПараметрыСчета[Инд].Субконто.Количество() < 2 Тогда
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто2", "null");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2)", "null");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОбороты.Субконто2", "null");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2)", "null");
		КонецЕсли;
		
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты", ТекстИмениТаблицы);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОбороты", ТекстИмениТаблицыОборотов);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Счета", "&" + ТекстПараметраСчета);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&ВидыСубконто", "&" + ТекстПараметраВидыСубконто);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
		             + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС
		             + ТекстСегментаЗапроса;
		
		Запрос.УстановитьПараметр(ТекстПараметраСчета, ПараметрыСчета[Инд].Счета);
		Запрос.УстановитьПараметр(ТекстПараметраВидыСубконто, ПараметрыСчета[Инд].Субконто);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
	             + "
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет,
	               |	Субконто1,
	               |	Субконто2,
	               |	Уровень,
	               |	КорСчет
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросАнализСчета_5_11_01(ПараметрыЗаполнения)
	
	Организация   = ПараметрыЗаполнения.Организация;
	Счет          = ПараметрыЗаполнения.Счет;
	НачалоПериода = ПараметрыЗаполнения.НачалоПериода;
	КонецПериода  = ПараметрыЗаполнения.КонецПериода;
	
	ПараметрыСчета = ПараметрыОтправкиСчета(Счет);
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
		|	NULL КАК Субконто1,
		|	NULL КАК ПредставлениеСубконто1,
		|	NULL КАК Субконто2,
		|	NULL КАК ПредставлениеСубконто2,
		|	NULL КАК КорСчет,
		|	NULL КАК КодКорСчета,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК,
		|	0 КАК КорДО,
		|	0 КАК КорКО,
		|	NULL КАК Субконто1ИНН,
		|	NULL КАК Субконто1КПП,
		|	NULL КАК Субконто2ИНН,
		|	NULL КАК Субконто2КПП,
		|	1 КАК Уровень
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета0), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Счет.Код,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.КорСчет.Код,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	2
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета0), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("Счета0", ПараметрыСчета[0].Счета);
	
	ШаблонЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1),
		|	ХозрасчетныйОстаткиИОбороты.Субконто2,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2),
		|	NULL,
		|	NULL,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт,
		|	0,
		|	0,
		|	ВТ_ДанныеКонтрагентов1.ИНН,
		|	ВТ_ДанныеКонтрагентов1.КПП,
		|	ВТ_ДанныеКонтрагентов2.ИНН,
		|	ВТ_ДанныеКонтрагентов2.КПП,
		|	1
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &ВидыСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов1
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов1.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов2
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеКонтрагентов2.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Счет,
		|	ХозрасчетныйОбороты.Счет.Код,
		|	ХозрасчетныйОбороты.Субконто1,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто1),
		|	ХозрасчетныйОбороты.Субконто2,
		|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2),
		|	ХозрасчетныйОбороты.КорСчет,
		|	ХозрасчетныйОбороты.КорСчет.Код,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ХозрасчетныйОбороты.СуммаОборотДт,
		|	ХозрасчетныйОбороты.СуммаОборотКт,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	2
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет В (&Счета), &ВидыСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Для Инд = 1 По ПараметрыСчета.Количество() - 1 Цикл
		Если ПараметрыСчета[Инд].Счета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстИмениТаблицы = "ХозрасчетныйОстаткиИОбороты" + СтрокаЧГ0(Инд);
		ТекстИмениТаблицыОборотов = "ХозрасчетныйОбороты" + СтрокаЧГ0(Инд);
		ТекстПараметраСчета = "Счета" + СтрокаЧГ0(Инд);
		ТекстПараметраВидыСубконто = "ВидыСубконто" + СтрокаЧГ0(Инд);
		
		ТекстСегментаЗапроса = ШаблонЗапроса;
		
		Если ПараметрыСчета[Инд].Субконто.Количество() < 2 Тогда
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2)", "NULL");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОбороты.Субконто2)", "NULL");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты.Субконто2", "NULL");
			ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОбороты.Субконто2", "NULL");
		КонецЕсли;
		
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОстаткиИОбороты", ТекстИмениТаблицы);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "ХозрасчетныйОбороты", ТекстИмениТаблицыОборотов);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&Счета", "&" + ТекстПараметраСчета);
		ТекстСегментаЗапроса = СтрЗаменить(ТекстСегментаЗапроса, "&ВидыСубконто", "&" + ТекстПараметраВидыСубконто);
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.ПС
		             + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + Символы.ПС
		             + ТекстСегментаЗапроса;
		
		Запрос.УстановитьПараметр(ТекстПараметраСчета, ПараметрыСчета[Инд].Счета);
		Запрос.УстановитьПараметр(ТекстПараметраВидыСубконто, ПараметрыСчета[Инд].Субконто);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса
	             + "
	               |УПОРЯДОЧИТЬ ПО
	               |	Счет,
	               |	Субконто1,
	               |	Субконто2,
	               |	Уровень,
	               |	КорСчет
	               |ИТОГИ
	               |	СУММА(СНД),
	               |	СУММА(СНК),
	               |	СУММА(ДО),
	               |	СУММА(КО),
	               |	СУММА(СКД),
	               |	СУММА(СКК),
	               |	МАКСИМУМ(Субконто1ИНН),
	               |	МАКСИМУМ(Субконто1КПП),
	               |	МАКСИМУМ(Субконто2ИНН),
	               |	МАКСИМУМ(Субконто2КПП)
	               |ПО
	               |	Счет,
	               |	Субконто1,
	               |	Субконто2
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос;
	
КонецФункции

Функция ПараметрыОтправкиСчета(ОтправляемыйСчет)
	
	ПараметрыСчета = Новый ТаблицаЗначений;
	ПараметрыСчета.Колонки.Добавить("Счета");
	ПараметрыСчета.Колонки.Добавить("Субконто");
	
	СтрокаПараметров = ПараметрыСчета.Добавить(); // Для счетов отправляемых без аналитики
	СтрокаПараметров.Счета    = Новый Массив;
	СтрокаПараметров.Субконто = Новый Массив;
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.УстановитьПараметрыСчета(ОтправляемыйСчет, ПараметрыСчета);
	
	ЗаполнитьПараметрыПоСубсчетам(ОтправляемыйСчет, ПараметрыСчета);
	
	Возврат ПараметрыСчета;
	
КонецФункции

Процедура ЗаполнитьПараметрыПоСубсчетам(ОтправляемыйСчет, ПараметрыСчета)
	
	Субсчета = БухгалтерскийУчетПовтИсп.СчетаВИерархии(ОтправляемыйСчет);
	
	КоличествоСочетаний = ПараметрыСчета.Количество();
	
	Для Каждого Субсчет Из Субсчета Цикл
		СтрокаПараметра = ПараметрыСчета[0]; // для счетов с неподдерживаемой аналитикой
		
		Для Инд = 1 По КоличествоСочетаний - 1 Цикл
			Если СчетУдовлетворяетАналитике(Субсчет, ПараметрыСчета[Инд].Субконто) Тогда
				СтрокаПараметра = ПараметрыСчета[Инд];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаПараметра.Счета.Добавить(Субсчет);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СчетУдовлетворяетАналитике(СчетУчета, НаборСубконто)
	
	ВсеСубконтоНайдены = Истина;
	
	Для Каждого Субконто Из НаборСубконто Цикл
		ВсеСубконтоНайдены = ВсеСубконтоНайдены
			И СчетУчета.ВидыСубконто.Найти(Субконто) <> Неопределено;
	КонецЦикла;
	
	Возврат ВсеСубконтоНайдены;
	
КонецФункции

Функция СводныеСведенияПоБанковскимОперациям2017Кв3(Параметры)
	
	Организация = Параметры.Организация;
	СчетБанковскихОпераций = Параметры.СчетБанковскихОпераций;
	НачалоПериода = Параметры.НачалоПериода;
	КонецПериода = Параметры.КонецПериода;
	
	СводныеДанные = Заполнить2017Кв3_Операции_НовыеСводныеДанные();
	
	СтрокаСчетаВерхнегоУровня = СводныеДанные.Строки.Добавить();
	СтрокаСчетаВерхнегоУровня.Счет = СчетБанковскихОпераций;
	СтрокаСчетаВерхнегоУровня.Представление = СчетБанковскихОпераций.Код;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК Представление,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СальдоНачальноеДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СальдоНачальноеКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОборотыДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ОборотыКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СальдоКонечноеДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СальдоКонечноеКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&СчетаУчета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление
		|ИТОГИ
		|	СУММА(СальдоНачальноеДт),
		|	СУММА(СальдоНачальноеКт),
		|	СУММА(ОборотыДт),
		|	СУММА(ОборотыКт),
		|	СУММА(СальдоКонечноеДт),
		|	СУММА(СальдоКонечноеКт)
		|ПО
		|	Счет ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУчета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетБанковскихОпераций));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	ВыборкаПоСчету = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	Если ВыборкаПоСчету.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаСчетаВерхнегоУровня, ВыборкаПоСчету);
		
		СтрокиПоСубсчетам = СтрокаСчетаВерхнегоУровня.Строки;
		ВыборкаПоСубсчетам = ВыборкаПоСчету.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
		Если ВыборкаПоСубсчетам.Количество() = 0 Тогда
			ВыборкаПоСубсчетам = ВыборкаПоСчету.Выбрать();
		КонецЕсли;
		
		Пока ВыборкаПоСубсчетам.Следующий() Цикл
			Заполнить2017Кв3_Операции_СводныеСведенияПоСубсчету(
				СтрокиПоСубсчетам, ВыборкаПоСубсчетам, Запрос);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СводныеДанные;
	
КонецФункции

Функция ДетальныеСведенияПоБанковскимОперациям2017Кв3(Параметры)
	
	Организация = Параметры.Организация;
	СчетБанковскихОпераций = Параметры.СчетБанковскихОпераций;
	НачалоПериода = Параметры.НачалоПериода;
	КонецПериода = Параметры.КонецПериода;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.Период КАК Период,
		|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
		|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
		|	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
		|	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 КАК ВидСубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 КАК ВидСубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 КАК ВидСубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 КАК ВидСубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 КАК ВидСубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 КАК ВидСубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
		|	ХозрасчетныйДвиженияССубконто.ВалютаДт.Наименование КАК ВалютаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютаКт.Наименование КАК ВалютаКт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
		|	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
		|	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание
		|ПОМЕСТИТЬ ВТ_ВсеОперации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Активность
		|				И Организация = &Организация
		|				И Счет В (&СчетаУчета),
		|			,
		|			) КАК ХозрасчетныйДвиженияССубконто
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеОперации.Период КАК ДатаОперации,
		|	ВТ_ВсеОперации.Регистратор КАК Документ,
		|	ВТ_ВсеОперации.НомерСтроки КАК НомерСтроки,
		|	ВТ_ВсеОперации.СчетДт КАК СчетДт,
		|	ВТ_ВсеОперации.СчетКт КАК СчетКт,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт1
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт2
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт3
		|	КОНЕЦ КАК БанковскийСчет,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА &Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА &Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА &Организация
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт1) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт2) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт3) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт3
		|	КОНЕЦ КАК Контрагент,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт1) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт2) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоКт3) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт3
		|	КОНЕЦ КАК Договор,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаДт, 0) КАК СуммаВал,
		|	ВТ_ВсеОперации.Сумма КАК Сумма,
		|	ВТ_ВсеОперации.Содержание КАК Назначение,
		|	ВТ_ДокументыПоСчету.НомерВходящегоДокумента КАК НомерДокумента,
		|	ВТ_ДокументыПоСчету.ДатаВходящегоДокумента КАК ДатаДокумента,
		|	ВТ_ДокументыПоСчету.ВидОперации КАК ВидОперации,
		|	ВТ_ВсеОперации.Сумма КАК СуммаДт,
		|	0 КАК СуммаКт,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаДт, 0) КАК СуммаВалДт,
		|	0 КАК СуммаВалКт,
		|	ВТ_ВсеОперации.ВалютаДт КАК ВалютаДт,
		|	ВТ_ВсеОперации.ВалютаКт КАК ВалютаКт,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.СчетКт В (&СчетаУчета)
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_ВсеОперации.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ВТ_ВсеОперации.СубконтоКт1
		|					КОГДА ВТ_ВсеОперации.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ВТ_ВсеОперации.СубконтоКт2
		|					КОГДА ВТ_ВсеОперации.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ВТ_ВсеОперации.СубконтоКт3
		|				КОНЕЦ
		|		ИНАЧЕ ВТ_ДокументыПоСчету.СчетКонтрагента
		|	КОНЕЦ КАК СчетКонтрагента,
		|	1 КАК ВидДвиженияПоСчету
		|ПОМЕСТИТЬ ВТ_ОперацииПоСчету
		|ИЗ
		|	ВТ_ВсеОперации КАК ВТ_ВсеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыПоСчетуПереопределяемый КАК ВТ_ДокументыПоСчету
		|		ПО ВТ_ВсеОперации.Регистратор = ВТ_ДокументыПоСчету.Ссылка
		|ГДЕ
		|	ВТ_ВсеОперации.СчетДт В(&СчетаУчета)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ВсеОперации.Период,
		|	ВТ_ВсеОперации.Регистратор,
		|	ВТ_ВсеОперации.НомерСтроки,
		|	ВТ_ВсеОперации.СчетДт,
		|	ВТ_ВсеОперации.СчетКт,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт1
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт2
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоКт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА ВТ_ВсеОперации.СубконтоКт3
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА &Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА &Организация
		|		КОГДА ВТ_ВсеОперации.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|			ТОГДА &Организация
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт1) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт2) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт3) В (&ВидыСубконтоКонтрагентов)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт3
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт1) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт1
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт2) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт2
		|		КОГДА ТИПЗНАЧЕНИЯ(ВТ_ВсеОперации.СубконтоДт3) В (&ВидыСубконтоДоговоров)
		|			ТОГДА ВТ_ВсеОперации.СубконтоДт3
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаКт, 0),
		|	ВТ_ВсеОперации.Сумма,
		|	ВТ_ВсеОперации.Содержание,
		|	ВТ_ДокументыПоСчету.НомерВходящегоДокумента,
		|	ВТ_ДокументыПоСчету.ДатаВходящегоДокумента,
		|	ВТ_ДокументыПоСчету.ВидОперации,
		|	0,
		|	ВТ_ВсеОперации.Сумма,
		|	0,
		|	ЕСТЬNULL(ВТ_ВсеОперации.ВалютнаяСуммаКт, 0),
		|	ВТ_ВсеОперации.ВалютаДт,
		|	ВТ_ВсеОперации.ВалютаКт,
		|	ВЫБОР
		|		КОГДА ВТ_ВсеОперации.СчетДт В (&СчетаУчета)
		|			ТОГДА ВЫБОР
		|					КОГДА ВТ_ВсеОперации.ВидСубконтоДт1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ВТ_ВсеОперации.СубконтоДт1
		|					КОГДА ВТ_ВсеОперации.ВидСубконтоДт2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ВТ_ВсеОперации.СубконтоДт2
		|					КОГДА ВТ_ВсеОперации.ВидСубконтоДт3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета)
		|						ТОГДА ВТ_ВсеОперации.СубконтоДт3
		|				КОНЕЦ
		|		ИНАЧЕ ВТ_ДокументыПоСчету.СчетКонтрагента
		|	КОНЕЦ,
		|	0
		|ИЗ
		|	ВТ_ВсеОперации КАК ВТ_ВсеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДокументыПоСчетуПереопределяемый КАК ВТ_ДокументыПоСчету
		|		ПО ВТ_ВсеОперации.Регистратор = ВТ_ДокументыПоСчету.Ссылка
		|ГДЕ
		|	ВТ_ВсеОперации.СчетКт В(&СчетаУчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОперацииПоСчету.ДатаОперации КАК ДатаОперации,
		|	ВТ_ОперацииПоСчету.Документ КАК Документ,
		|	ВТ_ОперацииПоСчету.НомерСтроки КАК НомерСтроки,
		|	ВТ_ОперацииПоСчету.СчетДт КАК СчетДт,
		|	ВТ_ОперацииПоСчету.СчетКт КАК СчетКт,
		|	ВТ_ОперацииПоСчету.БанковскийСчет КАК БанковскийСчет,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.Контрагент) КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.Договор) КАК Договор,
		|	ВТ_ОперацииПоСчету.СуммаВал КАК СуммаВал,
		|	ВТ_ОперацииПоСчету.Сумма КАК Сумма,
		|	ВТ_ОперацииПоСчету.Назначение КАК Назначение,
		|	ВТ_ОперацииПоСчету.НомерДокумента КАК НомерДокумента,
		|	ВТ_ОперацииПоСчету.ДатаДокумента КАК ДатаДокумента,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ОперацииПоСчету.ВидОперации) КАК ВидОперации,
		|	ВТ_ОперацииПоСчету.СуммаДт КАК СуммаДт,
		|	ВТ_ОперацииПоСчету.СуммаКт КАК СуммаКт,
		|	ВТ_ОперацииПоСчету.СуммаВалДт КАК СуммаВалДт,
		|	ВТ_ОперацииПоСчету.СуммаВалКт КАК СуммаВалКт,
		|	ВТ_ОперацииПоСчету.ВалютаДт КАК ВалютаДт,
		|	ВТ_ОперацииПоСчету.ВалютаКт КАК ВалютаКт,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """") КАК ИНН,
		|	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """") КАК КПП,
		|	ВТ_ОперацииПоСчету.СчетДт.Код КАК СчетДтКод,
		|	ВТ_ОперацииПоСчету.СчетКт.Код КАК СчетКтКод,
		|	ЕСТЬNULL(ВТ_БанковскиеСчета.БИКБанка, """") КАК СчетКонтрагентаБИК,
		|	ЕСТЬNULL(ВТ_БанковскиеСчета.НомерСчета, """") КАК СчетКонтрагентаНомер,
		|	ВТ_ОперацииПоСчету.ВидДвиженияПоСчету КАК ВидДвиженияПоСчету
		|ИЗ
		|	ВТ_ОперацииПоСчету КАК ВТ_ОперацииПоСчету
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
		|		ПО ВТ_ОперацииПоСчету.Контрагент = ВТ_ДанныеКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчетаПереопределяемый КАК ВТ_БанковскиеСчета
		|		ПО ВТ_ОперацииПоСчету.СчетКонтрагента = ВТ_БанковскиеСчета.Счет
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОперации,
		|	Документ,
		|	НомерСтроки
		|ИТОГИ ПО
		|	БанковскийСчет";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.УстановитьПараметр("СчетаУчета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(СчетБанковскихОпераций));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентов", ЗаполнениеОтчетностиВБанкиПереопределяемый.ВидыСубконтоКонтрагентов());
	Запрос.УстановитьПараметр("ВидыСубконтоДоговоров", ЗаполнениеОтчетностиВБанкиПереопределяемый.ВидыСубконтоДоговоров());
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область БухгалтерскиеВеличины

Функция БухгалтерскиеВеличиныПоПериодам(Организация, НачалоПериода, КонецПериода)
	
	ДатаНачалаПериодаОтчета = НачалоПериода;
	ДатаКонцаПериодаОтчета  = КонецПериода;
	
	ДатаНачалаПериодаПредыдущегоГода = ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12);
	ДатаКонцаПериодаПредыдущегоГода  = КонецМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, -12));
	
	ДатаНачалаПредыдущегоГода = НачалоГода(ДобавитьМесяц(ДатаНачалаПериодаОтчета, -12));
	ДатаКонцаПредыдущегоГода  = КонецГода(ДатаНачалаПредыдущегоГода);
	
	ДатаНачалаГодаПредшествующегоПредыдущему = НачалоГода(ДобавитьМесяц(ДатаНачалаПредыдущегоГода, -12));
	ДатаКонцаГодаПредшествующегоПредыдущему  = КонецГода(ДатаНачалаГодаПредшествующегоПредыдущему);
	
	БухгалтерскиеВеличины = Новый Структура;
	
	НастройкиПолученияБухитогов = Новый Структура;
	НастройкиПолученияБухитогов.Вставить("Организация",   Организация);
	НастройкиПолученияБухитогов.Вставить("НачалоПериода", ДатаНачалаПериодаОтчета);
	НастройкиПолученияБухитогов.Вставить("КонецПериода",  ДатаКонцаПериодаОтчета);
	
	СальдоИОборотыПоСчетам = ЗаполнениеБухгалтерскойОтчетностиИтоги.СальдоИОборотыПоСчетам(НастройкиПолученияБухитогов);
	ОборотыМеждуСчетами    = ЗаполнениеБухгалтерскойОтчетностиИтоги.ОборотыМеждуСчетами(НастройкиПолученияБухитогов);
	
	БухгалтерскиеВеличины.Вставить("ОтчетныйПериод", Новый Структура("СиО, ОмС", СальдоИОборотыПоСчетам, ОборотыМеждуСчетами));
	
	ЗаполнятьПредыдущиеПериоды = НЕ РасширенныйПериодОтчета(ДатаНачалаПериодаОтчета);
	
	Если ЗаполнятьПредыдущиеПериоды Тогда
		НастройкиПолученияБухитогов.Вставить("НачалоПериода", ДатаНачалаПредыдущегоГода);
		НастройкиПолученияБухитогов.Вставить("КонецПериода",  ДатаКонцаПредыдущегоГода);
		
		СальдоИОборотыПоСчетам = ЗаполнениеБухгалтерскойОтчетностиИтоги.СальдоИОборотыПоСчетам(НастройкиПолученияБухитогов);
		ОборотыМеждуСчетами    = ЗаполнениеБухгалтерскойОтчетностиИтоги.ОборотыМеждуСчетами(НастройкиПолученияБухитогов);
		
		БухгалтерскиеВеличины.Вставить("ПредыдущийГод", Новый Структура("СиО, ОмС", СальдоИОборотыПоСчетам, ОборотыМеждуСчетами));
		
		НастройкиПолученияБухитогов.Вставить("НачалоПериода", ДатаНачалаГодаПредшествующегоПредыдущему);
		НастройкиПолученияБухитогов.Вставить("КонецПериода",  ДатаКонцаГодаПредшествующегоПредыдущему);
		
		СальдоИОборотыПоСчетам = ЗаполнениеБухгалтерскойОтчетностиИтоги.СальдоИОборотыПоСчетам(НастройкиПолученияБухитогов);
		ОборотыМеждуСчетами    = ЗаполнениеБухгалтерскойОтчетностиИтоги.ОборотыМеждуСчетами(НастройкиПолученияБухитогов);
		
		БухгалтерскиеВеличины.Вставить("ГодПредшествующийПредыдущему", Новый Структура("СиО, ОмС", СальдоИОборотыПоСчетам, ОборотыМеждуСчетами));
		
		НастройкиПолученияБухитогов.Вставить("НачалоПериода", ДатаНачалаПериодаПредыдущегоГода);
		НастройкиПолученияБухитогов.Вставить("КонецПериода",  ДатаКонцаПериодаПредыдущегоГода);
		
		СальдоИОборотыПоСчетам = ЗаполнениеБухгалтерскойОтчетностиИтоги.СальдоИОборотыПоСчетам(НастройкиПолученияБухитогов);
		ОборотыМеждуСчетами    = ЗаполнениеБухгалтерскойОтчетностиИтоги.ОборотыМеждуСчетами(НастройкиПолученияБухитогов);
		
		БухгалтерскиеВеличины.Вставить("ПредыдущийПериод", Новый Структура("СиО, ОмС", СальдоИОборотыПоСчетам, ОборотыМеждуСчетами));
		
	КонецЕсли;
	
	Возврат БухгалтерскиеВеличины;
	
КонецФункции

Функция ОСВ_ПоКонтрагентамДоговорам(ПараметрыОСВ)
	
	Организация         = ПараметрыОСВ.Организация;
	Счет                = ПараметрыОСВ.Счет;
	НачалоПериодаОтчета = ПараметрыОСВ.НачалоПериодаОтчета;
	КонецПериодаОтчета  = ПараметрыОСВ.КонецПериодаОтчета;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1) КАК КонтрагентНаименование,
	               |	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """") КАК КонтрагентИНН,
	               |	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """") КАК КонтрагентКПП,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2) КАК ДоговорПредставление,
	               |	ЕСТЬNULL(ВТ_ДанныеДоговоров.Номер, """") КАК ДоговорНомер,
	               |	ЕСТЬNULL(ВТ_ДанныеДоговоров.Дата, """") КАК ДоговорДата,
	               |	ЕСТЬNULL(ВТ_ДанныеДоговоров.СрокДействия, """") КАК ДоговорСрокДействия,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &Субконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоров
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеДоговоров.Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ОСВ_ПоКредитамЗаймам(ПараметрыОСВ)
	
	Организация         = ПараметрыОСВ.Организация;
	Счет                = ПараметрыОСВ.Счет;
	НачалоПериодаОтчета = ПараметрыОСВ.НачалоПериодаОтчета;
	КонецПериодаОтчета  = ПараметрыОСВ.КонецПериодаОтчета;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Счет.Код КАК КодСчета,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто1) КАК КонтрагентНаименование,
	               |	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.ИНН, """") КАК КонтрагентИНН,
	               |	ЕСТЬNULL(ВТ_ДанныеКонтрагентов.КПП, """") КАК КонтрагентКПП,
	               |	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Субконто2) КАК ДоговорПредставление,
	               |	ЕСТЬNULL(ВТ_ДанныеДоговоров.Номер, """") КАК ДоговорНомер,
	               |	ЕСТЬNULL(ВТ_ДанныеДоговоров.Дата, """") КАК ДоговорДата,
	               |	ЕСТЬNULL(ВТ_ДанныеДоговоров.СрокДействия, """") КАК ДоговорСрокДействия,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК,
	               |	ХозрасчетныйОстаткиИОбороты.Валюта КАК Валюта,
	               |	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокДт КАК ВалСНД,
	               |	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстатокКт КАК ВалСНК,
	               |	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт КАК ВалДО,
	               |	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт КАК ВалКО,
	               |	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокДт КАК ВалСКД,
	               |	ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстатокКт КАК ВалСКК
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Период, , Счет В (&Счета), &Субконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеКонтрагентовПереопределяемый КАК ВТ_ДанныеКонтрагентов
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ВТ_ДанныеКонтрагентов.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеДоговоровПереопределяемый КАК ВТ_ДанныеДоговоров
	               |		ПО ХозрасчетныйОстаткиИОбороты.Субконто2 = ВТ_ДанныеДоговоров.Ссылка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	
	Субконто = Новый Массив;
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Субконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("Субконто", Субконто);
	
	ЗаполнениеОтчетностиВБанкиПереопределяемый.ДополнитьТекстЗапросаПоВременнымТаблицам(Запрос);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция АнализБезСубконтоПоМесяцам(ПараметрыАнализа)
	
	Организация = ПараметрыАнализа.Организация;
	НачалоПериодаОтчета = ПараметрыАнализа.НачалоПериодаОтчета;
	КонецПериодаОтчета = ПараметрыАнализа.КонецПериодаОтчета;
	Счет = ПараметрыАнализа.Счет;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Счет КАК Счет,
	               |	ВложенныйЗапрос.Период КАК Период,
	               |	ВложенныйЗапрос.КорСчет КАК КорСчет,
	               |	ВложенныйЗапрос.СНД КАК СНД,
	               |	ВложенныйЗапрос.СНК КАК СНК,
	               |	ВложенныйЗапрос.ДО КАК ДО,
	               |	ВложенныйЗапрос.КО КАК КО,
	               |	ВложенныйЗапрос.СКД КАК СКД,
	               |	ВложенныйЗапрос.СКК КАК СКК
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |		ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	               |		NULL КАК КорСчет,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, ДвиженияИГраницыПериода, Счет В (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Период,
	               |		ХозрасчетныйОбороты.КорСчет,
	               |		NULL,
	               |		NULL,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		ХозрасчетныйОбороты.СуммаОборотКт,
	               |		NULL,
	               |		NULL
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В (&Счета), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты) КАК ВложенныйЗапрос
	               |ИТОГИ
	               |	СУММА(СНД),
	               |	СУММА(СНК),
	               |	СУММА(ДО),
	               |	СУММА(КО),
	               |	СУММА(СКД),
	               |	СУММА(СКК)
	               |ПО
	               |	Счет,
	               |	Период";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	
	Запрос.УстановитьПараметр("Счета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Функция АнализПоБанковскимСчетам(ПараметрыАнализа)
	
	Организация = ПараметрыАнализа.Организация;
	НачалоПериодаОтчета = ПараметрыАнализа.НачалоПериодаОтчета;
	КонецПериодаОтчета = ПараметрыАнализа.КонецПериодаОтчета;
	Счет = ПараметрыАнализа.Счет;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.Счет КАК Счет,
	               |	ВложенныйЗапрос.БанковскийСчет КАК БанковскийСчет,
	               |	ВложенныйЗапрос.Период КАК Период,
	               |	ВложенныйЗапрос.КорСчет КАК КорСчет,
	               |	ВложенныйЗапрос.СНД КАК СНД,
	               |	ВложенныйЗапрос.СНК КАК СНК,
	               |	ВложенныйЗапрос.ДО КАК ДО,
	               |	ВложенныйЗапрос.КО КАК КО,
	               |	ВложенныйЗапрос.СКД КАК СКД,
	               |	ВложенныйЗапрос.СКК КАК СКК
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	               |		ХозрасчетныйОстаткиИОбороты.Субконто1 КАК БанковскийСчет,
	               |		ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	               |		NULL КАК КорСчет,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СНД,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СНК,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ДО,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК КО,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СКД,
	               |		ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СКК
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Месяц, ДвиженияИГраницыПериода, Счет В (&Счета), &СубконтоБанковскиеСчета, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Субконто1,
	               |		ХозрасчетныйОбороты.Период,
	               |		ХозрасчетныйОбороты.КорСчет,
	               |		NULL,
	               |		NULL,
	               |		ХозрасчетныйОбороты.СуммаОборотДт,
	               |		ХозрасчетныйОбороты.СуммаОборотКт,
	               |		NULL,
	               |		NULL
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Месяц, Счет В (&Счета), &СубконтоБанковскиеСчета, Организация = &Организация, , ) КАК ХозрасчетныйОбороты) КАК ВложенныйЗапрос
	               |ИТОГИ
	               |	СУММА(СНД),
	               |	СУММА(СНК),
	               |	СУММА(ДО),
	               |	СУММА(КО),
	               |	СУММА(СКД),
	               |	СУММА(СКК)
	               |ПО
	               |	Счет,
	               |	БанковскийСчет,
	               |	Период";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериодаОтчета);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериодаОтчета);
	
	Запрос.УстановитьПараметр("Счета", БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	Запрос.УстановитьПараметр("СубконтоБанковскиеСчета", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

#КонецОбласти

Процедура УстановитьЗначениеПоказателя(ПоказателиПоРазделам, ИмяРаздела, ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	НоваяСтрока = ПоказателиПоРазделам.Добавить();
	НоваяСтрока.Раздел = ИмяРаздела;
	НоваяСтрока.Показатель = ИмяПоказателя;
	НоваяСтрока.Сумма = ЗначениеПоказателя;
	
КонецПроцедуры

Функция ВключатьДопстрокуВОтчет(ДеревоНастроекСтрокРасшифровки, ИмяДопстроки)
	
	Результат = Ложь;
	
	НайденнаяСтрокаДерева = ДеревоНастроекСтрокРасшифровки.Строки.Найти(ИмяДопстроки, "ИмяОбластиДопСтроки", Истина);
	Если НайденнаяСтрокаДерева <> Неопределено Тогда
		Результат = (НайденнаяСтрокаДерева.ВключатьВОтчет <> 0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаЧГ0(ИсходноеЧисло)
	
	Возврат Формат(ИсходноеЧисло, "ЧН=; ЧГ=0");
	
КонецФункции

Процедура СвернутьТаблицуЗначенийДопСтрок(ТаблицаЗначенийДопСтрок)
	
	СписокГрафДляГруппировки = "";
	СписокГрафДляСуммирования = "";
	
	Для Каждого Колонка Из ТаблицаЗначенийДопСтрок.Колонки Цикл
		
		КолонкаСуммируется = (Колонка.ТипЗначения.СодержитТип(Тип("Число")));
		
		Если КолонкаСуммируется Тогда
			СписокГрафДляСуммирования = СписокГрафДляСуммирования + ?(ПустаяСтрока(СписокГрафДляСуммирования), "", ", ") + Колонка.Имя;
		Иначе
			СписокГрафДляГруппировки = СписокГрафДляГруппировки + ?(ПустаяСтрока(СписокГрафДляГруппировки), "", ", ") + Колонка.Имя;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаЗначенийДопСтрок.Свернуть(СписокГрафДляГруппировки, СписокГрафДляСуммирования);
	
КонецПроцедуры

Функция ТекстЗапросаСведенийСчета90_Кт_Дт()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СоединениеПериодов.Счет КАК Счет,
	               |	СоединениеПериодов.СубконтоРазвертки КАК СубконтоРазвертки,
	               |	СУММА(СоединениеПериодов.Отчетный) КАК Отчетный,
	               |	СУММА(СоединениеПериодов.Предшествующий) КАК Предшествующий
	               |ПОМЕСТИТЬ ВТ_ВсеДанные
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет КАК Счет,
	               |		ХозрасчетныйОбороты.Субконто1 КАК СубконтоРазвертки,
	               |		ХозрасчетныйОбороты.СуммаОборотКт КАК Отчетный,
	               |		0 КАК Предшествующий
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаОтч, &КонПериодаОтч, Период, Счет В (&СчетаПлюс), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Субконто1,
	               |		-1 * ХозрасчетныйОбороты.СуммаОборотДт,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаОтч, &КонПериодаОтч, Период, Счет В (&СчетаМинус), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Субконто1,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаПред, &КонПериодаПред, Период, Счет В (&СчетаПлюс), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Субконто1,
	               |		0,
	               |		-1 * ХозрасчетныйОбороты.СуммаОборотДт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаПред, &КонПериодаПред, Период, Счет В (&СчетаМинус), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты) КАК СоединениеПериодов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоединениеПериодов.Счет,
	               |	СоединениеПериодов.СубконтоРазвертки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСведенийСчета90_Дт_Кт()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СоединениеПериодов.Счет КАК Счет,
	               |	СоединениеПериодов.СубконтоРазвертки КАК СубконтоРазвертки,
	               |	СУММА(СоединениеПериодов.Отчетный) КАК Отчетный,
	               |	СУММА(СоединениеПериодов.Предшествующий) КАК Предшествующий
	               |ПОМЕСТИТЬ ВТ_ВсеДанные
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет КАК Счет,
	               |		ХозрасчетныйОбороты.Субконто1 КАК СубконтоРазвертки,
	               |		ХозрасчетныйОбороты.СуммаОборотДт КАК Отчетный,
	               |		0 КАК Предшествующий
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаОтч, &КонПериодаОтч, Период, Счет В (&СчетаПлюс), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Субконто1,
	               |		-1 * ХозрасчетныйОбороты.СуммаОборотКт,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаОтч, &КонПериодаОтч, Период, Счет В (&СчетаМинус), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Субконто1,
	               |		0,
	               |		ХозрасчетныйОбороты.СуммаОборотДт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаПред, &КонПериодаПред, Период, Счет В (&СчетаПлюс), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ХозрасчетныйОбороты.Счет,
	               |		ХозрасчетныйОбороты.Субконто1,
	               |		0,
	               |		-1 * ХозрасчетныйОбороты.СуммаОборотКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Обороты(&НачПериодаПред, &КонПериодаПред, Период, Счет В (&СчетаМинус), &ВидСубконтоРазвертки, Организация В (&Организации), , ) КАК ХозрасчетныйОбороты) КАК СоединениеПериодов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоединениеПериодов.Счет,
	               |	СоединениеПериодов.СубконтоРазвертки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ВставитьМногострочнуюЧастьОФР(МногострочныеПоказатели, МногострочнаяЧасть)
	
	Если МногострочнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Раздел = "ФормаОтчета";
	
	Если НЕ МногострочныеПоказатели.Свойство(Раздел) Тогда
		МногострочныеПоказатели.Вставить(Раздел, Новый Структура);
	КонецЕсли;
	
	МногострочныеПоказатели[Раздел].Вставить(МногострочнаяЧасть.ИдМСЧ, МногострочнаяЧасть.ТаблицаМСЧ);
	
КонецПроцедуры

Функция ВыводитьСведенияПоНоменклатурнымГруппам(ПараметрыОтчета)
	
	Если ПараметрыОтчета.ПрименениеЕНВД Тогда
		Возврат ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока21101")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока21102")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока21201")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока21202")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока22101")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока22102")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока22201")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока22202");
	Иначе
		Возврат ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока2110")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока2120")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока2210")
		    ИЛИ ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, "ДопСтрока2220");
	КонецЕсли;
	
КонецФункции

Функция СведенияСчета90ПоСубконто(ПараметрыОтчета, НомерСтроки, Запрос, СчетаПоказателя)
	
	ПолныйНомерСтроки = Сред("00000", СтрДлина(НомерСтроки) + 1) + НомерСтроки;
	ИмяСтроки = "П10010" + ПолныйНомерСтроки;
	ИмяГруппы = "П10010" + ПолныйНомерСтроки;
	ИмяДопСтроки = "ДопСтрока" + НомерСтроки;
	
	МногострочнаяЧасть = Новый ТаблицаЗначений;
	МногострочнаяЧасть.Колонки.Добавить(ИмяСтроки + "01", Новый ОписаниеТипов("Строка"));
	МногострочнаяЧасть.Колонки.Добавить(ИмяСтроки + "02", Новый ОписаниеТипов("Строка"));
	МногострочнаяЧасть.Колонки.Добавить(ИмяСтроки + "04", Новый ОписаниеТипов("Число"));
	МногострочнаяЧасть.Колонки.Добавить(ИмяСтроки + "05", Новый ОписаниеТипов("Число"));
	
	Если ВключатьДопстрокуВОтчет(ПараметрыОтчета.СоставДополнительныхСтрокОПУ, ИмяДопСтроки) Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТ_ВсеДанные.СубконтоРазвертки,
		               |	СУММА(ВТ_ВсеДанные.Отчетный) КАК Отчетный,
		               |	СУММА(ВТ_ВсеДанные.Предшествующий) КАК Предшествующий
		               |ИЗ
		               |	ВТ_ВсеДанные КАК ВТ_ВсеДанные
		               |ГДЕ
		               |	ВТ_ВсеДанные.Счет В(&СчетаПоказателя)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ВсеДанные.СубконтоРазвертки
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Отчетный УБЫВ,
		               |	Предшествующий УБЫВ
		               |ИТОГИ
		               |	СУММА(Отчетный),
		               |	СУММА(Предшествующий)
		               |ПО
		               |	ОБЩИЕ";
		
		Запрос.УстановитьПараметр("СчетаПоказателя", СчетаИзСписка(СчетаПоказателя));
		
		ИтоговыйРезультат = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ИтоговыйРезультат.Следующий();
		
		ИтогоОтчетный = ИтоговыйРезультат.Отчетный;
		ИтогоПредшествующий = ИтоговыйРезультат.Предшествующий;
		
		ВыведеноСтрок = 0;
		ДопСтрока = ПараметрыОтчета.СоставДополнительныхСтрокОПУ.Строки.Найти(ИмяДопСтроки, "ИмяОбластиДопСтроки", Истина);
		ВыводитьСтрок = ДопСтрока.МаксимальноеКоличество;
		Существенность = ДопСтрока.Существенность/100;
		
		СведенияПоСубконто = ИтоговыйРезультат.Выбрать();
		Пока СведенияПоСубконто.Следующий() Цикл
			
			Если ВыводитьСтрок > 0 И ВыведеноСтрок >= ВыводитьСтрок Тогда
				Прервать;
			КонецЕсли;
			
			Если ИтогоОтчетный <> 0 Тогда
				ВесПоказателя = СведенияПоСубконто.Отчетный / ИтогоОтчетный;
			ИначеЕсли ИтогоПредшествующий <> 0 Тогда
				ВесПоказателя = СведенияПоСубконто.Предшествующий / ИтогоПредшествующий;
			Иначе
				ВесПоказателя = 0;
			КонецЕсли;
			
			Если ВесПоказателя < Существенность Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = МногострочнаяЧасть.Добавить();
			НоваяСтрока[ИмяСтроки + "02"] = СведенияПоСубконто.СубконтоРазвертки;
			НоваяСтрока[ИмяСтроки + "04"] = СведенияПоСубконто.Отчетный;
			НоваяСтрока[ИмяСтроки + "05"] = СведенияПоСубконто.Предшествующий;
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("ИдМСЧ, ТаблицаМСЧ", ИмяГруппы, МногострочнаяЧасть);
	
КонецФункции

Функция СчетаИзСписка(Знач СписокСчетов, ИмяСпискаСчетов = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Разделитель = ",";
	
	Если ТипЗнч(СписокСчетов) = Тип("Структура") Тогда
		ЭлементСтруктуры = Неопределено;
		Если Не СписокСчетов.Свойство(ИмяСпискаСчетов, ЭлементСтруктуры) Тогда
			ЭлементСтруктуры = "";
		КонецЕсли;
		СписокСчетов = ЭлементСтруктуры;
	КонецЕсли;
	
	Пока НЕ ПустаяСтрока(СписокСчетов) Цикл
		ПозицияРазделителя = СтрНайти(СписокСчетов, Разделитель);
		Если ПозицияРазделителя > 0 Тогда
			КодСчета = СокрЛП(Лев(СписокСчетов, ПозицияРазделителя - 1));
			СписокСчетов = Сред(СписокСчетов, ПозицияРазделителя + 1);
		Иначе
			КодСчета = СокрЛП(СписокСчетов);
			СписокСчетов = "";
		КонецЕсли;
		Если Не ПустаяСтрока(КодСчета) Тогда
			МассивСчетов.Добавить(Счет(КодСчета));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции

Функция ОписаниеПериода(НачалоПериода, КонецПериода)
	
	Если НачалоМесяца(КонецПериода) = НачалоПериода Тогда
		Результат = Формат(КонецПериода, "ДФ = 'ММММ гггг'") + "г.";
	Иначе
		Результат = Формат(НачалоПериода, "ДФ = 'ММММ гггг'") + " - " + Формат(КонецПериода, "ДФ = 'ММММ гггг'") + "г.";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьРазделРасшифровки(ТаблицаРасшифровки, ИмяРаздела)
	
	СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(Новый Структура("ИмяРаздела", ИмяРаздела));
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		ТаблицаРасшифровки.Удалить(СтрокаРасшифровки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПоказателиПоПрефиксу(Показатели, Префикс)
	
	Для Каждого Показатель Из Показатели Цикл
		ИмяПоказателя = Показатель.Ключ;
		Если СтрНачинаетсяС(ИмяПоказателя, Префикс) Тогда
			Если ТипЗнч(Показатель.Значение) = Тип("Число") Тогда
				Показатели[ИмяПоказателя] = 0;
			ИначеЕсли ТипЗнч(Показатель.Значение) = Тип("Строка") Тогда
				Показатели[ИмяПоказателя] = "";
			Иначе
				ВызватьИсключение "Необрабатываемый тип показателя с именем " + ИмяПоказателя + " в процедуре ОчиститьПоказателиПоПрефиксу()";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ДействуетСВерсииФормата(Знач НомерВерсии, Знач ВерсияФормата)
	
	НомерВерсии  = Число(СтрЗаменить(НомерВерсии, ".", ""));
	ВерсияФормата = Число(СтрЗаменить(ВерсияФормата, ".", ""));
	
	Возврат (ВерсияФормата >= НомерВерсии);
	
КонецФункции

#Область ОберткиФункцийИПроцедур

Функция Счет(УсловныйКод)
	
	Возврат ЗаполнениеБухгалтерскойОтчетностиИтоги.Счет(УсловныйКод);
	
КонецФункции

#КонецОбласти

#КонецОбласти
