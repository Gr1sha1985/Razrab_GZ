////////////////////////////////////////////////////////////////////////////////
// Подсистема "Электронный документооборот с контролирующими органами".
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Функция ПолучитьОбработкуЭДО(ТекстСообщения = "") Экспорт
	
	ИнформацияОбОбработке = ДокументооборотСКОВызовСервера.ПодключатьВнешнююОбработкуЭДО();
	
	Если ИнформацияОбОбработке.Подключать И НЕ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Если ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Истина) Тогда
			ИндексОбработкиЭДОСтрокой = Формат(ИнформацияОбОбработке.ИндексОбработкиЭДО, "ЧДЦ=; ЧГ=");
			
			ОбъектОбработка = ВнешниеОбработки.Создать("Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой);
			ОбъектОбработка.ПутьКОбъекту = "ВнешняяОбработка.Обработка_ДокументооборотСКО" + ИндексОбработкиЭДОСтрокой;
			Возврат ОбъектОбработка;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Если ДокументооборотСКОВызовСервера.ЕстьПравоНаДОсКО(Ложь) Тогда 
			ОбъектОбработка = Обработки.ДокументооборотСКонтролирующимиОрганами.Создать();
			ОбъектОбработка.ПутьКОбъекту = "Обработка.ДокументооборотСКонтролирующимиОрганами";
			Возврат ОбъектОбработка;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Недостаточно прав для использования методов электронного документооборота с контролирующими органами.'");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Для задания обработчиков параметров сеанса следует использовать шаблон:
// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
//
// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
//             что один обработчик будет вызван для инициализации всех параметров сеанса
//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
//
Процедура ОбработчикиИнициализацииПараметровСеанса(Обработчики) Экспорт
	
	// Электронный документооборот с контролирующими органами
	Обработчики.Вставить("ТекущиеУчетныеЗаписиНалогоплательщика", "ДокументооборотСКОВызовСервера.УстановитьПараметрСеансаТекущиеУчетныеЗаписиНалогоплательщика");
	Обработчики.Вставить("ТекущийСеансДокументооборотаСКО", "ДокументооборотСКО.УстановитьПараметрСеансаТекущийСеансДокументооборотаСКО");
	Обработчики.Вставить(ДлительнаяОтправкаКлиентСервер.СерверныйКлюч(), "ДлительнаяОтправка.ПриУстановкеПараметровСеанса");
	// Конец Электронный документооборот с контролирующими органами
	
КонецПроцедуры

#Область СеансСвязиСКонтролирующимиОрганами

Процедура УстановитьПараметрСеансаТекущийСеансДокументооборотаСКО(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт
	
	ПараметрыСеанса.ТекущийСеансДокументооборотаСКО = Справочники.СеансыСвязиСКонтролирующимиОрганами.ПустаяСсылка();
	
КонецПроцедуры

Процедура НачатьСеансДокументооборотаСКО(ИнициаторСеанса, УчетнаяЗапись = Неопределено) Экспорт
	
	НовыйСеанс = Справочники.СеансыСвязиСКонтролирующимиОрганами.СоздатьЭлемент();
	НовыйСеанс.Начало = ТекущаяУниверсальнаяДата();
	НовыйСеанс.ИнициаторСеанса = ИнициаторСеанса;
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
		НовыйСеанс.УчетнаяЗапись = УчетнаяЗапись;
	КонецЕсли;
	
	НовыйСеанс.Записать();
	
	ПараметрыСеанса.ТекущийСеансДокументооборотаСКО = НовыйСеанс.Ссылка;
	
КонецПроцедуры

Процедура ЗакончитьСеансДокументооборотаСКО(УчетнаяЗапись = Неопределено, Успешно = Истина) Экспорт
	
	ТекущийСеанс = ТекущийСеансДокументооборотаСКО();
	Если ЗначениеЗаполнено(ТекущийСеанс) Тогда
		СеансОбъект = ТекущийСеанс.ПолучитьОбъект();
		
		СеансОбъект.Окончание = ТекущаяУниверсальнаяДата();
		СеансОбъект.Успешно = Успешно;
		СеансОбъект.Записать();
		
		ПараметрыСеанса.ТекущийСеансДокументооборотаСКО = Справочники.СеансыСвязиСКонтролирующимиОрганами.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекущийСеансДокументооборотаСКО() Экспорт
	
	Возврат ПараметрыСеанса.ТекущийСеансДокументооборотаСКО;
	
КонецФункции

#КонецОбласти

Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ОписаниеОшибки = "", Таймаут = 60) Экспорт

	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLСервера);
	Схема = ?(ЗначениеЗаполнено(СтруктураURI.Схема), СтруктураURI.Схема, "http");
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Схема);
	
	Попытка
		Соединение = Новый HTTPСоединение(
			СтруктураURI.Хост,
			СтруктураURI.Порт,
			СтруктураURI.Логин,
			СтруктураURI.Пароль, 
			Прокси,
			Таймаут,
			?(НРег(Схема) = "http", Неопределено, ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()));
	Исключение
			
		ИнформацияОбОшибке = ОбщегоНазначенияЭДКОКлиентСервер.ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Установление соединения с сервером интернета'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

#Область ОбменСКонтролирующимиОрганами

Процедура ВыполнитьОбмен(УчетнаяЗапись) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменСКонтролирующимиОрганами);
	
	Если ОтключитьПриНеобходимостиАвтоматическийОбмен(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЭДО = ПолучитьОбработкуЭДО();	
	ОбработкаЭДО.ВыполнитьОбмен(УчетнаяЗапись);
	
КонецПроцедуры

Функция ПолучитьСообщения(УчетнаяЗапись) Экспорт
	
	ОбработкаЭДО = ПолучитьОбработкуЭДО();	
	Возврат ОбработкаЭДО.ПолучитьСообщения(УчетнаяЗапись);
	
КонецФункции

Процедура ОтправитьСообщения(УчетнаяЗапись) Экспорт
	
	ОбработкаЭДО = ПолучитьОбработкуЭДО();	
	ОбработкаЭДО.ОтправитьСообщения(УчетнаяЗапись);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеСтатусомАвтообмена

Процедура НастроитьОбменПоУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если УчетнаяЗапись.ОтключитьАвтообмен Тогда
		ОтключитьОбменПоУчетнойЗаписи(УчетнаяЗапись);
	Иначе
		ВключитьОбменПоУчетнойЗаписи(УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВключитьОбменПоУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтключитьОбменПоУчетнойЗаписи(УчетнаяЗапись);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = ПолучитьИнтервалВыполненияОбмена(УчетнаяЗапись);
	Расписание.ПериодПовтораДней 		= 1;

	Параметры = Новый Массив;
	Параметры.Добавить(УчетнаяЗапись);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбменСКонтролирующимиОрганами);
	ПараметрыЗадания.Вставить("Ключ", Строка(УчетнаяЗапись.УникальныйИдентификатор()));
	ПараметрыЗадания.Вставить("Параметры", Параметры);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 10);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
	ПараметрыЗадания.Вставить("Наименование", СтрШаблон(НСтр("ru = 'Обмен с контролирующими органами (%1)'"), УчетнаяЗапись));
	
	РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
КонецПроцедуры

Процедура ОтключитьОбменПоУчетнойЗаписи(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Строка(УчетнаяЗапись.УникальныйИдентификатор()));
	Отбор.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбменСКонтролирующимиОрганами);
	НайденныеЗадания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	Для Каждого Задание Из НайденныеЗадания Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(Задание.УникальныйИдентификатор);
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСИнтернетПочтой

Функция ПолучитьПочтовоеСоединение(ПочтовыйПрофиль) Экспорт
	
	ПочтовоеСоединение = Неопределено;
	Попытка
		ПочтовоеСоединение = Новый ИнтернетПочта;
		ПочтовоеСоединение.Подключиться(ПочтовыйПрофиль, ПротоколИнтернетПочты.POP3);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Электронный документооборот с контролирующими органами. Почтовое соединение'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ПочтовоеСоединение;

КонецФункции

Функция ОткрытьСоединениеДляПолученияПочты(ПараметрыПодключения) Экспорт
	
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	
	ПочтовыйПрофиль.АдресСервераPOP3   = ПараметрыПодключения.POP3.Сервер;
	ПочтовыйПрофиль.ПортPOP3           = ПараметрыПодключения.POP3.Порт;
	ПочтовыйПрофиль.АутентификацияPOP3 = ПараметрыПодключения.POP3.СпособАутентификации;
	ПочтовыйПрофиль.Пользователь       = ПараметрыПодключения.POP3.Пользователь;	
	ПочтовыйПрофиль.Пароль             = ПараметрыПодключения.POP3.Пароль;
	
	ПочтовыйПрофиль.Таймаут = ПараметрыПодключения.Таймаут;
	
	Соединение = ПолучитьПочтовоеСоединение(ПочтовыйПрофиль);
	
	Возврат Соединение;
	
КонецФункции

Функция ОткрытьСоединениеДляОтправкиПочты(ПараметрыПодключения) Экспорт
	
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;

	ПочтовыйПрофиль.АдресСервераSMTP   = ПараметрыПодключения.SMTP.Сервер;
	ПочтовыйПрофиль.ПортSMTP           = ПараметрыПодключения.SMTP.Порт;
	ПочтовыйПрофиль.АутентификацияSMTP = ПараметрыПодключения.SMTP.СпособАутентификации;
	ПочтовыйПрофиль.ПользовательSMTP   = ПараметрыПодключения.SMTP.Пользователь;	
	ПочтовыйПрофиль.ПарольSMTP         = ПараметрыПодключения.SMTP.Пароль;
	
	ПочтовыйПрофиль.Таймаут = ПараметрыПодключения.Таймаут;
	
	Соединение = ПолучитьПочтовоеСоединение(ПочтовыйПрофиль);
	
	Возврат Соединение;
	
КонецФункции

Процедура ЗакрытьПочтовоеСоединение(ПочтовоеСоединение) Экспорт
	
	ПочтовоеСоединение.Отключиться();
	
КонецПроцедуры

#КонецОбласти

#Область ПереносТранспортныхСообщенийВПрисоединенныеФайлы

Процедура ПеренестиТранспортныеСообщенияВПрисоединенныеФайлы() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПереносСообщений1СОтчетностиВПрисоединенныеФайлы);
	
	ОбработкаЭДО = ПолучитьОбработкуЭДО();
	Если ОбработкаЭДО.ПеренестиТранспортныеСообщенияВПрисоединенныеФайлы() Тогда
		УстановитьПривилегированныйРежим(Истина);
		РегламентныеЗаданияСервер.УдалитьЗадание(Метаданные.РегламентныеЗадания.ПереносСообщений1СОтчетностиВПрисоединенныеФайлы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ТекущемуПользователюЭДОДоступен = ДокументооборотСКОВызовСервера.ТекущемуПользователюЭДОДоступен();
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюЭДОДоступен", ТекущемуПользователюЭДОДоступен);
	
	ТекущемуПользователюАОДоступен = ДокументооборотСКОВызовСервера.ТекущемуПользователюАОДоступен();
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ТекущемуПользователюАОДоступен", ТекущемуПользователюАОДоступен);
	
	ВыбранныйCSPИзВременныхНастроек = ДокументооборотСКОВызовСервера.ПолучитьВыбранныйCSPИзВременныхНастроек();
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ВыбранныйCSPИзВременныхНастроек", ВыбранныйCSPИзВременныхНастроек);
	
	Параметры.Вставить("ДоступныеЛокальныеСертификатыПользователя", ОбщегоНазначенияЭДКОСлужебныйВызовСервера.ДоступныеЛокальныеСертификатыПользователя());
	Параметры.Вставить(
		"НеПоказыватьПредупреждениеОКонфликтеКриптопровайдеров", 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПредупреждениеОКонфликтеКриптопровайдеров", "БольшеНеПоказывать", Ложь));
		
	Параметры.Вставить("ДокументооборотСКонтролирующимиОрганами_ЕстьОтправленныеЗаявленияАбонентов", 
		ОбработкаЗаявленийАбонентаВызовСервера.ОтправленныеЗаявленияАбонентов(,,,,Истина).Количество() > 0);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбъединитьВTIFСканы(ОписаниеФайлов, АдресРезультата) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ОписаниеФайлов", Неопределено);
	
	Для каждого СтрокаОписанияФайлов Из ОписаниеФайлов Цикл
		
		Картинки = Новый Массив;
		Для Каждого ДвоичныеДанные из СтрокаОписанияФайлов.МассивДвоичныхДанных Цикл
			Картинки.Добавить(Новый Картинка(ДвоичныеДанные));
		КонецЦикла;
		
		ОбрабатываемаяКартинка = Новый ОбрабатываемаяКартинка(Картинки, ФорматКартинки.TIFF);
		ОбрабатываемаяКартинка.УстановитьГлубинуЦвета(ГлубинаЦвета.БитНаПиксел1);
		ОбрабатываемаяКартинка.УстановитьПлотность(300, 300);
		Картинка = ОбрабатываемаяКартинка.ПолучитьКартинку();
		Данные = Картинка.ПолучитьДвоичныеДанные();
		Если Данные = Неопределено Тогда
			
			Результат.ТекстОшибки = НСтр("ru = 'Не удалось получить данные скана'");
			ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
			Возврат;
			
		КонецЕсли;
		СтрокаОписанияФайлов.Вставить("ДвДанныеИтоговогоФайла", Данные);
	
	КонецЦикла;
	
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("ОписаниеФайлов", ОписаниеФайлов);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#Область СлужебныеОбработчики

// Процедура, необходимая срабатывания рег задания по отслеживанию заявлений
// в модели сервиса как элемента очереди заданий.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбработкаЗаявленийАбонента.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбменСКонтролирующимиОрганами.ИмяМетода);
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ПереносСообщений1СОтчетностиВПрисоединенныеФайлы.ИмяМетода);
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданных:РегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданных:ФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более, чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - неопределено.
//    * ДоступноВМоделиСервиса      - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в модели сервиса.
//        По умолчанию - неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.).
//        По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Например:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбменСКонтролирующимиОрганами;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.Параметризуется = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаЗаявленийАбонента;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.Параметризуется = Истина;
	
КонецПроцедуры

#КонецОбласти

Функция ОтключитьПриНеобходимостиАвтоматическийОбмен(УчетнаяЗапись)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗапись
	|	И НЕ Организации.ПометкаУдаления
	|	И Организации.ВидОбменаСКонтролирующимиОрганами = ЗНАЧЕНИЕ(Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате)";
	
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	Если Запрос.Выполнить().Пустой() ИЛИ УчетнаяЗапись.ПометкаУдаления Тогда
		ОтключитьОбменПоУчетнойЗаписи(УчетнаяЗапись);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьИнтервалВыполненияОбмена(УчетнаяЗапись)
	
	Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() Тогда
		Интервал = 90;
	Иначе
		Интервал = 3600;
	КонецЕсли;
	
	Возврат Интервал;
	
КонецФункции

Функция ПолучитьЗаменяемоеЗначениеТестовогоСервера1С(ИсходноеЗначение, ЗначениеДляОтправки = Неопределено, СоединениеHTTP = Неопределено) Экспорт
		
	Если ДокументооборотСКОВызовСервера.ИспользуетсяРежимТестирования() = Ложь Тогда
		Возврат ИсходноеЗначение;
	КонецЕсли;
	
	ПодключенТестовыйКонтур1С = Ложь;
	
	Если СоединениеHTTP <> Неопределено И СоединениеHTTP.Сервер = "ego712.tc7app.com" Тогда
		ПодключенТестовыйКонтур1С = Истина;
	ИначеЕсли СоединениеHTTP <> Неопределено И СоединениеHTTP.Сервер <> "ego712.tc7app.com" Тогда
		ПодключенТестовыйКонтур1С = Ложь;
	Иначе
		URLСервера = "http://ego712.tc7app.com:80";
		СоединениеHTTPТестовогоСервера = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(URLСервера);
		Если СоединениеHTTPТестовогоСервера = Неопределено Тогда
			Возврат ИсходноеЗначение;	
		КонецЕсли;
	
		Если СоединениеHTTPТестовогоСервера <> Неопределено Тогда
			ЗапросHTTP = Новый HTTPЗапрос("/ego/hs/Agents/AutoSettings/Connect/Status");
			ИдентификаторИнформационнойБазы = СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы();
			ЗапросHTTP.Заголовки.Вставить("BaseID", ИдентификаторИнформационнойБазы); 
			Попытка
				ОтветHTTP = СоединениеHTTPТестовогоСервера.ОтправитьДляОбработки(ЗапросHTTP);
			Исключение
				Возврат ИсходноеЗначение;	
			КонецПопытки;
			
			Если ОтветHTTP.КодСостояния = 200 Тогда
				ПодключенТестовыйКонтур1С = Истина;
				СоединениеHTTP = СоединениеHTTPТестовогоСервера;
			Иначе
				Возврат ИсходноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодключенТестовыйКонтур1С = Ложь Тогда
		Возврат ИсходноеЗначение;
	КонецЕсли;
	
	Если ЗначениеДляОтправки = Неопределено Тогда
		ЗначениеДляОтправки = ИсходноеЗначение;
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос("/ego/hs/Agents/TestingMode/Values/Change?Value=" + ЗначениеДляОтправки);
	
	Попытка
		ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Исключение
		Возврат ИсходноеЗначение;	
	КонецПопытки;
	
	Если ОтветHTTP.КодСостояния = 200 Тогда
		Значение = ОтветHTTP.ПолучитьТелоКакСтроку();
		Возврат Значение;
	КонецЕсли;
	
	Возврат ИсходноеЗначение;
	
КонецФункции

Процедура ДобавитьЗаголовкиДляТестовогоСервера1С(ЗаголовкиHTTP, СоединениеHTTP) Экспорт
	
	Если СоединениеHTTP = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СоединениеHTTP.Сервер = "ego712.tc7app.com" Тогда
		ИдентификаторИнформационнойБазы = СтандартныеПодсистемыСервер.ИдентификаторИнформационнойБазы();
		ЗаголовкиHTTP.Вставить("BaseID", ИдентификаторИнформационнойБазы);	
	КонецЕсли;
	
КонецПроцедуры

#Область АудиторскоеЗаключение

Функция КлючОбъектаАудиторскогоЗаключения()
	
	Возврат "ДокументооборотСКонтролирующимиОрганами_БухОтчет_УбратьИнформационнуюПанель";
	
КонецФункции

Функция ПриложенФайлАудиторскогоЗаключения(Форма)
	
	ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	ЗаписьРегистраСведений.РегламентированныйОтчет = Форма.СтруктураРеквизитовФормы.мСохраненныйДок;
	ЗаписьРегистраСведений.ВидДополнительногоФайла = "Аудиторское заключение";
	ЗаписьРегистраСведений.Прочитать();
	Возврат НЕ ПустаяСтрока(ЗаписьРегистраСведений.ВидДополнительногоФайла);
	
КонецФункции

Процедура БольшеНеПоказыватьИнформационнуюПанель(Форма) Экспорт
	
	ХранилищеОбщихНастроек.Сохранить(
		КлючОбъектаАудиторскогоЗаключения(),
		,
		Истина);
	
	УстановитьВидимостьПанелиАудиторскогоЗаключения(Форма);
	
КонецПроцедуры

Процедура УправлениеПанельюАудиторскогоЗаключения(Форма, ВидимостьПанели, ВидимостьПодсказки)
	
	Элементы = Форма.Элементы;

	Элементы.ПанельАудиторскогоЗаключения.Видимость = ВидимостьПанели;
	
	Если ВидимостьПодсказки Тогда
		Элементы.ИмяФайлаАудиторскогоЗаключения.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Иначе
		Элементы.ИмяФайлаАудиторскогоЗаключения.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьПанелиАудиторскогоЗаключения(Форма) Экспорт

	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	Если КонтекстЭДОСервер = Неопределено Тогда
		УправлениеПанельюАудиторскогоЗаключения(Форма, Ложь, Ложь);
		Возврат;
	КонецЕсли;
	
	ДолжноБытьЗаключение = РегламентированнаяОтчетность.ОтображаетсяРазделДопФайловБухотчетности(Форма);
	
	ОтчетОтправлен = ОтчетОтправлен(Форма);
	ПанельУбранаПользователем = ПанельАудиторскогоЗаключенияУбрана();
	
	Если ПанельУбранаПользователем ИЛИ НЕ ДолжноБытьЗаключение Тогда
		УправлениеПанельюАудиторскогоЗаключения(Форма, Ложь, Ложь);
	ИначеЕсли ОтчетОтправлен И НЕ ПриложенФайлАудиторскогоЗаключения(Форма) Тогда
		УправлениеПанельюАудиторскогоЗаключения(Форма, Истина, Истина);
	Иначе
		УправлениеПанельюАудиторскогоЗаключения(Форма, Ложь, Истина);
	КонецЕсли;

КонецПроцедуры

Функция ОтчетОтправлен(Форма)
	
	Если Форма.СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	Ссылка = Форма.СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	КонтекстЭДОСервер = ДокументооборотСКО.ПолучитьОбработкуЭДО();
	
	ДополнительныеПараметры = Новый Структура("ПолучатьДаты, ПолучатьОшибкиОтправки", Ложь, Ложь);
	ТекущееСостояние = КонтекстЭДОСервер.ТекущееСостояниеОтправки(
		Ссылка,
		,
		ДополнительныеПараметры);
		
	Если ТекущееСостояние = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийЭтапОтправки = ТекущееСостояние.ТекущийЭтапОтправки;
	
	Если ТекущийЭтапОтправки = Неопределено Тогда
		Возврат  Ложь;
	КонецЕсли;
	
	СостояниеСдачиОтчетности = ТекущийЭтапОтправки.СостояниеСдачиОтчетности;
	
	Отправлен = 
		СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат
		ИЛИ СостояниеСдачиОтчетности = Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
		
	Возврат Отправлен;

КонецФункции

Функция ПанельАудиторскогоЗаключенияУбрана()

	ПанельУбранаПользователем = ХранилищеОбщихНастроек.Загрузить(КлючОбъектаАудиторскогоЗаключения()) = Истина;
	Возврат ПанельУбранаПользователем;
	
КонецФункции

#КонецОбласти

#КонецОбласти