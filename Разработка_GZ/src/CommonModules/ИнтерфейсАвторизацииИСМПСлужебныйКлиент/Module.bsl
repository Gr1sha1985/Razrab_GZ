#Область СлужебныйПрограммныйИнтерфейс

#Область Авторизация

// Выполняет подпись сообщений обмена с ИС МОТП от имени организации.
//
// Параметры:
//  Сообщения               - Массив Из Структура               - Массив сообщений, которые необходимо подписать.
//  ПараметрыЗапроса        - (См. ПараметрыЗапросаКлючаСессии) - Параметры запроса ключа сессии.
//  ОповещениеПриЗавершении - ОписаниеОповещения                - Оповещение, которое будет выполнено после завершения процесса подписи.
//
Процедура Подписать(Сообщения, ПараметрыЗапроса, ОповещениеПриЗавершении) Экспорт
	
	КоличествоСообщений = Сообщения.Количество();
	Если КоличествоСообщений = 1 Тогда
		ЗаголовокДанных = НСтр("ru = 'Сообщение'");
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Сообщения'");
	КонецЕсли;
	
	НаборДанныхДляПодписания = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
		// Для авторизации требуется прикрепленная подпись
		ПараметрыCMS = ЭлектроннаяПодписьКлиент.ПараметрыCMS();
		ПараметрыCMS.Открепленная = Ложь;
		
		Данные = Новый Структура;
		Данные.Вставить("Данные",       Сообщение.ПараметрыАвторизации.Данные);
		Данные.Вставить("Сообщение",    Сообщение);
		Данные.Вставить("ПараметрыCMS", ПараметрыCMS);
		
		ПредставлениеДанных = Новый Структура;
		ПредставлениеДанных.Вставить("Значение",      Новый ОписаниеОповещения("ПодписатьПоказатьТекстСообщенияXML", ЭтотОбъект, Сообщение));
		ПредставлениеДанных.Вставить("Представление", Сообщение.Описание);
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Данные",        Данные);
		СтруктураДанные.Вставить("Представление", ПредставлениеДанных);
		
		НаборДанныхДляПодписания.Добавить(СтруктураДанные);
		
	КонецЦикла;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Обмен с ИС МП'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	
	Сертификаты = ИнтеграцияГИСМВызовСервера.СертификатыПользователяДляПодписиПоОрганизации(ПараметрыЗапроса.Организация);
	Если Сертификаты.Количество() > 0 Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов", Сертификаты);
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'В информационной базе для пользователя %1 не найдено зарегистрированных сертификатов
				            |электронной подписи, связанных с организацией %2.'"),
				ПользователиКлиент.АвторизованныйПользователь(), ПараметрыЗапроса.Организация));
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеДанных.Вставить("БезПодтверждения",    Истина);
	ОписаниеДанных.Вставить("ВыполнятьНаСервере",  Неопределено);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанныхДляПодписания);
	ОписаниеДанных.Вставить("ПредставлениеНабора", СтрШаблон(НСтр("ru = 'Показать (%1)'"), КоличествоСообщений));
	
	ДанныеДляОповещения = Новый Структура;
	ДанныеДляОповещения.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
	ДанныеДляОповещения.Вставить("Сообщения",               Сообщения);
	
	ЭлектроннаяПодписьКлиент.Подписать(
		ОписаниеДанных, ЭтотОбъект,
		Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ДанныеДляОповещения));
	
КонецПроцедуры

// Обработчик оповещения после подписания данных для авторизации в сервисе ИС МОТП
// 
// Параметры:
// 	Результат - Массив Из (См. ИнтерфейсАвторизацииИСМПСлужебныйКлиент.РезультатПодписания).
// 	ДополнительныеПараметры - Структура:
//   * ПараметрыЗапроса        - (См. ПараметрыЗапросаКлючаСессии).
//   * ОповещениеПриЗавершении - ОписаниеОповещения - Описание оповещения при завершении процедуры.
Процедура ПослеПодписания(ПараметрыЗапросовПоОрганизациям, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗапросовПоОрганизациям = Неопределено Тогда
		
		Результат = Новый Соответствие();
		Результат.Вставить(ДополнительныеПараметры.ПараметрыЗапроса.Организация, Неопределено);
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		
	Иначе
		
		Результат = ИнтерфейсАвторизацииИСМПВызовСервера.ЗапроситьКлючиСессий(ПараметрыЗапросовПоОрганизациям);
		
		Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения нажатия на гиперссылку описания подписываемых данных в форме подписания БСП.
Процедура ПодписатьПоказатьТекстСообщенияXML(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ПараметрыАвторизации") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ДополнительныеПараметры.ПараметрыАвторизации.Данные);
		ТекстовыйДокумент.Показать(ДополнительныеПараметры.Описание);
	ИначеЕсли ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекстСообщенияJSON") Тогда
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.ДобавитьСтроку(ДополнительныеПараметры.ТекстСообщенияJSON);
		ТекстовыйДокумент.Показать(ДополнительныеПараметры.Описание);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения подписи.
//
// Параметры:
//  Результат - Структура - содержит свойство "Успех", оно установлено в Истина, если подпись была выполнена.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПодписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат.Успех Тогда
		
		Сообщения = Новый Массив;
		
		Для Каждого ТекущийЭлементНабораДанных Из Результат.НаборДанных Цикл
			
			СвойстваПодписи = ТекущийЭлементНабораДанных.СвойстваПодписи;
			
			Сообщение = ТекущийЭлементНабораДанных.Данные.Сообщение;
			Сообщение.Вставить("СвойстваПодписи", СвойстваПодписи);
			
			Сообщения.Добавить(Сообщение);
			
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Сообщения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с результатом подписания.
// 
// Параметры:
// 	ПараметрыЗапроса     - (См. ИнтерфейсАвторизацииИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии).
// 	Описание             - Строка - Описание.
// 	ПараметрыАвторизации - (См. ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыАвторизации).
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыЗапроса     - (См. ПараметрыЗапросаКлючаСессии).
// * Описание             - Строка - Описание.
// * ПараметрыАвторизации - (См. ИнтерфейсАвторизацииИСМПСлужебный.ПараметрыАвторизации).
// * СвойстваПодписи      - Структура, Неопределено - Свойства подписи.
Функция РезультатПодписания(ПараметрыЗапроса, Описание, ПараметрыАвторизации) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ПараметрыЗапроса",     ПараметрыЗапроса);
	ВозвращаемоеЗначение.Вставить("Описание",             Описание);
	ВозвращаемоеЗначение.Вставить("ПараметрыАвторизации", ПараметрыАвторизации);
	ВозвращаемоеЗначение.Вставить("СвойстваПодписи",      Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти