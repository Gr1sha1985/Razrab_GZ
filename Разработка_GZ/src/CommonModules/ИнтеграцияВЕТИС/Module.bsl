////////////////////////////////////////////////////////////////////////////////
//
// Серверные процедуры и функции библиотеки ВетИС:
//  * Общего назначения
//  * Прочие нераспределенные по отдельным модулям
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеНастройки

// Функция определяет признак использования комиссии при закупках или производства из давальческого сырья.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования комиссии при закупках или производства из давальческого сырья.
//
Функция ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья() Экспорт
	
	ЕстьКомиссияПереработка = Ложь;
	ИнтеграцияВЕТИСПереопределяемый.ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья(ЕстьКомиссияПереработка);
	
	Возврат ЕстьКомиссияПереработка;
	
КонецФункции

// Функция определяет признак использования производства на стороне.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования производства на стороне.
//
Функция ИспользуетсяПереработкаНаСтороне() Экспорт
	
	ЕстьПереработкаНаСтороне = Ложь;
	ИнтеграцияВЕТИСПереопределяемый.ИспользуетсяПереработкаНаСтороне(ЕстьПереработкаНаСтороне);
	Возврат ЕстьПереработкаНаСтороне;
	
КонецФункции

// Проверить использование сопоставления контрагентов
// 
// Возвращаемое значение:
// 	Булево - Используется сопоставление контрагентов
Функция ИспользуетсяСопоставлениеКонтрагентов() Экспорт
	
	КонтрагентЗначениеПоУмолчанию = Неопределено;
	ИнтеграцияВЕТИСПереопределяемый.ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		Неопределено,
		Неопределено,
		Неопределено,
		КонтрагентЗначениеПоУмолчанию,
		Неопределено);
	
	Возврат КонтрагентЗначениеПоУмолчанию <> Неопределено;
	
КонецФункции

// Проверить использование сопоставления торговых объектов контрагентов
// 
// Возвращаемое значение:
// 	Булево - Используется сопоставление торговых объектов контрагентов
Функция ИспользуетсяСопоставлениеТорговыхОбъектовКонтрагентов() Экспорт
	
	ТорговыйОбъектКонтрагентаЗначениеПоУмолчанию = Неопределено;
	ИнтеграцияВЕТИСПереопределяемый.ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(
		Неопределено,
		Неопределено,
		Неопределено,
		Неопределено,
		ТорговыйОбъектКонтрагентаЗначениеПоУмолчанию);
	
	Возврат ТорговыйОбъектКонтрагентаЗначениеПоУмолчанию <> Неопределено;
	
КонецФункции

// Функция определяет признак использования справочника транспортных средств.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Булево - Признак использования справочника транспортных средств.
//
Функция УказываетсяТранспортноеСредство() Экспорт
	
	УказываетсяТранспортноеСредство = Ложь;
	ИнтеграцияВЕТИСПереопределяемый.УказываетсяТранспортноеСредство(УказываетсяТранспортноеСредство);
	Возврат УказываетсяТранспортноеСредство;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Определяет следующие свойства регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхВЕТИС;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыВЕТИС;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиУчетПодконтрольныхТоваровВЕТИС;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Содержит настройки размещения вариантов отчетов в панели отчетов.
// Описание параметров см. в ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРасхожденийПриПоступленииПродукцииВЕТИС);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между входящей транспортной операцией ВетИС и поступлением товаров.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОсновнойКонтекст");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между входящей транспортной операцией ВетИС и поступлением товаров.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	ОписаниеВарианта.Включен = Ложь;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРасхожденийПриИнвентаризацииПродукцииВЕТИС);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между инвентаризацией продукции ВетИС и складскими операциями.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОсновнойКонтекст");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между инвентаризацией продукции ВетИС и складскими операциями.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	ОписаниеВарианта.Включен = Ложь;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРасхожденийПриОтгрузкеПродукцииВЕТИС);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между исходящей транспортной операцией ВетИС и складскими операциями.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОсновнойКонтекст");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между исходящей транспортной операцией ВетИС и складскими операциями.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	ОписаниеВарианта.Включен = Ложь;
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализРасхожденийПриПроизводствеПродукцииВЕТИС);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "Основной");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между производственной операцией ВетИС и складскими операциями.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОсновнойКонтекст");
	ОписаниеВарианта.Описание = НСтр("ru='Выявление и анализ расхождений между производственной операцией ВетИС и складскими операциями.'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru='ВетИС'");
	ОписаниеВарианта.Включен = Ложь;
	
КонецПроцедуры

#КонецОбласти

// Формирует структура доступных права для пользователя
//
// Параметры:
//  ПользовательВЕТИС - СправочникСсылка.Пользователи - Пользователь.
//  ЭтоРегламентноеЗадание - Булево - Истина, если вызов выполняется регламентным заданием.
//
// Возвращаемое значение:
//  Структура - Права пользователя.
//    *`ЭтоВетеринарныйВрач - Булево - Является ли пользователь ветеринарным врачом.
//    * ПраваДоступаПоПользователям - ДеревоЗначений - Набор прав доступа пользователя.
//
Функция ПраваДоступаПоПользователям(Знач ПользовательВЕТИС = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		ПользовательВЕТИС = ПользователиВЕТИС.ТекущийПользовательВЕТИС();
	КонецЕсли;
	
	ЭтоВетеринарныйВрач = Ложь;
	Если ЗначениеЗаполнено(ПользовательВЕТИС) Тогда
		РольПользователя = ИнтеграцияВЕТИСПовтИсп.РольПользователяВЕТИС(ПользовательВЕТИС);
		Если РольПользователя = Перечисления.РолиПользователейВЕТИС.ГосударственныйВетеринарныйВрач Тогда
			ЭтоВетеринарныйВрач = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоРегламентноеЗадание Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект            КАК ХозяйствующийСубъект,
		|	ПраваДоступаПользователейВЕТИС.ПравоДоступа                    КАК ПравоДоступа,
		|	ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС               КАК ПользовательВЕТИС,
		|	ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС.УчетнаяЗапись КАК ЛогинПользователя
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаПользователейВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|		ПО ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект = НастройкиПодключенияВЕТИС.ХозяйствующийСубъект
		|		 И ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС    = НастройкиПодключенияВЕТИС.Администратор
		|ИТОГИ ПО
		|	ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект,
		|	ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС
		|");
		
	ИначеЕсли ЭтоВетеринарныйВрач Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.АвторизованныйЗаявительАргус) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)         КАК ПользовательВЕТИС
		|ПОМЕСТИТЬ ПраваДоступа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.АвторизованныйЗаявительМеркурий) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)            КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.APIЗапись)            КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС) КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.APIЧтение)            КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС) КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.ГашениеВСД)           КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС) КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.ОформлениеВозвратныхВСД) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)    КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.ОформлениеВСДНаСыроеМолоко) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)       КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.ОформлениеПроизводственныхВСД) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)          КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.СертификацияУлововВБР) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)  КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.УполномоченноеГашениеВСД) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)     КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.УполномоченноеОформлениеВозвратныхВСД) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)                  КАК ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.УполномоченноеОформлениеВозвратныхВСД) КАК ПравоДоступа,
		|	ВЫРАЗИТЬ(&ПользовательВЕТИС КАК Справочник.ПользователиВЕТИС)                  КАК ПользовательВЕТИС
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
		|	ПраваДоступа.ПравоДоступа                      КАК ПравоДоступа,
		|	ПраваДоступа.ПользовательВЕТИС                 КАК ПользовательВЕТИС,
		|	ПраваДоступа.ПользовательВЕТИС.УчетнаяЗапись   КАК ЛогинПользователя
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваДоступа КАК ПраваДоступа
		|		ПО ИСТИНА
		|ИТОГИ ПО
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект,
		|	ПраваДоступа.ПользовательВЕТИС
		|");
		
		Запрос.УстановитьПараметр("ПользовательВЕТИС", ПользовательВЕТИС);
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
		|	ПраваДоступаПользователейВЕТИС.ПравоДоступа         КАК ПравоДоступа,
		|	ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС    КАК ПользовательВЕТИС
		|ПОМЕСТИТЬ ПраваДоступа
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаПользователейВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
		|		ПО ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС = ПользователиВЕТИС.Ссылка
		|		И ПользователиВЕТИС.Ссылка = &ПользовательВЕТИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект     КАК ХозяйствующийСубъект,
		|	ЗНАЧЕНИЕ(Перечисление.ПраваДоступаВЕТИС.APIЧтение) КАК ПравоДоступа,
		|	НастройкиПодключенияВЕТИС.Администратор            КАК ПользовательВЕТИС
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
		|		ПО НастройкиПодключенияВЕТИС.Администратор = ПользователиВЕТИС.Ссылка
		|		И ПользователиВЕТИС.Ссылка = &ПользовательВЕТИС
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПраваДоступа.ХозяйствующийСубъект            КАК ХозяйствующийСубъект,
		|	ПраваДоступа.ПравоДоступа                    КАК ПравоДоступа,
		|	ПраваДоступа.ПользовательВЕТИС               КАК ПользовательВЕТИС,
		|	ПраваДоступа.ПользовательВЕТИС.УчетнаяЗапись КАК ЛогинПользователя
		|ИЗ
		|	ПраваДоступа КАК ПраваДоступа
		|ИТОГИ ПО
		|	ПраваДоступа.ХозяйствующийСубъект,
		|	ПраваДоступа.ПользовательВЕТИС
		|");
		
		Запрос.УстановитьПараметр("ПользовательВЕТИС", ПользовательВЕТИС);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПраваДоступаПоПользователям = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ЭтоВетеринарныйВрач",         ЭтоВетеринарныйВрач);
	ВозвращаемоеЗначение.Вставить("ПраваДоступаПоПользователям", ПраваДоступаПоПользователям);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает настройки обмена с ВетИС
//
// Параметры:
//  ХозяйствующиеСубъекты  - Массив, Структура, СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - Организации, предприятия ВетИС для обмена.
//  ЭтоРегламентноеЗадание - Булево - признак регламентного задания (по умолчанию Ложь)
// 
// Возвращаемое значение:
//  Соответствие - Настройки обмена, (См. ИнтеграцияВЕТИСКлиентСервер.НоваяНастройкаПодключенияВЕТИС)
//
Функция НастройкиОбменаВЕТИС(ХозяйствующиеСубъекты = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОбменНаСервере", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("Предприятия",    Новый Соответствие);
	
	// Хозяйствующие субъекты недоступные к подключению.
	ВозвращаемоеЗначение.Вставить("БезНастроек", Новый Массив);
	ВозвращаемоеЗначение.Вставить("Недоступные", Новый Массив);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПользовательВЕТИС   = ПользователиВЕТИС.ПользовательВЕТИС(ТекущийПользователь);
	
	РезультатПолученияПравПользователей = ПраваДоступаПоПользователям(ПользовательВЕТИС, ЭтоРегламентноеЗадание);
	ЭтоВетеринарныйВрач         = РезультатПолученияПравПользователей.ЭтоВетеринарныйВрач;
	ПраваДоступаПоПользователям = РезультатПолученияПравПользователей.ПраваДоступаПоПользователям;
	
	Если ХозяйствующиеСубъекты <> Неопределено
		И Не ЭтоРегламентноеЗадание
		И Не ЭтоВетеринарныйВрач Тогда
		
		ХозяйствующиеСубъектыДляОтбора = ХозяйствующиеСубъектыДляОтбора(ХозяйствующиеСубъекты, ВозвращаемоеЗначение);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2                                                   КАК Приоритет,
		|	ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
		|	ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС    КАК ПользовательВЕТИС
		|ПОМЕСТИТЬ ДоступныеХозяйствующиеСубъекты
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаПользователейВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
		|		ПО ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС = ПользователиВЕТИС.Ссылка
		|		И ПользователиВЕТИС.Пользователь = &ТекущийПользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1                                              КАК Приоритет,
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
		|	ПользователиВЕТИС.Ссылка                       КАК ПользовательВЕТИС
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
		|		ПО НастройкиПодключенияВЕТИС.Администратор = ПользователиВЕТИС.Ссылка
		|		И ПользователиВЕТИС.Пользователь = &ТекущийПользователь
		|;
		|
		|////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозяйствующиеСубъекты.Ссылка        КАК ХозяйствующийСубъект,
		|	ХозяйствующиеСубъекты.Идентификатор КАК Идентификатор,
		|	ВЫБОР КОГДА НастройкиПодключенияВЕТИС.ХозяйствующийСубъект ЕСТЬ NULL ТОГДА
		|		ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ КАК ЕстьНастройкиПодключенияВЕТИС,
		|	ВЫБОР КОГДА ДоступныеХозяйствующиеСубъекты.ХозяйствующийСубъект ЕСТЬ NULL ТОГДА
		|		ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ КАК НастройкаДоступнаДляПользователя,
		|	ДоступныеХозяйствующиеСубъекты.ПользовательВЕТИС КАК ПользовательВЕТИС,
		|	НастройкиПодключенияВЕТИС.Логин                  КАК Логин,
		|	НастройкиПодключенияВЕТИС.Таймаут                КАК Таймаут
		|ИЗ
		|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|		ПО (ХозяйствующиеСубъекты.Ссылка = НастройкиПодключенияВЕТИС.ХозяйствующийСубъект)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеХозяйствующиеСубъекты КАК ДоступныеХозяйствующиеСубъекты
		|		ПО (ХозяйствующиеСубъекты.Ссылка = ДоступныеХозяйствующиеСубъекты.ХозяйствующийСубъект)
		|ГДЕ
		|	ХозяйствующиеСубъекты.Ссылка В(&ХозяйствующиеСубъекты)
		|");
		
		Запрос.УстановитьПараметр("ХозяйствующиеСубъекты", ХозяйствующиеСубъектыДляОтбора);
		Запрос.УстановитьПараметр("ТекущийПользователь",   ТекущийПользователь);
		
	ИначеЕсли Не ЭтоРегламентноеЗадание И Не ЭтоВетеринарныйВрач Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2                                                   КАК Приоритет,
		|	ПраваДоступаПользователейВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
		|	ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС    КАК ПользовательВЕТИС
		|ПОМЕСТИТЬ ДоступныеХозяйствующиеСубъекты
		|ИЗ
		|	РегистрСведений.ПраваДоступаПользователейВЕТИС КАК ПраваДоступаПользователейВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
		|		ПО ПраваДоступаПользователейВЕТИС.ПользовательВЕТИС = ПользователиВЕТИС.Ссылка
		|		И ПользователиВЕТИС.Пользователь = &ТекущийПользователь
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1                                              КАК Приоритет,
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
		|	ПользователиВЕТИС.Ссылка                       КАК ПользовательВЕТИС
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПользователиВЕТИС КАК ПользователиВЕТИС
		|		ПО НастройкиПодключенияВЕТИС.Администратор = ПользователиВЕТИС.Ссылка
		|		И ПользователиВЕТИС.Пользователь = &ТекущийПользователь
		|;
		|
		|////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХозяйствующиеСубъекты.Ссылка        КАК ХозяйствующийСубъект,
		|	ХозяйствующиеСубъекты.Идентификатор КАК Идентификатор,
		|	ВЫБОР КОГДА НастройкиПодключенияВЕТИС.ХозяйствующийСубъект ЕСТЬ NULL ТОГДА
		|		ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ КАК ЕстьНастройкиПодключенияВЕТИС,
		|	ВЫБОР КОГДА ДоступныеХозяйствующиеСубъекты.ХозяйствующийСубъект ЕСТЬ NULL ТОГДА
		|		ЛОЖЬ
		|	ИНАЧЕ
		|		ИСТИНА
		|	КОНЕЦ КАК НастройкаДоступнаДляПользователя,
		|	ДоступныеХозяйствующиеСубъекты.ПользовательВЕТИС КАК ПользовательВЕТИС,
		|	НастройкиПодключенияВЕТИС.Логин                  КАК Логин,
		|	НастройкиПодключенияВЕТИС.Таймаут                КАК Таймаут
		|ИЗ
		|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъекты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|		ПО (ХозяйствующиеСубъекты.Ссылка = НастройкиПодключенияВЕТИС.ХозяйствующийСубъект)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоступныеХозяйствующиеСубъекты КАК ДоступныеХозяйствующиеСубъекты
		|		ПО (ХозяйствующиеСубъекты.Ссылка = ДоступныеХозяйствующиеСубъекты.ХозяйствующийСубъект)
		|");
		
		Запрос.УстановитьПараметр("ТекущийПользователь", ТекущийПользователь);
		
	ИначеЕсли ЭтоВетеринарныйВрач И Не ЭтоРегламентноеЗадание Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект               КАК ХозяйствующийСубъект,
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект.Идентификатор КАК Идентификатор,
		|	ИСТИНА                                                       КАК ЕстьНастройкиПодключенияВЕТИС,
		|	ИСТИНА                                                       КАК НастройкаДоступнаДляПользователя,
		|	&ПользовательВЕТИС                                           КАК ПользовательВЕТИС,
		|	НастройкиПодключенияВЕТИС.Логин                              КАК Логин,
		|	НастройкиПодключенияВЕТИС.Таймаут                            КАК Таймаут
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|ГДЕ
		|	&УсловиеПоХозяйствующимСубъектам
		|");
		
		Если ХозяйствующиеСубъекты <> Неопределено Тогда
			
			ХозяйствующиеСубъектыДляОтбора = ХозяйствующиеСубъектыДляОтбора(ХозяйствующиеСубъекты, ВозвращаемоеЗначение);
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоХозяйствующимСубъектам", "НастройкиПодключенияВЕТИС.ХозяйствующийСубъект В(&ХозяйствующиеСубъекты)");
			Запрос.УстановитьПараметр("ХозяйствующиеСубъекты", ХозяйствующиеСубъектыДляОтбора);
			
		Иначе
			
			Запрос.УстановитьПараметр("УсловиеПоХозяйствующимСубъектам", Истина);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ПользовательВЕТИС", ПользовательВЕТИС);
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект               КАК ХозяйствующийСубъект,
		|	НастройкиПодключенияВЕТИС.ХозяйствующийСубъект.Идентификатор КАК Идентификатор,
		|	ИСТИНА                                                       КАК ЕстьНастройкиПодключенияВЕТИС,
		|	ИСТИНА                                                       КАК НастройкаДоступнаДляПользователя,
		|	НастройкиПодключенияВЕТИС.Администратор                      КАК ПользовательВЕТИС,
		|	НастройкиПодключенияВЕТИС.Логин                              КАК Логин,
		|	НастройкиПодключенияВЕТИС.Таймаут                            КАК Таймаут
		|ИЗ
		|	РегистрСведений.НастройкиПодключенияВЕТИС КАК НастройкиПодключенияВЕТИС
		|");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьПривилегированныйРежим(Истина);
		БезопасныеСтроки = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Выборка.ХозяйствующийСубъект, "Пароль,КлючAPI");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.ЕстьНастройкиПодключенияВЕТИС
			И Выборка.НастройкаДоступнаДляПользователя 
			И ЗначениеЗаполнено(БезопасныеСтроки.Пароль) 
			И ЗначениеЗаполнено(БезопасныеСтроки.КлючAPI) Тогда
			
			НастройкаПодключенияВЕТИС = ИнтеграцияВЕТИСКлиентСервер.НоваяНастройкаПодключенияВЕТИС();
			НастройкаПодключенияВЕТИС.Логин         = Выборка.Логин;
			НастройкаПодключенияВЕТИС.Идентификатор = Выборка.Идентификатор;
			НастройкаПодключенияВЕТИС.Таймаут       = Выборка.Таймаут;
			НастройкаПодключенияВЕТИС.ФорматОбмена  = Перечисления.ФорматыОбменаВЕТИС.V2_1;
			
			НастройкаПодключенияВЕТИС.Пароль  = БезопасныеСтроки.Пароль;
			НастройкаПодключенияВЕТИС.КлючAPI = БезопасныеСтроки.КлючAPI;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ХозяйствующийСубъект", Выборка.ХозяйствующийСубъект);
			ПараметрыОтбора.Вставить("ПользовательВЕТИС",    Выборка.ПользовательВЕТИС);
			ПараметрыОтбора.Вставить("ПравоДоступа",         NULL);
			НайденныеСтрокиХозяйствующиеСубъектыПользователи = ПраваДоступаПоПользователям.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Для Каждого СтрокаДерева Из НайденныеСтрокиХозяйствующиеСубъектыПользователи Цикл
				НастройкаПодключенияВЕТИС.ЛогинПользователя = СтрокаДерева.ЛогинПользователя;
				Для Каждого СтрокаДереваПравоДоступа Из СтрокаДерева.Строки Цикл
					НастройкаПодключенияВЕТИС.ПраваДоступа.Добавить(СтрокаДереваПравоДоступа.ПравоДоступа);
				КонецЦикла;
			КонецЦикла;
			
			ВозвращаемоеЗначение.ОбменНаСервере.Вставить(Выборка.ХозяйствующийСубъект, НастройкаПодключенияВЕТИС);
			
		Иначе
			
			Если ХозяйствующиеСубъекты <> Неопределено Тогда
				Если Не Выборка.ЕстьНастройкиПодключенияВЕТИС Тогда
					ВозвращаемоеЗначение.БезНастроек.Добавить(Выборка.ХозяйствующийСубъект);
				ИначеЕсли Не Выборка.НастройкаДоступнаДляПользователя Тогда
					ВозвращаемоеЗначение.Недоступные.Добавить(Выборка.ХозяйствующийСубъект);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ХозяйствующиеСубъекты <> Неопределено
		И ХозяйствующиеСубъектыДляОтбора <> Неопределено Тогда
		
		Если ТипЗнч(ХозяйствующиеСубъектыДляОтбора) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
			ОрганизацииДляПроверки = Новый Массив;
			ОрганизацииДляПроверки.Добавить(ХозяйствующиеСубъектыДляОтбора);
		Иначе
			ОрганизацииДляПроверки = ХозяйствующиеСубъектыДляОтбора;
		КонецЕсли;
		
		Для Каждого ХозяйствующийСубъект Из ОрганизацииДляПроверки Цикл
			Если ВозвращаемоеЗначение.ОбменНаСервере.Получить(ХозяйствующийСубъект) = Неопределено
				И ВозвращаемоеЗначение.БезНастроек.Найти(ХозяйствующийСубъект) = Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(ХозяйствующийСубъект);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру параметров оптимизации по умолчанию.
//
// Возвращаемое значение:
//  Структура - Параметры по умолчанию.
//
Функция ПараметрыОптимизацииПоУмолчанию() Экспорт
	
	ПараметрыОптимизации = Новый Структура;
	ПараметрыОптимизации.Вставить("ВремяОжиданияОбработкиЗаявки",                 1800);
	ПараметрыОптимизации.Вставить("ИнтервалМеждуЗапросамиСписков",                10);
	ПараметрыОптимизации.Вставить("КоличествоПовторныхЗапросов",                  15);
	ПараметрыОптимизации.Вставить("КоличествоПопытокВосстановленияДокументов",    3);
	ПараметрыОптимизации.Вставить("КоличествоЭлементов",                          500);
	ПараметрыОптимизации.Вставить("ОтправлятьЗависшиеЗапросыПовторно",            Истина);
	ПараметрыОптимизации.Вставить("ИнтервалЗапросаИзмененныхДанных",              86400);
	ПараметрыОптимизации.Вставить("ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала",     Ложь);
	ПараметрыОптимизации.Вставить("ВыполнятьСинхронизацииТолькоВРегламентномЗадании", Ложь);
	ПараметрыОптимизации.Вставить("ЗагружатьДокументыСозданныеЧерезWeb",              Истина);
	
	Возврат ПараметрыОптимизации;
	
КонецФункции

// Возвращает структуру параметров оптимизации.
// В случае, если константы "Настройки обмена ВЕТИС" и "Интервал запроса измененных данных ВЕТИС" не заполнены
// - возвращает параметры по умолчанию. См. функцию ПараметрыОптимизацииПоУмолчанию. 
//
// Возвращаемое значение:
//  Структура - Параметры оптимизации.
//
Функция ПараметрыОптимизации() Экспорт
	
	НастройкиОбменаВЕТИС            = Константы.НастройкиОбменаВЕТИС.Получить().Получить();
	ИнтервалЗапросаИзмененныхДанных = Константы.ИнтервалЗапросаИзмененныхДанныхВЕТИС.Получить();
	
	ПараметрыОптимизации = ПараметрыОптимизацииПоУмолчанию();
	
	Если НастройкиОбменаВЕТИС <> Неопределено Тогда
		Если НастройкиОбменаВЕТИС.Свойство("ВремяОжиданияОбработкиЗаявки") Тогда
			ПараметрыОптимизации.ВремяОжиданияОбработкиЗаявки = НастройкиОбменаВЕТИС.ВремяОжиданияОбработкиЗаявки;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("ИнтервалМеждуЗапросамиСписков") Тогда
			ПараметрыОптимизации.ИнтервалМеждуЗапросамиСписков = НастройкиОбменаВЕТИС.ИнтервалМеждуЗапросамиСписков;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("КоличествоПовторныхЗапросов") Тогда
			ПараметрыОптимизации.КоличествоПовторныхЗапросов = НастройкиОбменаВЕТИС.КоличествоПовторныхЗапросов;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("КоличествоПопытокВосстановленияДокументов") Тогда
			ПараметрыОптимизации.КоличествоПопытокВосстановленияДокументов = НастройкиОбменаВЕТИС.КоличествоПопытокВосстановленияДокументов;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("КоличествоЭлементов") Тогда
			ПараметрыОптимизации.КоличествоЭлементов = НастройкиОбменаВЕТИС.КоличествоЭлементов;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("ОтправлятьЗависшиеЗапросыПовторно") Тогда
			ПараметрыОптимизации.ОтправлятьЗависшиеЗапросыПовторно = НастройкиОбменаВЕТИС.ОтправлятьЗависшиеЗапросыПовторно;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала") Тогда
			ПараметрыОптимизации.ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала = НастройкиОбменаВЕТИС.ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("ВыполнятьСинхронизацииТолькоВРегламентномЗадании") Тогда
			ПараметрыОптимизации.ВыполнятьСинхронизацииТолькоВРегламентномЗадании = НастройкиОбменаВЕТИС.ВыполнятьСинхронизацииТолькоВРегламентномЗадании;
		КонецЕсли;
		Если НастройкиОбменаВЕТИС.Свойство("ЗагружатьДокументыСозданныеЧерезWeb") Тогда
			ПараметрыОптимизации.ЗагружатьДокументыСозданныеЧерезWeb = НастройкиОбменаВЕТИС.ЗагружатьДокументыСозданныеЧерезWeb;
		КонецЕсли;
	КонецЕсли;
	
	Если ИнтервалЗапросаИзмененныхДанных < 0 Тогда
		ПараметрыОптимизации.ИнтервалЗапросаИзмененныхДанных = 0;
	ИначеЕсли ИнтервалЗапросаИзмененныхДанных > 0 Тогда
		ПараметрыОптимизации.ИнтервалЗапросаИзмененныхДанных = ИнтервалЗапросаИзмененныхДанных;
	КонецЕсли;
	
	Возврат ПараметрыОптимизации;
	
КонецФункции

//Возвращает структуру параметров обмена.
//
//Параметры:
//   ХозяйствующиеСубъекты - Массив Из СправочникСсылка.ХозяйствующиеСубъектыВЕТИС, Неопределено - хозяйствующие субъекты,
//     настройки обмена по которым запрашиваются, либо получение всех активных настроек.
//   УникальныйИдентификатор - Неопределено, УникальныйИдентификатор - уникальный идентификатор.
//   ЭтоРегламентноеЗадание  - Булево - Истина, если вызов выполняется регламентным заданием.
//
// Возвращаемое значение:
//   Структура - параметры обмена с ВетИС, включая но не ограничивая:
//   * НастройкиОбмена - Соответствие - настройки обмена с ВетИС на сервере.
//   * ХозяйствующиеСубъекты - Массив Из СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - хозяйствующие субъекты с обменом.
//   * ХозяйствующиеСубъектыБезНастроек - Массив Из СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - без настроек.
//   * ХозяйствующиеСубъектыНедоступные - Массив Из СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - недоступные.
//   * Предприятия - Массив Из СправочникСсылка.ПредприятияВЕТИС - площадки (предприятия) ВетИС.
//   * ОжидатьНаСервере - Булево - необходимость ожидания выполнения на сервере.
//   * ОжидатьНаКлиенте - Булево - необходимость ожидания выполнения на клиенте.
//   * ФоновоеЗадание   - Неопределено - фоновое задание.
//   * УникальныйИдентификатор - УникальныйИдентификатор, Неопределено - входящий параметр без изменений.
//   * ЭтоРегламентноеЗадание - Булево - входящий параметр без изменений.
//   * ДокументыКЗагрузке - Структура - документы к загрузке из сервиса:
//    ** ВходящаяТранспортнаяОперацияВЕТИС        - Соответствие - одноименные документы.
//    ** ИнвентаризацияПродукцииВЕТИС             - Соответствие - одноименные документы.
//    ** ИсходящаяТранспортнаяОперацияВЕТИС       - Соответствие - одноименные документы.
//    ** ОбъединениеЗаписейСкладскогоЖурналаВЕТИС - Соответствие - одноименные документы.
//    ** ПроизводственнаяОперацияВЕТИС            - Соответствие - одноименные документы.
//   * ДокументыДляВосстановления - Структура - документы к загрузке и восстановлению из сервиса.
//
Функция ПараметрыОбмена(ХозяйствующиеСубъекты = Неопределено, УникальныйИдентификатор = Неопределено, ЭтоРегламентноеЗадание = Ложь) Экспорт
	
	// Получение настроек обмена ВЕТИС для выполнения обмена на сервере
	НастройкиОбменаВЕТИС           = НастройкиОбменаВЕТИС(ХозяйствующиеСубъекты, ЭтоРегламентноеЗадание);
	ДоступныеХозяйствующиеСубъекты = ИнтеграцияВЕТИСКлиентСервер.ХозяйствующиеСубъекты(НастройкиОбменаВЕТИС.ОбменНаСервере);
	
	ОписаниеТиповХозяйствующийСубъект = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
	ОписаниеТиповПредприятие          = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
	
	ВремяВыполнения = Новый ТаблицаЗначений;
	ВремяВыполнения.Колонки.Добавить("КоличествоСекунд",    Новый ОписаниеТипов("Число"));
	ВремяВыполнения.Колонки.Добавить("КоличествоИтераций",  Новый ОписаниеТипов("Число"));
	ВремяВыполнения.Колонки.Добавить("КоличествоЭлементов", Новый ОписаниеТипов("Число"));
	ВремяВыполнения.Колонки.Добавить("Операция",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийВЕТИС"));
	
	ПараметрыОптимизации = ПараметрыОптимизации();
	
	ПараметрыОбмена = Новый Структура;
	ПараметрыОбмена.Вставить("НастройкиОбмена",                  НастройкиОбменаВЕТИС.ОбменНаСервере);
	ПараметрыОбмена.Вставить("ХозяйствующиеСубъекты",            ДоступныеХозяйствующиеСубъекты);
	ПараметрыОбмена.Вставить("ХозяйствующиеСубъектыБезНастроек", НастройкиОбменаВЕТИС.БезНастроек);
	ПараметрыОбмена.Вставить("ХозяйствующиеСубъектыНедоступные", НастройкиОбменаВЕТИС.Недоступные);
	ПараметрыОбмена.Вставить("Предприятия",                      НастройкиОбменаВЕТИС.Предприятия);
	
	Если ЭтоРегламентноеЗадание Тогда
		ВыполнятьСинхронизации = Истина;
	Иначе
		ВыполнятьСинхронизации = Не ПараметрыОптимизации.ВыполнятьСинхронизацииТолькоВРегламентномЗадании;
	КонецЕсли;
	
	ПараметрыОбмена.Вставить("ЭтоРегламентноеЗадание", ЭтоРегламентноеЗадание);
	ПараметрыОбмена.Вставить("ОжидатьНаСервере",       Истина);
	ПараметрыОбмена.Вставить("ОжидатьНаКлиенте",       Ложь);
	ПараметрыОбмена.Вставить("ФоновоеЗадание",         Неопределено);
	
	ПараметрыОбмена.Вставить("ДатаПоследнегоЗапросаСписка",                  '00010101');
	ПараметрыОбмена.Вставить("ВремяОжиданияОбработкиЗаявки",                 ПараметрыОптимизации.ВремяОжиданияОбработкиЗаявки);
	ПараметрыОбмена.Вставить("ИнтервалМеждуЗапросамиСписков",                ПараметрыОптимизации.ИнтервалМеждуЗапросамиСписков);
	ПараметрыОбмена.Вставить("КоличествоПовторныхЗапросов",                  ПараметрыОптимизации.КоличествоПовторныхЗапросов);
	ПараметрыОбмена.Вставить("КоличествоПопытокВосстановленияДокументов",    ПараметрыОптимизации.КоличествоПопытокВосстановленияДокументов);
	ПараметрыОбмена.Вставить("РазмерПорции",                                 ПараметрыОптимизации.КоличествоЭлементов);
	ПараметрыОбмена.Вставить("ОтправлятьЗависшиеЗапросыПовторно",            ПараметрыОптимизации.ОтправлятьЗависшиеЗапросыПовторно);
	ПараметрыОбмена.Вставить("ИнтервалЗапросаИзмененныхДанных",              ПараметрыОптимизации.ИнтервалЗапросаИзмененныхДанных);
	ПараметрыОбмена.Вставить("ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала", ПараметрыОптимизации.ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала);
	ПараметрыОбмена.Вставить("ЗагружатьДокументыСозданныеЧерезWeb",          ПараметрыОптимизации.ЗагружатьДокументыСозданныеЧерезWeb);
	ПараметрыОбмена.Вставить("ВыполнятьСинхронизации",                       ВыполнятьСинхронизации);
	ПараметрыОбмена.Вставить("ОтклонениеВремениМеждуСерверами",              0);
	
	ПараметрыОбмена.Вставить("Изменения",       Новый Массив);
	ПараметрыОбмена.Вставить("ВремяВыполнения", ВремяВыполнения);
	ПараметрыОбмена.Вставить("НомерИтерации",   1);
	
	ПараметрыОбмена.Вставить("ОбработанныеЭлементыОчереди", Новый Массив);
	ПараметрыОбмена.Вставить("ОчередьСообщений",            НоваяТаблицаОчередьСообщений());
	ПараметрыОбмена.Вставить("ЗависимостиСообщений",        НоваяТаблицаЗависимостиСообщений());
	ПараметрыОбмена.Вставить("ПараметрыПреобразования",     Неопределено);
	
	ПараметрыОбмена.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	Если УникальныйИдентификатор <> Неопределено Тогда
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	Иначе
		ПараметрыОбмена.Вставить("АдресВоВременномХранилище", Неопределено);
	КонецЕсли;
	
	// Документы к загрузке: Дата -> ДокументОбъект
	ДокументыКЗагрузке = Новый Структура;
	ДокументыКЗагрузке.Вставить("ВходящаяТранспортнаяОперацияВЕТИС",        Новый Соответствие);
	ДокументыКЗагрузке.Вставить("ИнвентаризацияПродукцииВЕТИС",             Новый Соответствие);
	ДокументыКЗагрузке.Вставить("ИсходящаяТранспортнаяОперацияВЕТИС",       Новый Соответствие);
	ДокументыКЗагрузке.Вставить("ОбъединениеЗаписейСкладскогоЖурналаВЕТИС", Новый Соответствие);
	ДокументыКЗагрузке.Вставить("ПроизводственнаяОперацияВЕТИС",            Новый Соответствие);
	ПараметрыОбмена.Вставить("ДокументыКЗагрузке", ДокументыКЗагрузке);
	
	//Документы для восстановления после ошибки сервиса.
	ДокументыДляВосстановления = Новый Структура;
	Для Каждого СтрокаДокумент Из ДокументыКЗагрузке Цикл
		ДокументыДляВосстановления.Вставить(СтрокаДокумент.Ключ, ДокументыДляВосстановления(СтрокаДокумент.Ключ));
	КонецЦикла;
	ПараметрыОбмена.Вставить("ДокументыДляВосстановления", ДокументыДляВосстановления);
	
	// Данные документов к загрузке: Дата -> Массив записей журнала
	ТаблицаЭлементовПоДатам = Новый ТаблицаЗначений;
	ТаблицаЭлементовПоДатам.Колонки.Добавить("Дата");
	ТаблицаЭлементовПоДатам.Колонки.Добавить("ТаблицаЭлементов");
	ПараметрыОбмена.Вставить("ТаблицаЭлементовПоДатам", ТаблицаЭлементовПоДатам);
	
	ПараметрыОбмена.Вставить("ЗагружатьПоСсылкамИзСервиса", Истина);
	ПараметрыОбмена.Вставить("КОтложеннойЗагрузке", Новый Структура);
	
	ТаблицаСтопЛист = Новый ТаблицаЗначений;
	ТаблицаСтопЛист.Колонки.Добавить("ХозяйствующийСубъект", ОписаниеТиповХозяйствующийСубъект);
	ТаблицаСтопЛист.Колонки.Добавить("Предприятие", ОписаниеТиповПредприятие);
	ПараметрыОбмена.Вставить("СтопЛист", ТаблицаСтопЛист);
	
	Возврат ПараметрыОбмена;
	
КонецФункции

Процедура ДобавитьНастройкуОбменаВПараметрыОбмена(ПараметрыОбмена, ХозяйствующийСубъект, НастройкаОбмена) Экспорт
	
	ПараметрыОбмена.НастройкиОбмена.Вставить(ХозяйствующийСубъект, НастройкаОбмена);
	
	ИндексСНастройками = ПараметрыОбмена.ХозяйствующиеСубъекты.Найти(ХозяйствующийСубъект);
	Если ИндексСНастройками = Неопределено Тогда
		ПараметрыОбмена.ХозяйствующиеСубъекты.Добавить(ХозяйствующийСубъект);
	КонецЕсли;
	
	ИндексБезНастроек = ПараметрыОбмена.ХозяйствующиеСубъектыБезНастроек.Найти(ХозяйствующийСубъект);
	Если ИндексБезНастроек <> Неопределено Тогда
		ПараметрыОбмена.ХозяйствующиеСубъектыБезНастроек.Удалить(ИндексБезНастроек);
	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML) Экспорт
	
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция СообщениеНеНайденыНастройкиПодключения(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, НастройкиОбменаВЕТИС = Неопределено) Экспорт
	
	Если НастройкиОбменаВЕТИС <> Неопределено
		И НастройкиОбменаВЕТИС.Недоступные.Найти(ХозяйствующийСубъект) <> Неопределено Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(
			НСтр("ru = 'Пользователь %1 не включен в список пользователей хозяйствующего субъекта %2.'"),
			Пользователи.ТекущийПользователь(),
			ХозяйствующийСубъект));
	Иначе
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(
			НСтр("ru='Для хозяйствующего субъекта %1 не найдены настройки подключения к ВетИС.'"), ХозяйствующийСубъект));
	КонецЕсли;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, ОперацияВЕТИС) Экспорт
	
	ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(
		НСтр("ru = 'Операция ""%1"" недоступна для текущего пользователя. Обратитесь к администратору.'"), ОперацияВЕТИС));
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция СообщениеНеНайденыНастройкиПодключенияПараметрыОбмена(СообщенияXML, СообщениеXML, ХозяйствующийСубъект, ПараметрыОбмена = Неопределено) Экспорт
	
	Если ПараметрыОбмена <> Неопределено
		И ПараметрыОбмена.ХозяйствующиеСубъектыНедоступные.Найти(ХозяйствующийСубъект) <> Неопределено Тогда
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(
			НСтр("ru = 'Пользователь %1 не включен в список пользователей хозяйствующего субъекта %2.'"),
			Пользователи.ТекущийПользователь(),
			ХозяйствующийСубъект));
	Иначе
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			НСтр("ru='Не найдена настройка для подключения к ВетИС.'"));
	КонецЕсли;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЭтоЗапросСписка(Операция) Экспорт
	
	Возврат Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВсехВСД
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД;
	
КонецФункции

Функция ИнтервалМеждуЗапросамиСписковВыдержан(ПараметрыОбмена, Операция) Экспорт
	
	Если ЭтоЗапросСписка(Операция) Тогда
		
		ВремяОжиданияСледующегоЗапроса = ВремяОжиданияСледующегоЗапроса(ПараметрыОбмена);
		
		Если ПараметрыОбмена.ОжидатьНаСервере Тогда
			ИнтеграцияИС.Ожидать(ВремяОжиданияСледующегоЗапроса, ПараметрыОбмена);
		КонецЕсли;
		
		Возврат ВремяОжиданияСледующегоЗапроса = 0;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ВремяОжиданияСледующегоЗапроса(ПараметрыОбмена) Экспорт
	
	РазрешеннаяДатаСледующегоЗапроса = ПараметрыОбмена.ДатаПоследнегоЗапросаСписка + ПараметрыОбмена.ИнтервалМеждуЗапросамиСписков;
	ВремяОжиданияСледующегоЗапроса = РазрешеннаяДатаСледующегоЗапроса - ТекущаяДатаСеанса();
	Если ВремяОжиданияСледующегоЗапроса < 0 Тогда
		ВремяОжиданияСледующегоЗапроса = 0;
	КонецЕсли;
	
	Возврат ВремяОжиданияСледующегоЗапроса;
	
КонецФункции

Функция ПараметрыПреобразования() Экспорт
	
	ПараметрыПреобразования = Новый Структура;
	ПараметрыПреобразования.Вставить("НайтиИдентификаторы", Истина);
	ПараметрыПреобразования.Вставить("ТипыИдентификаторов", Новый Соответствие);
	ПараметрыПреобразования.Вставить("Идентификаторы",      Новый Структура);
	ПараметрыПреобразования.Вставить("НайденныеСсылки",     Новый Структура);
	ПараметрыПреобразования.Вставить("БлокируемыеОбъекты",  Новый Структура);
	ПараметрыПреобразования.Вставить("ТипUUID",             ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.BaseВЕТИС.ПространствоИмен, "UUID"));
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ВетеринарноСопроводительныйДокументВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "uuid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.VetDocumentВЕТИС.ПространствоИмен, "VetDocument"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ЗаписиСкладскогоЖурналаВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.VetDocumentВЕТИС.ПространствоИмен, "StockEntry"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ХозяйствующиеСубъектыВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "BusinessEntity"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ЕдиницыИзмеренияВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "Unit"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.УпаковкиВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "globalID");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.УпаковкиВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "PackingType"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ЦелиВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ЦелиВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "Purpose"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ПродукцияВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ПродукцияВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "Product"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ПродукцияВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ПродукцияВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "ProductItem"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ПродукцияВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ПродукцияВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "SubProduct"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ПредприятияВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ПредприятияВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "Enterprise"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.ЗаболеванияВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.ЗаболеванияВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "AnimalDisease"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	//
	РеквизитыТипа = Новый Структура;
	РеквизитыТипа.Вставить("ИмяТаблицы",     Метаданные.Справочники.УсловияРегионализацииВЕТИС.Имя);
	РеквизитыТипа.Вставить("ИмяПоля",        "guid");
	РеквизитыТипа.Вставить("ПустоеЗначение", Справочники.УсловияРегионализацииВЕТИС.ПустаяСсылка());
	
	ПараметрыПреобразования.ТипыИдентификаторов.Вставить(ФабрикаXDTO.Тип(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен, "RegionalizationCondition"), РеквизитыТипа);
	ПараметрыПреобразования.Идентификаторы.Вставить(РеквизитыТипа.ИмяТаблицы, Новый Соответствие);
	
	Возврат ПараметрыПреобразования;
	
КонецФункции

Функция РеквизитыИсходящегоСообщения()
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусОбработки", Перечисления.СтатусыОбработкиСообщенийВЕТИС.КПередаче);
	Результат.Вставить("ТипСообщения");
	Результат.Вставить("Операция");
	Результат.Вставить("Документ");
	Результат.Вставить("СообщениеОснование");
	Результат.Вставить("Описание");
	Результат.Вставить("ИдентификаторЗапроса");
	Результат.Вставить("ФорматОбмена");
	Результат.Вставить("ХозяйствующийСубъект");
	Результат.Вставить("Предприятие");
	Результат.Вставить("Версия");
	Результат.Вставить("ИдентификаторТранзакции");
	Результат.Вставить("ТекстСообщенияXML");
	Возврат Результат;
	
КонецФункции

// Подготавливает сообщения к передаче в ВЕТИС.
//
// Параметры:
//  Сообщения       - Массив - содержит структуру сообщений, которые подготавливаются к передаче
//    (см. ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML).
//  Немедленно      - Булево - Признак немедленной передачи сообщения, без очереди сообщений.
//  ПараметрыОбмена - Структура, Неопределено - см. функцию ПараметрыОбмена().
//  ЗагружатьПосле  - СправочникСсылка.ВЕТИСПрисоединенныеФайлы, Неопределено
//
// Возвращаемое значение:
//  СправочникСсылка.ВЕТИСПрисоединенныеФайлы - Последнее подготовленное сообщение.
//
Функция ПодготовитьСообщенияКПередаче(Сообщения, Немедленно, ПараметрыОбмена, ЗагружатьПосле = Неопределено) Экспорт
	
	ТребуетсяРасчетОчереди  = Ложь;
	ЗаписиСкладскогоЖурнала = Новый Соответствие;
	СообщенияКПередаче      = НоваяТаблицаОчередьСообщений();
	ЕстьЗапросыСписков      = Ложь;
	ПоДокументу             = Ложь;
	ИсходящееСообщение      = Неопределено;
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		РеквизитыИсходящегоСообщения = Неопределено;
		РеквизитыОчереди             = Неопределено;
		
		ЭтоЗапросСписка = ЭтоЗапросСписка(Сообщение.Операция);
		Если ЭтоЗапросСписка Тогда
			ЕстьЗапросыСписков = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(Сообщение.Документ) Тогда
			ПоДокументу = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			РеквизитыИсходящегоСообщения = РеквизитыИсходящегоСообщения();
			ЗаполнитьЗначенияСвойств(РеквизитыИсходящегоСообщения, Сообщение);
			
			РеквизитыОчереди = Новый Структура;
			РеквизитыОчереди.Вставить("Операция",                     Сообщение.Операция);
			РеквизитыОчереди.Вставить("Документ",                     Сообщение.Документ);
			РеквизитыОчереди.Вставить("ХозяйствующийСубъект",         Сообщение.ХозяйствующийСубъект);
			РеквизитыОчереди.Вставить("Предприятие",                  Сообщение.Предприятие);
			РеквизитыОчереди.Вставить("ПараметрыЗапроса",             Сообщение.ПараметрыЗапроса);
			РеквизитыОчереди.Вставить("ЗаписиСкладскогоЖурнала",      Сообщение.ЗаписиСкладскогоЖурнала);
			РеквизитыОчереди.Вставить("ЗагружатьПосле",               ЗагружатьПосле);
			РеквизитыОчереди.Вставить("ДокументОснование",            Сообщение.ДокументОснование);
			РеквизитыОчереди.Вставить("РеквизитыИсходящегоСообщения", РеквизитыИсходящегоСообщения);
			
			Попытка
				
				Результат = ПодготовитьСообщениеКПередаче(
					Сообщение.ТекстСообщенияXML,
					РеквизитыИсходящегоСообщения, 
					РеквизитыОчереди);
				
				ТекстОшибки            = Результат.ТекстОшибки;
				ПодготовленоКПередаче  = Не ЗначениеЗаполнено(ТекстОшибки);
				ИсходящееСообщение     = Результат.ИсходящееСообщение;
				
				Если Результат.ТребуетсяРасчетОчереди Тогда
					
					ТребуетсяРасчетОчереди = Истина;
					
					Для Каждого КлючИЗначение Из Сообщение.ЗаписиСкладскогоЖурнала Цикл
						ЗаписиСкладскогоЖурнала.Вставить(КлючИЗначение.Ключ, Истина);
					КонецЦикла;
					
				КонецЕсли;
				
			Исключение
				
				ТекстОшибки            = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче  = Ложь;
				ИсходящееСообщение     = Неопределено;
				
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ВетИС:
				           |%2'"),
				Сообщение.Описание,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче  = Ложь;
			ИсходящееСообщение     = Неопределено;
			ТребуетсяРасчетОчереди = Ложь;
			
		КонецЕсли;
		
		Если ПодготовленоКПередаче Тогда
			
			ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
			
			ЭлементОчереди.ДатаСоздания = ТекущаяДатаСеанса();
			ЭлементОчереди.Сообщение    = ИсходящееСообщение;
			
			ЭлементОчереди.ХозяйствующийСубъект         = Сообщение.ХозяйствующийСубъект;
			ЭлементОчереди.Предприятие                  = Сообщение.Предприятие;
			ЭлементОчереди.Операция                     = Сообщение.Операция;
			ЭлементОчереди.ФорматОбмена                 = Сообщение.ФорматОбмена;
			ЭлементОчереди.ПараметрыЗапроса             = Новый ХранилищеЗначения(Сообщение.ПараметрыЗапроса);
			ЭлементОчереди.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(РеквизитыИсходящегоСообщения);
			
			ЭлементОчереди.Документ          = Сообщение.Документ;
			ЭлементОчереди.ДокументОснование = Сообщение.ДокументОснование;
			
			Если ЗначениеЗаполнено(ЗагружатьПосле) Тогда
				НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				НоваяЗависимость.Сообщение1     = ИсходящееСообщение;
				НоваяЗависимость.Сообщение2     = ЗагружатьПосле;
				НоваяЗависимость.Загрузка       = Ложь;
				НоваяЗависимость.Передача       = Ложь;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СообщенияКПередаче.Добавить(), ЭлементОчереди);
			
		Иначе
			
			СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ХозяйствующийСубъект = Сообщение.ХозяйствующийСубъект;
			СтрокаРезультата.Предприятие          = Сообщение.Предприятие;
			СтрокаРезультата.Операция             = Сообщение.Операция;
			СтрокаРезультата.ФорматОбмена         = Сообщение.ФорматОбмена;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Ложь;
			СтрокаРезультата.Передано              = Ложь;
			СтрокаРезультата.Принято               = Ложь;
			
			СтрокаРезультата.ИсходящееСообщение = Неопределено;
			СтрокаРезультата.ВходящееСообщение  = Неопределено;
			
			СтрокаРезультата.Объект            = Сообщение.Документ;
			СтрокаРезультата.ДокументОснование = Сообщение.ДокументОснование;
			СтрокаРезультата.НовыйСтатус       = Неопределено;
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Немедленно
		И (Не ЕстьЗапросыСписков Или ПоДокументу) Тогда
		
		Если ТребуетсяРасчетОчереди Тогда
			ПостроитьОчередьСообщений(ПараметрыОбмена, ЗаписиСкладскогоЖурнала, СообщенияКПередаче);
		КонецЕсли;
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			
			Если ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов <= 0 Тогда
				ЕстьПопыткиВосстановления = Истина;
			Иначе
				ЕстьПопыткиВосстановления = (ЭлементОчереди.КоличествоПопытокВосстановления < ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭлементОчереди.ИдентификаторЗаявки) Тогда
				
				Если Не ИнтервалМеждуЗапросамиСписковВыдержан(ПараметрыОбмена, ЭлементОчереди.Операция) Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеЗависимости = Неопределено;
				Если СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости)
					И Не ЭлементОчереди.ЕстьОшибкиСервиса
					И (ЕстьПопыткиВосстановления Или ЭлементОчереди.ПроверенаКорректностьОформления) Тогда
					
					ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена);
					
				ИначеЕсли НайденныеЗависимости <> Неопределено Тогда
					
					// Если зависимых сообщений нет в очереди - сообщение удаляется из очереди (Защита от зацикливания).
					Для Каждого НайденныеЗависимостиЭлементДанных Из НайденныеЗависимости Цикл
						Если ПараметрыОбмена.ОчередьСообщений.Найти(НайденныеЗависимостиЭлементДанных.Сообщение2, "Сообщение") = Неопределено Тогда
							ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
						КонецЕсли;
					КонецЦикла;
					
					ДобавитьОтложенныйЭлементОчередиВИзменения(ЭлементОчереди, ПараметрыОбмена);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ИсходящееСообщение;
	
КонецФункции

Функция НоваяТаблицаОчередьСообщений() Экспорт
	
	ОчередьСообщений = Новый ТаблицаЗначений;
	ОчередьСообщений.Колонки.Добавить("ДатаСоздания");
	ОчередьСообщений.Колонки.Добавить("Сообщение");
	
	ОчередьСообщений.Колонки.Добавить("ХозяйствующийСубъект");
	ОчередьСообщений.Колонки.Добавить("Предприятие");
	ОчередьСообщений.Колонки.Добавить("Операция");
	ОчередьСообщений.Колонки.Добавить("ФорматОбмена");
	ОчередьСообщений.Колонки.Добавить("ПараметрыЗапроса");
	
	ОчередьСообщений.Колонки.Добавить("РеквизитыИсходящегоСообщения");
	ОчередьСообщений.Колонки.Добавить("РеквизитыВходящегоСообщения");
	
	ОчередьСообщений.Колонки.Добавить("Документ");
	ОчередьСообщений.Колонки.Добавить("ДокументОснование");
	
	ОчередьСообщений.Колонки.Добавить("Новое");
	ОчередьСообщений.Колонки.Добавить("ИдентификаторЗаявки");
	ОчередьСообщений.Колонки.Добавить("КоличествоИтераций",    Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ДатаСледующейИтерации", Новый ОписаниеТипов("Дата"));
	
	ОчередьСообщений.Колонки.Добавить("ЕстьОшибкиСервиса",               Новый ОписаниеТипов("Булево"));
	ОчередьСообщений.Колонки.Добавить("КоличествоПопытокВосстановления", Новый ОписаниеТипов("Число"));
	ОчередьСообщений.Колонки.Добавить("ПроверенаКорректностьОформления", Новый ОписаниеТипов("Булево"));
	ОчередьСообщений.Колонки.Добавить("ТекстОшибки",                     Новый ОписаниеТипов("Строка"));
	
	ОчередьСообщений.Индексы.Добавить("Сообщение");
	
	Возврат ОчередьСообщений;
	
КонецФункции

Функция НоваяТаблицаЗависимостиСообщений() Экспорт
	
	ЗависимостиСообщений = Новый ТаблицаЗначений;
	ЗависимостиСообщений.Колонки.Добавить("Сообщение1");
	ЗависимостиСообщений.Колонки.Добавить("Сообщение2");
	ЗависимостиСообщений.Колонки.Добавить("Загрузка");
	ЗависимостиСообщений.Колонки.Добавить("Передача");
	
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение2");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Передача");
	ЗависимостиСообщений.Индексы.Добавить("Сообщение1, Загрузка");
	
	Возврат ЗависимостиСообщений;
	
КонецФункции

Процедура ПостроитьОчередьСообщений(ПараметрыОбмена, СоответствиеЗаписиСкладскогоЖурнала = Неопределено, СообщенияКПередаче = Неопределено) Экспорт
	
	ПараметрыОбмена.ОчередьСообщений.Очистить();
	ПараметрыОбмена.ЗависимостиСообщений.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаписиКПередаче.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ ВтЗаписи
	|ИЗ
	|	РегистрСведений.ЗаписиСкладскогоЖурналаКПередачеВЕТИС КАК ЗаписиКПередаче
	|ГДЕ
	|	&УсловиеПоЗаписямСкладскогоЖурнала
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписиКПередаче.ЗаписьСкладскогоЖурнала
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЗаписиКПередаче.Сообщение) <> МИНИМУМ(ЗаписиКПередаче.Сообщение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Очередь.ДатаСоздания КАК ДатаСоздания,
	|	ЗаписиКПередаче.Сообщение КАК Сообщение,
	|	ЗаписиКПередаче.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ ВтЗаписиКПередаче
	|ИЗ
	|	РегистрСведений.ЗаписиСкладскогоЖурналаКПередачеВЕТИС КАК ЗаписиКПередаче
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаписи КАК Записи
	|		ПО (Записи.ЗаписьСкладскогоЖурнала = ЗаписиКПередаче.ЗаписьСкладскогоЖурнала)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСообщенийВЕТИС КАК Очередь
	|		ПО (Очередь.Сообщение = ЗаписиКПередаче.Сообщение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтЗаписиКПередаче.Сообщение КАК Сообщение
	|ПОМЕСТИТЬ втСообщенияСПересекающимисяЗаписями
	|ИЗ
	|	ВтЗаписиКПередаче КАК ВтЗаписиКПередаче
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиКПередаче_1.Сообщение КАК Сообщение1,
	|	ЗаписиКПередаче_2.Сообщение КАК Сообщение2,
	|	ЗаписиКПередаче_1.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ИЗ
	|	ВтЗаписиКПередаче КАК ЗаписиКПередаче_1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаписиКПередаче КАК ЗаписиКПередаче_2
	|		ПО ЗаписиКПередаче_1.ЗаписьСкладскогоЖурнала = ЗаписиКПередаче_2.ЗаписьСкладскогоЖурнала
	|			И ЗаписиКПередаче_1.Сообщение <> ЗаписиКПередаче_2.Сообщение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаписиКПередаче_1.ДатаСоздания,
	|	ЗаписиКПередаче_1.ЗаписьСкладскогоЖурнала
	|ИТОГИ ПО
	|	Сообщение1,
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Очередь.ДатаСоздания           КАК ДатаСоздания,
	|	Очередь.Сообщение              КАК Сообщение,
	|	ЕСТЬNULL(Очередь.Сообщение.Операция, Очередь.Операция) КАК Операция,
	|	ЕСТЬNULL(Очередь.Сообщение.ФорматОбмена, НЕОПРЕДЕЛЕНО) КАК ФорматОбмена,
	|	ЕСТЬNULL(Очередь.Сообщение.Документ, НЕОПРЕДЕЛЕНО)     КАК Документ,
	|	Очередь.ХозяйствующийСубъект   КАК ХозяйствующийСубъект,
	|	Очередь.Предприятие            КАК Предприятие,
	|	Очередь.ДокументОснование      КАК ДокументОснование,
	|	Очередь.ПараметрыЗапроса       КАК ПараметрыЗапроса,
	|	Очередь.РеквизитыИсходящегоСообщения КАК РеквизитыИсходящегоСообщения,
	|	Очередь.РеквизитыВходящегоСообщения  КАК РеквизитыВходящегоСообщения,
	|	Очередь.ИдентификаторЗаявки          КАК ИдентификаторЗаявки,
	|	Очередь.ЗагружатьПосле               КАК ЗагружатьПосле
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийВЕТИС КАК Очередь
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСообщенияСПересекающимисяЗаписями КАК втСообщенияСПересекающимисяЗаписями
	|		ПО Очередь.Сообщение = втСообщенияСПересекающимисяЗаписями.Сообщение
	|ГДЕ
	|	Очередь.ХозяйствующийСубъект В(&ХозяйствующиеСубъекты)
	|	И втСообщенияСПересекающимисяЗаписями.Сообщение ЕСТЬ NULL
	|	И &УсловиеПоСообщениям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Очередь.ДатаСоздания,
	|	Очередь.Сообщение,
	|	ЕСТЬNULL(Очередь.Сообщение.Операция, Очередь.Операция),
	|	ЕСТЬNULL(Очередь.Сообщение.ФорматОбмена, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(Очередь.Сообщение.Документ, НЕОПРЕДЕЛЕНО),
	|	Очередь.ХозяйствующийСубъект,
	|	Очередь.Предприятие,
	|	Очередь.ДокументОснование,
	|	Очередь.ПараметрыЗапроса,
	|	Очередь.РеквизитыИсходящегоСообщения,
	|	Очередь.РеквизитыВходящегоСообщения,
	|	Очередь.ИдентификаторЗаявки,
	|	Очередь.ЗагружатьПосле
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийВЕТИС КАК Очередь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСообщенияСПересекающимисяЗаписями КАК втСообщенияСПересекающимисяЗаписями
	|		ПО Очередь.Сообщение = втСообщенияСПересекающимисяЗаписями.Сообщение
	|ГДЕ
	|	Очередь.ХозяйствующийСубъект В(&ХозяйствующиеСубъекты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания");
	
	ЗаписиСкладскогоЖурнала = Новый Массив;
	Если СоответствиеЗаписиСкладскогоЖурнала <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СоответствиеЗаписиСкладскогоЖурнала Цикл
			ЗаписиСкладскогоЖурнала.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ХозяйствующиеСубъекты",   ПараметрыОбмена.ХозяйствующиеСубъекты);
	Запрос.УстановитьПараметр("ЗаписиСкладскогоЖурнала", ЗаписиСкладскогоЖурнала);
	
	Если ЗаписиСкладскогоЖурнала.Количество() > 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоЗаписямСкладскогоЖурнала", "ЗаписиКПередаче.ЗаписьСкладскогоЖурнала В (&ЗаписиСкладскогоЖурнала)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоЗаписямСкладскогоЖурнала", "ИСТИНА");
	КонецЕсли;
	
	Если Не СообщенияКПередаче = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСообщениям", "Очередь.Сообщение В (&МассивСообщений)");
		
		МассивСообщений = Новый Массив;
		Для Каждого СтрокаСообщение Из СообщенияКПередаче Цикл
			МассивСообщений.Добавить(СтрокаСообщение.Сообщение);
		КонецЦикла;
		Запрос.УстановитьПараметр("МассивСообщений", МассивСообщений);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоСообщениям", "ИСТИНА");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ПропущенныеСообщения = Новый Соответствие;
	
	Выборка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Предприятие)
			И ПараметрыОбмена.Предприятия <> Неопределено
			И ПараметрыОбмена.Предприятия.Количество() Тогда
				
			ПредприятияДляОбмена = ПараметрыОбмена.Предприятия.Получить(Выборка.ХозяйствующийСубъект);
			Если ПредприятияДляОбмена <> Неопределено
				И ПредприятияДляОбмена.Найти(Выборка.Предприятие) = Неопределено Тогда
				ПропущенныеСообщения.Вставить(Выборка.Сообщение, Истина);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Сообщение) = Тип("Строка") Тогда
			РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения.Получить();
		Иначе
			РеквизитыИсходящегоСообщения = Неопределено;
		КонецЕсли;
		
		ЭлементОчереди = ПараметрыОбмена.ОчередьСообщений.Добавить();
		ЭлементОчереди.ДатаСоздания          = Выборка.ДатаСоздания;
		ЭлементОчереди.Сообщение             = Выборка.Сообщение;
		
		ЭлементОчереди.ХозяйствующийСубъект         = Выборка.ХозяйствующийСубъект;
		ЭлементОчереди.Предприятие                  = Выборка.Предприятие;
		ЭлементОчереди.Операция                     = Выборка.Операция;
		ЭлементОчереди.ПараметрыЗапроса             = Выборка.ПараметрыЗапроса;
		ЭлементОчереди.РеквизитыИсходящегоСообщения = Выборка.РеквизитыИсходящегоСообщения;
		ЭлементОчереди.РеквизитыВходящегоСообщения  = Выборка.РеквизитыВходящегоСообщения;
		
		ЭлементОчереди.ДокументОснование     = Выборка.ДокументОснование;
		ЭлементОчереди.ИдентификаторЗаявки   = Выборка.ИдентификаторЗаявки;
		
		Если ТипЗнч(Выборка.Сообщение) = Тип("Строка") Тогда
			ЭлементОчереди.ФорматОбмена = РеквизитыИсходящегоСообщения.ФорматОбмена;
			ЭлементОчереди.Документ     = РеквизитыИсходящегоСообщения.Документ;
		Иначе
			ЭлементОчереди.ФорматОбмена = Выборка.ФорматОбмена;
			ЭлементОчереди.Документ     = Выборка.Документ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ЗагружатьПосле) Тогда
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = Выборка.Сообщение;
			НоваяЗависимость.Сообщение2 = Выборка.ЗагружатьПосле;
			НоваяЗависимость.Загрузка   = Ложь;
			НоваяЗависимость.Передача   = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаблокированныеЗаписиСкладскогоЖурнала = Новый Соответствие;
	ВыборкаПоСообщениям = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСообщениям.Следующий() Цикл
		
		Если ПропущенныеСообщения.Получить(ВыборкаПоСообщениям.Сообщение1) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СообщениеОчереди = ПараметрыОбмена.ОчередьСообщений.Найти(ВыборкаПоСообщениям.Сообщение1, "Сообщение");
		Если СообщениеОчереди = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		БлокирующиеСообщения = Новый Соответствие;
		
		Передано = ЗначениеЗаполнено(СообщениеОчереди.ИдентификаторЗаявки);
		
		// Проверим, не содержатся ли записи складского журнала текущего сообщения
		// в ранее сформированных.
		ВыборкаПоЗаписямЖурнала = ВыборкаПоСообщениям.Выбрать();
		Пока ВыборкаПоЗаписямЖурнала.Следующий() Цикл
			
			Сообщения = ЗаблокированныеЗаписиСкладскогоЖурнала.Получить(ВыборкаПоЗаписямЖурнала.ЗаписьСкладскогоЖурнала);
			
			Если Передано Тогда
				// Если сообщение передано, добавим его записи складского журнала
				// в список заблокированных.
				Если Сообщения = Неопределено Тогда
					Сообщения = Новый Массив;
				КонецЕсли;
				Сообщения.Добавить(ВыборкаПоСообщениям.Сообщение1);
				
				ЗаблокированныеЗаписиСкладскогоЖурнала.Вставить(ВыборкаПоЗаписямЖурнала.ЗаписьСкладскогоЖурнала, Сообщения);
				
			Иначе
				
				Если Сообщения <> Неопределено Тогда
					
					Для Каждого Сообщение Из Сообщения Цикл
						БлокирующиеСообщения.Вставить(Сообщение, Истина);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавим все записи складского журнала из текущего сообщения
		// в список заблокированных для анализа в последующих сообщениях.
		ВыборкаПоЗаписямЖурнала.Сбросить();
		Пока ВыборкаПоЗаписямЖурнала.Следующий() Цикл
			
			Сообщения = ЗаблокированныеЗаписиСкладскогоЖурнала.Получить(ВыборкаПоЗаписямЖурнала.ЗаписьСкладскогоЖурнала);
			Если Сообщения = Неопределено Тогда
				Сообщения = Новый Массив;
			КонецЕсли;
			Сообщения.Добавить(ВыборкаПоСообщениям.Сообщение1);
			
			ЗаблокированныеЗаписиСкладскогоЖурнала.Вставить(ВыборкаПоЗаписямЖурнала.ЗаписьСкладскогоЖурнала, Сообщения);
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из БлокирующиеСообщения Цикл
			
			НоваяЗависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
			НоваяЗависимость.Сообщение1 = ВыборкаПоСообщениям.Сообщение1;
			НоваяЗависимость.Сообщение2 = КлючИЗначение.Ключ;
			НоваяЗависимость.Передача   = Ложь;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗависимостиКУдалению = Новый Соответствие();
	Для Каждого СтрокаТЧ Из ПараметрыОбмена.ЗависимостиСообщений Цикл
		Если ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение1, "Сообщение") = Неопределено
			Или ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаТЧ.Сообщение2, "Сообщение") = Неопределено Тогда
			ЗависимостиКУдалению.Вставить(СтрокаТЧ, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого КлючИЗначение Из ЗависимостиКУдалению Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьЭлементОчередиПередачиДанных(ЭлементОчереди, ПараметрыОбмена, ПроверитьИдентификаторЗаявки = Истина) Экспорт
	
	НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ЭлементОчереди.ХозяйствующийСубъект);
	Если НастройкаОбмена <> Неопределено Тогда
		
		ЗначенияРеквизитов = Новый Структура;
		ЗначенияРеквизитов.Вставить("Документ",                     ЭлементОчереди.Документ);
		ЗначенияРеквизитов.Вставить("ДокументОснование",            ЭлементОчереди.ДокументОснование);
		ЗначенияРеквизитов.Вставить("Операция",                     ЭлементОчереди.Операция);
		ЗначенияРеквизитов.Вставить("ФорматОбмена",                 ЭлементОчереди.ФорматОбмена);
		ЗначенияРеквизитов.Вставить("ХозяйствующийСубъект",         ЭлементОчереди.ХозяйствующийСубъект);
		ЗначенияРеквизитов.Вставить("Предприятие",                  ЭлементОчереди.Предприятие);
		ЗначенияРеквизитов.Вставить("Сообщение",                    ЭлементОчереди.Сообщение);
		ЗначенияРеквизитов.Вставить("РеквизитыИсходящегоСообщения", ЭлементОчереди.РеквизитыИсходящегоСообщения);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ТаблицыБлокируемыхСсылок = Новый ТаблицаЗначений;
			ТаблицыБлокируемыхСсылок.Колонки.Добавить("Сообщение", Метаданные.РегистрыСведений.ОчередьСообщенийВЕТИС.Измерения.Сообщение.Тип);
			ТаблицыБлокируемыхСсылок.Добавить().Сообщение = ЭлементОчереди.Сообщение;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьСообщенийВЕТИС");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицыБлокируемыхСсылок;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сообщение", "Сообщение");
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Выбран() Тогда
				
				Если ПроверитьИдентификаторЗаявки Тогда
					Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
						Если ЗначениеЗаполнено(ЗаписьНабора.ИдентификаторЗаявки) Тогда
							
							ОтменитьТранзакцию();
							
							// Сообщение уже передано в ВетИС, но еще не обработано.
							ЭлементОчереди.ИдентификаторЗаявки = ЗаписьНабора.ИдентификаторЗаявки;
							Возврат;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				РезультатыПередачиСообщения = ЗаявкиВЕТИС.ПередатьСообщениеВСервисОбработкиЗаявок(
					ЭлементОчереди,
					ЗначенияРеквизитов,
					НастройкаОбмена, ПараметрыОбмена);
				
			Иначе
				
				ОтменитьТранзакцию();
				
				// Сообщение уже передано, обработано сервисом, результат загружен в ИБ.
				УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
				Возврат;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ЭлементОчереди.Документ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
		ТекстОшибки = "";
		Если ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки) Тогда
			ТекстОшибки = РезультатыПередачиСообщения.РезультатОбработкиОтвета.ТекстОшибки;
		ИначеЕсли ЗначениеЗаполнено(РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
			ТекстОшибки = РезультатыПередачиСообщения.РезультатОтправкиЗапроса.ТекстОшибки;
		КонецЕсли;
		
		ЭлементОчереди.ТекстОшибки = ТекстОшибки;
		
		Передано = Не ЗначениеЗаполнено(ТекстОшибки);
		
		Если Не ЭлементОчереди.ЕстьОшибкиСервиса
			Или ЭлементОчереди.КоличествоПопытокВосстановления = ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов Тогда
			
			СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ХозяйствующийСубъект = ЭлементОчереди.ХозяйствующийСубъект;
			СтрокаРезультата.Предприятие          = ЭлементОчереди.Предприятие;
			СтрокаРезультата.Операция             = ЭлементОчереди.Операция;
			СтрокаРезультата.ФорматОбмена         = ЭлементОчереди.ФорматОбмена;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Истина;
			СтрокаРезультата.Передано              = Передано;
			СтрокаРезультата.Принято               = Ложь;
			СтрокаРезультата.ЕстьОшибкиСервиса     = ЭлементОчереди.ЕстьОшибкиСервиса;
			
			СтрокаРезультата.ИсходящееСообщение = РезультатыПередачиСообщения.ИсходящееСообщение;
			СтрокаРезультата.ВходящееСообщение  = РезультатыПередачиСообщения.ВходящееСообщение;
			
			СтрокаРезультата.Объект            = РезультатыПередачиСообщения.Документ;
			СтрокаРезультата.ДокументОснование = РезультатыПередачиСообщения.ДокументОснование;
			СтрокаРезультата.НовыйСтатус       = РезультатыПередачиСообщения.РезультатОбработкиОтвета.НовыйСтатус;
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
		Если Не Передано
			И (ПараметрыОбмена.КоличествоПовторныхЗапросов < 0
			Или ЭлементОчереди.КоличествоИтераций < ПараметрыОбмена.КоличествоПовторныхЗапросов) Тогда
			
			ЭлементОчереди.КоличествоИтераций = ЭлементОчереди.КоличествоИтераций + 1;
			
		Иначе
			
			Если Передано Тогда
				
				НайденнаяСтрока = ПараметрыОбмена.ОчередьСообщений.Найти(СтрокаРезультата.ИсходящееСообщение, "Сообщение");
				НайденнаяСтрока.ИдентификаторЗаявки         = РезультатыПередачиСообщения.ИдентификаторЗапроса;
				НайденнаяСтрока.РеквизитыВходящегоСообщения = РезультатыПередачиСообщения.РеквизитыВходящегоСообщения;
				
				Если ЭтоЗапросСписка(ЭлементОчереди.Операция) Тогда
					ПараметрыОбмена.ДатаПоследнегоЗапросаСписка = ТекущаяДатаСеанса();
				КонецЕсли;
				
			Иначе
				
				ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДобавитьОтложенныйЭлементОчередиВИзменения(ЭлементОчереди, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтложенныйЭлементОчередиВИзменения(ЭлементОчереди, ПараметрыОбмена)
	
	СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.ХозяйствующийСубъект  = ЭлементОчереди.ХозяйствующийСубъект;
	СтрокаРезультата.Предприятие           = ЭлементОчереди.Предприятие;
	СтрокаРезультата.Операция              = ЭлементОчереди.Операция;
	СтрокаРезультата.ФорматОбмена          = ЭлементОчереди.ФорматОбмена;
	
	СтрокаРезультата.ТекстОшибки           = "";
	СтрокаРезультата.ПодготовленоКПередаче = Истина;
	СтрокаРезультата.Передано              = Ложь;
	СтрокаРезультата.Принято               = Ложь;
	
	СтрокаРезультата.ИсходящееСообщение    = ЭлементОчереди.Сообщение;
	СтрокаРезультата.ВходящееСообщение     = Неопределено;
	
	СтрокаРезультата.Объект                = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование     = ЭлементОчереди.ДокументОснование;
	СтрокаРезультата.НовыйСтатус           = Перечисления.СтатусыОбработкиСообщенийВЕТИС.КПередаче;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
КонецПроцедуры

Функция ПодготовитьКПередачеСОжиданием(СообщенияXML, ПараметрыОбмена, УникальныйИдентификатор = Неопределено, НакапливатьИзменения = Истина) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",                 Новый Массив);
	ВозвращаемоеЗначение.Вставить("ДлительнаяОперация",        Неопределено);
	ВозвращаемоеЗначение.Вставить("Ожидать",                   Неопределено);
	ВозвращаемоеЗначение.Вставить("АдресВоВременномХранилище", Неопределено);
	
	Если СообщенияXML.Количество() > 0
		И ТипЗнч(СообщенияXML[0]) = Тип("Структура")
		И СообщенияXML[0].Свойство("ПорядокЗависимости") Тогда
		
		МаксимальныйНомерЗависимости = 0;
		Для Каждого СообщениеXML Из СообщенияXML Цикл
			Если СообщениеXML.ПорядокЗависимости > МаксимальныйНомерЗависимости Тогда
				МаксимальныйНомерЗависимости = СообщениеXML.ПорядокЗависимости;
			КонецЕсли;
		КонецЦикла;
		
		ЗагружатьПосле = Неопределено;
		Для ПорядокЗависимости = 1 По МаксимальныйНомерЗависимости Цикл
			
			КПередаче = Новый Массив;
			Для Каждого Строка Из СообщенияXML Цикл
				Если Строка.ПорядокЗависимости = ПорядокЗависимости Тогда
					КПередаче.Добавить(Строка.СообщениеXML);
				КонецЕсли;
			КонецЦикла;
			
			ЗагружатьПосле = ПодготовитьСообщенияКПередаче(КПередаче, Истина, ПараметрыОбмена, ЗагружатьПосле);
		КонецЦикла;
		
	Иначе
		ПодготовитьСообщенияКПередаче(СообщенияXML, Истина, ПараметрыОбмена);
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	Для Каждого ИзмененияЭлементДанных Из ПараметрыОбмена.Изменения Цикл
		Если ЗначениеЗаполнено(ИзмененияЭлементДанных.ТекстОшибки) Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ТребуетсяОжидание = (Не ЕстьОшибки)
		И УникальныйИдентификатор <> Неопределено
		И ПараметрыОбмена.ОчередьСообщений.Количество() > 0;
	
	Если ТребуетсяОжидание Тогда
		
		Если Не НакапливатьИзменения Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ВозвращаемоеЗначение.Изменения,
				ПараметрыОбмена.Изменения);
			
			ПараметрыОбмена.Изменения.Очистить();
			
		КонецЕсли;
		
		// Параметры не сериализуются => не могут быть размещены во временном хранилище.
		ПараметрыОбмена.ПараметрыПреобразования   = Неопределено;
		ПараметрыОбмена.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ПараметрыОбмена.ФоновоеЗадание            = Неопределено;
		
		ВозвращаемоеЗначение.Ожидать                   = 1;
		ВозвращаемоеЗначение.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыОбмена, ПараметрыОбмена.АдресВоВременномХранилище);
		
	Иначе
		ВозвращаемоеЗначение.Изменения = ПараметрыОбмена.Изменения;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область Серии

Функция СтруктураРезультатЗаполненияСерий() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаполнениеЗавершено",  Ложь);
	Результат.Вставить("СписокОшибок",         Неопределено);
	Возврат Результат;
	
КонецФункции

Функция СгенерироватьСерии(Объект, Товары, ВыделенныеСтроки, ПараметрыУказанияСерий, ТоварыУточнение = Неопределено) Экспорт
	
	РезультатЗаполненияСерий = СтруктураРезультатЗаполненияСерий();
	
	ИнтеграцияВЕТИСПереопределяемый.ПриГенерацииСерий(
		Объект,
		Товары,
		ВыделенныеСтроки,
		ПараметрыУказанияСерий,
		ТоварыУточнение,
		РезультатЗаполненияСерий);
		
	Возврат РезультатЗаполненияСерий;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

Функция НоваяТаблицаДляСравненияИдентификаторов() Экспорт
	
	ОписаниеТипаУникальныйИдентификатор = Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип;
	ОписаниеТипаДата                    = Новый ОписаниеТипов("Дата");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Идентификатор",       ОписаниеТипаУникальныйИдентификатор);
	Таблица.Колонки.Добавить("ИдентификаторВерсии", ОписаниеТипаУникальныйИдентификатор);
	Таблица.Колонки.Добавить("ДатаИзменения",       ОписаниеТипаДата);
	Таблица.Колонки.Добавить("Индекс",              Новый ОписаниеТипов("Число"));
	
	Возврат Таблица;
	
КонецФункции

Функция ПоследняяДатаИзмененияСтатусаВСД(ЭлементДанных)
	
	ПустаяДата = Дата(1,1,1);
	ДатаИзменения = ПустаяДата;
	
	Для Каждого ИзменениеСтатусовЭлементДанных Из ЭлементДанных.statusChange Цикл
		Если ДатаИзменения = Неопределено Тогда
			ДатаИзменения = ИзменениеСтатусовЭлементДанных.actualDateTime;
		КонецЕсли;
		Если ДатаИзменения < ИзменениеСтатусовЭлементДанных.actualDateTime Тогда
			ДатаИзменения = ИзменениеСтатусовЭлементДанных.actualDateTime;
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаИзменения > ПустаяДата
		И ДатаИзменения < ЭлементДанных.lastUpdateDate Тогда
		ДатаИзменения = ЭлементДанных.lastUpdateDate;
	КонецЕсли;
	
	Возврат ДатаИзменения;
	
КонецФункции

Функция ЭлементыДанныхСпискаКЗагрузке(Список, Метаданные, ТолькоИзменения = Истина, УчитыватьДатыИзменения = Ложь, ТаблицаИдентификаторов = Неопределено) Экспорт
	
	ЭлементыДанных = Новый Массив;
	
	Если ТаблицаИдентификаторов = Неопределено Тогда
		
		Индекс = -1;
		Таблица = НоваяТаблицаДляСравненияИдентификаторов();
		Для Каждого ЭлементДанных Из Список Цикл
			
			Индекс = Индекс + 1;
			
			СтрокаТЧ = Таблица.Добавить();
			СтрокаТЧ.Идентификатор       = ЭлементДанных.guid;
			СтрокаТЧ.ИдентификаторВерсии = ЭлементДанных.uuid;
			Если УчитыватьДатыИзменения Тогда
				СтрокаТЧ.ДатаИзменения = ЭлементДанных.updateDate;
			КонецЕсли;
			СтрокаТЧ.Индекс = Индекс;
			
		КонецЦикла;
		
	Иначе
		
		Таблица = ТаблицаИдентификаторов;
		
	КонецЕсли;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат ЭлементыДанных;
	КонецЕсли;
	
	Если ТолькоИзменения Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Индекс              КАК Индекс,
		|	Т.Идентификатор       КАК Идентификатор,
		|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
		|	Т.ДатаИзменения       КАК ДатаИзменения
		|ПОМЕСТИТЬ ВтИдентификаторы
		|ИЗ
		|	&Таблица КАК Т
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Идентификатор    КАК Идентификатор,
		|	МАКСИМУМ(Т.Индекс) КАК Индекс
		|ПОМЕСТИТЬ ВтИдентификаторыМаксимальныеИндексы
		|ИЗ
		|	ВтИдентификаторы КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.Идентификатор
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Индекс              КАК Индекс,
		|	Т.Идентификатор       КАК Идентификатор,
		|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
		|	Т.ДатаИзменения       КАК ДатаИзменения
		|ПОМЕСТИТЬ ВтИдентификаторыПоследниеИдентификаторы
		|ИЗ
		|	ВтИдентификаторы КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИдентификаторыМаксимальныеИндексы КАК ТМаксимальныеИндексы
		|		ПО ТМаксимальныеИндексы.Идентификатор = Т.Идентификатор
		|		 И ТМаксимальныеИндексы.Индекс = Т.Индекс
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИдентификаторы.Индекс                       КАК Индекс,
		|	ВтИдентификаторы.Идентификатор                КАК Идентификатор,
		|	ЕСТЬNULL(Классификатор.Ссылка, &ПустаяСсылка) КАК Ссылка
		|ИЗ
		|	ВтИдентификаторыПоследниеИдентификаторы КАК ВтИдентификаторы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмяТаблицы КАК Классификатор
		|		ПО Классификатор.Идентификатор = ВтИдентификаторы.Идентификатор
		|ГДЕ
		|	Классификатор.ИдентификаторВерсии <> ВтИдентификаторы.ИдентификаторВерсии
		|	И &ОтборПоДатеИзменения
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Т.Индекс              КАК Индекс,
		|	Т.Идентификатор       КАК Идентификатор,
		|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
		|	Т.ДатаИзменения       КАК ДатаИзменения
		|ПОМЕСТИТЬ ВтИдентификаторы
		|ИЗ
		|	&Таблица КАК Т
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Идентификатор    КАК Идентификатор,
		|	МАКСИМУМ(Т.Индекс) КАК Индекс
		|ПОМЕСТИТЬ ВтИдентификаторыМаксимальныеИндексы
		|ИЗ
		|	ВтИдентификаторы КАК Т
		|СГРУППИРОВАТЬ ПО
		|	Т.Идентификатор
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Индекс              КАК Индекс,
		|	Т.Идентификатор       КАК Идентификатор,
		|	Т.ИдентификаторВерсии КАК ИдентификаторВерсии,
		|	Т.ДатаИзменения       КАК ДатаИзменения
		|ПОМЕСТИТЬ ВтИдентификаторыПоследниеИдентификаторы
		|ИЗ
		|	ВтИдентификаторы КАК Т
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтИдентификаторыМаксимальныеИндексы КАК ТМаксимальныеИндексы
		|		ПО ТМаксимальныеИндексы.Идентификатор = Т.Идентификатор
		|		 И ТМаксимальныеИндексы.Индекс = Т.Индекс
		|;
		|
		|///////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИдентификаторы.Индекс                       КАК Индекс,
		|	ВтИдентификаторы.Идентификатор                КАК Идентификатор,
		|	ЕСТЬNULL(Классификатор.Ссылка, &ПустаяСсылка) КАК Ссылка
		|ИЗ
		|	ВтИдентификаторыПоследниеИдентификаторы КАК ВтИдентификаторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИмяТаблицы КАК Классификатор
		|		ПО Классификатор.Идентификатор = ВтИдентификаторы.Идентификатор
		|ГДЕ
		|	(Классификатор.ИдентификаторВерсии <> ВтИдентификаторы.ИдентификаторВерсии
		|	ИЛИ ЕСТЬNULL(Классификатор.Ссылка, &ПустаяСсылка) = &ПустаяСсылка)
		|	И &ОтборПоДатеИзменения
		|";
		
	КонецЕсли;
	
	ПолноеИмя = Метаданные.ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяТаблицы", ПолноеИмя);
	Если УчитыватьДатыИзменения Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоДатеИзменения", "ЕСТЬNULL(Классификатор.ДатаИзменения, &ПустаяДата) < ВтИдентификаторы.ДатаИзменения");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоДатеИзменения", "ИСТИНА");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица",      Таблица);
	Запрос.УстановитьПараметр("ПустаяДата",   '00010101');
	Запрос.УстановитьПараметр("ПустаяСсылка", МенеджерОбъекта.ПустаяСсылка());
	
	ВыборкаПоИдентификаторам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоИдентификаторам.Следующий() Цикл
		
		Данные = Новый Структура;
		Данные.Вставить("ЭлементДанных", Список[ВыборкаПоИдентификаторам.Индекс]);
		Данные.Вставить("Ссылка",        ВыборкаПоИдентификаторам.Ссылка);
		
		ЭлементыДанных.Добавить(Данные);
		
	КонецЦикла;
	
	Возврат ЭлементыДанных;
	
КонецФункции

Процедура УстановитьДатуВыполненияСинхронизации(ТипВЕТИС, ДатаСинхронизации, Смещение = 0, Знач ХозяйствующийСубъект = Неопределено, Знач Предприятие = Неопределено, ПроверятьРегистр = Ложь) Экспорт
	
	Если ХозяйствующийСубъект = Неопределено Тогда
		ХозяйствующийСубъект = Справочники.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка();
	КонецЕсли;
	Если Предприятие = Неопределено Тогда
		Предприятие = Справочники.ПредприятияВЕТИС.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СинхронизацияКлассификаторовВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипВЕТИС.Установить(ТипВЕТИС);
	НаборЗаписей.Отбор.ХозяйствующийСубъект.Установить(ХозяйствующийСубъект);
	НаборЗаписей.Отбор.Предприятие.Установить(Предприятие);
	
	Если ДатаСинхронизации <> Неопределено Тогда
		
		Если ПроверятьРегистр Тогда
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.ТипВЕТИС             = ТипВЕТИС;
		ЗаписьНабора.ДатаСинхронизации    = ДатаСинхронизации;
		ЗаписьНабора.Смещение             = Смещение;
		ЗаписьНабора.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ЗаписьНабора.Предприятие          = Предприятие;
		ЗаписьНабора.ДатаОбмена           = ТекущаяУниверсальнаяДата();
		
		НаборЗаписей.Записать();
	
	Иначе
		
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Выбран() Тогда
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				ЗаписьНабора.ДатаОбмена = ТекущаяУниверсальнаяДата();
			КонецЦикла;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаПоДаннымДаты(ДанныеДаты)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Дата");
	ВозвращаемоеЗначение.Вставить("ТочностьЗаполнения");
	
	Год = Формат(ДанныеДаты.year,  "ЧЦ=4; ЧВН=; ЧГ=0");
	
	Если ДанныеДаты.month <> Неопределено Тогда
		
		Месяц = Формат(ДанныеДаты.month, "ЧЦ=2; ЧВН=; ЧГ=0");
		
		Если ДанныеДаты.day <> Неопределено Тогда
			
			День = Формат(ДанныеДаты.day, "ЧЦ=2; ЧВН=; ЧГ=0");
			ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ;
			
			Если ДанныеДаты.hour <> Неопределено Тогда
				
				Час = Формат(ДанныеДаты.hour, "ЧЦ=2; ЧВН=; ЧГ=0");
				ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ;
				
				Если ДанныеДаты.minute <> Неопределено Тогда
					Минута = Формат(ДанныеДаты.minute, "ЧЦ=2; ЧВН=; ЧГ=0");
				Иначе
					Минута = "00";
				КонецЕсли;
				
			Иначе
				Час = "00";
			КонецЕсли;
			
		Иначе
			День   = "01";
			Час    = "00";
			Минута = "00";
			ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ;
		КонецЕсли;
		
	Иначе
		
		Месяц  = "01";
		День   = "01";
		Час    = "00";
		Минута = "00";
		ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ГГГГ;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.Дата = Дата(Год + Месяц + День + Час + Минута + "00");
	ВозвращаемоеЗначение.ТочностьЗаполнения = ТочностьЗаполнения;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗагрузитьДату(Объект, Префикс, ЭлементДанных) Экспорт
	
	Объект[Префикс + "НачалоПериода"]      = Неопределено;
	Объект[Префикс + "КонецПериода"]       = Неопределено;
	Объект[Префикс + "ТочностьЗаполнения"] = Неопределено;
	Объект[Префикс + "Строка"]             = Неопределено;
	
	Если ЭлементДанных <> Неопределено Тогда
		
		Если ЭлементДанных.firstDate <> Неопределено Тогда
			
			ДанныеНачалоПериода = ДатаПоДаннымДаты(ЭлементДанных.firstDate);
			Объект[Префикс + "НачалоПериода"]      = ДанныеНачалоПериода.Дата;
			Объект[Префикс + "ТочностьЗаполнения"] = ДанныеНачалоПериода.ТочностьЗаполнения;
			
		Иначе
			
			Объект[Префикс + "НачалоПериода"]      = Неопределено;
			Объект[Префикс + "ТочностьЗаполнения"] = Неопределено;
			
		КонецЕсли;
		
		Если ЭлементДанных.secondDate <> Неопределено Тогда
			
			ДанныеКонецПериода = ДатаПоДаннымДаты(ЭлементДанных.secondDate);
			Объект[Префикс + "КонецПериода"] = ДанныеКонецПериода.Дата;
			
			Если ДанныеКонецПериода.ТочностьЗаполнения <> ДанныеНачалоПериода.ТочностьЗаполнения Тогда
				
				Если ДанныеНачалоПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ
					Или ДанныеКонецПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ Тогда
					Объект[Префикс + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГЧЧ;
				ИначеЕсли ДанныеНачалоПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ
					Или ДанныеКонецПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ Тогда
					Объект[Префикс + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ;
				ИначеЕсли ДанныеНачалоПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ
					Или ДанныеКонецПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ Тогда
					Объект[Префикс + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ММГГГГ;
				ИначеЕсли ДанныеНачалоПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ГГГГ
					Или ДанныеКонецПериода.ТочностьЗаполнения = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ГГГГ Тогда
					Объект[Префикс + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ГГГГ;
				Иначе
					Объект[Префикс + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.ДДММГГГГ;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Объект[Префикс + "КонецПериода"] = Неопределено;
		КонецЕсли;
		
		Если ВРег(ЭлементДанных.informalDate) = ВРег("НЕИЗВЕСТНО") Тогда
			Объект[Префикс + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.Неизвестно;
		ИначеЕсли ВРег(ЭлементДанных.informalDate) = ВРег("НЕ ОГРАНИЧЕН")
			Или ВРег(ЭлементДанных.informalDate) = ВРег("НЕ ОГРАНИЧЕН") Тогда
			Объект[Префикс + "ТочностьЗаполнения"] = Перечисления.ТочностьЗаполненияПериодаВЕТИС.СрокГодностиНеОграничен;
		Иначе
			Объект[Префикс + "Строка"] = ЭлементДанных.informalDate;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПредприятия(ЭлементДанных, ПараметрыОбмена = Неопределено, ЗагружатьПоСсылкам = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементДанных.status) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Данные = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеПредприятия();
	Данные.Активность          = ЭлементДанных.active;
	Данные.Актуальность        = ЭлементДанных.last;
	Данные.Идентификатор       = ЭлементДанных.guid;
	Данные.ИдентификаторВерсии = ЭлементДанных.uuid;
	Данные.Статус              = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	Данные.СтатусВРеестре      = ИнтеграцияВЕТИСПовтИсп.СтатусПредприятияВРеестре(ЭлементДанных.registryStatus);
	Данные.ДатаСоздания        = ЭлементДанных.createDate;
	Данные.ДатаИзменения       = ЭлементДанных.updateDate;
	Данные.Наименование        = ЭлементДанных.name;
	
	Если ЭлементДанных.address <> Неопределено Тогда
		Данные.ДанныеАдреса        = ДанныеАдреса(ЭлементДанных.address);
		Данные.ПредставлениеАдреса = Данные.ДанныеАдреса.ПредставлениеАдреса;
		Если Данные.ДанныеАдреса.Свойство("СтранаПредставление")
			И ИнтеграцияВЕТИСПовтИсп.СтранаМира(Данные.ДанныеАдреса.СтранаGUID)<>Справочники.СтраныМира.Россия
			И СтрНайти(Данные.ПредставлениеАдреса, Данные.ДанныеАдреса.СтранаПредставление) = 0 Тогда
			Данные.ПредставлениеАдреса = Данные.ДанныеАдреса.СтранаПредставление + " " + Данные.ПредставлениеАдреса;
		КонецЕсли;
	КонецЕсли;
	
	Данные.Тип = ИнтеграцияВЕТИСПовтИсп.ТипПредприятия(ЭлементДанных.type);
	
	Если ЗначениеЗаполнено(ЭлементДанных.owner)
		И ЗагружатьПоСсылкам Тогда
		Данные.СобственникПредприятия = ХозяйствующийСубъект(
			ЭлементДанных.owner.guid,
			Неопределено,
			ПараметрыОбмена);
	КонецЕсли;
	
	ВидыДеятельности = Новый Массив;
	Если ЭлементДанных.activityList <> Неопределено Тогда
		Для Каждого activity Из ЭлементДанных.activityList.activity Цикл
			ВидыДеятельности.Добавить(activity.name);
		КонецЦикла;
	КонецЕсли;
	Данные.ВидыДеятельности = ВидыДеятельности;
	
	НомераПредприятий = Новый Массив;
	Если ЭлементДанных.numberList <> Неопределено Тогда
		Для Каждого НомерПредприятия Из ЭлементДанных.numberList.enterpriseNumber Цикл
			НомераПредприятий.Добавить(НомерПредприятия);
		КонецЦикла;
	КонецЕсли;
	Данные.НомераПредприятий = НомераПредприятий;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеХозяйствующегоСубъекта(ЭлементДанных, ЗагружатьПоСсылкам = Ложь) Экспорт
	
	Данные = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеХозяйствующегоСубъекта();
	Данные.Активность          = ЭлементДанных.active;
	Данные.Актуальность        = ЭлементДанных.last;
	Данные.Идентификатор       = ЭлементДанных.guid;
	Данные.ИдентификаторВерсии = ЭлементДанных.uuid;
	Данные.Статус              = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	Данные.ДатаСоздания        = ЭлементДанных.createDate;
	Данные.ДатаИзменения       = ЭлементДанных.updateDate;
	
	Данные.Наименование       = ЭлементДанных.name;
	Данные.НаименованиеПолное = ЭлементДанных.fullName;
	Данные.ИНН                = ЭлементДанных.inn;
	Данные.КПП                = ЭлементДанных.kpp;
	
	Данные.ОГРН = ЭлементДанных.ogrn;
	Данные.ФИО = ЭлементДанных.fio;
	Если ЗначениеЗаполнено(ЭлементДанных.incorporationForm) Тогда
		Данные.ОрганизационноПравоваяФормаИдентификатор = ЭлементДанных.incorporationForm.uuid;
	КонецЕсли;
	
	Если ЭлементДанных.juridicalAddress <> Неопределено Тогда
		Данные.ДанныеАдреса        = ДанныеАдреса(ЭлементДанных.juridicalAddress);
		Данные.ПредставлениеАдреса = Данные.ДанныеАдреса.ПредставлениеАдреса;
	КонецЕсли;
	
	Данные.Тип = ТипХозяйствующегоСубъекта(ЭлементДанных.type);
	
	Возврат Данные;
	
КонецФункции

// Функция - Данные наименования продукции
//
// Параметры:
//  ЭлементДанных	 - Структура - ответ сервиса ВетИС с данными продукции
//  ТипПродукции	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение заполнения реквизита
//  Продукция		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение заполнения реквизита
//  ВидПродукции	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение заполнения реквизита
//  ПараметрыОбмена	 - Структура, Неопределено - см. ПараметрыОбмена().
// 
// Возвращаемое значение:
//  Структура - см. ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеПродукции()
//
Функция ДанныеНаименованияПродукции(ЭлементДанных, ТипПродукции = Неопределено, Продукция = Неопределено, ВидПродукции = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Данные = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеПродукции();
	Данные.Активность   = ЭлементДанных.active;
	Данные.Актуальность = ЭлементДанных.last;
	
	Если ЭлементДанных.guid <> Неопределено Тогда
		Данные.Идентификатор = ЭлементДанных.guid;
	КонецЕсли;
	Если ЭлементДанных.uuid <> Неопределено Тогда
		Данные.ИдентификаторВерсии = ЭлементДанных.uuid;
	КонецЕсли;
	Если ЭлементДанных.status <> Неопределено Тогда
		Данные.Статус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	КонецЕсли;
	
	Данные.ДатаСоздания  = ЭлементДанных.createDate;
	Данные.ДатаИзменения = ЭлементДанных.updateDate;
	
	Данные.ТипПродукции = ТипПродукции;
	Данные.Продукция    = Продукция;
	Данные.ВидПродукции = ВидПродукции;
	
	Если ЭлементДанных.producer <> Неопределено Тогда
		ТекущееСопоставление = ИнтеграцияВЕТИСПовтИсп.ХозяйствующийСубъектСоответствуетОрганизации(ЭлементДанных.producer.guid);
		Если ТекущееСопоставление.СоответствуетОрганизации Тогда
			Данные.ХозяйствующийСубъектПроизводитель = ТекущееСопоставление.Ссылка;
		Иначе
			Данные.ХозяйствующийСубъектПроизводитель = Неопределено;
		КонецЕсли;
		Данные.ХозяйствующийСубъектПроизводительИдентификатор = ЭлементДанных.producer.guid;
	Иначе
		Данные.ХозяйствующийСубъектПроизводитель = Неопределено;
		Данные.ХозяйствующийСубъектПроизводительИдентификатор = Неопределено;
	КонецЕсли;
	
	Если ЭлементДанных.producer <> Неопределено
		И ЭлементДанных.tmOwner <> Неопределено
		И ЭлементДанных.producer.guid = ЭлементДанных.tmOwner.guid Тогда
		
		Данные.ХозяйствующийСубъектСобственникТорговойМарки = Данные.ХозяйствующийСубъектПроизводитель;
		Данные.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор = ЭлементДанных.tmOwner.guid;
	Иначе
		
		Если ЭлементДанных.tmOwner <> Неопределено Тогда
			ТекущееСопоставление = ИнтеграцияВЕТИСПовтИсп.ХозяйствующийСубъектСоответствуетОрганизации(ЭлементДанных.tmOwner.guid);
			Если ТекущееСопоставление.СоответствуетОрганизации Тогда
				Данные.ХозяйствующийСубъектСобственникТорговойМарки = ТекущееСопоставление.Ссылка;
			Иначе
				Данные.ХозяйствующийСубъектСобственникТорговойМарки = Неопределено;
			КонецЕсли;
			Данные.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор = ЭлементДанных.tmOwner.guid;
		Иначе
			Данные.ХозяйствующийСубъектСобственникТорговойМарки = Неопределено;
			Данные.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементДанных.productType <> Неопределено
		И (ТипПродукции = Неопределено Или Продукция = Неопределено Или ВидПродукции = Неопределено) Тогда
		
		Данные.ТипПродукции = ПродукцияВЕТИСВызовСервера.ТипПродукции(ЭлементДанных.productType);
		
		Если ЭлементДанных.product <> Неопределено Тогда
			
			Данные.Продукция = Продукция(ЭлементДанных.product.guid, Данные.ТипПродукции, ПараметрыОбмена);
			
			Если ЭлементДанных.subProduct <> Неопределено Тогда
				Данные.ВидПродукции = ВидПродукции(ЭлементДанных.subProduct.guid, Данные.ТипПродукции, Данные.Продукция, ПараметрыОбмена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Данные.Наименование      = ЭлементДанных.name;
	Данные.Артикул           = ЭлементДанных.code;
	Данные.GTIN              = ЭлементДанных.globalID;
	Данные.СоответствуетГОСТ = ЭлементДанных.correspondsToGost;
	Данные.ГОСТ              = ЭлементДанных.gost;
	
	Если ЭлементДанных.packaging <> Неопределено Тогда
		
		Если ЭлементДанных.packaging.packagingType <> Неопределено Тогда
			Данные.ФасовкаУпаковка = Упаковка(ЭлементДанных.packaging.packagingType, ПараметрыОбмена);
		КонецЕсли;
		
		Если ЭлементДанных.packaging.unit <> Неопределено Тогда
			Данные.ФасовкаЕдиницаИзмерения = ЕдиницаИзмерения(ЭлементДанных.packaging.unit.guid, ПараметрыОбмена);
		КонецЕсли;
		
		Данные.ФасовкаКоличествоУпаковок        = ЭлементДанных.packaging.quantity;
		Данные.ФасовкаКоличествоЕдиницВУпаковке = ЭлементДанных.packaging.volume;
		
	КонецЕсли;
	
	Если ЭлементДанных.producing <> Неопределено Тогда
		Для Каждого ЭлементДанных Из ЭлементДанных.producing Цикл
			Данные.Производители.Добавить(
				Предприятие(ЭлементДанных.location.guid, ПараметрыОбмена));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

Функция ДанныеНаименованияПродукцииДляПросмотра(ЭлементДанных, ТипПродукции = Неопределено, Продукция = Неопределено, ВидПродукции = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	Данные = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеПродукции();
	Данные.Активность   = ЭлементДанных.active;
	Данные.Актуальность = ЭлементДанных.last;
	
	Если ЭлементДанных.guid <> Неопределено Тогда
		Данные.Идентификатор = ЭлементДанных.guid;
	КонецЕсли;
	Если ЭлементДанных.uuid <> Неопределено Тогда
		Данные.ИдентификаторВерсии = ЭлементДанных.uuid;
	КонецЕсли;
	Если ЭлементДанных.status <> Неопределено Тогда
		Данные.Статус = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	КонецЕсли;
	
	Данные.ДатаСоздания  = ЭлементДанных.createDate;
	Данные.ДатаИзменения = ЭлементДанных.updateDate;
	
	Данные.ТипПродукции = ТипПродукции;
	Данные.Продукция    = Продукция;
	Данные.ВидПродукции = ВидПродукции;
	
	Если ЭлементДанных.producer <> Неопределено Тогда
		ТекущееСопоставление = ИнтеграцияВЕТИСПовтИсп.ХозяйствующийСубъектСоответствуетОрганизации(ЭлементДанных.producer.guid);
		Если ТекущееСопоставление.СоответствуетОрганизации Тогда
			Данные.ХозяйствующийСубъектПроизводитель = ТекущееСопоставление.Ссылка;
		Иначе
			Результат = ЦерберВЕТИСВызовСервера.ХозяйствующийСубъектПоGUID(ЭлементДанных.producer.guid);
			Данные.ХозяйствующийСубъектПроизводитель = Результат.Элемент.name;
		КонецЕсли;
		Данные.ХозяйствующийСубъектПроизводительИдентификатор = ЭлементДанных.producer.guid;
	Иначе
		Данные.ХозяйствующийСубъектПроизводитель = Неопределено;
		Данные.ХозяйствующийСубъектПроизводительИдентификатор = Неопределено;
	КонецЕсли;
	
	Если ЭлементДанных.producer <> Неопределено
		И ЭлементДанных.tmOwner <> Неопределено
		И ЭлементДанных.producer.guid = ЭлементДанных.tmOwner.guid Тогда
		
		Данные.ХозяйствующийСубъектСобственникТорговойМарки = Данные.ХозяйствующийСубъектПроизводитель;
		Данные.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор = ЭлементДанных.tmOwner.guid;
	Иначе
		
		Если ЭлементДанных.tmOwner <> Неопределено Тогда
			ТекущееСопоставление = ИнтеграцияВЕТИСПовтИсп.ХозяйствующийСубъектСоответствуетОрганизации(ЭлементДанных.tmOwner.guid);
			Если ТекущееСопоставление.СоответствуетОрганизации Тогда
				Данные.ХозяйствующийСубъектСобственникТорговойМарки = ТекущееСопоставление.Ссылка;
			Иначе
				Результат = ЦерберВЕТИСВызовСервера.ХозяйствующийСубъектПоGUID(ЭлементДанных.tmOwner.guid);
				Данные.ХозяйствующийСубъектСобственникТорговойМарки = Результат.Элемент.name;
			КонецЕсли;
			Данные.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор = ЭлементДанных.tmOwner.guid;
		Иначе
			Данные.ХозяйствующийСубъектСобственникТорговойМарки = Неопределено;
			Данные.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементДанных.productType <> Неопределено
		И (ТипПродукции = Неопределено Или Продукция = Неопределено Или ВидПродукции = Неопределено) Тогда
		
		Данные.ТипПродукции = ПродукцияВЕТИСВызовСервера.ТипПродукции(ЭлементДанных.productType);
		
		Если ЭлементДанных.product <> Неопределено Тогда
			
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПродукцияВЕТИС", ЭлементДанных.product.guid);
			Данные.Продукция = СправочникСсылка;
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
				Результат = ПродукцияВЕТИСВызовСервера.ПродукцияПоGUID(ЭлементДанных.product.guid);
				Если Не (Результат.Элемент = Неопределено) Тогда
					Наименование = Результат.Элемент.name;
				Иначе
					Наименование = НСтр("ru='<Отсутствует в ВетИС>'");
				КонецЕсли;
				Данные.Продукция = Наименование;
			КонецЕсли;
			Если ЭлементДанных.subProduct <> Неопределено Тогда
				СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПродукцияВЕТИС", ЭлементДанных.subProduct.guid);
				Данные.ВидПродукции = СправочникСсылка;
				Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
					Результат = ПродукцияВЕТИСВызовСервера.ВидПродукцииПоGUID(ЭлементДанных.subProduct.guid);
					Если Не (Результат.Элемент = Неопределено) Тогда
						Наименование = Результат.Элемент.name;
					Иначе
						Наименование = НСтр("ru='<Отсутствует в ВетИС>'");
					КонецЕсли;
					Данные.ВидПродукции = Наименование;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Наименование = ЭлементДанных.name;
	
	Данные.Наименование      = Наименование;
	Данные.Артикул           = ЭлементДанных.code;
	Данные.GTIN              = ЭлементДанных.globalID;
	Данные.СоответствуетГОСТ = ЭлементДанных.correspondsToGost;
	Данные.ГОСТ              = ЭлементДанных.gost;
	
	Если ЭлементДанных.packaging <> Неопределено Тогда
		
		Если ЭлементДанных.packaging.packagingType <> Неопределено Тогда
			Данные.ФасовкаУпаковка = Упаковка(ЭлементДанных.packaging.packagingType, ПараметрыОбмена);
		КонецЕсли;
		
		Если ЭлементДанных.packaging.unit <> Неопределено Тогда
			Данные.ФасовкаЕдиницаИзмерения = ЕдиницаИзмерения(ЭлементДанных.packaging.unit.guid, ПараметрыОбмена);
		КонецЕсли;
		
		Данные.ФасовкаКоличествоУпаковок        = ЭлементДанных.packaging.quantity;
		Данные.ФасовкаКоличествоЕдиницВУпаковке = ЭлементДанных.packaging.volume;
		
	КонецЕсли;
	
	Если ЭлементДанных.producing <> Неопределено Тогда
		Для Каждого ЭлементДанных Из ЭлементДанных.producing Цикл
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПредприятияВЕТИС", ЭлементДанных.location.guid);
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
				РезультатВыполненияЗапроса = ЦерберВЕТИСВызовСервера.ПредприятиеПоGUID(ЭлементДанных.location.guid);
				Наименование = РезультатВыполненияЗапроса.Элемент.name;
				Данные.Производители.Добавить(Наименование);
			Иначе
				Данные.Производители.Добавить(СправочникСсылка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Данные;
	
КонецФункции

#Область СохранениеДанных

// Функция - Загрузить предприятие
//
// Параметры:
//  ДанныеПредприятия - Структура - (см. ДанныеПредприятия).
//  СправочникОбъект  - СправочникОбъект.ПредприятияВЕТИС, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена   - Структура, Неопределено - см. ПараметрыОбмена().
//  ТребуетсяПоиск    - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ПредприятияВЕТИС - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьПредприятие(ДанныеПредприятия, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеПредприятия = Неопределено Тогда
		Возврат Справочники.ПредприятияВЕТИС.ПустаяСсылка();
	КонецЕсли;
	
	ЗаписьНового = Ложь;
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПредприятияВЕТИС", ДанныеПредприятия.Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.ПредприятияВЕТИС.СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			СправочникОбъект.УстановитьСсылкуНового(Справочники.ПредприятияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеПредприятия.Идентификатор)));
			ЗаписьНового = Истина;
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	СправочникОбъект.Идентификатор       = ДанныеПредприятия.Идентификатор;
	СправочникОбъект.ИдентификаторВерсии = ДанныеПредприятия.ИдентификаторВерсии;
	СправочникОбъект.Статус              = ДанныеПредприятия.Статус;
	СправочникОбъект.СтатусВРеестре      = ДанныеПредприятия.СтатусВРеестре;
	СправочникОбъект.Тип                 = ДанныеПредприятия.Тип;
	СправочникОбъект.Наименование        = ДанныеПредприятия.Наименование;
	СправочникОбъект.ДанныеАдреса        = Новый ХранилищеЗначения(ДанныеПредприятия.ДанныеАдреса);
	
	СправочникОбъект.АдресПредставление  = ДанныеПредприятия.ПредставлениеАдреса;
	
	СправочникОбъект.НомераПредприятий.Очистить();
	Для Каждого Номер Из ДанныеПредприятия.НомераПредприятий Цикл
		СправочникОбъект.НомераПредприятий.Добавить().Номер = Номер;
	КонецЦикла;
	
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	СправочникОбъект.Записать();
	
	ОбновитьСсылку(ПараметрыОбмена, "ПредприятияВЕТИС", ДанныеПредприятия.Идентификатор, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Функция - Загрузить хозяйствующий субъект
//
// Параметры:
//  ДанныеХозяйствующегоСубъекта - Структура - см ДанныеХозяйствующегоСубъекта().
//  СправочникОбъект			 - СправочникОбъект.ХозяйствующиеСубъектыВЕТИС, Неопределено - объект в который производится загрузка.
//  ПредприятиеGLN				 - Неопределено, Структура, ТаблицаЗначений - связанные с ХС предприятия, см. ТаблицаПредприятийGLN().
//  ПараметрыОбмена				 - Структура, Неопределено - см. ПараметрыОбмена().
//  ТребуетсяПоиск				 - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьХозяйствующийСубъект(ДанныеХозяйствующегоСубъекта, СправочникОбъект = Неопределено, ПредприятиеGLN = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Ложь;
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ХозяйствующиеСубъектыВЕТИС", ДанныеХозяйствующегоСубъекта.Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.ХозяйствующиеСубъектыВЕТИС.СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			СправочникОбъект.УстановитьСсылкуНового(Справочники.ХозяйствующиеСубъектыВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеХозяйствующегоСубъекта.Идентификатор)));
			ЗаписьНового = Истина;
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	СправочникОбъект.Идентификатор       = ДанныеХозяйствующегоСубъекта.Идентификатор;
	СправочникОбъект.ИдентификаторВерсии = ДанныеХозяйствующегоСубъекта.ИдентификаторВерсии;
	СправочникОбъект.Статус              = ДанныеХозяйствующегоСубъекта.Статус;
	СправочникОбъект.Тип                 = ДанныеХозяйствующегоСубъекта.Тип;
	
	Если ДанныеХозяйствующегоСубъекта.Тип = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо
		ИЛИ ДанныеХозяйствующегоСубъекта.Тип = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель Тогда
		СправочникОбъект.Наименование       = ДанныеХозяйствующегоСубъекта.ФИО;
		СправочникОбъект.НаименованиеПолное = ДанныеХозяйствующегоСубъекта.ФИО;
	Иначе
		СправочникОбъект.Наименование       = ДанныеХозяйствующегоСубъекта.Наименование;
		СправочникОбъект.НаименованиеПолное = ДанныеХозяйствующегоСубъекта.НаименованиеПолное;
	КонецЕсли;
	
	СправочникОбъект.ИНН = ДанныеХозяйствующегоСубъекта.ИНН;
	СправочникОбъект.КПП = ДанныеХозяйствующегоСубъекта.КПП;
	
	СправочникОбъект.ДанныеАдреса       = Новый ХранилищеЗначения(ДанныеХозяйствующегоСубъекта.ДанныеАдреса);
	СправочникОбъект.АдресПредставление = ДанныеХозяйствующегоСубъекта.ПредставлениеАдреса;
	
	СправочникОбъект.СоответствуетОрганизации = ДанныеХозяйствующегоСубъекта.СоответствуетОрганизации;
	
	СоответствующийОбъектИБ = Неопределено;
	
	Если ДанныеХозяйствующегоСубъекта.Свойство("Контрагент")
		И ЗначениеЗаполнено(ДанныеХозяйствующегоСубъекта.Контрагент) Тогда
		
		СоответствующийОбъектИБ = ДанныеХозяйствующегоСубъекта.Контрагент;
		
	ИначеЕсли ЗначениеЗаполнено(СправочникОбъект.Контрагент) Тогда
		
		СоответствующийОбъектИБ = СправочникОбъект.Контрагент;
		
	Иначе
		
		Если СправочникОбъект.СоответствуетОрганизации Тогда
			СоответствующийОбъектИБ = ИнтеграцияИС.ОрганизацияПоИННКПП(СправочникОбъект.ИНН, СправочникОбъект.КПП);
		Иначе
			СоответствующийОбъектИБ = ИнтеграцияИС.КонтрагентПоИННКПП(СправочникОбъект.ИНН, СправочникОбъект.КПП);
		КонецЕсли;
		
	КонецЕсли;
	
	СправочникОбъект.Контрагент = СоответствующийОбъектИБ;
	
	ОбновитьСписокПредприятийХозяйствующегоСубъекта(СправочникОбъект, ПредприятиеGLN);
	
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	СправочникОбъект.Записать();
	
	ОбновитьСсылку(ПараметрыОбмена, "ХозяйствующиеСубъектыВЕТИС", ДанныеХозяйствующегоСубъекта.Идентификатор, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Процедура ОбновитьСписокПредприятийХозяйствующегоСубъекта(СправочникОбъект, ПредприятиеGLN) Экспорт
	
	Если ПредприятиеGLN <> Неопределено Тогда
		Если ТипЗнч(ПредприятиеGLN) = Тип("ТаблицаЗначений") Тогда
			ПредприятияGLN = ПредприятиеGLN;
		Иначе
			ПредприятияGLN = ТаблицаПредприятийGLN();
			СтрокаТЧ = ПредприятияGLN.Добавить();
			Если ТипЗнч(ПредприятиеGLN.GLN) = Тип("Строка") Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПредприятиеGLN);
			ИначеЕсли ТипЗнч(ПредприятиеGLN.GLN) = Тип("Массив") Тогда
				СтрокаТЧ.Предприятие = ПредприятиеGLN.Предприятие;
				Для Каждого GLN Из ПредприятиеGLN.GLN Цикл
					СтрокаТЧ.GLN = GLN;
					Прервать;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТЗ Из ПредприятияGLN Цикл
			СтрокаТЧ = СправочникОбъект.Предприятия.Найти(СтрокаТЗ.Предприятие, "Предприятие");
			Если СтрокаТЧ = Неопределено Тогда
				СтрокаТЧ = СправочникОбъект.Предприятия.Добавить();
				СтрокаТЧ.Предприятие = СтрокаТЗ.Предприятие;
				СтрокаТЧ.GLN         = СтрокаТЗ.GLN;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция - Загрузить цель
//
// Параметры:
//  ЭлементДанных	 - Структура - данные результата загрузки цели ВетИС.
//  СправочникОбъект - СправочникОбъект.ЦелиВЕТИС, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена	 - Структура, Неопределено - см. ПараметрыОбмена().
//  ТребуетсяПоиск	 - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ЦелиВЕТИС - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьЦель(ЭлементДанных, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Ложь;
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ЦелиВЕТИС", ЭлементДанных.guid);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.ЦелиВЕТИС.СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			СправочникОбъект.УстановитьСсылкуНового(Справочники.ЦелиВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементДанных.guid)));
			ЗаписьНового = Истина;
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	СправочникОбъект.Идентификатор           = ЭлементДанных.guid;
	СправочникОбъект.ИдентификаторВерсии     = ЭлементДанных.uuid;
	СправочникОбъект.Статус                  = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	СправочникОбъект.Наименование            = ЭлементДанных.name;
	СправочникОбъект.ДляНекачественныхГрузов = ЭлементДанных.forSubstandard;
	СправочникОбъект.ТребуетсяЗагрузка       = Ложь;
	
	СправочникОбъект.Записать();
	
	ОбновитьСсылку(ПараметрыОбмена, "ЦелиВЕТИС", ЭлементДанных.guid, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Функция - Загрузить единицу измерения
//
// Параметры:
//  ЭлементДанных    - Структура - данные результата загрузки единицы измерения ВетИС
//  СправочникОбъект - СправочникОбъект.ЕдиницыИзмеренияВЕТИС, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена  - Структура, Неопределено - см. ПараметрыОбмена().
//  ТребуетсяПоиск   - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмеренияВЕТИС - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьЕдиницуИзмерения(ЭлементДанных, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Ложь;
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ЕдиницыИзмеренияВЕТИС", ЭлементДанных.guid);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.ЕдиницыИзмеренияВЕТИС.СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			СправочникОбъект.УстановитьСсылкуНового(Справочники.ЕдиницыИзмеренияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементДанных.guid)));
			ЗаписьНового = Истина;
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	СправочникОбъект.Наименование        = ЭлементДанных.name;
	СправочникОбъект.Идентификатор       = ЭлементДанных.guid;
	СправочникОбъект.ИдентификаторВерсии = ЭлементДанных.uuid;
	СправочникОбъект.Статус              = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	СправочникОбъект.НаименованиеПолное  = ЭлементДанных.fullName;
	СправочникОбъект.Коэффициент         = ЭлементДанных.factor;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьЕдиницуИзмеренияПоКлассификаторам(СправочникОбъект);
	
	Если ЭлементДанных.commonUnitGuid <> Неопределено
		И ЭлементДанных.commonUnitGuid <> ЭлементДанных.guid Тогда
		СправочникОбъект.БазоваяЕдиницаИзмерения = ЕдиницаИзмерения(ЭлементДанных.commonUnitGuid, ПараметрыОбмена);
	Иначе
		СправочникОбъект.БазоваяЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	СправочникОбъект.Записать();

	ОбновитьСсылку(ПараметрыОбмена, "ЕдиницыИзмеренияВЕТИС", ЭлементДанных.guid, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Функция - Загрузить продукцию
//
// Параметры:
//  ЭлементДанных	 - Структура - данные результата загрузки продукции из ВетИС.
//  СправочникОбъект - СправочникОбъект.ПродукцияВЕТИС, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена	 - Структура, Неопределено - см. ПараметрыОбмена().
//  ТребуетсяПоиск	 - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ПродукцияВЕТИС - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьПродукцию(ЭлементДанных, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Ложь;
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПродукцияВЕТИС", ЭлементДанных.guid);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.ПродукцияВЕТИС.СоздатьГруппу();
			СправочникОбъект.Заполнить(Неопределено);
			СправочникОбъект.УстановитьСсылкуНового(Справочники.ПродукцияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементДанных.guid)));
			ЗаписьНового = Истина;
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	ТипПродукции = ПродукцияВЕТИСВызовСервера.ТипПродукции(ЭлементДанных.productType);
	
	СправочникОбъект.Родитель            = ТипПродукции;
	СправочникОбъект.Наименование        = ЭлементДанных.name;
	СправочникОбъект.Идентификатор       = ЭлементДанных.guid;
	СправочникОбъект.ИдентификаторВерсии = ЭлементДанных.uuid;
	СправочникОбъект.Статус              = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	
	СправочникОбъект.КодТНВЭД     = ЭлементДанных.code;
	СправочникОбъект.ТипПродукции = ТипПродукции;
	
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	СправочникОбъект.Записать();
	
	ОбновитьСсылку(ПараметрыОбмена, "ПродукцияВЕТИС", ЭлементДанных.guid, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Функция - Загрузить вид продукции
//
// Параметры:
//  ЭлементДанных	 - Структура - данные результата загрузки вида продукции из ВетИС.
//  СправочникОбъект - СправочникОбъект.ПродукцияВЕТИС, Неопределено - объект в который производится загрузка.
//  ТипПродукции	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение заполнения реквизита
//  Продукция		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение заполнения реквизита
//  ПараметрыОбмена	 - Структура, Неопределено - см. ПараметрыОбмена().
//  ТребуетсяПоиск	 - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ПродукцияВЕТИС - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьВидПродукции(ЭлементДанных,
	СправочникОбъект = Неопределено,
	ТипПродукции = Неопределено,
	Продукция = Неопределено,
	ПараметрыОбмена = Неопределено,
	ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Ложь;
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПродукцияВЕТИС", ЭлементДанных.guid);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.ПродукцияВЕТИС.СоздатьГруппу();
			СправочникОбъект.Заполнить(Неопределено);
			СправочникОбъект.УстановитьСсылкуНового(Справочники.ПродукцияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ЭлементДанных.guid)));
			ЗаписьНового = Истина;
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	Если Продукция = Неопределено Тогда
		Если ЭлементДанных.Свойство("productGuid") Тогда
			Продукция = Продукция(ЭлементДанных.productGuid, ТипПродукции, ПараметрыОбмена);
		ИначеЕсли ЭлементДанных.Свойство("product") Тогда
			Продукция = Продукция(ЭлементДанных.product.guid, ТипПродукции, ПараметрыОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипПродукции = Неопределено Тогда
		ТипПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукция, "ТипПродукции");
	КонецЕсли;
	
	СправочникОбъект.Родитель            = Продукция;
	СправочникОбъект.Наименование        = ЭлементДанных.name;
	СправочникОбъект.Идентификатор       = ЭлементДанных.guid;
	СправочникОбъект.ИдентификаторВерсии = ЭлементДанных.uuid;
	СправочникОбъект.Статус              = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	
	СправочникОбъект.КодТНВЭД     = ЭлементДанных.code;
	СправочникОбъект.ТипПродукции = ТипПродукции;
	СправочникОбъект.Продукция    = Продукция;
	
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	СправочникОбъект.Записать();
	
	ОбновитьСсылку(ПараметрыОбмена, "ПродукцияВЕТИС", ЭлементДанных.guid, СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Функция - Загрузить наименование продукции
//
// Параметры:
//  ДанныеПродукции	 - Структура - см. ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеПродукции().
//  СправочникОбъект - СправочникОбъект.ПродукцияВЕТИС, Неопределено - объект в который производится загрузка.
//  ПараметрыОбмена	 - Структура, Неопределено - см. ПараметрыОбмена().
//  БезЗаписи		 - Булево - если Ложь то объект не записывается
//  ТребуетсяПоиск	 - Булево - если не передан объект, искать элемент перед заполнением по идентификатору (по умолчанию Истина)
// 
// Возвращаемое значение:
//  СправочникСсылка.ПродукцияВЕТИС - ссылка на записанный/обновленный элемент справочника
//
Функция ЗагрузитьНаименованиеПродукции(ДанныеПродукции, СправочникОбъект = Неопределено, ПараметрыОбмена = Неопределено, БезЗаписи = Ложь, ТребуетсяПоиск = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьНового = Ложь;
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПродукцияВЕТИС", ДанныеПродукции.Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.ПродукцияВЕТИС.СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			Если НЕ(ДанныеПродукции.Идентификатор = Неопределено) Тогда
				СправочникОбъект.УстановитьСсылкуНового(Справочники.ПродукцияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеПродукции.Идентификатор)));
			КонецЕсли;
			ЗаписьНового = Истина;
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не (ЗаписьНового Или БезЗаписи) Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	СправочникОбъект.Родитель            = ДанныеПродукции.ВидПродукции;
	СправочникОбъект.Наименование        = ДанныеПродукции.Наименование;
	СправочникОбъект.Идентификатор       = ДанныеПродукции.Идентификатор;
	СправочникОбъект.ИдентификаторВерсии = ДанныеПродукции.ИдентификаторВерсии;
	СправочникОбъект.Статус              = ДанныеПродукции.Статус;
	
	СправочникОбъект.ХозяйствующийСубъектПроизводитель = ДанныеПродукции.ХозяйствующийСубъектПроизводитель;
	СправочникОбъект.ХозяйствующийСубъектПроизводительИдентификатор = ДанныеПродукции.ХозяйствующийСубъектПроизводительИдентификатор;
	СправочникОбъект.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор = ДанныеПродукции.ХозяйствующийСубъектСобственникТорговойМаркиИдентификатор;
	
	СправочникОбъект.КодТНВЭД            = ДанныеПродукции.КодТНВЭД;
	СправочникОбъект.ТипПродукции        = ДанныеПродукции.ТипПродукции;
	СправочникОбъект.Продукция           = ДанныеПродукции.Продукция;
	СправочникОбъект.ВидПродукции        = ДанныеПродукции.ВидПродукции;
	
	СправочникОбъект.Наименование      = ДанныеПродукции.Наименование;
	СправочникОбъект.Артикул           = ДанныеПродукции.Артикул;
	СправочникОбъект.GTIN              = ДанныеПродукции.GTIN;
	СправочникОбъект.СоответствуетГОСТ = ДанныеПродукции.СоответствуетГОСТ;
	СправочникОбъект.ГОСТ              = ДанныеПродукции.ГОСТ;
	
	СправочникОбъект.ФасовкаУпаковка                  = ДанныеПродукции.ФасовкаУпаковка;
	СправочникОбъект.ФасовкаЕдиницаИзмерения          = ДанныеПродукции.ФасовкаЕдиницаИзмерения;
	СправочникОбъект.ФасовкаКоличествоУпаковок        = ДанныеПродукции.ФасовкаКоличествоУпаковок;
	СправочникОбъект.ФасовкаКоличествоЕдиницВУпаковке = ДанныеПродукции.ФасовкаКоличествоЕдиницВУпаковке;
	
	СправочникОбъект.Производители.Очистить();
	Для Каждого Производитель Из ДанныеПродукции.Производители Цикл
		ПроизводителиСтрокаТЧ = СправочникОбъект.Производители.Добавить();
		ПроизводителиСтрокаТЧ.Производитель = Производитель;
	КонецЦикла;
	
	СправочникОбъект.ХешСумма = ДанныеПродукции.ХешСумма;
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	
	Если НЕ БезЗаписи Тогда
		СправочникОбъект.Записать();
		ОбновитьСсылку(ПараметрыОбмена, "ПродукцияВЕТИС", ДанныеПродукции.Идентификатор, СправочникОбъект.Ссылка);
	КонецЕсли;
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьСведенияОПартии(ВетеринарноСопроводительныйДокументОбъект, batch, ПараметрыОбмена)
	
	ТипПродукции  = ПродукцияВЕТИСВызовСервера.ТипПродукции(batch.productType);
	Продукция     = Продукция(batch.product.guid, ТипПродукции, ПараметрыОбмена);
	ВидПродукции  = ВидПродукции(batch.subProduct.guid, ТипПродукции, Продукция, ПараметрыОбмена);
	
	Если batch.productItem.guid <> Неопределено Тогда
		ВетеринарноСопроводительныйДокументОбъект.Продукция = НаименованиеПродукции(batch.productItem.guid, ТипПродукции, Продукция, ВидПродукции, ПараметрыОбмена);
	Иначе
		
		КодТипаПродукции          = batch.productType;
		ПродукцияИдентификатор    = batch.product.guid;
		ВидПродукцииИдентификатор = batch.subProduct.guid;
		Если batch.productItem.packaging <> Неопределено Тогда
			ФасовкаУпаковкаИдентификатор         = batch.productItem.packaging.packagingType;
			ФасовкаЕдиницаИзмеренияИдентификатор = batch.productItem.packaging.unit.guid;
		Иначе
			ФасовкаУпаковкаИдентификатор         = "";
			ФасовкаЕдиницаИзмеренияИдентификатор = "";
		КонецЕсли;
		
		ВетеринарноСопроводительныйДокументОбъект.Продукция = НайтиСоздатьПродукциюСХешем(
			ДанныеНаименованияПродукции(batch.productItem, ТипПродукции, Продукция, ВидПродукции, ПараметрыОбмена),
			КодТипаПродукции, ПродукцияИдентификатор, ВидПродукцииИдентификатор, ФасовкаУпаковкаИдентификатор, ФасовкаЕдиницаИзмеренияИдентификатор);
		
	КонецЕсли;
	
	ВетеринарноСопроводительныйДокументОбъект.ПродукцияИдентификаторВерсии = batch.productItem.uuid;
	
	ВетеринарноСопроводительныйДокументОбъект.ЕдиницаИзмеренияВЕТИС      = ЕдиницаИзмерения(batch.unit.guid, ПараметрыОбмена);
	ВетеринарноСопроводительныйДокументОбъект.КоличествоВЕТИС            = batch.volume;
	
	ВетеринарноСопроводительныйДокументОбъект.СкоропортящаясяПродукция   = batch.perishable;
	ВетеринарноСопроводительныйДокументОбъект.НизкокачественнаяПродукция = batch.lowGradeCargo;
	
	// Производственные партии
	ВетеринарноСопроводительныйДокументОбъект.ПроизводственныеПартии.Очистить();
	Для Каждого ИдентификаторПартии Из batch.batchID Цикл
		ПроизводственныеПартииСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.ПроизводственныеПартии.Добавить();
		ПроизводственныеПартииСтрокаТЧ.ИдентификаторПартии = ИдентификаторПартии;
	КонецЦикла;
	
	// Производители
	ВетеринарноСопроводительныйДокументОбъект.СтранаПроизводства = Неопределено;
	ВетеринарноСопроводительныйДокументОбъект.Производители.Очистить();
	Если batch.origin <> Неопределено Тогда
		
		Если batch.origin.country <> Неопределено
			И batch.origin.country.guid <> Неопределено Тогда
			ВетеринарноСопроводительныйДокументОбъект.СтранаПроизводства = ИнтеграцияВЕТИСПовтИсп.СтранаМира(batch.origin.country.guid);
		Иначе
			ВетеринарноСопроводительныйДокументОбъект.СтранаПроизводства = Неопределено;
		КонецЕсли;
		
		Для Каждого ПроизводителиЭлементДанных Из batch.origin.producer Цикл
			
			Если ПроизводителиЭлементДанных.enterprise.guid = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПроизводителиСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.Производители.Добавить();
			ПроизводителиСтрокаТЧ.Производитель   = Предприятие(ПроизводителиЭлементДанных.enterprise.guid, ПараметрыОбмена);
			ПроизводителиСтрокаТЧ.РольПредприятия = ИнтеграцияВЕТИСПовтИсп.РольПредприятия(ПроизводителиЭлементДанных.role);
			
		КонецЦикла;
		
		Если batch.origin.productItem <> Неопределено И batch.origin.productItem.guid <> Неопределено Тогда
			ВетеринарноСопроводительныйДокументОбъект.ПродукцияПроизводителя = НаименованиеПродукции(
				batch.origin.productItem.guid, ТипПродукции, Продукция, ВидПродукции, ПараметрыОбмена);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузитьДату(ВетеринарноСопроводительныйДокументОбъект, "ДатаПроизводства", batch.dateOfProduction);
	ЗагрузитьДату(ВетеринарноСопроводительныйДокументОбъект, "СрокГодности",     batch.expiryDate);
	
	ВетеринарноСопроводительныйДокументОбъект.УпаковкиВЕТИС.Очистить();
	ВетеринарноСопроводительныйДокументОбъект.ШтрихкодыУпаковок.Очистить();
	Если batch.packageList <> Неопределено Тогда
		
		Для Каждого УпаковкиЭлементДанных Из batch.packageList.package Цикл
			
			УпаковкиСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.УпаковкиВЕТИС.Добавить();
			УпаковкиСтрокаТЧ.ИдентификаторСтроки     = Строка(Новый УникальныйИдентификатор);
			УпаковкиСтрокаТЧ.УровеньУпаковки         = ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(УпаковкиЭлементДанных.level);
			
			Если УпаковкиЭлементДанных.packingType <> Неопределено Тогда
				УпаковкиСтрокаТЧ.УпаковкаВЕТИС = Упаковка(УпаковкиЭлементДанных.packingType, ПараметрыОбмена);
			КонецЕсли;
			
			УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС = УпаковкиЭлементДанных.quantity;
			
			Для Каждого ШтрихкодыУпаковокЭлементДанных Из УпаковкиЭлементДанных.productMarks Цикл
				
				ШтрихкодыУпаковокСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.ШтрихкодыУпаковок.Добавить();
				ШтрихкодыУпаковокСтрокаТЧ.ИдентификаторСтроки = УпаковкиСтрокаТЧ.ИдентификаторСтроки;
				ШтрихкодыУпаковокСтрокаТЧ.Штрихкод            = ШтрихкодыУпаковокЭлементДанных.__content;
				ШтрихкодыУпаковокСтрокаТЧ.ТипМаркировки       = ПродукцияВЕТИСВызовСервера.ТипМаркировкиУпаковки(ШтрихкодыУпаковокЭлементДанных.class);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВетеринарноСопроводительныйДокументОбъект.ТипПроисхождения = Неопределено;
	
	Если batch.applicableClassifications <> Неопределено Тогда
		ТипПроисхождения  = ПродукцияВЕТИСВызовСервера.ТипПроисхожденияНепищевойПродукции(batch.applicableClassifications.nonFoodSource);
		ВетеринарноСопроводительныйДокументОбъект.ТипПроисхождения = ТипПроисхождения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОТранспортномСредстве(ТипТранспортногоСредства, ЗаполняемыеДанные, Данные)
	
	ЗаполняемыеДанные.ТипТранспорта = ТипТранспортногоСредства;
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипТранспортногоСредства = Перечисления.ТипыТранспортаВЕТИС.Автомобиль Тогда
		
		ЗаполняемыеДанные.НомерТранспортногоСредства    = Данные.vehicleNumber;
		ЗаполняемыеДанные.НомерАвтомобильногоПрицепа    = Данные.trailerNumber;
		ЗаполняемыеДанные.НомерАвтомобильногоКонтейнера = Данные.containerNumber;
		
	ИначеЕсли ТипТранспортногоСредства = Перечисления.ТипыТранспортаВЕТИС.ЖелезнодорожныйВагон Тогда
		
		ЗаполняемыеДанные.НомерТранспортногоСредства = Данные.wagonNumber;
		
	ИначеЕсли ТипТранспортногоСредства = Перечисления.ТипыТранспортаВЕТИС.Авиарейс Тогда
		
		ЗаполняемыеДанные.НомерТранспортногоСредства = Данные.flightNumber;
		
	ИначеЕсли ТипТранспортногоСредства = Перечисления.ТипыТранспортаВЕТИС.МорскойКонтейнер Тогда
		
		ЗаполняемыеДанные.НомерТранспортногоСредства = Данные.shipName;
		
	ИначеЕсли ТипТранспортногоСредства = Перечисления.ТипыТранспортаВЕТИС.МорскойТрюм Тогда
		
		ЗаполняемыеДанные.НомерТранспортногоСредства = Данные.shipName;
		
	ИначеЕсли ТипТранспортногоСредства = Перечисления.ТипыТранспортаВЕТИС.Речной Тогда
		
		ЗаполняемыеДанные.НомерТранспортногоСредства = Данные.shipName;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьВетеринарноСопроводительныйДокумент(ЭлементДанных, ВетеринарноСопроводительныйДокумент, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ВетеринарноСопроводительныйДокумент) Тогда
		ВетеринарноСопроводительныйДокументОбъект = Справочники.ВетеринарноСопроводительныйДокументВЕТИС.СоздатьЭлемент();
		ВетеринарноСопроводительныйДокументОбъект.Заполнить(Неопределено);
		ВетеринарноСопроводительныйДокументОбъект.УстановитьСсылкуНового(
			Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ЭлементДанных.uuid)));
	Иначе
		ВетеринарноСопроводительныйДокументОбъект = ВетеринарноСопроводительныйДокумент.ПолучитьОбъект();
		ВетеринарноСопроводительныйДокументОбъект.Заблокировать();
	КонецЕсли;
	
	ПоследняяДатаИзмененияСтатуса = ПоследняяДатаИзмененияСтатусаВСД(ЭлементДанных);
	
	ВетеринарноСопроводительныйДокументОбъект.Идентификатор = ЭлементДанных.uuid;
	Если ЗначениеЗаполнено(ПоследняяДатаИзмененияСтатуса) Тогда
		ВетеринарноСопроводительныйДокументОбъект.ИдентификаторВерсии = Формат(ПоследняяДатаИзмененияСтатуса, "ДФ='dd.MM.yyyy HH:mm:ss'");
	КонецЕсли;
	ВетеринарноСопроводительныйДокументОбъект.ДатаИзменения = ПоследняяДатаИзмененияСтатуса;
	
	ВетеринарноСопроводительныйДокументОбъект.СерияБланкаСтрогойОтчетности = ЭлементДанных.issueSeries;
	ВетеринарноСопроводительныйДокументОбъект.НомерБланкаСтрогойОтчетности = ЭлементДанных.issueNumber;
	ВетеринарноСопроводительныйДокументОбъект.Дата                         = ЭлементДанных.issueDate;
	
	ВетеринарноСопроводительныйДокументОбъект.Форма  = ИнтеграцияВЕТИСПовтИсп.ФормаВетеринарноСопроводительногоДокумента(ЭлементДанных.vetDForm);
	ВетеринарноСопроводительныйДокументОбъект.Тип    = ИнтеграцияВЕТИСПовтИсп.ТипВетеринарноСопроводительногоДокумента(ЭлементДанных.vetDType);
	ВетеринарноСопроводительныйДокументОбъект.Статус = ИнтеграцияВЕТИСПовтИсп.СтатусВетеринарноСопроводительногоДокумента(ЭлементДанных.vetDStatus);
	ВетеринарноСопроводительныйДокументОбъект.Закрыт = ЭлементДанных.finalized;
	
	ВетеринарноСопроводительныйДокументОбъект.ТипТТН   = Неопределено;
	ВетеринарноСопроводительныйДокументОбъект.СерияТТН = Неопределено;
	ВетеринарноСопроводительныйДокументОбъект.ДатаТТН  = Неопределено;
	ВетеринарноСопроводительныйДокументОбъект.НомерТТН = Неопределено;
	ВетеринарноСопроводительныйДокументОбъект.СвязанныеДокументы.Очистить();
	Если ЭлементДанных.referencedDocument <> Неопределено Тогда
		
		Для Каждого СвязанныеДокументыЭлементДанных Из ЭлементДанных.referencedDocument Цикл
			
			ТипДокумента = ИнтеграцияВЕТИСПовтИсп.ТипДокумента(СвязанныеДокументыЭлементДанных.type);
			
			Если (ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ТТН
				Или ТипДокумента = Перечисления.ТипыДокументовВЕТИС.Конасамент
				Или ТипДокумента = Перечисления.ТипыДокументовВЕТИС.CMR
				Или ТипДокумента = Перечисления.ТипыДокументовВЕТИС.Авианакладная
				Или ТипДокумента = Перечисления.ТипыДокументовВЕТИС.ТранспортнаяНакладная)
				И Не ЗначениеЗаполнено(ВетеринарноСопроводительныйДокументОбъект.ТипТТН) Тогда
				
				ВетеринарноСопроводительныйДокументОбъект.ТипТТН   = ТипДокумента;
				ВетеринарноСопроводительныйДокументОбъект.СерияТТН = СвязанныеДокументыЭлементДанных.issueSeries;
				ВетеринарноСопроводительныйДокументОбъект.ДатаТТН  = СвязанныеДокументыЭлементДанных.issueDate;
				ВетеринарноСопроводительныйДокументОбъект.НомерТТН = СвязанныеДокументыЭлементДанных.issueNumber;
				
			Иначе
				
				СвязанныеДокументыСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.СвязанныеДокументы.Добавить();
				СвязанныеДокументыСтрокаТЧ.ТипДокумента           = ТипДокумента;
				СвязанныеДокументыСтрокаТЧ.Серия                  = СвязанныеДокументыЭлементДанных.issueSeries;
				СвязанныеДокументыСтрокаТЧ.Номер                  = СвязанныеДокументыЭлементДанных.issueNumber;
				СвязанныеДокументыСтрокаТЧ.Дата                   = СвязанныеДокументыЭлементДанных.issueDate;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЭлементДанных.authentication <> Неопределено Тогда
		
		authentication = ЭлементДанных.authentication;
		
		// Только для живых животных
		ВетеринарноСопроводительныйДокументОбъект.ПериодНахожденияЖивотныхНаТерриторииТС             = ИнтеграцияВЕТИСПовтИсп.ПериодНахожденияЖивотныхНаТерриторииТС(authentication.animalSpentPeriod);
		ВетеринарноСопроводительныйДокументОбъект.КоличествоПериодовНахожденияЖивотныхНаТерриторииТС = authentication.monthsSpent;
		
		// Сведения о карантинировании
		Если authentication.quarantine <> Неопределено Тогда
			Если authentication.quarantine.location <> Неопределено Тогда
				ВетеринарноСопроводительныйДокументОбъект.МестоДляКарантинирования = authentication.quarantine.location.name;
			КонецЕсли;
			ВетеринарноСопроводительныйДокументОбъект.КоличествоДнейДляКарантинирования = authentication.quarantine.duration;
		КонецЕсли;
		
		ВетеринарноСопроводительныйДокументОбъект.ЭкспертизаРезультат   = ИнтеграцияВЕТИСПовтИсп.РезультатЛабораторныхИсследований(authentication.cargoExpertized);
		ВетеринарноСопроводительныйДокументОбъект.ЭкспертизаВыполнена   = authentication.cargoInspected;
		ВетеринарноСопроводительныйДокументОбъект.БлагополучиеМестности = authentication.locationProsperity;
		Если authentication.purpose <> Неопределено Тогда
			ВетеринарноСопроводительныйДокументОбъект.Цель = Цель(authentication.purpose.guid, ПараметрыОбмена);
		Иначе
			ВетеринарноСопроводительныйДокументОбъект.Цель = Неопределено;
		КонецЕсли;
		ВетеринарноСопроводительныйДокументОбъект.ОсобыеОтметки = authentication.specialMarks;
		
	КонецЕсли;
	
	Если ЭлементДанных.certifiedBatch <> Неопределено Тогда
		
		certifiedBatch = ЭлементДанных.certifiedBatch;
		
		ВетеринарноСопроводительныйДокументОбъект.ГрузоотправительПредприятие          = Предприятие;
		ВетеринарноСопроводительныйДокументОбъект.ГрузоотправительХозяйствующийСубъект = ХозяйствующийСубъект;
		
		// Сведения о партии
		Если certifiedBatch.batch <> Неопределено Тогда
			
			batch = certifiedBatch.batch;
			
			ЗаполнитьСведенияОПартии(ВетеринарноСопроводительныйДокументОбъект, batch, ПараметрыОбмена);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементДанных.certifiedConsignment <> Неопределено Тогда
		
		certifiedConsignment = ЭлементДанных.certifiedConsignment;
		
		// Сведения о грузоотправителе
		Если certifiedConsignment.consignor.enterprise <> Неопределено
			И certifiedConsignment.consignor.enterprise.guid <> Неопределено Тогда
			
			ПредприятиеСсылка = Предприятие(certifiedConsignment.consignor.enterprise.guid, ПараметрыОбмена);
			
			ПредприятиеGLN = Новый Структура;
			ПредприятиеGLN.Вставить("Предприятие", ПредприятиеСсылка);
			ПредприятиеGLN.Вставить("GLN",         ЭлементДанных.certifiedConsignment.consignor.globalID);
			
			ВетеринарноСопроводительныйДокументОбъект.ГрузоотправительПредприятие = ПредприятиеСсылка;
			
		Иначе
			
			ПредприятиеGLN = Неопределено;
			
		КонецЕсли;
		
		Если certifiedConsignment.consignor.businessEntity <> Неопределено Тогда
			ВетеринарноСопроводительныйДокументОбъект.ГрузоотправительХозяйствующийСубъект = ХозяйствующийСубъект(
				certifiedConsignment.consignor.businessEntity.guid,
				ПредприятиеGLN,
				ПараметрыОбмена);
		КонецЕсли;
		
		// Сведения о грузополучателе
		Если certifiedConsignment.consignee.enterprise <> Неопределено
			И certifiedConsignment.consignee.enterprise.guid <> Неопределено Тогда
			
			ПредприятиеСсылка = Предприятие(certifiedConsignment.consignee.enterprise.guid, ПараметрыОбмена);
			
			ПредприятиеGLN = Новый Структура;
			ПредприятиеGLN.Вставить("Предприятие", ПредприятиеСсылка);
			ПредприятиеGLN.Вставить("GLN",         certifiedConsignment.consignee.globalID);
			
			ВетеринарноСопроводительныйДокументОбъект.ГрузополучательПредприятие = ПредприятиеСсылка;
			
		Иначе
			
			ПредприятиеGLN = Неопределено;
			
		КонецЕсли;
		
		ВетеринарноСопроводительныйДокументОбъект.ГрузополучательХозяйствующийСубъект = ХозяйствующийСубъект(
			certifiedConsignment.consignee.businessEntity.guid,
			ПредприятиеGLN,
			ПараметрыОбмена);
		
		// Сведения о посреднике
		Если certifiedConsignment.broker <> Неопределено Тогда
			ВетеринарноСопроводительныйДокументОбъект.ПеревозчикХозяйствующийСубъект = ХозяйствующийСубъект(
				certifiedConsignment.broker.guid,
				Неопределено,
				ПараметрыОбмена);
		КонецЕсли;
		
		// Сведения о партии
		Если certifiedConsignment.batch <> Неопределено Тогда
			
			batch = certifiedConsignment.batch;
			
			ЗаполнитьСведенияОПартии(ВетеринарноСопроводительныйДокументОбъект, batch, ПараметрыОбмена);
			
		КонецЕсли;
		
		ВетеринарноСопроводительныйДокументОбъект.Маршрут.Очистить();
		Если ЭлементДанных.certifiedConsignment.transportInfo <> Неопределено Тогда
			
			МаршрутСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.Маршрут.Добавить();
			МаршрутСтрокаТЧ.Предприятие = ВетеринарноСопроводительныйДокументОбъект.ГрузоотправительПредприятие;
			МаршрутСтрокаТЧ.СПерегрузкой = Истина;
			ТипТранспортаПеречислением = ПродукцияВЕТИСВызовСервера.ТипТранспорта(ЭлементДанных.certifiedConsignment.transportInfo.transportType);
			
			Если ТипТранспортаПеречислением <> Неопределено Тогда
				ЗаполнитьСведенияОТранспортномСредстве(
					ТипТранспортаПеречислением,
					МаршрутСтрокаТЧ,
					ЭлементДанных.certifiedConsignment.transportInfo.transportNumber);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭлементДанных.certifiedConsignment.shipmentRoute <> Неопределено Тогда
			
			Маршрут = Новый ТаблицаЗначений;
			Маршрут.Колонки.Добавить("Порядок");
			Маршрут.Колонки.Добавить("МаршрутЭлементДанных");
			
			Для Каждого МаршрутЭлементДанных Из ЭлементДанных.certifiedConsignment.shipmentRoute.routePoint Цикл
				
				СтрокаТЧ = Маршрут.Добавить();
				СтрокаТЧ.Порядок              = МаршрутЭлементДанных.sqnId;
				СтрокаТЧ.МаршрутЭлементДанных = МаршрутЭлементДанных;
				
			КонецЦикла;
			
			Маршрут.Сортировать("Порядок ВОЗР");
			
			Для Каждого СтрокаТЧ Из Маршрут Цикл
				
				МаршрутЭлементДанных = СтрокаТЧ.МаршрутЭлементДанных;
				
				МаршрутСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.Маршрут.Добавить();
				МаршрутСтрокаТЧ.Идентификатор = МаршрутЭлементДанных.uuid;
				
				Если МаршрутЭлементДанных.enterprise <> Неопределено
					И МаршрутЭлементДанных.enterprise.guid <> Неопределено Тогда
					МаршрутСтрокаТЧ.Предприятие = Предприятие(МаршрутЭлементДанных.enterprise.guid, ПараметрыОбмена);
				КонецЕсли;
				
				Если МаршрутЭлементДанных.location <> Неопределено Тогда
					
					МаршрутСтрокаТЧ.АдресПредставление = МаршрутЭлементДанных.location.name;
					
					Если МаршрутЭлементДанных.location.address <> Неопределено Тогда
						
						ДанныеАдреса = ДанныеАдреса(МаршрутЭлементДанных.location.address);
						
						МаршрутСтрокаТЧ.ДанныеАдреса = Новый ХранилищеЗначения(ДанныеАдреса);
						
						ИдентификаторАдреса = ИнтеграцияВЕТИСКлиентСервер.ИдентификаторАдресаИзДанныхАдреса(ДанныеАдреса);
						Если ИдентификаторАдреса <> Неопределено Тогда
							МаршрутСтрокаТЧ.Адрес = РаботаСАдресами.АдресПоИдентификатору(
								Новый УникальныйИдентификатор(ИдентификаторАдреса),
								ДанныеАдреса);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если МаршрутЭлементДанных.nextTransport <> Неопределено Тогда
					
					МаршрутСтрокаТЧ.СПерегрузкой = Истина;
					
					ТипТранспортаПеречислением = ПродукцияВЕТИСВызовСервера.ТипТранспорта(МаршрутЭлементДанных.nextTransport.transportType);
					
					Если ТипТранспортаПеречислением <> Неопределено Тогда
						ЗаполнитьСведенияОТранспортномСредстве(
							ТипТранспортаПеречислением,
							МаршрутСтрокаТЧ,
							МаршрутЭлементДанных.nextTransport.transportNumber);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ВетеринарноСопроводительныйДокументОбъект.СпособХранения = ПродукцияВЕТИСВызовСервера.СпособХраненияПриТранспортировке(ЭлементДанных.certifiedConsignment.transportStorageType);
		
	КонецЕсли;
	
	ВетеринарноСопроводительныйДокументОбъект.ИсторияСтатусов.Очистить();
	Для Каждого ИзменениеСтатуса из ЭлементДанных.statusChange Цикл
		
		ИсторияСтатусовСтрокаТЧ = ВетеринарноСопроводительныйДокументОбъект.ИсторияСтатусов.Добавить();
		ИсторияСтатусовСтрокаТЧ.ДатаИзменения           = ИзменениеСтатуса.actualDateTime;
		ИсторияСтатусовСтрокаТЧ.Статус                  = ИнтеграцияВЕТИСПовтИсп.СтатусВетеринарноСопроводительногоДокумента(ИзменениеСтатуса.status);
		
		Если ИзменениеСтатуса.specifiedPerson <> Неопределено Тогда
			Если ИзменениеСтатуса.specifiedPerson.organization <> Неопределено Тогда
				ИсторияСтатусовСтрокаТЧ.НаименованиеОрганизации = ИзменениеСтатуса.specifiedPerson.organization.name;
			КонецЕсли;
			ИсторияСтатусовСтрокаТЧ.ФИО = ИзменениеСтатуса.specifiedPerson.fio;
		КонецЕсли;
		
		ИсторияСтатусовСтрокаТЧ.Комментарий = ИзменениеСтатуса.reason;
		
	КонецЦикла;
	
	ВетеринарноСопроводительныйДокументОбъект.ТребуетсяЗагрузка = Ложь;
	ВетеринарноСопроводительныйДокументОбъект.Записать();
	
	ОбновитьСсылку(ПараметрыОбмена, "ВетеринарноСопроводительныйДокументВЕТИС",
		ЭлементДанных.uuid, ВетеринарноСопроводительныйДокументОбъект.Ссылка);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Объект", ВетеринарноСопроводительныйДокументОбъект);
	ВозвращаемоеЗначение.Вставить("Ссылка", ВетеринарноСопроводительныйДокументОбъект.Ссылка);
	ВозвращаемоеЗначение.Вставить("НомерСтроки");
	Если ЭлементДанных.Свойство("qualifier") Тогда
		Если СтрНайти(ЭлементДанных.qualifier, "id") Тогда
			ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(12, 0));
			ВозвращаемоеЗначение.НомерСтроки =
				ТипЧисло.ПривестиЗначение(Прав(ЭлементДанных.qualifier, СтрДлина(ЭлементДанных.qualifier)-2));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПродукцияПоДаннымЗаписиЖурнала(ЭлементДанных, ПараметрыОбмена)
	
	ВозвращаемоеЗначение = Неопределено;
	
	batch = ЭлементДанных.batch;
	
	ТипПродукции  = ПродукцияВЕТИСВызовСервера.ТипПродукции(batch.productType);
	Продукция     = Продукция(batch.product.guid, ТипПродукции, ПараметрыОбмена);
	ВидПродукции  = ВидПродукции(batch.subProduct.guid, ТипПродукции, Продукция, ПараметрыОбмена);
	
	Если batch.productItem.guid <> Неопределено Тогда
		
		ВозвращаемоеЗначение = НаименованиеПродукции(batch.productItem.guid, ТипПродукции, Продукция, ВидПродукции, ПараметрыОбмена);
		
	Иначе
		
		КодТипаПродукции          = batch.productType;
		ПродукцияИдентификатор    = batch.product.guid;
		ВидПродукцииИдентификатор = batch.subProduct.guid;
		Если batch.productItem.packaging <> Неопределено Тогда
			ФасовкаУпаковкаИдентификатор         = batch.productItem.packaging.packagingType;
			ФасовкаЕдиницаИзмеренияИдентификатор = batch.productItem.packaging.unit.guid;
		Иначе
			ФасовкаУпаковкаИдентификатор         = "";
			ФасовкаЕдиницаИзмеренияИдентификатор = "";
		КонецЕсли;
		
		ВозвращаемоеЗначение = НайтиСоздатьПродукциюСХешем(
			ДанныеНаименованияПродукции(batch.productItem, ТипПродукции, Продукция, ВидПродукции, ПараметрыОбмена),
			КодТипаПродукции, ПродукцияИдентификатор, ВидПродукцииИдентификатор, ФасовкаУпаковкаИдентификатор, ФасовкаЕдиницаИзмеренияИдентификатор);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РегистрироватьСинхронизацию",       Истина);
	ДополнительныеПараметры.Вставить("АктуальнаяЗаписьСкладскогоЖурнала", Неопределено);
	ДополнительныеПараметры.Вставить("ПроверятьАктуальностьЗаписи",       Истина);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция ЗагрузитьЗаписьСкладскогоЖурнала(ЭлементДанных, ЗаписьСкладскогоЖурнала, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
	КонецЕсли;
	
	АрхивнаяЗапись = ЗначениеЗаполнено(ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала);
	
	Если ДополнительныеПараметры.ПроверятьАктуальностьЗаписи
		И Не ЭлементДанных.last Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаписьСкладскогоЖурнала) Тогда
		ЗаписьСкладскогоЖурналаОбъект = Справочники.ЗаписиСкладскогоЖурналаВЕТИС.СоздатьЭлемент();
		ЗаписьСкладскогоЖурналаОбъект.Заполнить(Неопределено);
		Если Не АрхивнаяЗапись Тогда
			ЗаписьСкладскогоЖурналаОбъект.УстановитьСсылкуНового(
				Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПолучитьСсылку(
					Новый УникальныйИдентификатор(ЭлементДанных.guid)));
		КонецЕсли;
	Иначе
		ЗаписьСкладскогоЖурналаОбъект = ЗаписьСкладскогоЖурнала.ПолучитьОбъект();
		ЗаписьСкладскогоЖурналаОбъект.Заблокировать();
	КонецЕсли;
	
	batch = ЭлементДанных.batch;
	
	Если НЕ АрхивнаяЗапись Тогда
		ЗаписьСкладскогоЖурналаОбъект.Идентификатор = ЭлементДанных.guid;
	КонецЕсли;
	
	ЗаписьСкладскогоЖурналаОбъект.ИдентификаторВерсии = ЭлементДанных.uuid;
	ЗаписьСкладскогоЖурналаОбъект.ДатаИзменения       = ЭлементДанных.updateDate;
	ЗаписьСкладскогоЖурналаОбъект.Статус              = ИнтеграцияВЕТИСПовтИсп.СтатусВерсионногоОбъекта(ЭлементДанных.status);
	
	ЗаписьСкладскогоЖурналаОбъект.НомерЗаписи          = ЭлементДанных.entryNumber;
	ЗаписьСкладскогоЖурналаОбъект.ХозяйствующийСубъект = ХозяйствующийСубъект(batch.owner.guid, Неопределено, ПараметрыОбмена);
	ЗаписьСкладскогоЖурналаОбъект.Предприятие          = Предприятие;
	
	ЗаписьСкладскогоЖурналаОбъект.Продукция            = ПродукцияПоДаннымЗаписиЖурнала(ЭлементДанных, ПараметрыОбмена);
	
	ЗаписьСкладскогоЖурналаОбъект.СтранаПроизводства = Неопределено;
	ЗаписьСкладскогоЖурналаОбъект.Производители.Очистить();
	Если batch.origin <> Неопределено Тогда
		
		Если batch.origin.country <> Неопределено
			И batch.origin.country.guid <> Неопределено Тогда
			ЗаписьСкладскогоЖурналаОбъект.СтранаПроизводства = ИнтеграцияВЕТИСПовтИсп.СтранаМира(batch.origin.country.guid);
		Иначе
			ЗаписьСкладскогоЖурналаОбъект.СтранаПроизводства = Неопределено;
		КонецЕсли;
		
		Для Каждого ПроизводителиЭлементДанных Из batch.origin.producer Цикл
			
			Если ПроизводителиЭлементДанных.enterprise.guid = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПроизводителиСтрокаТЧ = ЗаписьСкладскогоЖурналаОбъект.Производители.Добавить();
			ПроизводителиСтрокаТЧ.Производитель   = Предприятие(ПроизводителиЭлементДанных.enterprise.guid, ПараметрыОбмена);
			ПроизводителиСтрокаТЧ.РольПредприятия = ИнтеграцияВЕТИСПовтИсп.РольПредприятия(ПроизводителиЭлементДанных.role);
			
		КонецЦикла;
		
		Если batch.origin.productItem <> Неопределено И batch.origin.productItem.guid <> Неопределено Тогда
			ТипПродукции  = ПродукцияВЕТИСВызовСервера.ТипПродукции(batch.productType);
			Продукция     = Продукция(batch.product.guid, ТипПродукции, ПараметрыОбмена);
			ВидПродукции  = ВидПродукции(batch.subProduct.guid, ТипПродукции, Продукция, ПараметрыОбмена);
			
			ЗаписьСкладскогоЖурналаОбъект.ПродукцияПроизводителя = НаименованиеПродукции(
				batch.productItem.guid, ТипПродукции, Продукция, ВидПродукции, ПараметрыОбмена, batch.origin.productItem.guid);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьСкладскогоЖурналаОбъект.СкоропортящаясяПродукция   = batch.perishable;
	ЗаписьСкладскогоЖурналаОбъект.НизкокачественнаяПродукция = batch.lowGradeCargo;
	
	ЗаписьСкладскогоЖурналаОбъект.ПроизводственныеПартии.Очистить();
	Для Каждого ИдентификаторПартии Из batch.batchID Цикл
		ПроизводственныеПартииСтрокаТЧ = ЗаписьСкладскогоЖурналаОбъект.ПроизводственныеПартии.Добавить();
		ПроизводственныеПартииСтрокаТЧ.ИдентификаторПартии = ИдентификаторПартии;
	КонецЦикла;
	
	ЗагрузитьДату(ЗаписьСкладскогоЖурналаОбъект, "ДатаПроизводства", batch.dateOfProduction);
	ЗагрузитьДату(ЗаписьСкладскогоЖурналаОбъект, "СрокГодности",     batch.expiryDate);
	
	ЗаписьСкладскогоЖурналаОбъект.УпаковкиВЕТИС.Очистить();
	Если batch.packageList <> Неопределено Тогда
		
		Для Каждого УпаковкиЭлементДанных Из batch.packageList.package Цикл
			
			УпаковкиСтрокаТЧ = ЗаписьСкладскогоЖурналаОбъект.УпаковкиВЕТИС.Добавить();
			УпаковкиСтрокаТЧ.ИдентификаторСтроки     = Строка(Новый УникальныйИдентификатор);
			УпаковкиСтрокаТЧ.УровеньУпаковки         = ИнтеграцияВЕТИСПовтИсп.УровеньУпаковки(УпаковкиЭлементДанных.level);
			
			Если УпаковкиЭлементДанных.packingType <> Неопределено Тогда
				УпаковкиСтрокаТЧ.УпаковкаВЕТИС = Упаковка(УпаковкиЭлементДанных.packingType, ПараметрыОбмена);
			КонецЕсли;
			
			УпаковкиСтрокаТЧ.КоличествоУпаковокВЕТИС = УпаковкиЭлементДанных.quantity;
			
			Для Каждого ШтрихкодыУпаковокЭлементДанных Из УпаковкиЭлементДанных.productMarks Цикл
				
				ШтрихкодыУпаковокСтрокаТЧ = ЗаписьСкладскогоЖурналаОбъект.ШтрихкодыУпаковок.Добавить();
				ШтрихкодыУпаковокСтрокаТЧ.ИдентификаторСтроки = УпаковкиСтрокаТЧ.ИдентификаторСтроки;
				ШтрихкодыУпаковокСтрокаТЧ.Штрихкод            = ШтрихкодыУпаковокЭлементДанных.__content;
				ШтрихкодыУпаковокСтрокаТЧ.ТипМаркировки       = ПродукцияВЕТИСВызовСервера.ТипМаркировкиУпаковки(ШтрихкодыУпаковокЭлементДанных.class);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ВСДЭлементДанных Из ЭлементДанных.vetDocument Цикл
		
		ИдентификаторВСД = ВСДЭлементДанных.uuid;
		
		ВетеринарноСопроводительныйДокумент = СсылкаПоИдентификатору(ПараметрыОбмена, "ВетеринарноСопроводительныйДокументВЕТИС", ИдентификаторВСД);
		Если Не ЗначениеЗаполнено(ВетеринарноСопроводительныйДокумент) Тогда
			
			ВетеринарноСопроводительныйДокумент = СоздатьВетеринарноСопроводительныйДокументВЕТИСДляЗагрузки(ИдентификаторВСД);
			
			ОбновитьСсылку(ПараметрыОбмена, "ВетеринарноСопроводительныйДокументВЕТИС", ИдентификаторВСД, ВетеринарноСопроводительныйДокумент);
			
			ЗаявкиВЕТИС.ПодготовитьЗапросВетеринарноСопроводительногоДокументаПоUUID(
				ЗаписьСкладскогоЖурналаОбъект.ХозяйствующийСубъект,
				ЗаписьСкладскогоЖурналаОбъект.Предприятие,
				ИдентификаторВСД,
				ПараметрыОбмена);
			
		КонецЕсли;
		
		Если ЗаписьСкладскогоЖурналаОбъект.ВетеринарноСопроводительныеДокументы.Найти(
				ВетеринарноСопроводительныйДокумент,
				"ВетеринарноСопроводительныйДокумент") = Неопределено Тогда
			
			НоваяСтрока = ЗаписьСкладскогоЖурналаОбъект.ВетеринарноСопроводительныеДокументы.Добавить();
			НоваяСтрока.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокумент;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КоличествоВЕТИС       = batch.volume;
	ЕдиницаИзмеренияВЕТИС = ЕдиницаИзмерения(batch.unit.guid, ПараметрыОбмена);
	
	ЗаписьСкладскогоЖурналаОбъект.ЕдиницаИзмеренияВЕТИС = ЕдиницаИзмеренияВЕТИС;
	ЗаписьСкладскогоЖурналаОбъект.КоличествоВЕТИС       = КоличествоВЕТИС;
	ЗаписьСкладскогоЖурналаОбъект.Наименование          = ЗаписьСкладскогоЖурналаОбъект.НомерЗаписи;
	
	Если АрхивнаяЗапись Тогда
		ЗаписьСкладскогоЖурналаОбъект.АктуальнаяЗаписьСкладскогоЖурнала = ДополнительныеПараметры.АктуальнаяЗаписьСкладскогоЖурнала;
		ЗаписьСкладскогоЖурналаОбъект.Записать();
	Иначе
		ЗаписьСкладскогоЖурналаОбъект.Записать();
		ОбновитьСсылку(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid, ЗаписьСкладскогоЖурналаОбъект.Ссылка);
		
		НаборЗаписей = РегистрыСведений.ОстаткиПродукцииВЕТИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаписьСкладскогоЖурнала.Установить(ЗаписьСкладскогоЖурналаОбъект.Ссылка);
		
		НеАктивныеСтатусы = Новый Массив;
		НеАктивныеСтатусы.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Аннулирован);
		НеАктивныеСтатусы.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Удален);
		НеАктивныеСтатусы.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения);
		НеАктивныеСтатусы.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения);
		НеАктивныеСтатусы.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеРазделения);
		
		Если batch.volume > 0
			И ЭлементДанных.active
			И НеАктивныеСтатусы.Найти(ЗаписьСкладскогоЖурналаОбъект.Статус) = Неопределено Тогда
			
			ЗаписьНабора = НаборЗаписей.Добавить();
			
			ЗаписьНабора.ХозяйствующийСубъект    = ЗаписьСкладскогоЖурналаОбъект.ХозяйствующийСубъект;
			ЗаписьНабора.Предприятие             = ЗаписьСкладскогоЖурналаОбъект.Предприятие;
			ЗаписьНабора.Продукция               = ЗаписьСкладскогоЖурналаОбъект.Продукция;
			ЗаписьНабора.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаОбъект.Ссылка;
			
			ЗаписьНабора.ЕдиницаИзмеренияВЕТИС = ЕдиницаИзмеренияВЕТИС;
			ЗаписьНабора.КоличествоВЕТИС       = КоличествоВЕТИС;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Если ДополнительныеПараметры.РегистрироватьСинхронизацию Тогда
		СинхронизацияОбъектовВЕТИСНаборЗаписей = РегистрыСведений.СинхронизацияОбъектовВЕТИС.СоздатьНаборЗаписей();
		СинхронизацияОбъектовВЕТИСНаборЗаписей.Отбор.Идентификатор.Установить(ЗаписьСкладскогоЖурналаОбъект.Идентификатор);
		СинхронизацияОбъектовВЕТИСНаборЗаписей.Отбор.ИдентификаторВерсии.Установить(ЗаписьСкладскогоЖурналаОбъект.ИдентификаторВерсии);
		СинхронизацияОбъектовВЕТИСНаборЗаписей.Отбор.ТипВЕТИС.Установить(Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала);
		СинхронизацияОбъектовВЕТИСЗаписьНабора = СинхронизацияОбъектовВЕТИСНаборЗаписей.Добавить();
		СинхронизацияОбъектовВЕТИСЗаписьНабора.Идентификатор = ЗаписьСкладскогоЖурналаОбъект.Идентификатор;
		СинхронизацияОбъектовВЕТИСЗаписьНабора.ИдентификаторВерсии = ЗаписьСкладскогоЖурналаОбъект.ИдентификаторВерсии;
		СинхронизацияОбъектовВЕТИСЗаписьНабора.ТипВЕТИС = Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала;
		СинхронизацияОбъектовВЕТИСНаборЗаписей.Записать();
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Объект",                ЗаписьСкладскогоЖурналаОбъект);
	ВозвращаемоеЗначение.Вставить("Ссылка",                ЗаписьСкладскогоЖурналаОбъект.Ссылка);
	ВозвращаемоеЗначение.Вставить("КоличествоВЕТИС",       КоличествоВЕТИС);
	ВозвращаемоеЗначение.Вставить("ЕдиницаИзмеренияВЕТИС", ЕдиницаИзмеренияВЕТИС);
	ВозвращаемоеЗначение.Вставить("Продукция",             ЗаписьСкладскогоЖурналаОбъект.Продукция);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура СвязатьПредприятиеСХозяйствующимСубъектом(Предприятие, ХозяйствующийСубъект, GLN, ТорговыйОбъект, ПроизводственныйОбъект, ИзменениеВыполнено)

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.НомерСтроки КАК НомерСтроки,
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.GLN         КАК GLN
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХозяйствующиеСубъектыВЕТИСПредприятия
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка = &ХозяйствующийСубъект
	|	И ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие = &Предприятие";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.GLN = GLN Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ХозяйствующийСубъектОбъект = ХозяйствующийСубъект.ПолучитьОбъект();
	ХозяйствующийСубъектОбъект.Заблокировать();
	
	НайденнаяСтрока = ХозяйствующийСубъектОбъект.Предприятия.Найти(Предприятие, "Предприятие");
	Если НайденнаяСтрока = Неопределено Тогда
		
		СтрокаПредприятия = ХозяйствующийСубъектОбъект.Предприятия.Добавить();
		
		СтрокаПредприятия.Предприятие = Предприятие;
		СтрокаПредприятия.GLN         = GLN;
		
		СтрокаПредприятия.ТорговыйОбъект         = ТорговыйОбъект;
		СтрокаПредприятия.ПроизводственныйОбъект = ПроизводственныйОбъект;
		
	Иначе
		
		НайденнаяСтрока.GLN = GLN;
		НайденнаяСтрока.ТорговыйОбъект         = ТорговыйОбъект;
		НайденнаяСтрока.ПроизводственныйОбъект = ПроизводственныйОбъект;
		
	КонецЕсли;
	
	ХозяйствующийСубъектОбъект.Записать();
	ИзменениеВыполнено = Истина;
	
КонецПроцедуры

Процедура РазорватьСвязьПредприятияИХозяйствующегоСубъекта(Предприятие, ХозяйствующийСубъект, ИзменениеВыполнено)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие КАК Предприятие
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХозяйствующиеСубъектыВЕТИСПредприятия
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИСПредприятия.Предприятие = &Предприятие
	|	И ХозяйствующиеСубъектыВЕТИСПредприятия.Ссылка = &ХозяйствующийСубъект";
	
	Запрос.УстановитьПараметр("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Запрос.УстановитьПараметр("Предприятие", Предприятие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ХозяйствующийСубъектОбъект = ХозяйствующийСубъект.ПолучитьОбъект();
		
		НайденнаяСтрока = ХозяйствующийСубъектОбъект.Предприятия.Найти(Предприятие, "Предприятие");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			ХозяйствующийСубъектОбъект.Заблокировать();
			ХозяйствующийСубъектОбъект.Предприятия.Удалить(НайденнаяСтрока);
			ХозяйствующийСубъектОбъект.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменениеВыполнено = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискДанных

Функция СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ИмяИдентификатора = "Идентификатор") Экспорт
	
	СправочникСсылка = Неопределено;
	
	Если ПараметрыОбмена <> Неопределено Тогда
		
		НайденныеСсылки = ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки;
		
		Если НайденныеСсылки.Свойство(ИмяТаблицы) Тогда
			СправочникСсылка = НайденныеСсылки[ИмяТаблицы][Идентификатор];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		СправочникСсылка = Справочники[ИмяТаблицы].НайтиПоРеквизиту(ИмяИдентификатора, Идентификатор);
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Процедура ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка)
	
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСсылки = ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки;
	
	Если НЕ НайденныеСсылки.Свойство(ИмяТаблицы) Тогда
		НайденныеСсылки.Вставить(ИмяТаблицы, Новый Соответствие);
	КонецЕсли;
	НайденныеСсылки[ИмяТаблицы].Вставить(Идентификатор, СправочникСсылка);
	
КонецПроцедуры

Процедура ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка)
	
	Если ПараметрыОбмена = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	КОтложеннойЗагрузке = ПараметрыОбмена.КОтложеннойЗагрузке;
	Если Не КОтложеннойЗагрузке.Свойство(ИмяТаблицы) Тогда
		КОтложеннойЗагрузке.Вставить(ИмяТаблицы, Новый Соответствие);
	КонецЕсли;
	КОтложеннойЗагрузке[ИмяТаблицы].Вставить(Идентификатор, СправочникСсылка);
	
КонецПроцедуры

Процедура ЗаполнитьБлокируемыеОбъекты(ИдентификаторыОбъектовКЗагрузке,
                                    ИдентификаторыНайденныхОбъектов,
                                    ИдентификаторыВсехОбъектов) Экспорт
	
	ИдентификаторыОбъектовКЗагрузке.Очистить();
	
	Для каждого ИмяОбъектаМетаданныхИОбъекты Из ИдентификаторыВсехОбъектов Цикл
		
		ИмяТаблицы = ИмяОбъектаМетаданныхИОбъекты.Ключ;
		
		СоответствиеИдентификаторов = ИмяОбъектаМетаданныхИОбъекты.Значение;
		СоответствиеНеПрочитанныхИдентификаторов = Неопределено;
		
		СоответствиеПрочитанныхИдентификаторов   = Неопределено;
		ИдентификаторыНайденныхОбъектов.Свойство(ИмяТаблицы, СоответствиеПрочитанныхИдентификаторов); 
		
		Для каждого ИдентификаторИДанныеОбъекта из СоответствиеИдентификаторов Цикл
			
			Идентификатор = ИдентификаторИДанныеОбъекта.Ключ;
			
			Если СоответствиеПрочитанныхИдентификаторов = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(СоответствиеПрочитанныхИдентификаторов.Получить(Идентификатор)) Тогда
				
				Если СоответствиеНеПрочитанныхИдентификаторов = Неопределено Тогда
					СоответствиеНеПрочитанныхИдентификаторов = Новый Соответствие;
					ИдентификаторыОбъектовКЗагрузке.Вставить(ИмяТаблицы, СоответствиеНеПрочитанныхИдентификаторов);
				КонецЕсли;
				
				ДанныеОбъекта = ИдентификаторИДанныеОбъекта.Значение;
				Если ДанныеОбъекта = Неопределено Тогда
					ДанныеОбъекта = Справочники[ИмяТаблицы].ПустаяСсылка();
				КонецЕсли;
				
				СоответствиеНеПрочитанныхИдентификаторов.Вставить(Идентификатор, ДанныеОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Читает и возвращает ссылки из таблиц БД.
//
// Параметры:
// 	Идентификаторы - Структура - Имя таблицы и соответствий идентификаторов.
// 	 *Ключ         - Строка       - Имя таблицы, как оно задано в конфигураторе, например, "ПродукцияВЕТИС".
// 	 *Значение   - Соответствие - Соответствие читаемых идентификаторов и данных.
// 	  **Ключ     - Строка         - Строка 36 символов. Идентификатор читаемого объекта.
// 	  **Значение - Структура      - Структура данных объекта, полученных соответствующим методом.
// 	                                Например, ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеПредприятия()
// 	             - Неопределено   - Для чтения данных наличие данных объекта может быть не заполнено.
// 	Результат      - Неопределено - Предыдущий результат чтения ссылок
// 	               - Структура    - Структура совпадает со структурой ответа
// 	 *Ключ - Имя таблицы метаданных, например "ПродукцияВЕТИС".
// 	 *Значение - Соответствие прочитанных идентификаторов и ссылок.
// 	  **Ключ   - Строка - Строка 36 символов. Идентификатор читаемого объекта.
// 	  **Значение - Ссылка - Ссылка соответствующего типа данных.
//
// Возвращаемое значение:
// 	Структура - Структура имя таблицы - соответствие идентификаторов.
// 	 *Ключ - Имя таблицы метаданных, например "ПродукцияВЕТИС".
// 	 *Значение - Соответствие прочитанных идентификаторов и ссылок.
// 	  **Ключ   - Строка - Строка 36 символов. Идентификатор читаемого объекта.
// 	  **Значение - Ссылка - Ссылка соответствующего типа данных.
//
Функция СсылкиПоИдентификаторам(Идентификаторы, Результат = Неопределено) Экспорт
	
	ТекстыЗапросов = Новый Массив;
	Разделитель =
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИмяТаблицы",    Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150,ДопустимаяДлина.Переменная)));
	ТаблицаИдентификаторов.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная)));
	
	Для каждого КлючИЗначение Из Идентификаторы Цикл
		
		ИмяТаблицы = КлючИЗначение.Ключ;
		ПолноеИмяТаблицы = "Справочник." + ИмяТаблицы;
		
		Текст =
		"ВЫБРАТЬ
		|	ТаблицаИдентификаторов.ИмяТаблицы КАК ИмяТаблицы,
		|	ТаблицаИдентификаторов.Идентификатор КАК Идентификатор,
		|	МАКСИМУМ(Таблица.Ссылка) КАК Ссылка
		|ИЗ
		|	ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ИмяТаблицы КАК Таблица
		|		ПО ТаблицаИдентификаторов.Идентификатор = Таблица.Идентификатор
		|			И (Таблица.Идентификатор <> """")
		|			И (ТаблицаИдентификаторов.ИмяТаблицы = ""&ИмяТаблицы"")
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаИдентификаторов.ИмяТаблицы,
		|	ТаблицаИдентификаторов.Идентификатор";
		
		Текст = СтрЗаменить(Текст, "#ИмяТаблицы", ПолноеИмяТаблицы);
		Текст = СтрЗаменить(Текст, "&ИмяТаблицы", ИмяТаблицы);
		
		ТекстыЗапросов.Добавить(Текст);
		
		Для каждого ИдентификаторИДанные Из КлючИЗначение.Значение Цикл
			НоваяСтрока = ТаблицаИдентификаторов.Добавить();
			НоваяСтрока.ИмяТаблицы = ИмяТаблицы;
			НоваяСтрока.Идентификатор = ИдентификаторИДанные.Ключ;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.ИмяТаблицы КАК ИмяТаблицы,
	|	ТаблицаИдентификаторов.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор,
	|	ИмяТаблицы";
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|" + СтрСоединить(ТекстыЗапросов, Разделитель) + "
	|
	|ИТОГИ ПО
	|	ИмяТаблицы";
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаИмяТаблицы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ИмяТаблицы");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Пока ВыборкаИмяТаблицы.Следующий() Цикл
		
		Если Результат.Свойство(ВыборкаИмяТаблицы.ИмяТаблицы) Тогда
			СоответствиеИдентификаторовИСсылок = Результат[ВыборкаИмяТаблицы.ИмяТаблицы];
		Иначе
			СоответствиеИдентификаторовИСсылок = Неопределено;
		КонецЕсли;
		
		Если СоответствиеИдентификаторовИСсылок = Неопределено Тогда
			СоответствиеИдентификаторовИСсылок = Новый Соответствие;
			Результат.Вставить(ВыборкаИмяТаблицы.ИмяТаблицы, СоответствиеИдентификаторовИСсылок);
		КонецЕсли;
		
		ВыборкаДетальные = ВыборкаИмяТаблицы.Выбрать();
		Пока ВыборкаДетальные.Следующий() Цикл
			
			СоответствиеИдентификаторовИСсылок.Вставить(ВыборкаДетальные.Идентификатор, ВыборкаДетальные.Ссылка);
			
			Если Идентификаторы.Свойство(ВыборкаИмяТаблицы.ИмяТаблицы) Тогда
				Идентификаторы[ВыборкаИмяТаблицы.ИмяТаблицы][ВыборкаДетальные.Идентификатор] = ВыборкаДетальные.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция - Загрузить продукцию по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ТипПродукции		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - данные реквизита
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ПродукцияВЕТИС, Неопределено - ссылка на заполненный элемент справочника.
//
Функция ЗагрузитьПродукциюПоИдентификатору(Идентификатор, ЗаполняемаяСсылка = Неопределено, ТипПродукции = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ПродукцияВЕТИСВызовСервера.ПродукцияПоGUID(Идентификатор, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		СправочникОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = ЗагрузитьПродукцию(
			РезультатВыполненияЗапроса.Элемент,
			СправочникОбъект,
			ПараметрыОбмена,
			Ложь);
		
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);	
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция - Загрузить вид продукции по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ТипПродукции		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - данные реквизита
//  Продукция			 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - данные реквизита
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ПродукцияВЕТИС, Неопределено - ссылка на заполненный элемент справочника.
//
Функция ЗагрузитьВидПродукцииПоИдентификатору(Идентификатор, ЗаполняемаяСсылка = Неопределено, ТипПродукции = Неопределено, Продукция = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ПродукцияВЕТИСВызовСервера.ВидПродукцииПоGUID(Идентификатор, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		СправочникОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = ЗагрузитьВидПродукции(
			РезультатВыполненияЗапроса.Элемент,
			СправочникОбъект,
			ТипПродукции, 
			Продукция,
			ПараметрыОбмена,
			Ложь);
		
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция - Загрузить наименование продукции по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ТипПродукции		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - данные реквизита
//  Продукция			 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - данные реквизита
//  ВидПродукции		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - данные реквизита
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ПродукцияВЕТИС, Неопределено - ссылка на заполненный элемент справочника.
//
Функция ЗагрузитьНаименованиеПродукцииПоИдентификатору(Идентификатор, Знач ЗаполняемаяСсылка = Неопределено, ТипПродукции = Неопределено, Продукция = Неопределено, ВидПродукции = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ПродукцияВЕТИСВызовСервера.НаименованиеПродукцииПоGUID(Идентификатор, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		СправочникОбъект = Неопределено;
		
		Если Не ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			ЗаполняемаяСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, "ПродукцияВЕТИС", Идентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = ЗагрузитьНаименованиеПродукции(
			ДанныеНаименованияПродукции(
				РезультатВыполненияЗапроса.Элемент,
				ТипПродукции,
				Продукция,
				ВидПродукции,
				ПараметрыОбмена),
			СправочникОбъект,
			ПараметрыОбмена,,
			Ложь);
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция Продукция(Идентификатор, ТипПродукции = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	ИмяТаблицы = "ПродукцияВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьПродукциюПоИдентификатору(
				Идентификатор, Неопределено, ТипПродукции, ПараметрыОбмена);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникСсылка = СоздатьПродукциюВЕТИСДляЗагрузки(Идентификатор, Истина, ТипПродукции,,, ТипПродукции);
			ДобавитьКЗагрузке(ПараметрыОбмена, "ПродукцияВЕТИС_Продукция", Идентификатор, СправочникСсылка);
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ВидПродукции(Идентификатор, ТипПродукции = Неопределено, Продукция = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	ИмяТаблицы = "ПродукцияВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьВидПродукцииПоИдентификатору(
				Идентификатор, Неопределено, ТипПродукции, Продукция, ПараметрыОбмена);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникСсылка = СоздатьПродукциюВЕТИСДляЗагрузки(Идентификатор, Истина, ТипПродукции,, Продукция, Продукция);
			ДобавитьКЗагрузке(ПараметрыОбмена, "ПродукцияВЕТИС_ВидПродукции", Идентификатор, СправочникСсылка);
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция НаименованиеПродукции(Идентификатор, ТипПродукции = Неопределено, Продукция = Неопределено,
	ВидПродукции = Неопределено, ПараметрыОбмена = Неопределено, ИдентификаторПостащика = "") Экспорт
	
	ИмяТаблицы = "ПродукцияВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьНаименованиеПродукцииПоИдентификатору(
				Идентификатор,
				Неопределено,
				ТипПродукции, Продукция, ВидПродукции, ПараметрыОбмена);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) И ЗначениеЗаполнено(Идентификатор) Тогда
			
			СправочникСсылка = СоздатьПродукциюВЕТИСДляЗагрузки(Идентификатор, Ложь, ТипПродукции, ВидПродукции, Продукция, ВидПродукции);
			ДобавитьКЗагрузке(ПараметрыОбмена, "ПродукцияВЕТИС_НаименованиеПродукции", Идентификатор, СправочникСсылка);
			
		ИначеЕсли Не ЗначениеЗаполнено(СправочникСсылка)
			И Не ЗначениеЗаполнено(Идентификатор)
			И Не ПустаяСтрока(ИдентификаторПостащика) Тогда
			
			СправочникСсылка = Справочники.ПродукцияВЕТИС.НайтиПоРеквизиту("Идентификатор", ИдентификаторПостащика);
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ЕдиницаИзмерения(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	ИмяТаблицы = "ЕдиницыИзмеренияВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьЕдиницуИзмеренияПоИдентификатору(Идентификатор);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникСсылка = СоздатьЕдиницуИзмеренияВЕТИСДляЗагрузки(Идентификатор);
			ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция Предприятие(Идентификатор, ПараметрыОбмена = Неопределено)
	
	ИмяТаблицы = "ПредприятияВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьПредприятиеПоИдентификатору(
				Идентификатор, Неопределено, ПараметрыОбмена);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникСсылка = СоздатьПредприятиеВЕТИСДляЗагрузки(Идентификатор);
			ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция возвращает ссылку на справочник продукции ВЕТИС
//   Во входящих параметрах участвуют ключи уникальности продукции
//   Поиск производится по хеш-сумме ключей, при необходимости создается новый элемент
// Параметры:
//  ДанныеПродукции						 - 	 - 
//  КодТипаПродукции					 - 	 - 
//  ПродукцияИдентификатор				 - 	 - 
//  ВидПродукцииИдентификатор			 - 	 - 
//  ФасовкаУпаковкаИдентификатор		 - 	 - 
//  ФасовкаЕдиницаИзмеренияИдентификатор - 	 - 
// 
// Возвращаемое значение:
//   СправочникСсылка.ПродукцияВЕТИС - найденный по хеш-сумме ключей уникальности
//    или созданный элемент справочника "Продукция ВЕТИС"
//
Функция НайтиСоздатьПродукциюСХешем(ДанныеПродукции, КодТипаПродукции, ПродукцияИдентификатор, ВидПродукцииИдентификатор, ФасовкаУпаковкаИдентификатор, ФасовкаЕдиницаИзмеренияИдентификатор) Экспорт
	
	ХешированиеДанныхОбъект = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("1:%1",  ЗначениеДляРасчетаХэша(КодТипаПродукции)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("2:%1",  ЗначениеДляРасчетаХэша(ПродукцияИдентификатор)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("3:%1",  ЗначениеДляРасчетаХэша(ВидПродукцииИдентификатор)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("4:%1",  ЗначениеДляРасчетаХэша(ЗначениеДляРасчетаХэша(Лев(ДанныеПродукции.Наименование,150)))));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("5:%1",  ЗначениеДляРасчетаХэша(ДанныеПродукции.GTIN)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("6:%1",  ЗначениеДляРасчетаХэша(ДанныеПродукции.Артикул)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("7:%1",  ЗначениеДляРасчетаХэша(ФасовкаУпаковкаИдентификатор)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("8:%1",  ЗначениеДляРасчетаХэша(ФасовкаЕдиницаИзмеренияИдентификатор)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("9:%1",  ЗначениеДляРасчетаХэша(ДанныеПродукции.ФасовкаКоличествоУпаковок)));
	ХешированиеДанныхОбъект.Добавить(СтрШаблон("10:%1", ЗначениеДляРасчетаХэша(ДанныеПродукции.ФасовкаКоличествоЕдиницВУпаковке)));
	
	ДанныеПродукции.ХешСумма = Base64Строка(ХешированиеДанныхОбъект.ХешСумма);
	ДанныеПродукции.Производители.Очистить();
	
	СправочникСсылка = Справочники.ПродукцияВЕТИС.НайтиПоРеквизиту("ХешСумма", ДанныеПродукции.ХешСумма);
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		СправочникСсылка = ЗагрузитьНаименованиеПродукции(
			ДанныеПродукции,,,, Ложь);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция - Загрузить единицу измерения по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ЕдиницыИзмеренияВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмеренияВЕТИС, Неопределено - ссылка на заполненный элемент справочника.
//
Функция ЗагрузитьЕдиницуИзмеренияПоИдентификатору(Идентификатор, ЗаполняемаяСсылка = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ПрочиеКлассификаторыВЕТИСВызовСервера.ЕдиницаИзмеренияПоGUID(Идентификатор, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		СправочникОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = ЗагрузитьЕдиницуИзмерения(
			РезультатВыполненияЗапроса.Элемент,
			СправочникОбъект,
			ПараметрыОбмена,
			Ложь);
		
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);	
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция - Загрузить предприятие по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ПредприятияВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ПредприятияВЕТИС, Неопределено - ссылка на заполненный элемент справочника.
//
Функция ЗагрузитьПредприятиеПоИдентификатору(Идентификатор, ЗаполняемаяСсылка = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ЦерберВЕТИСВызовСервера.ПредприятиеПоGUID(Идентификатор,,, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		СправочникОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = ЗагрузитьПредприятие(
			ДанныеПредприятия(РезультатВыполненияЗапроса.Элемент, ПараметрыОбмена),
			СправочникОбъект,
			ПараметрыОбмена,
			Ложь);
		
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция - Загрузить хозяйствующий субъект по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ПредприятиеGLN		 - Неопределено, Структура, ТаблицаЗначений - связанные с ХС предприятия, см. ТаблицаПредприятийGLN().
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ХозяйствующиеСубъектыВЕТИС, Неопределено - ссылка на заполненный элемент справочника.
//
Функция ЗагрузитьХозяйствующийСубъектПоИдентификатору(Идентификатор, ЗаполняемаяСсылка = Неопределено, ПредприятиеGLN = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ЦерберВЕТИСВызовСервера.ХозяйствующийСубъектПоGUID(Идентификатор,,, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		СправочникОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = ЗагрузитьХозяйствующийСубъект(
			ДанныеХозяйствующегоСубъекта(РезультатВыполненияЗапроса.Элемент),
			СправочникОбъект,
			ПредприятиеGLN,
			ПараметрыОбмена,
			Ложь);
		
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ХозяйствующийСубъект(Идентификатор, ПредприятиеGLN = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	ИмяТаблицы = "ХозяйствующиеСубъектыВЕТИС";
	
	СправочникСсылка = Неопределено;
	ВыбраннаяСсылка = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозяйствующиеСубъектыВЕТИС.Ссылка            КАК Ссылка,
	|	ХозяйствующиеСубъектыВЕТИС.Предприятия       КАК Предприятия,
	|	ХозяйствующиеСубъектыВЕТИС.ТребуетсяЗагрузка КАК ТребуетсяЗагрузка
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК ХозяйствующиеСубъектыВЕТИС
	|ГДЕ
	|	ХозяйствующиеСубъектыВЕТИС.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		НужноЗагружать   = Выборка.ТребуетсяЗагрузка;
		СправочникСсылка = Выборка.Ссылка;
		ВыбраннаяСсылка  = Выборка.Ссылка;
		
		Если Не Выборка.ТребуетсяЗагрузка
			И ПредприятиеGLN <> Неопределено Тогда
			
			Предприятия = Выборка.Предприятия.Выгрузить();
			
			СтрокаТЧ = Предприятия.Найти(ПредприятиеGLN.Предприятие, "Предприятие");
			Если СтрокаТЧ = Неопределено Тогда
				НужноЗагружать = Истина;
			Иначе
				Если ТипЗнч(ПредприятиеGLN.GLN) = Тип("Строка") Тогда
					Если ПредприятиеGLN.GLN <> Неопределено Тогда
						СтрокаТЧ = Предприятия.Найти(ПредприятиеGLN.GLN, "GLN");
						Если СтрокаТЧ = Неопределено Тогда
							НужноЗагружать = Истина;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ПредприятиеGLN.GLN) = Тип("Массив") Тогда
					Если ПредприятиеGLN.GLN.Количество() > 0 Тогда
						Для Каждого GLN Из ПредприятиеGLN.GLN Цикл
							СтрокаТЧ = Предприятия.Найти(GLN, "GLN");
							Если СтрокаТЧ = Неопределено Тогда
								НужноЗагружать = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		НужноЗагружать = Истина;
	КонецЕсли;
	
	Если НужноЗагружать Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьХозяйствующийСубъектПоИдентификатору(
				Идентификатор, СправочникСсылка, ПредприятиеGLN, ПараметрыОбмена);
			Если ЗначениеЗаполнено(СправочникСсылка) Тогда
				ВыбраннаяСсылка = СправочникСсылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВыбраннаяСсылка) Тогда
			
			ВыбраннаяСсылка = СоздатьХозяйствующийСубъектВЕТИСДляЗагрузки(Идентификатор, ПредприятиеGLN);
			ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВыбраннаяСсылка);
			
		ИначеЕсли Не ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникОбъект = ВыбраннаяСсылка.ПолучитьОбъект();
			СправочникОбъект.Заблокировать();
			ОбновитьСписокПредприятийХозяйствующегоСубъекта(СправочникОбъект, ПредприятиеGLN);
			СправочникОбъект.Записать();
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВыбраннаяСсылка);
		
	КонецЕсли;
	
	Возврат ВыбраннаяСсылка;
	
КонецФункции

Функция Упаковка(ЭлементДанных, ПараметрыОбмена = Неопределено) Экспорт
	
	ИмяТаблицы = "УпаковкиВЕТИС";
	
	КлассификаторУпаковок    = Неопределено;
	КлассификаторУпаковок1_4 = Неопределено;
	
	Если ЗначениеЗаполнено(ЭлементДанных.globalID) Тогда
		СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, ЭлементДанных.globalID, "КодЕЭК");
	ИначеЕсли ЗначениеЗаполнено(ЭлементДанных.guid) Тогда
		
		СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, ЭлементДанных.guid);
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			КлассификаторУпаковок    = ИнтеграцияВЕТИСПовтИсп.Упаковки();
			КлассификаторУпаковок1_4 = ИнтеграцияВЕТИСПовтИсп.Упаковки1_4();
			
			ДанныеКлассификатора1_4 = КлассификаторУпаковок1_4.Найти(ЭлементДанных.guid, "Идентификатор");
			Если ДанныеКлассификатора1_4 <> Неопределено Тогда
				ДанныеКлассификатора = КлассификаторУпаковок.Найти(ДанныеКлассификатора1_4.Код, "Код");
				Если ДанныеКлассификатора <> Неопределено Тогда
					СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, ДанныеКлассификатора.Код, "КодЕЭК");
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
				СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, "XX", "КодЕЭК");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, "XX", "КодЕЭК");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		Если КлассификаторУпаковок = Неопределено Тогда
			КлассификаторУпаковок = ИнтеграцияВЕТИСПовтИсп.Упаковки();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементДанных.globalID) Тогда
			ДанныеКлассификатора = КлассификаторУпаковок.Найти(ЭлементДанных.globalID, "Код");
		ИначеЕсли ЗначениеЗаполнено(ЭлементДанных.guid) Тогда
			ДанныеКлассификатора = КлассификаторУпаковок.Найти(ЭлементДанных.guid, "Идентификатор");
		Иначе
			ДанныеКлассификатора = КлассификаторУпаковок.Найти("XX", "Код");
		КонецЕсли;
		
		Если ДанныеКлассификатора = Неопределено
			И ЗначениеЗаполнено(ЭлементДанных.guid) Тогда
			
			Если КлассификаторУпаковок1_4 = Неопределено Тогда
				КлассификаторУпаковок1_4 = ИнтеграцияВЕТИСПовтИсп.Упаковки1_4();
			КонецЕсли;
			
			ДанныеКлассификатора1_4 = КлассификаторУпаковок1_4.Найти(ЭлементДанных.guid, "Идентификатор");
			Если ДанныеКлассификатора1_4 <> Неопределено Тогда
				ДанныеКлассификатора = КлассификаторУпаковок.Найти(ДанныеКлассификатора1_4.Код, "Код");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеКлассификатора = Неопределено Тогда
			ДанныеКлассификатора = КлассификаторУпаковок.Найти("XX", "Код");
		КонецЕсли;
		
		СправочникОбъект = Справочники.УпаковкиВЕТИС.СоздатьЭлемент();
		СправочникОбъект.Заполнить(Неопределено);
		СправочникОбъект.УстановитьСсылкуНового(Справочники.УпаковкиВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеКлассификатора.Идентификатор)));
		СправочникОбъект.Идентификатор = ДанныеКлассификатора.Идентификатор;
		СправочникОбъект.КодЕЭК        = ДанныеКлассификатора.Код;
		СправочникОбъект.Наименование  = ДанныеКлассификатора.Наименование;
		СправочникОбъект.Записать();
		СправочникСсылка = СправочникОбъект.Ссылка;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, ДанныеКлассификатора.Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция - Загрузить цель по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ЦелиВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ЦелиВЕТИС, Неопределено - ссылка на заполненный элемент справочника.
//
Функция ЗагрузитьЦельПоИдентификатору(Идентификатор, ЗаполняемаяСсылка = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ПрочиеКлассификаторыВЕТИСВызовСервера.ЦельПоGUID(Идентификатор, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		СправочникОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = ЗагрузитьЦель(
			РезультатВыполненияЗапроса.Элемент,
			СправочникОбъект,
			ПараметрыОбмена,
			Ложь);
		
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);	
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция Цель(Идентификатор, ПараметрыОбмена = Неопределено) Экспорт
	
	ИмяТаблицы = "ЦелиВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьЦельПоИдентификатору(Идентификатор);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникСсылка = СоздатьЦельВЕТИСДляЗагрузки(Идентификатор);
			ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

// Функция - Загрузить заболевание по идентификатору
//
// Параметры:
//  Идентификатор		 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЗаполняемаяСсылка	 - СправочникСсылка.ЗаболеванияВЕТИС, Неопределено - ссылка на заполняемый элемент справочника.
//  ПараметрыОбмена		 - Структура, Неопределено - см. функцию ПараметрыОбмена().
// 
// Возвращаемое значение:
//  СправочникСсылка.ЗаболеванияВЕТИС, Неопределено - ссылка на заполненный элемент справочника
//
Функция ЗагрузитьЗаболеваниеПоИдентификатору(Идентификатор, ЗаполняемаяСсылка = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СправочникСсылка = Неопределено;
	
	РезультатВыполненияЗапроса = ПрочиеКлассификаторыВЕТИСВызовСервера.ЗаболеваниеПоGUID(Идентификатор, ПараметрыОбмена);
	
	Если РезультатВыполненияЗапроса.Элемент <> Неопределено Тогда
		
		ДанныеЗаболевания = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныеЗаболевания();
		ДанныеЗаболевания.Идентификатор       = РезультатВыполненияЗапроса.Элемент.guid;
		ДанныеЗаболевания.ИдентификаторВерсии = РезультатВыполненияЗапроса.Элемент.uuid;
		ДанныеЗаболевания.Наименование        = РезультатВыполненияЗапроса.Элемент.name;
		ДанныеЗаболевания.Активность          = РезультатВыполненияЗапроса.Элемент.active;
		ДанныеЗаболевания.Актуальность        = РезультатВыполненияЗапроса.Элемент.last;
		ДанныеЗаболевания.Статус              = РезультатВыполненияЗапроса.Элемент.status;
		ДанныеЗаболевания.ДатаСоздания        = РезультатВыполненияЗапроса.Элемент.createDate;
		ДанныеЗаболевания.ДатаИзменения       = РезультатВыполненияЗапроса.Элемент.updateDate;
		
		СправочникОбъект = Неопределено;
		
		Если ЗначениеЗаполнено(ЗаполняемаяСсылка) Тогда
			СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		СправочникСсылка = Справочники.ЗаболеванияВЕТИС.ЗагрузитьЗаболевание(ДанныеЗаболевания, СправочникОбъект, Ложь);
		
	Иначе
		СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса);	
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция Заболевание(Идентификатор, ПараметрыОбмена = Неопределено, Наименование = "") Экспорт
	
	ИмяТаблицы = "ЗаболеванияВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ЗагружатьПоСсылкамИзСервиса = Истина;
		Если ПараметрыОбмена <> Неопределено Тогда
			ЗагружатьПоСсылкамИзСервиса = ПараметрыОбмена.ЗагружатьПоСсылкамИзСервиса;
		КонецЕсли;
		
		Если ЗагружатьПоСсылкамИзСервиса Тогда
			
			СправочникСсылка = ЗагрузитьЗаболеваниеПоИдентификатору(Идентификатор);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникСсылка = СоздатьЗаболеваниеВЕТИСДляЗагрузки(Идентификатор, Наименование);
			ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
			
		КонецЕсли;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция УсловиеРегионализации(Идентификатор, ПараметрыОбмена, НаименованиеПолное, Обязательность, Заболевания, ОбновитьЗапись = Ложь) Экспорт
	
	ИмяТаблицы = "УсловияРегионализацииВЕТИС";
	
	СправочникСсылка = СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	ЗаписьОбъекта = Не ЗначениеЗаполнено(СправочникСсылка) ИЛИ ОбновитьЗапись;
	Если ЗаписьОбъекта Тогда
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			СправочникОбъект = Справочники.УсловияРегионализацииВЕТИС.СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			СправочникОбъект.УстановитьСсылкуНового(Справочники.УсловияРегионализацииВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			СправочникОбъект.Заблокировать();
		КонецЕсли;
		
		СправочникОбъект.Идентификатор      = Идентификатор;
		СправочникОбъект.НаименованиеПолное = НаименованиеПолное;
		Если Обязательность = Неопределено Тогда
			СправочникОбъект.Обязательность = Истина;
		Иначе
			СправочникОбъект.Обязательность = Обязательность;
		КонецЕсли;
		
		Для каждого Заболевание Из Заболевания Цикл
			НоваяСтрока = СправочникОбъект.Заболевания.Добавить();
			НоваяСтрока.Заболевание = Заболевание;
		КонецЦикла;
		
		СправочникОбъект.Записать();
		СправочникСсылка = СправочникОбъект.Ссылка;
		
		ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Процедура ЗаполнитьОбъектыКЗагрузке(ИдентификаторыОбъектовКЗагрузке,
                                    ИдентификаторыНайденныхОбъектов,
                                    ИдентификаторыВсехОбъектов) Экспорт
	
	ИдентификаторыОбъектовКЗагрузке.Очистить();
	
	Для каждого ИмяОбъектаМетаданныхИОбъекты Из ИдентификаторыВсехОбъектов Цикл
		
		ИмяТаблицы = ИмяОбъектаМетаданныхИОбъекты.Ключ;
		
		СоответствиеИдентификаторов = ИмяОбъектаМетаданныхИОбъекты.Значение;
		СоответствиеНеПрочитанныхИдентификаторов = Неопределено;
		
		СоответствиеПрочитанныхИдентификаторов   = Неопределено;
		ИдентификаторыНайденныхОбъектов.Свойство(ИмяТаблицы, СоответствиеПрочитанныхИдентификаторов); 
		
		Для каждого ИдентификаторИДанныеОбъекта из СоответствиеИдентификаторов Цикл
			
			Идентификатор = ИдентификаторИДанныеОбъекта.Ключ;
			
			Если СоответствиеПрочитанныхИдентификаторов = Неопределено
				ИЛИ НЕ ЗначениеЗаполнено(СоответствиеПрочитанныхИдентификаторов.Получить(Идентификатор)) Тогда
				
				Если СоответствиеНеПрочитанныхИдентификаторов = Неопределено Тогда
					СоответствиеНеПрочитанныхИдентификаторов = Новый Соответствие;
					ИдентификаторыОбъектовКЗагрузке.Вставить(ИмяТаблицы, СоответствиеНеПрочитанныхИдентификаторов);
				КонецЕсли;
				
				ДанныеОбъекта = ИдентификаторИДанныеОбъекта.Значение;
				Если ДанныеОбъекта = Неопределено Тогда
					ДанныеОбъекта = Справочники[ИмяТаблицы].ПустаяСсылка();
				КонецЕсли;
				
				СоответствиеНеПрочитанныхИдентификаторов.Вставить(Идентификатор, ДанныеОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АрхивнаяЗаписьСкладскогоЖурнала(АктуальнаяЗаписьСкладскогоЖурнала, ИдентификаторВерсии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаписиСкладскогоЖурналаВЕТИС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурналаВЕТИС
	               |ГДЕ
	               |	ЗаписиСкладскогоЖурналаВЕТИС.АктуальнаяЗаписьСкладскогоЖурнала = &АктуальнаяЗаписьСкладскогоЖурнала
	               |	И ЗаписиСкладскогоЖурналаВЕТИС.ИдентификаторВерсии = &ИдентификаторВерсии";
	
	Запрос.УстановитьПараметр("АктуальнаяЗаписьСкладскогоЖурнала", АктуальнаяЗаписьСкладскогоЖурнала);
	Запрос.УстановитьПараметр("ИдентификаторВерсии", ИдентификаторВерсии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция ТекстОшибкиОбработкиРезультата(ДанныеДокумента, ХозяйствующийСубъект = Неопределено, Предприятие = Неопределено, ВыводитьЗаголовок = Ложь) Экспорт
	
	Ошибки = Новый Массив;
	Если ДанныеДокумента.Ошибки <> Неопределено Тогда
		
		Если ВыводитьЗаголовок Тогда
			
			ПредставлениеХС          = НСтр("ru = '<не указан>'");
			ПредставлениеПредприятия = НСтр("ru = '<не указано>'");
			Если ЗначениеЗаполнено(ХозяйствующийСубъект) Тогда
				
				ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ХозяйствующийСубъект, "Наименование, Идентификатор");
				ПредставлениеХС = СтрШаблон(
					"%1(%2)",
					ЗначенияРеквизитов.Наименование,
					ЗначенияРеквизитов.Идентификатор);
				Если ЗначениеЗаполнено(Предприятие) Тогда
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Предприятие, "Наименование, Идентификатор");
					ПредставлениеПредприятия = СтрШаблон(
						"%1(%2)",
						ЗначенияРеквизитов.Наименование,
						ЗначенияРеквизитов.Идентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
			Ошибки.Добавить(
				СтрШаблон(
					НСтр("ru = 'Получен ""%1"" (id=%2)
					           |Хозяйствующий субъект: %3
					           |Предприятие: %4
					           |%5 по причине:'"),
					ДанныеДокумента.ВходящаяОперация,
					ДанныеДокумента.ИдентификаторЗаявки,
					ПредставлениеХС,
					ПредставлениеПредприятия,
					ДанныеДокумента.СтатусОбработки));
			
		КонецЕсли;
		
		Для Каждого Ошибка Из ДанныеДокумента.Ошибки Цикл
			Ошибки.Добавить(СтрШаблон(НСтр("ru = '%1: %2'"), Ошибка.Код, Ошибка.ТекстОшибки));
		КонецЦикла;
		
		Ошибки.Добавить(НСтр("ru = 'Текст XML см. в протоколе обмена.'"));
		
	КонецЕсли;
	
	Возврат СтрСоединить(Ошибки, Символы.ПС);
	
КонецФункции

Функция ИзмененныеОбъекты(ИзмененныеОбъекты) Экспорт
	
	Если ИзмененныеОбъекты = Неопределено Тогда
		Объект = Неопределено;
	ИначеЕсли ИзмененныеОбъекты.Количество() = 0 Тогда
		Объект = Неопределено;
	ИначеЕсли ИзмененныеОбъекты.Количество() = 1 Тогда
		Объект = ИзмененныеОбъекты[0];
	Иначе
		Объект = ИзмененныеОбъекты;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

Функция ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Исходящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.ИсходящаяОперация);
	Реквизиты.Вставить("Документ",             ДанныеДокумента.Документ);
	Реквизиты.Вставить("СообщениеОснование",   Неопределено);
	Реквизиты.Вставить("Описание",             "");
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗаявки);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Реквизиты.Вставить("Предприятие",          Предприятие);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийВЕТИС.КПередаче);
	
	РезультатДобавленияЗаписиИсходящееСообщение = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ИсходящееСообщениеXML,
		Реквизиты);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.ВходящаяОперация);
	Реквизиты.Вставить("Документ",             ДанныеДокумента.Документ);
	Реквизиты.Вставить("СообщениеОснование",   РезультатДобавленияЗаписиИсходящееСообщение.Ссылка);
	Реквизиты.Вставить("Описание",             ТекстОшибкиОбработкиРезультата(ДанныеДокумента));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗаявки);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
	Реквизиты.Вставить("Предприятие",          Предприятие);
	Реквизиты.Вставить("СтатусОбработки",      ДанныеДокумента.СтатусОбработки);
	
	РезультатДобавленияЗаписиВходящееСообщение = ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ВходящееСообщениеXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", РезультатДобавленияЗаписиИсходящееСообщение);
	ВозвращаемоеЗначение.Вставить("ВходящееСообщение",  РезультатДобавленияЗаписиВходящееСообщение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат операции регистрации или изменения данных хозяйствующего субъекта.
//
Функция ОбработатьРезультатРегистрацииИзмененияХозяйствующегоСубъекта(ДанныеДокумента, ХозяйствующийСубъект, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Неопределено, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.businessEntity Цикл
				
				Если Не ЭлементДанных.last Тогда
					Продолжить;
				КонецЕсли;
				
				Контрагент = Неопределено;
				
				Если ДанныеДокумента.Свойство("ПараметрыЗапроса")
					И ТипЗнч(ДанныеДокумента.ПараметрыЗапроса) = Тип("ХранилищеЗначения") Тогда
					
					ПараметрыЗапроса = ДанныеДокумента.ПараметрыЗапроса.Получить();
					Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
						
						Если ПараметрыЗапроса.ДополнительныеПараметры.Свойство("Контрагент") Тогда
							Контрагент = ПараметрыЗапроса.ДополнительныеПараметры.Контрагент;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ДанныеХозяйствующегоСубъекта = ДанныеХозяйствующегоСубъекта(ЭлементДанных);
				ДанныеХозяйствующегоСубъекта.Вставить("Контрагент", Контрагент);
				
				ИзмененныеОбъекты.Добавить(
					ЗагрузитьХозяйствующийСубъект(
						ДанныеХозяйствующегоСубъекта,,,
						ПараметрыОбмена));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Неопределено;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Неопределено,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат операции регистрации или изменения данных предприятия.
//
Функция ОбработатьРезультатРегистрацииИзмененияПредприятия(ДанныеДокумента, ХозяйствующийСубъект, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Неопределено, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.enterprise Цикл
				
				Если Не ЭлементДанных.last Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПредприятия = ДанныеПредприятия(ЭлементДанных, ПараметрыОбмена, Истина);
				Предприятие = ЗагрузитьПредприятие(ДанныеПредприятия, Неопределено, ПараметрыОбмена);
				
				Если ДанныеПредприятия.СобственникПредприятия = ХозяйствующийСубъект Тогда
					
					ТорговыйОбъект = Неопределено;
					ПроизводственныйОбъект = Неопределено;
					
					Если ДанныеДокумента.Свойство("ПараметрыЗапроса")
						И ТипЗнч(ДанныеДокумента.ПараметрыЗапроса) = Тип("ХранилищеЗначения") Тогда
						
						ПараметрыЗапроса = ДанныеДокумента.ПараметрыЗапроса.Получить();
						Если ТипЗнч(ПараметрыЗапроса) = Тип("Структура") Тогда
							
							Если ПараметрыЗапроса.ДополнительныеПараметры.Свойство("ТорговыйОбъект") Тогда
								
								ТорговыйОбъект = ПараметрыЗапроса.ДополнительныеПараметры.ТорговыйОбъект;
								
							КонецЕсли;
							
							Если ПараметрыЗапроса.ДополнительныеПараметры.Свойство("ПроизводственныйОбъект") Тогда
								
								ПроизводственныйОбъект = ПараметрыЗапроса.ДополнительныеПараметры.ПроизводственныйОбъект;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ИзменениеВыполнено = Ложь;
					СвязатьПредприятиеСХозяйствующимСубъектом(Предприятие, ХозяйствующийСубъект, "", ТорговыйОбъект, ПроизводственныйОбъект, ИзменениеВыполнено);
					
					Если ИзменениеВыполнено Тогда
						ИзмененныеОбъекты.Добавить(ХозяйствующийСубъект);
					КонецЕсли;
					
				КонецЕсли;
				
				ИзмененныеОбъекты.Добавить(Предприятие);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Если ИзмененныеОбъекты.Количество() > 0 Тогда
		ВозвращаемоеЗначение.ОбъектИзменен = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат операции регистрации или изменения данных продукции.
//
Функция ОбработатьРезультатРегистрацииИзмененияПродукции(ДанныеДокумента, ХозяйствующийСубъект, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Неопределено, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.productItemList.productItem Цикл
				
				Если Не ЭлементДанных.last Тогда
					Продолжить;
				КонецЕсли;
				
				ИзмененныеОбъекты.Добавить(
					ЗагрузитьНаименованиеПродукции(
						ДанныеНаименованияПродукции(
							ЭлементДанных,,,,ПараметрыОбмена),,
						ПараметрыОбмена));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Неопределено;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Неопределено,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат операции регистрации или изменения данных продукции.
//
Функция ОбработатьРезультатСозданияИзмененияСвязиСПлощадкой(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ИдентификаторПредприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предприятие, "Идентификатор");
			
			GLN = "";
			
			ПредприятиеНайдено = Ложь;
			
			Для каждого activityLocation Из ДанныеДокумента.Объект.businessEntity.activityLocation Цикл
				Если activityLocation.enterprise.guid = ИдентификаторПредприятия Тогда
					
					Если activityLocation.globalID.Количество() > 0 Тогда
						GLN = activityLocation.globalID[0];
					Иначе
						GLN = "";
					КонецЕсли;
					
					ПредприятиеНайдено = Истина;
					
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
			ИзменениеВыполнено = Ложь;
			
			Если ПредприятиеНайдено Тогда
				СвязатьПредприятиеСХозяйствующимСубъектом(Предприятие, ХозяйствующийСубъект, GLN, Неопределено, Неопределено, ИзменениеВыполнено);
			Иначе
				РазорватьСвязьПредприятияИХозяйствующегоСубъекта(Предприятие, ХозяйствующийСубъект, ИзменениеВыполнено);
			КонецЕсли;
			
			Если ИзменениеВыполнено Тогда
				ИзмененныеОбъекты.Добавить(ХозяйствующийСубъект);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Если ИзмененныеОбъекты.Количество() > 0 Тогда
		ВозвращаемоеЗначение.ОбъектИзменен = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат операции запроса измененных ВСД.
//
Функция ОбработатьРезультатЗапросаИзмененныхВСД(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения                 = Новый Массив;
	ИзмененныеОбъекты         = Новый Массив;
	ЕстьДанныеКОбработке      = Ложь;
	РазмерПорции              = ПараметрыОбмена.РазмерПорции;
	ЭтоПопыткаВосстановления  = Ложь;
	ДокументДляВосстановления = Неопределено;
	ИзмененаДатаСинхронизации = Ложь;
	
	Если ДанныеДокумента.Объект <> Неопределено Тогда
		
		ПараметрыСписка = ДанныеДокумента.Объект.vetDocumentList;
		Список = ПараметрыСписка.vetDocument;
		
		ПараметрыЗапроса = Неопределено;
		Если ДанныеДокумента.ПараметрыЗапроса <> Неопределено Тогда
			Значение = ДанныеДокумента.ПараметрыЗапроса.Получить();
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				ПараметрыЗапроса = Значение;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЗапроса.Свойство("ПопыткаВосстановления")
			И ПараметрыЗапроса.ПопыткаВосстановления Тогда
			ЭтоПопыткаВосстановления  = Истина;
			ДокументДляВосстановления = ПараметрыЗапроса.Документ;
		КонецЕсли;
		
		Если Список.Количество() > 0 Тогда
			
			ЕстьДанныеКОбработке   = Истина;
			ДатаСинхронизации      = Дата(1,1,1);
			Смещение               = 0;
			Индекс                 = -1;
			ТаблицаИдентификаторов = НоваяТаблицаДляСравненияИдентификаторов();
			
			Для Каждого ЭлементДанных Из Список Цикл
				
				Индекс = Индекс + 1;
				
				ПоследняяДатаИзмененияСтатуса = ПоследняяДатаИзмененияСтатусаВСД(ЭлементДанных);
				
				Если ДатаСинхронизации < ПоследняяДатаИзмененияСтатуса Тогда
					ДатаСинхронизации = ПоследняяДатаИзмененияСтатуса;
					Смещение = 0;
				ИначеЕсли ДатаСинхронизации = ПоследняяДатаИзмененияСтатуса Тогда
					Смещение = Смещение + 1;
				КонецЕсли;
				
				ИдентификаторВерсии = "";
				Если ЗначениеЗаполнено(ПоследняяДатаИзмененияСтатуса) Тогда
					ИдентификаторВерсии = Формат(ПоследняяДатаИзмененияСтатуса, "ДФ='dd.MM.yyyy HH:mm:ss'");
				КонецЕсли;
				
				СтрокаТЧ = ТаблицаИдентификаторов.Добавить();
				СтрокаТЧ.Идентификатор       = ЭлементДанных.uuid;
				СтрокаТЧ.ИдентификаторВерсии = ИдентификаторВерсии;
				СтрокаТЧ.ДатаИзменения       = ПоследняяДатаИзмененияСтатуса;
				СтрокаТЧ.Индекс              = Индекс;
				
			КонецЦикла;
			
			ЭлементыДанныхСпискаКЗагрузке = ЭлементыДанныхСпискаКЗагрузке(
				Список,
				Метаданные.Справочники.ВетеринарноСопроводительныйДокументВЕТИС,
				Ложь, Истина, ТаблицаИдентификаторов);
			
			Для Каждого ЭлементДанныхКЗагрузке Из ЭлементыДанныхСпискаКЗагрузке Цикл
				
				ДанныеВСД = ЗагрузитьВетеринарноСопроводительныйДокумент(
					ЭлементДанныхКЗагрузке.ЭлементДанных,
					ЭлементДанныхКЗагрузке.Ссылка,
					ХозяйствующийСубъект,
					Предприятие,
					ПараметрыОбмена);
				
				ИзмененныеОбъекты.Добавить(ДанныеВСД.Ссылка);
				
			КонецЦикла;
			
			Если Не ЭтоПопыткаВосстановления Тогда
				
				Если (ПараметрыЗапроса.ПоследнийЗапрос И Не ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода))
					Или (ПараметрыЗапроса.ПервыйЗапрос И ПараметрыСписка.offset + ПараметрыСписка.count >= ПараметрыСписка.total) Тогда
					
					Если ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода) Тогда
						
						ИзмененаДатаСинхронизации = Истина;
						УстановитьДатуВыполненияСинхронизации(
							Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
							ПараметрыЗапроса.Интервал.КонецПериода, 0,
							ХозяйствующийСубъект,
							Предприятие);
						
					ИначеЕсли ДатаСинхронизации > ПараметрыЗапроса.Интервал.НачалоПериода Тогда
						
						ИзмененаДатаСинхронизации = Истина;
						УстановитьДатуВыполненияСинхронизации(
							Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
							ДатаСинхронизации + 1, 0,
							ХозяйствующийСубъект,
							Предприятие);
						
					КонецЕсли;
					
				ИначеЕсли ДатаСинхронизации > ПараметрыЗапроса.Интервал.НачалоПериода
					Или ПараметрыСписка.offset + Смещение > ПараметрыЗапроса.СмещениеПервогоЗапроса Тогда
					
					ИзмененаДатаСинхронизации = Истина;
					УстановитьДатуВыполненияСинхронизации(
						Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
						ДатаСинхронизации, ?(ПараметрыЗапроса.ПервыйЗапрос, 0, ПараметрыСписка.offset) + Смещение,
						ХозяйствующийСубъект,
						Предприятие);
					
				КонецЕсли;
				
				// Для последовательной загрузки
				Если Не ПараметрыЗапроса.ПоследнийЗапрос Или ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода) Тогда
					
					ЗагруженоЭлементов = ПараметрыСписка.offset + ПараметрыСписка.count;
					
					// Строго последовательная загрузка измененных данных.
					// Параллельная загрузка на текущий момент может приводить к APLM0012.
					Если ЗагруженоЭлементов < ПараметрыСписка.total Тогда
						
						ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов2(
							РазмерПорции, ЗагруженоЭлементов, ПараметрыЗапроса,
							ПараметрыОбмена, Неопределено, ЗагруженоЭлементов + РазмерПорции >= ПараметрыСписка.total);
						
						ЗагруженоЭлементов = ЗагруженоЭлементов + РазмерПорции;
						
					ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода) Тогда
						
						ДополнительныеПараметрыЗапросаИзмененныхДанных = ЗаявкиВЕТИС.ДополнительныеПараметрыЗапросаИзмененныхДанных();
						ДополнительныеПараметрыЗапросаИзмененныхДанных.НачалоПериода = ПараметрыЗапроса.Интервал.КонецПериода;
						ДополнительныеПараметрыЗапросаИзмененныхДанных.Смещение      = 0;
						
						ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов(
							ХозяйствующийСубъект,
							Предприятие, РазмерПорции, ПараметрыОбмена, ДополнительныеПараметрыЗапросаИзмененныхДанных);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода)
				И Не ЭтоПопыткаВосстановления Тогда
				
				ИзмененаДатаСинхронизации = Истина;
				УстановитьДатуВыполненияСинхронизации(
					Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
					ПараметрыЗапроса.Интервал.КонецПериода, 0,
					ХозяйствующийСубъект,
					Предприятие);
				
				ДополнительныеПараметрыЗапросаИзмененныхДанных = ЗаявкиВЕТИС.ДополнительныеПараметрыЗапросаИзмененныхДанных();
				ДополнительныеПараметрыЗапросаИзмененныхДанных.НачалоПериода = ПараметрыЗапроса.Интервал.КонецПериода;
				ДополнительныеПараметрыЗапросаИзмененныхДанных.Смещение      = 0;
				
				ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов(
					ХозяйствующийСубъект,
					Предприятие, РазмерПорции, ПараметрыОбмена, ДополнительныеПараметрыЗапросаИзмененныхДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	Если ЕстьДанныеКОбработке И Не ИзмененаДатаСинхронизации И Не ЭтоПопыткаВосстановления Тогда
		УстановитьДатуВыполненияСинхронизации(
			Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
			ДатаСинхронизации + 1, 0,
			ХозяйствующийСубъект,
			Предприятие);
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента, ХозяйствующийСубъект, Предприятие, Истина);
	
	Если ЕстьДанныеКОбработке Или Не ПустаяСтрока(ТекстОшибки) Или ЭтоПопыткаВосстановления Тогда
		
		РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
		
		ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ВозвращаемоеЗначение.Предприятие          = Предприятие;
		ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
		ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		ВозвращаемоеЗначение.ТекстОшибки           = ТекстОшибки;
		ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
		ВозвращаемоеЗначение.Передано              = Ложь;
		ВозвращаемоеЗначение.Принято               = Истина;
		ВозвращаемоеЗначение.ЕстьОшибкиСервиса     = ДополнительныеПараметры.ЕстьОшибкиСервиса;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
		ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
		
		ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
		ВозвращаемоеЗначение.ДокументОснование = ДокументДляВосстановления;
		ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
		
		Изменения.Добавить(ВозвращаемоеЗначение);
		
	КонецЕсли;
	
	Если Список <> Неопределено
		И ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ВремяВыполнения") Тогда
		ДополнительныеПараметры.ВремяВыполнения.КоличествоЭлементов = Список.Количество();
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

#Область Проведение

// Загружает ТаблицыДляДвижений в наборы записей регистров движений документа.
//
// Параметры:
//  ДополнительныеСвойства	 - Структура - Структура с дополнительными свойствами документа, используемыми при проведении.
//  										В структуре обязательно должен быть ключ "ТаблицыДляДвижений" содержащий массив таблиц значений.
//  Движения				 - КоллекцияДвижений - Коллекция движений документа.
//  НеЗагружатьТаблицы		 - Строка			 - Имена регистров, для которых не нужно загружать движения.
//
Процедура ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения, НеЗагружатьТаблицы = "") Экспорт
	
	Если НЕ ДополнительныеСвойства.Свойство("ТаблицыДляДвижений") Тогда
		Возврат;
	КонецЕсли;
	
	СписокИсключений = Новый Структура(НеЗагружатьТаблицы);
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	Для Каждого Таблица Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = Таблица.Ключ;
		Если ВРег(Лев(ИмяРегистра,7))= "ТАБЛИЦА" Тогда
			ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра)-7);
		КонецЕсли;
		
		Если СписокИсключений.Свойство(ИмяРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Таблица.Значение.Количество() > 0 И Движения.Найти(ИмяРегистра) <> Неопределено Тогда
			Движения[ИмяРегистра].Записывать = Истина;
			Движения[ИмяРегистра].Загрузить(Таблица.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы
//
// Параметры:
//	Запрос				- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса		- Список значений - в списке перечислены тексты запросов и их имена.
//	Таблицы				- Структура - структура в которую будут помещены полученные таблицы для движений.
//	ДобавитьРазделитель	- Булево - Истина, если нужно добавить разделитель ";" между запросами.
//	ДобавлятьСловоТаблица	- Булево - Истина, если к имени таблицы движений нужно в начало добавить слово "Таблица"
//
Процедура ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные=Ложь) Экспорт
	
	ТаблицыЗапроса = ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, ДобавитьРазделитель);
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) И (Не ТолькоОтмеченные Или ТекстЗапроса.Пометка) Тогда

			Если ДобавлятьСловоТаблица Тогда
				// Таблицы для проведения должны начинаться с "Таблица"
				Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
					ИмяТаблицы = "Таблица" + ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Таблицы.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//	Запрос			- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса	- Список значений - в списке перечислены тексты запросов и их имена.
//	ОбходРезультата - ОбходРезультатаЗапроса - вариант обхода результата запроса.
//
// Возвращаемое значение:
//   Структура   - структура в которую помещены полученные таблицы
//
Функция ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса, ОбходРезультата = Неопределено, ДобавитьРазделитель = Ложь)

	Таблицы = Новый Структура;
	
	// Инициализация варианта обхода результата запроса.
	Если ОбходРезультата = Неопределено Тогда
		ОбходРезультата = ОбходРезультатаЗапроса.Прямой;
	КонецЕсли;
	
	МассивТекстаЗапроса = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстаЗапроса.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли; 
		МассивТекстаЗапроса.Добавить(ТекстЗапроса.Значение);
		Если ДобавитьРазделитель Тогда
			МассивТекстаЗапроса.Добавить("
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|");
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(МассивТекстаЗапроса, Символы.ПС);
	
	// Выполнение запроса.
	Результат = Запрос.ВыполнитьПакет();

	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) Тогда

			Индекс = ТекстыЗапроса.Индекс(ТекстЗапроса);
			Таблицы.Вставить(ИмяТаблицы, Результат[Индекс].Выгрузить(ОбходРезультата));

		КонецЕсли;

	КонецЦикла;

	Возврат Таблицы;
	
КонецФункции

// Определяет необходимость подготовить таблицу для формирования движений
//
// Параметры:
//  ИмяРегистра	- Строка - имя регистра. Например "ТоварыНаСкладах"
//  Регистры	- Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров
//													Если неопределено - то всегда возвращается ИСТИНА
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется инициализировать указанную таблицу
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

Функция ТекстЗапросаДвижениеСерийТоваров(МетаданныеДокумента) Экспорт
	
	ТекстЗапроса = "";
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьТекстЗапросаДвижениеСерийТоваров(ТекстЗапроса, МетаданныеДокумента);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбработкаПроверкиЗаполнения

// Функция возвращает необходимость использования идентификатора партии в сериях для номенклатуры.
//
// Параметры:
//   Номенклатура - ОпределяемыйТип.Номенклатура - элемент номенклатуры.
//
// Возвращаемое значение:
//   Булево - Признак использования идентификатора партии в сериях номенклатуры.
//
Функция ТребуетсяУказаниеИдентификатораПартииНоменклатуры(Номенклатура) Экспорт
	
	Требуется = Ложь;
	ИнтеграцияВЕТИСПереопределяемый.ТребуетсяУказаниеИдентификатораПартииНоменклатуры(Требуется, Номенклатура);
	Возврат Требуется;
	
КонецФункции

Процедура ПроверитьЗаполнениеКоличества(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов, ИмяТабличнойЧасти = "Товары", ИмяРеквизитаКоличество = "Количество") Экспорт
	
	МетаданныеТЧ = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти];
	
	ПредставлениеТабличнойЧасти      = МетаданныеТЧ.Синоним;
	ПредставлениеРеквизитаКоличество = МетаданныеТЧ.Реквизиты[ИмяРеквизитаКоличество].Синоним;
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%1"" в строке %2 списка ""%3"".'");
	НомерСтроки = 0;
	Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
		НомерСтроки = НомерСтроки + 1;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаКоличество]) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеРеквизитаКоличество, НомерСтроки, ПредставлениеТабличнойЧасти);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				ИмяТабличнойЧасти,
				НомерСтроки,
				ИмяРеквизитаКоличество);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ДокументОбъект.Ссылка,
				Поле,
				"Объект",
				Отказ);
		КонецЕсли;
	КонецЦикла;
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТабличнойЧасти + "." + ИмяРеквизитаКоличество);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТипаПроисхождения(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов) Экспорт
	
	ШаблонСообщения = НСтр("ru='Не заполнено поле ""Происхождение"" в строке %1 списка ""Товары"".'");
	
	МассивПродукции = ДокументОбъект.Товары.ВыгрузитьКолонку("Продукция");
	СоответствиеТиповПродукции = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивПродукции, "ТипПродукции");
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
		НомерСтроки  = НомерСтроки + 1;
		ТипПродукции = СоответствиеТиповПродукции[СтрокаТабличнойЧасти.Продукция];
		
		Если НЕ ПродукцияВЕТИСВызовСервера.ТребованиеТипаПроисхожденияПоТипуПродукции(ТипПродукции) Тогда
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипПроисхождения) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",
																	НомерСтроки,
																	"ТипПроисхождения");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
																ДокументОбъект.Ссылка,
																Поле,
																"Объект",
																Отказ);
		КонецЕсли;
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ТипПроисхождения");
	
КонецПроцедуры

#КонецОбласти

// Обрабатывает результат операции запроса измененных записей складского журнала.
//
Функция ОбработатьРезультатЗапросаИзмененныхЗаписейСкладскогоЖурнала(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения                 = Новый Массив;
	ИзмененныеОбъекты         = Неопределено;
	ЕстьДанныеКОбработке      = Ложь;
	РазмерПорции              = ПараметрыОбмена.РазмерПорции;
	ЭтоПопыткаВосстановления  = Ложь;
	ИзмененаДатаСинхронизации = Ложь;
	
	Если ДанныеДокумента.Объект <> Неопределено Тогда
		
		ПараметрыСписка = ДанныеДокумента.Объект.stockEntryList;
		Список = ПараметрыСписка.stockEntry;
		
		ПараметрыЗапроса = Новый Структура;
		Если ДанныеДокумента.ПараметрыЗапроса <> Неопределено Тогда
			Значение = ДанныеДокумента.ПараметрыЗапроса.Получить();
			Если ТипЗнч(Значение) = Тип("Структура") Тогда
				ПараметрыЗапроса = Значение;
			КонецЕсли;
		КонецЕсли;
		
		ДокументДляВосстановления = Неопределено;
		Если ПараметрыЗапроса.Свойство("ПопыткаВосстановления")
			И ПараметрыЗапроса.ПопыткаВосстановления Тогда
			ЭтоПопыткаВосстановления = Истина;
			ДокументДляВосстановления = ПараметрыЗапроса.Документ;
		КонецЕсли;
		
		Если Список.Количество() > 0 Тогда
			
			ЕстьДанныеКОбработке = Истина;
			
			// Обновим элементы справочника "ЗаписиСкладскогоЖурналаВЕТИС".
			ЭлементыДанныхСпискаКЗагрузке = ЭлементыДанныхСпискаКЗагрузке(
				Список,
				Метаданные.Справочники.ЗаписиСкладскогоЖурналаВЕТИС,
				Ложь, Истина);
			
			ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала = ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
			ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала.РегистрироватьСинхронизацию = Ложь;
			ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала.ПроверятьАктуальностьЗаписи = Ложь;
			
			Для Каждого ЭлементДанныхКЗагрузке Из ЭлементыДанныхСпискаКЗагрузке Цикл
				
				ЗагрузитьЗаписьСкладскогоЖурнала(
					ЭлементДанныхКЗагрузке.ЭлементДанных,
					ЭлементДанныхКЗагрузке.Ссылка,
					ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала);
				
			КонецЦикла;
			
			// Заполним таблицу измененных записей журнала, сгруппированную по дате изменения.
			ОбменДаннымиВЕТИС.ЗаполнитьТаблицуЭлементовПоДате(
				Список,
				ПараметрыОбмена,
				ПараметрыЗапроса,
				ДокументДляВосстановления);
			
			ТаблицаЭлементовПоДатам  = ПараметрыОбмена.ТаблицаЭлементовПоДатам;
			ЭлементыПоследнегоПакета = ТаблицаЭлементовПоДатам[ТаблицаЭлементовПоДатам.Количество() - 1];
			ДатаСинхронизации        = ЭлементыПоследнегоПакета.Дата;
			
			Если (ПараметрыЗапроса.ПоследнийЗапрос
				И Не ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода))
				Или (ПараметрыЗапроса.ПервыйЗапрос И ПараметрыСписка.offset + ПараметрыСписка.count >= ПараметрыСписка.total) Тогда
				
				Если Не ЭтоПопыткаВосстановления Тогда
					
					// Синхронизация выполнена до конца.
					Если ДатаСинхронизации > ПараметрыЗапроса.Интервал.НачалоПериода Тогда
						
						ИзмененаДатаСинхронизации = Истина;
						УстановитьДатуВыполненияСинхронизации(
							Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала,
							ДатаСинхронизации + 1, 0,
							ХозяйствующийСубъект,
							Предприятие);
						
					ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода) Тогда
						
						ИзмененаДатаСинхронизации = Истина;
						УстановитьДатуВыполненияСинхронизации(
							Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала,
							ПараметрыЗапроса.Интервал.КонецПериода, 0,
							ХозяйствующийСубъект,
							Предприятие);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИсключитьПоследнююДату = Ложь;
				ИзмененныеОбъекты = ОбработатьЗаписиСкладскогоЖурнала(
					ПараметрыОбмена, ХозяйствующийСубъект, Предприятие,
					ИсключитьПоследнююДату, ДокументДляВосстановления);
				
			ИначеЕсли ДатаСинхронизации > ПараметрыЗапроса.Интервал.НачалоПериода
				Или ПараметрыСписка.offset + ПараметрыСписка.count > ПараметрыЗапроса.СмещениеПервогоЗапроса Тогда
				
				// Для завершения синхронизации требуется получение данных из ВЕТИС.
				ИсключитьПоследнююДату = Истина;
				ИзмененныеОбъекты = ОбработатьЗаписиСкладскогоЖурнала(
					ПараметрыОбмена, ХозяйствующийСубъект, Предприятие,
					ИсключитьПоследнююДату, ДокументДляВосстановления);
				
				Если Не ЭтоПопыткаВосстановления Тогда
					ИзмененаДатаСинхронизации = Истина;
					УстановитьДатуВыполненияСинхронизации(
						Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала,
						ДатаСинхронизации, ?(ПараметрыЗапроса.ПервыйЗапрос, 0, ПараметрыСписка.offset) + ПараметрыСписка.count,
						ХозяйствующийСубъект,
						Предприятие);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЭтоПопыткаВосстановления Тогда
				
				Если ПараметрыЗапроса <> Неопределено
					И (ПараметрыЗапроса.ПервыйЗапрос
					ИЛИ (Не ПараметрыЗапроса.ПервыйЗапрос И Не ПараметрыЗапроса.ПоследнийЗапрос)
					ИЛИ (ПараметрыЗапроса.ПоследнийЗапрос И ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода))) Тогда // Для последовательной загрузки
					
					ЗагруженоЭлементов = ПараметрыСписка.offset + ПараметрыСписка.count;
					
					ЗагружатьПосле = Неопределено;
					
					// Строго последовательная загрузка измененных данных.
					// Параллельная загрузка на текущий момент может приводить к APLM0012.
					// Для включения параллельной загрузки использовать Цикл.
					Если ЗагруженоЭлементов < ПараметрыСписка.total Тогда
						
						Изменение = ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала2(
							РазмерПорции, ЗагруженоЭлементов, ПараметрыЗапроса,
							ПараметрыОбмена, ЗагружатьПосле, ЗагруженоЭлементов + РазмерПорции >= ПараметрыСписка.total);
						Если Изменение <> Неопределено Тогда
							ЗагружатьПосле = Изменение.ИсходящееСообщение;
						КонецЕсли;
						
						ЗагруженоЭлементов = ЗагруженоЭлементов + РазмерПорции;
						
					Иначе
						
						Если ПараметрыЗапроса <> Неопределено
							И ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода) Тогда
							
							ДополнительныеПараметрыЗапросаИзмененныхДанных = ЗаявкиВЕТИС.ДополнительныеПараметрыЗапросаИзмененныхДанных();
							ДополнительныеПараметрыЗапросаИзмененныхДанных.НачалоПериода = ПараметрыЗапроса.Интервал.КонецПериода;
							ДополнительныеПараметрыЗапросаИзмененныхДанных.Смещение      = 0;
							
							ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала(
								ХозяйствующийСубъект,
								Предприятие, РазмерПорции, ПараметрыОбмена, ДополнительныеПараметрыЗапросаИзмененныхДанных);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыЗапроса <> Неопределено
				И ЗначениеЗаполнено(ПараметрыЗапроса.Интервал.КонецПериода)
				И Не ЭтоПопыткаВосстановления Тогда
				
				ИзмененаДатаСинхронизации = Истина;
				УстановитьДатуВыполненияСинхронизации(
					Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала,
					ПараметрыЗапроса.Интервал.КонецПериода, 0,
					ХозяйствующийСубъект,
					Предприятие);
				
				ДополнительныеПараметрыЗапросаИзмененныхДанных = ЗаявкиВЕТИС.ДополнительныеПараметрыЗапросаИзмененныхДанных();
				ДополнительныеПараметрыЗапросаИзмененныхДанных.НачалоПериода = ПараметрыЗапроса.Интервал.КонецПериода;
				ДополнительныеПараметрыЗапросаИзмененныхДанных.Смещение      = 0;
				
				ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала(
					ХозяйствующийСубъект,
					Предприятие, РазмерПорции, ПараметрыОбмена, ДополнительныеПараметрыЗапросаИзмененныхДанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	Если ЕстьДанныеКОбработке И Не ИзмененаДатаСинхронизации И Не ЭтоПопыткаВосстановления Тогда
		УстановитьДатуВыполненияСинхронизации(
			Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала,
			ДатаСинхронизации + 1, 0,
			ХозяйствующийСубъект,
			Предприятие);
	КонецЕсли;
	
	ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента, ХозяйствующийСубъект, Предприятие, Истина);
	
	Если ЭтоПопыткаВосстановления
		И (Не ЕстьДанныеКОбработке
			Или (ИзмененныеОбъекты <> Неопределено И ИзмененныеОбъекты.Найти(ДокументДляВосстановления) = Неопределено)) Тогда
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = Неопределено;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;
		
		ПолноеИмя = ДокументДляВосстановления.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументДляВосстановления,
			Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала,
			ПараметрыОбновленияСтатуса);
		
		Если ИзмененныеОбъекты = Неопределено Тогда
			ИзмененныеОбъекты = Новый Массив;
		КонецЕсли;
		
		ИзмененныеОбъекты.Добавить(ДокументДляВосстановления);
		
		Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если ЭлементОчереди.Документ = ДокументДляВосстановления Тогда
				// Документ можно передавать повторно.
				ЭлементОчереди.ИдентификаторЗаявки             = Неопределено;
				ЭлементОчереди.ПроверенаКорректностьОформления = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьДанныеКОбработке Или Не ПустаяСтрока(ТекстОшибки) Или ЭтоПопыткаВосстановления Тогда
		
		РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
		
		ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ВозвращаемоеЗначение.Предприятие          = Предприятие;
		ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
		ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		ВозвращаемоеЗначение.ТекстОшибки           = ТекстОшибки;
		ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
		ВозвращаемоеЗначение.Передано              = Ложь;
		ВозвращаемоеЗначение.Принято               = Истина;
		ВозвращаемоеЗначение.ЕстьОшибкиСервиса     = ДополнительныеПараметры.ЕстьОшибкиСервиса;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
		ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
		
		ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
		ВозвращаемоеЗначение.ДокументОснование = ДокументДляВосстановления;
		ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
		
		Изменения.Добавить(ВозвращаемоеЗначение);
		
	КонецЕсли;
	
	Если Список <> Неопределено
		И ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ВремяВыполнения") Тогда
		ДополнительныеПараметры.ВремяВыполнения.КоличествоЭлементов = Список.Количество();
	КонецЕсли;
	
	Возврат Изменения;
	
КонецФункции

Функция ОбработатьЗаписиСкладскогоЖурнала(ПараметрыОбмена, ХозяйствующийСубъект, Предприятие, ИсключаяПоследнююДату, ДокументДляВосстановления)
	
	ТаблицаЭлементовПоДатам = ПараметрыОбмена.ТаблицаЭлементовПоДатам;
	КоличествоЭлементов = ТаблицаЭлементовПоДатам.Количество();
	
	Если КоличествоЭлементов >= 2 Тогда
		
		// Обрабатываем все даты, кроме последней. В последней дате могут содержаться не все элементы.
		МаксимальныйИндекс = ?(ИсключаяПоследнююДату, КоличествоЭлементов-2, КоличествоЭлементов-1);
		
	ИначеЕсли КоличествоЭлементов = 1 Тогда
		
		МаксимальныйИндекс = 0;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	ДанныеДляОбработки = Новый Массив;
	
	Для Индекс = 0 По МаксимальныйИндекс Цикл
		
		ЭлементыПоДате = ТаблицаЭлементовПоДатам[Индекс];
		
		ОбщиеДанные = Новый Структура;
		ОбщиеДанные.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
		ОбщиеДанные.Вставить("Предприятие",          Предприятие);
		ОбщиеДанные.Вставить("Дата",                 ЭлементыПоДате.Дата);
		ОбщиеДанные.Вставить("ТаблицаЭлементов",     ЭлементыПоДате.ТаблицаЭлементов);
		
		ДанныеДляОбработки.Добавить(ОбщиеДанные);
		
	КонецЦикла;
	
	ИзмененныеОбъекты = ОбменДаннымиВЕТИС.СформироватьДокументы(
		ДанныеДляОбработки, ПараметрыОбмена, ДокументДляВосстановления);
	
	// Удалим элементы после загрузки.
	МассивСтрок = Новый Массив;
	Если МаксимальныйИндекс = КоличествоЭлементов - 2 Тогда
		МассивСтрок.Добавить(ТаблицаЭлементовПоДатам[МаксимальныйИндекс+1]);
	КонецЕсли;
	ТаблицаЭлементовПоДатам = ТаблицаЭлементовПоДатам.Скопировать(МассивСтрок);
	
	Возврат ИзмененныеОбъекты;
	
КонецФункции

// Обрабатывает результат операции запроса ВСД.
//
Функция ОбработатьРезультатЗапросаВСД(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИзмененныеОбъекты    = Новый Массив;
	ДополнительныеДанные = Неопределено;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ЭлементДанных = ДанныеДокумента.Объект.vetDocument;
			ВетеринарноСопроводительныйДокумент = СсылкаПоИдентификатору(ПараметрыОбмена, "ВетеринарноСопроводительныйДокументВЕТИС", ЭлементДанных.uuid);
			
			ДанныеВСД = ЗагрузитьВетеринарноСопроводительныйДокумент(
				ЭлементДанных,
				ВетеринарноСопроводительныйДокумент,
				ХозяйствующийСубъект,
				Предприятие,
				ПараметрыОбмена);
			
			ДополнительныеДанные = ДанныеДокумента.Объект.vetDocument.authentication;
			
			ИзмененныеОбъекты.Добавить(ДанныеВСД.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект               = ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДополнительныеДанные = ДополнительныеДанные;
	ВозвращаемоеЗначение.ДокументОснование    = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус          = ДанныеДокумента.СтатусОбработки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат операции запроса на аннулирование ВСД.
//
Функция ОбработатьРезультатЗапросаНаАннулированиеВСД(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИзмененныеОбъекты = Новый Массив;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ВСДЭлементДанных = ДанныеДокумента.Объект.vetDocument;
			ВетеринарноСопроводительныйДокумент = СсылкаПоИдентификатору(ПараметрыОбмена, "ВетеринарноСопроводительныйДокументВЕТИС", ВСДЭлементДанных.uuid);
			
			ДанныеВСД = ЗагрузитьВетеринарноСопроводительныйДокумент(
				ВСДЭлементДанных,
				ВетеринарноСопроводительныйДокумент,
				ХозяйствующийСубъект,
				Предприятие,
				ПараметрыОбмена);
			
			ИзмененныеОбъекты.Добавить(ДанныеВСД.Ссылка);
			
			Для Каждого ЗаписьСкладскогоЖурналаЭлементДанных Из ДанныеДокумента.Объект.stockEntry Цикл
				
				ЗаписьСкладскогоЖурнала = СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЗаписьСкладскогоЖурналаЭлементДанных.guid);
				
				ЗагрузитьЗаписьСкладскогоЖурнала(
					ЗаписьСкладскогоЖурналаЭлементДанных,
					ЗаписьСкладскогоЖурнала,
					ХозяйствующийСубъект, Предприятие, ПараметрыОбмена);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат операции запроса ВСД.
//
Функция ОбработатьРезультатЗапросаВсехВСД(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИзмененныеОбъекты = Новый Массив;
	РазмерПорции      = ПараметрыОбмена.РазмерПорции;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ПараметрыСписка = ДанныеДокумента.Объект.vetDocumentList;
			Список = ПараметрыСписка.vetDocument;
			
			ПараметрыЗапроса = Неопределено;
			Если ДанныеДокумента.ПараметрыЗапроса <> Неопределено Тогда
				Значение = ДанныеДокумента.ПараметрыЗапроса.Получить();
				Если ТипЗнч(Значение) = Тип("Структура") Тогда
					ПараметрыЗапроса = Значение;
				КонецЕсли;
			КонецЕсли;
			
			Если Список.Количество() > 0 Тогда
				
				ДатаСинхронизации      = Дата(1,1,1);
				Смещение               = 0;
				Индекс                 = -1;
				ТаблицаИдентификаторов = НоваяТаблицаДляСравненияИдентификаторов();
				Для Каждого ЭлементДанных Из Список Цикл
					
					Индекс = Индекс + 1;
					
					ПоследняяДатаИзмененияСтатуса = ПоследняяДатаИзмененияСтатусаВСД(ЭлементДанных);
					
					Если ДатаСинхронизации < ПоследняяДатаИзмененияСтатуса Тогда
						ДатаСинхронизации = ПоследняяДатаИзмененияСтатуса;
						Смещение = 0;
					ИначеЕсли ДатаСинхронизации = ПоследняяДатаИзмененияСтатуса Тогда
						Смещение = Смещение + 1;
					КонецЕсли;
					
					ИдентификаторВерсии = "";
					Если ЗначениеЗаполнено(ПоследняяДатаИзмененияСтатуса) Тогда
						ИдентификаторВерсии = Формат(ПоследняяДатаИзмененияСтатуса, "ДФ='dd.MM.yyyy HH:mm:ss'");
					КонецЕсли;
					
					СтрокаТЧ = ТаблицаИдентификаторов.Добавить();
					СтрокаТЧ.Идентификатор       = ЭлементДанных.uuid;
					СтрокаТЧ.ИдентификаторВерсии = ИдентификаторВерсии;
					СтрокаТЧ.ДатаИзменения       = ПоследняяДатаИзмененияСтатуса;
					СтрокаТЧ.Индекс              = Индекс;
					
				КонецЦикла;
				
				ЭлементыДанныхСпискаКЗагрузке = ЭлементыДанныхСпискаКЗагрузке(
					Список,
					Метаданные.Справочники.ВетеринарноСопроводительныйДокументВЕТИС,
					Ложь, Ложь, ТаблицаИдентификаторов);
				
				Для Каждого ЭлементДанныхКЗагрузке Из ЭлементыДанныхСпискаКЗагрузке Цикл
					
					ДанныеВСД = ЗагрузитьВетеринарноСопроводительныйДокумент(
						ЭлементДанныхКЗагрузке.ЭлементДанных,
						ЭлементДанныхКЗагрузке.Ссылка,
						ХозяйствующийСубъект,
						Предприятие,
						ПараметрыОбмена);
					
					ИзмененныеОбъекты.Добавить(ДанныеВСД.Ссылка);
					
				КонецЦикла;
				
				// Если в ответ ВЕТИС включены не все актуальные записи,
				// сформируем сообщения для получения оставшихся.
				Если ПараметрыЗапроса <> Неопределено
					И Не ПараметрыЗапроса.ПоследнийЗапрос
					И ПараметрыСписка.offset + ПараметрыСписка.count < ПараметрыСписка.total Тогда // Для последовательной загрузки
					
					ЗагруженоЭлементов = ПараметрыСписка.offset + ПараметрыСписка.count;
					
					// Строго последовательная загрузка измененных данных.
					// Параллельная загрузка на текущий момент может приводить к APLM0012.
					ЗаявкиВЕТИС.ПодготовитьЗапросВетеринарноСопроводительныхДокументов2(
						РазмерПорции, ЗагруженоЭлементов, ПараметрыЗапроса,
						ПараметрыОбмена, Неопределено, ЗагруженоЭлементов + РазмерПорции >= ПараметрыСписка.total);
					
				Иначе
					
					Если ДополнительныеПараметры <> Неопределено
						И ДополнительныеПараметры.Свойство("ДанныеВыполненияЗаявки") Тогда
						// Синхронизация выполнена до конца.
						УстановитьДатуВыполненияСинхронизации(
							Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
							ДополнительныеПараметры.ДанныеВыполненияЗаявки.prdcRsltDate, 0,
							ХозяйствующийСубъект,
							Предприятие, Истина);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				УстановитьДатуВыполненияСинхронизации(
					Перечисления.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы,
					ДополнительныеПараметры.ДанныеВыполненияЗаявки.prdcRsltDate, 0,
					ХозяйствующийСубъект,
					Предприятие, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	ВозвращаемоеЗначение.ЕстьОшибкиСервиса     = ДополнительныеПараметры.ЕстьОшибкиСервиса;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ИзмененныеОбъекты(ИзмененныеОбъекты);
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = ДанныеДокумента.СтатусОбработки;
	
	Если Список <> Неопределено
		И ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ВремяВыполнения") Тогда
		ДополнительныеПараметры.ВремяВыполнения.КоличествоЭлементов = Список.Количество();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область Документы

Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ДокументОснование")
		И ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		
		ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьСоответствиеШапкиОбъектов(ДокументОбъект.ДокументОснование, ДокументОбъект);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры
// Возвращает структуру параметров обновления статуса.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОбновлятьДвижения- Булево - Признак необходимости обновления движений документа.
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//   * ДокументОбъект - ДокументОбъект - Документ-объект.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаВЕТИС - Формат обмена.
//   * ЕстьОшибкиСервиса - Булево - Признак наличия ошибок сервиса при обмене.
//
Функция ПараметрыОбновленияСтатуса(ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		ПараметрыОбновленияСтатуса = Новый Структура;
	КонецЕсли;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Истина);
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ДокументОбъект");
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторЗапроса");
	ПараметрыОбновленияСтатуса.Вставить("ФорматОбмена");
	Если Не ПараметрыОбновленияСтатуса.Свойство("ЕстьОшибкиСервиса") Тогда
		ПараметрыОбновленияСтатуса.Вставить("ЕстьОшибкиСервиса", Ложь);
	КонецЕсли;
	Если Не ПараметрыОбновленияСтатуса.Свойство("ЕстьОшибкиВСДДолженБытьВСостоянииОформлен") Тогда
		ПараметрыОбновленияСтатуса.Вставить("ЕстьОшибкиВСДДолженБытьВСостоянииОформлен", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

Функция ОшибкаПараметраОбновленияСтатуса(ПараметрыОбновленияСтатуса, Ключ) Экспорт
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПараметрыОбновленияСтатуса[Ключ];
	
КонецФункции

// Обрабатывает результат запроса записи складского журнала.
//
Функция ОбработатьРезультатЗапросаЗаписиСкладскогоЖурнала(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаписьСкладскогоЖурнала = Неопределено;
	ДополнительныеДанные    = Неопределено;
	ОбъектИзменен           = Ложь;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ЗаписьСкладскогоЖурнала = СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ДанныеДокумента.Объект.stockEntry.guid);
			
			ЗагрузитьЗаписьСкладскогоЖурнала(
				ДанныеДокумента.Объект.stockEntry,
				ЗаписьСкладскогоЖурнала,
				ХозяйствующийСубъект, Предприятие, ПараметрыОбмена);
			
			ОбъектИзменен = Истина;
			
			ДополнительныеДанные = ДанныеДокумента.Объект.stockEntry.vetEventList;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект               = ЗаписьСкладскогоЖурнала;
	ВозвращаемоеЗначение.ДополнительныеДанные = ДополнительныеДанные;
	ВозвращаемоеЗначение.ДокументОснование    = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус          = Неопределено;
	ВозвращаемоеЗначение.ОбъектИзменен        = ОбъектИзменен;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат запроса актуальных записей складского журнала.
//
Функция ОбработатьРезультатЗапросаАктуальныхЗаписейСкладскогоЖурнала(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйСтатус   = Перечисления.СтатусыОбработкиЗапросовСкладскогоЖурналаВЕТИС.Обрабатывается;
	ОбъектИзменен = Ложь;
	РазмерПорции  = ПараметрыОбмена.РазмерПорции;
	
	ПараметрыЗапроса = Неопределено;
	Если ДанныеДокумента.ПараметрыЗапроса <> Неопределено Тогда
		Значение = ДанныеДокумента.ПараметрыЗапроса.Получить();
		Если ТипЗнч(Значение) = Тип("Структура") Тогда
			ПараметрыЗапроса = Значение;
		КонецЕсли;
	КонецЕсли;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	ДокументОбъект = Неопределено;
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ПараметрыСписка = ДанныеДокумента.Объект.stockEntryList;
			Список = ПараметрыСписка.stockEntry;
			
			Если ЗначениеЗаполнено(ДанныеДокумента.Документ) Тогда
				
				ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
				
				// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
				// Документ будет получен в следующий итерации загрузки данных.
				ДокументОбъект.Заблокировать();
				
				ДанныеЗаписейСкладскогоЖурнала = Новый Массив;
				Для Каждого ЭлементДанных Из Список Цикл
					
					ЗаписьСкладскогоЖурнала = СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid);
					
					ДанныеЗаписиСкладскогоЖурнала = ЗагрузитьЗаписьСкладскогоЖурнала(
						ЭлементДанных,
						ЗаписьСкладскогоЖурнала,
						ХозяйствующийСубъект, Предприятие, ПараметрыОбмена);
						
					Если ДанныеЗаписиСкладскогоЖурнала <> Неопределено Тогда
						ДанныеЗаписейСкладскогоЖурнала.Добавить(ДанныеЗаписиСкладскогоЖурнала);
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого ДанныеЗаписиСкладскогоЖурнала Из ДанныеЗаписейСкладскогоЖурнала Цикл
					
					ЗаписьСкладскогоЖурналаСсылка = ДанныеЗаписиСкладскогоЖурнала.Ссылка;
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ЗаписьСкладскогоЖурнала", ЗаписьСкладскогоЖурналаСсылка);
					
					НайденныеСтрокиСЗаписьюСкладскогоЖурнала = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтрокиСЗаписьюСкладскогоЖурнала.Количество() = 0 Тогда
						СтрокаТЧ = ДокументОбъект.Товары.Добавить();
						СтрокаТЧ.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
					Иначе
						СтрокаТЧ = НайденныеСтрокиСЗаписьюСкладскогоЖурнала[0];
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеЗаписиСкладскогоЖурнала);
					
				КонецЦикла;
				
				// Заполним номенклатуру, если она сопоставлена.
				РезультатСопоставленныеТовары = ОбменДаннымиВЕТИС.ПолучитьТоварыСопоставленныеПоЗаписи(ДокументОбъект.Товары);
				ВыборкаСопоставленныеТовары = РезультатСопоставленныеТовары.Выбрать();
				Пока ВыборкаСопоставленныеТовары.Следующий() Цикл
					СтрокаТЧ = ДокументОбъект.Товары.Получить(ВыборкаСопоставленныеТовары.НомерСтроки - 1);
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаСопоставленныеТовары);
					
				КонецЦикла;
				
				ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИСВТаблице(ДокументОбъект.Товары);
				ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, 
					Документы.ЗапросСкладскогоЖурналаВЕТИС.ПараметрыУказанияСерий(ДокументОбъект));
				
				ДокументОбъект.Записать();
				ОбъектИзменен = Истина;
				
			Иначе
				
				Для Каждого ЭлементДанных Из Список Цикл
					
					ЗаписьСкладскогоЖурнала = СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid);
					
					ЗагрузитьЗаписьСкладскогоЖурнала(
						ЭлементДанных,
						ЗаписьСкладскогоЖурнала,
						ХозяйствующийСубъект, Предприятие, ПараметрыОбмена);
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Если в ответ ВЕТИС включены не все актуальные записи,
			// сформируем сообщения для получения оставшихся.
			ОбработаныВсеДанные = Ложь;
			Если ПараметрыЗапроса <> Неопределено
				И (ПараметрыЗапроса.ПервыйЗапрос
				ИЛИ (Не ПараметрыЗапроса.ПервыйЗапрос И Не ПараметрыЗапроса.ПоследнийЗапрос)) Тогда // Для последовательной загрузки
				
				ЗагруженоЭлементов = ПараметрыСписка.offset + ПараметрыСписка.count;
				
				ЗагружатьПосле = Неопределено;
				
				// Строго последовательная загрузка измененных данных.
				// Параллельная загрузка на текущий момент может приводить к APLM0012.
				// Для включения параллельной загрузки использовать Цикл.
				Если ЗагруженоЭлементов < ПараметрыСписка.total Тогда
					
					Изменение = ЗаявкиВЕТИС.ПодготовитьЗапросЗаписейСкладскогоЖурнала2(
						РазмерПорции, ЗагруженоЭлементов, ПараметрыЗапроса,
						ПараметрыОбмена, ЗагружатьПосле, ЗагруженоЭлементов + РазмерПорции >= ПараметрыСписка.total);
					Если Изменение <> Неопределено Тогда
						ЗагружатьПосле = Изменение.ИсходящееСообщение;
					КонецЕсли;
					
					ЗагруженоЭлементов = ЗагруженоЭлементов + РазмерПорции;
					
				Иначе
					
					ОбработаныВсеДанные = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ОбработаныВсеДанные
				Или ПараметрыЗапроса.ПоследнийЗапрос Тогда
				
				Если ЗначениеЗаполнено(ДанныеДокумента.Документ) Тогда
					
					Если ДокументОбъект = Неопределено Тогда
						
						ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
						
						// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
						// Документ будет получен в следующий итерации загрузки данных.
						ДокументОбъект.Заблокировать();
						
					КонецЕсли;
					
					// Проверка на остаток, отсутствующий в ВетИС.
					СписокПолученныхЗаписейСЖ = Новый Массив;
					Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
						СписокПолученныхЗаписейСЖ.Добавить(СтрокаТЧ.ЗаписьСкладскогоЖурнала);
					КонецЦикла;
					
					Запрос = Новый Запрос;
					Запрос.Текст =
					"ВЫБРАТЬ
					|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала               КАК ЗаписьСкладскогоЖурнала,
					|	ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала.Идентификатор КАК ЗаписьСкладскогоЖурналаИдентификатор
					|ИЗ
					|	РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
					|ГДЕ
					|	ОстаткиПродукцииВЕТИС.ХозяйствующийСубъект = &ХозяйствующийСубъект
					|	И ОстаткиПродукцииВЕТИС.Предприятие = &Предприятие
					|	И НЕ ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала В (&СписокПолученныхЗаписейСЖ)";
					
					Запрос.УстановитьПараметр("СписокПолученныхЗаписейСЖ", СписокПолученныхЗаписейСЖ);
					Запрос.УстановитьПараметр("ХозяйствующийСубъект",      ХозяйствующийСубъект);
					Запрос.УстановитьПараметр("Предприятие",               Предприятие);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Пока Выборка.Следующий() Цикл
						
						ЗаявкиВЕТИС.ПодготовитьЗапросЗаписиСкладскогоЖурналаПоИдентификатору(
							ХозяйствующийСубъект,
							Предприятие,
							Выборка.ЗаписьСкладскогоЖурналаИдентификатор,
							ПараметрыОбмена);
						
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("ЗаписьСкладскогоЖурнала", Выборка.ЗаписьСкладскогоЖурнала);
						
						НайденныеСтрокиСЗаписьюСкладскогоЖурнала = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
						Если НайденныеСтрокиСЗаписьюСкладскогоЖурнала.Количество() = 0 Тогда
							СтрокаТЧ = ДокументОбъект.Товары.Добавить();
							СтрокаТЧ.ЗаписьСкладскогоЖурнала = Выборка.ЗаписьСкладскогоЖурнала;
							ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка.ЗаписьСкладскогоЖурнала, ,"КоличествоВЕТИС");
						КонецЕсли;
						
					КонецЦикла;
					
					Если ДокументОбъект <> Неопределено Тогда
						
						// Заполним номенклатуру, если она сопоставлена.
						РезультатСопоставленныеТовары = ОбменДаннымиВЕТИС.ПолучитьТоварыСопоставленныеПоЗаписи(ДокументОбъект.Товары);
						ВыборкаСопоставленныеТовары = РезультатСопоставленныеТовары.Выбрать();
						Пока ВыборкаСопоставленныеТовары.Следующий() Цикл
							СтрокаТЧ = ДокументОбъект.Товары.Получить(ВыборкаСопоставленныеТовары.НомерСтроки - 1);
							ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаСопоставленныеТовары);
							
							ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(СтрокаТЧ);
							ИнтеграцияВЕТИСПереопределяемый.ПроверитьСериюРассчитатьСтатус(ДокументОбъект, СтрокаТЧ);
						КонецЦикла;
						
						ДокументОбъект.Записать();
						ОбъектИзменен = Истина;
						
					КонецЕсли;
					
					ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
					МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
					
					// Это последний пакет.
					ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
					ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
					ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
					ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
					ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
					ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
					
					НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
						ДанныеДокумента.Документ, ДанныеДокумента.ВходящаяОперация,
						ПараметрыОбновленияСтатуса);
					
				Иначе
					
					Если ДополнительныеПараметры <> Неопределено
						И ДополнительныеПараметры.Свойство("ДанныеВыполненияЗаявки") Тогда
						// Синхронизация выполнена до конца.
						УстановитьДатуВыполненияСинхронизации(
							Перечисления.ТипыВЕТИС.ЗаписиСкладскогоЖурнала,
							ДополнительныеПараметры.ДанныеВыполненияЗаявки.prdcRsltDate, 0,
							ХозяйствующийСубъект,
							Предприятие, Истина);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ДанныеДокумента.Документ) Тогда
				
				ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
				
				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
				ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ДанныеДокумента.Документ, ДанныеДокумента.ВходящаяОперация,
					ПараметрыОбновленияСтатуса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	ВозвращаемоеЗначение.ЕстьОшибкиСервиса     = ДополнительныеПараметры.ЕстьОшибкиСервиса;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	Если Список <> Неопределено
		И ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ВремяВыполнения") Тогда
		ДополнительныеПараметры.ВремяВыполнения.КоличествоЭлементов = Список.Количество();
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает результат инвентаризации продукции.
//
Функция ОбработатьРезультатИнвентаризацияПродукции(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			// Для операций "Изменение" будем создавать архивные версии записей журнала.
			СтруктураПоискаИзменение = Новый Структура("Операция, ЗаписьСкладскогоЖурнала");
			СтруктураПоискаИзменение.Операция = Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение;
			
			ДанныеЗаписейСкладскогоЖурнала = Новый Массив;
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.stockEntryList.stockEntry Цикл
				
				ЗаписьСкладскогоЖурнала = СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid);
				
				ДанныеЗаписиСкладскогоЖурнала = ЗагрузитьЗаписьСкладскогоЖурнала(
					ЭлементДанных,
					ЗаписьСкладскогоЖурнала,
					ХозяйствующийСубъект, Предприятие, ПараметрыОбмена);
				
				Если ДанныеЗаписиСкладскогоЖурнала <> Неопределено Тогда
					
					ДанныеЗаписейСкладскогоЖурнала.Добавить(ДанныеЗаписиСкладскогоЖурнала);
					
				КонецЕсли;
				
				// Заполним архивные версии записей.
				Если ЗначениеЗаполнено(ЭлементДанных.next) Тогда
					СтруктураПоискаИзменение.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурнала;
					МассивСтрокИзменение = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоискаИзменение);
					
					Если МассивСтрокИзменение.Количество() > 0 Тогда
						СтрокаТЧ = МассивСтрокИзменение[0];
						
						// Попробуем найти архивную запись по идентификатору версии и актуальной записи.
						АрхивнаяЗапись = АрхивнаяЗаписьСкладскогоЖурнала(ЗаписьСкладскогоЖурнала, ЭлементДанных.uuid);
						
						ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала = ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала();
						ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала.РегистрироватьСинхронизацию       = Ложь;
						ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала.АктуальнаяЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурнала;
						ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала.ПроверятьАктуальностьЗаписи       = Не ЗначениеЗаполнено(ЗаписьСкладскогоЖурнала);
						
						// Создадим / обновим архивную запись.
						ДанныеЗаписиСкладскогоЖурналаАрхив = ЗагрузитьЗаписьСкладскогоЖурнала(
							ЭлементДанных,
							АрхивнаяЗапись,
							ХозяйствующийСубъект,
							Предприятие,
							ПараметрыОбмена, ДополнительныеПараметрыЗагрузкиЗаписиСкладскогоЖурнала);
						
						СтрокаТЧ.ЗаписьСкладскогоЖурналаАрхив = ДанныеЗаписиСкладскогоЖурналаАрхив.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ДанныеЗаписиСкладскогоЖурнала Из ДанныеЗаписейСкладскогоЖурнала Цикл
				
				ЗаписьСкладскогоЖурналаСсылка = ДанныеЗаписиСкладскогоЖурнала.Ссылка;
				ЗаписьСкладскогоЖурналаОбъект = ДанныеЗаписиСкладскогоЖурнала.Объект;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ЗаписьСкладскогоЖурнала", ЗаписьСкладскогоЖурналаСсылка);
				
				НайденныеСтрокиСЗаписьюСкладскогоЖурнала = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтрокиСЗаписьюСкладскогоЖурнала.Количество() = 0 Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Продукция",                ЗаписьСкладскогоЖурналаОбъект.Продукция);
					ПараметрыОтбора.Вставить("Операция",                 Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление);
					ПараметрыОтбора.Вставить("КоличествоИзменениеВЕТИС", ДанныеЗаписиСкладскогоЖурнала.КоличествоВЕТИС);
					ПараметрыОтбора.Вставить("ЕдиницаИзмеренияВЕТИС",    ДанныеЗаписиСкладскогоЖурнала.ЕдиницаИзмеренияВЕТИС);
					
					Если ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваСтрока)
						Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваНачалоПериода)
						Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваКонецПериода) Тогда
						
						ПараметрыОтбора.Вставить("ДатаПроизводстваСтрока",             ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваСтрока);
						ПараметрыОтбора.Вставить("ДатаПроизводстваТочностьЗаполнения", ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваТочностьЗаполнения);
						ПараметрыОтбора.Вставить("ДатаПроизводстваНачалоПериода",      ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваНачалоПериода);
						ПараметрыОтбора.Вставить("ДатаПроизводстваКонецПериода",       ЗаписьСкладскогоЖурналаОбъект.ДатаПроизводстваКонецПериода);
						
					КонецЕсли;
					
					Если НЕ ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(ЗаписьСкладскогоЖурналаОбъект.Продукция) Тогда
						
						Если ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.СрокГодностиСтрока)
							Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.СрокГодностиНачалоПериода)
							Или ЗначениеЗаполнено(ЗаписьСкладскогоЖурналаОбъект.СрокГодностиКонецПериода) Тогда
							
							ПараметрыОтбора.Вставить("СрокГодностиСтрока",             ЗаписьСкладскогоЖурналаОбъект.СрокГодностиСтрока);
							ПараметрыОтбора.Вставить("СрокГодностиТочностьЗаполнения", ЗаписьСкладскогоЖурналаОбъект.СрокГодностиТочностьЗаполнения);
							ПараметрыОтбора.Вставить("СрокГодностиНачалоПериода",      ЗаписьСкладскогоЖурналаОбъект.СрокГодностиНачалоПериода);
							ПараметрыОтбора.Вставить("СрокГодностиКонецПериода",       ЗаписьСкладскогоЖурналаОбъект.СрокГодностиКонецПериода);
						КонецЕсли; 
						
						ПараметрыОтбора.Вставить("СкоропортящаясяПродукция", ЗаписьСкладскогоЖурналаОбъект.СкоропортящаясяПродукция);
						
					КонецЕсли;
					
					ПараметрыОтбора.Вставить("СтранаПроизводства",      ЗаписьСкладскогоЖурналаОбъект.СтранаПроизводства);
					ПараметрыОтбора.Вставить("ЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
					
					НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						СтрокаТЧ = НайденныеСтроки[0];
						СтрокаТЧ.ЗаписьСкладскогоЖурнала = ЗаписьСкладскогоЖурналаСсылка;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Операция", Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление);
			СтруктураПоиска.Вставить("ЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
			СписокСтрок = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() <> 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось заполнить все ссылки на добавленные записи журнала'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			// Автогенерация серий
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Операция", Перечисления.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление);
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
			
			СтрокиДляГенерацииСерий = ДокументОбъект.Товары.ВыгрузитьКолонки();
			СтрокиДляГенерацииСерий.Колонки.Добавить(
				"ИдентификаторПартии",
				Новый ОписаниеТипов("Строка",,
					Новый КвалификаторыСтроки(
						Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип.КвалификаторыСтроки.Длина, 
						Метаданные.ОпределяемыеТипы.СтрокаВЕТИС.Тип.КвалификаторыСтроки.ДопустимаяДлина)));
			ИндексыСтрокДляГенерацииСерий = Новый Массив();
			
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					Продолжить;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
					Продолжить;
				ИначеЕсли СтрокаТЧ.КоличествоИзменение <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ИдентификаторыПартий = ДокументОбъект.ПроизводственныеПартии.НайтиСтроки(
					Новый Структура("ИдентификаторСтрокиТовары", СтрокаТЧ.ИдентификаторСтроки));
				
				Если ИдентификаторыПартий.Количество() > 1 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаДляГенерацииСерий = СтрокиДляГенерацииСерий.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДляГенерацииСерий, СтрокаТЧ);
				Если ИдентификаторыПартий.Количество() > 0 Тогда
					СтрокаДляГенерацииСерий.ИдентификаторПартии = ИдентификаторыПартий[0].ИдентификаторПартии;
				КонецЕсли;
				ИндексыСтрокДляГенерацииСерий.Добавить(СтрокиДляГенерацииСерий.Индекс(СтрокаДляГенерацииСерий));
			КонецЦикла;
			
			Если СтрокиДляГенерацииСерий.Количество() > 0 Тогда
				ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(
					ДокументОбъект.Метаданные(),
					ДокументОбъект);
				
				СгенерироватьСерии(
					ДокументОбъект,
					СтрокиДляГенерацииСерий, 
					ИндексыСтрокДляГенерацииСерий, 
					ПараметрыУказанияСерий);
				
				Для Каждого СтрокаДляГенерацииСерий Из СтрокиДляГенерацииСерий Цикл
					СтрокаТЧ = ДокументОбъект.Товары.Найти(СтрокаДляГенерацииСерий.ИдентификаторСтроки, "ИдентификаторСтроки");
					Если СтрокаТЧ <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДляГенерацииСерий);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Изменение статуса
			ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДанныеДокумента.Документ, ДанныеДокумента.ВходящаяОперация,
				ПараметрыОбновленияСтатуса);
			
			ДокументОбъект.Записать();
			ОбъектИзменен = Истина;
			
		Иначе
			
			ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = Неопределено;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДанныеДокумента.Документ, ДанныеДокумента.ВходящаяОперация,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Истина);
	
	ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	
	Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
		
		ВозвращаемоеЗначение = Неопределено;
		ДополнительныеПараметры.ЭлементОчереди.ТекстОшибки = ТекстОшибки;
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ВозвращаемоеЗначение.Предприятие          = Предприятие;
		ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
		ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		ВозвращаемоеЗначение.ТекстОшибки           = ТекстОшибки;
		ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
		ВозвращаемоеЗначение.Передано              = Ложь;
		ВозвращаемоеЗначение.Принято               = Истина;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
		ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
		
		ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
		ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
		ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
		ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполняет информацию о сопоставлении продукции в табличной части
//
// Параметры:
//  ТабличнаяЧасть	 - ДанныеФормыСтруктура - Табличная часть документа
//
Процедура ЗаполнитьСопоставленнуюПродукциюВДокументе(ТабличнаяЧасть, Отбор = Неопределено, ПроверятьЗаполненнуюПродукцию = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Продукция КАК Продукция,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыВЕТИС.Продукция КАК Продукция,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ПО (СоответствиеНоменклатурыВЕТИС.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|			И (СоответствиеНоменклатурыВЕТИС.Характеристика = ТабличнаяЧасть.Характеристика)
	|			И (СоответствиеНоменклатурыВЕТИС.Серия = ТабличнаяЧасть.Серия
	|				ИЛИ НЕ СоответствиеНоменклатурыВЕТИС.Серия В (&НезаполненныеЗначенияСерии))
	|			И (СоответствиеНоменклатурыВЕТИС.Продукция.ХозяйствующийСубъектПроизводитель = &ХозяйствующийСубъект
	|				ИЛИ &ХозяйствующийСубъект = ЗНАЧЕНИЕ(Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка))
	|ГДЕ
	|	НЕ СоответствиеНоменклатурыВЕТИС.Продукция ЕСТЬ NULL
	|		И (СоответствиеНоменклатурыВЕТИС.Продукция.Производители.Производитель = &Предприятие
	|			ИЛИ &Предприятие = ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка))
	|ИТОГИ ПО
	|	ТабличнаяЧасть.НомерСтроки
	|;");
	
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(,"НомерСтроки, Продукция, Номенклатура, Характеристика, Серия"));
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатурыВЕТИС"));
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		Если Отбор.Свойство("Предприятие") Тогда
			Запрос.УстановитьПараметр("Предприятие", Отбор.Предприятие);
		Иначе
			Запрос.УстановитьПараметр("Предприятие", Справочники.ПредприятияВЕТИС.ПустаяСсылка());
		КонецЕсли;
		Если Отбор.Свойство("ХозяйствующийСубъект") Тогда
			Запрос.УстановитьПараметр("ХозяйствующийСубъект", Отбор.ХозяйствующийСубъект);
		Иначе
			Запрос.УстановитьПараметр("ХозяйствующийСубъект", Справочники.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка());
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("Предприятие", Справочники.ПредприятияВЕТИС.ПустаяСсылка());
		Запрос.УстановитьПараметр("ХозяйствующийСубъект", Справочники.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка());
	КонецЕсли;
	
	ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтроки.Следующий() Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Получить(ВыборкаСтроки.НомерСтроки - 1);
		
		ВыборкаПродукция = ВыборкаСтроки.Выбрать();
		КоличествоСопоставлено = ВыборкаПродукция.Количество();
		Если КоличествоСопоставлено > 1 Тогда
			СтрокаТЧ.СопоставлениеТекст = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставлено);
		ИначеЕсли КоличествоСопоставлено = 1 Тогда
			СтрокаТЧ.СопоставлениеТекст = "";
		Иначе
			СтрокаТЧ.СопоставлениеТекст = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		Пока ВыборкаПродукция.Следующий() Цикл
			Если СтрокаТЧ.НоменклатураДляВыбора.НайтиПоЗначению(ВыборкаПродукция.Продукция) = Неопределено Тогда
				СтрокаТЧ.НоменклатураДляВыбора.Добавить(ВыборкаПродукция.Продукция);
			КонецЕсли;
		КонецЦикла;
		
		Если ПроверятьЗаполненнуюПродукцию Тогда
			Если СтрокаТЧ.НоменклатураДляВыбора.НайтиПоЗначению(СтрокаТЧ.Продукция) = Неопределено Тогда
				СтрокаТЧ.Продукция = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСопоставленныеТовары(ТабличнаяЧасть, НоменклатураДляВыбора = Неопределено, Продукция = Неопределено, ЗаписьЖурнала = Неопределено, ИспользоватьОтборПоЗаписямЖурнала = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСопоставленныеТовары();
	Запрос.УстановитьПараметр("ПустаяНоменклатура",                ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика",              ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяЗаписьЖурнала",               Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия",                       ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатурыВЕТИС"));
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии",        ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатурыВЕТИС"));
	Запрос.УстановитьПараметр("ИспользоватьОтборПоЗаписямЖурнала", ИспользоватьОтборПоЗаписямЖурнала);
	
	Если ЗначениеЗаполнено(Продукция) Тогда
		ПараметрыОтбора = Новый Структура("Продукция", Продукция);
		Если ЗначениеЗаполнено(ЗаписьЖурнала) Тогда
			ПараметрыОтбора.Вставить("ЗаписьСкладскогоЖурнала", ЗаписьЖурнала);
		КонецЕсли;
		Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(ПараметрыОтбора, "Продукция, Номенклатура, Характеристика, Серия, ЗаписьСкладскогоЖурнала, НомерСтроки"));
	Иначе
		Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(,"Продукция, Номенклатура, Характеристика, Серия, ЗаписьСкладскогоЖурнала, НомерСтроки"));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если НЕ НоменклатураДляВыбора = Неопределено Тогда
		Если НЕ ЗначениеЗаполнено(Продукция) Тогда
			НоменклатураДляВыбора.Загрузить(РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить());
		Иначе
			Выборка = РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выбрать();
			СтруктураПоиска = Новый Структура("Продукция, Номенклатура, Характеристика");
			Если ИспользоватьОтборПоЗаписямЖурнала Тогда
				СтруктураПоиска.Вставить("ЗаписьСкладскогоЖурнала");
			КонецЕсли;
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
				НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = НоменклатураДляВыбора.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаСопоставленныеТовары = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выгрузить();
	
	Возврат ТаблицаСопоставленныеТовары;
	
КонецФункции

Процедура ЗаполнитьСопоставленныеТовары(ТабличнаяЧасть, НоменклатураДляВыбора, Продукция = Неопределено, ЗаписьЖурнала = Неопределено, ИспользоватьОтборПоЗаписямЖурнала= Ложь, ТаблицаСопоставленныеТовары = Неопределено) Экспорт
	
	Если ТаблицаСопоставленныеТовары = Неопределено Тогда
		
		ТаблицаСопоставленныеТовары = ПолучитьСопоставленныеТовары(ТабличнаяЧасть, НоменклатураДляВыбора, Продукция, ЗаписьЖурнала, ИспользоватьОтборПоЗаписямЖурнала);
		
	КонецЕсли;
	
	Для каждого СтрокаСопоставление Из ТаблицаСопоставленныеТовары Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Получить(СтрокаСопоставление.НомерСтрокиТовара - 1);
		
		Если СтрокаСопоставление.Количество = 1 Тогда
			СтрокаТЧ.Номенклатура   = СтрокаСопоставление.Номенклатура;
			СтрокаТЧ.Характеристика = СтрокаСопоставление.Характеристика;
			СтрокаТЧ.СопоставлениеНоменклатура = Неопределено;
			СтрокаТЧ.СопоставлениеХарактеристика = Неопределено;
			Если ИспользоватьОтборПоЗаписямЖурнала Тогда
				СтрокаТЧ.Серия = СтрокаСопоставление.Серия;
			КонецЕсли;
		ИначеЕсли СтрокаСопоставление.Количество > 1 Тогда
			СтрокаТЧ.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), СтрокаСопоставление.Количество);
			СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		Иначе
			СтрокаТЧ.СопоставлениеНоменклатура   = НСтр("ru = '<Не сопоставлено>'");
			СтрокаТЧ.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область УсловноеОформление

Процедура УстановитьУсловноеОформлениеПоляПродукция(Форма, СтатусВЕТИСОформленоЧерезWEB, ИмяЭлемента = "ТоварыПродукция", ИмяТЧ = "Товары") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТЧ = "Объект." + ИмяТЧ + ".";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Продукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеТекст");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеТекст"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Продукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеТекст");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("ru='<Не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусВЕТИС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = СтатусВЕТИСОформленоЧерезWEB;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусВЕТИС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СтатусВЕТИСОформленоЧерезWEB;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПоляНоменклатура(Форма, ИмяЭлемента = "ТоварыНоменклатура", ИмяТЧ = "Товары") Экспорт
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТЧ = "Объект." + ИмяТЧ + ".";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеНоменклатура"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПоляХарактеристика(Форма, ИмяЭлемента = "ТоварыХарактеристика", ИмяТЧ = "Товары") Экспорт
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТЧ = "Объект." + ИмяТЧ + ".";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных(ИмяТЧ + "СопоставлениеХарактеристика"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеПоляКоличество(Форма, ИмяЭлемента = "ТоварыКоличество", ИмяТЧ = "Товары") Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ИмяТЧ = "Объект." + ИмяТЧ + ".";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТЧ + "Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

#КонецОбласти

Процедура УстановитьДоступностьПоляСтатус(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НЕ Объект.Проведен
		И НЕ ПравоДоступа("Изменение", Объект.Ссылка.Метаданные()) Тогда
		
		Элементы.СтатусВЕТИС.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Сопоставляет шапку документа-основания ВетИС с шапкой документа ВетИС.
//
// Параметры:
//  Источник - ДокументОбъект - Записываемый документ ВетИС или .
//  Отказ - Булево - иотказ от записи документа
//
Процедура ЗаполнитьСоответствиеОбъектовВЕТИСПриЗаписиДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ДокументыВЕТИС.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, "ДокументОснование")
			И ЗначениеЗаполнено(Источник.ДокументОснование) Тогда
			ЗаполнитьСоответствиеШапкиОбъектов(Источник.ДокументОснование, Источник);
		КонецЕсли;
		
	ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеВходящаяТранспортнаяОперацияВЕТИС.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		
		ЗаполнитьСоответствиеШапкиОбъектов(Источник,,"ВходящаяТранспортнаяОперацияВЕТИС");
		
	ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеИсходящаяТранспортнаяОперацияВЕТИС.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		
		ЗаполнитьСоответствиеШапкиОбъектов(Источник,,"ИсходящаяТранспортнаяОперацияВЕТИС");
		
	ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеИнвентаризацияПродукцииВЕТИС.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		
		ЗаполнитьСоответствиеШапкиОбъектов(Источник,,"ИнвентаризацияПродукцииВЕТИС");
		
	ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеПроизводственнаяОперацияВЕТИС.Тип.СодержитТип(ТипЗнч(Источник)) Тогда
		
		ЗаполнитьСоответствиеШапкиОбъектов(Источник,,"ПроизводственнаяОперацияВЕТИС");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСоответствиеШапкиОбъектов(ДокументОснование, ДокументОбъект = Неопределено, ТипОснования = Неопределено)
	
	Если ТипОснования <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон("ВЫБРАТЬ ПЕРВЫЕ 1
		|	СвязанныйДокумент.Ссылка
		|ИЗ
		|	Документ.%1 КАК СвязанныйДокумент
		|ГДЕ
		|	СвязанныйДокумент.ДокументОснование = &ДокументОснование
		|	И СвязанныйДокумент.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	СвязанныйДокумент.Ссылка.Дата Убыв", ТипОснования);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка;
		
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьСоответствиеШапкиОбъектов(ДокументОснование, ДокументОбъект);
	
КонецПроцедуры

// Сопоставляет продукцию ВЕТИС с номенклатурой.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  ОписаниеТабличнойЧасти - Строка, ТаблицаЗначений - имя табличной части или таблица значений для сопоставления.
//
Процедура ЗаписатьСоответствиеНоменклатуры(Объект, ОписаниеТабличнойЧасти = "Товары") Экспорт
	
	Если ТипЗнч(ОписаниеТабличнойЧасти) = Тип("Строка") Тогда
		КолонкиДляВыгрузки = "Номенклатура, Характеристика, Серия, Продукция, ЗаписьСкладскогоЖурнала";
		Данные = Объект[ОписаниеТабличнойЧасти].Выгрузить(, КолонкиДляВыгрузки);
	Иначе
		Данные = ОписаниеТабличнойЧасти;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.Номенклатура            КАК Номенклатура,
	|	Т.Характеристика          КАК Характеристика,
	|	Т.Серия                   КАК Серия,
	|	Т.Продукция               КАК Продукция,
	|	Т.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура            КАК Номенклатура,
	|	Т.Характеристика          КАК Характеристика,
	|	Т.Серия                   КАК Серия,
	|	Т.Продукция               КАК Продукция,
	|	ВЫБОР
	|		КОГДА Т.Серия НЕ В (&НезаполненныеЗначенияСерии) ТОГДА
	|			Т.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ
	|			&ПустаяЗаписьСкладскогоЖурнала
	|	КОНЕЦ КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ ТаблицаПредварительно
	|ИЗ
	|	ИсходныеДанные КАК Т
	|ГДЕ
	|	Т.ЗаписьСкладскогоЖурнала <> &ПустаяЗаписьСкладскогоЖурнала
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	&ПустаяСерия,
	|	Т.Продукция,
	|	Т.ЗаписьСкладскогоЖурнала
	|ИЗ
	|	ИсходныеДанные КАК Т
	|ГДЕ
	|	Т.ЗаписьСкладскогоЖурнала = &ПустаяЗаписьСкладскогоЖурнала
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Продукция,
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура            КАК Номенклатура,
	|	Т.Характеристика          КАК Характеристика,
	|	Т.Серия                   КАК Серия,
	|	Т.Продукция               КАК Продукция,
	|	Т.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаПредварительно КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК УжеСопоставлено
	|		ПО УжеСопоставлено.Номенклатура            = Т.Номенклатура
	|		И  УжеСопоставлено.Характеристика          = Т.Характеристика
	|		И  УжеСопоставлено.Серия                   = Т.Серия
	|		И  УжеСопоставлено.Продукция               = Т.Продукция
	|		И  УжеСопоставлено.ЗаписьСкладскогоЖурнала = Т.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	Т.Продукция <> ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)
	|	И Т.Номенклатура НЕ В (&НезаполненныеЗначенияНоменклатура)
	|	И УжеСопоставлено.Номенклатура ЕСТЬ NULL
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЗаписьСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура            КАК Номенклатура,
	|	Таблица.Характеристика          КАК Характеристика,
	|	Таблица.Серия                   КАК Серия,
	|	Таблица.Продукция               КАК Продукция,
	|	Таблица.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	МАКСИМУМ(ЕСТЬNULL(Сопоставлено.Порядок, ЕСТЬNULL(СопоставленоБЕЗСерии.Порядок, 0))) КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура            = Таблица.Номенклатура
	|		 И Сопоставлено.Характеристика          = Таблица.Характеристика
	|		 И Сопоставлено.ЗаписьСкладскогоЖурнала = Таблица.ЗаписьСкладскогоЖурнала
	|		 И Сопоставлено.Серия                   = Таблица.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СопоставленоБЕЗСерии
	|		ПО СопоставленоБЕЗСерии.Номенклатура            = Таблица.Номенклатура
	|		 И СопоставленоБЕЗСерии.Характеристика          = Таблица.Характеристика
	|		 И СопоставленоБЕЗСерии.ЗаписьСкладскогоЖурнала = Таблица.ЗаписьСкладскогоЖурнала
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.Продукция,
	|	Таблица.ЗаписьСкладскогоЖурнала");
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("НезаполненныеЗначенияНоменклатура", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.Номенклатура));
	Запрос.УстановитьПараметр("ПустаяЗаписьСкладскогоЖурнала", Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСерия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры));
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа(Метаданные.ОпределяемыеТипы.СерияНоменклатуры));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыВЕТИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.Продукция.Установить(Выборка.Продукция, Истина);
		НаборЗаписей.Отбор.ЗаписьСкладскогоЖурнала.Установить(Выборка.ЗаписьСкладскогоЖурнала, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		НоваяЗапись.Номенклатура            = Выборка.Номенклатура;
		НоваяЗапись.Характеристика          = Выборка.Характеристика;
		НоваяЗапись.Серия                   = Выборка.Серия;
		НоваяЗапись.Продукция               = Выборка.Продукция;
		НоваяЗапись.ЗаписьСкладскогоЖурнала = Выборка.ЗаписьСкладскогоЖурнала;
		НоваяЗапись.Порядок                 = Выборка.Порядок + 1;
		
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыВЕТИС);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры ВетИС произошла ошибка:'")
			+ Символы.ПС + "%1";
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

// Сворачивает остатки по сериям и записям складского журнала регистра соответствие номенклатуры ВЕТИС
//
Процедура СверткаРегистраСоответствиеНоменклатурыВЕТИС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыВЕТИС);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыВЕТИС.Продукция КАК Продукция,
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыВЕТИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	МИНИМУМ(СоответствиеНоменклатурыВЕТИС.Порядок) КАК Порядок
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатурыВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОстаткиПродукцииВЕТИС КАК ОстаткиПродукцииВЕТИС
	|		ПО СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала = ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала
	|		 И ОстаткиПродукцииВЕТИС.КоличествоВЕТИС <> 0
	|ГДЕ
	|	СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И ОстаткиПродукцииВЕТИС.ЗаписьСкладскогоЖурнала ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыВЕТИС.Продукция,
	|	СоответствиеНоменклатурыВЕТИС.Номенклатура,
	|	СоответствиеНоменклатурыВЕТИС.Характеристика,
	|	СоответствиеНоменклатурыВЕТИС.ЗаписьСкладскогоЖурнала
	|";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Свертка регистра Соответствие номенклатуры ВЕТИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное задание ""Свертка регистра Соответствие номенклатуры ВЕТИС"".'"));
			
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыВЕТИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
			НаборЗаписей.Отбор.Продукция.Установить(Выборка.Продукция, Истина);
			НаборЗаписей.Отбор.ЗаписьСкладскогоЖурнала.Установить(Выборка.ЗаписьСкладскогоЖурнала, Истина);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				
				ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
				                         |%1'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				
				ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыВЕТИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
			НаборЗаписей.Отбор.Продукция.Установить(Выборка.Продукция, Истина);
			НаборЗаписей.Отбор.ЗаписьСкладскогоЖурнала.Установить(Справочники.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка(), Истина);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Номенклатура   = Выборка.Номенклатура;
			НоваяЗапись.Характеристика = Выборка.Характеристика;
			НоваяЗапись.Продукция      = Выборка.Продукция;
			НоваяЗапись.Порядок        = Выборка.Порядок;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				
				ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
				|%1'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				
				ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Свертка регистра Соответствие номенклатуры ВЕТИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Завершено регламентное задание ""Свертка регистра Соответствие номенклатуры ВЕТИС"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

#Область Регионализация

// Обрабатывает результат операции запроса измененных записей складского журнала.
//
Функция ОбработатьРезультатЗапросаИзмененныхСведенийОВетеринарныхОперациях(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения = Новый Массив;
	
	РезультатДобавленияЗаписей = ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
	КонецЕсли;
	
	УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = Неопределено;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = Неопределено;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Сообщения

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//
//  ИменаСправочников - Соответствие - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
		ИменаСправочников.Вставить("ВЕТИСПрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает сообщение к передаче в сервис ВетИС.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст исходящего сообщения.
//  Реквизиты - Структура - Реквизиты передаваемого сообщения и свойства очереди, например:
//   * ТипСообщения - ПеречислениеСсылка.ТипыЗапросовИС - Тип сообщения.
//   * Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция.
//   * Документ - ДокументСсылка - Документ.
//   * СообщениеОснование - СправочникСсылка.ВЕТИСПрисоединенныеФайлы - Сообщение-основание
//   * Описание - Строка - Описание сообщения.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаВЕТИС - Формат обмена.
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//   * Версия - Число - Номер версии.
//  РеквизитыОчереди - Структура - Параметры очереди сообщений ВетИС
//
// Возвращаемое значение:
//  Структура - результат подготовки сообщения к отправке с полями:
//    * НовыйСтатус
//    * ИсходящееСообщение
//    * ТекстОшибки
//    * ТребуетсяРасчетОчереди
//
Функция ПодготовитьСообщениеКПередаче(ТекстСообщенияXML, Реквизиты, РеквизитыОчереди)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение",     Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",            "");
	ВозвращаемоеЗначение.Вставить("ТребуетсяРасчетОчереди", Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если ЭтоЗапросСписка(Реквизиты.Операция) И Не ЗначениеЗаполнено(Реквизиты.Документ) Тогда
			
			ИсходящееСообщение = Строка(Новый УникальныйИдентификатор);
			
		Иначе
			
			ИсходящееСообщение = ДобавитьЗаписьВПротоколОбмена(
				ТекстСообщенияXML,
				Реквизиты).Ссылка;
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
		
		РезультатДобавленияВОчередь = ДобавитьСообщениеВОчередьНаПередачуДанных(ИсходящееСообщение, РеквизитыОчереди);
		ВозвращаемоеЗначение.ТребуетсяРасчетОчереди = РезультатДобавленияВОчередь.ТребуетсяРасчетОчереди;
		
		Если ЗначениеЗаполнено(Реквизиты.Документ) Тогда
			
			ПолноеИмя = Реквизиты.Документ.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПодготовкиКПередачеДанных(Реквизиты.Документ, Реквизиты.Операция);
			
		Иначе
			НовыйСтатус = Неопределено;
		КонецЕсли;
		
		ВозвращаемоеЗначение.НовыйСтатус = НовыйСтатус;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При подготовке к передаче сообщения по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			Реквизиты.Документ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ИнтеграцияВЕТИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Добавить сообщение в регистра сведений ОчередьПередачиДанныхВЕТИС.
//
// Параметры:
//  Сообщение - Справочник.ВЕТИСПрисоединенныеФайлы - сообщение, которое добавляется в очередь.
//  Реквизиты - Структура                           - реквизиты очереди сообщений ВетИС.
//
Функция ДобавитьСообщениеВОчередьНаПередачуДанных(Сообщение, Реквизиты)
	
	ТребуетсяРасчетОчереди = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяЗапись = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьМенеджерЗаписи();
	НоваяЗапись.Сообщение            = Сообщение;
	НоваяЗапись.ДатаСоздания         = ТекущаяУниверсальнаяДата();
	НоваяЗапись.ХозяйствующийСубъект = Реквизиты.ХозяйствующийСубъект;
	НоваяЗапись.Предприятие          = Реквизиты.Предприятие;
	НоваяЗапись.ДокументОснование    = Реквизиты.ДокументОснование;
	НоваяЗапись.ЗагружатьПосле       = Реквизиты.ЗагружатьПосле;
	НоваяЗапись.Операция             = Реквизиты.Операция;
	НоваяЗапись.ПараметрыЗапроса             = Новый ХранилищеЗначения(Реквизиты.ПараметрыЗапроса);
	НоваяЗапись.РеквизитыИсходящегоСообщения = Новый ХранилищеЗначения(Реквизиты.РеквизитыИсходящегоСообщения);
	НоваяЗапись.Записать();
	
	Если Реквизиты.ЗаписиСкладскогоЖурнала <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из Реквизиты.ЗаписиСкладскогоЖурнала Цикл
			
			ТребуетсяРасчетОчереди = Истина;
			
			НоваяЗапись = РегистрыСведений.ЗаписиСкладскогоЖурналаКПередачеВЕТИС.СоздатьМенеджерЗаписи();
			НоваяЗапись.Сообщение               = Сообщение;
			НоваяЗапись.ЗаписьСкладскогоЖурнала = КлючИЗначение.Ключ;
			
			НоваяЗапись.Записать();
			
		КонецЦикла
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяРасчетОчереди", ТребуетсяРасчетОчереди);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ОбновитьИдентификаторЗаявкиСообщенияОчереди(Сообщение, ИдентификаторЗаявки, РеквизитыВходящегоСообщения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДатаСоздания");
	
	ДатаСоздания = ТекущаяУниверсальнаяДата();
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(Сообщение);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Выбран() Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьНабора.ИдентификаторЗаявки = ИдентификаторЗаявки;
			Если РеквизитыВходящегоСообщения <> Неопределено Тогда
				ЗаписьНабора.РеквизитыВходящегоСообщения = РеквизитыВходящегоСообщения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	ВозвращаемоеЗначение.ДатаСоздания = ДатаСоздания;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Удалить сообщение из регистра сведений ОчередьПолученияРезультатовОбработкиЗаявокВЕТИС.
//
// Параметры:
//  Сообщение - Справочник.ВЕТИСПрисоединенныеФайлы - сообщение, которое удаляется из очереди.
//
Процедура УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(Сообщение, УчитыватьОчередьЗаписейСкладскогоЖурнала) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(Сообщение, Истина);
	НаборЗаписей.Записать();
	
	Если УчитыватьОчередьЗаписейСкладскогоЖурнала Тогда
		
		НаборЗаписей = РегистрыСведений.ЗаписиСкладскогоЖурналаКПередачеВЕТИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сообщение.Установить(Сообщение, Истина);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Добавить запись в протокол обмена.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML.
//  Реквизиты - Структура - Значения реквизитов сообщения.
//  ПроверятьХешБезСсылки - Булево - Признак проверки хеша без ссылки.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовоеСообщение - Булево - Это новое сообщение.
//   * Ссылка - СправочникСсылка.ВЕТИСПрисоединенныеФайлы - Ссылка на присоединенный файл.
//
Функция ДобавитьЗаписьВПротоколОбмена(ТекстСообщенияXML, Реквизиты, ПроверятьХешБезСсылки = Ложь, ЗаписатьПринудительно = Ложь) Экспорт
	
	Реквизиты.Вставить("ВладелецФайлов", Реквизиты.ХозяйствующийСубъект);
	Возврат ИнтеграцияИС.ДобавитьЗаписьВПротоколОбмена(
		Метаданные.Справочники.ВЕТИСПрисоединенныеФайлы, ТекстСообщенияXML,
		Реквизиты, ПроверятьХешБезСсылки, ЗаписатьПринудительно);
	
КонецФункции

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументаВЕТИС(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлыВЕТИС(Источник, Ложь);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловХозяйствующегоСубъекта(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлыВЕТИС(Источник, Истина);
	
КонецПроцедуры

Функция ДатаФормированияРезультата(ЭлементОчереди, ПараметрыОбмена, ДанныеВыполненияЗаявки = Неопределено) Экспорт
	
	РеквизитыВходящегоСообщения = Неопределено;
	Если ЭлементОчереди.РеквизитыВходящегоСообщения <> Неопределено Тогда
		РеквизитыВходящегоСообщения = ЭлементОчереди.РеквизитыВходящегоСообщения.Получить();
	КонецЕсли;
	
	Если РеквизитыВходящегоСообщения = Неопределено
		Или Не РеквизитыВходящегоСообщения.Свойство("ДатаФормированияРезультата") Тогда
		
		Если ТипЗнч(ЭлементОчереди.Сообщение) = Тип("СправочникСсылка.ВЕТИСПрисоединенныеФайлы") Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ВЕТИСПрисоединенныеФайлыВходящие.Ссылка                       КАК Ссылка,
				|	ВЕТИСПрисоединенныеФайлыВходящие.СтатусОбработки              КАК СтатусОбработки,
				|	ВЕТИСПрисоединенныеФайлыВходящие.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная
				|ИЗ
				|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлыВходящие
				|ГДЕ
				|	ВЕТИСПрисоединенныеФайлыВходящие.СообщениеОснование = &Сообщение
				|УПОРЯДОЧИТЬ ПО
				|	ВЕТИСПрисоединенныеФайлыВходящие.ДатаМодификацииУниверсальная УБЫВ
				|");
			Запрос.УстановитьПараметр("Сообщение", ЭлементОчереди.Сообщение);
			РеквизитыСообщения = Запрос.Выполнить().Выбрать();
			Если РеквизитыСообщения.Следующий() Тогда
				
				Если РеквизитыСообщения.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаОтправки Тогда
					
					ДатаФормированияРезультата = РеквизитыСообщения.ДатаМодификацииУниверсальная;
					Источник = СтрШаблон(НСтр("ru = 'Реквизит ДатаМодификацииУниверсальная сообщения %1'"), ЭлементОчереди.Сообщение);
					
				Иначе
					
					ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(РеквизитыСообщения.Ссылка);
					
					РезультатОтправкиЗапроса = Новый Структура;
					РезультатОтправкиЗапроса.Вставить("КодСостояния",                200);
					РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияSOAP", ТекстСообщенияXML);
					
					ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
					ПараметрыЗапроса.ИмяМетода        = "submitApplication";
					ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.ЗаявкиВЕТИС.ПространствоИмен;
					ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.ОбработкаЗаявок;
					ПараметрыЗапроса.ИмяЭлемента      = "application";
					ПараметрыЗапроса.Представление    = НСтр("ru = 'заявка'");
					
					ДанныеОбработки = ИнтеграцияВЕТИС.ОбработатьОтветНаПередачуДанных(РезультатОтправкиЗапроса, ПараметрыЗапроса, Неопределено, ПараметрыОбмена);
					
					ДатаФормированияРезультата = УниверсальноеВремя(ДанныеОбработки.Результат.rcvDate);
					Источник = СтрШаблон(НСтр("ru = 'Реквизит rcvDate ответа на передачу данных %1, приведен к универсальному времени'"), РеквизитыСообщения.Ссылка);
					
				КонецЕсли;
				
			Иначе
				
				// Для обратной совместимости
				Если ДанныеВыполненияЗаявки = Неопределено Тогда
					ДатаФормированияРезультата = УниверсальноеВремя(ЭлементОчереди.ДатаСоздания);
					Источник = НСтр("ru = 'Реквизит ДатаСоздания элемента очереди, приведен к универсальному времени'");
				Иначе
					ДатаФормированияРезультата = УниверсальноеВремя(ДанныеВыполненияЗаявки.issueDate);
					Источник = НСтр("ru = 'Реквизит issueDate данных выполненения заявки, приведен к универсальному времени'");
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Для запросов изменений и прочих операций
			
			// Для обратной совместимости
			Если ДанныеВыполненияЗаявки = Неопределено Тогда
				ДатаФормированияРезультата = УниверсальноеВремя(ЭлементОчереди.ДатаСоздания);
				Источник = НСтр("ru = 'Реквизит ДатаСоздания элемента очереди, приведен к универсальному времени'");
			Иначе
				ДатаФормированияРезультата = УниверсальноеВремя(ДанныеВыполненияЗаявки.issueDate);
				Источник = НСтр("ru = 'Реквизит issueDate данных выполненения заявки, приведен к универсальному времени'");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДатаФормированияРезультата = РеквизитыВходящегоСообщения.ДатаФормированияРезультата;
		Источник = НСтр("ru = 'Реквизит ДатаФормированияРезультата входящего сообщения'");
		
	КонецЕсли;
	
	ДанныеФормированияРезультата = Новый Структура;
	ДанныеФормированияРезультата.Вставить("Дата",     ДатаФормированияРезультата);
	ДанныеФормированияРезультата.Вставить("Источник", Источник);
	
	Возврат ДанныеФормированияРезультата;
	
КонецФункции

Функция ДатаФормированияРезультатаПоСсылке(ДокументСсылка, ПараметрыОбмена) Экспорт
	
	ОперацииСОшибкойСервиса = Новый Массив;
	ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеВходящейПартии);
	ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеРезультатовИнвентаризации);
	ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
	ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОбъединениеЗаписейСкладскогоЖурнала);
	ОперацииСОшибкойСервиса.Добавить(Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЕТИСПрисоединенныеФайлыВходящие.Ссылка                       КАК Ссылка,
		|	ВЕТИСПрисоединенныеФайлыВходящие.СтатусОбработки              КАК СтатусОбработки,
		|	ВЕТИСПрисоединенныеФайлыВходящие.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная
		|ИЗ
		|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлыВходящие
		|ГДЕ
		|	ВЕТИСПрисоединенныеФайлыВходящие.Документ = &Документ
		|	И ВЕТИСПрисоединенныеФайлыВходящие.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
		|	И ВЕТИСПрисоединенныеФайлыВходящие.Операция В (&Операции)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЕТИСПрисоединенныеФайлыВходящие.ДатаМодификацииУниверсальная УБЫВ");
	
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.УстановитьПараметр("Операции", ОперацииСОшибкойСервиса);
	
	РеквизитыСообщения = Запрос.Выполнить().Выбрать();
	Если РеквизитыСообщения.Следующий() Тогда
		
		Если РеквизитыСообщения.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаОтправки Тогда
			
			ДатаФормированияРезультата = РеквизитыСообщения.ДатаМодификацииУниверсальная;
			Источник = СтрШаблон(НСтр("ru = 'Реквизит ДатаМодификацииУниверсальная сообщения %1'"), РеквизитыСообщения.Ссылка);
			
		Иначе
			
			ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(РеквизитыСообщения.Ссылка);
			
			РезультатОтправкиЗапроса = Новый Структура;
			РезультатОтправкиЗапроса.Вставить("КодСостояния",                200);
			РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияSOAP", ТекстСообщенияXML);
			
			ПараметрыЗапроса = ИнтеграцияВЕТИСКлиентСервер.ПараметрыЗапросаЭлементаКлассификатора();
			ПараметрыЗапроса.ИмяМетода        = "submitApplication";
			ПараметрыЗапроса.ПространствоИмен = Метаданные.ПакетыXDTO.ЗаявкиВЕТИС.ПространствоИмен;
			ПараметрыЗапроса.Сервис           = Перечисления.СервисыВЕТИС.ОбработкаЗаявок;
			ПараметрыЗапроса.ИмяЭлемента      = "application";
			ПараметрыЗапроса.Представление    = НСтр("ru = 'заявка'");
			
			ДанныеОбработки = ИнтеграцияВЕТИС.ОбработатьОтветНаПередачуДанных(РезультатОтправкиЗапроса, ПараметрыЗапроса, Неопределено, ПараметрыОбмена);
			
			ДатаФормированияРезультата = УниверсальноеВремя(ДанныеОбработки.Результат.rcvDate);
			Источник = СтрШаблон(НСтр("ru = 'Реквизит rcvDate ответа на передачу данных %1, приведен к универсальному времени'"), РеквизитыСообщения.Ссылка);
			
		КонецЕсли;
		
		ДанныеФормированияРезультата = Новый Структура;
		ДанныеФормированияРезультата.Вставить("Дата",     ДатаФормированияРезультата);
		ДанныеФормированияРезультата.Вставить("Источник", Источник);
		
		Возврат ДанныеФормированияРезультата;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Получить статусы ВЕТИС, цвет текста которых "требует внимания ВЕТИС"
// 
// Возвращаемое значение:
//  Массив - Статусы ВЕТИС, для которых требуется устанавливать цвет "требует внимания ВЕТИС"
//
Функция СтатусыЦветТекстаТребуетВниманияВЕТИС() Экспорт
	
	СтатусыЦветТекстаТребуетВниманияВЕТИС = Новый Массив;
	
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.Ошибка);
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка);
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиВходящихТранспортныхОперацийВЕТИС.ЗапросИзмененияНомеровТранспортныхСредствОшибка);
	
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка);
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка);
	
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОтклоненВЕТИС);
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОшибкаПередачи);
	
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС.ОтклоненВЕТИС);
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиИнвентаризацийПродукцииВЕТИС.ОшибкаПередачи);
	
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиЗапросовСкладскогоЖурналаВЕТИС.ОтклоненВЕТИС);
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиЗапросовСкладскогоЖурналаВЕТИС.ОшибкаПередачи);
	
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОтклоненВЕТИС);
	СтатусыЦветТекстаТребуетВниманияВЕТИС.Добавить(Перечисления.СтатусыОбработкиОбъединенийЗаписейСкладскогоЖурналаВЕТИС.ОшибкаПередачи);
	
	Возврат СтатусыЦветТекстаТребуетВниманияВЕТИС;
	
КонецФункции

// Получить представление статуса ВЕТИС.
//
// Параметры:
//  СтатусВЕТИС                - ПеречислениеСсылка - Статус документа ВЕТИС.
//  ВходящиеДальнейшееДействие - Массив,ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - входящие дальнейшие действия.
//  ДопустимыеДействия         - Список разрешенных дальнейших действий.
//  НедоступныеДействия        - Соответствие - описание недоступных дальнейших действий.
// 
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса ВЕТИС.
//
Функция ПредставлениеСтатусаВЕТИС(СтатусВЕТИС, ВходящиеДальнейшееДействие, ДопустимыеДействия, НедоступныеДействия) Экспорт
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС") Тогда
		МассивДопустимыеДействия = Новый Массив;
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(СтатусВЕТИС) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВниманияВЕТИС = СтатусыЦветТекстаТребуетВниманияВЕТИС();
		
		Если СтатусыЦветТекстаТребуетВниманияВЕТИС.Найти(СтатусВЕТИС) <> Неопределено Тогда
			СтатусВЕТИСПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					Строка(СтатусВЕТИС),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусВЕТИСПредставление = Новый ФорматированнаяСтрока(Строка(СтатусВЕТИС));
		КонецЕсли;
		
	Иначе
		СтатусВЕТИСПредставление = СтатусВЕТИС;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС") И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусВЕТИСПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки = "";
		ЯвляетсяГиперссылкой = Истина;
		Если ДопустимоеДальнейшееДействие(ДальнейшееДействие, МассивДопустимыеДействия) Тогда
			Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные Тогда
				ТекстГиперссылки = "ПередатьДанные";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите Тогда
				ТекстГиперссылки = "Оформить";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеОперацию Тогда
				ТекстГиперссылки = "ОтменитьОперацию";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОтменитеПередачуДанных Тогда
				ТекстГиперссылки = "ОтменитьПередачу";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения Тогда
				ТекстГиперссылки = "ПроверитьВозможностьПеремещения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ЗаполнитеАктНесоответствия Тогда
				ТекстГиперссылки = "ОткрытьАктОНесоответствии";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеУсловияПеремещения Тогда
				ТекстГиперссылки = "ПодтвердитеУсловияПеремещения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут Тогда
				ТекстГиперссылки = "ИзменитьПродукциюИлиМаршрут";
				ЯвляетсяГиперссылкой = Ложь;
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВнеситеНомераТранспортныхСредств Тогда
				ТекстГиперссылки = "ВнестиНомераТранспортныхСредств";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.УкажитеНомераТранспортныхСредств Тогда
				ТекстГиперссылки = "УказатьНомераТранспортныхСредств";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb Тогда
				ТекстГиперссылки = "ПодтвердитьКорректностьДокументаСозданногоЧерезWeb";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных Тогда
				ТекстГиперссылки = "ПроверитьКорректностьДанных";
			КонецЕсли;
		КонецЕсли;
		НетДоступа = Ложь;
		Если НедоступныеДействия.Получить(ДальнейшееДействие) <> Неопределено Тогда
			ТекстГиперссылки = "НетДоступа" + НедоступныеДействия.Получить(ДальнейшееДействие);
			НетДоступа = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			Если НЕ ЯвляетсяГиперссылкой Тогда
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					НРег(Строка(ДальнейшееДействие)));
			Иначе
				
				Если НетДоступа Тогда
					ЦветСтиля = ЦветаСтиля.СтатусОбработкиПередаетсяГосИС;
				Иначе
					ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
				КонецЕсли;
				
				СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
					НРег(Строка(ДальнейшееДействие)),
					Новый Шрифт(,,,,Истина),
					ЦветСтиля,
					,
					ТекстГиперссылки);
			КонецЕсли;
			
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусВЕТИСПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусВЕТИСПредставление;

КонецФункции

// Проверяет, имеется ли выбранное действие в массиве допустимых действий
//
// Параметры:
//  ДальнейшееДействие - Перечисления.ДальнейшееДействиеВЕТИС - выбранное действие.
//  ДопустимыеДействия - Массив - массив допустимых действий.
// 
// Возвращаемое значение:
//  Булево - Истина, если действие допустимо, Ложь в обратном случае.
//
Функция ДопустимоеДальнейшееДействие(ДальнейшееДействие, ДопустимыеДействия)
	
	Возврат ДопустимыеДействия.Найти(ДальнейшееДействие) <> Неопределено;
	
КонецФункции

// Возвращает признак, что объект удален в ВЕТИС
//
// Параметры:
//  Статус	 - 	 - 
// 
// Возвращаемое значение:
//  Булево - признак удаления объекта в ВЕТИС.
//
Функция СтатусУдаленногоОбъекта(Статус) Экспорт
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Удален);
	МассивСтатусов.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения);
	МассивСтатусов.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения);
	МассивСтатусов.Добавить(Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеРазделения);
	
	Возврат МассивСтатусов.Найти(Статус) <> Неопределено;
КонецФункции

Процедура ЗаписатьСтатусДокументаВЕТИСПоУмолчанию(Источник) Экспорт

	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
	             И Источник.ДополнительныеСвойства.ЭтоНовый;
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовВЕТИС.ЗначенияПоУмолчанию(Источник.Ссылка);
	
	РегистрыСведений.СтатусыДокументовВЕТИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

// Рассчитать необходимость обновления движений в зависимости от статуса.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость обновления движений.
//
Функция СтатусТребуетОбновленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусТребуетДобавленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус)
	    Или СтатусТребуетУдаленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус);
	
КонецФункции

// Рассчитать необходимость добавления движений в зависимости от статуса.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость добавления движений.
//
Функция СтатусТребуетДобавленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусыДвижений.Найти(ПредыдущийСтатус) = Неопределено
	      И СтатусыДвижений.Найти(НовыйСтатус) <> Неопределено;
	
КонецФункции

// Рассчитать необходимость удаления движений в зависимости от статуса.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость удаления движений.
//
Функция СтатусТребуетУдаленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусыДвижений.Найти(ПредыдущийСтатус) <> Неопределено
	      И СтатусыДвижений.Найти(НовыйСтатус) = Неопределено;
	
КонецФункции

#КонецОбласти

#Область СтатусыОформления

// Возвращает метаданные реквизита для хранения документа-основания в документе ВЕТИС.
//
// Параметры:
//	МетаданныеДокументаВЕТИС - ОбъектМетаданных:Документ - метаданные документа из ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//	ОбъектМетаданных:Реквизит - реквизит документа основания в указанном документе ВЕТИС
//
Функция РеквизитДокументОснованиеДокументаВЕТИС(МетаданныеДокументаВЕТИС) Экспорт
	
	Возврат ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокументаВЕТИС);
	
КонецФункции

// Возвращает допустимые типы документа-основания для указанного документа ВЕТИС.
//
// Параметры:
//	МетаданныеДокументаВЕТИС - ОбъектМетаданных:Документ - метаданные документа из ОпределяемыйТип.ДокументыВЕТИСПоддерживающиеСтатусыОформления
//
// Возвращаемое значение:
//	ОписаниеТипов - ОпределяемыйТип.Основание<МетаданныеДокументаВЕТИС.Имя>.Тип
//		тип реквизита ДокументОснование указанного документа ВЕТИС
//
Функция ДокументыОснованияДляДокументаВЕТИС(МетаданныеДокументаВЕТИС) Экспорт
	
	ТипыОснования = РеквизитДокументОснованиеДокументаВЕТИС(МетаданныеДокументаВЕТИС).Тип;
	
	Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		ТипыОснования = Новый ОписаниеТипов(ТипыОснования, "СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС");
	КонецЕсли;
	
	Возврат ТипыОснования;
	
КонецФункции

Процедура ПриСозданииНаСервереФормыСпискаДокументовВЕТИС(Форма, ИменаСписков, ИменаСписковКОформлению) Экспорт
	
	ИмяДокумента = ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(Форма, Ложь);
	
	Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено
		ИЛИ НЕ Метаданные.ОпределяемыеТипы.ДокументыВЕТИСПоддерживающиеСтатусыОформления.Тип.СодержитТип(Тип("ДокументСсылка." + ИмяДокумента)) Тогда
		Возврат;
	КонецЕсли;
	
	МетаРеквизитОснование      = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(Метаданные.Документы[ИмяДокумента]);
	ТипыДокументаОснования     = МетаРеквизитОснование.Тип.Типы();
	СтрокиСоединенияДокументов = Новый Массив;
	СтрокиОтбораДокументов     = Новый Массив;
	
	// Подготовим строки соединения и отбора по доступным документам-основаниям.
	Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
		
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим соединение с документом-основанием для RLS.
		СтрокиСоединенияДокументов.Добавить("	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК ДоступКДокументу" + МетаданныеОснования.Имя + "
			|		ПО Таблица.ДокументОснование = ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка");
		
		СтрокиОтбораДокументов.Добавить("ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
		
	КонецЦикла;
	
	Если СтрокиОтбораДокументов.Количество() = 0 Тогда
		
		// Нет ни одного доступного документа-основания.
		ТекстСоединения = "";
		ТекстОтбора =     " И ЛОЖЬ";
		
	Иначе
		
		ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
		ТекстОтбора     = " ИЛИ " + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + " ИЛИ ");
		
	КонецЕсли;
	
	//Выполним общие действия для всех динамических список формы.
	ИменаВсехСписков = ИменаСписков + ?(ИменаСписковКОформлению = "" ИЛИ ИменаСписков = "", "", ", ") + ИменаСписковКОформлению;
	СпискиКОформлению = Новый Структура(ИменаСписковКОформлению);
	
	Для Каждого ИмяСписка Из Новый Структура(ИменаВсехСписков) Цикл
		
		Список = Форма[ИмяСписка.Ключ];
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"ПустойТорговыйОбъект",
			ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ТорговыйОбъектВЕТИС"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"ПустойПроизводственныйОбъект",
			ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ПроизводственныйОбъектИС"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"ПустойДокументОснование",
			ИнтеграцияИС.МассивПустыхЗначенийСоставногоТипа(МетаРеквизитОснование.Тип));
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Список,
			"БезОтбораПоОрганизацииВЕТИС",
			Истина);
		
		Список.ТекстЗапроса = СтрЗаменить(
			Список.ТекстЗапроса,
			"//%СоединениеСОснованиями%",
			?(СпискиКОформлению.Свойство(ИмяСписка.Ключ),
				СтрЗаменить(ТекстСоединения, ".ДокументОснование", ".Основание"),
				ТекстСоединения));
		
		Список.ТекстЗапроса = СтрЗаменить(
			Список.ТекстЗапроса,
			"//%ОтборПоДоступнымОснованиям%",
			ТекстОтбора);
		
	КонецЦикла;
		
	УстановитьВидимостьКомандыВыполнитьОбмен(Форма, "СписокВыполнитьОбмен");
	
КонецПроцедуры

Функция ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовВЕТИС.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОписаниеОформленныхДокументовВЕТИС(МетаданныеДокументаВЕТИС, ДокументОснование, ДокументыПоОснованию, СтатусыОформления) Экспорт
	
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокументаВЕТИС);
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокументаВЕТИС)
		И МетаданныеДокументаВЕТИС <> Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС;
	
	Если НЕ ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДокументов 				  = ДокументыПоОснованию[МетаданныеДокументаВЕТИС.Имя];
	ШаблонПредставленияДокументаВЕТИС = ШаблонПредставленияДокументаВЕТИСДляПоляИнтеграции(МетаданныеДокументаВЕТИС, ДокументОснование);
	
	АрхивныйСтатус = Ложь;
	Если СтатусыОформления.Свойство(МетаданныеДокументаВЕТИС.Имя) Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокументаВЕТИС.Имя].Статус;
		АрхивныйСтатус   = СтатусыОформления[МетаданныеДокументаВЕТИС.Имя].Архивный;
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовГосИС.ПустаяСсылка();
	КонецЕсли;
	
	ИмяКоманды   = Неопределено;
	ТекстНадписи = Неопределено;
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		Если МассивДокументов.Количество() = 1 Тогда
			
			Если АрхивныйСтатус Тогда
				ИмяКоманды = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыОткрытьПротоколОбмена;
			ИначеЕсли СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
				ИмяКоманды = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыОткрытьПротоколОбмена;
			Иначе
				ИмяКоманды = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыОткрыть;
			КонецЕсли;
			
			Статус = МассивДокументов[0].Статус;
			
			ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставленияДокументаВЕТИС.ПредставлениеДокумента,
				Статус);
				
			НуженРазделительВТексте = ЗначениеЗаполнено(Статус);
			
		Иначе
			
			ИмяКоманды   = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыОткрытьПротоколОбмена;
			Если АрхивныйСтатус Тогда
				ТекстНадписи = ШаблонПредставленияДокументаВЕТИС.СтатусОформленияАрхивный;
			Иначе
				ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонПредставленияДокументаВЕТИС.ПредставлениеНесколькихДокументов,
					СокрЛП(МассивДокументов.Количество()));
			КонецЕсли;
			
			НуженРазделительВТексте = Истина;
			
		КонецЕсли;
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено
			И Не АрхивныйСтатус Тогда
			ТекстНадписи = ТекстНадписи + ?(НуженРазделительВТексте, ", ", "") + СокрЛП(СтатусОформления);
		КонецЕсли;
		
	Иначе
		
		Если Не АрхивныйСтатус И СтатусОформления <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = ШаблонПредставленияДокументаВЕТИС.ПредставлениеКомандыСоздать;
				ИмяКоманды   = ШаблонПредставленияДокументаВЕТИС.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = ШаблонПредставленияДокументаВЕТИС.ДокументНеСоздан;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекстНадписи) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныйТекстНадписи = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		?(ЗначениеЗаполнено(ИмяКоманды), ЦветаСтиля.ГиперссылкаЦвет, Неопределено),
		,
		ИмяКоманды);
	
	Описание = Новый Структура;
	Описание.Вставить("ТекстНадписи",        ФорматированныйТекстНадписи);
	Описание.Вставить("СтатусОформления",    СтатусОформления);
	Описание.Вставить("МассивДокументов",    МассивДокументов);
	Описание.Вставить("МетаданныеДокумента", МетаданныеДокументаВЕТИС);
	
	Возврат Описание;
	
КонецФункции

Функция ШаблонПредставленияДокументаВЕТИСДляПоляИнтеграции(МетаданныеДокументаВЕТИС, ДокументОснование) Экспорт
	
	ИмяПодсистемы = "ВетИС";
	ИмяДокумента = МетаданныеДокументаВЕТИС.ПолноеИмя();
	Шаблон       = Новый Структура;
	
	ФормыИмениДокумента = Новый Структура("Основная, Склоненная, РодИмени");
	ФормыИмениДокумента.Основная   = МетаданныеДокументаВЕТИС.Синоним;
	ФормыИмениДокумента.Склоненная = НРег(Лев(ФормыИмениДокумента.Основная, 1)) + Сред(ФормыИмениДокумента.Основная, 2); // имя с маленькой буквы
	ФормыИмениДокумента.РодИмени   = "Ж";
	
	Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ФормыИмениДокумента.Склоненная = НСтр("ru='входящую транспортную операцию ВетИС'");
		
	ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		ФормыИмениДокумента.РодИмени = "М";
		
	ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		ФормыИмениДокумента.Склоненная = НСтр("ru='инвентаризацию продукции ВетИС'");
		
	ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ФормыИмениДокумента.Склоненная = НСтр("ru='исходящую транспортную операцию ВетИС'");
		
	ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС Тогда
		
		ФормыИмениДокумента.РодИмени = "С";
		
	ИначеЕсли МетаданныеДокументаВЕТИС = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		ФормыИмениДокумента.Склоненная = НСтр("ru='производственную операцию ВетИС'");
		
	КонецЕсли;
	
	Шаблон.Вставить("ПредставлениеДокумента",            ФормыИмениДокумента.Основная + ": %1");
	Шаблон.Вставить("ПредставлениеНесколькихДокументов", ФормыИмениДокумента.Основная + " (%1)");
	
	Шаблон.Вставить("ИмяКомандыСоздать",                 ИнтеграцияИСКлиентСервер.ИмяКомандыСоздатьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрыть",                 ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьОбъект(ИмяПодсистемы, ИмяДокумента));
	Шаблон.Вставить("ИмяКомандыОткрытьПротоколОбмена",   ИнтеграцияИСКлиентСервер.ИмяКомандыОткрытьПротоколОбмена(ИмяПодсистемы));
	
	Шаблон.Вставить("ПредставлениеКомандыСоздать",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создать %1'"), ФормыИмениДокумента.Склоненная));
	Шаблон.Вставить("ПредставлениеКомандыОткрыть",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Открыть %1'"), ФормыИмениДокумента.Склоненная));
	
	Шаблон.Вставить("СтатусОформленияАрхивный",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"),
			ФормыИмениДокумента.Основная,
			" "+НСтр("ru='оформлять не требуется'")));
	
	Шаблон.Вставить("ДокументНеОформлен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='оформлен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='оформлена'"), НСтр("ru='оформлено'")))));
	Шаблон.Вставить("ДокументНеСоздан",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='создан'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='создана'"), НСтр("ru='создано'")))));
	Шаблон.Вставить("ДокументНеПолучен",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 не %2'"),
			ФормыИмениДокумента.Основная,
			?(ФормыИмениДокумента.РодИмени = "М", НСтр("ru='получен'"),
				?(ФормыИмениДокумента.РодИмени = "Ж", НСтр("ru='получена'"), НСтр("ru='получено'")))));
	
	Если МетаданныеДокументаВЕТИС = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Если Метаданные.ОпределяемыеТипы.ОснованиеИсходящаяТранспортнаяОперацияВЕТИС.Тип.СодержитТип(ТипЗнч(ДокументОснование)) Тогда
			
			// Если документ-основание относится и к входящей и к исходящей операции ВЕТИС,
			// то входящая операция не формируется вручную, а будет получена по обмену.
			
			Шаблон.ИмяКомандыСоздать           = Неопределено;
			Шаблон.ПредставлениеКомандыСоздать = Шаблон.ДокументНеПолучен;
			Шаблон.ДокументНеСоздан            = Шаблон.ДокументНеПолучен;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Шаблон;
	
КонецФункции

#КонецОбласти

#Область ОтборДальнейшиеДействия

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена с ВЕТИС в форме документа.
// 
// Возвращаемое значение:
//  Массив - содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт
	
	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется);
	
	Возврат Действия;
	
КонецФункции

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений - формируемый список значений.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru='Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru='Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru='Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.НеТребуется);
	
КонецПроцедуры

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  ДинамическийСписок     - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействие - Перечисление.ДальнейшееДействиеВЕТИС, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(ДинамическийСписок, ДальнейшееДействие, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	ИмяПоля = "ДальнейшееДействиеВЕТИС1";
	
	Если ДальнейшееДействие = "ВсеТребующиеДействия" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеДействия, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеОжидания" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый Массив;
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ДальнейшееДействие, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область XDTO

// Преобразует объект XDTO в структуру
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
// 
// Возвращаемое значение:
//  Структура - Структура объекта.
//
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO, ПараметрыПреобразования = Неопределено) Экспорт
	
	Структура      = Новый Структура;
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		ИмяСвойства      = Свойство.Имя;
		ЗначениеСвойства = ОбъектXDTO[ИмяСвойства];
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, ОбъектXDTOВСтруктуру(ЗначениеСвойства, ПараметрыПреобразования));
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Структура.Вставить(ИмяСвойства, Новый Массив);
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСписка = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСписка) = Тип("ОбъектXDTO") Тогда
					Структура[ИмяСвойства].Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка, ПараметрыПреобразования));
				Иначе
					Структура[ИмяСвойства].Добавить(ЭлементСписка);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Структура.Вставить(ИмяСвойства, ЗначениеСвойства);
			
			Если ПараметрыПреобразования <> Неопределено
				И ПараметрыПреобразования.НайтиИдентификаторы
				И Свойство.Тип = ПараметрыПреобразования.ТипUUID Тогда
				
				РезультатПоиска = ПараметрыПреобразования.ТипыИдентификаторов[ТипОбъектаXDTO];
				Если РезультатПоиска <> Неопределено
					И РезультатПоиска.ИмяПоля = ИмяСвойства Тогда
					ПараметрыПреобразования.Идентификаторы[РезультатПоиска.ИмяТаблицы].Вставить(ЗначениеСвойства, РезультатПоиска.ПустоеЗначение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция ПривестиЗначениеСвойстваКФасетам(Значение, Фасеты)
	
	Если Фасеты = Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	ПриведенноеЗначение  = Значение;
	ПроверкаПеречисления = Ложь;
	ПеречислениеНайдено  = Ложь;
	
	Для Каждого Фасет Из Фасеты Цикл
		Если Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
			ПриведенноеЗначение = Лев(Значение, Число(Фасет.Значение));
		ИначеЕсли Фасет.Вид = ВидФасетаXDTO.МинДлина Тогда
			МинимальнаяДлина = Число(Фасет.Значение);
			Пока СтрДлина(ПриведенноеЗначение) < МинимальнаяДлина Цикл
				ПриведенноеЗначение = ПриведенноеЗначение + " ";
			КонецЦикла;
		ИначеЕсли Фасет.Вид = ВидФасетаXDTO.Перечисление Тогда
			ПроверкаПеречисления = Истина;
			Если ВРег(Фасет.Значение) = ВРег(Значение) Тогда
				ПриведенноеЗначение = Фасет.Значение;
				ПеречислениеНайдено = Истина;
				Прервать;
			КонецЕсли;
		ИначеЕсли Фасет.Вид = ВидФасетаXDTO.РазрядовДробнойЧасти Тогда
			ПриведенноеЗначение = Окр(ПриведенноеЗначение, Число(Фасет.Значение));
		КонецЕсли;
	КонецЦикла;
	
	Если ПроверкаПеречисления
		И Не ПеречислениеНайдено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПриведенноеЗначение;
	КонецЕсли;
	
КонецФункции

// Преобразует содержимое произвольного объекта XDTO источника (без типов) в содержимое объекта XDTO приемника (с типами).
//
Функция ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ОбъектXDTOИсточник, ОбъектXDTOПриемник) Экспорт
	
	Для Каждого СвойствоИсточника Из ОбъектXDTOИсточник.Свойства() Цикл
		
		ИмяСвойства      = СвойствоИсточника.Имя;
		ЗначениеСвойства = ОбъектXDTOИсточник[ИмяСвойства];
		
		СвойствоПриемника = ОбъектXDTOПриемник.Свойства().Получить(ИмяСвойства);
		Если СвойствоПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
				
				ЗначениеСвойстваПриемника = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(СвойствоПриемника.URIПространстваИмен, ИмяСвойства, ОбъектXDTOПриемник);
				
				Если ТипЗнч(ЗначениеСвойстваПриемника) = Тип("ОбъектXDTO") Тогда
					ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЗначениеСвойства, ЗначениеСвойстваПриемника);
					
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриемника);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриемника;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Если ОбъектXDTOПриемник[ИмяСвойства] = Неопределено Тогда
				ОпасныйРежим = Истина;
			Иначе
				ОпасныйРежим = Ложь;
			КонецЕсли;
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСпискаИсточника = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСпискаИсточника) = Тип("ОбъектXDTO") Тогда
					
					Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
						
						ЭлементаСпискаПриемника = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(СвойствоПриемника.URIПространстваИмен, ИмяСвойства, ОбъектXDTOПриемник);
						
						Если ТипЗнч(ЭлементаСпискаПриемника) = Тип("ОбъектXDTO") Тогда
							
							Если Не ОпасныйРежим Тогда
								
								ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЭлементСпискаИсточника, ЭлементаСпискаПриемника);
								
								ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементаСпискаПриемника);
								
							Иначе
								
								Если ОбъектXDTOПриемник[ИмяСвойства] = Неопределено Тогда
									ОбъектXDTOПриемник[ИмяСвойства] = ЭлементаСпискаПриемника;
								КонецЕсли;
								
								ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЭлементСпискаИсточника, ОбъектXDTOПриемник[ИмяСвойства]);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементСпискаИсточника);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ЗначениеСвойстваПриведенноеКФасету = ПривестиЗначениеСвойстваКФасетам(ЗначениеСвойства, СвойствоПриемника.Тип.Фасеты);
			Если ЗначениеСвойстваПриведенноеКФасету <> Неопределено Тогда
				
				Попытка
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриведенноеКФасету);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриведенноеКФасету;
					КонецЕсли;
				Исключение
					// Исключение выводится при загрузке данных из XML, несоответствующего XDTO.
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектXDTOПриемник;
	
КонецФункции

// Возвращает Объект XDTO, получаемый из текста сообщения XML
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML
//  Тип - Строка, Неопределено, ТипОбъектаXDTO - Тип объекта
//  Версия - Строка - Требуемая версия
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML, Тип = Неопределено) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	Если Тип = Неопределено Тогда
		СоздаваемыйТип = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяКорневогоЭлементаXML(ТекстСообщенияXML)).Тип();
	ИначеЕсли ТипЗнч(Тип) = Тип("Строка") Тогда
		СоздаваемыйТип = ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(Неопределено, Тип).Тип();
	Иначе
		СоздаваемыйТип = Тип;
	КонецЕсли;
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СоздаваемыйТип);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Получает имя корневого узла текста в формате XML.
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст в формате XML.
// 
// Возвращаемое значение:
//  Строка - имя корневого узла.
//
Функция ИмяКорневогоЭлементаXML(ТекстСообщенияXML) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM.ПервыйДочерний.ИмяУзла;
	
КонецФункции

// Преобразует объект XDTO в XML
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO.
//  ПространстваИмен - Строка, Массив - Пространство имен.
//  ИмяТипа - Строка - Имя типа.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция ОбъектXDTOВXML(ОбъектXDTO, ПространстваИмен, ИмяТипа) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soapenv:Envelope");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("soapenv", "http://schemas.xmlsoap.org/soap/envelope/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs",  "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	Зависимости = Новый Массив;
	
	Если ТипЗнч(ПространстваИмен) = Тип("Массив") Тогда
		Для Каждого ПространствоИмен Из ПространстваИмен Цикл
			Если Зависимости.Найти(ПространствоИмен) = Неопределено Тогда
				Зависимости.Добавить(ПространствоИмен);
			КонецЕсли;
			ИнтеграцияИС.ЗависимыеПространстваИмен(ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).Зависимости, Зависимости);
		КонецЦикла;
	Иначе
		ПространствоИмен = ПространстваИмен;
		Если Зависимости.Найти(ПространствоИмен) = Неопределено Тогда
			Зависимости.Добавить(ПространствоИмен);
		КонецЕсли;
		ИнтеграцияИС.ЗависимыеПространстваИмен(ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).Зависимости, Зависимости);
	КонецЕсли;
	
	СоответствиеПространстваИмен = Новый Соответствие;
	СоответствиеПространстваИмен.Вставить(Метаданные.ПакетыXDTO.СправочникиВЕТИС.ПространствоИмен,  "ws");
	СоответствиеПространстваИмен.Вставить(Метаданные.ПакетыXDTO.BaseВЕТИС.ПространствоИмен,         "bs");
	СоответствиеПространстваИмен.Вставить(Метаданные.ПакетыXDTO.DictionaryВЕТИС.ПространствоИмен,   "dt");
	СоответствиеПространстваИмен.Вставить(Метаданные.ПакетыXDTO.ЗаявкиВЕТИС.ПространствоИмен,       "apldef");
	СоответствиеПространстваИмен.Вставить(Метаданные.ПакетыXDTO.ApplicationВЕТИС.ПространствоИмен,  "apl");
	СоответствиеПространстваИмен.Вставить(Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен, "merc");
	СоответствиеПространстваИмен.Вставить(Метаданные.ПакетыXDTO.VetDocumentВЕТИС.ПространствоИмен,  "vd");
	
	Для Каждого ЗависимоеПространство Из Зависимости Цикл
		Префикс = СоответствиеПространстваИмен.Получить(ЗависимоеПространство);
		Если ЗначениеЗаполнено(Префикс) Тогда
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Префикс, ЗависимоеПространство);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soapenv:Header");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("soapenv:Body");
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // soapenv:Body
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); // soapenv:Envelope
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	Возврат ТекстXML;
	
КонецФункции

// Устанавливает значение свойства объекта XDTO.
//
Процедура ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КешОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = ИнтеграцияИС.ДанныеДляРасшифровкиОшибок(,Глубина);
	ИнтеграцияИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, ДанныеДляРасшифровкиОшибок);
	
КонецПроцедуры

// Устанавливает значение свойства объекта XDTO.
//
Процедура УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено, КешОшибок = Неопределено, Глубина = Неопределено) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = ИнтеграцияИС.ДанныеДляРасшифровкиОшибок(,Глубина);
	ИнтеграцияИС.УстановитьСвойствоXDTO(ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, ДанныеДляРасшифровкиОшибок);
	
КонецПроцедуры

Функция ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, Глубина) Экспорт
	
	//На текущий момент пользовательского макета расшифровки ошибок нет
	ДанныеДляРасшифровкиОшибок = ИнтеграцияИС.ДанныеДляРасшифровкиОшибок(,Глубина);
	Возврат ИнтеграцияИС.ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, ДанныеДляРасшифровкиОшибок);
	
КонецФункции

#КонецОбласти

#Область ПоследовательностьОпераций

Функция КатегорииОпераций() Экспорт
	
	Категории = Новый Структура;
	Категории.Вставить("ПередачаДанных", Новый Соответствие);
	Категории.Вставить("ПолучениеКвитанции", Новый Соответствие);
	Категории.Вставить("ПолучениеСпискаВходящихДокументов", Новый Соответствие);
	
	Возврат Категории;
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВетИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПолученияДанных(ОперацияПередачиДанных) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПолучениеКвитанции.Получить(ОперацияПередачиДанных);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОперации) Тогда
		ОписаниеОперации = ОперацияПередачиДанных;
	КонецЕсли;
	
	Возврат ОписаниеОперации(ОписаниеОперации, Неопределено, Неопределено);
	
КонецФункции

// Сформировать описание операции для документа
//
// Параметры:
//  ОперацияПередачиДанных - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВетИС
//  ДокументСсылка - ДокументСсылка - Документ ссылка
//  НомерВерсии - Число - Номер версии
// 
// Возвращаемое значение:
//  Строка - Описание операции
//
Функция ОписаниеОперацииПередачиДанных(ОперацияПередачиДанных, ДокументСсылка = Неопределено, НомерВерсии = Неопределено) Экспорт
	
	КатегорииОпераций = КатегорииОпераций();
	ОписаниеОперации = КатегорииОпераций.ПередачаДанных.Получить(ОперацияПередачиДанных);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОперации) Тогда
		ОписаниеОперации = ОперацияПередачиДанных;
	КонецЕсли;
	
	Возврат ОписаниеОперации(ОписаниеОперации, ДокументСсылка, НомерВерсии);
	
КонецФункции

// Сформировать описание операции для документа.
//
// Параметры:
//  Описание - Строка - Описание операции.
//  ДокументСсылка - ДокументСсылка - Документ.
//  НомерВерсии - Число - Номер версии.
// 
// Возвращаемое значение:
//  Строка - Описание операции.
//
Функция ОписаниеОперации(Описание, ДокументСсылка, НомерВерсии = Неопределено) Экспорт
	
	Если НомерВерсии = Неопределено И ДокументСсылка = Неопределено Тогда
		Возврат Описание;
	ИначеЕсли НомерВерсии = Неопределено И ДокументСсылка <> Неопределено Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 по документу ""%2""'"), Описание, ДокументСсылка);
	ИначеЕсли НомерВерсии <> Неопределено И ДокументСсылка = Неопределено Тогда
		Возврат СтрШаблон(НСтр("ru = '%1. Версия %2'"), Описание, НомерВерсии);
	Иначе
		Возврат СтрШаблон(НСтр("ru = '%1 по документу ""%2"". Версия %3'"), Описание, ДокументСсылка, НомерВерсии);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПротоколОбмена

Функция РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка, ЗаписыватьСтатус = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЕТИСПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ВЕТИСПрисоединенныеФайлы.Операция КАК Операция,
	|	ВЕТИСПрисоединенныеФайлы.ТипСообщения КАК ТипСообщения,
	|	ВЕТИСПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА ОчередьСообщенийВЕТИС.Сообщение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КПередаче,
	|	ВЫБОР
	|		КОГДА ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|				И ОтветыНаПередачуДанных.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПереданВУТМ,
	|	ВЫБОР
	|		КОГДА ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|			ТОГДА ОтветыНаПередачуДанных.СтатусОбработки
	|		ИНАЧЕ ВЕТИСПрисоединенныеФайлы.СтатусОбработки
	|	КОНЕЦ КАК СтатусОбработки
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВЕТИСПрисоединенныеФайлы КАК ОтветыНаПередачуДанных
	|		ПО ВЕТИСПрисоединенныеФайлы.Ссылка = ОтветыНаПередачуДанных.СообщениеОснование
	|			И ВЕТИСПрисоединенныеФайлы.Операция = ОтветыНаПередачуДанных.Операция
	|			И (ОтветыНаПередачуДанных.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОчередьСообщенийВЕТИС КАК ОчередьСообщенийВЕТИС
	|		ПО (ОчередьСообщенийВЕТИС.Сообщение = ВЕТИСПрисоединенныеФайлы.Ссылка)
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &ДокументСсылка
	|	И ВЫБОР
	|			КОГДА ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
	|					И ВЕТИСПрисоединенныеФайлы.СообщениеОснование <> ЗНАЧЕНИЕ(Справочник.ВЕТИСПрисоединенныеФайлы.ПустаяСсылка)
	|					И НЕ ВЕТИСПрисоединенныеФайлы.Операция В (&ПолученРезультатЗапросаВЕТИС)
	|					И НЕ ВЕТИСПрисоединенныеФайлы.Операция В (&ОтветНаЗапросВЕТИС)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЕТИСПрисоединенныеФайлы.ДатаСоздания ВОЗР,
	|	ВЫБОР
	|		КОГДА ВЕТИСПрисоединенныеФайлы.Операция В (&ПолученРезультатЗапросаВЕТИС)
	|			ТОГДА 3
	|		КОГДА ВЕТИСПрисоединенныеФайлы.Операция В (&ОтветНаЗапросВЕТИС)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ОтветНаЗапросВЕТИС", Перечисления.ВидыОперацийВЕТИС.ОтветыНаЗапросыВЕТИС());
	Запрос.УстановитьПараметр("ПолученРезультатЗапросаВЕТИС", Перечисления.ВидыОперацийВЕТИС.ПолученныеРезультатыЗапросовВЕТИС());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.СтатусыДокументовВЕТИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	
	ЗначенияПоУмолчанию = РегистрыСведений.СтатусыДокументовВЕТИС.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
	
	Если Выборка.Количество() > 0 Тогда
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ЕстьОшибки = Ложь;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
				
				Если Выборка.КПередаче Тогда
					
					ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПодготовкиКПередачеДанных(
						ДокументСсылка,
						Выборка.Операция);
					
				ИначеЕсли Выборка.ПереданВУТМ Тогда
					
					ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
						ДокументСсылка,
						Выборка.Операция,
						Выборка.СтатусОбработки);
					
				Иначе
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				ПараметрыОбновления = ПараметрыОбновленияПослеПолученияДанных(
					МенеджерОбъекта, ДокументСсылка, Выборка.Операция, Выборка.СтатусОбработки);
				
			КонецЕсли;
			
			Если ПараметрыОбновления <> Неопределено Тогда
				РегистрыСведений.СтатусыДокументовВЕТИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			
			НаборЗаписей.Очистить();
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗначенияПоУмолчанию);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписыватьСтатус Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ПараметрыОбновленияПослеПолученияДанных(МенеджерОбъекта, ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	ДополнительныеПараметры = ПараметрыОбновленияСтатуса();
	ДополнительныеПараметры.СтатусОбработки = СтатусОбработки;
	
	ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПолученияДанных(
		ДокументСсылка,
		Операция,
		ДополнительныеПараметры);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

#КонецОбласти

#Область Зависимости

Функция ЕстьЗависимыеСообщенияОжидающиеЗагрузки(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Загрузка",   Ложь);
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеЗависимости.Количество() > 0;
	
КонецФункции

Функция ЕстьЗависимыеСообщенияОжидающиеПередачи(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Передача",   Ложь);
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеЗависимости.Количество() > 0;
	
КонецФункции

Функция СообщениеМожноПередавать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Передача",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеЗависимости.Количество() = 0;
	
КонецФункции

Функция СообщениеМожноЗагружать(ЭлементОчереди, ПараметрыОбмена, НайденныеЗависимости) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	ПараметрыОтбора.Вставить("Загрузка",   Ложь);
	
	НайденныеЗависимости = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеЗависимости.Количество() = 0 И ЭлементОчереди.ДатаСледующейИтерации < ТекущаяДатаСеанса();
	
КонецФункции

#КонецОбласти

Процедура ПодготовитьЗапросыДляПроверкиКорректностиОформления(ПараметрыОбмена, ПовторитьЦиклОбработкиСообщений) Экспорт
	
	ХСПредприятияСОшибкамиСервиса = Неопределено;
	Для Каждого ЭлементОчереди Из ПараметрыОбмена.ОчередьСообщений Цикл
		
		Если Не ЭлементОчереди.ЕстьОшибкиСервиса Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОчереди.КоличествоПопытокВосстановления >= ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОчереди.Документ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыОбмена.КоличествоПопытокВосстановленияДокументов <= 0 Тогда
			
			УдалитьСообщениеВиртуальнойОчереди(ЭлементОчереди, ПараметрыОбмена);
			
		Иначе
			
			Если ХСПредприятияСОшибкамиСервиса = Неопределено Тогда
				ХСПредприятияСОшибкамиСервиса = Новый ТаблицаЗначений;
				ХСПредприятияСОшибкамиСервиса.Колонки.Добавить("ХозяйствующийСубъект");
				ХСПредприятияСОшибкамиСервиса.Колонки.Добавить("Предприятие");
				ХСПредприятияСОшибкамиСервиса.Колонки.Добавить("ЭлементыОчереди");
			КонецЕсли;
			
			ХозяйствующийСубъект = ЭлементОчереди.ХозяйствующийСубъект;
			Предприятие          = ЭлементОчереди.Предприятие;
			
			Отбор = Новый Структура;
			Отбор.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
			Отбор.Вставить("Предприятие",          Предприятие);
			
			Найденные = ХСПредприятияСОшибкамиСервиса.НайтиСтроки(Отбор);
			Если Найденные.Количество() = 0 Тогда
				ЭлементСОшибкой = ХСПредприятияСОшибкамиСервиса.Добавить();
				ЭлементСОшибкой.ХозяйствующийСубъект = ХозяйствующийСубъект;
				ЭлементСОшибкой.Предприятие          = Предприятие;
				ЭлементСОшибкой.ЭлементыОчереди      = Новый Массив;
			Иначе
				ЭлементСОшибкой = Найденные[0];
			КонецЕсли;
			
			ЭлементСОшибкой.ЭлементыОчереди.Добавить(ЭлементОчереди);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ХСПредприятияСОшибкамиСервиса <> Неопределено Тогда
		
		РазмерПорции = ПараметрыОбмена.РазмерПорции;
		
		Для Каждого СтрокаТЧ Из ХСПредприятияСОшибкамиСервиса Цикл
			
			Для Каждого ЭлементОчереди Из СтрокаТЧ.ЭлементыОчереди Цикл
				
				ДанныеФормированияРезультата = ИнтеграцияВЕТИС.ДатаФормированияРезультата(ЭлементОчереди, ПараметрыОбмена, Неопределено);
				
				ДанныеДокументаДляЖурналаРегистрации = Новый Структура;
				ДанныеДокументаДляЖурналаРегистрации.Вставить("Документ",          ЭлементОчереди.Документ);
				ДанныеДокументаДляЖурналаРегистрации.Вставить("ТекстСообщенияXML", "-");
				ИнтеграцияВЕТИС.ЗаписатьОшибкуСервисаВЖурналРегистрации(
					СтрШаблон(
						НСтр("ru = '[ПРОВЕРКА] Запущена проверка результатов обработки заявки,
						           |Дата результата заявки: %1
						           |Источник: %2'"),
						МестноеВремя(ДанныеФормированияРезультата.Дата), ДанныеФормированияРезультата.Источник),
					ЭлементОчереди, ДанныеДокументаДляЖурналаРегистрации);
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ПопыткаВосстановления", Истина);
				ДополнительныеПараметры.Вставить("Документ",              ЭлементОчереди.Документ);
				ДополнительныеПараметры.Вставить("ДокументОснование",     ЭлементОчереди.ДокументОснование);
				ДополнительныеПараметры.Вставить("НачалоПериода",         МестноеВремя(ДанныеФормированияРезультата.Дата) - 60);
				ДополнительныеПараметры.Вставить("КонецПериода",          МестноеВремя(ДанныеФормированияРезультата.Дата) + 60);
				
				ДобавленныйЭлементОчередиВСД = ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументов(
					СтрокаТЧ.ХозяйствующийСубъект,
					СтрокаТЧ.Предприятие,
					РазмерПорции,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ЗагружатьПосле",        ДобавленныйЭлементОчередиВСД.Сообщение);
				ДополнительныеПараметры.Вставить("ПопыткаВосстановления", Истина);
				ДополнительныеПараметры.Вставить("Документ",              ЭлементОчереди.Документ);
				ДополнительныеПараметры.Вставить("ДокументОснование",     ЭлементОчереди.ДокументОснование);
				ДополнительныеПараметры.Вставить("НачалоПериода",         МестноеВремя(ДанныеФормированияРезультата.Дата) - 60);
				ДополнительныеПараметры.Вставить("КонецПериода",          МестноеВремя(ДанныеФормированияРезультата.Дата) + 60);
				
				ДобавленныйЭлементОчередиЗСЖ = ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурнала(
					СтрокаТЧ.ХозяйствующийСубъект,
					СтрокаТЧ.Предприятие,
					РазмерПорции,
					ПараметрыОбмена,
					ДополнительныеПараметры);
				
				// Зависимость от запроса записей складского журнала.
				Зависимость = ПараметрыОбмена.ЗависимостиСообщений.Добавить();
				Зависимость.Сообщение1 = ЭлементОчереди.Сообщение;
				Зависимость.Сообщение2 = ДобавленныйЭлементОчередиЗСЖ.Сообщение;
				Зависимость.Загрузка   = Ложь;
				Зависимость.Передача   = Ложь;
				
				ЗаписьОчереди = РегистрыСведений.ОчередьСообщенийВЕТИС.СоздатьНаборЗаписей();
				ЗаписьОчереди.Отбор.Сообщение.Установить(ЭлементОчереди.Сообщение);
				ЗаписьОчереди.Прочитать();
				Для Каждого Запись Из ЗаписьОчереди Цикл
					Запись.ЗагружатьПосле = ДобавленныйЭлементОчередиЗСЖ.Сообщение;
				КонецЦикла;
				
				УстановитьПривилегированныйРежим(Истина);
				ЗаписьОчереди.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				
				ПовторитьЦиклОбработкиСообщений = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ХСПредприятияСОшибкамиСервиса Цикл
			
			Для Каждого ЭлементОчереди Из СтрокаТЧ.ЭлементыОчереди Цикл
				
				ЭлементОчереди.ЕстьОшибкиСервиса               = Ложь;
				ЭлементОчереди.КоличествоПопытокВосстановления = ЭлементОчереди.КоличествоПопытокВосстановления + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросДляПроверкиКорректностиОформленияXML(ДокументСсылка) Экспорт
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументСсылка,
			"ГрузоотправительХозяйствующийСубъект, ГрузоотправительПредприятие, ДокументОснование");
		
		ХозяйствующийСубъект = Реквизиты.ГрузоотправительХозяйствующийСубъект;
		Предприятие          = Реквизиты.ГрузоотправительПредприятие;
		ДокументОснование    = Реквизиты.ДокументОснование;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументСсылка,
			"ГрузополучательХозяйствующийСубъект, ГрузополучательПредприятие, ДокументОснование");
		
		ХозяйствующийСубъект = Реквизиты.ГрузополучательХозяйствующийСубъект;
		Предприятие          = Реквизиты.ГрузополучательПредприятие;
		ДокументОснование    = Реквизиты.ДокументОснование;
		
	Иначе
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументСсылка,
			"ХозяйствующийСубъект, Предприятие, ДокументОснование");
		
		ХозяйствующийСубъект = Реквизиты.ХозяйствующийСубъект;
		Предприятие          = Реквизиты.Предприятие;
		ДокументОснование    = Реквизиты.ДокументОснование;
		
	КонецЕсли;
	
	ПараметрыОбмена = ПараметрыОбмена(ХозяйствующийСубъект, Предприятие);
	
	ДанныеФормированияРезультата = ДатаФормированияРезультатаПоСсылке(ДокументСсылка, ПараметрыОбмена);
	Если ДанныеФормированияРезультата <> Неопределено Тогда
		
		ЭлементОчереди = Новый Структура;
		ЭлементОчереди.Вставить("ХозяйствующийСубъект", ХозяйствующийСубъект);
		ЭлементОчереди.Вставить("Предприятие",          Предприятие);
		
		ДанныеДокументаДляЖурналаРегистрации = Новый Структура;
		ДанныеДокументаДляЖурналаРегистрации.Вставить("Документ",          ДокументСсылка);
		ДанныеДокументаДляЖурналаРегистрации.Вставить("ТекстСообщенияXML", "-");
		
		ИнтеграцияВЕТИС.ЗаписатьОшибкуСервисаВЖурналРегистрации(
			СтрШаблон(
				НСтр("ru = '[ПРОВЕРКА] Запущена проверка результатов обработки заявки,
				           |Дата результата заявки: %1
				           |Источник: %2'"),
				МестноеВремя(ДанныеФормированияРезультата.Дата), ДанныеФормированияРезультата.Источник),
			ЭлементОчереди, ДанныеДокументаДляЖурналаРегистрации);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПопыткаВосстановления", Истина);
		ДополнительныеПараметры.Вставить("Документ",              ДокументСсылка);
		ДополнительныеПараметры.Вставить("ДокументОснование",     ДокументОснование);
		ДополнительныеПараметры.Вставить("НачалоПериода",         МестноеВремя(ДанныеФормированияРезультата.Дата) - 60);
		ДополнительныеПараметры.Вставить("КонецПериода",          МестноеВремя(ДанныеФормированияРезультата.Дата) + 60);
		
		СообщенияВСДXML = ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхВетеринарноСопроводительныхДокументовXML(
			ХозяйствующийСубъект,
			Предприятие,
			ПараметрыОбмена.РазмерПорции,
			ПараметрыОбмена,
			ДополнительныеПараметры);
		
		СообщенияЗаписейСкладскогоЖурналаXML = ЗаявкиВЕТИС.ПодготовитьЗапросИзмененныхЗаписейСкладскогоЖурналаXML(
			ХозяйствующийСубъект,
			Предприятие,
			ПараметрыОбмена.РазмерПорции,
			ПараметрыОбмена,
			ДополнительныеПараметры);
		
		СообщенияXML = Новый Массив;
		Для Каждого СообщениеXML Из СообщенияВСДXML Цикл
			Сообщение = Новый Структура;
			Сообщение.Вставить("СообщениеXML",       СообщениеXML);
			Сообщение.Вставить("ПорядокЗависимости", 1);
			СообщенияXML.Добавить(Сообщение);
		КонецЦикла;
		
		Для Каждого СообщениеXML Из СообщенияЗаписейСкладскогоЖурналаXML Цикл
			Сообщение = Новый Структура;
			Сообщение.Вставить("СообщениеXML",       СообщениеXML);
			Сообщение.Вставить("ПорядокЗависимости", 2);
			СообщенияXML.Добавить(Сообщение);
		КонецЦикла;
		
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

Процедура ДобавитьСообщениеПриОшибкеВИзменения(ЭлементОчереди, ТекстОшибки, ЕстьОшибкиСервиса, ПараметрыОбмена) Экспорт
	
	СтрокаРезультата = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	СтрокаРезультата.ХозяйствующийСубъект = ЭлементОчереди.ХозяйствующийСубъект;
	СтрокаРезультата.Предприятие          = ЭлементОчереди.Предприятие;
	СтрокаРезультата.Операция             = ЭлементОчереди.Операция;
	СтрокаРезультата.ФорматОбмена         = ЭлементОчереди.ФорматОбмена;
	
	СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
	СтрокаРезультата.ПодготовленоКПередаче = Истина;
	СтрокаРезультата.Передано              = Истина;
	СтрокаРезультата.Принято               = Ложь;
	СтрокаРезультата.ЕстьОшибкиСервиса     = ЕстьОшибкиСервиса;
	
	СтрокаРезультата.ИсходящееСообщение = ЭлементОчереди.Сообщение;
	СтрокаРезультата.ВходящееСообщение  = Неопределено;
	
	СтрокаРезультата.Объект            = ЭлементОчереди.Документ;
	СтрокаРезультата.ДокументОснование = ЭлементОчереди.ДокументОснование;
	
	СтрокаРезультата.НовыйСтатус       = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОбрабатывается;
	СтрокаРезультата.ОбъектИзменен     = Ложь;
	
	ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
	
КонецПроцедуры

Процедура ЗаписатьОшибкуСервисаВЖурналРегистрации(ТекстОшибки, ЭлементОчереди, ДанныеДокумента) Экспорт
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЭлементОчереди.ХозяйствующийСубъект, "Наименование, Идентификатор");
		
	ПредставлениеХС = СтрШаблон(
		"%1(%2)",
		ЗначенияРеквизитов.Наименование,
		ЗначенияРеквизитов.Идентификатор);
	Если ЗначениеЗаполнено(ЭлементОчереди.Предприятие) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ЭлементОчереди.Предприятие, "Наименование, Идентификатор");
		ПредставлениеПредприятия = СтрШаблон(
			"%1(%2)",
			ЗначенияРеквизитов.Наименование,
			ЗначенияРеквизитов.Идентификатор);
	Иначе
		ПредставлениеПредприятия = НСтр("ru = '<не указано>'");
	КонецЕсли;
	
	ТекстОшибкиЖурналРегистрации = СтрШаблон(
		НСтр("ru = '%1
		           |Документ: %2
		           |Хозяйствующий субъект: %3
		           |Предприятие: %4
		           |Текст XML:
		           |%5'"),
		ТекстОшибки,
		ДанныеДокумента.Документ,
		ПредставлениеХС,
		ПредставлениеПредприятия,
		ДанныеДокумента.ТекстСообщенияXML);
	
	ОбъектМетаданных = Неопределено;
	Если ЗначениеЗаполнено(ДанныеДокумента.Документ) Тогда
		ОбъектМетаданных = ДанныеДокумента.Документ.Метаданные();
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='ВетИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Предупреждение, ОбъектМетаданных, ДанныеДокумента.Документ,
		ТекстОшибкиЖурналРегистрации);
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуСервиса(ЭлементОчереди, ПараметрыОбмена) Экспорт
	
	ЭлементОчереди.ЕстьОшибкиСервиса               = Истина;
	ЭлементОчереди.ПроверенаКорректностьОформления = Ложь;
	
	ТипДокумента = ЭлементОчереди.Документ.Метаданные().Имя;
	Если ПараметрыОбмена.ДокументыДляВосстановления[ТипДокумента] = Неопределено Тогда
		ПараметрыОбмена.ДокументыДляВосстановления[ТипДокумента] =
			ИнициализироватьДокументыДляВосстановления(ТипДокумента);
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Документ", ЭлементОчереди.Документ);
	Если ПараметрыОбмена.ДокументыДляВосстановления[ТипДокумента].НайтиСтроки(Отбор).Количество() = 0 Тогда
		
		// Для корректного восстановления документа необходимо найти точную дату
		// отправки документа в сервис.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Т.ДатаСоздания КАК ДатаСоздания,
			|	1 КАК Порядок
			|ИЗ
			|	Справочник.ВЕТИСПрисоединенныеФайлы КАК Т
			|ГДЕ
			|	Т.СообщениеОснование = &СообщениеОснование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Т.ДатаСоздания КАК ДатаСоздания,
			|	2
			|ИЗ
			|	Справочник.ВЕТИСПрисоединенныеФайлы КАК Т
			|ГДЕ
			|	Т.Ссылка = &СообщениеОснование
			|УПОРЯДОЧИТЬ ПО
			|	Порядок ВОЗР,
			|	ДатаСоздания УБЫВ");
		
		Запрос.УстановитьПараметр("СообщениеОснование", ЭлементОчереди.Сообщение);
		
		РеквизитыСообщения = Запрос.Выполнить().Выбрать();
		РеквизитыСообщения.Следующий();
		
		НоваяСтрока = ПараметрыОбмена.ДокументыДляВосстановления[ТипДокумента].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементОчереди.Документ);
		НоваяСтрока.Порядок      = 1;
		НоваяСтрока.ДатаСоздания = РеквизитыСообщения.ДатаСоздания;
		НоваяСтрока.Документ     = ЭлементОчереди.Документ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСообщениеВиртуальнойОчереди(ЭлементОчередиДокумент, ПараметрыОбмена) Экспорт
	
	ЭлементОчереди = Неопределено;
	
	Если ТипЗнч(ЭлементОчередиДокумент) <> Тип("СтрокаТаблицыЗначений") Тогда
		Для Каждого СтрокаТЧ Из ПараметрыОбмена.ОчередьСообщений Цикл
			Если СтрокаТЧ.Документ = ЭлементОчередиДокумент Тогда
				ЭлементОчереди = СтрокаТЧ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЭлементОчереди = ЭлементОчередиДокумент;
	КонецЕсли;
	
	Если ЭлементОчереди = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение1", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Сообщение2", ЭлементОчереди.Сообщение);
	НайденныеСтроки = ПараметрыОбмена.ЗависимостиСообщений.НайтиСтроки(ПараметрыОтбора);
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		ПараметрыОбмена.ЗависимостиСообщений.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ПараметрыОбмена.ОбработанныеЭлементыОчереди.Добавить(ЭлементОчереди);
	
КонецПроцедуры

// Возвращает структуру с именами полей и их типами, по которым будет производится подбор
// документа в зависимости от его типа.
// 
// Параметры:
//  ТипДокумента
// Возвращаемое значение:
//  Структура
//   * Ключ - Строка - Имя поля
//   * Значение - Тип - Тип поля
//
Функция ПоляПодбораДокументовПриВосстановлении(ТипДокумента) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Имя");
	Результат.Колонки.Добавить("Тип");
	Результат.Колонки.Добавить("ТипСтрокой");
	
	Если ТипДокумента = "ИнвентаризацияПродукцииВЕТИС" Тогда
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ХозяйствующийСубъект";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ХозяйствующиеСубъектыВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "Предприятие";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ПредприятияВЕТИС";
		
	ИначеЕсли ТипДокумента = "ВходящаяТранспортнаяОперацияВЕТИС"
		Или ТипДокумента = "ИсходящаяТранспортнаяОперацияВЕТИС" Тогда
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "СпособХранения";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыХраненияПриТранспортировкеВЕТИС");
		НоваяСтрока.ТипСтрокой = "Перечисление.СпособыХраненияПриТранспортировкеВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "СерияТТН";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255));
		НоваяСтрока.ТипСтрокой = "Строка (255)";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "НомерТТН";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255));
		НоваяСтрока.ТипСтрокой = "Строка (255)";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ДатаТТН";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("Дата");
		НоваяСтрока.ТипСтрокой = "Дата";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ТипТТН";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовВЕТИС");
		НоваяСтрока.ТипСтрокой = "Перечисление.ТипыДокументовВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ПеревозчикХозяйствующийСубъект";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ХозяйствующиеСубъектыВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ГрузополучательХозяйствующийСубъект";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ХозяйствующиеСубъектыВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ГрузополучательПредприятие";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ПредприятияВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ГрузоотправительХозяйствующийСубъект";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ХозяйствующиеСубъектыВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ГрузоотправительПредприятие";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ПредприятияВЕТИС";

	ИначеЕсли ТипДокумента = "ОбъединениеЗаписейСкладскогоЖурналаВЕТИС" Тогда
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ХозяйствующийСубъект";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ХозяйствующиеСубъектыВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "Предприятие";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ПредприятияВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "Продукция";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ПродукцияВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ВидПродукции";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ПродукцияВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ЕдиницаИзмерения";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмеренияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ЕдиницыИзмеренияВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ЗаписьСкладскогоЖурнала";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ЗаписиСкладскогоЖурналаВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ЗаписиСкладскогоЖурналаВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "СпособОбъединения";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС");
		НоваяСтрока.ТипСтрокой = "Перечисление.СпособыОбъединенияЗаписейСкладскогоЖурналаВЕТИС";
		
	ИначеЕсли ТипДокумента = "ПроизводственнаяОперацияВЕТИС" Тогда
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "ХозяйствующийСубъект";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ХозяйствующиеСубъектыВЕТИС";
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Имя        = "Предприятие";
		НоваяСтрока.Тип        = Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС");
		НоваяСтрока.ТипСтрокой = "Справочник.ПредприятияВЕТИС";
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный тип документа для определения полей подбора.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу значений для хранения документов при восстановлении из за ошибок сервиса.
// 
// Параметры:
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Документ - ДокументСсылка - документ, который надо восстановить.
// * ДатаСоздания - Дата - дата создания сообщения, посланного в сервис.
// * ЭлементОчереди - Неопределено, СтрокаТабличнойЧасти - элемент очереди сообщений.
//
Функция ИнициализироватьДокументыДляВосстановления(ТипДокумента) Экспорт
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС"));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Порядок",                       Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ДатаСоздания",                  Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Документ",                      Новый ОписаниеТипов(ТипыДокументов));
	Результат.Колонки.Добавить("ДокументПолностьюВосстановлен", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДокументЧастичноВосстановлен",  Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДокументОбъект");
	
	ПоляПодбораДокументовПриВосстановлении = ПоляПодбораДокументовПриВосстановлении(ТипДокумента);
	
	Для Каждого ПолеПодбора Из ПоляПодбораДокументовПриВосстановлении Цикл
		Результат.Колонки.Добавить(ПолеПодбора.Имя, ПолеПодбора.Тип);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИмяИдентификатораОбъекта() Экспорт
	
	Возврат "guid";
	
КонецФункции

Функция ИмяИдентификатораВерсии() Экспорт
	
	Возврат "uuid";
	
КонецФункции

Функция ВыполнитьЗапросЭлементаКлассификатора(Запрос, ХозяйствующийСубъект = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементаКлассификатора();
	
	Если ПараметрыОбмена <> Неопределено И ПараметрыОбмена.ХозяйствующиеСубъекты.Количество() > 0 Тогда
		НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
		Если НастройкаОбмена = Неопределено Тогда
			НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ПараметрыОбмена.ХозяйствующиеСубъекты[0]);
		КонецЕсли;
	Иначе
		НастройкаОбмена = НастройкаОбменаПоХозяйствующемуСубъекту(ХозяйствующийСубъект);
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить ответ на %1 по причине
			           |%2'"),
			Запрос.Представление,
			СтрШаблон(
				НСтр("ru='Не найдены настройки подключения к ВетИС. Проверьте, что пользователь %1 сопоставлен с пользователем ВетИС.'"),
				Пользователи.ТекущийПользователь()));
			
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
	РезультатОтправкиЗапроса = ИнтеграцияВЕТИСВызовСервера.ОтправитьЗапрос(
		Запрос.ТекстСообщенияXML,
		Запрос.Сервис, Запрос.ИмяМетода, НастройкаОбмена);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ДанныеОбработки = ОбработатьОтветНаЗапросЭлементаКлассификатора(РезультатОтправкиЗапроса, Запрос);
		
		ВозвращаемоеЗначение.СтатусОбработки = ДанныеОбработки.СтатусОбработки;
		
		Если ДанныеОбработки.Результат <> Неопределено Тогда
			
			ВозвращаемоеЗначение.Элемент = ДанныеОбработки.Результат;
			
		Иначе
			
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + ДанныеОбработки.ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить ответ на %1 по причине
			           |%2'"),
			Запрос.Представление,
			РезультатОтправкиЗапроса.ТекстОшибки);
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка;
		Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
			ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
			                                 + Символы.ПС
			                                 + ТекстОшибки;
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ВыполнитьЗапросЭлементовКлассификатора(Запрос, ХозяйствующийСубъект = Неопределено, ПараметрыОбмена = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.РезультатВыполненияЗапросаЭлементовКлассификатора();
	
	Если ПараметрыОбмена <> Неопределено И ПараметрыОбмена.ХозяйствующиеСубъекты.Количество() > 0 Тогда
		НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ХозяйствующийСубъект);
		Если НастройкаОбмена = Неопределено Тогда
			НастройкаОбмена = ПараметрыОбмена.НастройкиОбмена.Получить(ПараметрыОбмена.ХозяйствующиеСубъекты[0]);
		КонецЕсли;
	Иначе
		НастройкаОбмена = НастройкаОбменаПоХозяйствующемуСубъекту(ХозяйствующийСубъект);
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить ответ на %1 по причине
			           |%2'"),
			Запрос.Представление,
			СтрШаблон(
				НСтр("ru='Не найдены настройки подключения к ВетИС. Проверьте, что пользователь %1 сопоставлен с пользователем ВетИС.'"),
				Пользователи.ТекущийПользователь()));
			
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	РезультатОтправкиЗапроса = ИнтеграцияВЕТИСВызовСервера.ОтправитьЗапрос(
		Запрос.ТекстСообщенияXML,
		Запрос.Сервис, СтрЗаменить(Запрос.ИмяМетода, "get", "Get"), НастройкаОбмена);
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ДанныеОбработки = ОбработатьОтветНаЗапросЭлементаКлассификатора(РезультатОтправкиЗапроса, Запрос, Истина);
		
		Если ДанныеОбработки.Результат <> Неопределено Тогда
			
			ВозвращаемоеЗначение.Список            = ДанныеОбработки.Результат[Запрос.ИмяЭлемента];
			ВозвращаемоеЗначение.ОбщееКоличество   = ДанныеОбработки.Результат.total;
			ВозвращаемоеЗначение.НомерСтраницы     = Запрос.НомерСтраницы;
			ВозвращаемоеЗначение.КоличествоСтраниц = ИнтеграцияВЕТИСКлиентСервер.КоличествоСтраниц(ВозвращаемоеЗначение.ОбщееКоличество, Запрос.КоличествоЭлементовНаСтранице);
			
		Иначе
			
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + ДанныеОбработки.ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = ДанныеОбработки.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось получить ответ на %1 по причине
			           |%2'"),
			Запрос.Представление,
			РезультатОтправкиЗапроса.ТекстОшибки);
		
		Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
			ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
			                                 + Символы.ПС
			                                 + ТекстОшибки;
		Иначе
			ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТекстИзДокументаDOMПоИмениПоля(ТекстВходящегоСообщенияSOAP, ИмяПоля, ДокументDOM = Неопределено) Экспорт
	
	Если ДокументDOM = Неопределено Тогда
		
		ПостроительDOM = Новый ПостроительDOM;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстВходящегоСообщенияSOAP);
		
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
	КонецЕсли;
	
	УзелDOM = НайтиУзелDOM(ДокументDOM, ИмяПоля);
	
	Текст = Неопределено;
	Если УзелDOM <> Неопределено Тогда
		
		Текст = УзелDOM.ТекстовоеСодержимое;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьЗначениеИзДокументаDOMПоИмениПоля(ТекстВходящегоСообщенияSOAP, ИмяПоля, ИсходныйXML = Неопределено) Экспорт
	
	ПостроительDOM = Новый ПостроительDOM;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстВходящегоСообщенияSOAP);
	
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	УзелDOM = НайтиУзелDOM(ДокументDOM, ИмяПоля);
	
	Текст = Неопределено;
	Если УзелDOM <> Неопределено Тогда
		
		Текст = ТекстXMLУзлаDOM(УзелDOM);
		
		Если ИсходныйXML <> Неопределено Тогда
			УзелDOM.РодительскийУзел.УдалитьДочерний(УзелDOM);
			ИсходныйXML = ТекстXMLУзлаDOM(ДокументDOM);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Обрабатывает ответ ВЕТИС на запрос списка хозяйствующих субъектов.
//
// Параметры:
//  РезультатОтправкиЗапроса - Структура - см. функцию.
//  Запрос                   - Структура - см. функцию.
//  ОбработатьСписок         - Булево    - обработать список(Ложь по умолчанию)
// 
// Возвращаемое значение:
//  Структура:
//   * Результат         - Структура - см. описание для типа объекта result.success в пакете XDTO "Интеграция ВетИС".
//   * ТекстОшибки       - Строка - текст ошибки, в случае ее возникновения. 
//   * ТекстСообщенияXML - Строка - содержит ответ, полученный на запрос.
//   * СтатусОбработки   - Перечисление.СтатусыОбработкиСообщенийВЕТИС - статус обработки запроса.
//
Функция ОбработатьОтветНаЗапросЭлементаКлассификатора(РезультатОтправкиЗапроса, Запрос, ОбработатьСписок = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	Если РезультатОтправкиЗапроса.КодСостояния <> 200 Тогда
		Возврат ОбработатьСообщениеОбОшибке(
			РезультатОтправкиЗапроса, ВозвращаемоеЗначение);
	КонецЕсли;
	
	ИмяТипа          = Запрос.ИмяМетода + "Response";
	ПространствоИмен = Запрос.ПространствоИмен;
	
	ТекстВходящегоСообщенияXML = ПолучитьЗначениеИзДокументаDOMПоИмениПоля(
		РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP, ИмяТипа);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстВходящегоСообщенияXML);
	
	Попытка
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(
			ЧтениеXML,
			ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа).Тип());
		
	Исключение
		
		ПредставлениеОшибки = ПредставлениеОшибкиXDTO(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЧтениеXML, ЧтениеXML.КонтекстПространствИмен.Глубина);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Попытка
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ИнтеграцияИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстВходящегоСообщенияXML),
				ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа));
			
		Исключение
			
			ОбработатьОшибку(
				СтрШаблон(
					НСтр("ru = 'При разборе XML ответа на %1 возникла ошибка:
					           |Текст ошибки: %ТекстОшибки%'"),
					Запрос.Представление),
				РасширеннаяИнформацияОбОшибке(ПредставлениеОшибки, ПодробноеПредставлениеОшибки),
				ВозвращаемоеЗначение);
			
			Возврат ВозвращаемоеЗначение;
			
		КонецПопытки;
		
	КонецПопытки;
	
	Попытка
		
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Принят;
		Если ОбработатьСписок Тогда
			ВозвращаемоеЗначение.Результат = ОбъектXDTOВСтруктуру(ОбъектXDTO[Запрос.ИмяСписка]);
		Иначе
			ВозвращаемоеЗначение.Результат = ОбъектXDTOВСтруктуру(ОбъектXDTO[Запрос.ИмяЭлемента]);
		КонецЕсли;
		
	Исключение
		
		ОбработатьОшибку(
			СтрШаблон(
				НСтр("ru = 'При разборе объекта XDTO ответа на %1 возникла ошибка:
				           |Текст ошибки: %ТекстОшибки%'"),
				Запрос.Представление),
			ИнформацияОбОшибке(),
			ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПрочитатьОбъект(ТекстВходящегоСообщенияXML, ПространствоИмен, ИмяТипа, ПредставлениеЗапроса, ВозвращаемоеЗначение) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстВходящегоСообщенияXML);
	
	Попытка
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(
			ЧтениеXML,
			ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа).Тип());
		
	Исключение
		
		ПредставлениеОшибки = ПредставлениеОшибкиXDTO(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЧтениеXML, ЧтениеXML.КонтекстПространствИмен.Глубина);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Попытка
			
			ОбъектXDTO = ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ИнтеграцияИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ТекстВходящегоСообщенияXML),
				ИнтеграцияИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа));
			
		Исключение
			
			ОбработатьОшибку(
				СтрШаблон(
					НСтр("ru = 'При разборе XML ответа на %1 возникла ошибка:
					           |Текст ошибки: %2'"),
					ПредставлениеЗапроса),
					РасширеннаяИнформацияОбОшибке(ПредставлениеОшибки, ПодробноеПредставлениеОшибки),
				ВозвращаемоеЗначение);
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецПопытки;
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Обрабатывает ответ ВЕТИС на запрос списка хозяйствующих субъектов.
//
// Параметры:
//  РезультатОтправкиЗапроса - Структура - см. функцию.
//  Запрос - Структура - структура со свойствами:
//   * ПространствоИмен
//   * ИмяМетода
//   * ИмяЭлемента
//   * Описание
// 
// Возвращаемое значение:
//  Структура:
//   * Результат         - Структура - см. описание для типа объекта result.success в пакете XDTO "Интеграция ВетИС".
//   * ТекстОшибки       - Строка - текст ошибки, в случае ее возникновения. 
//   * ТекстСообщенияXML - Строка - содержит ответ, полученный на запрос.
//   * СтатусОбработки   - Перечисление.СтатусыОбработкиСообщенийВЕТИС - статус обработки запроса.
//
Функция ОбработатьОтветНаПередачуДанных(РезультатОтправкиЗапроса, Запрос, Операция = Неопределено, ПараметрыОбмена) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	Если РезультатОтправкиЗапроса.КодСостояния <> 200 Тогда
		Возврат ОбработатьСообщениеОбОшибке(
			РезультатОтправкиЗапроса, ВозвращаемоеЗначение);
	КонецЕсли;
	
	ИмяТипа          = Запрос.ИмяМетода + "Response";
	ПространствоИмен = Запрос.ПространствоИмен;
	
	ТекстВходящегоСообщенияXML = ПолучитьЗначениеИзДокументаDOMПоИмениПоля(
		РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP, ИмяТипа);
	
	ВложенныйОбъектXDTO   = Неопределено;
	ПараметрыЗапросаВЕТИС = Неопределено;
	Если Запрос.Сервис = Перечисления.СервисыВЕТИС.ОбработкаЗаявок
		И Операция <> Неопределено Тогда // Получение результата обработки заявки
		
		ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Запрос.ФорматОбмена);
		
		ТекстВложенногоСообщенияXML = ПолучитьЗначениеИзДокументаDOMПоИмениПоля(
			ТекстВходящегоСообщенияXML, ПараметрыЗапросаВЕТИС.ТипВЕТИС, ТекстВходящегоСообщенияXML);
		
		// В переменной ТекстВходящегоСообщенияXML содержится сокращенный текст XML (только данные Application)
		ОбъектXDTO = ПрочитатьОбъект(
			ТекстВходящегоСообщенияXML,
			ПространствоИмен, ИмяТипа, Запрос.Представление,
			ВозвращаемоеЗначение);
		Если ОбъектXDTO = Неопределено Тогда
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если ТекстВложенногоСообщенияXML <> Неопределено Тогда
			
			ВложенныйОбъектXDTO = ПрочитатьОбъект(
				ТекстВложенногоСообщенияXML,
				ПараметрыЗапросаВЕТИС.ПространствоИмен,
				ПараметрыЗапросаВЕТИС.ТипВЕТИС, Запрос.Представление,
				ВозвращаемоеЗначение);
			Если ВложенныйОбъектXDTO = Неопределено Тогда
				Возврат ВозвращаемоеЗначение;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// В переменной ТекстВходящегоСообщенияXML содержится полный текст XML
		ОбъектXDTO = ПрочитатьОбъект(
			ТекстВходящегоСообщенияXML,
			ПространствоИмен, ИмяТипа, Запрос.Представление,
			ВозвращаемоеЗначение);
		Если ОбъектXDTO = Неопределено Тогда
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Результат = ОбъектXDTOВСтруктуру(ОбъектXDTO[Запрос.ИмяЭлемента]);
		Если Запрос.Сервис = Перечисления.СервисыВЕТИС.ОбработкаЗаявок Тогда
			
			Если Операция <> Неопределено Тогда // Получение результата обработки заявки
				
				Если ВложенныйОбъектXDTO <> Неопределено Тогда
					
					// Очистка соответствия идентификаторов от предыдущего поиска
					Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы Цикл
						КлючИЗначение.Значение.Очистить();
					КонецЦикла;
					
					Результат.result.Вставить(
						ПараметрыЗапросаВЕТИС.ТипВЕТИС,
						ОбъектXDTOВСтруктуру(
							ВложенныйОбъектXDTO, ПараметрыОбмена.ПараметрыПреобразования));
					
					// Поиск ссылок на объекты в ИБ
					СсылкиПоИдентификаторам(
						ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы,
						ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки);
					
					ЗаполнитьБлокируемыеОбъекты(
						ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты,
						ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки,
						ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы);
					
				КонецЕсли;
				
				Статус = ВРег(ОбъектXDTO.application.status);
				
			Иначе // Передача заявки
				
				Статус = ВРег(ОбъектXDTO.application.status);
				
			КонецЕсли;
			
			Если Статус = "ACCEPTED" Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаПринята;
			ИначеЕсли Статус = "IN_PROCESS" Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОбрабатывается;
			ИначеЕсли Статус = "COMPLETED" Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена;
			ИначеЕсли Статус = "REJECTED" Тогда
				ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена;
			Иначе
				ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный статус обработки заявки: %1'"), Статус);
			КонецЕсли;
			
		Иначе
			
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Принят;
			
		КонецЕсли;
		
		ВозвращаемоеЗначение.Результат = Результат;
		
	Исключение
		
		ОбработатьОшибку(
			СтрШаблон(
				НСтр("ru = 'При разборе объекта XDTO ответа на %1 возникла ошибка:
				           |Текст ошибки: %ТекстОшибки%'"),
				Запрос.Представление),
			ИнформацияОбОшибке(),
			ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура УстановитьПараметрыСтраницы(Запрос, НомерСтраницы, КоличествоЭлементовНаСтранице = Неопределено) Экспорт
	
	Если КоличествоЭлементовНаСтранице = Неопределено Тогда
		КоличествоЭлементовНаСтранице = ИнтеграцияВЕТИСКлиентСервер.РазмерСтраницы();
	КонецЕсли;
	
	Запрос.listOptions = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "listOptions");
	Запрос.listOptions.count  = КоличествоЭлементовНаСтранице;
	Запрос.listOptions.offset = (НомерСтраницы - 1) * КоличествоЭлементовНаСтранице;
	
КонецПроцедуры

Процедура УстановитьПараметрыСмещения(Запрос, Смещение, КоличествоЭлементов) Экспорт
	
	Запрос.listOptions = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "listOptions");
	Запрос.listOptions.count  = КоличествоЭлементов;
	Запрос.listOptions.offset = Смещение;
	
КонецПроцедуры

Процедура УстановитьИнтервалЗапросаИзменений(Запрос, Интервал, ХранилищеВременныхДат) Экспорт
	
	Запрос.updateDateInterval = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(Запрос, "updateDateInterval");
	ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
		Запрос.updateDateInterval, "beginDate",
		Интервал.НачалоПериода, ХранилищеВременныхДат);
	
	Если ЗначениеЗаполнено(Интервал.КонецПериода) Тогда
		ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
			Запрос.updateDateInterval, "endDate",
			Интервал.КонецПериода, ХранилищеВременныхДат);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьАдрес(ОбъектXDTO, ДанныеАдреса, ИмяПоля = "address") Экспорт
	
	Если ДанныеАдреса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO[ИмяПоля] = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, ИмяПоля);
	
	ОбъектXDTO[ИмяПоля].country      = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO[ИмяПоля], "country");
	ОбъектXDTO[ИмяПоля].country.guid = ДанныеАдреса.СтранаGUID;
	
	ОбъектXDTO[ИмяПоля].region      = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO[ИмяПоля], "region");
	ОбъектXDTO[ИмяПоля].region.guid = ДанныеАдреса.РегионGUID;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.РайонGUID) Тогда
		ОбъектXDTO[ИмяПоля].district      = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO[ИмяПоля], "district");
		ОбъектXDTO[ИмяПоля].district.guid = ДанныеАдреса.РайонGUID;
	КонецЕсли;
	
	// Для обеспечения обратной совместимости; в структуру данных адреса добавлено новое свойство ГородGUID
	Если ДанныеАдреса.Свойство("ГородGUID") И ЗначениеЗаполнено(ДанныеАдреса.ГородGUID) Тогда
		
		ОбъектXDTO[ИмяПоля].locality      = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO[ИмяПоля], "locality");
		ОбъектXDTO[ИмяПоля].locality.guid = ДанныеАдреса.ГородGUID;
		
		Если ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
			ОбъектXDTO[ИмяПоля].subLocality      = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO[ИмяПоля], "subLocality");
			ОбъектXDTO[ИмяПоля].subLocality.guid = ДанныеАдреса.НаселенныйПунктGUID;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеАдреса.НаселенныйПунктGUID) Тогда
		
		ОбъектXDTO[ИмяПоля].locality      = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO[ИмяПоля], "locality");
		ОбъектXDTO[ИмяПоля].locality.guid = ДанныеАдреса.НаселенныйПунктGUID;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.УлицаGUID) Тогда
		ОбъектXDTO[ИмяПоля].street      = ИнтеграцияИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO[ИмяПоля], "street");
		ОбъектXDTO[ИмяПоля].street.guid = ДанныеАдреса.УлицаGUID;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.НомерДома) Тогда
		
		ОбъектXDTO[ИмяПоля].house = ДанныеАдреса.НомерДома;
		
		Если ЗначениеЗаполнено(ДанныеАдреса.НомерСтроения) Тогда
			ОбъектXDTO[ИмяПоля].building = ДанныеАдреса.НомерСтроения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеАдреса.НомерОфиса) Тогда
			ОбъектXDTO[ИмяПоля].room = ДанныеАдреса.НомерОфиса;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.ПочтовыйИндекс) Тогда
		ОбъектXDTO[ИмяПоля].postIndex = ДанныеАдреса.ПочтовыйИндекс;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.АбонентскийЯщик) Тогда
		ОбъектXDTO[ИмяПоля].postBox = ДанныеАдреса.АбонентскийЯщик;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.ДополнительнаяИнформация) Тогда
		ОбъектXDTO[ИмяПоля].additionalInfo = ДанныеАдреса.ДополнительнаяИнформация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеАдреса.ПредставлениеАдреса) Тогда
		ОбъектXDTO[ИмяПоля].addressView = ДанныеАдреса.ПредставлениеАдреса;
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеАдреса(ЭлементДанных) Экспорт
	
	Если ЭлементДанных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеАдреса = ИнтеграцияВЕТИСКлиентСервер.СтруктураДанныхАдреса();
	ДанныеАдреса.ПредставлениеАдреса = ЭлементДанных.addressView;
	
	Если ЭлементДанных.country <> Неопределено Тогда
		ДанныеАдреса.СтранаGUID          = ЭлементДанных.country.guid;
		ДанныеАдреса.СтранаПредставление = ЭлементДанных.country.name;
	КонецЕсли;
	
	Если ЭлементДанных.region <> Неопределено Тогда
		ДанныеАдреса.РегионGUID          = ЭлементДанных.region.guid;
		ДанныеАдреса.РегионПредставление = ЭлементДанных.region.name;
	КонецЕсли;
	
	Если ЭлементДанных.district <> Неопределено Тогда
		ДанныеАдреса.РайонGUID           = ЭлементДанных.district.guid;
		ДанныеАдреса.РайонПредставление  = ЭлементДанных.district.name;
	КонецЕсли;
	
	Если ЭлементДанных.locality <> Неопределено Тогда
		Если ЭлементДанных.subLocality <> Неопределено Тогда
			ДанныеАдреса.ГородGUID                    = ЭлементДанных.locality.guid;
			ДанныеАдреса.ГородGUID                    = ЭлементДанных.locality.name;
			ДанныеАдреса.НаселенныйПунктGUID          = ЭлементДанных.subLocality.guid;
			ДанныеАдреса.НаселенныйПунктПредставление = ЭлементДанных.subLocality.name;
		Иначе
			ДанныеАдреса.НаселенныйПунктGUID          = ЭлементДанных.locality.guid;
			ДанныеАдреса.НаселенныйПунктПредставление = ЭлементДанных.locality.name;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементДанных.street <> Неопределено Тогда
		ДанныеАдреса.УлицаGUID          = ЭлементДанных.street.guid;
		ДанныеАдреса.УлицаПредставление = ЭлементДанных.street.name;
	КонецЕсли;
	
	ДанныеАдреса.НомерДома                = ЭлементДанных.house;
	ДанныеАдреса.НомерСтроения            = ЭлементДанных.building;
	ДанныеАдреса.НомерОфиса               = ЭлементДанных.room;
	ДанныеАдреса.ПочтовыйИндекс           = ЭлементДанных.postIndex;
	ДанныеАдреса.АбонентскийЯщик          = ЭлементДанных.postBox;
	ДанныеАдреса.ДополнительнаяИнформация = ЭлементДанных.additionalInfo;
	
	Возврат ДанныеАдреса;
	
КонецФункции

#Область ОбработкаОшибок

Функция РасширеннаяИнформацияОбОшибке(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки) Экспорт
	
	РасширеннаяИнформацияОбОшибке = Новый Структура;
	РасширеннаяИнформацияОбОшибке.Вставить("КраткоеПредставлениеОшибки",  КраткоеПредставлениеОшибки);
	РасширеннаяИнформацияОбОшибке.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки);
	
	Возврат РасширеннаяИнформацияОбОшибке;
	
КонецФункции

Процедура ОбработатьОшибку(ТекстОшибки, ИнформацияОбОшибке, ВозвращаемоеЗначение) Экспорт
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("Структура") Тогда
		КраткоеПредставлениеОшибки   = ИнформацияОбОшибке.КраткоеПредставлениеОшибки;
		ПодробноеПредставлениеОшибки = ИнформацияОбОшибке.ПодробноеПредставлениеОшибки;
	Иначе
		КраткоеПредставлениеОшибки   = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецЕсли;
	
	ЗаписатьОшибкуВЖурналРегистрации(СтрЗаменить(ТекстОшибки, "%ТекстОшибки%", ПодробноеПредставлениеОшибки));
	
	ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка;
	
	ПодготовленныйТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстОшибки%", КраткоеПредставлениеОшибки);
	
	Если Не ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
		ВозвращаемоеЗначение.ТекстОшибки = ПодготовленныйТекстОшибки;
	Иначе
		ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
		                                 + Символы.ПС
		                                 + ПодготовленныйТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет запись ошибки в журнал регистрации, добавляя имя события ВетИС.
//
// Параметры:
//  Заголовок   - Строка - заголовок сообщения.
//  ТекстОшибки - Строка - текст ошибки.
//
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru='ВетИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

Функция ОбработатьСообщениеОбОшибке(РезультатОтправкиЗапроса, ВозвращаемоеЗначение) Экспорт
	
	Если РезультатОтправкиЗапроса.КодСостояния = 500 Тогда
		
		Попытка
			
			ОбъектXDTO = ИнтеграцияИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(
				РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO.Body.Fault.detail, "business") Тогда
				ИнформацияОбОшибке = ОбъектXDTO.Body.Fault.detail.business.detail;
			Иначе
				ИнформацияОбОшибке = ОбъектXDTO.Body.Fault.detail;
			КонецЕсли;
			
			НеизвестнаяОшибка = Ложь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОбОшибке, "internalServiceFault") Тогда
				
				ДанныеОшибки = ИнформацияОбОшибке.internalServiceFault;
				
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаВЕТИС;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОбОшибке, "incorrectRequestFault") Тогда
				
				ДанныеОшибки = ИнформацияОбОшибке.incorrectRequestFault;
				
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаНекорректныйЗапрос;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОбОшибке, "offsetOutOfRangeFault") Тогда
				
				ДанныеОшибки = ИнформацияОбОшибке.offsetOutOfRangeFault;
				
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаДиапазона;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОбОшибке, "accessDeniedFault") Тогда
				
				ДанныеОшибки = ИнформацияОбОшибке.accessDeniedFault;
				
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаДоступа;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОбОшибке, "entityNotFoundFault") Тогда
				
				ДанныеОшибки = ИнформацияОбОшибке.entityNotFoundFault;
				
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаПоиска;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОбОшибке, "requestRejectedFault") Тогда
				
				ДанныеОшибки = ИнформацияОбОшибке.requestRejectedFault;
				
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаЗапроса;
				
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИнформацияОбОшибке, "fault") Тогда
				
				НеизвестнаяОшибка = Истина;
				
			КонецЕсли;
			
			Если Не НеизвестнаяОшибка Тогда
				
				ОписаниеОшибки = ДанныеОшибки.message;
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОшибки, "error")
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОшибки.error, "code") Тогда
					
					КодОшибки = ДанныеОшибки.error.code;
					
					РасширенноеОписаниеОшибки = ПолучитьТекстИзДокументаDOMПоИмениПоля(
						РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP, "error");
					Если ЗначениеЗаполнено(РасширенноеОписаниеОшибки) Тогда
						ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + РасширенноеОписаниеОшибки;
					КонецЕсли;
					
				Иначе
					КодОшибки = НСтр("ru = '<Код отсутствует>'");
				КонецЕсли;
				
			Иначе
				
				ОписаниеОшибки  = ИнформацияОбОшибке.fault.reason;
				КодОшибки       = ИнформацияОбОшибке.fault.errorCode;
				СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка;
				
			КонецЕсли;
			
		Исключение
			
			КодОшибки       = НСтр("ru = 'Неизвестный код'");
			ОписаниеОшибки  = НСтр("ru = 'Неизвестная ошибка'");
			СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка;
			
			ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
		ВозвращаемоеЗначение.СтатусОбработки = СтатусОбработки;
		ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Код состояния HTTP: %1. Код ошибки: %2. Текст ошибки: %3.'"),
			РезультатОтправкиЗапроса.КодСостояния,
			КодОшибки,
			ОписаниеОшибки);
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		Если РезультатОтправкиЗапроса.КодСостояния = 401 Тогда
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаДоступа;
			ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Код состояния HTTP: %1. Описание ошибки: %2.'"),
				РезультатОтправкиЗапроса.КодСостояния,
				НСтр("ru = 'Нет доступа'"));
		Иначе
			ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.Ошибка;
			Если ЗначениеЗаполнено(РезультатОтправкиЗапроса.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Код состояния HTTP: %1. Текст ошибки: %2.'"),
					РезультатОтправкиЗапроса.КодСостояния,
					РезультатОтправкиЗапроса.ТекстОшибки);
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Код состояния HTTP: %1. Текст сообщения HTTP: %2.'"),
					РезультатОтправкиЗапроса.КодСостояния,
					РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP);
			КонецЕсли;
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ПроверитьОчиститьЕдиницуИзмеренияВЕТИС(СтрокаТабличнойЧасти) Экспорт
	
	Продукция = СтрокаТабличнойЧасти.Продукция;
	
	Если Не ЗначениеЗаполнено(Продукция) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС = Неопределено;
	Иначе
		ФасовкаЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Продукция, "ФасовкаЕдиницаИзмерения");
		ДоступныеЕдиницыИзмерения = ИнтеграцияВЕТИСПовтИсп.ДоступныеЕдиницыИзменения(Продукция);
		Если ДоступныеЕдиницыИзмерения.Найти(СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС) = Неопределено Тогда
			Если ЗначениеЗаполнено(ФасовкаЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС = ФасовкаЕдиницаИзмерения;
			ИначеЕсли ДоступныеЕдиницыИзмерения.Количество() > 0 Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС = ДоступныеЕдиницыИзмерения[0];
			Иначе
				СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция КодСпособаИзмененияВерсионногоОбъекта(СпособИзменения) Экспорт
	
	Код = "";
	
	Если СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Создать Тогда
		Код = "CREATE";
	ИначеЕсли СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.НайтиИлиСоздать Тогда
		Код = "FIND_OR_CREATE";
	ИначеЕсли СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Изменить Тогда
		Код = "UPDATE";
	ИначеЕсли СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Удалить Тогда
		Код = "DELETE";
	ИначеЕсли СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Объединить Тогда
		Код = "MERGE";
	ИначеЕсли СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Присоединить Тогда
		Код = "ATTACH";
	ИначеЕсли СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Разделить Тогда
		Код = "SPLIT";
	ИначеЕсли СпособИзменения = Перечисления.СпособыИзмененияВерсионныхОбъектовВЕТИС.Отделить Тогда
		Код = "FORK";
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный способ изменения: %1'"),
				СпособИзменения);
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

Функция ТипХозяйствующегоСубъекта(Код) Экспорт
	
	ТипХозяйствующегоСубъекта = Неопределено;
	
	Если Код = 1 Тогда
		ТипХозяйствующегоСубъекта = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо;
	ИначеЕсли Код = 2 Тогда
		ТипХозяйствующегоСубъекта = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо;
	ИначеЕсли Код = 3 Тогда
		ТипХозяйствующегоСубъекта = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель;
	ИначеЕсли Код = Неопределено Тогда
		ТипХозяйствующегоСубъекта = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ПустаяСсылка();
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип хозяйствующего субъекта с кодом: %1'"),
				Код);
	КонецЕсли;
	
	Возврат ТипХозяйствующегоСубъекта;
	
КонецФункции

Функция КодТипаХозяйствующегоСубъекта(ТипХозяйствующегоСубъекта) Экспорт
	
	Код = Неопределено;
	
	Если ТипХозяйствующегоСубъекта = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо Тогда
		Код = 1;
	ИначеЕсли ТипХозяйствующегоСубъекта = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо  Тогда
		Код = 2;
	ИначеЕсли ТипХозяйствующегоСубъекта = Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель  Тогда
		Код = 3;
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип хозяйствующего субъекта: %1'"),
				ТипХозяйствующегоСубъекта);
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

Функция КодТипаПредприятия(ТипПредприятия) Экспорт
	
	Код = Неопределено;
	
	Если ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.Предприятие Тогда
		Код = 1;
	ИначеЕсли ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.Рынок Тогда
		Код = 2;
	ИначеЕсли ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.СББЖ Тогда
		Код = 3;
	ИначеЕсли ТипПредприятия = Перечисления.ТипыПредприятийВЕТИС.Судно Тогда
		Код = 4;
	Иначе
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип предприятия: %1'"),
				ТипПредприятия);
	КонецЕсли;
	
	Возврат Код;
	
КонецФункции

#Область ОтборПоОрганизацииВЕТИС

Процедура ОтборПоОрганизацииПриСозданииНаСервере(Форма, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		Форма.Элементы[Значение + "ОрганизацияВЕТИС"].СписокВыбора.Очистить();
		Форма.Элементы[Значение + "ОрганизацииВЕТИС"].СписокВыбора.Очистить();
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("КлючОбъекта", "Справочник.ХозяйствующиеСубъектыВЕТИС.Форма.ВыборХозяйствующихСубъектовИПредприятий");
	
	Выборка = ХранилищеНастроекДанныхФорм.Выбрать(ПараметрыОтбора);
	
	Пока Выборка.Следующий() Цикл
		
		Данные = Новый Массив;
		Значение = Выборка.Настройки.Получить("ДеревоХозяйствующихСубъектовПредприятийВЕТИС");
		
		Если Значение <> Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Выбрана", Истина);
			НайденныеСтроки = Значение.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				МассивПредприятий = Новый Массив;
				Для Каждого Предприятие Из СтрокаТЧ.Строки.НайтиСтроки(ПараметрыОтбора) Цикл 
					МассивПредприятий.Добавить(Предприятие.ХозяйствующийСубъектПредприятиеВЕТИС);
				КонецЦикла;
				Данные.Добавить(Новый Структура("Организация,Предприятия",СтрокаТЧ.ХозяйствующийСубъектПредприятиеВЕТИС,МассивПредприятий));
			КонецЦикла;
			
			НастройкиВарианта = Новый Структура("ВыбранныеЗначения,ХэшСтроки,ПредставлениеОрганизации,ПредставлениеПредприятия");
			НастройкиВарианта.ВыбранныеЗначения        = Данные;
			НастройкиВарианта.ХэшСтроки                = Выборка.Настройки.Получить("ХэшСтроки");
			НастройкиВарианта.ПредставлениеОрганизации = Выборка.Настройки.Получить("ПредставлениеОрганизации");
			НастройкиВарианта.ПредставлениеПредприятия = Выборка.Настройки.Получить("ПредставлениеПредприятия");
			
			Для Каждого Значение Из Префиксы Цикл
				Форма.Элементы[Значение + "ОрганизацияВЕТИС"].СписокВыбора.Добавить(НастройкиВарианта, Выборка.Представление);
				Форма.Элементы[Значение + "ОрганизацииВЕТИС"].СписокВыбора.Добавить(НастройкиВарианта, Выборка.Представление);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияВЕТИСКлиентСервер.НастроитьОтборПоОрганизацииВЕТИС(Форма, Форма.ОрганизацииВЕТИС, Неопределено, Префиксы);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуОрганизацияПредприятиеВЕТИС() Экспорт
	
	ТаблицаОрганизацияПредприятиеВЕТИС = Новый ТаблицаЗначений;
	ТаблицаОрганизацияПредприятиеВЕТИС.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС"));
	ТаблицаОрганизацияПредприятиеВЕТИС.Колонки.Добавить("Предприятие", Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС"));
	
	Возврат ТаблицаОрганизацияПредприятиеВЕТИС;
	
КонецФункции

Функция ТаблицаОрганизацияПредприятие(ОрганизацииВЕТИС) Экспорт
	
	Если ТипЗнч(ОрганизацииВЕТИС) = Тип("ДеревоЗначений")
		Или ТипЗнч(ОрганизацииВЕТИС) = Тип("ДанныеФормыДерево") Тогда
	
		ТаблицаОрганизацияПредприятиеВЕТИС = ИнициализироватьТаблицуОрганизацияПредприятиеВЕТИС();
		
		Для Каждого СтрокаОрганизация Из ОрганизацииВЕТИС.ПолучитьЭлементы() Цикл 
			
			Для Каждого СтрокаПредприятие Из СтрокаОрганизация.ПолучитьЭлементы() Цикл 
				НоваяСтрока = ТаблицаОрганизацияПредприятиеВЕТИС.Добавить();
				НоваяСтрока.Организация = СтрокаОрганизация.ХозяйствующийСубъектПредприятиеВЕТИС;
				НоваяСтрока.Предприятие = СтрокаПредприятие.ХозяйствующийСубъектПредприятиеВЕТИС;
			КонецЦикла;
			
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ОрганизацииВЕТИС) = Тип("ТаблицаЗначений")
		Или ТипЗнч(ОрганизацииВЕТИС) = Тип("ДанныеФормыКоллекция") Тогда
		
		ТаблицаОрганизацияПредприятиеВЕТИС = ОрганизацииВЕТИС;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Некорректный параметр функции ИнтеграцияВЕТИС.ТаблицаОрганизацияПредприятие().'");
		
	КонецЕсли;
	
	Возврат ТаблицаОрганизацияПредприятиеВЕТИС;
	
КонецФункции

#КонецОбласти

// Устанавливает видимость команды "Оформить" в формах списка документов.
//
Процедура УстановитьВидимостьКомандыОформленияДокумента(Форма, МетаданныеДокумента, ИмяЭлемента) Экспорт
	
	Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаПредприятийGLN() Экспорт
	
	ПредприятияGLN = Новый ТаблицаЗначений();
	ПредприятияGLN.Колонки.Добавить("Предприятие", Новый ОписаниеТипов("СправочникСсылка.ПредприятияВЕТИС"));
	ПредприятияGLN.Колонки.Добавить("GLN", ОбщегоНазначения.ОписаниеТипаСтрока(13));
	
	Возврат ПредприятияGLN;
	
КонецФункции

Функция ДанныеФизическогоЛица(ФизическоеЛицо) Экспорт
	
	ДанныеФизЛица = Новый Структура;
	ДанныеФизЛица.Вставить("Фамилия");
	ДанныеФизЛица.Вставить("Имя");
	ДанныеФизЛица.Вставить("Отчество");
	ДанныеФизЛица.Вставить("ДатаРождения");
	ДанныеФизЛица.Вставить("ДокументВид");
	ДанныеФизЛица.Вставить("ДокументТип");
	ДанныеФизЛица.Вставить("ДокументСерия");
	ДанныеФизЛица.Вставить("ДокументНомер");
	ДанныеФизЛица.Вставить("ГражданствоСтрана");
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьДанныеФизическогоЛица(ДанныеФизЛица, ФизическоеЛицо);
	
	Возврат ДанныеФизЛица;
	
КонецФункции

Функция ДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта(Контрагент) Экспорт
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("ИНН", "");
	ДанныеКонтрагента.Вставить("КПП", "");
	ДанныеКонтрагента.Вставить("ОГРН", "");
	ДанныеКонтрагента.Вставить("Наименование", "");
	ДанныеКонтрагента.Вставить("НаименованиеПолное", "");
	ДанныеКонтрагента.Вставить("Тип", Перечисления.ТипыХозяйствующихСубъектовВЕТИС.ПустаяСсылка());
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта(ДанныеКонтрагента, Контрагент);
	
	Возврат ДанныеКонтрагента;
	
КонецФункции

// Получает данные контрагента по ИНН 
//
// Параметры:
//  ПараметрыФормирования - Структура - параметры формирования фонового задания.
//  АдресХранилища        - Строка - адрес хранилища, в который будут помещены результаты выполнения фонового задания.
//
Процедура ДанныеКонтрагентаПоИННФоновоеЗадание(ПараметрыФормирования, АдресХранилища) Экспорт
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда

		МодульРаботаСКонтрагентами = ОбщегоНазначения.ОбщийМодуль("РаботаСКонтрагентами");
		Если ПараметрыФормирования.ЭтоЮридическоеЛицо Тогда
			РезультатФормирования = МодульРаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ПараметрыФормирования.ИНН);
		Иначе
			РезультатФормирования = МодульРаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ПараметрыФормирования.ИНН);
		КонецЕсли;
		ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак есть ли право на изменение списка документов у текущего пользователя 
//
Процедура УстановитьПризнакПравоИзмененияФормыСписка(ФормаСписка, ИмяРеквизита = "ПравоИзменения") Экспорт
	
	МассивРеквизитовФормы = ФормаСписка.ПолучитьРеквизиты();
	РеквизитНайден = Ложь;
	Для Каждого Реквизит Из МассивРеквизитовФормы Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			РеквизитНайден = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не РеквизитНайден Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОсновнойТаблицыСписка = ФормаСписка.Список.ОсновнаяТаблица;
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОсновнойТаблицыСписка);
	ФормаСписка[ИмяРеквизита] = ПравоДоступа("Изменение", ОбъектМетаданных);
	
КонецПроцедуры

Функция ПодготовитьЗапросНаОбновлениеВетеринарноСопроводительногоДокумента(ДанныеВСД, УникальныйИдентификатор, ТекстОшибки = "") Экспорт
	
	РезультатОбмена = Неопределено;
	
	Если ТипЗнч(ДанныеВСД) = Тип("СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС") Тогда
		РеквизитыЗаписиЖурнала = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеВСД,
			"Идентификатор, ГрузополучательХозяйствующийСубъект, ГрузополучательПредприятие,
			|ГрузоотправительХозяйствующийСубъект, ГрузоотправительПредприятие");
	Иначе
		РеквизитыЗаписиЖурнала = ДанныеВСД;
	КонецЕсли;
	
	ХозяйствующиеСубъекты = Новый Массив;
	ХозяйствующиеСубъекты.Добавить(РеквизитыЗаписиЖурнала.ГрузополучательХозяйствующийСубъект);
	ХозяйствующиеСубъекты.Добавить(РеквизитыЗаписиЖурнала.ГрузоотправительХозяйствующийСубъект);
	ПараметрыОбмена = ИнтеграцияВЕТИС.ПараметрыОбмена(ХозяйствующиеСубъекты);
	Для Каждого ХозяйствующийСубъект Из ПараметрыОбмена.ХозяйствующиеСубъекты Цикл
		Если ХозяйствующийСубъект = РеквизитыЗаписиЖурнала.ГрузополучательХозяйствующийСубъект Тогда
			РезультатОбмена = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросВетеринарноСопроводительногоДокументаПоUUID(
				РеквизитыЗаписиЖурнала.ГрузополучательХозяйствующийСубъект,
				РеквизитыЗаписиЖурнала.ГрузополучательПредприятие,
				РеквизитыЗаписиЖурнала.Идентификатор, УникальныйИдентификатор);
			Прервать;
		ИначеЕсли ХозяйствующийСубъект = РеквизитыЗаписиЖурнала.ГрузоотправительХозяйствующийСубъект Тогда
			РезультатОбмена = ЗаявкиВЕТИСВызовСервера.ПодготовитьЗапросВетеринарноСопроводительногоДокументаПоUUID(
				РеквизитыЗаписиЖурнала.ГрузоотправительХозяйствующийСубъект,
				РеквизитыЗаписиЖурнала.ГрузоотправительПредприятие,
				РеквизитыЗаписиЖурнала.Идентификатор, УникальныйИдентификатор);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Информируем пользователя о причинах отсутствия настроек обмена
	Если РезультатОбмена = Неопределено Тогда
		
		Для Каждого ХозяйствующийСубъект Из ХозяйствующиеСубъекты Цикл
			
			Если Не ПараметрыОбмена.ХозяйствующиеСубъектыБезНастроек.Найти(ХозяйствующийСубъект) = Неопределено Тогда
				ТекстОшибки = Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru='Для хозяйствующего субъекта %1 не найдены настройки подключения к ВетИС.'"),
						ХозяйствующийСубъект));
				Прервать;
			КонецЕсли;
			
			Если Не ПараметрыОбмена.ХозяйствующиеСубъектыНедоступные.Найти(ХозяйствующийСубъект) = Неопределено Тогда
				ТекстОшибки = Новый ФорматированнаяСтрока(
					СтрШаблон(
						НСтр("ru = 'Пользователь %1 не включен в список пользователей хозяйствующего субъекта %2.'"),
						Пользователи.ТекущийПользователь(),
						ХозяйствующийСубъект));
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатОбмена;
	
КонецФункции

Процедура СформироватьДанныеДокументаОснования(ТаблицаДанныхДокументаОснования, ДокументОснование, ДанныеСформированы) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС")
			Или ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ДанныеСформированы = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПроизводственнаяОперацияВЕТИСТовары.Номенклатура                        КАК Номенклатура,
		|	ПроизводственнаяОперацияВЕТИСТовары.Характеристика                      КАК Характеристика,
		|	ПроизводственнаяОперацияВЕТИСТовары.Серия                               КАК Серия,
		|	СУММА(ПроизводственнаяОперацияВЕТИСТовары.Количество)                   КАК Количество,
		|	ПроизводственнаяОперацияВЕТИСТовары.СрокГодностиНачалоПериода           КАК НачалоПериода,
		|	ПроизводственнаяОперацияВЕТИСТовары.СрокГодностиКонецПериода            КАК КонецПериода,
		|	ПроизводственнаяОперацияВЕТИСТовары.СрокГодностиТочностьЗаполнения      КАК ТочностьЗаполнения,
		|	ПроизводственнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент КАК ИдентификаторПроисхожденияВЕТИС,
		|	ПроизводственнаяОперацияВЕТИСТовары.СкоропортящаясяПродукция            КАК Скоропортящаяся
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Товары КАК ПроизводственнаяОперацияВЕТИСТовары
		|ГДЕ
		|	ПроизводственнаяОперацияВЕТИСТовары.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроизводственнаяОперацияВЕТИСТовары.Номенклатура,
		|	ПроизводственнаяОперацияВЕТИСТовары.Характеристика,
		|	ПроизводственнаяОперацияВЕТИСТовары.Серия,
		|	ПроизводственнаяОперацияВЕТИСТовары.СрокГодностиНачалоПериода,
		|	ПроизводственнаяОперацияВЕТИСТовары.СрокГодностиКонецПериода,
		|	ПроизводственнаяОперацияВЕТИСТовары.СрокГодностиТочностьЗаполнения,
		|	ПроизводственнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент,
		|	ПроизводственнаяОперацияВЕТИСТовары.СкоропортящаясяПродукция
		|	
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Номенклатура,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Характеристика,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Серия,
		|	СУММА(ВходящаяТранспортнаяОперацияВЕТИСТовары.Количество),
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиНачалоПериода,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиКонецПериода,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиТочностьЗаполнения,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ЗаписьСкладскогоЖурнала,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.СкоропортящаясяПродукция
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ВходящаяТранспортнаяОперацияВЕТИСТовары
		|ГДЕ
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка = &ДокументСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Номенклатура,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Характеристика,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.Серия,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиНачалоПериода,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиКонецПериода,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.СрокГодностиТочностьЗаполнения,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ЗаписьСкладскогоЖурнала,
		|	ВходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент.СкоропортящаясяПродукция";
		
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = ТаблицаДанныхДокументаОснования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			ДанныеИдентификатораПроисхожденияВЕТИС = Новый Структура(
				"ИдентификаторПроисхожденияВЕТИС, НачалоПериода, КонецПериода, ТочностьЗаполнения, Скоропортящаяся");
			ЗаполнитьЗначенияСвойств(ДанныеИдентификатораПроисхожденияВЕТИС, Выборка);
			
			НоваяСтрока.ДанныеИдентификатораПроисхожденияВЕТИС = ДанныеИдентификатораПроисхожденияВЕТИС;
			
		КонецЦикла;
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает таблицу с документами, требующими восстановления в следствии ошибок сервиса.
// 
// Параметры:
// Возвращаемое значение:
//  Неопределено, ТаблицаЗначений - Таблица со списком документов
//   * Документ       - ДокументСсылка - ссылка на документ
//   * Объект         - Неопределено   - Поля для сохранения документа-объекта
//   * Дата           - Дата - дата сообщения-запроса из протокола обмена данными
//   * ЭлементОчереди - СтрокаТаблицыЗначений - строка очереди, при заполнении из регистра очереди - Неопределено
Функция ДокументыДляВосстановления(ТипДокумента, ОрганизацииПредприятияВЕТИС = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипДокумента = "ИнвентаризацияПродукцииВЕТИС" Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатусыДокументовВЕТИС.Документ КАК Документ,
			|	Шапка.ХозяйствующийСубъект      КАК ХозяйствующийСубъект,
			|	Шапка.Предприятие               КАК Предприятие
			|ПОМЕСТИТЬ ВтСписокДокументов
			|ИЗ
			|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияПродукцииВЕТИС КАК Шапка
			|		ПО СтатусыДокументовВЕТИС.Документ = Шапка.Ссылка
			|ГДЕ
			|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 В (&ДальнейшиеДействия)
			|ИНДЕКСИРОВАТЬ ПО
			|	СтатусыДокументовВЕТИС.Документ
			|";
		
	ИначеЕсли ТипДокумента = "ВходящаяТранспортнаяОперацияВЕТИС" Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатусыДокументовВЕТИС.Документ           КАК Документ,
			|	Шапка.ГрузополучательХозяйствующийСубъект КАК ХозяйствующийСубъект,
			|	Шапка.ГрузополучательПредприятие          КАК Предприятие
			|ПОМЕСТИТЬ ВтСписокДокументов
			|ИЗ
			|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК Шапка
			|		ПО СтатусыДокументовВЕТИС.Документ = Шапка.Ссылка
			|ГДЕ
			|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 В (&ДальнейшиеДействия)
			|ИНДЕКСИРОВАТЬ ПО
			|	СтатусыДокументовВЕТИС.Документ
			|";
		
	ИначеЕсли ТипДокумента = "ИсходящаяТранспортнаяОперацияВЕТИС" Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатусыДокументовВЕТИС.Документ            КАК Документ,
			|	Шапка.ГрузоотправительХозяйствующийСубъект КАК ХозяйствующийСубъект,
			|	Шапка.ГрузоотправительПредприятие          КАК Предприятие
			|ПОМЕСТИТЬ ВтСписокДокументов
			|ИЗ
			|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК Шапка
			|		ПО СтатусыДокументовВЕТИС.Документ = Шапка.Ссылка
			|ГДЕ
			|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 В (&ДальнейшиеДействия)
			|ИНДЕКСИРОВАТЬ ПО
			|	СтатусыДокументовВЕТИС.Документ
			|";
		
	ИначеЕсли ТипДокумента = "ОбъединениеЗаписейСкладскогоЖурналаВЕТИС" Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатусыДокументовВЕТИС.Документ КАК Документ,
			|	Шапка.ХозяйствующийСубъект      КАК ХозяйствующийСубъект,
			|	Шапка.Предприятие               КАК Предприятие
			|ПОМЕСТИТЬ ВтСписокДокументов
			|ИЗ
			|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС КАК Шапка
			|		ПО СтатусыДокументовВЕТИС.Документ = Шапка.Ссылка
			|ГДЕ
			|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 В (&ДальнейшиеДействия)
			|ИНДЕКСИРОВАТЬ ПО
			|	СтатусыДокументовВЕТИС.Документ
			|";
		
	ИначеЕсли ТипДокумента = "ПроизводственнаяОперацияВЕТИС" Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	СтатусыДокументовВЕТИС.Документ КАК Документ,
			|	Шапка.ХозяйствующийСубъект      КАК ХозяйствующийСубъект,
			|	Шапка.Предприятие               КАК Предприятие
			|ПОМЕСТИТЬ ВтСписокДокументов
			|ИЗ
			|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияВЕТИС КАК Шапка
			|		ПО СтатусыДокументовВЕТИС.Документ = Шапка.Ссылка
			|ГДЕ
			|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 В (&ДальнейшиеДействия)
			|ИНДЕКСИРОВАТЬ ПО
			|	СтатусыДокументовВЕТИС.Документ
			|";
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Неверный тип документа для определения полей подбора.'");
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ОрганизацииПредприятияВЕТИС <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ОрганизацииПредприятияВЕТИС.Организация КАК Организация,
		|	ОрганизацииПредприятияВЕТИС.Предприятие КАК Предприятие
		|ПОМЕСТИТЬ ФильтрОрганизации
		|ИЗ
		|	&ОрганизацииПредприятияВЕТИС КАК ОрганизацииПредприятияВЕТИС
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Предприятие
		|;
		|
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтСписокДокументов.Документ                     КАК Документ,
		|	МАКСИМУМ(ВЕТИСПрисоединенныеФайлы.ДатаСоздания) КАК ДатаСоздания,
		|	НЕОПРЕДЕЛЕНО                                    КАК ЭлементОчереди,
		|	2                                               КАК Порядок
		|%2
		|
		|ИЗ
		|	ВтСписокДокументов КАК ВтСписокДокументов
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
		|		ПО ВЕТИСПрисоединенныеФайлы.Документ = ВтСписокДокументов.Документ
		|		И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
		|		ПО ФильтрОрганизации.Организация = ВтСписокДокументов.ХозяйствующийСубъект
		|		И ФильтрОрганизации.Предприятие = ВтСписокДокументов.Предприятие
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтСписокДокументов.Документ
		|%3";
		
		Запрос.УстановитьПараметр("ОрганизацииПредприятияВЕТИС", ОрганизацииПредприятияВЕТИС);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВтСписокДокументов.Документ                     КАК Документ,
		|	МАКСИМУМ(ВЕТИСПрисоединенныеФайлы.ДатаСоздания) КАК ДатаСоздания,
		|	НЕОПРЕДЕЛЕНО                                    КАК ЭлементОчереди,
		|	2                                               КАК Порядок
		|%2
		|
		|ИЗ
		|	ВтСписокДокументов КАК ВтСписокДокументов
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
		|		ПО ВЕТИСПрисоединенныеФайлы.Документ = ВтСписокДокументов.Документ
		|		И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВтСписокДокументов.Документ
		|%3";
		
	КонецЕсли;
	
	ПоляОтбора = ПоляПодбораДокументовПриВосстановлении(ТипДокумента);
	
	ТекстПолей       = "";
	ТекстГруппировок = "";
	Для Каждого Поле Из ПоляОтбора Цикл
		
		ТекстПолей  = ТекстПолей + Символы.ПС + "," + СтрШаблон(
			"ВЫРАЗИТЬ(ВтСписокДокументов.Документ.%1 КАК %2) КАК %1",
			Поле.Имя, Поле.ТипСтрокой);
		
		ТекстГруппировок  = ТекстГруппировок + Символы.ПС + "," + СтрШаблон(
			"ВЫРАЗИТЬ(ВтСписокДокументов.Документ.%1 КАК %2)",
			Поле.Имя, Поле.ТипСтрокой);
		
	КонецЦикла;
	
	Запрос.Текст = СтрШаблон(
		Запрос.Текст,
		ТипДокумента, ТекстПолей, ТекстГруппировок);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
	Запрос.УстановитьПараметр("ДальнейшиеДействия", ДальнейшиеДействия);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		ДанныеДокументаДляВосстановления = РезультатЗапроса.Выгрузить();
		ДанныеДокументаДляВосстановления.Колонки.Добавить("ДокументПолностьюВосстановлен", Новый ОписаниеТипов("Булево"));
		ДанныеДокументаДляВосстановления.Колонки.Добавить("ДокументЧастичноВосстановлен", Новый ОписаниеТипов("Булево"));
		ДанныеДокументаДляВосстановления.Колонки.Добавить("ДокументОбъект");
		
		Для Каждого СтрокаТЧ Из ДанныеДокументаДляВосстановления Цикл
			СтрокаТЧ.ДатаСоздания = Неопределено;
		КонецЦикла;
		
		Возврат ДанныеДокументаДляВосстановления;
		
	КонецЕсли;
	
КонецФункции

Функция НайтиУзелDOM(ДокументDOM, ЛокальноеИмя)
	
	УзлыПоИмени = ДокументDOM.ПолучитьЭлементыПоИмени("*",ЛокальноеИмя);
	Если УзлыПоИмени.Количество() > 0 Тогда
		Возврат УзлыПоИмени[0];
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТекстXMLУзлаDOM(УзелDOM)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(УзелDOM, ЗаписьXML);
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	Возврат ТекстXML;
	
КонецФункции

// Помечает/снимает пометку удаления у приложенных файлов.
Процедура ПометитьНаУдалениеПрисоединенныеФайлыВЕТИС(Знач Источник, ДляХозяйствующегоСубъекта = Ложь)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Если ДляХозяйствующегоСубъекта Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка      КАК Ссылка,
			|	Файлы.Редактирует КАК Редактирует
			|ИЗ
			|	Справочник.ВЕТИСПрисоединенныеФайлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &Ссылка
			|	И Файлы.Документ = НЕОПРЕДЕЛЕНО";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка      КАК Ссылка,
			|	Файлы.Редактирует КАК Редактирует
			|ИЗ
			|	Справочник.ВЕТИСПрисоединенныеФайлы КАК Файлы
			|ГДЕ
			|	Файлы.Документ = &Ссылка";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Источник.ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален,
				           |т.к. содержит присоединенный файл ""%2"",
				           |занятый для редактирования.'"),
				Строка(Источник.Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

Функция НастройкаОбменаПоХозяйствующемуСубъекту(ХозяйствующийСубъект)
	
	НастройкаОбмена = Неопределено;
	
	Если ТипЗнч(ХозяйствующийСубъект) = Тип("Структура") Тогда
		
		НастройкаОбмена = ХозяйствующийСубъект;
		
	Иначе
		
		НастройкиОбменаВЕТИС = НастройкиОбменаВЕТИС(ХозяйствующийСубъект);
		
		Если ХозяйствующийСубъект = Неопределено Тогда
			Для Каждого КлючИЗначение Из НастройкиОбменаВЕТИС.ОбменНаСервере Цикл
				НастройкаОбмена = КлючИЗначение.Значение;
				Прервать;
			КонецЦикла;
		Иначе
			НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(ХозяйствующийСубъект);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат НастройкаОбмена;
	
КонецФункции

Функция ЗначениеДляРасчетаХэша(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ХозяйствующиеСубъектыДляОтбора(ХозяйствующиеСубъекты, ВозвращаемоеЗначение)
	
	ХозяйствующиеСубъектыДляОтбора = Новый Массив;
	Если ТипЗнч(ХозяйствующиеСубъекты) = Тип("Массив") Тогда
		Для Каждого ЭлементДанных Из ХозяйствующиеСубъекты Цикл
			
			Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда
				
				ХозяйствующиеСубъектыДляОтбора.Добавить(ЭлементДанных.Организация);
				ВозвращаемоеЗначение.Предприятия.Вставить(ЭлементДанных.Организация, ЭлементДанных.Предприятия);
				
			Иначе
				
				ХозяйствующиеСубъектыДляОтбора.Добавить(ЭлементДанных);
				
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ХозяйствующиеСубъекты) = Тип("СправочникСсылка.ХозяйствующиеСубъектыВЕТИС") Тогда
		
		ХозяйствующиеСубъектыДляОтбора = ХозяйствующиеСубъекты;
		
	КонецЕсли;

	Возврат ХозяйствующиеСубъектыДляОтбора;
	
КонецФункции

#Область СохранениеДанных

#Область СозданиеСсылок

// Функции создают элементы справочников ВетИС по идентификаторам, без заполнения реквизитов,
//  для их дальнейшей загрузки из сервиса ВетИС, и возвращают ссылки на созданные элементы.
// Запись данных проходит в режиме загрузки, без контроля заполнения реквизитов.

// Создает хозяйствующий субъект по идентификатору, без заполнения реквизитов, для дальнейшей загрузки
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
// 
// Возвращаемое значение:
//  СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - созданный элемент справочника
//
Функция СоздатьХозяйствующийСубъектВЕТИСДляЗагрузки(Идентификатор, ПредприятиеGLN = Неопределено)
	
	СправочникОбъект = Справочники.ХозяйствующиеСубъектыВЕТИС.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(Справочники.ХозяйствующиеСубъектыВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	СправочникОбъект.Идентификатор = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	
	ОбновитьСписокПредприятийХозяйствующегоСубъекта(СправочникОбъект, ПредприятиеGLN);
	
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Создает цель по идентификатору, без заполнения реквизитов, для дальнейшей загрузки
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЦелиВЕТИС - созданный элемент справочника
//
Функция СоздатьЦельВЕТИСДляЗагрузки(Идентификатор)
	
	СправочникОбъект = Справочники.ЦелиВЕТИС.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(Справочники.ЦелиВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	СправочникОбъект.Идентификатор = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Создает заболевание по идентификатору, без заполнения реквизитов, для дальнейшей загрузки
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  Наименование	 - Строка - наименование элемента.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЗаболеванияВЕТИС - созданный элемент справочника
//
Функция СоздатьЗаболеваниеВЕТИСДляЗагрузки(Идентификатор, Наименование)
	
	СправочникОбъект = Справочники.ЗаболеванияВЕТИС.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(Справочники.ЗаболеванияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	СправочникОбъект.Идентификатор = Идентификатор;
	СправочникОбъект.Наименование = Наименование;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Создает ВСД по идентификатору, без заполнения реквизитов, для дальнейшей загрузки
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
// 
// Возвращаемое значение:
//  СправочникСсылка.ВетеринарноСопроводительныйДокументВЕТИС - созданный элемент справочника
//
Функция СоздатьВетеринарноСопроводительныйДокументВЕТИСДляЗагрузки(Идентификатор)
	
	СправочникОбъект = Справочники.ВетеринарноСопроводительныйДокументВЕТИС.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	СправочникОбъект.Идентификатор = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Создает продукцию по идентификатору, для дальнейшей загрузки
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
//  ЭтоГруппа		 - Булево - признак создания группы.
//  ТипПродукции	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение реквизита элемента.
//  ВидПродукции	 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение реквизита элемента.
//  Продукция		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение реквизита элемента.
//  Родитель		 - СправочникСсылка.ПродукцияВЕТИС, Неопределено - значение реквизита элемента.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПродукцияВЕТИС - созданный элемент справочника
//
Функция СоздатьПродукциюВЕТИСДляЗагрузки(Идентификатор, ЭтоГруппа, ТипПродукции = Неопределено, ВидПродукции = Неопределено, Продукция = Неопределено, Родитель = Неопределено)
	
	Если ЭтоГруппа Тогда
		СправочникОбъект = Справочники.ПродукцияВЕТИС.СоздатьГруппу();
	Иначе 
		СправочникОбъект = Справочники.ПродукцияВЕТИС.СоздатьЭлемент();
	КонецЕсли;
	
	СправочникОбъект.УстановитьСсылкуНового(Справочники.ПродукцияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	СправочникОбъект.Идентификатор = Идентификатор;
	СправочникОбъект.ТипПродукции  = ТипПродукции;
	СправочникОбъект.Продукция     = Продукция;
	СправочникОбъект.ВидПродукции  = ВидПродукции;
	СправочникОбъект.Родитель      = Родитель;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Создает единицу измерения по идентификатору, без заполнения реквизитов, для дальнейшей загрузки
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЕдиницыИзмеренияВЕТИС - созданный элемент справочника
//
Функция СоздатьЕдиницуИзмеренияВЕТИСДляЗагрузки(Идентификатор)
	
	СправочникОбъект = Справочники.ЕдиницыИзмеренияВЕТИС.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(Справочники.ЕдиницыИзмеренияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	СправочникОбъект.Идентификатор     = Идентификатор;
	
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьЕдиницуИзмеренияПоКлассификаторам(СправочникОбъект);
	
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Создает предприятие по идентификатору, без заполнения реквизитов, для дальнейшей загрузки
//
// Параметры:
//  Идентификатор	 - ОпределяемыйТип.УникальныйИдентификаторИС - идентификатор по которому производится загрузка.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПредприятияВЕТИС - созданный элемент справочника
//
Функция СоздатьПредприятиеВЕТИСДляЗагрузки(Идентификатор)
	
	СправочникОбъект = Справочники.ПредприятияВЕТИС.СоздатьЭлемент();
	СправочникОбъект.УстановитьСсылкуНового(Справочники.ПредприятияВЕТИС.ПолучитьСсылку(Новый УникальныйИдентификатор(Идентификатор)));
	СправочникОбъект.Идентификатор = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция ТекстЗапросаСопоставленныеТовары()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Продукция КАК Продукция,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Продукция КАК Продукция,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОтборПоЗаписямЖурнала
	|			ТОГДА СоответствиеНоменклатуры.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ &ПустаяЗаписьЖурнала
	|	КОНЕЦ КАК ЗаписьСкладскогоЖурнала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Номенклатура) КАК КоличествоНоменклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеНоменклатуры.Характеристика) КАК КоличествоХарактеристика
	|ПОМЕСТИТЬ ВтКоличествоСопоставлено
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатуры
	|		ПО (СоответствиеНоменклатуры.Продукция = ТабличнаяЧасть.Продукция)
	|			И (СоответствиеНоменклатуры.ЗаписьСкладскогоЖурнала = ТабличнаяЧасть.ЗаписьСкладскогоЖурнала
	|				ИЛИ &ИспользоватьОтборПоЗаписямЖурнала = ЛОЖЬ)
	|ГДЕ
	|	НЕ СоответствиеНоменклатуры.Продукция ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Продукция,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОтборПоЗаписямЖурнала
	|			ТОГДА СоответствиеНоменклатуры.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ &ПустаяЗаписьЖурнала
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабличнаяЧасть.Продукция КАК Продукция,
	|	СоответствиеНоменклатуры.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатуры.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОтборПоЗаписямЖурнала
	|			ТОГДА СоответствиеНоменклатуры.ЗаписьСкладскогоЖурнала
	|		ИНАЧЕ &ПустаяЗаписьЖурнала
	|	КОНЕЦ КАК ЗаписьСкладскогоЖурнала,
	|	ВЫБОР
	|		КОГДА &ИспользоватьОтборПоЗаписямЖурнала
	|			ТОГДА СоответствиеНоменклатуры.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ КАК Серия,
	|	КоличествоСопоставлено.КоличествоНоменклатура КАК КоличествоНоменклатура,
	|	КоличествоСопоставлено.КоличествоХарактеристика КАК КоличествоХарактеристика
	|ПОМЕСТИТЬ ВтСопоставлено
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыВЕТИС КАК СоответствиеНоменклатуры
	|		ПО (СоответствиеНоменклатуры.Продукция = ТабличнаяЧасть.Продукция)
	|			И (СоответствиеНоменклатуры.ЗаписьСкладскогоЖурнала = ТабличнаяЧасть.ЗаписьСкладскогоЖурнала
	|				ИЛИ &ИспользоватьОтборПоЗаписямЖурнала = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО (КоличествоСопоставлено.Продукция = ТабличнаяЧасть.Продукция)
	|			И (КоличествоСопоставлено.ЗаписьСкладскогоЖурнала = ТабличнаяЧасть.ЗаписьСкладскогоЖурнала
	|				ИЛИ &ИспользоватьОтборПоЗаписямЖурнала = ЛОЖЬ)
	|ГДЕ
	|	НЕ СоответствиеНоменклатуры.Продукция ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Продукция КАК Продукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ИЗ
	|	ВтСопоставлено КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.НомерСтроки КАК НомерСтрокиТовара,
	|	Товары.Продукция КАК Продукция,
	|	ЕСТЬNULL(КоличествоСопоставлено.КоличествоНоменклатура, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Номенклатура = &ПустаяНоменклатура
	|				И ЕСТЬNULL(СопоставленоПозиций.Номенклатура, &ПустаяНоменклатура) <> &ПустаяНоменклатура
	|			ТОГДА СопоставленоПозиций.Номенклатура
	|		ИНАЧЕ Товары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Товары.Характеристика = &ПустаяХарактеристика
	|				И ЕСТЬNULL(СопоставленоПозиций.Характеристика, &ПустаяХарактеристика) <> &ПустаяХарактеристика
	|			ТОГДА СопоставленоПозиций.Характеристика
	|		ИНАЧЕ Товары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Серия В (&НезаполненныеЗначенияСерии)
	|			ТОГДА СопоставленоПозиций.Серия
	|		ИНАЧЕ Товары.Серия
	|	КОНЕЦ КАК Серия,
	|	Товары.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСопоставлено КАК СопоставленоПозиций
	|		ПО (СопоставленоПозиций.Продукция = Товары.Продукция)
	|			И (СопоставленоПозиций.КоличествоНоменклатура = 1)
	|			И (СопоставленоПозиций.КоличествоХарактеристика < 2)
	|			И (СопоставленоПозиций.ЗаписьСкладскогоЖурнала = Товары.ЗаписьСкладскогоЖурнала
	|				ИЛИ &ИспользоватьОтборПоЗаписямЖурнала = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКоличествоСопоставлено КАК КоличествоСопоставлено
	|		ПО (КоличествоСопоставлено.Продукция = Товары.Продукция)
	|			И (КоличествоСопоставлено.ЗаписьСкладскогоЖурнала = Товары.ЗаписьСкладскогоЖурнала
	|				ИЛИ &ИспользоватьОтборПоЗаписямЖурнала = ЛОЖЬ)";
	 
	 Возврат ТекстЗапроса;
	 
КонецФункции

// Устанавливает видимость команды "Выполнить обмен" в формах документов, протокола и панели обмена с ВетИС.
//
Процедура УстановитьВидимостьКомандыВыполнитьОбмен(Форма, ИмяЭлемента) Экспорт
	
	Если НЕ ИнтеграцияИС.ПравоИзмененияДокументовИзОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ДокументыВЕТИС) Тогда
		Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеОбмена(ОрганизацииВЕТИС, Документ = Неопределено) Экспорт
	
	ПараметрыОптимизации = ПараметрыОптимизации();
	
	ОрганизацииПредприятияВЕТИС = ТаблицаОрганизацияПредприятие(ОрганизацииВЕТИС);
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ОрганизацииПредприятияВЕТИС.Организация КАК Организация,
	|	ОрганизацииПредприятияВЕТИС.Предприятие КАК Предприятие
	|ПОМЕСТИТЬ ФильтрОрганизации
	|ИЗ
	|	&ОрганизацииПредприятияВЕТИС КАК ОрганизацииПредприятияВЕТИС
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Предприятие
	|");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ПредприятияОрганизаций.Ссылка      КАК Организация,
	|	ПредприятияОрганизаций.Предприятие КАК Предприятие
	|ПОМЕСТИТЬ ПредприятияОрганизаций
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ПредприятияОрганизаций
	|ГДЕ
	|	Не ПредприятияОрганизаций.НеИспользовать
	|	И ПредприятияОрганизаций.Ссылка.СоответствуетОрганизации
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Предприятие
	|");
	
	// Регистр Синхронизация классификаторов ВетИС
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы) КАК ТипВЕТИС,
	|	ПредприятияОрганизаций.Организация                                    КАК ХозяйствующийСубъект,
	|	ПредприятияОрганизаций.Предприятие                                    КАК Предприятие,
	|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСинхронизации,
	|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.Смещение,          0)                  КАК Смещение,
	|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена,        ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбмена
	|ПОМЕСТИТЬ СинхронизацияКлассификаторовВЕТИС
	|ИЗ
	|	ПредприятияОрганизаций КАК ПредприятияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = ПредприятияОрганизаций.Организация
	|		И ФильтрОрганизации.Предприятие = ПредприятияОрганизаций.Предприятие
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|		ПО ПредприятияОрганизаций.Организация = СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект
	|		И ПредприятияОрганизаций.Предприятие = СинхронизацияКлассификаторовВЕТИС.Предприятие
	|		И СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы)
	|ГДЕ
	|	(&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала) КАК ТипВЕТИС,
	|	ПредприятияОрганизаций.Организация                       КАК ХозяйствующийСубъект,
	|	ПредприятияОрганизаций.Предприятие                       КАК Предприятие,
	|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСинхронизации,
	|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.Смещение,          0)                  КАК Смещение,
	|	ЕСТЬNULL(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена,        ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбмена
	|ИЗ
	|	ПредприятияОрганизаций КАК ПредприятияОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = ПредприятияОрганизаций.Организация
	|		И ФильтрОрганизации.Предприятие = ПредприятияОрганизаций.Предприятие
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|		ПО ПредприятияОрганизаций.Организация = СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект
	|		И ПредприятияОрганизаций.Предприятие = СинхронизацияКлассификаторовВЕТИС.Предприятие
	|		И СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала)
	|ГДЕ
	|	(&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|");
	
	// Лишние записи в регистре синхронизации
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС             КАК ТипВЕТИС,
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие,
	|	СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации    КАК ДатаСинхронизации,
	|	СинхронизацияКлассификаторовВЕТИС.Смещение             КАК Смещение,
	|	СинхронизацияКлассификаторовВЕТИС.ДатаОбмена           КАК ДатаОбмена
	|ИЗ
	|	РегистрСведений.СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредприятияОрганизаций КАК ПредприятияОрганизаций
	|		ПО ПредприятияОрганизаций.Организация = СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект
	|		И ПредприятияОрганизаций.Предприятие = СинхронизацияКлассификаторовВЕТИС.Предприятие
	|ГДЕ
	|	(ПредприятияОрганизаций.Организация ЕСТЬ NULL
	|		ИЛИ (Не &ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала
	|			И СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала)))
	|	И (СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы)))
	|",
	"ЛишниеЗаписиСинхронизации");
	
	// Регистр Синхронизация классификаторов ВетИС
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие
	|ПОМЕСТИТЬ ВтДлительноеОтсутствиеОбменаПоВСД
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы)
	|	И (
	|		(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации <> ДАТАВРЕМЯ(1, 1, 1) 
	|			И РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, Секунда, &Смещение), &ТекущаяДата, Секунда) > &ИнтервалДлительногоОтсутствияОбмена)
	|		ИЛИ СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1)
	|	)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ИЗ
	|	ВтДлительноеОтсутствиеОбменаПоВСД КАК Т
	|",
	"ДлительноеОтсутствиеОбменаПоВСД");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие
	|ПОМЕСТИТЬ ВтДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала)
	|	И (
	|		(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации <> ДАТАВРЕМЯ(1, 1, 1) 
	|			И РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, Секунда, &Смещение), &ТекущаяДата, Секунда) > &ИнтервалДлительногоОтсутствияОбмена)
	|		ИЛИ СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации = ДАТАВРЕМЯ(1, 1, 1)
	|	)
	|	И &ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ИЗ
	|	ВтДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала КАК Т
	|",
	"ДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ИЗ
	|	ВтДлительноеОтсутствиеОбменаПоВСД КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ИЗ
	|	ВтДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала КАК Т
	|",
	"ДлительноеОтсутствиеОбмена");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла                          КАК ХозяйствующийСубъект,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие                            КАК Предприятие,
	|	МАКСИМУМ(ЗапросыЗаписейСкладскогоЖурнала.ДатаМодификацииУниверсальная) КАК ДатаОтклоненияЗаявки,
	|	0                                                                      КАК ДатаПоследнейЗаявки
	|ПОМЕСТИТЬ ВтПроблемыСинхронизацииВСД
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ЗапросыЗаписейСкладскогоЖурнала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла = ФильтрОрганизации.Организация
	|		И ЗапросыЗаписейСкладскогоЖурнала.Предприятие = ФильтрОрганизации.Предприятие
	|ГДЕ
	|	(&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|	И ЗапросыЗаписейСкладскогоЖурнала.Операция В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросВсехВСД))
	|	И ЗапросыЗаписейСкладскогоЖурнала.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие,
	|	0,
	|	МАКСИМУМ(ЗапросыЗаписейСкладскогоЖурнала.ДатаМодификацииУниверсальная)
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ЗапросыЗаписейСкладскогоЖурнала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла = ФильтрОрганизации.Организация
	|		И ЗапросыЗаписейСкладскогоЖурнала.Предприятие = ФильтрОрганизации.Предприятие
	|ГДЕ
	|	(&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|	И ЗапросыЗаписейСкладскогоЖурнала.Операция В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросВсехВСД))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПроблемыСинхронизацииВСД.ХозяйствующийСубъект           КАК ХозяйствующийСубъект,
	|	ВтПроблемыСинхронизацииВСД.Предприятие                    КАК Предприятие,
	|	МАКСИМУМ(ВтПроблемыСинхронизацииВСД.ДатаОтклоненияЗаявки) КАК ДатаОтклоненияЗаявки,
	|	МАКСИМУМ(ВтПроблемыСинхронизацииВСД.ДатаПоследнейЗаявки)  КАК ДатаПоследнейЗаявки
	|ПОМЕСТИТЬ ВтЕстьПроблемыAPLM0012ПриСинхронизацииВСДПредварительно
	|ИЗ
	|	ВтПроблемыСинхронизацииВСД КАК ВтПроблемыСинхронизацииВСД
	|ГДЕ
	|	(ВтПроблемыСинхронизацииВСД.ХозяйствующийСубъект, ВтПроблемыСинхронизацииВСД.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоВСД КАК Т)
	|СГРУППИРОВАТЬ ПО
	|	ВтПроблемыСинхронизацииВСД.ХозяйствующийСубъект,
	|	ВтПроблемыСинхронизацииВСД.Предприятие
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВтПроблемыСинхронизацииВСД.ДатаОтклоненияЗаявки) = МАКСИМУМ(ВтПроблемыСинхронизацииВСД.ДатаПоследнейЗаявки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ПОМЕСТИТЬ ВтЕстьПроблемыAPLM0012ПриСинхронизацииВСД
	|ИЗ
	|	ВтЕстьПроблемыAPLM0012ПриСинхронизацииВСДПредварительно КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|		ПО СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект = Т.ХозяйствующийСубъект
	|		И СинхронизацияКлассификаторовВЕТИС.Предприятие = Т.Предприятие
	|		И СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы)
	|ГДЕ
	|	Т.ДатаОтклоненияЗаявки МЕЖДУ ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, Секунда, -15) И ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, Секунда, 15)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ИЗ
	|	ВтЕстьПроблемыAPLM0012ПриСинхронизацииВСД КАК Т
	|",
	"ЕстьПроблемыAPLM0012ПриСинхронизацииВСД");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла                          КАК ХозяйствующийСубъект,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие                            КАК Предприятие,
	|	МАКСИМУМ(ЗапросыЗаписейСкладскогоЖурнала.ДатаМодификацииУниверсальная) КАК ДатаОтклоненияЗаявки,
	|	0                                                                      КАК ДатаПоследнейЗаявки
	|ПОМЕСТИТЬ ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ЗапросыЗаписейСкладскогоЖурнала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла = ФильтрОрганизации.Организация
	|		И ЗапросыЗаписейСкладскогоЖурнала.Предприятие = ФильтрОрганизации.Предприятие
	|ГДЕ
	|	&ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала
	|	И (&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|	И ЗапросыЗаписейСкладскогоЖурнала.Операция В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросЗаписейСкладскогоЖурнала))
	|	И ЗапросыЗаписейСкладскогоЖурнала.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаОтклонена)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие,
	|	0,
	|	МАКСИМУМ(ЗапросыЗаписейСкладскогоЖурнала.ДатаМодификацииУниверсальная)
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ЗапросыЗаписейСкладскогоЖурнала
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла = ФильтрОрганизации.Организация
	|		И ЗапросыЗаписейСкладскогоЖурнала.Предприятие = ФильтрОрганизации.Предприятие
	|ГДЕ
	|	&ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала
	|	И (&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|	И ЗапросыЗаписейСкладскогоЖурнала.Операция В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ОтветНаЗапросЗаписейСкладскогоЖурнала))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросыЗаписейСкладскогоЖурнала.ВладелецФайла,
	|	ЗапросыЗаписейСкладскогоЖурнала.Предприятие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.ХозяйствующийСубъект           КАК ХозяйствующийСубъект,
	|	ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.Предприятие                    КАК Предприятие,
	|	МАКСИМУМ(ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.ДатаОтклоненияЗаявки) КАК ДатаОтклоненияЗаявки,
	|	МАКСИМУМ(ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.ДатаПоследнейЗаявки)  КАК ДатаПоследнейЗаявки
	|ПОМЕСТИТЬ ВтЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурналаПредварительно
	|ИЗ
	|	ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала КАК ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала
	|ГДЕ
	|	(ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.ХозяйствующийСубъект, ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала КАК Т)
	|СГРУППИРОВАТЬ ПО
	|	ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.ХозяйствующийСубъект,
	|	ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.Предприятие
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.ДатаОтклоненияЗаявки) = МАКСИМУМ(ВтПроблемыСинхронизацииЗаписейСкладскогоЖурнала.ДатаПоследнейЗаявки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ПОМЕСТИТЬ ВтЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурнала
	|ИЗ
	|	ВтЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурналаПредварительно КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|		ПО СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект = Т.ХозяйствующийСубъект
	|		И СинхронизацияКлассификаторовВЕТИС.Предприятие = Т.Предприятие
	|		И СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала)
	|ГДЕ
	|	Т.ДатаОтклоненияЗаявки МЕЖДУ ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, Секунда, -15) И ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, Секунда, 15)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	Т.Предприятие КАК Предприятие
	|ИЗ
	|	ВтЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурнала КАК Т
	|",
	"ЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурнала");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы)
	|	И СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СинхронизацияКлассификаторовВЕТИС.ДатаОбмена <> ДАТАВРЕМЯ(1, 1, 1) 
	|	И РАЗНОСТЬДАТ(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, Секунда) > 2 * &Интервал
	|	И (СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект, СинхронизацияКлассификаторовВЕТИС.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоВСД КАК Т)
	|	И (СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект, СинхронизацияКлассификаторовВЕТИС.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтЕстьПроблемыAPLM0012ПриСинхронизацииВСД КАК Т)
	|",
	"ЕстьРасхожденияДатыСинхронизацииИДатыОбменаПоВСД");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	&ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала
	|	И СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала)
	|	И СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СинхронизацияКлассификаторовВЕТИС.ДатаОбмена <> ДАТАВРЕМЯ(1, 1, 1) 
	|	И РАЗНОСТЬДАТ(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, Секунда) > 2 * &Интервал
	|	И (СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект, СинхронизацияКлассификаторовВЕТИС.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала КАК Т)
	|	И (СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект, СинхронизацияКлассификаторовВЕТИС.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтЕстьПроблемыAPLM0012ПриСинхронизацииЗаписейСкладскогоЖурнала КАК Т)
	|",
	"ЕстьРасхожденияДатыСинхронизацииИДатыОбменаПоЗаписямСкладскогоЖурнала");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие,
	|	СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации    КАК ДатаСинхронизацииЗаписейСкладскогоЖурнала,
	|	ДатаВремя(2001, 1, 1)                                  КАК ДатаСинхронизацииВСД
	|ПОМЕСТИТЬ ВтРасхожденияДатСинхронизации
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие,
	|	ДатаВремя(2001, 1, 1)                                  КАК ДатаСинхронизацииЗаписейСкладскогоЖурнала,
	|	СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации    КАК ДатаСинхронизацииВСД
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтРасхожденияДатСинхронизации.ХозяйствующийСубъект                                КАК ХозяйствующийСубъект,
	|	ВтРасхожденияДатСинхронизации.Предприятие                                         КАК Предприятие,
	|	МАКСИМУМ(ВтРасхожденияДатСинхронизации.ДатаСинхронизацииЗаписейСкладскогоЖурнала) КАК ДатаСинхронизацииЗаписейСкладскогоЖурнала,
	|	МАКСИМУМ(ВтРасхожденияДатСинхронизации.ДатаСинхронизацииВСД)                      КАК ДатаСинхронизацииВСД
	|ИЗ
	|	ВтРасхожденияДатСинхронизации КАК ВтРасхожденияДатСинхронизации
	|ГДЕ
	|	&ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала
	|	И (ВтРасхожденияДатСинхронизации.ХозяйствующийСубъект, ВтРасхожденияДатСинхронизации.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоВСД КАК Т)
	|	И (ВтРасхожденияДатСинхронизации.ХозяйствующийСубъект, ВтРасхожденияДатСинхронизации.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала КАК Т)
	|СГРУППИРОВАТЬ ПО
	|	ВтРасхожденияДатСинхронизации.ХозяйствующийСубъект,
	|	ВтРасхожденияДатСинхронизации.Предприятие
	|ИМЕЮЩИЕ
	|	РАЗНОСТЬДАТ(
	|		МАКСИМУМ(ВтРасхожденияДатСинхронизации.ДатаСинхронизацииЗаписейСкладскогоЖурнала),
	|		МАКСИМУМ(ВтРасхожденияДатСинхронизации.ДатаСинхронизацииВСД),
	|		Секунда) > &Интервал
	|	ИЛИ
	|	РАЗНОСТЬДАТ(
	|		МАКСИМУМ(ВтРасхожденияДатСинхронизации.ДатаСинхронизацииВСД),
	|		МАКСИМУМ(ВтРасхожденияДатСинхронизации.ДатаСинхронизацииЗаписейСкладскогоЖурнала),
	|		Секунда) > &Интервал
	|",
	"ЕстьРасхожденияМеждуДатамиСинхронизацииЗаписейСкладскогоЖурналаИВСД");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ВетеринарноСопроводительныеДокументы)
	|	И (СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект, СинхронизацияКлассификаторовВЕТИС.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоВСД КАК Т)
	|	И ((СинхронизацияКлассификаторовВЕТИС.ДатаОбмена <> ДАТАВРЕМЯ(1, 1, 1)
	|		И РАЗНОСТЬДАТ(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, &ТекущаяДата, Секунда) > &Интервал)
	|	ИЛИ (СинхронизацияКлассификаторовВЕТИС.ДатаОбмена = ДАТАВРЕМЯ(1, 1, 1)
	|		И СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации <> ДАТАВРЕМЯ(1, 1, 1) 
	|		И РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, Секунда, &Смещение), &ТекущаяДата, Секунда) > &Интервал))
	|",
	"НеАктуальныеВСД");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	СинхронизацияКлассификаторовВЕТИС.Предприятие          КАК Предприятие
	|ИЗ
	|	СинхронизацияКлассификаторовВЕТИС КАК СинхронизацияКлассификаторовВЕТИС
	|ГДЕ
	|	&ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала
	|	И СинхронизацияКлассификаторовВЕТИС.ТипВЕТИС = ЗНАЧЕНИЕ(Перечисление.ТипыВЕТИС.ЗаписиСкладскогоЖурнала)
	|	И (СинхронизацияКлассификаторовВЕТИС.ХозяйствующийСубъект, СинхронизацияКлассификаторовВЕТИС.Предприятие) НЕ В (
	|		ВЫБРАТЬ
	|			Т.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|			Т.Предприятие КАК Предприятие
	|		ИЗ
	|			ВтДлительноеОтсутствиеОбменаПоЗаписямСкладскогоЖурнала КАК Т)
	|	И ((СинхронизацияКлассификаторовВЕТИС.ДатаОбмена <> ДАТАВРЕМЯ(1, 1, 1)
	|		И РАЗНОСТЬДАТ(СинхронизацияКлассификаторовВЕТИС.ДатаОбмена, &ТекущаяДата, Секунда) > &Интервал)
	|	ИЛИ (СинхронизацияКлассификаторовВЕТИС.ДатаОбмена = ДАТАВРЕМЯ(1, 1, 1)
	|		И СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации <> ДАТАВРЕМЯ(1, 1, 1) 
	|		И РАЗНОСТЬДАТ(ДОБАВИТЬКДАТЕ(СинхронизацияКлассификаторовВЕТИС.ДатаСинхронизации, Секунда, &Смещение), &ТекущаяДата, Секунда) > &Интервал))
	|",
	"НеАктуальныеЗаписиСкладскогоЖурнала");
	
	// Прочее
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьСообщенийВЕТИС.Сообщение), 0) КАК Количество
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийВЕТИС КАК ОчередьСообщенийВЕТИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = ОчередьСообщенийВЕТИС.ХозяйствующийСубъект
	|		И (ФильтрОрганизации.Предприятие = ОчередьСообщенийВЕТИС.Предприятие ИЛИ ОчередьСообщенийВЕТИС.Предприятие = ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка))
	|ГДЕ
	|	&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьСообщенийВЕТИС.Сообщение), 0) > 0
	|",
	"ЕстьСообщенияОжидающиеОтправки");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) КАК Количество
	|ИЗ
	|	Справочник.ПродукцияВЕТИС КАК Таблица
	|ГДЕ
	|	Таблица.ТребуетсяЗагрузка
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) КАК Количество
	|ИЗ
	|	Справочник.ХозяйствующиеСубъектыВЕТИС КАК Таблица
	|ГДЕ
	|	Таблица.ТребуетсяЗагрузка
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Справочник.ХозяйствующиеСубъектыВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) КАК Количество
	|ИЗ
	|	Справочник.ПредприятияВЕТИС КАК Таблица
	|ГДЕ
	|	Таблица.ТребуетсяЗагрузка
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ЦелиВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) КАК Количество
	|ИЗ
	|	Справочник.ЦелиВЕТИС КАК Таблица
	|ГДЕ
	|	Таблица.ТребуетсяЗагрузка
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Справочник.ЦелиВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Таблица.Ссылка), 0) > 0
	|",
	"ТребуетсяЗагрузкаЭлементовКлассификаторов");
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ВходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0)          КАК Количество
	|ИЗ
	|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС КАК Шапка
	|		ПО Шапка.Ссылка = СтатусыДокументовВЕТИС.Документ
	|		И Шапка.Ссылка <> &Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = Шапка.ГрузополучательХозяйствующийСубъект
	|		И ФильтрОрганизации.Предприятие = Шапка.ГрузополучательПредприятие
	|ГДЕ
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных)
	|	И (&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Документ.ВходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ИсходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0)           КАК Количество
	|ИЗ
	|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК Шапка
	|		ПО Шапка.Ссылка = СтатусыДокументовВЕТИС.Документ
	|		И Шапка.Ссылка <> &Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = Шапка.ГрузоотправительХозяйствующийСубъект
	|		И ФильтрОрганизации.Предприятие = Шапка.ГрузоотправительПредприятие
	|ГДЕ
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных)
	|	И (&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Документ.ИсходящаяТранспортнаяОперацияВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ИнвентаризацияПродукцииВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0)     КАК Количество
	|ИЗ
	|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнвентаризацияПродукцииВЕТИС КАК Шапка
	|		ПО Шапка.Ссылка = СтатусыДокументовВЕТИС.Документ
	|		И Шапка.Ссылка <> &Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = Шапка.ХозяйствующийСубъект
	|		И ФильтрОрганизации.Предприятие = Шапка.Предприятие
	|ГДЕ
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных)
	|	И (&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Документ.ИнвентаризацияПродукцииВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0)                 КАК Количество
	|ИЗ
	|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС КАК Шапка
	|		ПО Шапка.Ссылка = СтатусыДокументовВЕТИС.Документ
	|		И Шапка.Ссылка <> &Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = Шапка.ХозяйствующийСубъект
	|		И ФильтрОрганизации.Предприятие = Шапка.Предприятие
	|ГДЕ
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных)
	|	И (&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Документ.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ПроизводственнаяОперацияВЕТИС.ПустаяСсылка) КАК Классификатор,
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0)      КАК Количество
	|ИЗ
	|	РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияВЕТИС КАК Шапка
	|		ПО Шапка.Ссылка = СтатусыДокументовВЕТИС.Документ
	|		И Шапка.Ссылка <> &Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФильтрОрганизации КАК ФильтрОрганизации
	|		ПО ФильтрОрганизации.Организация = Шапка.ХозяйствующийСубъект
	|		И ФильтрОрганизации.Предприятие = Шапка.Предприятие
	|ГДЕ
	|	СтатусыДокументовВЕТИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных)
	|	И (&БезОтбораПоОрганизацииВЕТИС ИЛИ ФильтрОрганизации.Организация ЕСТЬ НЕ NULL)
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Документ.ПроизводственнаяОперацияВЕТИС.ПустаяСсылка)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(СтатусыДокументовВЕТИС.Документ), 0) > 0
	|",
	"ЕстьПроблемыСОтправкойДокументов");
	
	Интервал = ПараметрыОптимизации.ИнтервалЗапросаИзмененныхДанных;
	Если Интервал <= 0 Тогда
		Интервал = 60*60*24; // 1 день
	КонецЕсли;
	
	Смещение = МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс()) - ТекущаяУниверсальнаяДата();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацииПредприятияВЕТИС", ОрганизацииПредприятияВЕТИС);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизацииВЕТИС", ОрганизацииПредприятияВЕТИС.Количество() = 0);
	Запрос.УстановитьПараметр("Документ",                    Документ);
	
	Запрос.УстановитьПараметр("ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала", ПараметрыОптимизации.ЗапрашиватьИзмененияЗаписейСкладскогоЖурнала);
	Запрос.УстановитьПараметр("ТекущаяДата",                                  ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("Интервал",                                     Интервал);
	Запрос.УстановитьПараметр("ИнтервалДлительногоОтсутствияОбмена",          7*60*60*24);
	Запрос.УстановитьПараметр("Смещение",                                     Смещение);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат РезультатыЗапроса;
	
КонецФункции

Процедура СнятьФлагТребуетсяЗагрузкаПриНеобходимости(ЗаполняемаяСсылка, РезультатВыполненияЗапроса)
	
	Если ЗначениеЗаполнено(ЗаполняемаяСсылка)
		И РезультатВыполненияЗапроса.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ОшибкаПоиска Тогда
		
		СправочникОбъект = ЗаполняемаяСсылка.ПолучитьОбъект();
		СправочникОбъект.Заблокировать();
		СправочникОбъект.ТребуетсяЗагрузка = Ложь;
		Если СправочникОбъект.Статус <> Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Удален
			И СправочникОбъект.Статус <> Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеОбъединения
			И СправочникОбъект.Статус <> Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеПрисоединения
			И СправочникОбъект.Статус <> Перечисления.СтатусыВерсионныхОбъектовВЕТИС.УдаленВРезультатеРазделения Тогда
			СправочникОбъект.Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Удален;
		КонецЕсли;
		СправочникОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти