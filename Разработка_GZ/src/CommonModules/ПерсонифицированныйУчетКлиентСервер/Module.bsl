
#Область ПрограммныйИнтерфейс

// Процедура определяет будет ли доступно для редактирования поле ВидДокументаПредставление
// в форме РСВ-1 за 2014 г.
//
// Параметры:
//  Доступность - булево.
//
Процедура ОпределитьДоступностьИзмененияВидаРСВ_1(Доступность) Экспорт
	Доступность = Ложь;		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает строковое представление места рождения.
//
// Параметры:
//  СтрокаМестоРождения	 - Строка	 - место рождения в формате хранения.
// 
// Возвращаемое значение:
//  Строка - представление места рождения.
//
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт  
	
	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Если СтруктураМестоРождения.Особое = 1 Тогда
		
		Представление	=	"особое" +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
	Иначе
		
		Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		Если Лев(Представление, 1) = ","  Тогда
			Представление = Сред(Представление, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВыбиратьФорматОтчетностиЗа2Кв2015() Экспорт 
	Возврат Ложь;	
КонецФункции	

Функция ТипыОтправляемыхДокументовПерсУчета() Экспорт
	
	ТипыДокументовПерсУчета = Новый Массив;
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ВедомостьУплатыАДВ_11"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ОписьОДВ_1"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_1"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_2"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовАДВ_3"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовДСВ_1"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовСЗВ_К"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовСПВ_1"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.ПачкаДокументовСПВ_2"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.РеестрДСВ_3"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.СведенияОЗастрахованныхЛицахСЗВ_М"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ"));
	ТипыДокументовПерсУчета.Добавить(Тип("ДокументСсылка.СведенияОТрудовойДеятельностиРаботниковСЗВ_ТД"));
	ТипыДокументовПерсУчета.Добавить(Тип("СправочникСсылка.КомплектыОтчетностиПерсУчета"));
	
	Возврат ТипыДокументовПерсУчета;
	
КонецФункции	

Функция ОписаниеДокументаСЗВ() Экспорт
	
	ОписаниеДокумента = Новый Структура;
	ОписаниеДокумента.Вставить("ВариантОтчетногоПериода", "КВАРТАЛ");
	ОписаниеДокумента.Вставить("ЕстьКорректируемыйПериод", Ложь);
	ОписаниеДокумента.Вставить("ИмяПоляКорректируемыйПериод", "");
	
	Возврат ОписаниеДокумента;
	
КонецФункции

Процедура ДокументыСведенийОВзносахИСтажеУстановитьДоступностьЭлементов(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ТипСведенийСЗВ = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ") Тогда
		Элементы.КорректируемыйПериод.ТолькоПросмотр = Истина;
		
		Элементы.СотрудникиНачисленоСтраховая.Видимость = Истина;
		Элементы.СотрудникиУплаченоСтраховая.Видимость = Истина;
		
		Элементы.СотрудникиНачисленоНакопительная.Видимость = Истина;
		Элементы.СотрудникиУплаченоНакопительная.Видимость = Истина;
		
		Элементы.СотрудникиДоначисленоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиДоначисленоСтраховая.Видимость     = Ложь;
		
		Элементы.СотрудникиДоуплаченоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиДоуплаченоСтраховая.Видимость     = Ложь;
		
	Иначе
		Если Объект.ТипСведенийСЗВ = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ") Тогда
			Элементы.СотрудникиНачисленоСтраховая.Видимость = Истина;
			Элементы.СотрудникиУплаченоСтраховая.Видимость = Истина;
			
			Элементы.СотрудникиНачисленоНакопительная.Видимость = Истина;
			Элементы.СотрудникиУплаченоНакопительная.Видимость = Истина;
			
			Элементы.СотрудникиДоначисленоНакопительная.Видимость = Истина;
			Элементы.СотрудникиДоначисленоСтраховая.Видимость     = Истина;
			
			Элементы.СотрудникиДоуплаченоНакопительная.Видимость = Истина;
			Элементы.СотрудникиДоуплаченоСтраховая.Видимость     = Истина;
		Иначе
			Элементы.СотрудникиНачисленоСтраховая.Видимость = Ложь;
			Элементы.СотрудникиУплаченоСтраховая.Видимость = Ложь;
			
			Элементы.СотрудникиНачисленоНакопительная.Видимость = Ложь;
			Элементы.СотрудникиУплаченоНакопительная.Видимость = Ложь;
			
			Элементы.СотрудникиДоначисленоНакопительная.Видимость = Ложь;
			Элементы.СотрудникиДоначисленоСтраховая.Видимость     = Ложь;
			
			Элементы.СотрудникиДоуплаченоСтраховая.Видимость = Истина;
			Элементы.СотрудникиДоуплаченоНакопительная.Видимость = Истина;
			
		КонецЕсли;
		
		Элементы.КорректируемыйПериод.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументыСведенийОВзносахИСтажеУстановитьКорректируемыйПериод(Форма, МаксимальныйПериод = Неопределено) Экспорт
	
	Если Форма.Объект.ТипСведенийСЗВ <> ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ") Тогда
		КорректируемыйПериод = ПредшествующийОтчетныйПериодПерсУчета(Форма.Объект.ОтчетныйПериод);

		Если МаксимальныйПериод <> Неопределено Тогда
			Форма.Объект.КорректируемыйПериод = Мин(КорректируемыйПериод, МаксимальныйПериод);
		Иначе
			Форма.Объект.КорректируемыйПериод = КорректируемыйПериод;	
		КонецЕсли;
		
		Форма.КорректируемыйПериодСтрока = ПредставлениеОтчетногоПериода(Форма.Объект.КорректируемыйПериод);
	Иначе
		Форма.Объект.КорректируемыйПериод = '00010101';
		Форма.КорректируемыйПериодСтрока = "";
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоДокументСведенийОВзносахИСтаже(Ссылка) Экспорт
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") 
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ТекстИнфоНадписиСостояниеДокумента(Проведен, ДокументПринятВПФР, КоличествоЗаписейВТаблице, ВидДокумента = "Пачка") Экспорт
	
	Если Проведен И ДокументПринятВПФР  Тогда
		Если ВидДокумента = "Реестр" Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 документов отмечен как принятый в ПФР. Редактирование запрещено'"), 
						ВидДокумента);
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 документов отмечена как принятая в ПФР. Редактирование запрещено'"), 
						ВидДокумента);
		КонецЕсли;
	ИначеЕсли Проведен Тогда
		Текст = НСтр("ru='Файл для отправки в ПФР сформирован и проверен'"); 
	ИначеЕсли КоличествоЗаписейВТаблице = 0 Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1 документов не содержит ни одной записи'"),
					ВидДокумента);
	Иначе
		Если ВидДокумента = "Реестр" Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 заполнен, перед отправкой в ПФР необходимо провести документ'"), 
						ВидДокумента);
		Иначе	
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 заполнена, перед отправкой в ПФР необходимо провести документ'"),
						ВидДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

// Функция раскладывает строку с данными о месте рождения на элементы структуры.
//
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт
	
	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";
	
	МассивМестоРождения	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, ВРег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве > 0 Тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" Тогда
			Особое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		НаселенныйПункт = СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Область = СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Страна = СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура УстановитьФорматРегистрационногоНомераПФР(РегистрационныйНомерПФР) Экспорт 
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерПФР) Тогда 
		Возврат;
	КонецЕсли;
	
	НомерБезПробелов = СтрЗаменить(СокрЛП(РегистрационныйНомерПФР), " ", "");
	НомерБезДефисов = СтрЗаменить(НомерБезПробелов, "-", "");
	
	Если СтрДлина(НомерБезДефисов) <> 12 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрационныйНомерПФР = Лев(НомерБезДефисов, 3) + "-" + Сред(НомерБезДефисов, 4, 3) + "-" + Сред(НомерБезДефисов, 7);
	
КонецПроцедуры

Процедура УстановитьФорматСтраховогоНомераПФР(СтраховойНомерПФР) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтраховойНомерПФР) Тогда 
		Возврат;
	КонецЕсли;
	
	НомерБезПробелов = СтрЗаменить(СокрЛП(СтраховойНомерПФР), " ", "");
	НомерБезДефисов = СтрЗаменить(НомерБезПробелов, "-", "");
	
	Если СтрДлина(НомерБезДефисов) <> 11 Тогда
		Возврат;
	КонецЕсли;
	
	СтраховойНомерПФР = Лев(НомерБезДефисов, 3) + "-" + Сред(НомерБезДефисов, 4, 3) + "-" + Сред(НомерБезДефисов, 7, 3) + " " + Сред(НомерБезДефисов, 10);
	
КонецПроцедуры

// Процедуры и функции работы с периодом отчетности.

Функция ОкончаниеОтчетногоПериодаПерсУчета(ОтчетныйПериод) Экспорт 
	Если ОтчетныйПериод >= '20110101' Тогда
		Возврат КонецКвартала(ОтчетныйПериод);
	ИначеЕсли  Месяц(ОтчетныйПериод) <= 6 Тогда
		Возврат Дата(Год(ОтчетныйПериод), 6, 30, 23, 59, 59); 
	Иначе
		Возврат КонецГода(ОтчетныйПериод);
	КонецЕсли;	
КонецФункции

Функция ПредшествующийОтчетныйПериодПерсУчета(Дата) Экспорт 
	
	Если Дата <= '20110101' Тогда 
		Возврат ДобавитьМесяц(НачалоКвартала(Дата), -6);	
	Иначе		
		Возврат ДобавитьМесяц(НачалоКвартала(Дата), -3);
	КонецЕсли;	
	
КонецФункции

Функция СледующийОтчетныйПериод(ОтчетныйПериод) Экспорт
	Если (ОтчетныйПериод = '20100101' Или ОтчетныйПериод = '20100701') Тогда	
		Шаг = 6;
	Иначе 
		Шаг = 3;
	КонецЕсли;	
		
	Возврат ДобавитьМесяц(ОтчетныйПериод, Шаг);
КонецФункции	

Функция ПолучитьНачалоОтчетногоПериода(Дата) Экспорт
	Если Дата >= '20110101' Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли Месяц(Дата) <= 6 Тогда
		Возврат Дата(Год(Дата), 1, 1);
	Иначе
		Возврат  Дата(Год(Дата), 7, 1);
	КонецЕсли;		
КонецФункции	

Функция ПредставлениеОтчетногоПериода(Период, Кратко = Ложь) Экспорт
	
	Если Период = '00010101' Тогда
		Возврат "";
	ИначеЕсли Период >= '20170101' Тогда	
		Возврат Формат(Период, "ДФ='гггг ""г.""'");
	ИначеЕсли Период >= '20110101' Тогда	
		Если Кратко Тогда
			Возврат Формат(Период, "ДФ='к ""кв."" ггг ""г.""'");
		Иначе	
			Возврат ПредставлениеПериода(Период, ОкончаниеОтчетногоПериодаПерсУчета(Период), "ФП = Истина");
		КонецЕсли;
	ИначеЕсли Период >= '20100101' Тогда
		Если Месяц(Период) <= 6  Тогда
			Если Кратко Тогда
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1 полугод. %1 г.'"), Формат(Период, "ДФ=ггг"));
			Иначе	
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1 полугодие %1 г.'"), Формат(Период, "ДФ=ггг"));
			КонецЕсли;	
		Иначе
			Если Кратко Тогда
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '2 полугод. %1 г.'"), Формат(Период, "ДФ=ггг"));
			Иначе	
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '2 полугодие %1 г.'"), Формат(Период, "ДФ=ггг"));
			КонецЕсли;	
		КонецЕсли;
	ИначеЕсли Период >= '20020101' Тогда
		Возврат Формат(Период, "ДФ='гггг ""г.""'");
	ИначеЕсли Период >= '20010101' Тогда
		Возврат ПредставлениеПериода(Период, КонецКвартала(Период), "ФП = Истина");
	ИначеЕсли Период >= '19970101' Тогда
		Если Месяц(Период) <= 6  Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '1 полугодие %1 г.'"), Формат(Период, "ДФ=ггг"));
		Иначе
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '2 полугодие %1 г.'"), Формат(Период, "ДФ=ггг"));
		КонецЕсли;
	ИначеЕсли Период >= '19961001' Тогда
		Возврат ПредставлениеПериода(Период, КонецКвартала(Период), "ФП = Истина");
	Иначе 
		Возврат ПредставлениеПериода(Период, КонецДня('19960930'), "ФП = Истина");
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьПредставлениеДокументаУдостоверяющегоЛичность(Запись) Экспорт
	Перем КемВыдан, ДатаВыдачи;
	
	ТекстСерия				= НСтр("ru = ', серия: %1'");
	ТекстНомер				= НСтр("ru = ', № %1'");
	ТекстДатаВыдачи			= НСтр("ru = ', выдан: %1 года'");
	ТекстСрокДействия		= НСтр("ru = ', действует до: %1 года'");
	ТекстКодПодразделения	= НСтр("ru = ', № подр. %1'");

	Запись.Свойство("КемВыдан", КемВыдан);
	Запись.Свойство("ДатаВыдачи", ДатаВыдачи);
	
	Возврат Строка(Запись.ВидДокумента)
				+ ?(ЗначениеЗаполнено(Запись.СерияДокумента), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерия, Запись.СерияДокумента), "")
				+ ?(ЗначениеЗаполнено(Запись.НомерДокумента), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНомер, Запись.НомерДокумента), "")
				+ ?(ЗначениеЗаполнено(ДатаВыдачи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВыдачи, Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'")), "")
				+ ?(ЗначениеЗаполнено(КемВыдан), ", " + КемВыдан, "");
КонецФункции				

Процедура ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику) Экспорт 
	НомерОсновнойЗаписи =0; 

	НомерСтроки =0;
	Для Каждого СтрокаСтажа Из СтрокиСтажаПоСотруднику Цикл
		НомерСтроки = НомерСтроки +1;

		// Контролируем смену основной записи.
		Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) Тогда
			// Встретили основную запись
			НомерОсновнойЗаписи = НомерОсновнойЗаписи +1; 
			НомерДополнительнойЗаписи =0; 
		Иначе	
			Если НомерОсновнойЗаписи <> 0 Тогда
				НомерДополнительнойЗаписи =НомерДополнительнойЗаписи + 1; 
			КонецЕсли;	 
		КонецЕсли;	

		СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
		СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
	КонецЦикла;	
КонецПроцедуры

Функция ОкончаниеОтчетногоПериодаСтажаПерсУчета(ОтчетныйПериод) Экспорт 
	
	Если ОтчетныйПериод >= '20170101' Тогда
		Возврат КонецГода(ОтчетныйПериод);
	ИначеЕсли ОтчетныйПериод >= '20110101' Тогда
		Возврат КонецКвартала(ОтчетныйПериод);
	ИначеЕсли ОтчетныйПериод >= '20100101' Тогда
		Если  Месяц(ОтчетныйПериод) <= 6 Тогда
			Возврат Дата(Год(ОтчетныйПериод), 6, 30, 23, 59, 59); 
		Иначе
			Возврат КонецГода(ОтчетныйПериод);
		КонецЕсли;
	ИначеЕсли ОтчетныйПериод >= '20020101' Тогда
		Возврат КонецГода(ОтчетныйПериод);
	ИначеЕсли ОтчетныйПериод >= '20010101' Тогда
		Возврат КонецКвартала(ОтчетныйПериод);
	ИначеЕсли ОтчетныйПериод >= '19970101' Тогда
		Если  Месяц(ОтчетныйПериод) <= 6 Тогда
			Возврат Дата(Год(ОтчетныйПериод), 6, 30, 23, 59, 59); 
		Иначе
			Возврат КонецГода(ОтчетныйПериод);
		КонецЕсли;
	ИначеЕсли ОтчетныйПериод = '19960101' Тогда 
		Возврат КонецДня('19960930');
	Иначе 
		Возврат КонецКвартала(ОтчетныйПериод);
	КонецЕсли;
	
КонецФункции

Функция КодОтчетногоПериода(Начало, Окончание) Экспорт 
	
	ДанныеОтчетногоПериода = ДанныеОтчетногоПериода(Начало, Окончание);
	Возврат ДанныеОтчетногоПериода.Код;
	
КонецФункции

Функция ПредшествующийОтчетныйПериодСтажаПерсУчета(Дата) Экспорт 
	
	Если Дата <= '20110101' Тогда 
		Возврат ДобавитьМесяц(НачалоКвартала(Дата), -6);	
	ИначеЕсли Дата <= '20170101' Тогда 		
		Возврат ДобавитьМесяц(НачалоКвартала(Дата), -3);
	Иначе		
		Возврат ДобавитьМесяц(НачалоГода(Дата), -12);
	КонецЕсли;	
	
КонецФункции

Функция ДанныеОтчетногоПериода(Начало, Окончание) Экспорт   
	
	Если Начало < Дата(2017, 1, 1) Тогда
		ОтчетныеПериоды = ОтчетныеПериодыДо2017Года();
		Для Каждого ОтчетныйПериод Из ОтчетныеПериоды Цикл 
			Если ОтчетныйПериод.Начало = Начало И ОтчетныйПериод.Окончание = Окончание Тогда
				Возврат ОтчетныйПериод;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеОтчетногоПериода(Начало, Окончание, "0");
	
КонецФункции

Функция ОтчетныеПериодыДо2017Года() Экспорт
	
	ОтчетныеПериоды = Новый Массив;
	
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(1996, 1, 1), Дата(1996, 9, 30), "3"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(1996, 10, 1), Дата(1996, 12, 31), "4"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(1996, 1, 1), Дата(1996, 12, 31), "0"));
	
	Для Год = 1997 По 2000 Цикл
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 1, 1), Дата(Год, 6, 30), "2"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 7, 1), Дата(Год, 12, 31), "4"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 1, 1), Дата(Год, 12, 31), "0"));
	КонецЦикла;
	
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 1, 1), Дата(2001, 6, 30), "2"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 7, 1), Дата(2001, 12, 31), "4"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 1, 1), Дата(2001, 12, 31), "0"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 1, 1), Дата(2001, 3, 31), "5"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 4, 1), Дата(2001, 6, 30), "6"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 7, 1), Дата(2001, 9, 30), "7"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 10, 1), Дата(2001, 12, 31), "8"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 1, 1), Дата(2001, 9, 30), "1"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 4, 1), Дата(2001, 9, 30), "3"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2001, 4, 1), Дата(2001, 12, 31), "9"));
	
	Для Год = 2002 По 2009 Цикл
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 1, 1), Дата(Год, 12, 31), "0"));
	КонецЦикла;
	
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2010, 1, 1), Дата(2010, 6, 30), "1"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2010, 7, 1), Дата(2010, 12, 31), "2"));
	ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(2010, 1, 1), Дата(2010, 12, 31), "0"));
	
	Для Год = 2011 По 2013 Цикл
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 1, 1), Дата(Год, 3, 31), "1"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 4, 1), Дата(Год, 6, 30), "2"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 7, 1), Дата(Год, 9, 30), "3"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 10, 1), Дата(Год, 12, 31), "4"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 1, 1), Дата(Год, 12, 31), "0"));
	КонецЦикла;
	
	Для Год = 2014 По 2016 Цикл
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 1, 1), Дата(Год, 3, 31), "3"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 4, 1), Дата(Год, 6, 30), "6"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 7, 1), Дата(Год, 9, 30), "9"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 10, 1), Дата(Год, 12, 31), "0"));
		ОтчетныеПериоды.Добавить(ОписаниеОтчетногоПериода(Дата(Год, 1, 1), Дата(Год, 12, 31), "4"));
	КонецЦикла;
	
	Возврат ОтчетныеПериоды;
	
КонецФункции

Функция ОписаниеОтчетногоПериода(Начало, Окончание, Код) Экспорт
	
	ОписаниеПериода = Новый Структура("Начало, Окончание, Представление, Код", Начало, Окончание, "", Код);
	ОписаниеПериода.Представление = ПредставлениеПериода(Начало, КонецДня(Окончание), "ФП = Истина");
	Если Начало = Дата(Год(Начало), 7, 1) И КонецДня(Окончание) = КонецГода(Начало) Тогда
		ОписаниеПериода.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '2 полугодие %1 г.'"), Формат(Начало, "ДФ=ггг"));
	ИначеЕсли Начало = Дата(2001, 4, 1) И Окончание = Дата(2001, 9, 30) Тогда
		ОписаниеПериода.Представление = НСтр("ru = 'Апрель - Сентябрь 2001 г.'");
	ИначеЕсли Начало = Дата(2001, 4, 1) И Окончание = Дата(2001, 12, 31) Тогда
		ОписаниеПериода.Представление = НСтр("ru = 'Апрель - Декабрь 2001 г.'");
	КонецЕсли;
	
	Возврат ОписаниеПериода;
	
КонецФункции

#Область СЗВ61СЗВ62СПВ1ОбрПодготовкаДанныхВПФР

Процедура ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(ДанныеТекущейСтроки, КонтролируемыеПоля, СтарыеЗначенияКонтролируемыхПолей) Экспорт
	Для Каждого РазделКонтролируемыхПолей Из КонтролируемыеПоля Цикл 
		МассивКонтролируемыхПолей = РазделКонтролируемыхПолей.Значение.КонтролируемыеПоля; 
		Если НЕ СтарыеЗначенияКонтролируемыхПолей.Свойство(РазделКонтролируемыхПолей.Ключ) Тогда
			СтарыеЗначенияКонтролируемыхПолей.Вставить(РазделКонтролируемыхПолей.Ключ, Новый Структура);
		КонецЕсли;	
		Для Каждого КонтролируемоеПоле Из МассивКонтролируемыхПолей Цикл
			НовоеЗначениеПоля = Неопределено;
			Если ДанныеТекущейСтроки.Свойство(КонтролируемоеПоле, НовоеЗначениеПоля) Тогда
				СтарыеЗначенияКонтролируемыхПолей[РазделКонтролируемыхПолей.Ключ].Вставить(КонтролируемоеПоле, НовоеЗначениеПоля);	
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область СЗВ61СЗВ62СПВ1ОбрПодготовкаДанныхВПФР

Процедура ДокументыРедактированияСтажаСотрудникиПередУдалением(УдаляемыеСтроки, Сотрудники, ЗаписиОСтаже) Экспорт
	
	Для Каждого Идентификатор Из УдаляемыеСтроки Цикл
		СтрокаСотрудник = Сотрудники.НайтиПоИдентификатору(Идентификатор);
		Если СтрокаСотрудник <> Неопределено Тогда 
			УдалитьСтрокиТаблицыЗаписиОСтаже(ЗаписиОСтаже, СтрокаСотрудник.Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры	

Процедура УдалитьСтрокиТаблицыЗаписиОСтаже(ЗаписиОСтаже, Сотрудник) Экспорт
	УдаляемыеСтрокиТаблицы = ЗаписиОСтаже.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиТаблицы Цикл
		ЗаписиОСтаже.Удалить(ЗаписиОСтаже.Индекс(УдаляемаяСтрока));
	КонецЦикла;	
КонецПроцедуры	

Процедура ДокументыРедактированияСтажаУстановитьОтборЗаписейОСтаже(ЭлементФормыЗаписиОСтаже, Сотрудник) Экспорт 
	СтруктураОтбора = Новый ФиксированнаяСтруктура("Сотрудник", Сотрудник);
	ЭлементФормыЗаписиОСтаже.ОтборСтрок = СтруктураОтбора;		
КонецПроцедуры

Функция ПолучитьСсылкуНаОтправляемыйДокументПоФорме(Форма) Экспорт
	Возврат Форма.СсылкаНаОтправляемыйДокумент();
КонецФункции

Процедура ДокументыКвартальнойОтчетностиСообщитьОбОшибкахПользователю(Ошибки, Отказ) Экспорт
	Для Каждого ОписаниеОшибки Из Ошибки Цикл
		Если ОписаниеОшибки.ТипОшибки = "ОшибкаЗаполненияЭлементаДокумента" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ОписаниеОшибки.Поле, "Объект", Отказ);
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаЗаполненияСпискаСотрудников" Тогда
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", ОписаниеОшибки.НомерВПачке, "Сотрудник");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);	
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаЗаполненияДанныхЗЛ" Тогда
			ИмяРеквизита = ?(ОписаниеОшибки.Поле = "", "Сотрудник", ОписаниеОшибки.Поле);
			
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", ОписаниеОшибки.НомерВПачке, ИмяРеквизита);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаДанныхОВзносах" Тогда
			ИмяРеквизита = ?(ОписаниеОшибки.Поле = "", "Сотрудник", ОписаниеОшибки.Поле);
			
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", ОписаниеОшибки.НомерВПачке, ИмяРеквизита);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);	
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаДанныхОСтаже" Тогда	
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", ОписаниеОшибки.НомерВПачке, "Сотрудник");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);		
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаДанныхОЗаработке" Тогда	
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", ОписаниеОшибки.НомерВПачке, "Сотрудник");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаДанныхОЗаработкеЗаМесяц" Тогда
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", ОписаниеОшибки.НомерВПачке, "Сотрудник");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);	
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаДанныхДокументаОписи" Тогда
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПачкиДокументов", ОписаниеОшибки.НомерСтроки, "ПачкаДокументов");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);
		ИначеЕсли ОписаниеОшибки.ТипОшибки = "ОшибкаДанныхОЗадолженности" Тогда	
			ПутьКДанным = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СведенияОЗадолженности", ОписаниеОшибки.НомерСтроки, ОписаниеОшибки.Поле);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки.Текст, ОписаниеОшибки.Документ, ПутьКДанным, "Объект", Отказ);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти

#Область СЗВ_КОРР

Функция КодыМесяцевСЗВ_КОРР() Экспорт 
	
	КодыМесяцев = Новый Соответствие;
	КодыМесяцев.Вставить(1, "Янв");
	КодыМесяцев.Вставить(2, "Фев");
	КодыМесяцев.Вставить(3, "Мрт");
	КодыМесяцев.Вставить(4, "Апр");
	КодыМесяцев.Вставить(5, "Май");
	КодыМесяцев.Вставить(6, "Июн");
	КодыМесяцев.Вставить(7, "Июл");
	КодыМесяцев.Вставить(8, "Авг");
	КодыМесяцев.Вставить(9, "Сен");
	КодыМесяцев.Вставить(10, "Окт");
	КодыМесяцев.Вставить(11, "Нбр");
	КодыМесяцев.Вставить(12, "Дек");
	
	Возврат КодыМесяцев;
	
КонецФункции

Функция ПорядокМесяцевСЗВ_КОРР() Экспорт
	
	ПорядокМесяцев = Новый Соответствие;
	ПорядокМесяцев.Вставить("Янв", 1);
	ПорядокМесяцев.Вставить("Фев", 2);
	ПорядокМесяцев.Вставить("Мрт", 3);
	ПорядокМесяцев.Вставить("Апр", 4);
	ПорядокМесяцев.Вставить("Май", 5);
	ПорядокМесяцев.Вставить("Июн", 6);
	ПорядокМесяцев.Вставить("Июл", 7);
	ПорядокМесяцев.Вставить("Авг", 8);
	ПорядокМесяцев.Вставить("Сен", 9);
	ПорядокМесяцев.Вставить("Окт", 10);
	ПорядокМесяцев.Вставить("Нбр", 11);
	ПорядокМесяцев.Вставить("Дек", 12);
	
	Возврат ПорядокМесяцев;
	
КонецФункции

#КонецОбласти

#Область РаскраскаАдресовВТчДокументов

Процедура ПроверитьЗаполненностьАдреснойИнформации(КоллекцияСтрок, КоллекцияИменКолонокСАдресом) Экспорт

	Для Каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		
		ПроверитьЗаполненностьАдреснойИнформацииВСтроке(СтрокаКоллекции, КоллекцияИменКолонокСАдресом);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьЗаполненностьАдреснойИнформацииВСтроке(ПроверяемаяСтрока, КоллекцияИменКолонокСАдресом) Экспорт

	Для Каждого ИмяРеквизита Из КоллекцияИменКолонокСАдресом Цикл
		
		СообщениеПроверки = "";
		Если НЕ ПустаяСтрока(ПроверяемаяСтрока[ИмяРеквизита]) Тогда
			РезультатПроверки = ЗарплатаКадрыВызовСервера.ПроверитьАдрес(ПроверяемаяСтрока[ИмяРеквизита], ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица"));
			ПроверяемаяСтрока[ИмяРеквизита + "СодержитОшибки"] = РезультатПроверки.Результат <> "Корректный";
		Иначе
			ПроверяемаяСтрока[ИмяРеквизита + "СодержитОшибки"] = Ложь;
		КонецЕсли;
		
		Если ПроверяемаяСтрока[ИмяРеквизита + "СодержитОшибки"] Тогда
			Для каждого ЭлементОписанияОшибки Из РезультатПроверки.СписокОшибок Цикл
				СообщениеПроверки = СообщениеПроверки + ЭлементОписанияОшибки.Представление + Символы.ПС;
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СообщениеПроверки, 1);
			ПроверяемаяСтрока[ИмяРеквизита + "ПредставлениеРасширенное"] = ПроверяемаяСтрока[ИмяРеквизита + "Представление"] + Символы.ПС + СообщениеПроверки;
		Иначе
			ПроверяемаяСтрока[ИмяРеквизита + "ПредставлениеРасширенное"] = ПроверяемаяСтрока[ИмяРеквизита + "Представление"];
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ТипыОшибокПриПроверкеДокументовПФР

Функция СтруктураПутиКОшибке() Экспорт
	Возврат Новый Структура("ПутьКРеквизиту, ИндексСтроки, ИмяРеквизитаТабличнойЧасти, Родитель"); 	
КонецФункции
	
Функция СтруктураПутиКИсточникуОшибки(ПутьКДанным) Экспорт
	
	ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	
	КоличествоЭлементов = ЭлементыПути.Количество();

	Если ЭлементыПути.Количество() = 0 Тогда
		СтруктураПути = СтруктураПутиКОшибке();
		
		СтруктураПути.ПутьКРеквизиту = "";
		
		Возврат СтруктураПути;
	КонецЕсли;
	
	ИмяПоляОбъекта = "";
	
	НомерЭлементаТабличнойЧасти = -1;
	Для Сч = 0 По КоличествоЭлементов - 1 Цикл	
		ИмяПоляОбъекта = ИмяПоляОбъекта + ?(ИмяПоляОбъекта = "", "", ".") + ЭлементыПути[Сч];
		Если Прав(ЭлементыПути[Сч], 1) = "]" Тогда
			НомерЭлементаТабличнойЧасти = Сч;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
		
	Если НомерЭлементаТабличнойЧасти <> -1 Тогда
		ИндексСтроки = 0;
		
		СтруктураПути = СтруктураПутиКОшибке();
				
		НомерСимволаОкончанияИмяТаблицы = СтрНайти(ИмяПоляОбъекта, "[") - 1;
		
		СтруктураПути.ПутьКРеквизиту = Лев(ИмяПоляОбъекта, НомерСимволаОкончанияИмяТаблицы);
		
		ДлинаСтроки = СтрДлина(ИмяПоляОбъекта);
		
		ЧислоСтрокой = Сред(ИмяПоляОбъекта, НомерСимволаОкончанияИмяТаблицы + 2, ДлинаСтроки - НомерСимволаОкончанияИмяТаблицы - 2);
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЧислоСтрокой) Тогда
			СтруктураПути.ИндексСтроки = Число(ЧислоСтрокой);
		Иначе
			СтруктураПути.ИндексСтроки = -1;
		КонецЕсли;	
		
		Если КоличествоЭлементов = НомерЭлементаТабличнойЧасти + 2 Тогда
			СтруктураПути.ИмяРеквизитаТабличнойЧасти = ЭлементыПути[НомерЭлементаТабличнойЧасти + 1];
		Иначе
			СтруктураПути.ИмяРеквизитаТабличнойЧасти = "";
		КонецЕсли;
	Иначе
		СтруктураПути = СтруктураПутиКОшибке();
		СтруктураПути.ПутьКРеквизиту = ИмяПоляОбъекта;
	КонецЕсли;
	
	Возврат СтруктураПути;
КонецФункции	

#КонецОбласти

#Область ТипыОшибокПриПроверкеДокументовПФР

Процедура ДобавитьОшибкуЗаполненияЭлементаДокумента(Ошибки, Документ, Текст, Поле = "", Отказ = Ложь) Экспорт
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		Поле, 
		"Объект",
		Отказ)	
КонецПроцедуры	

Процедура ДобавитьОшибкуЗаполненияСпискаСотрудников(Ошибки, Документ, НомерВПачке, Текст, Поле = "", Отказ = Ложь) Экспорт 
	
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, "Сотрудник");
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ)	
	
КонецПроцедуры	

Процедура ДобавитьОшибкуЗаполненияДанныхЗЛ(Ошибки, Документ, ЗастрахованноеЛицо, НомерВПачке, Текст, Поле = "", Отказ = Ложь) Экспорт 
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, ?(Поле = "", "Сотрудник", Поле));
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ)		
КонецПроцедуры	

Процедура ДобавитьОшибкуДанныхОВзносах(Ошибки, Документ, НомерВПачке, Текст, Поле = "", Отказ = Ложь) Экспорт 
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, ?(Поле = "", "Сотрудник", Поле));
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ);
КонецПроцедуры	

Процедура ДобавитьОшибкуДанныхОСтаже(Ошибки, Документ, НомерВПачке, НомерСтрокиСтаж, Текст, Поле = "", Отказ = Ложь) Экспорт
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаписиОСтаже", НомерСтрокиСтаж, ?(Поле = "", "Сотрудник", Поле));
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ)		
КонецПроцедуры	

Процедура ДобавитьОшибкуДанныхОЗаработке(Ошибки, Документ, НомерВПачке, Текст, Отказ = Ложь) Экспорт
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, "Сотрудник");
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ)	
КонецПроцедуры	

Процедура ДобавитьОшибкуНеЗаполненыДанныеОЗаработке(Ошибки, Документ, НомерВПачке, Текст, Отказ = Ложь) Экспорт
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", НомерВПачке, "Сотрудник");
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ)	
КонецПроцедуры	

Процедура ДобавитьОшибкуДанныхОЗаработкеЗаМесяц(Ошибки, Документ, НомерВПачке, НомерСтрокиЗаработок, Текст, Поле = "", Отказ = Ложь) Экспорт 
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СведенияОЗаработке", НомерСтрокиЗаработок, ?(Поле = "", "Сотрудник", Поле));
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ)		
КонецПроцедуры	
	
Процедура ДобавитьОшибкуДанныхОВредномЗаработкеЗаМесяц(Ошибки, Документ, НомерВПачке, НомерСтрокиЗаработок, Текст, Поле = "", Отказ = Ложь) Экспорт 
	ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СведенияОЗаработкеНаВредныхИТяжелыхРаботах", НомерСтрокиЗаработок, ?(Поле = "", "Сотрудник", Поле));
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		ИмяПоля, 
		"Объект",
		Отказ)		
КонецПроцедуры		

Процедура ДобавитьОшибкуДанныхДокументаОписи(Ошибки, Опись, Документ, НомерСтроки, Текст, Поле = "", Отказ = Ложь) Экспорт 		
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
		Документ,
		Поле, 
		"Объект",
		Отказ);	

КонецПроцедуры	

Процедура ДобавитьОшибкуСверкиИтоговКомплекта(Ошибки, РазделыИтогов, Текст, Отказ = Ложь) Экспорт
	Для Каждого Раздел Из РазделыИтогов Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
			Раздел.Ссылка,
			Раздел.Показатель, 
			"Объект",
			Отказ);		
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьРазделИтоговРСВ(РазделыИтогов, РСВ_1, ИтоговыйПоказатель) Экспорт
	Раздел = Новый Структура("Ссылка, Показатель", РСВ_1, ИтоговыйПоказатель);	
	
	РазделыИтогов.Добавить(Раздел);
КонецПроцедуры

Процедура ДобавитьРазделИтоговЗаработок(РазделыИтогов, Ссылка, ИтоговыйПоказатель) Экспорт 
	Раздел = Новый Структура("Ссылка, Показатель", Ссылка, ИтоговыйПоказатель);
	РазделыИтогов.Добавить(Раздел);
КонецПроцедуры

Процедура ДобавитьРазделИтоговАДВ62(РазделыИтогов, Ссылка, ИтоговыйПоказатель) Экспорт
	Раздел = Новый Структура("Ссылка, Показатель", Ссылка, ИтоговыйПоказатель);
	РазделыИтогов.Добавить(Раздел);	
КонецПроцедуры	

Функция НовыйОшибкаСверкиСпискаСотрудниковКомплекта() Экспорт
	Возврат Новый Структура("ТипОшибки, ИсточникиДанныхСверки, Текст, ПолеСверки", "ОшибкаСверкиСпискаСотрудниковКомплекта");		
КонецФункции	

Процедура ДобавитьОшибкуСверкиСпискаСотрудниковКомплекта(Ошибки, ИсточникиДанныхСверки, Текст, ПолеСверки = "", Отказ = Ложь) Экспорт	
	Для Каждого ИсточникСверки Из ИсточникиДанныхСверки Цикл
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Сотрудники", ИсточникСверки.НомерВПачке, "Сотрудник");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
			ИсточникСверки.Документ,
			ИмяПоля, 
			"Объект",
			Отказ);		
	КонецЦикла;	
КонецПроцедуры	

Процедура ДобавитьИсточникСверкиСпискаСотрудников(ИсточникиСверки, Документ, НомерВПачке) Экспорт
	ИсточникСверкиСпискаСотрудников = Новый Структура("Документ, НомерВПачке", Документ, НомерВПачке);
	
	ИсточникиСверки.Добавить(ИсточникСверкиСпискаСотрудников);
КонецПроцедуры	

Процедура ДобавитьОшибкуСверкиВзносовРСВ1СОписьюПоКатегории(Ошибки, КатегорияЗастрахованныхЛиц, Текст, ДанныеОписи, ДанныеРСВ, Поле = "", Отказ = Ложь) Экспорт
	СтрокиИтоговОписи = ДанныеОписи.ИтогиПоКатегориям.НайтиСтроки(Новый Структура("ИсходнаяКатегорияЗастрахованныхЛиц", КатегорияЗастрахованныхЛиц)); 	
	
	Для Каждого СтрокаИтогов Из СтрокиИтоговОписи Цикл
		НомерСтроки = ДанныеОписи.ИтогиПоКатегориям.Индекс(СтрокаИтогов) + 1;
		
		ИмяРеквизита = ?(Поле = "", "ИсходнаяКатегорияЗастрахованныхЛиц", Поле);
		
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИтогиПоКатегориям", НомерСтроки, ИмяРеквизита);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
			ДанныеОписи.Ссылка,
			ИмяПоля, 
			"Объект",
			Отказ);		
	КонецЦикла;	
	
	СтрокиИтоговРСВ = ДанныеРСВ.ИтогиПоТарифам.НайтиСтроки(Новый Структура("КатегорияЗастрахованныхЛиц", КатегорияЗастрахованныхЛиц)); 	
	
	Для Каждого СтрокаИтогов Из СтрокиИтоговРСВ Цикл
		НомерСтроки = ДанныеРСВ.ИтогиПоТарифам.Индекс(СтрокаИтогов) + 1;
		
		ИмяРеквизита = ?(Поле = "", "КатегорияЗастрахованныхЛиц", Поле);
		
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИтогиПоТарифам", НомерСтроки, ИмяРеквизита);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
			ДанныеРСВ.Ссылка,
			ИмяПоля, 
			"Объект",
			Отказ);		
	КонецЦикла;	

КонецПроцедуры	

Процедура ДобавитьОшибкуСверкиЗаработкаРСВ1ПоКлассамУсловийТруда(Ошибки, КлассУсловийТруда, Текст, ДанныеРСВ, Поле = "", Отказ = Ложь) Экспорт	
	СтрокиИтоговРСВ = ДанныеРСВ.ИтогиПоВредномуЗаработку.НайтиСтроки(Новый Структура("КлассУсловийТруда", КлассУсловийТруда)); 	
	
	Для Каждого СтрокаИтогов Из СтрокиИтоговРСВ Цикл
		НомерСтроки = ДанныеРСВ.ИтогиПоВредномуЗаработку.Индекс(СтрокаИтогов) + 1;
		
		ИмяРеквизита = ?(Поле = "", "КлассУсловийТруда", Поле);
		
		ИмяПоля = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ИтогиПоВредномуЗаработку", НомерСтроки, ИмяРеквизита);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,
			ДанныеРСВ.Ссылка,
			ИмяПоля, 
			"Объект",
			Отказ);		
	КонецЦикла;	

КонецПроцедуры	

Функция НовыйОшибкаНесоответствияТарифовКатегориям() Экспорт 
	Возврат Новый Структура("ТипОшибки, Текст", "ОшибкаНесоответствияТарифовКатегориям");	
КонецФункции

Процедура ДобавитьОшибкуНесоответствияТарифовКатегориям(Ошибки, Текст, ДанныеРСВ, Отказ = Ложь) Экспорт 
	Отчет = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеДокументаРеглОтч(ДанныеРСВ.Ссылка);
	ДобавитьОшибкуДанныхРСВ1(Ошибки, ДанныеРСВ.Ссылка, Отчет, Текст, , , , , , , Отказ); 
КонецПроцедуры	

Функция НовыйОшибкаДанныхРСВ1() Экспорт
	Возврат Новый Структура("ТипОшибки, ОтчетДок, Отчет, Раздел, Графа, Строка, Страница, СтрокаПП, ИмяЯчейки, Описание", "ОшибкаДанныхРСВ1");	
КонецФункции

Процедура ДобавитьОшибкуДанныхРСВ1(Ошибки, ОтчетДок, Отчет, Описание, Раздел = "", Графа = "", Строка = "", Страница = "", СтрокаПП = "", ИмяЯчейки = "", Отказ = Ложь) Экспорт
	ОшибкаДанныхРСВ1 = НовыйОшибкаДанныхРСВ1();
	
	ОшибкаДанныхРСВ1.ОтчетДок = ОтчетДок;
	ОшибкаДанныхРСВ1.Отчет = Отчет;
	ОшибкаДанныхРСВ1.Раздел = Раздел;
	ОшибкаДанныхРСВ1.Графа = Графа;
	ОшибкаДанныхРСВ1.Строка = Строка;
	ОшибкаДанныхРСВ1.Страница = Страница;
	ОшибкаДанныхРСВ1.СтрокаПП = СтрокаПП;
	ОшибкаДанныхРСВ1.ИмяЯчейки = ИмяЯчейки;
	ОшибкаДанныхРСВ1.Описание = Описание;
	
	Ошибки.Добавить(ОшибкаДанныхРСВ1);
	
	Отказ = Истина;
КонецПроцедуры	

Функция НовыйОшибкаУникальностиНомеровПачекКомплекта() Экспорт
	Возврат Новый Структура("ТипОшибки, Документ, Текст", "ОшибкаУникальностиНомеровПачекКомплекта");	
КонецФункции

Процедура ДобавитьОшибкуУникальностиНомеровПачекКомплекта(Ошибки, Документ, Текст, Отказ = Ложь) Экспорт
	ОшибкаУникальностиНомеровПачекКомплекта = НовыйОшибкаУникальностиНомеровПачекКомплекта();
	
	ОшибкаУникальностиНомеровПачекКомплекта.Документ = Документ;
	ОшибкаУникальностиНомеровПачекКомплекта.Текст = Текст;
	
	Ошибки.Добавить(ОшибкаУникальностиНомеровПачекКомплекта);
	
	Отказ = Истина;
КонецПроцедуры	

Функция НовыйОшибкаДанныхОЗадолженности() Экспорт
	Возврат Новый Структура("ТипОшибки, Документ, НомерСтроки, Текст, Поле", "ОшибкаДанныхОЗадолженности");		
КонецФункции

Процедура ДобавитьОшибкуДанныхОЗадолженности(Ошибки, Документ, НомерСтроки, Текст, Поле = "", Отказ = Ложь) Экспорт 
	ОшибкаДанныхОЗадолженности = НовыйОшибкаДанныхОЗадолженности();
	
	ОшибкаДанныхОЗадолженности.Документ = Документ;
	ОшибкаДанныхОЗадолженности.НомерСтроки = НомерСтроки;
	ОшибкаДанныхОЗадолженности.Поле = Поле;
	ОшибкаДанныхОЗадолженности.Текст = Текст;
	
	Ошибки.Добавить(ОшибкаДанныхОЗадолженности);
	
	Отказ = Истина;
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиФайловСтороннимиПрограммами

Функция ПараметрыПроверкиФайловСтороннимиПрограммами() Экспорт
	
	ПараметрыПроверки = Новый Структура();
	
	ПараметрыПроверки.Вставить("ПроверятьПрограммойCheckXML", Ложь);
	ПараметрыПроверки.Вставить("ФайлПрограммыCheckXMLОбнаружен", Ложь);
	ПараметрыПроверки.Вставить("КаталогПрограммыСheckXml", "");
	
	ПараметрыПроверки.Вставить("ПроверятьПрограммойCheckUFA", Ложь);
	ПараметрыПроверки.Вставить("ФайлПрограммыCheckUFAОбнаружен", Ложь);
	ПараметрыПроверки.Вставить("КаталогПрограммыСheckUFA", "");
	
	ПараметрыПроверки.Вставить("ПроверятьПрограммойПОПД", Ложь);
	ПараметрыПроверки.Вставить("ФайлПрограммыПОПДОбнаружен", Ложь);
	ПараметрыПроверки.Вставить("КаталогПрограммыПОПД", "");
	
	ПараметрыПроверки.Вставить("КаталогФайлов", "");
	ПараметрыПроверки.Вставить("ОписаниеПроверяемыхФайлов");
	ПараметрыПроверки.Вставить("ПутиКФайлам");

	Возврат ПараметрыПроверки;
	
КонецФункции	

#КонецОбласти

#Область МеханизмОтображенияОшибок

Функция ЗначенияРеквизитовХраненияОшибокВСтруктуру(Форма, ИсточникДанных, ПутьКДанным) Экспорт	
	ЗначенияРеквизитовХраненияОшибок = Новый Структура;
	
	СвойстваЭлементовИндикацииОшибок = Форма.ОписаниеЭлементовСИндикациейОшибок();
	
	ЕстьХранилищеОшибок = Ложь;
	Для Каждого ОписаниеЭлемента Из СвойстваЭлементовИндикацииОшибок Цикл
		Если Сред(ОписаниеЭлемента.Ключ, 1, СтрДлина(ПутьКДанным)) = ПутьКДанным
			И (СтрДлина(ПутьКДанным) = СтрДлина(ОписаниеЭлемента.Ключ)
			Или Сред(ОписаниеЭлемента.Ключ, СтрДлина(ПутьКДанным) + 1, 1) = ".") Тогда 
			
			Если ТипЗнч(ИсточникДанных) = Тип("ДанныеФормыЭлементКоллекции") Тогда
				Если СтрДлина(ПутьКДанным) = СтрДлина(ОписаниеЭлемента.Ключ) Тогда
					ЗначенияРеквизитовХраненияОшибок.Вставить("ЕстьОшибки", ИсточникДанных["ЕстьОшибки"]);		
				Иначе
					ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеЭлемента.Ключ, ".");
					
					ИмяРеквизита = ЭлементыПути[ЭлементыПути.Количество() - 1] + "ЕстьОшибки";
					
					ЗначенияРеквизитовХраненияОшибок.Вставить(ИмяРеквизита, ИсточникДанных[ИмяРеквизита]);
				КонецЕсли;		
			Иначе
				ЭлементыПути = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеЭлемента.Ключ, ".");
				
				ЗначениеРеквизита = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(ИсточникДанных, ПутьКДанным + "ЕстьОшибки");
				
				ИмяРеквизита = ЭлементыПути[ЭлементыПути.Количество - 1] + "ЕстьОшибки";
				
				ЗначенияРеквизитовХраненияОшибок.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;	
			
			Если ОписаниеЭлемента.Значение.ПутьКХранилищуОшибок <> Неопределено Тогда
				ЕстьХранилищеОшибок = Истина;					
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	Если ЕстьХранилищеОшибок Тогда	
		Ошибки = Новый Соответствие;
		Для Каждого ДанныеОшибки Из ИсточникДанных["Ошибки"] Цикл
			ОшибкиПоПолю = Ошибки.Получить(ДанныеОшибки.Поле);
			Если ОшибкиПоПолю = Неопределено Тогда
				ОшибкиПоПолю = Новый Массив;
				Ошибки.Вставить(ДанныеОшибки.Поле, ОшибкиПоПолю);
			КонецЕсли;	
			
			ОписаниеОшибки = Новый Структура("Поле, ТекстОшибки", ДанныеОшибки.Поле, ДанныеОшибки.ТекстОшибки);
			
			ОшибкиПоПолю.Добавить(ОписаниеОшибки);
		КонецЦикла;
		
		ЗначенияРеквизитовХраненияОшибок.Вставить("Ошибки", Ошибки);	
	КонецЕсли;	
	
	Возврат ЗначенияРеквизитовХраненияОшибок;
КонецФункции	

Процедура ТаблицаСИндикациейОшибокПриАктивацииСтроки(Форма, ИмяЭлемента) Экспорт 
	Элементы = Форма.Элементы;
	
	ОписаниеЭлементаИндикации = Форма["СвойстваЭлементовИндикацииОшибок"][ИмяЭлемента];
	
	Если ОписаниеЭлементаИндикации = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЕстьОшибки = Ложь;
	
	Если ОписаниеЭлементаИндикации.ПутьКДаннымРеквизитаФлагаОшибки = "" Тогда
		ЕстьОшибки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеЭлементаИндикации.ИмяРеквизитаФлагаОшибки);	
	Иначе
		РеквизитФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеЭлементаИндикации.ПутьКДаннымРеквизитаФлагаОшибки);
		
		Если ТипЗнч(РеквизитФормы) = Тип("ДанныеФормыКоллекция") Тогда
			Если ТипЗнч(Элементы[ИмяЭлемента]) = Тип("ТаблицаФормы") Тогда
				ИдентификаторТекущейСтроки = Элементы[ИмяЭлемента].ТекущаяСтрока;
				
				Если ИдентификаторТекущейСтроки <> Неопределено Тогда
					ДанныеТекущейСтроки = РеквизитФормы.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
				КонецЕсли;	
				
				Если ДанныеТекущейСтроки <> Неопределено Тогда
					ЕстьОшибки = ДанныеТекущейСтроки[ОписаниеЭлементаИндикации.ИмяРеквизитаФлагаОшибки];
				КонецЕсли;	
			КонецЕсли;				
		Иначе
			ЕстьОшибки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеЭлементаИндикации.ПутьКХранилищуОшибок + "." + ОписаниеЭлементаИндикации.ИмяРеквизитаФлагаОшибки); 	
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ТекстИнфонадписи = ОписаниеЭлементаИндикации.ТекстИнфонадписиЗаголовкаТаблицыОшибка;
	Иначе	
		ТекстИнфонадписи = ОписаниеЭлементаИндикации.ТекстИнфонадписиПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеЭлементаИндикации.ПутьКДаннымИнфонадписи) Тогда
		ТекущийТекстИнфонадписи = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеЭлементаИндикации.ПутьКДаннымИнфонадписи);
		
		Если ЕстьОшибки
			Или ПустаяСтрока(ТекущийТекстИнфонадписи)
			Или ТекущийТекстИнфонадписи = ОписаниеЭлементаИндикации.ТекстИнфонадписиЗаголовкаТаблицыОшибка Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ОписаниеЭлементаИндикации.ПутьКДаннымИнфонадписи, ТекстИнфонадписи);
		КонецЕсли;			
	КонецЕсли;	
	
КонецПроцедуры	

Функция ТекстОшибки(Форма, ИмяЭлементаОшибки, ОписаниеЭлемента) Экспорт
	Элементы = Форма.Элементы;
	
	Если ОписаниеЭлемента.ПутьКХранилищуОшибок = "" Тогда
		ХранилищеОшибок = Форма["Ошибки"];
	Иначе
		ВладелецХранилищаОшибок = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеЭлемента.ПутьКХранилищуОшибок);
		
		Если ТипЗнч(ВладелецХранилищаОшибок) = Тип("ДанныеФормыКоллекция") Тогда
			Если ТипЗнч(Элементы[ИмяЭлементаОшибки]) = Тип("ТаблицаФормы") Тогда
				ИдентификаторТекущейСтроки = Элементы[ИмяЭлементаОшибки].ТекущаяСтрока;
				
				Если ИдентификаторТекущейСтроки <> Неопределено Тогда
					ДанныеТекущейСтроки = ВладелецХранилищаОшибок.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
				КонецЕсли;	
				
				Если ДанныеТекущейСтроки <> Неопределено Тогда
					ХранилищеОшибок = ДанныеТекущейСтроки["Ошибки"];
				КонецЕсли;	
			КонецЕсли;				
		Иначе
			ХранилищеОшибок = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеЭлемента.ПутьКХранилищуОшибок + "." + "Ошибки"); 	
		КонецЕсли;
	КонецЕсли;	
	
	Если ХранилищеОшибок = Неопределено Тогда
		Возврат "";
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОписаниеЭлемента.Поле) Тогда
		Ошибки = ХранилищеОшибок.НайтиСтроки(Новый Структура("Поле", ОписаниеЭлемента.Поле));
	Иначе
		Ошибки = ХранилищеОшибок;
	КонецЕсли;	
	
	ТекстОшибки = "";
	
	Для Каждого Ошибка Из Ошибки Цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС + Символы.ПС + Ошибка.ТекстОшибки;	
	КонецЦикла;	
	
	Возврат Сред(ТекстОшибки, 3);
КонецФункции	

#КонецОбласти

#Область МеханизмОтображенияЗаголовковКолонокТаблицы

Функция СтруктураОписанияКолонокЗаголовков() Экспорт
	СтруктураОписания = Новый Структура;
	
	СтруктураОписания.Вставить("ПолеТаблицы");
	СтруктураОписания.Вставить("Заголовок");
	СтруктураОписания.Вставить("Ширина", 0);
	
	Возврат СтруктураОписания;
КонецФункции

Процедура УстановитьЗаголовкиВТаблице(Форма, ДанныеТаблицы, ОписаниеКолонокЗаголовков) Экспорт 	
	ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
	
	Для Каждого СтрокТаблицы Из ДанныеТаблицы Цикл
		УстановитьЗаголовкиВСтрокеТаблицы(Форма, СтрокТаблицы, ОписаниеКолонокЗаголовков, Ложь);			
	КонецЦикла;	
КонецПроцедуры

Функция УстановитьЗаголовкиВСтрокеТаблицы(Форма, СтрокаТаблицы, ОписаниеКолонокЗаголовков, ЗаполнятьЗаголовкиПоУмолчанию = Истина) Экспорт 	
	Если ЗаполнятьЗаголовкиПоУмолчанию Тогда
		ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков);
	КонецЕсли;	

	Для Каждого ОписаниеЗаголовка Из ОписаниеКолонокЗаголовков Цикл
		СтрокаТаблицы[ОписаниеЗаголовка.ПолеТаблицы + "Заголовок"] = ОписаниеЗаголовка.Заголовок + ":";			
	КонецЦикла;
КонецФункции	

Процедура ЗаполнитьТекстыЗаголовковКолонокПоУмолчанию(Форма, ОписаниеКолонокЗаголовков) Экспорт
	Если ОписаниеКолонокЗаголовков <> Неопределено Тогда
		Для Каждого ОписаниеКолонки Из ОписаниеКолонокЗаголовков Цикл
			Если Не ЗначениеЗаполнено(ОписаниеКолонки.Заголовок) Тогда
				ПолеТаблицы = Форма.Элементы.Найти(ОписаниеКолонки.ПолеТаблицы);
				
				Если ПолеТаблицы <> Неопределено Тогда
					ОписаниеКолонки.Заголовок = ПолеТаблицы.Заголовок;
				КонецЕсли;
			КонецЕсли;					
		КонецЦикла;	
	КонецЕсли;		
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти
