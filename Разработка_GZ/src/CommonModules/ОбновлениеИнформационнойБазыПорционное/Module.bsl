// Обеспечивает синхронную обработку данных большого объема порциями,
// например, при переходе с другой программы.

#Область ПрограммныйИнтерфейс

// Конструктор управляющей коллекции, описывающей состояние обработки (обновления) данных порциями.
// 
// Возвращаемое значение:
//  Структура - см. тело функции
//
Функция НовыйПроцессорПорционнойОбработки() Экспорт
	
	Процессор = Новый Структура;
	
	// Конвертируемые данные описываются запросом.
	// Запрос должен содержать выборку из обрабатываемой таблицы (ровно один оператор).
	// Механизм работает со следующими типами объектов:
	// - документы
	// - справочники
	// - табличные части документов и справочников
	// - регистры, подчиненные регистратору.
	// Запрос не должен содержать артефакты порционной обработки: они будут добавлены автоматически - см. УстановитьТекстыЗапросовПорцииДанных.
	// Запрос может обращаться к временным таблицам, созданным в МенеджерВременныхТаблиц.
	// Параметры запроса следует передать через ПараметрыЗапросов.
	// Поля запроса:
	//  * Ключ (обязательное кроме независимых регистров)
	//        - МоментВремени - для регистров, подчиненных регистратору
	//        - Ссылка        - для объектов ссылочного типа
	//  * НомерСтроки - Число - номер строки набора записей или табличной части (для наборов записей и табличных частей)
	// Предполагается, что основным условием запроса будет условие по полю Ключ или по паре полей Ключ,НомерСтроки;
	// соответственно, следует предполагать использование индексов, предоставляющих эти поля.
	Процессор.Вставить("ТекстОсновногоЗапроса", "");
	// Для непосредственной обработки порции записей должна быть реализована экспортная процедура,
	// полное имя которой указывается в свойстве Метод.
	// Параметры процедуры: 
	// * Записи - конвертируемый (модифицируемый) набор записей (табличная часть, массив с объектом)
	//            Обрабатывать в наборе следует те записи, на которые указывают КонвертируемыеДанные.
	//            Набор (объект) не следует записывать.
	// * КонвертируемыеДанные - выборка из результата запроса, содержащего
	//            - поле НомерСтроки - номера строк в наборе записей 
	//              (номера строк табличной части; 1 для обновления свойств шапки объекта)
	//            - другие поля, позволяющие определить значения устанавливаемых реквизитов
	// * ОбщиеДанные - структура, в которую метод может поместить данные,
	//            для передачи между вызовами метода для разных порций
	// * КлассОбъектов - строка, по которой можно определить независимый ли это регистр, или подчинен регистратору, или ссылка. Примеры см. ниже
	Процессор.Вставить("Метод", "");
	// Для дополнительных действий после записи объекта может быть реализована экспортная процедура,
	// полное имя которой указывается в свойстве МетодПослеЗаписи.
	// Параметры процедуры: 
	// * Ссылка - ссылка на записанный объект
	// * Процессор - структура управляющей коллекции, описывающей состояние обработки (обновления) данных порциями
	Процессор.Вставить("МетодПослеЗаписи", "");
	// Обработка может сопровождаться созданием новых объектов. В этом случае выполняется в головном узле.
	// Созданные элементы, модифицированные данные регистрируются в плане обмена и мигрируют в подчиненные узлы.
	Процессор.Вставить("ТолькоГоловнойУзел", Истина); 
	
	// Состояние конвертации
	Процессор.Вставить("Курсор",                Новый МоментВремени('0001-01-01'));
	Процессор.Вставить("ОбработкаЗавершена",    Ложь);
	
	// Параметры запросов
	Процессор.Вставить("МенеджерВременныхТаблиц", Неопределено);
	Процессор.Вставить("ПараметрыЗапросов",       Новый Структура);
	Процессор.Вставить("ОбщиеДанные",             Новый Структура); // место для хранения (накопления) данных между обработкой разных порций
	
	// Служебный кеш - заполняется автоматически логикой порционной обработки по данным ТекстОсновногоЗапроса
	Процессор.Вставить("МенеджерОбъекта", Неопределено);   // Например, РегистрыБухгалтерии.Хозрасчетный. Неопределено означает, что требуется заполнение по тексту запроса
	Процессор.Вставить("ИмяТаблицы",      ""); // Например, "РегистрыБухгалтерии.Хозрасчетный"
	Процессор.Вставить("ИмяБазовогоТипа", ""); // Например, "РегистрыСведений"
	Процессор.Вставить("КлассОбъектов",   ""); // "НаборЗаписей" (регистра, подчиненного регистратору), "НаборЗаписейНезависимый" (для независимого регистра), "Ссылка"
	// Для независимого регистра данные будут обрабатываться за один раз
	Процессор.Вставить("ИмяСписка",       ""); // Имя табличной части, если обрабатывается табличная часть ссылочного объекта
	Процессор.Вставить("ТекстЗапросаПорцииДанных",                  "");
	Процессор.Вставить("ТекстЗапросаПоследнегоОбъектаПорцииДанных", "");
	
	Возврат Процессор;
	
КонецФункции

// Читает следующую порцию записей для обработки и обновляет ее.
// Порция может включать несколько объектов (наборов записей с разными регистраторами)
//
// Параметры:
//  Процессор - Структура - управляющая коллекция, см. НовыйПроцессорПорционнойОбработки
//
// Перед первым вызовом следует установить свойства ТекстОсновногоЗапроса, Метод.
// Если необходимо, следует заполнить 
// - ТолькоГоловнойУзел
// - ПараметрыЗапросов
// - МенеджерВременныхТаблиц
// - ОбщиеДанные
//
// Затем метод следует вызывать в цикле до достижения ОбработкаЗавершена.
// В ходе обновления порции метод обновляет свойства про состояние конвертации, содержимое ОбщиеДанные.
//
Процедура ОбновитьПорциюЗаписей(Процессор) Экспорт
	
	ИнициализироватьПроцессорПорционнойОбработкиТекстомЗапроса(Процессор);
	
	Запрос = Новый Запрос;
	Если ТипЗнч(Процессор.МенеджерВременныхТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		Запрос.МенеджерВременныхТаблиц = Процессор.МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.Текст = Процессор.ТекстЗапросаПорцииДанных;
	
	Для Каждого ОписаниеПараметра Из Процессор.ПараметрыЗапросов Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);
	КонецЦикла;
	Запрос.УстановитьПараметр("Курсор", Процессор.Курсор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Процессор.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	// Объект (набор записей, документ) записывается целиком.
	// При этом выборка, ограниченная числом записей, может содержать не все записи последнего выбранного объекта.
	// Чтобы не записывать объект дважды, данные последнего объекта обрабатываем в особом порядке.
	Если Процессор.КлассОбъектов = "Ссылка" Тогда
		Объект = Неопределено;
	Иначе
		Объект = Процессор.МенеджерОбъекта.СоздатьНаборЗаписей();
	КонецЕсли;
	
	Ссылка = Неопределено;
	НомерСтрокиПоследнегоНабора = Неопределено;
	
	ВыборкаКлюч = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКлюч.Следующий() Цикл
		
		Процессор.Курсор = ВыборкаКлюч.Ключ;
		
		// Записываем "предыдущий" (обработанный ниже по циклу) набор:
		// последний набор записывать не следует, так как он может содержать не все записи.
		// Последний набор будет дополнен записями и записан по окончании цикла.
		ЗаписатьМодифицированныйОбъект(Объект, Ссылка, Процессор);
		
		Если Процессор.КлассОбъектов = "НаборЗаписей" Тогда
			Объект.Отбор.Регистратор.Установить(Процессор.Курсор.Ссылка);
			Объект.Прочитать();
			Записи = Объект;
			Ссылка = Процессор.Курсор.Ссылка;
		ИначеЕсли Процессор.КлассОбъектов = "НаборЗаписейНезависимый" Тогда
			Объект.Прочитать();
			Записи = Объект;
			Ссылка = Неопределено;
		Иначе
			Объект = Процессор.Курсор.ПолучитьОбъект();
			Ссылка = Процессор.Курсор;
			
			Если Объект = Неопределено Тогда
				Записи = Неопределено;
				Продолжить;
			КонецЕсли;
			
			Если ПустаяСтрока(Процессор.ИмяСписка) Тогда
				Записи = Новый Массив;
				Записи.Добавить(Объект);
			Иначе
				Записи = Объект[Процессор.ИмяСписка];
			КонецЕсли;
			
		КонецЕсли;
		
		ВыполнитьМетодОбновленияПорцииЗаписей(
			Записи,
			ВыборкаКлюч.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам),
			Процессор);
			
		// При чтении наборов независимого регистра выбираются все записи вне зависимости от их количества.
		Если Процессор.КлассОбъектов = "НаборЗаписейНезависимый" Тогда
			Процессор.ОбработкаЗавершена = Истина;
		КонецЕсли;
		
		Если НаборМожетСодержатьНесколькоЗаписей(Процессор) Тогда
			НомерСтрокиПоследнегоНабора = ВыборкаКлюч.НомерСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработка последнего набора
	
	Если Записи = Неопределено Или Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если НомерСтрокиПоследнегоНабора <> Неопределено Тогда
		
		// Выборка по последнему объекту может содержать только часть записей.
		// Поэтому прочитаем и обработаем остаток.
		
		Запрос.Текст = Процессор.ТекстЗапросаПоследнегоОбъектаПорцииДанных;
		Запрос.УстановитьПараметр("ПоследнийОбъект", Процессор.Курсор);
		Запрос.УстановитьПараметр("НомерСтроки",     НомерСтрокиПоследнегоНабора);
		
		РезультатЗапросаОстатокЗаписей = Запрос.Выполнить();
		Если Не РезультатЗапросаОстатокЗаписей.Пустой() Тогда
			ВыполнитьМетодОбновленияПорцииЗаписей(
				Записи,
				РезультатЗапросаОстатокЗаписей.Выбрать(),
				Процессор);
				
		КонецЕсли;
		
	КонецЕсли;
		
	// Запись последнего объекта
	ЗаписатьМодифицированныйОбъект(Объект, Ссылка, Процессор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РазмерПорцииДанных()
	
	Возврат 1000;
	
КонецФункции

Процедура ИнициализироватьПроцессорПорционнойОбработкиТекстомЗапроса(Процессор)
	
	Если Процессор.МенеджерОбъекта <> Неопределено Тогда
		// инициализирован
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Процессор.ТекстОсновногоЗапроса);
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	// Определим свойства обрабатываемых объектов
	ОсновнаяТаблица = ОператорЗапроса.Источники[0];
	Процессор.ИмяТаблицы = ОсновнаяТаблица.Источник.ИмяТаблицы;
	
	ЭлементыИмениТаблицы = СтрРазделить(Процессор.ИмяТаблицы, ".");
	Если ЭлементыИмениТаблицы.Количество() = 3 Тогда // "Документ.ПоступлениеТоваровУслуг.Услуги"
		Процессор.ИмяСписка = ЭлементыИмениТаблицы[2];
		ЭлементыИмениТаблицы.Удалить(2);
		ИмяОбъекта = СтрСоединить(ЭлементыИмениТаблицы, ".");
	Иначе
		Процессор.ИмяСписка = "";
		ИмяОбъекта = ОсновнаяТаблица.Источник.ИмяТаблицы;
	КонецЕсли;
	
	Процессор.ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.НайтиПоПолномуИмени(ИмяОбъекта));
	Если Процессор.ИмяБазовогоТипа = "РегистрыСведений" 
		И Метаданные.НайтиПоПолномуИмени(ИмяОбъекта).РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		// Если независимый регистр, то порционная обработка не нужна
		Процессор.КлассОбъектов = "НаборЗаписейНезависимый";
	ИначеЕсли СтрНачинаетсяС(Процессор.ИмяБазовогоТипа, "Регистры") Тогда 
		Процессор.КлассОбъектов = "НаборЗаписей";
	Иначе
		Процессор.КлассОбъектов = "Ссылка";
	КонецЕсли;
	
	Если Процессор.КлассОбъектов = "НаборЗаписейНезависимый" Тогда
		// Поле "Ключ" нужно для единообразия, т.к. группировка в запросе по этому полю  см. ОбноитьПорциюЗаписей()
		ОператорЗапроса.ВыбираемыеПоля.Добавить("1");
		ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1].Псевдоним = "Ключ";
	КонецЕсли;
	Если ОписаниеЗапроса.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ОператорЗапроса.ВыбираемыеПоля.Добавить("1");
		ОписаниеЗапроса.Колонки[ОписаниеЗапроса.Колонки.Количество() - 1].Псевдоним = "НомерСтроки";
	КонецЕсли;

	Процессор.МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяОбъекта);
	Если Процессор.КлассОбъектов = "Ссылка" Тогда
		Процессор.Курсор = Процессор.МенеджерОбъекта.ПустаяСсылка();
	Иначе
		Процессор.Курсор = Новый МоментВремени('0001-01-01');
	КонецЕсли;
	
	// Установка ТекстЗапросаПорцииДанных
	// Суть модификаций:
	// - исключить уже обработанные записи (отбор по курсору, упорядочивание)
	// - ограничить количество записей
	// - добавить итоги по регистратору
	
	Если Процессор.КлассОбъектов <> "НаборЗаписейНезависимый" Тогда
		ОператорЗапроса.КоличествоПолучаемыхЗаписей = РазмерПорцииДанных();
		ДобавитьУсловиеНаЗначениеПоля(ОператорЗапроса, "Ключ", "%1  > &Курсор", ОписаниеЗапроса);
	КонецЕсли;
	ОписаниеЗапроса.Порядок.Добавить("Ключ");
	ОписаниеЗапроса.КонтрольныеТочкиИтогов.Добавить("Ключ");
	
	Если НаборМожетСодержатьНесколькоЗаписей(Процессор) Тогда
		
		ОписаниеЗапроса.Порядок.Добавить("НомерСтроки");
		ОписаниеЗапроса.ВыраженияИтогов.Добавить("МАКСИМУМ(НомерСтроки)", "НомерСтроки");
		
	КонецЕсли;
	
	Процессор.ТекстЗапросаПорцииДанных = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// Установка ТекстЗапросаПоследнегоОбъектаПорцииДанных
	// Суть модификации: ограничить выборку записями конкретного документа, следующими за обработанной.
	
	Если Не НаборМожетСодержатьНесколькоЗаписей(Процессор) Тогда
		Возврат;
	КонецЕсли;
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Процессор.ТекстОсновногоЗапроса);
	
	ОписаниеЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	ОператорЗапроса = ОписаниеЗапроса.Операторы[0];
	
	ОписаниеЗапроса.Порядок.Добавить("НомерСтроки");
	
	// Ключ = &ПоследнийОбъект
	ДобавитьУсловиеНаЗначениеПоля(ОператорЗапроса, "Ключ", "%1 = &ПоследнийОбъект", ОписаниеЗапроса);
	
	// НомерСтроки > &НомерСтроки
	ДобавитьУсловиеНаЗначениеПоля(ОператорЗапроса, "НомерСтроки", "%1 > &НомерСтроки", ОписаниеЗапроса);
	
	Процессор.ТекстЗапросаПоследнегоОбъектаПорцииДанных = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Процедура ДобавитьУсловиеНаЗначениеПоля(ОператорЗапроса, ИмяПоля, ШаблонУсловия, ОписаниеЗапроса)
	
	ВыражениеПоля = ОбщегоНазначенияБП.ВыражениеПоляЗапроса(ОписаниеЗапроса, ОператорЗапроса, ИмяПоля);
	
	Условие = СтрШаблон(ШаблонУсловия, ВыражениеПоля);
	ОператорЗапроса.Отбор.Добавить(Условие);
	
КонецПроцедуры

Функция НаборМожетСодержатьНесколькоЗаписей(Процессор)
	
	Возврат Процессор.КлассОбъектов = "НаборЗаписей"
		Или ЗначениеЗаполнено(Процессор.ИмяСписка);
		
КонецФункции

Процедура ВыполнитьМетодОбновленияПорцииЗаписей(Записи, КонвертируемыеДанные, Процессор)
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Записи);
	ПараметрыМетода.Добавить(КонвертируемыеДанные);
	ПараметрыМетода.Добавить(Процессор.ОбщиеДанные);
	ПараметрыМетода.Добавить(Процессор.КлассОбъектов);
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(Процессор.Метод, ПараметрыМетода);
	
КонецПроцедуры

Процедура ЗаписатьМодифицированныйОбъект(Объект, Ссылка, Процессор)
	
	ИспользуетсяСсылка = (Процессор.КлассОбъектов <> "НаборЗаписейНезависимый");
	Если Объект = Неопределено Или (ИспользуетсяСсылка И Ссылка = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРегистрБухгалтерии = (Процессор.ИмяБазовогоТипа = "РегистрыБухгалтерии");
	// Для Регистра Бухгалтерии при установке измерений Модифицированность() всегда Ложь в версиях платформы до 8.3.14.
	Если ЭтоРегистрБухгалтерии Тогда
		Если Не (Объект.Модифицированность() Или Объект.ДополнительныеСвойства.Свойство("Модифицированность")) Тогда
			Возврат;
		КонецЕсли;
		// Для Регистра Бухгалтерии желательно ВключитьБизнесЛогику = Истина.
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Процессор.ТолькоГоловнойУзел, Истина);
	Иначе
		Если Не Объект.Модифицированность() Тогда
			Возврат;
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Процессор.ТолькоГоловнойУзел, Ложь);
	КонецЕсли;

	Если Не ПустаяСтрока(Процессор.МетодПослеЗаписи) Тогда
		ВыполнитьМетодПослеЗаписи(Ссылка, Процессор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьМетодПослеЗаписи(Ссылка, Процессор)
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Ссылка);
	ПараметрыМетода.Добавить(Процессор);
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(Процессор.МетодПослеЗаписи, ПараметрыМетода);
	
КонецПроцедуры

#КонецОбласти
