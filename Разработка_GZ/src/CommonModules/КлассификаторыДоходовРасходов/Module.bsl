// Содержит общий код работы с классификаторами доходов и расходов:
// - Справочник.ПрочиеДоходыИРасходы
// - Справочник.СтатьиЗатрат
// - (в перспективе)
//   Справочник.СтатьиДвиженияДенежныхСредств
//
// Модуль обеспечивает функциональность
// - заполнения справочников поставляемыми элементами
// - использования в качестве значений по умолчанию назначаемых пользователем предопределенных элементов.
//
// Менеджеры подключенных объектов должны содержать методы:
// - ЗаполнитьОписанияПоставляемыхЭлементов
// - НадежныеРеквизитыПоиска
// - ПрочитатьИзСвязаннойНастройки
// - ВыполнитьСвязанныеНастройки
//
// При добавлении новой предопределенной статьи:
// 1. Следует добавить ее описание в ЗаполнитьОписанияПоставляемыхЭлементов
// 2. При обновлении на версию с новой предопределенной статьей вызвать метод ОбеспечитьФункциональность()
//    При этом программа попытается найти статью, подходящую под описание, и назначить ее основной.
//    Для этого учитывается наименование статьи и поля, указанные в НадежныеРеквизитыПоиска
// 3. Если нужен более сложный алгоритм поиска статьи для назначения предопределенной,
//    его следует вызвать в ПрочитатьИзСвязаннойНастройки.
//    Код поиска рекомендуется размещать в объектах, по которым выполняется поиск.
// 4. Если необходимо при создании статьи прописать ее в какие-то смежные настройки, 
//    соответствующий код нужно вызвать из ВыполнитьСвязанныеНастройки и ПрочитатьИзСвязаннойНастройки.
//    Сам этот код рекомендуется размещать в объектах, хранящих настройки.
//
// Поставляемые элементы справочников могут быть как предопределенными, так и не предопределенными.
//
// Классификатор может содержать предопределенные элементы двух типов:
//
// 1. гарантированные, обращение к которым, как правило, выполняется из кода проведения.
//    У пользователя нет возможности выбирать такие элементы при вводе документов.
//    Если такой элемент нужен при проведении, но его нет, то он должен быть создан.
//    Часто такие элементы не создаются при первоначальном заполнении (включении функциональности) - 
//    до появления фактической потребности в них.
//
// 2. негарантированные, которые, как правило, пользователь выбирает при вводе документов.
//    При отсутствии такого элемента программа сама ничего не пытается создавать.
//    Поэтому такие элементы требуется создавать заранее (при включении функциональности).
//
// Это деление не жесткое - допустимы промежуточные варианты.
// К гарантированным элементам следует обращаться с помощью КлассификаторыДоходовРасходов.ПредопределенныйЭлемент
// или соответствующей проксирующей функции конкретного классификатора.
// К негарантированным - с помощью ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент.
//
// Негарантированные элементы следует создавать при включении функциональности -
// вызывать КлассификаторыДоходовРасходов.ОбеспечитьФункциональность

#Область ПрограммныйИнтерфейс

#Область ОписаниеПоставляемыхЭлементов

// Инициализирует описание одного поставляемого элемента классификатора.
//
// Параметры:
//  ОписаниеЭлементов - ТаблицаЗначений - см. НовыйПоставляемыеЭлементы - описание всех поставляемых элементов классификатора
//  Имя - Строка      - уникальное имя поставляемого элемента; для предопределенных - совпадает с именем предопределенных данных
//  МногоязычноеПредставление 
//                    - Строка - многоязычная строка, например "ru = 'Курсовые разницы'":
//                      представление элемента для пользователя (Наименование)
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - новая строка, добавленная в ОписаниеЭлементов.
//                          После вызова функции можно устанавливать ее свойства.
//
Функция ДобавитьОписаниеПоставляемогоЭлемента(ОписаниеЭлементов, Имя, МногоязычноеПредставление) Экспорт
	
	ОписаниеЭлемента = ОписаниеЭлементов.Добавить();
	ОписаниеЭлемента.Имя           = Имя;
	ОписаниеЭлемента.Представление = МногоязычноеПредставление;
	
	Возврат ОписаниеЭлемента;
	
КонецФункции

#КонецОбласти

#Область ВключениеФункциональности

// Выполняет настройки классификаторов для использования в включаемой функциональности, например,
// создает необходимые поставляемые элементы классификатора.
//
// Процедура предназначена для вызова из обработчиков ПриЗаписи констант функциональности,
// поэтому включенность функциональной опции внутри процедуры не проверяется - следует проверять до вызова
//
// Параметры:
//  Классификатор    - СправочникМенеджер - классификатор, подключенный к этому модулю
//  Функциональность - Строка - имя включенной функциональной опции
//
Процедура ОбеспечитьФункциональность(Классификатор, Функциональность) Экспорт
	
	ПотребныеЭлементы = Новый Массив;
	
	Для Каждого ОписаниеЭлемента Из ПоставляемыеЭлементы(Классификатор) Цикл
		
		Если ОписаниеЭлемента.Функциональность.Найти(Функциональность) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПотребныеЭлементы.Добавить(ОписаниеЭлемента);
		
	КонецЦикла;
	
	НайденныеЭлементы = НазначитьПодходящиеЭлементы(Классификатор, ПотребныеЭлементы);
	
	КСозданию = Новый Массив;
	Для Каждого ОписаниеЭлемента Из ПотребныеЭлементы Цикл
		
		Если НайденныеЭлементы.Свойство(ОписаниеЭлемента.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ОписаниеЭлемента.СоздаватьЗаранее Тогда
			Продолжить;
		КонецЕсли;
		
		КСозданию.Добавить(ОписаниеЭлемента);
		
	КонецЦикла;
	
	СоздатьПоставляемыеЭлементы(Классификатор, КСозданию, НайденныеЭлементы);
	
КонецПроцедуры

#КонецОбласти

#Область ГарантированныеЭлементы 

// Находит, а при необходимости - создает предопределенный элемент.
// Следует использовать в алгоритмах, требующих обязательного наличия предопределенного элемента.
//
// В тех случаях, когда такие алгоритмы обрабатывают множество однотипных объектов,
// для некоторых из которых могут потребоваться предопределенные элементы, следует использовать методы
// НовыйКешГрупповойОперации и ПредопределенныйЭлементГрупповойОперации.
//
// Для получения других статей, назначенных для использования по умолчанию, следует использовать
// ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент или проксирующие методы классификатора.
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, содержащий элементы
//  ИмяПредопределенногоЭлемента - Строка - имя предопределенного элемента, заданное в метаданных.
//                  Описание создаваемых элементов приведено в ЗаполнитьОписанияПоставляемыхЭлементов
//                  модуля менеджера классификатора.
//
// Возвращаемое значение:
//  СправочникСсылка.ПрочиеДоходыИРасходы,
//  СправочникСсылка.СтатьиЗатрат
//        - найденный (созданный) предопределенный элемент.
//          Конкретный тип определяется переданным классификатором.
//
Функция ПредопределенныйЭлемент(Классификатор, ИмяПредопределенногоЭлемента) Экспорт
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Классификатор.ПустаяСсылка());
	
	Элемент = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент(ИмяТаблицы + "." + ИмяПредопределенногоЭлемента);
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	// Повторим поиск без кеша повторно используемых значений
	Элемент = НайтиПредопределенныйЭлемент(Классификатор, ИмяПредопределенногоЭлемента);
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	// Создадим статью
	Элемент = СоздатьПоставляемыйЭлементПоИмени(Классификатор, ИмяПредопределенногоЭлемента);
	
	Если ЗначениеЗаполнено(Элемент) Тогда
		ОбновитьПовторноИспользуемыеЗначения(); // ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент кеширует значения
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// Конструктор управляющей коллекции для обращения к предопределенным элементам классификатора в операциях,
// обрабатывающих множество однотипных объектов, в ходе которых может потребоваться создание предопределенных элементов.
//
// Этот кеш следует использовать для того, чтобы, с одной стороны, такие обращения были эффективными,
// а с другой стороны, не приводили к созданию элементов преждевременно, без реальной необходимости.
// 
// Перед циклом следует вызвать НовыйКешГрупповойОперации(), не получая заранее предопределенные элементы,
// которые могут потребоваться в цикле, а могут и не потребоваться.
// В ходе цикла для обращения к предопределенным элементам следует использовать ПредопределенныйЭлементГрупповойОперации().
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, содержащий элементы
// 
// Возвращаемое значение:
//  Структура - управляющая коллекция для передачи в ПредопределенныйЭлементГрупповойОперации()
//
Функция НовыйКешГрупповойОперации(Классификатор) Экспорт
	
	Кеш = Новый Структура;
	Кеш.Вставить("Классификатор", Классификатор);
	Кеш.Вставить("Элементы",      Новый Соответствие);
	
	Возврат Кеш;
	
КонецФункции

// Находит, а при необходимости - создает предопределенный элемент.
// Следует использовать в алгоритмах, требующих обязательного наличия предопределенного элемента,
// когда обращение к элементам выполняется в цикле по большому числу элементов.
// Подробнее см. НовыйКешГрупповойОперации.
// См. также ПредопределенныйЭлемент.
//
// Параметры:
//  
//  Кеш - Структура - результат выполнения НовыйКешГрупповойОперации
//  ИмяПредопределенногоЭлемента - Строка - имя предопределенного элемента, заданное в метаданных.
//                  Описание создаваемых элементов приведено в ЗаполнитьОписанияПоставляемыхЭлементов
//                  модуля менеджера классификатора.
// 
// Возвращаемое значение:
//  СправочникСсылка.ПрочиеДоходыИРасходы,
//  СправочникСсылка.СтатьиЗатрат
//        - найденный (созданный) предопределенный элемент.
//          Конкретный тип определяется классификатором, которым инициализирован Кеш.
//
Функция ПредопределенныйЭлементГрупповойОперации(ИмяПредопределенногоЭлемента, Кеш) Экспорт
	
	Значение = Кеш.Элементы[ИмяПредопределенногоЭлемента];
	Если Значение <> Неопределено Тогда
		Возврат Значение;
	КонецЕсли;
	
	Значение = ПредопределенныйЭлемент(Кеш.Классификатор, ИмяПредопределенногоЭлемента);
	
	Кеш.Элементы.Вставить(ИмяПредопределенногоЭлемента, Значение);
	
	Возврат Значение;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет справочник поставляемыми элементами при первоначальном заполнеии информационной базы.
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, подлежащий заполнению
//
Процедура СоздатьПоУмолчанию(Классификатор) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Поставляемые данные не следует создавать в подчиненных узлах РИБ
		Возврат;
	КонецЕсли;
	
	КонфигураторТекста = НовыйКонфигураторТекстаЗапросаКлассификатора(Классификатор);
	КонфигураторТекста.ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	
	// Пример текста запроса:
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	Элементы.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.ПрочиеДоходыИРасходы КАК Элементы"
	
	Запрос = Новый Запрос;
	Запрос.Текст = КонфигураторТекста.СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПотребныеЭлементы = Новый Массив;
	Для Каждого ОписаниеЭлемента Из ПоставляемыеЭлементы(Классификатор) Цикл
		
		Если Не ОписаниеЭлемента.СоздаватьЗаранее Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПроверитьФункциональность(ОписаниеЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		ПотребныеЭлементы.Добавить(ОписаниеЭлемента);
		
	КонецЦикла;
	
	СоздатьПоставляемыеЭлементы(Классификатор, ПотребныеЭлементы);
	
КонецПроцедуры

// Среди имеющихся в информационной базе непредопределенных элементов находит похожие на предопределенные
// и назначает их предопределенными.
// Используется для перехода с версии, в которой не было предопределенных элементов.
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, содержащий элементы
//
Процедура НазначитьПредопределенныеЭлементы(Классификатор) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Поставляемые данные настраиваются централизованно
		Возврат;
	КонецЕсли;
	
	ПоставляемыеЭлементы = ПоставляемыеЭлементы(Классификатор);
	
	Для Каждого ОписаниеЭлемента Из ПоставляемыеЭлементы Цикл
		
		Если Не ОписаниеЭлемента.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = НайтиПодходящийЭлемент(ОписаниеЭлемента, Классификатор, Истина, ПоставляемыеЭлементы);
		
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Продолжить;
		КонецЕсли;
		
		НазначитьПредопределенным(Элемент, ОписаниеЭлемента.Имя);
		
	КонецЦикла;
	
КонецПроцедуры

// Обеспечивает инициализацию данных подсистемы "Настройка порядка элементов" БСП:
// "Если у объекта есть предопределенные элементы, то в процедуре обновления информационной базы
//  необходимо перезаписать эти элементы в том порядке, в каком они должны отображаться в списке."
//
// Используется для перехода с версии, в которой справочник не был подключен к подсистеме.
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, содержащий элементы
//
Процедура ВключитьНастройкуПорядкаЭлементов(Классификатор) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// Поставляемые данные настраиваются централизованно
		Возврат;
	КонецЕсли;
	
	МетаданныеКлассификатора = Классификатор.ПустаяСсылка().Метаданные();
	
	Для Каждого ОписаниеЭлемента Из ПоставляемыеЭлементы(Классификатор) Цикл
		
		Если Не ОписаниеЭлемента.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Ссылка = НайтиПредопределенныйЭлемент(Классификатор, ОписаниеЭлемента.Имя);
		
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Объект = Ссылка.ПолучитьОбъект();
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Истина, Истина);
		Исключение
			
			ШаблонТекстаОшибкиЗаписи = НСтр(
				"ru = 'Не установлен порядок элемента справочника %1.
				|%2'",
				Метаданные.ОсновнойЯзык.КодЯзыка);
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(
				ШаблонТекстаОшибкиЗаписи,
				ОписаниеЭлемента.Имя,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеКлассификатора,
				Ссылка,
				ТекстОшибки);
			
			// Исключение не вызываем, так как эта обработка сервисная: пользователь установит нужный ему порядок вручную
			
		КонецПопытки;
			
	КонецЦикла;
	
КонецПроцедуры

// Приводит порядок поставляемых элементов в соответствие заданному классификатором.
//
// Используется при первоначальном заполнении информационной базы, например, при включении функциональности,
// состав которой определяется дистрибутивом программы.
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, содержащий элементы
//
Процедура УстановитьПорядокЭлементовПриНачалеРаботы(Классификатор) Экспорт
	
	ПоставляемыеЭлементы = ПоставляемыеЭлементы(Классификатор);
	ПоставляемыеЭлементы.Колонки.Добавить("ПредставлениеИнформационнойБазы", Новый ОписаниеТипов("Строка"));
	Для Каждого ОписаниеЭлемента Из ПоставляемыеЭлементы Цикл
		ОписаниеЭлемента.ПредставлениеИнформационнойБазы = ПредставлениеДляЗаписиВИнформационнуюБазу(ОписаниеЭлемента);
	КонецЦикла;
	
	КонфигураторТекста = НовыйКонфигураторТекстаЗапросаКлассификатора(Классификатор);
	КонфигураторТекста.ОператорЗапроса.ВыбираемыеПоля.Добавить("Наименование");
	КонфигураторТекста.ОператорЗапроса.ВыбираемыеПоля.Добавить("ИмяПредопределенныхДанных");
	
	ТекстЗапроса = КонфигураторТекста.СхемаЗапроса.ПолучитьТекстЗапроса();
	// Пример текста запроса:
	//"ВЫБРАТЬ
	//|	Элементы.Ссылка КАК Ссылка,
	//|	Элементы.Наименование КАК Наименование,
	//|	Элементы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	//|ИЗ
	//|	Справочник.ПрочиеДоходыИРасходы КАК Элементы";
	
	Запрос = Новый Запрос(КонфигураторТекста.СхемаЗапроса.ПолучитьТекстЗапроса());
	Выборка = Запрос.Выполнить().Выбрать();
	
	НайденныеЭлементы = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Отбор = Новый Структура;
		Если Не ПустаяСтрока(Выборка.ИмяПредопределенныхДанных) Тогда
			Отбор.Вставить("Предопределенный", Истина);
			Отбор.Вставить("Имя",              Выборка.ИмяПредопределенныхДанных);
		Иначе
			Отбор.Вставить("Предопределенный",                Ложь);
			Отбор.Вставить("ПредставлениеИнформационнойБазы", Выборка.Наименование);
		КонецЕсли;
		
		ОписанияЭлемента = ПоставляемыеЭлементы.НайтиСтроки(Отбор);
		Если Не ЗначениеЗаполнено(ОписанияЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеЭлемента = ОписанияЭлемента[0];
		
		Если ЗначениеЗаполнено(НайденныеЭлементы[ОписаниеЭлемента.Имя]) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеЭлементы.Вставить(ОписаниеЭлемента.Имя, Выборка.Ссылка);
		
	КонецЦикла;
	
	// Для выстраивания элементов сначала сбросим значение реквизита упорядочивания,
	// а потом перезапишем элементы в нужном порядке
	
	Для Каждого ОписаниеНайденнойСсылки Из НайденныеЭлементы Цикл
		
		Объект = ОписаниеНайденнойСсылки.Значение.ПолучитьОбъект();
		НастройкаПорядкаЭлементов.СброситьЗначениеРеквизитаУпорядочивания(Объект, Неопределено);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Истина, Ложь); // Пропускаем бизнес-логику, чтобы порядок не был установлен автоматически
		
	КонецЦикла;
		
	Для Каждого ОписаниеЭлемента Из ПоставляемыеЭлементы Цикл
		
		Ссылка = НайденныеЭлементы[ОписаниеЭлемента.Имя];
		
		Если Не ЗначениеЗаполнено(Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.ПолучитьОбъект();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Истина, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормаЭлемента

// Настраивает список выбора в поле формы, позволяющем выбрать назначение элемента.
// Технически при этом элемент назначается предопределенным.
//
// Параметры:
//  ЭлементИспользованиеПоУмолчанию - ПолеФормы - настраиваемое поле формы;
//                                    в данных содержит Объект.ИмяПредопределенныхДанных
//  Классификатор - СправочникМенеджер - классификатор, форма которого настраивается
//
Процедура НастроитьИспользованиеПоУмолчанию(ЭлементИспользованиеПоУмолчанию, Классификатор) Экспорт

	ЭлементИспользованиеПоУмолчанию.СписокВыбора.Очистить(); // Свойство СписокВыбора используется только для чтения
	Для Каждого ОписаниеЭлемента Из ПоставляемыеЭлементы(Классификатор) Цикл
		
		Если Не ОписаниеЭлемента.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПроверитьФункциональность(ОписаниеЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользованиеПоУмолчанию = ПредставлениеИспользованиеПоУмолчанию(ОписаниеЭлемента);
		
		ЭлементИспользованиеПоУмолчанию.СписокВыбора.Добавить(ОписаниеЭлемента.Имя, ИспользованиеПоУмолчанию);
		
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает состояние справочника к тому, чтобы в него можно было записать элемент
// с установленным именем предопределенных данных, а именно, отключает предопределенность элемента с таким же именем.
//
// Параметры:
//  Объект        - ДанныеФормыСтруктура - данные записываемого элемента справочника
//  Отказ         - Булево - будет установлен в Истина, если не удалось отключить предопределенность другого элемента
//  Классификатор - СправочникМенеджер - классификатор, в который записывается элемент
//
Процедура ПодготовитьЗаписьИмяПредопределенныхДанных(Объект, Отказ, Классификатор) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйПредопределенный = НайтиПредопределенныйЭлемент(Классификатор, Объект.ИмяПредопределенныхДанных);
	
	Если Не ЗначениеЗаполнено(СтарыйПредопределенный)
		Или СтарыйПредопределенный = Объект.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина; // Разрешим запись только в случае удачной записи старого объекта
	
	СтарыйОбъект = СтарыйПредопределенный.ПолучитьОбъект();
	
	Попытка
		СтарыйОбъект.Заблокировать();
	Исключение
		
		ШаблонТекста = НСтр("ru = 'Не удалось заблокировать запись ""%1"", используемую по умолчанию сейчас.
                             |%2'");
		ТекстСообщения = СтрШаблон(ШаблонТекста, СтарыйОбъект, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); // Не следует вызывать исключение, так как важно передать значение параметра Отказ
		Возврат;
		
	КонецПопытки;
	
	СтарыйОбъект.ИмяПредопределенныхДанных = "";
	СтарыйОбъект.Записать();
	СтарыйОбъект.Разблокировать();
	
	Отказ = Ложь;
	
КонецПроцедуры

// Определяет URL к информации для пользователя о видах статей доходов и расходов
// 
// Возвращаемое значение:
//  Строка - URL
//
Функция СсылкаОписаниеВидовСтатейДоходовРасходов() Экспорт
	Возврат "https://its.1c.ru/bmk/bp30/cost_items";
КонецФункции

// Определяет текст, выводимый на форме элемента классификатора, для поля, настраивающего использование по умолчанию
// 
// Возвращаемое значение:
//  Строка - текст подсказки на языке пользователя.
//
Функция ТекстПодсказкиИспользованиеПоУмолчанию() Экспорт
	
	Возврат НСтр("ru = 'Показывает, какая роль назначена данной статье в программе.
                  |Например, для подстановки в какой документ она используется.
                  |Чтобы отказаться от подстановки статьи, очистите это поле.'");
	
КонецФункции

#КонецОбласти

// Устанавливает для предопределенного элемента значения реквизитов по умолчанию.
//
// Параметры:
//   Классификатор                - СправочникМенеджер - классификатор, содержащий элементы
//   ИмяПредопределенногоЭлемента - Строка - имя элемента, см. ЗаполнитьОписанияПоставляемыхЭлементов модуля менеджера классификатора
//
Процедура ОбновитьРеквизитыКлассификатора(Классификатор, ИмяПредопределенногоЭлемента) Экспорт
	
	Значение = ПредопределенныйЭлемент(Классификатор, ИмяПредопределенногоЭлемента);
	
	ПоставляемыеЭлементы = ПоставляемыеЭлементы(Классификатор);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Имя", ИмяПредопределенногоЭлемента);
	
	СтрокиОтбора = ПоставляемыеЭлементы.НайтиСтроки(Отбор);
	Если СтрокиОтбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПоУмолчанию = ЗначенияЗаполненияЭлемента(СтрокиОтбора[0]);
	
	Попытка
		
		Объект = Значение.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыПоУмолчанию);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Истина, Истина);
		
	Исключение
		
		ШаблонТекстаОшибкиЗаписи = НСтр(
			"ru = 'Не удалось записать предопределенный элемент справочника %1.
			|%2'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(
			ШаблонТекстаОшибкиЗаписи,
			ИмяПредопределенногоЭлемента,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Классификатор,
			Значение,
			ТекстОшибки);
			
		ВызватьИсключение;
			
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

#Область ОписаниеПоставляемыхЭлементов

// Конструирует коллекцию, описывающую, какие поставляемые элементы должен содержать справочник.
// Заполнение коллекции выполняется в процедуре модуля ЗаполнитьОписанияПоставляемыхЭлементов менеджера справочника,
// с помощью ДобавитьОписаниеПоставляемогоЭлемента.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. тело функции
//
Функция НовыйПоставляемыеЭлементы()
	
	ОписаниеЗначений = Новый ТаблицаЗначений;
	ОписаниеЗначений.Колонки.Добавить("Имя",                      ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ОписаниеЗначений.Колонки.Добавить("Предопределенный",         Новый ОписаниеТипов("Булево"));
	ОписаниеЗначений.Колонки.Добавить("Представление",            Новый ОписаниеТипов("Строка")); // Многоязычная строка - для записи в информационную базу. Для получения следует использовать ПредставлениеДляЗаписиВИнформационнуюБазу()
	ОписаниеЗначений.Колонки.Добавить("ИспользованиеПоУмолчанию", Новый ОписаниеТипов("Строка")); // Многоязычная строка - представление для пользователя настройки использования элемента по умолчанию (предопределенного элемента)
	ОписаниеЗначений.Колонки.Добавить("Реквизиты",                Новый ОписаниеТипов("Структура")); // Перечисленные реквизиты должны иметь флаг ЗаполнятьИзДанныхЗаполнения
	ОписаниеЗначений.Колонки.Добавить("СоздаватьЗаранее",         Новый ОписаниеТипов("Булево")); // Создавать до первого обращения, например, при создании информационной базы или включении функциональности
	ОписаниеЗначений.Колонки.Добавить("Функциональность",         Новый ОписаниеТипов("Массив")); // Имена функциональных опций
	// Имена складываются по ИЛИ; например, если указано несколько имен функциональных опций,
	// то элемент будет создан при включенной любой из этих опций.
	// Для создания статей при включении константы следует в модуле менеджера константы вызвать метод ОбеспечитьФункциональность.
	
	// Порядок записей в таблице определяет порядок вывода настроек пользователю,
	// а также порядок следования в справочнике элементов, добавленных при создании новой базы и включении функциональности.
	
	Возврат ОписаниеЗначений;
	
КонецФункции

// Запрашивает у классификатора информацию о том, какие поставляемые элементы должен содержать справочник
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, содержащий элементы
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйПоставляемыеЭлементы()
//
Функция ПоставляемыеЭлементы(Классификатор)
	
	ПоставляемыеЭлементы = НовыйПоставляемыеЭлементы();
	
	Классификатор.ЗаполнитьОписанияПоставляемыхЭлементов(ПоставляемыеЭлементы);
	
	Возврат ПоставляемыеЭлементы;
	
КонецФункции

Функция ПредставлениеДляЗаписиВИнформационнуюБазу(ОписаниеЭлемента)
	
	Возврат НСтр(ОписаниеЭлемента.Представление, ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ПредставлениеИспользованиеПоУмолчанию(ОписаниеЭлемента) // На языке пользователя
	
	Если Не ПустаяСтрока(ОписаниеЭлемента.ИспользованиеПоУмолчанию) Тогда
		Возврат НСтр(ОписаниеЭлемента.ИспользованиеПоУмолчанию);
	Иначе
		Возврат НСтр(ОписаниеЭлемента.Представление);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПоискЭлементов

// Ищет предопределенный элемент по имени
// Следует использовать, когда важно исключить влияние кеша повторно используемых значений
//
// Параметры:
//  Классификатор - СправочникМенеджер - классификатор, содержащий элементы
//  ИмяПредопределенногоЭлемента - Строка - имя элемента, см. ЗаполнитьОписанияПоставляемыхЭлементов модуля менеджера классификатора
// 
// Возвращаемое значение:
//  СправочникСсылка.ПрочиеДоходыИРасходы,
//  СправочникСсылка.СтатьиЗатрат
//        - статья доходов (расходов). Конкретный тип определяется переданным классификатором.
//          Если не найдена, возвращается пустая ссылка.
//
Функция НайтиПредопределенныйЭлемент(Классификатор, ИмяПредопределенногоЭлемента)
	
	Конфигуратор = НовыйКонфигураторТекстаЗапросаКлассификатора(Классификатор);
	
	// Пример текста запроса
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	Элементы.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.ПрочиеДоходыИРасходы КАК Элементы
	//|ГДЕ
	//|	Элементы.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных";
	
	Конфигуратор.ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	
	Конфигуратор.ОператорЗапроса.Отбор.Добавить("Элементы.ИмяПредопределенныхДанных = &ИмяПредопределенныхДанных");
	
	// Выполнение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ИмяПредопределенногоЭлемента);
	Запрос.Текст = Конфигуратор.СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не Выборка.Следующий() Тогда
		Возврат Классификатор.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция НайтиПодходящийЭлемент(ОписаниеЭлемента, Классификатор, ТолькоУникальные, ВсеПоставляемыеЭлементы)
	
	// Ищем по имени
	Если ОписаниеЭлемента.Предопределенный Тогда
		Элемент = НайтиПредопределенныйЭлемент(Классификатор, ОписаниеЭлемента.Имя);
		Если ЗначениеЗаполнено(Элемент) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЕсли;
	
	// Ищем по связанным настройкам
	Элемент = Классификатор.ПрочитатьИзСвязаннойНастройки(ОписаниеЭлемента.Имя);
	Если ЗначениеЗаполнено(Элемент) Тогда
		Возврат Элемент;
	КонецЕсли;
	
	// Ищем по свойствам - запросом
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Представление", ПредставлениеДляЗаписиВИнформационнуюБазу(ОписаниеЭлемента));
	
	КонфигураторТекста = НовыйКонфигураторТекстаЗапросаКлассификатора(Классификатор);
	
	// Пример текста запроса
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	Элементы.Ссылка КАК Ссылка,
	//|	ВЫБОР
	//|		КОГДА Элементы.Наименование = &Представление
	//|			ТОГДА 2
	//|		КОГДА Элементы.Наименование ПОДОБНО &Представление
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК СтепеньСовпаденияПредставления
	//|ИЗ
	//|	Справочник.ПрочиеДоходыИРасходы КАК Элементы
	//|ГДЕ
	//|	НЕ Элементы.ЭтоГруппа
	//|	И НЕ Элементы.ПометкаУдаления
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	СтепеньСовпаденияПредставления УБЫВ";
	
	Если ТолькоУникальные Тогда
		КонфигураторТекста.ОператорЗапроса.КоличествоПолучаемыхЗаписей = 2;
		// Наличие второй записи скажет о неуникальности
	Иначе
		КонфигураторТекста.ОператорЗапроса.КоличествоПолучаемыхЗаписей = 1;
	КонецЕсли;
	
	ВыражениеСтепеньСовпаденияПредставления =
	"ВЫБОР
	|	КОГДА Элементы.Наименование = &Представление
	|		ТОГДА 2
	|	КОГДА Элементы.Наименование ПОДОБНО &Представление
	|		ТОГДА 1
	|	ИНАЧЕ 0
	|КОНЕЦ";
	
	ИндексНовогоПоля = КонфигураторТекста.ОписаниеЗапроса.Колонки.Количество();
	КонфигураторТекста.ОператорЗапроса.ВыбираемыеПоля.Добавить(ВыражениеСтепеньСовпаденияПредставления);
	КонфигураторТекста.ОписаниеЗапроса.Колонки[ИндексНовогоПоля].Псевдоним = "СтепеньСовпаденияПредставления";
	
	ОписаниеУпорядочивания = КонфигураторТекста.ОписаниеЗапроса.Порядок.Добавить("СтепеньСовпаденияПредставления");
	ОписаниеУпорядочивания.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию;
	
	ОтборЗапроса = КонфигураторТекста.ОператорЗапроса.Отбор;
	
	ОтборЗапроса.Добавить("НЕ Элементы.ЭтоГруппа");
	ОтборЗапроса.Добавить("НЕ Элементы.ПометкаУдаления");
	
	Если ОписаниеЭлемента.Предопределенный Тогда
		ОтборЗапроса.Добавить("НЕ Элементы.Предопределенный");
		ОтборЗапроса.Добавить("Элементы.ИмяПредопределенныхДанных = """"");
	КонецЕсли;
	
	Для Каждого ОписаниеРеквизита Из ОписаниеЭлемента.Реквизиты Цикл
		Запрос.УстановитьПараметр(ОписаниеРеквизита.Ключ, ОписаниеРеквизита.Значение);
		ТекстУсловия = СтрШаблон("Элементы.%1 = &%1", ОписаниеРеквизита.Ключ);
		ОтборЗапроса.Добавить(ТекстУсловия);
	КонецЦикла;
	
	// Выполнение запроса
	Запрос.Текст = КонфигураторТекста.СхемаЗапроса.ПолучитьТекстЗапроса();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Классификатор.ПустаяСсылка();
	КонецЕсли;
	
	// Проверка надежности поиска по реквизитам.
	НадежныеРеквизитыПоиска = СтрРазделить(Классификатор.НадежныеРеквизитыПоиска(), ",");
	ЗначенияНадежныхРеквизитов = Новый Структура;
	
	ПоискПоРеквизитамНадежен = Истина;
	Для Каждого ИмяРеквизита Из НадежныеРеквизитыПоиска Цикл
		
		Если Не ОписаниеЭлемента.Реквизиты.Свойство(ИмяРеквизита) Тогда
			ПоискПоРеквизитамНадежен = Ложь;
			Прервать;
		КонецЕсли;
		
		ЗначенияНадежныхРеквизитов.Вставить(ИмяРеквизита, ОписаниеЭлемента.Реквизиты[ИмяРеквизита]);
		
	КонецЦикла;
	
	// Даже по надежным реквизитам поиск может оказаться ненадежным,
	// если у разных поставляемых набор таких реквизитов совпадает.
	Если ПоискПоРеквизитамНадежен Тогда
		
		Для Каждого ОписаниеПроверяемогоЭлемента Из ВсеПоставляемыеЭлементы Цикл
			
			Если ОписаниеПроверяемогоЭлемента.Имя = ОписаниеЭлемента.Имя Тогда
				// Любой другой с такими же значениями реквизитов сделает поиск ненадежным
				Продолжить;
			КонецЕсли;
			
			ПодходящийЭлемент = Истина;
			Для Каждого ОписаниеЗначения Из ЗначенияНадежныхРеквизитов Цикл
				
				Если Не ОписаниеПроверяемогоЭлемента.Реквизиты.Свойство(ОписаниеЗначения.Ключ)
					Или ОписаниеПроверяемогоЭлемента.Реквизиты[ОписаниеЗначения.Ключ] <> ОписаниеЗначения.Значение Тогда
					ПодходящийЭлемент = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПодходящийЭлемент Тогда
				ПоискПоРеквизитамНадежен = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Выборка.СтепеньСовпаденияПредставления = 0 И Не ПоискПоРеквизитамНадежен Тогда
		Возврат Классификатор.ПустаяСсылка();
	КонецЕсли;
	
	Если ТолькоУникальные И Выборка.Количество() > 1 Тогда
		Возврат Классификатор.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция НовыйКонфигураторТекстаЗапросаКлассификатора(Классификатор)
	
	Конфигуратор = Новый Структура;
	Конфигуратор.Вставить("СхемаЗапроса", Новый СхемаЗапроса);
	Конфигуратор.Вставить("ОписаниеЗапроса", Конфигуратор.СхемаЗапроса.ПакетЗапросов[0]);
	Конфигуратор.Вставить("ОператорЗапроса", Конфигуратор.ОписаниеЗапроса.Операторы[0]);
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Классификатор.ПустаяСсылка());
	
	// Пример текста запроса
	//"ВЫБРАТЬ
	//|	Элементы.Ссылка КАК Ссылка
	//|ИЗ
	//|	Справочник.ПрочиеДоходыИРасходы КАК Элементы";
	
	Конфигуратор.ОператорЗапроса.Источники.Добавить(ИмяТаблицы, "Элементы");
	
	Конфигуратор.ОператорЗапроса.ВыбираемыеПоля.Добавить("Элементы.Ссылка");
	Конфигуратор.ОписаниеЗапроса.Колонки[0].Псевдоним = "Ссылка";
	
	Возврат Конфигуратор;
	
КонецФункции

#КонецОбласти

#Область МодификацияЭлементов

Функция НазначитьПодходящиеЭлементы(Классификатор, ПотребныеЭлементы)
	
	// После выполнения этой функции следует для ее результата вызвать Классификатор.ВыполнитьСвязанныеНастройки.
	// Сейчас за вызовом функции следует вызов СоздатьПоставляемыеЭлементы, который это делает.
	
	НайденныеЭлементы = Новый Структура;
	ВсеПоставляемыеЭлементы = ПоставляемыеЭлементы(Классификатор);
	
	Для Каждого ОписаниеЭлемента Из ПотребныеЭлементы Цикл
		
		Элемент = НайтиПодходящийЭлемент(ОписаниеЭлемента, Классификатор, Ложь, ВсеПоставляемыеЭлементы);
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Продолжить;
		КонецЕсли;
			
		Если ОписаниеЭлемента.Предопределенный Тогда
			НазначитьПредопределенным(Элемент, ОписаниеЭлемента.Имя);
		КонецЕсли;
			
		НайденныеЭлементы.Вставить(ОписаниеЭлемента.Имя, Элемент);
			
	КонецЦикла;
	
	Возврат НайденныеЭлементы;
	
КонецФункции

Процедура НазначитьПредопределенным(Ссылка, ИмяПредопределенного)
	
	Классификатор = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	МетаданныеКлассификатора = Ссылка.Метаданные();
	
	РанееНазначенныйПредопределенный = НайтиПредопределенныйЭлемент(Классификатор, ИмяПредопределенного);
	
	Если ЗначениеЗаполнено(РанееНазначенныйПредопределенный) Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект.ПометкаУдаления Тогда
		// Недопустимо связывать с именем предопределенного элемент, помеченный на удаление
		Возврат;
	КонецЕсли;
	
	Объект.ИмяПредопределенныхДанных = ИмяПредопределенного;
	
	Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект, Истина, Истина);
	Исключение
		
		ШаблонТекстаОшибкиЗаписи = НСтр(
			"ru = 'Элементу справочника не установлено имя предопределенных данных %1.
			|%2'",
			Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстОшибки = СтрШаблон(
			ШаблонТекстаОшибкиЗаписи,
			ИмяПредопределенного,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеКлассификатора,
			Ссылка,
			ТекстОшибки);
			
		ВызватьИсключение;
			
	КонецПопытки;
	
КонецПроцедуры

Функция ПроверитьФункциональность(ОписаниеЭлемента)
	
	Если Не ЗначениеЗаполнено(ОписаниеЭлемента.Функциональность) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ИмяФункциональности Из ОписаниеЭлемента.Функциональность Цикл
	
		Если Метаданные.ФункциональныеОпции.Найти(ИмяФункциональности) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию(ИмяФункциональности) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Создает поставляемые элементы и выполняет связанные с ними первоначальные настройки.
//
// Параметры:
//  Классификатор - СправочникМенеджер - справочник, элементы которого создаются
//  КСозданию - ТаблицаЗначений - см. НовыйПоставляемыеЭлементы - описание элементов, которые нужно создать
//            - Массив - подмножество строк из НовыйПоставляемыеЭлементы
//  НайденныеЭлементы - Структура - элементы, созданные ранее и найденные, например, при включении функциональности.
//              Эта информация может быть использована в связанных настройках.
//            - Неопределено - отсутствует информация о созданных ранее элементах.
// 
// Возвращаемое значение:
//  Структура - созданные элементы
//    * Ключ - имя созданного элемента, см. НовыйПоставляемыеЭлементы
//    * Значение - ссылка на созданный элемент
//
Функция СоздатьПоставляемыеЭлементы(Классификатор, КСозданию, НайденныеЭлементы = Неопределено)
	
	СозданныеЭлементы = Новый Структура; // Ключ - имя элемента, Значение - ссылка
	
	МетаданныеКлассификатора = Классификатор.ПустаяСсылка().Метаданные();
	
	Если Не ПравоДоступа("Редактирование", МетаданныеКлассификатора) Тогда
		Возврат СозданныеЭлементы;
	КонецЕсли;
	
	ПредставлениеСписка = МетаданныеКлассификатора.ПредставлениеСписка;
	
	ШаблонТекстаОшибкиЗаписиАдминистратору = НСтр(
		"ru = 'Не создана статья ""%1"" в списке ""%2""
         |%3'", // Подробная информация
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	// После создания элементов могут выполняться настройки, связанные с ними.
	// Некоторые настройки опираются не на одну, а на несколько статей.
	// Поэтому все действия - и по созданию статьи и по настройке - выполняются вне транзакции.
	// В противном случае при ошибки записи элемента могла бы не быть выполнена настройка,
	// связанная с предыдущим созданным элементом.
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ОписаниеЭлемента Из КСозданию Цикл
			
			ПредставлениеЭлемента  = ПредставлениеДляЗаписиВИнформационнуюБазу(ОписаниеЭлемента);
			РекомендацияПоСозданию = "";
		
			Элемент = Классификатор.СоздатьЭлемент();
			ЗначенияЗаполнения = ЗначенияЗаполненияЭлемента(ОписаниеЭлемента);
			Элемент.Заполнить(ЗначенияЗаполнения);
			Если ОписаниеЭлемента.Предопределенный Тогда
				
				Элемент.ИмяПредопределенныхДанных = ОписаниеЭлемента.Имя;
				
			КонецЕсли;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Элемент, Истина, Истина);
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ТекстОшибкиАдминистратору = СтрШаблон(
					ШаблонТекстаОшибкиЗаписиАдминистратору,
					ПредставлениеЭлемента,
					ПредставлениеСписка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					МетаданныеКлассификатора,
					,// Данных еще нет
					ТекстОшибкиАдминистратору);
					
				ВызватьИсключение;
				
			КонецПопытки;
			
			СозданныеЭлементы.Вставить(ОписаниеЭлемента.Имя, Элемент.Ссылка);
			
		КонецЦикла;
		
		ЭлементыНастройки = ОбщегоНазначения.СкопироватьРекурсивно(СозданныеЭлементы);
		Если НайденныеЭлементы <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ЭлементыНастройки, НайденныеЭлементы);
		КонецЕсли;
		
		Классификатор.ВыполнитьСвязанныеНастройки(ЭлементыНастройки);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеКлассификатора,
			,// Данные неизвестны
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		// Пользователю расскажем про все потребные элементы,
		// так как транзакция отменена полностью,
		// т.е. не созданы и те элементы, при непосредственном создании которых ошибок не было.
		ОписаниеОшибок = Новый Массив;
		
		ШаблонТекстаОшибки = НСтр("ru = 'Не создана статья ""%1"" в списке ""%2"".'");
			
		ШаблонРекомендацииПоСозданию = НСтр(
			"ru = 'Создайте статью.
             |В поле ""Использование по умолчанию"" укажите ""%1"".'");
		
		Для Каждого ОписаниеЭлемента Из КСозданию Цикл
			
			ПредставлениеЭлемента  = ПредставлениеДляЗаписиВИнформационнуюБазу(ОписаниеЭлемента);
			
			ОписаниеОшибки = Новый Массив;
			ОписаниеОшибки.Добавить(СтрШаблон(ШаблонТекстаОшибки, ПредставлениеЭлемента, ПредставлениеСписка));
			
			Если ОписаниеЭлемента.Предопределенный Тогда
				ИспользованиеПоУмолчанию = ПредставлениеИспользованиеПоУмолчанию(ОписаниеЭлемента);
				ОписаниеОшибки.Добавить(СтрШаблон(ШаблонРекомендацииПоСозданию, ИспользованиеПоУмолчанию));
			КонецЕсли;
			
			ОписаниеОшибок.Добавить(СтрСоединить(ОписаниеОшибки, Символы.ПС));
			
		КонецЦикла;
		
		ОписаниеОшибок.Добавить(НСтр("ru = 'Подробная информация записана в журнал регистрации.'"));
		
		ВызватьИсключение СтрСоединить(ОписаниеОшибок, Символы.ПС);
		
	КонецПопытки;
	
	Возврат СозданныеЭлементы;
	
КонецФункции

Функция ЗначенияЗаполненияЭлемента(ОписаниеЭлемента)
	
	ЗначенияЗаполнения = Новый Структура;
	Для Каждого ОписаниеРеквизита Из ОписаниеЭлемента.Реквизиты Цикл
		ЗначенияЗаполнения.Вставить(ОписаниеРеквизита.Ключ, ОписаниеРеквизита.Значение);
	КонецЦикла;
	ЗначенияЗаполнения.Вставить("Наименование", ПредставлениеДляЗаписиВИнформационнуюБазу(ОписаниеЭлемента));
	
	Возврат ЗначенияЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ВключениеПоНеобходимости

Функция СоздатьПоставляемыйЭлементПоИмени(Классификатор, ИмяПоставляемогоЭлемента)
	
	ПоставляемыеЭлементы = ПоставляемыеЭлементы(Классификатор);
	
	ПотребныеЭлементы = ПоставляемыеЭлементы.НайтиСтроки(Новый Структура("Имя", ИмяПоставляемогоЭлемента));
	
	ВключенныеСтатьи = СоздатьПоставляемыеЭлементы(Классификатор, ПотребныеЭлементы);
	
	Если Не ВключенныеСтатьи.Свойство(ИмяПоставляемогоЭлемента) Тогда
		Возврат Классификатор.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВключенныеСтатьи[ИмяПоставляемогоЭлемента];
	
КонецФункции

#КонецОбласти

#КонецОбласти
