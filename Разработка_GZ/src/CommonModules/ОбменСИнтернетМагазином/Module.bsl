#Область ПрограммныйИнтерфейс

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обмен с интернет-магазином'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает идентификатор подсистемы в справочнике объектов
// метаданных.
//
Функция ИдентификаторПодсистемы() Экспорт
	
	Возврат ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		"Подсистема.БухгалтерияПредприятияПодсистемы.Подсистема.ОбменСИнтернетМагазином");
	
КонецФункции

// Возвращает логотип указанной CMS
//
// Параметры:
//  ЗначениеCMS - Перечислениессылка.CMSИнтернетМагазина - CMS, для которой необходимо получить логотип
//
// Возвращаемое значение:
//   Картинка - логотип выбранной CMS.
Функция ЛоготипCMS(ЗначениеCMS) Экспорт
	
	Если ЗначениеCMS = Перечисления.CMSИнтернетМагазина.Bitrix Тогда
		Картинка = БиблиотекаКартинок.ЛогоBitrix;
	ИначеЕсли ЗначениеCMS = Перечисления.CMSИнтернетМагазина.UMI Тогда
		Картинка = БиблиотекаКартинок.ЛогоUMI;
	Иначе
		Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;
	
	Возврат Картинка;
КонецФункции

Функция ДоступенОбменСИнтернетМагазином() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиОбменаСИнтернетМагазином);
	
КонецФункции

// Определяет необходимость сопоставления данных документа, загруженного из интернет-магазина.
Функция ДозаполнитьПоДаннымИнтернетМагазина(ДокументСсылка, ИдентификаторФормы) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяДозаполнение", Ложь);
	Результат.Вставить("ВсеДанныеСопоставленыАвтоматически", Ложь);
	Результат.Вставить("ДанныеСопоставленныеАвтоматически");
	Результат.Вставить("ХранилищеДанныхДляСопоставления");
	
	Если НЕ ДоступенОбменСИнтернетМагазином() Тогда
		Возврат Результат;
	КонецЕсли;
	
	НесопоставленныеОбъекты = РегистрыСведений.НесопоставленныеОбъектыИнтернетМагазина.СоздатьНаборЗаписей();
	НесопоставленныеОбъекты.Отбор.Документ.Установить(ДокументСсылка);
	НесопоставленныеОбъекты.Прочитать();
	
	Если НесопоставленныеОбъекты.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	НесопоставленныеДанные = НесопоставленныеОбъекты[0].ДанныеОбъекта.Получить();
	
	КонтрагентТребуетСопоставления = НесопоставленныеДанные.Свойство("ДанныеКонтрагента");
	НоменклатураТребуетСопоставления = НесопоставленныеДанные.Свойство("ДанныеНоменклатуры");
	
	Если НЕ КонтрагентТребуетСопоставления И НЕ НоменклатураТребуетСопоставления Тогда
		
		УдалитьДанныеДляСопоставления(ДокументСсылка);
		
		Возврат Результат;
	КонецЕсли;
	
	ДанныеСопоставленныеАвтоматически = Новый Структура;
	ДанныеСопоставленныеАвтоматически.Вставить("Номенклатура");
	ДанныеСопоставленныеАвтоматически.Вставить("Контрагент");
	
	ДанныеДляСопоставления = Новый Структура;
	ДанныеДляСопоставления.Вставить("Номенклатура");
	ДанныеДляСопоставления.Вставить("Контрагент");
	
	ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Организация,ВалютаДокумента");
	
	Если КонтрагентТребуетСопоставления Тогда
		ДанныеКонтрагента = НесопоставленныеДанные.ДанныеКонтрагента;
		Контрагент = ОбменСИнтернетМагазином.КонтрагентПоИдентификаторуМагазина(ДанныеКонтрагента.Идентификатор);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			ДанныеСопоставленныеАвтоматически.Контрагент = Контрагент;
			КонтрагентТребуетСопоставления = Ложь;
		Иначе
			ДанныеДляСопоставления.Контрагент = ДанныеКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	Если НоменклатураТребуетСопоставления Тогда
		ТаблицаНесопоставленнойНоменклатуры = НесопоставленныеДанные.ДанныеНоменклатуры;
		
		УникальныеИдентификаторы = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(УникальныеИдентификаторы,
			ТаблицаНесопоставленнойНоменклатуры.ВыгрузитьКолонку("Идентификатор"), Истина);
		РанееСопоставленнаяНоменклатура = НоменклатураПоИдентификаторамМагазина(УникальныеИдентификаторы);
		
		Если РанееСопоставленнаяНоменклатура.Количество() > 0 Тогда
			СопоставленнаяНоменклатура = Новый Соответствие;
			Для Каждого РанееСопоставленнаяНоменклатураСтрока Из РанееСопоставленнаяНоменклатура Цикл
				СопоставленнаяСтрока = ТаблицаНесопоставленнойНоменклатуры.Найти(РанееСопоставленнаяНоменклатураСтрока.Идентификатор, "Идентификатор");
				СопоставленнаяНоменклатура.Вставить(СопоставленнаяСтрока.НомерСтрокиЗаказа, РанееСопоставленнаяНоменклатураСтрока.Номенклатура);
				
				ТаблицаНесопоставленнойНоменклатуры.Удалить(СопоставленнаяСтрока);
			КонецЦикла;
			
			ДанныеСопоставленныеАвтоматически.Номенклатура = СопоставленнаяНоменклатура;
		КонецЕсли;
		
		Если ТаблицаНесопоставленнойНоменклатуры.Количество() > 0 Тогда
			ДанныеДляСопоставления.Номенклатура = ТаблицаНесопоставленнойНоменклатуры;
		КонецЕсли;
		
	КонецЕсли;
	
	ВсеДанныеСопоставленыАвтоматически = Не ЗначениеЗаполнено(ДанныеДляСопоставления.Контрагент)
		И Не ЗначениеЗаполнено(ДанныеДляСопоставления.Номенклатура);
	
	Если ВсеДанныеСопоставленыАвтоматически Тогда
		УдалитьДанныеДляСопоставления(ДокументСсылка);
	КонецЕсли;
	
	Результат.ТребуетсяДозаполнение = Истина;
	Результат.ВсеДанныеСопоставленыАвтоматически = ВсеДанныеСопоставленыАвтоматически;
	Результат.ДанныеСопоставленныеАвтоматически  = ДанныеСопоставленныеАвтоматически;
	Результат.ХранилищеДанныхДляСопоставления    = ПоместитьВоВременноеХранилище(ДанныеДляСопоставления, ИдентификаторФормы);
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки обмена с интернет-магазином.
//
// Возвращаемое значение:
//   Структура, Неопределено - см. состав ресурсов РегистраСведений.НастройкиОбменаСИнтернетМагазином
//								Если настройка не задана возвращает Неопределено
Функция ПолучитьНастройкиОбмена() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОбменаСИнтернетМагазином.CMSИнтернетМагазина КАК CMSИнтернетМагазина,
	|	НастройкиОбменаСИнтернетМагазином.АдресСайта КАК АдресСайта,
	|	НастройкиОбменаСИнтернетМагазином.Логин КАК Логин,
	|	НастройкиОбменаСИнтернетМагазином.ЗапрещенныеСтатусы КАК ЗапрещенныеСтатусы,
	|	НастройкиОбменаСИнтернетМагазином.ГруппаНоменклатуры КАК ГруппаНоменклатуры,
	|	НастройкиОбменаСИнтернетМагазином.ГруппаКонтрагентов КАК ГруппаКонтрагентов,
	|	НастройкиОбменаСИнтернетМагазином.ВидНоменклатуры КАК ВидНоменклатуры,
	|	НастройкиОбменаСИнтернетМагазином.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	НастройкиОбменаСИнтернетМагазином.Организация КАК Организация,
	|	НастройкиОбменаСИнтернетМагазином.Склад КАК Склад,
	|	НастройкиОбменаСИнтернетМагазином.Префикс КАК Префикс,
	|	НастройкиОбменаСИнтернетМагазином.СоздаватьНовыхКонтрагентов КАК СоздаватьНовыхКонтрагентов,
	|	НастройкиОбменаСИнтернетМагазином.СоздаватьНовуюНоменклатуру КАК СоздаватьНовуюНоменклатуру,
	|	НастройкиОбменаСИнтернетМагазином.ИспользоватьОтборПоСтатусам КАК ИспользоватьОтборПоСтатусам,
	|	НастройкиОбменаСИнтернетМагазином.ДатаНачалаОбмена КАК ДатаНачалаОбмена,
	|	НастройкиОбменаСИнтернетМагазином.ЗагружатьОнлайнОплаты КАК ЗагружатьОнлайнОплаты,
	|	НастройкиОбменаСИнтернетМагазином.ЗагружатьСпособыДоставки КАК ЗагружатьСпособыДоставки
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСИнтернетМагазином КАК НастройкиОбменаСИнтернетМагазином";
	Настройки = Запрос.Выполнить().Выгрузить();
	Если Настройки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Настройки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Настройки[0]);
		Возврат Настройки;
	КонецЕсли;
	
КонецФункции

// Создает и заполняет документы СчетНаОплатуПокупателю и Оплата платежной картой по данным заказов интернет-магазина,
// используется в фоновых заданиях.
Процедура ЗагрузитьЗаказыИнтернетМагазинаВФоне(Параметры, АдресХранилища) Экспорт
	
	РезультатОбмена = ЗагрузитьЗаказыИнтернетМагазина();
	
	ПоместитьВоВременноеХранилище(РезультатОбмена, АдресХранилища);

КонецПроцедуры

// Возвращает результат тестового подключения к сайту.
//
// Параметры:
//  ПараметрыПодключения - Структура, Адрес сайта, логин и пароль
//     * CMSИнтернетМагазина - Перечислениессылка.CMSИнтернетМагазина
//     * АдресСайта          - Строка - адрес сайта или скрипта обмена
//     * Логин               - Строка - Логин пользователя
//     * Пароль              - Строка - Пароль пользователя(опционально).
//                             Если не задан явно,то будет получен из безопасного хранилища
//  ТекстСообщения  - Строка -  текстовое сообщение об ошибках
//
// Возвращаемое значение:
//  Булево
//
Функция ВыполнитьТестовоеПодключение(Знач НастройкиПодключения, ТекстСообщения) Экспорт
	
	ПараметрыПодключения = ПараметрыПодключения(
		НастройкиПодключения.CMSИнтернетМагазина,
		НастройкиПодключения.АдресСайта,
		НастройкиПодключения.Логин,
		НастройкиПодключения.Пароль);
		
	ОписаниеОшибки = "";
	Соединение = СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка при установке соединения с сайтом.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтветСервера = "";
	
	Успешно = ВыполнитьАвторизациюДляСоединения(ПараметрыПодключения.ПутьНаСервере, Соединение, ОтветСервера,
												ОписаниеОшибки);
		
	Если Успешно Тогда
		
		ТекстСообщения = НСтр("ru = 'Соединение с сайтом успешно установлено.'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить соединение.'") + Символы.ПС + ОписаниеОшибки;
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Загружает заказы с сайта интернет-магазина
//
// Возвращаемое значение
//   Структура - Результат выполнение обмена
//
Функция ЗагрузитьЗаказыИнтернетМагазина() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",            Ложь);
	Результат.Вставить("НастройкаВыполнена", Истина);
	Результат.Вставить("ОписаниеОшибки",     Новый Массив);
	Результат.Вставить("СтатистикаЗагрузки", НовыйСтатистикаЗагрузки());
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		"Начало выполнения обмена");
		
	НастройкиОбмена = ОбменСИнтернетМагазином.ПолучитьНастройкиОбмена();
	Если НастройкиОбмена = Неопределено Тогда
		Результат.НастройкаВыполнена = Ложь;
		Возврат Результат;
	КонецЕсли;
	
	НастройкиЗагрузки = НастройкиЗагрузки(НастройкиОбмена);
	
	ПараметрыПодключения = ПараметрыПодключения(
		НастройкиОбмена.CMSИнтернетМагазина,
		НастройкиОбмена.АдресСайта,
		НастройкиОбмена.Логин);
		
	ОписаниеОшибки = "";
	Соединение = СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеСеанса = ВыполнитьЗапросИнициализацияОбмена(Соединение, ПараметрыПодключения, НастройкиЗагрузки, ОписаниеОшибки);
	Если ДанныеСеанса = Неопределено Тогда
		Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	СтрокаXML = ВыполнитьЗапросПолучитьДанные(Соединение, ДанныеСеанса, ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаXML) Тогда
		
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		
		Возврат Результат;
		
	КонецЕсли;

	Если ЗагрузитьЗаказы(СтрокаXML, Результат.СтатистикаЗагрузки, НастройкиЗагрузки, ОписаниеОшибки) Тогда 
		
		Если ВыполнитьЗапросЗавершениеЗагрузки(Соединение, ДанныеСеанса, ОписаниеОшибки) Тогда
			Результат.Успешно = Истина;
		Иначе
			ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
			Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не удалось обработать документы, загруженные с сервера.'");
		Результат.ОписаниеОшибки.Добавить(ТекстСообщения);
		Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,,,
		"Завершение выполнения обмена");
	
	Возврат Результат;
	
КонецФункции

// Загружает файл обмена с сайта интернет-магазина без отпраки подтверждения на сайт
//
// Возвращаемое значение
//   Структура - Результат выполнение обмена
//
Функция ПолучитьФайлОбменаСИнтернетМагазином() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФайлОбменаВоВременномХранилище");
	Результат.Вставить("ОписаниеОшибки",     Новый Массив);
	
	НастройкиОбмена = ОбменСИнтернетМагазином.ПолучитьНастройкиОбмена();
	Если НастройкиОбмена = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НастройкиЗагрузки = НастройкиЗагрузки(НастройкиОбмена);
	
	ПараметрыПодключения = ПараметрыПодключения(
		НастройкиОбмена.CMSИнтернетМагазина,
		НастройкиОбмена.АдресСайта,
		НастройкиОбмена.Логин);
		
	ОписаниеОшибки = "";
	Соединение = СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	ДанныеСеанса = ВыполнитьЗапросИнициализацияОбмена(Соединение, ПараметрыПодключения, НастройкиЗагрузки, ОписаниеОшибки);
	Если ДанныеСеанса = Неопределено Тогда
		Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		Возврат Результат;
	КонецЕсли;
	
	СтрокаXML = ВыполнитьЗапросПолучитьДанные(Соединение, ДанныеСеанса, ОписаниеОшибки);
	
	Если НЕ ЗначениеЗаполнено(СтрокаXML) Тогда
		
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		Результат.ОписаниеОшибки.Добавить(ОписаниеОшибки);
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПотокВПамяти = Новый ПотокВПамяти();
	Текст = Новый ЗаписьТекста(ПотокВПамяти);
	Текст.Записать(СтрокаXML);
	Текст.Закрыть();
	
	Результат.ФайлОбменаВоВременномХранилище = ПоместитьВоВременноеХранилище(ПотокВПамяти.ЗакрытьИПолучитьДвоичныеДанные(), Новый УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

// Сопоставляет переданный идентификатор интернет-магазина контрагенту в базе
//
// Параметры:
//  Идентификатор - строка
//
// Возвращаемое значение
//   СправочникСсылка.Контрагенты, Неопределено - Контрагент, соответствующий идентифкатору
//
Функция КонтрагентПоИдентификаторуМагазина(Идентификатор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Первые 1
	|	КонтрагентыИнтернетМагазина.Контрагент
	|ИЗ
	|	РегистрСведений.КонтрагентыИнтернетМагазина КАК КонтрагентыИнтернетМагазина
	|ГДЕ
	|	КонтрагентыИнтернетМагазина.ИдентификаторКонтрагента = &ИдентификаторКонтрагента";
	
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Контрагент;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Сопоставляет переданный идентификатор интернет-магазина контрагенту в базе
//
// Параметры:
//  Идентификатор - строка
//
// Возвращаемое значение
//   СправочникСсылка.Контрагенты, Неопределено - Контрагент, соответствующий идентифкатору
//
Функция СпособДоставкиПоИдентификаторуМагазина(Идентификатор, Наименование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА СлужбыДоставкиИнтернетМагазина.НаименованиеСлужбыДоставки = &НаименованиеСлужбыДоставки
	|				И СлужбыДоставкиИнтернетМагазина.ИдентификаторСлужбыДоставки = &ИдентификаторСлужбыДоставки
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порядок,
	|	СлужбыДоставкиИнтернетМагазина.СпособДоставки КАК СпособДоставки
	|ИЗ
	|	РегистрСведений.СлужбыДоставкиИнтернетМагазина КАК СлужбыДоставкиИнтернетМагазина
	|ГДЕ
	|	(СлужбыДоставкиИнтернетМагазина.НаименованиеСлужбыДоставки = &НаименованиеСлужбыДоставки
	|			ИЛИ СлужбыДоставкиИнтернетМагазина.ИдентификаторСлужбыДоставки = &ИдентификаторСлужбыДоставки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ";
	
	Запрос.УстановитьПараметр("ИдентификаторСлужбыДоставки", Идентификатор);
	Запрос.УстановитьПараметр("НаименованиеСлужбыДоставки", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СпособДоставки;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


// Создает контрагента и подчиненные справочники по полученным из интернет-магазина данным о контрагенте
//
// Параметры:
//  ДанныеКонтрагента - Структура - Значения данных контрагента и данные подчиненных справочников
//     * ЮрЛицо - Булево - Признак Юр.лицо/физ.лицо
//     * ОфициальноеНаименование - Строка - Наименование контрагента Юр.Лица
//     * ФИО - Строка - ФИО физлица
//     * НаименованиеПолное - Строка - полное наименование контрагента
//     * КонтактнаяИнформация - ТаблицаЗначений - Количество обработанных заказов
//       ** Вид           - Строка - Представление вида контактной информации
//       ** Представление - Строка - Представление вида контактной информации
//     * РасчетныеСчета - Массив - Массив структур
//       ** БИК        - Строка - БИК банка
//       ** НомерСчета - Строка - Номер счета в банке
//     * КонтактныеЛица - Массив -  Массив структур
//       **КонтактноеЛицо - Строка - Наименование контактного лица
//  ГруппаКонтрагента - СправочникСсылка.Контрагенты - Группа контрагента
//
// Возвращаемое значение
//   СправочникСсылка.Контрагенты - Созданный контрагент
//
Функция СоздатьКонтрагента(Знач ДанныеКонтрагента, Знач Организация, Знач ГруппаКонтрагента) Экспорт
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(Неопределено);
	
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	НовыйКонтрагент.Родитель = ГруппаКонтрагента;
	
	Если ДанныеКонтрагента.ЮрЛицо Тогда
		НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		НовыйКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДанныеКонтрагента.ОфициальноеНаименование) Тогда
			НовыйКонтрагент.НаименованиеПолное = ДанныеКонтрагента.ОфициальноеНаименование;
	ИначеЕсли НЕ ДанныеКонтрагента.ЮрЛицо
			И НЕ ПустаяСтрока(ДанныеКонтрагента.ФИО) Тогда
			НовыйКонтрагент.НаименованиеПолное = ДанныеКонтрагента.ФИО;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НовыйКонтрагент.НаименованиеПолное) Тогда
		НовыйКонтрагент.Наименование = НовыйКонтрагент.НаименованиеПолное;
	КонецЕсли;
	
	Если ПустаяСтрока(НовыйКонтрагент.Наименование) Тогда
		НовыйКонтрагент.Наименование = Нстр("ru = 'Розничный покупатель'");
	КонецЕсли;
	
	ЗаполненЮрАдрес = Ложь;
	ЗаполненФактАдрес = Ложь;
	Для Каждого СтрокаИнформации Из ДанныеКонтрагента.КонтактнаяИнформация Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег("ФактическийАдрес'") Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			ЗаполненФактАдрес = Истина;
		ИначеЕсли ВРег(СтрокаИнформации.Вид) = ВРег("ЮридическийАдрес") Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Адрес,
			                             СтрокаИнформации.Представление);
										 
			ЗаполненЮрАдрес = Истина;
		ИначеЕсли ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонРабочий")
				ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонВнутренний")
				ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонМобильный")
				ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонДомашний")Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,
			                             Перечисления.ТипыКонтактнойИнформации.Телефон,
			                             СтрокаИнформации.Представление);
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) = ВРег("Почта")
			ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ЭлектроннаяПочта") Тогда
			
			ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
			                             Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты,
			                             Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,
			                             СтрокаИнформации.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаполненФактАдрес И НЕ ЗаполненЮрАдрес Тогда
		Адрес = НовыйКонтрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, "Вид");
		
		ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		                             Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		                             Перечисления.ТипыКонтактнойИнформации.Адрес,
		                             Адрес.Представление);
	ИначеЕсли ЗаполненЮрАдрес И НЕ ЗаполненФактАдрес Тогда
		Адрес = НовыйКонтрагент.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента, "Вид");
		
		ДобавитьКонтактнуюИнформацию(НовыйКонтрагент,
		                             Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,
		                             Перечисления.ТипыКонтактнойИнформации.Адрес,
		                             Адрес.Представление);
	КонецЕсли;
	
	НовыйКонтрагент.Записать();
	
	ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(НовыйКонтрагент.Ссылка, ДанныеКонтрагента, Организация);
	
	Возврат НовыйКонтрагент.Ссылка;
	
КонецФункции

// Сопоставляет переданные идентификаторы интернет-магазина номенклатуре в базе
//
// Параметры:
//  МассивИдентификаторов - Массив - Массив строк идентификаторов
//
// Возвращаемое значение
//   ТаблицаЗначений - Список сопоставленной номенклатуры с идентифкаторами
//      * Ссылка        - СправочникСсылка.Номенклатура - Номенклатура, соотв. идентифкатору
//      * Идентификатор - Строка - Переданный идентификатор
//
Функция НоменклатураПоИдентификаторамМагазина(МассивИдентификаторов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураИнтернетМагазина.Номенклатура КАК Номенклатура,
	|	НоменклатураИнтернетМагазина.ИдентификаторНоменклатуры КАК Идентификатор
	|ИЗ
	|	РегистрСведений.НоменклатураИнтернетМагазина КАК НоменклатураИнтернетМагазина
	|ГДЕ
	|	НоменклатураИнтернетМагазина.ИдентификаторНоменклатуры В(&ИдентификаторыНоменклатуры)";
	
	Запрос.УстановитьПараметр("ИдентификаторыНоменклатуры", МассивИдентификаторов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Создает номенклатуру по полученным из интернет-магазина данным о товаре
//
// Параметры:
//  ДанныеНоменклатуры - Структура - Значения данных о товаре
//     * Услуга        - Булево - Признак Услуга/Товар
//     * Наименование  - Строка - Наименование контрагента Юр.Лица
//     * Единица       - Структура - Данные единицы измерения
//       ** Код        - Строка - Код единицы измерения по классификатору
//  ЗначенияПоУмолчанию - Структура - см. ОбменСИнтернетМагазином.ПолучитьНастройкиОбмена()
//
// Возвращаемое значение
//   СправочникСсылка.Номенклатура - новый элемент справочника номенклатура
//
Функция СоздатьНоменклатуру(ДанныеНоменклатуры, ЗначенияПоУмолчанию) Экспорт
	
	Номенклатура = Справочники.Номенклатура.СоздатьЭлемент();
	Номенклатура.Заполнить(Неопределено);
	ЗаполнитьЗначенияСвойств(Номенклатура, ДанныеНоменклатуры);
	Номенклатура.НаименованиеПолное   = Номенклатура.Наименование;
	Номенклатура.Родитель             = ЗначенияПоУмолчанию.ГруппаНоменклатуры;
	Номенклатура.НоменклатурнаяГруппа = ЗначенияПоУмолчанию.НоменклатурнаяГруппа;
	Номенклатура.ВидНоменклатуры      = ?(ДанныеНоменклатуры.Услуга,
										ЗначенияПоУмолчанию.ВидНоменклатурыУслуга,
										ЗначенияПоУмолчанию.ВидНоменклатуры);
										
	Номенклатура.Услуга = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ВидНоменклатуры, "Услуга");
	
	ЕдиницаИзм = Неопределено;
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Единица.Код) Тогда
		ЕдиницаИзм = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(ДанныеНоменклатуры.Единица.Код);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЕдиницаИзм) И НЕ ДанныеНоменклатуры.Услуга Тогда
		ЕдиницаИзм = ЗначенияПоУмолчанию.ЕдиницаИзмерения;
	КонецЕсли;
	
	Номенклатура.ЕдиницаИзмерения = ЕдиницаИзм;
	Номенклатура.Записать();
	
	Возврат Номенклатура.Ссылка;
	
КонецФункции

Функция ПолучитьНастройкиСайта(НастройкиПодключения) Экспорт
	
	ПараметрыПодключения = ПараметрыПодключения(
		НастройкиПодключения.CMSИнтернетМагазина,
		НастройкиПодключения.АдресСайта,
		НастройкиПодключения.Логин,
		НастройкиПодключения.Пароль);

	НастройкиСайта = Новый Структура;
	НастройкиСайта.Вставить("СпособыОнлайнОплаты", Новый Соответствие);
	НастройкиСайта.Вставить("СлужбыДоставки", Новый Соответствие);
	НастройкиСайта.Вставить("СтатусыЗаказов", Новый Соответствие);
	
	ОписаниеОшибки = "";
	СтрокаXML = ВыполнитьЗапросПолучитьНастройкиСайта(НастройкиПодключения.CMSИнтернетМагазина, ПараметрыПодключения, ОписаниеОшибки);
	
	Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
	Если ТипЗнч(СтрокаXML) <> Тип("Строка")
		ИЛИ ПустаяСтрока(СтрокаXML) Тогда
		Возврат НастройкиСайта;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Статусы" ИЛИ ЧтениеXML.Имя = "Cтатусы" Тогда
			
			//Битрикс возвращает имя узла с английской буквой "С" в слове "Статусы"
			СтатусыЗаказа = ПрочитатьЭлементы(ЧтениеXML, ЧтениеXML.Имя);
			
			Для Каждого СтатусЗаказа Из СтатусыЗаказа Цикл
				
				НастройкиСайта.СтатусыЗаказов.Вставить(СтатусЗаказа.Ид, СтатусЗаказа.Название);
				
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.Имя = "ПлатежныеСистемы" Тогда
			
			ПлатежныеСистемы = ПрочитатьЭлементы(ЧтениеXML, "ПлатежныеСистемы");
			Для Каждого ПлатежнаяСистема Из ПлатежныеСистемы Цикл
				//Загружаем только платежные системы онлайн-оплаты
				ТипОплаты = "";
				Если НЕ ПлатежнаяСистема.Свойство("ТипОплаты", ТипОплаты)
					ИЛИ ТипОплаты = "Эквайринговая оплата" Тогда
				
					НастройкиСайта.СпособыОнлайнОплаты.Вставить(ПлатежнаяСистема.Ид, ПлатежнаяСистема.Название);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ЧтениеXML.Имя = "СлужбыДоставки" Тогда
			
			СлужбыДоставки = ПрочитатьЭлементы(ЧтениеXML, "СлужбыДоставки");
			Для Каждого СлужбаДоставки Из СлужбыДоставки Цикл
					
					НастройкиСайта.СлужбыДоставки.Вставить(СлужбаДоставки.Ид, СлужбаДоставки.Название);
					
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат НастройкиСайта;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Подключение
Функция ПолучитьДанныеССервера(Соединение, СтрокаЗапроса, Заголовки = "", ОписаниеОшибки = "")
	
	ЗаголовокHTTP = Новый Соответствие();
	Если СтрНайти(Заголовки,"Cookie: ")<>0 Тогда
		ЗаголовокHTTP.Вставить("Cookie", Сред(Заголовки, 8 + СтрНайти(Заголовки,"Cookie: ")));
	КонецЕсли;
	
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаЗапроса, ЗаголовокHTTP);
	Попытка
		HTTPОтветСервера = Соединение.Получить(HTTPЗапрос);
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(
			НСтр("ru = 'Не удалось получить данные с сайта. 
				|Проверьте правильность адреса сервера, порт,'")
				+ Символы.ПС
				+ НСтр("ru = 'а также настройки подключения к Интернет.'")));
		
		Возврат Неопределено;
	
	КонецПопытки;
	
	Если HTTPОтветСервера.КодСостояния<>200 Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка получения данных с сайта. Ответ сервера: '" + HTTPОтветСервера.КодСостояния));
		Возврат Неопределено;
	КонецЕсли;
	
	ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку();
	
	Если Не ЗначениеЗаполнено(ОтветСервера) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(НСтр("ru = 'Ошибка получения данных с сайта. Получен пустой ответ от сервера'")));
		Возврат Неопределено;
	КонецЕсли;
	
	// перекодирование используем только при появлении "заменяющего символа"
	НомерПопытки = 1;
	Пока СтрНайти(ОтветСервера,"�")>0 И НомерПопытки<=5 Цикл
		
		Если НомерПопытки = 1 Тогда
			ContentType = HTTPОтветСервера.Заголовки.Получить("Content-Type");
			Если ContentType <> Неопределено Тогда
				СписокПараметров = СтрРазделить(ContentType, ";", Ложь);
				Для Каждого Параметр Из СписокПараметров Цикл
					Если Найти(Параметр, "charset=") > 0 Тогда
						Кодировка = СтрЗаменить(Параметр, "charset=", "");
						ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(Кодировка);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли НомерПопытки = 2 Тогда
			
			ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку("UTF-8");
			
		ИначеЕсли НомерПопытки = 3 Тогда
			
			ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку("windows-1251");
			
		ИначеЕсли НомерПопытки = 4 Тогда
			
			Кодировка = HTTPОтветСервера.Заголовки.Получить("Encoding");
			Если Кодировка <> Неопределено И НЕ ПустаяСтрока(Кодировка) Тогда
				ОтветСервера = HTTPОтветСервера.ПолучитьТелоКакСтроку(Кодировка);
			КонецЕсли;
			
		ИначеЕсли НомерПопытки = 5 Тогда
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось прочитать ответ сервера в указанной кодировке'"+ContentType));
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		НомерПопытки = НомерПопытки + 1;
	КонецЦикла;
	
	Возврат ОтветСервера;
	
КонецФункции

Функция ВыполнитьАвторизациюДляСоединения(ПутьНаСервере, Соединение, ОтветСервераАвторизация, ОписаниеОшибки)
	
	
	ТекстЗапроса = ПутьНаСервере + "?type=sale&mode=checkauth";
	ОтветСервераАвторизация = ПолучитьДанныеССервера(
		Соединение,
		ТекстЗапроса,
		"",
		ОписаниеОшибки
		);
	
	Если ОтветСервераАвторизация = Неопределено Тогда 
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СокрЛП(НРег(СтрПолучитьСтроку(ОтветСервераАвторизация, 1))) <> "success" Тогда
		//Иногда ответ сервера - это текст, который содержит пояснение ошибки, тогда его можно вывести пользователю
		//Если ответ сервера - это html страница, тогда не выводим
		Если СтрДлина(ОтветСервераАвторизация)<255 И Лев(ОтветСервераАвторизация,15) <> "<!DOCTYPE html>" И СтрНайти(Лев(ОтветСервераАвторизация,255),"<html")=0 Тогда
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервераАвторизация);
		КонецЕсли;
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Авторизация не выполнена.'")
			+ Символы.ПС 
			+ НСтр("ru = 'Не удалось установить соединение с сервером. Проверьте имя пользователя и пароль.'"));
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция АдресСкриптаОбмена(ЗначениеСУС)
	
	Если ЗначениеСУС = Перечисления.CMSИнтернетМагазина.Bitrix Тогда
		АдресСкрипта = "/bitrix/admin/1c_exchange.php";
	ИначеЕсли ЗначениеСУС = Перечисления.CMSИнтернетМагазина.UMI Тогда
		АдресСкрипта = "/admin/exchange/autoimport/";
	Иначе
		АдресСкрипта = "";
	КонецЕсли;
	
	Возврат АдресСкрипта;
	
КонецФункции

Функция СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки)
	
	Соединение = Неопределено;
	
	Попытка
		
		ssl = ?(ПараметрыПодключения.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
			
		Соединение = Новый HTTPСоединение(
			ПараметрыПодключения.ИмяСервера,
			ПараметрыПодключения.Порт,
			ПараметрыПодключения.Логин,
			ПараметрыПодключения.Пароль,
			ПараметрыПодключения.Прокси,
			1800,
			ssl
		);
		
	Исключение
		
		ОписаниеОшибки = ОписаниеИсключительнойОшибки(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось установить соединение с сервером %1:%2. Проверьте правильность адреса сервера, порт, имя пользователя и пароль.'"),
					ПараметрыПодключения.ИмяСервера,
					ПараметрыПодключения.Порт));
					
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		
		Соединение = Неопределено;
			
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция НастройкиЗагрузки(НастройкиОбмена)
	
	НастройкиЗагрузки = Новый Структура;
	НастройкиЗагрузки.Вставить("CMSИнтернетМагазина");
	НастройкиЗагрузки.Вставить("ЗапрещенныеСтатусы");
	НастройкиЗагрузки.Вставить("ГруппаНоменклатуры");
	НастройкиЗагрузки.Вставить("ГруппаКонтрагентов");
	НастройкиЗагрузки.Вставить("ВидНоменклатуры");
	НастройкиЗагрузки.Вставить("НоменклатурнаяГруппа");
	НастройкиЗагрузки.Вставить("Организация");
	НастройкиЗагрузки.Вставить("Склад");
	НастройкиЗагрузки.Вставить("Префикс");
	НастройкиЗагрузки.Вставить("СоздаватьНовыхКонтрагентов");
	НастройкиЗагрузки.Вставить("СоздаватьНовуюНоменклатуру");
	НастройкиЗагрузки.Вставить("ИспользоватьОтборПоСтатусам");
	НастройкиЗагрузки.Вставить("ДатаНачалаОбмена");
	НастройкиЗагрузки.Вставить("ЗагружатьОнлайнОплаты");
	НастройкиЗагрузки.Вставить("ЗагружатьСпособыДоставки");
	НастройкиЗагрузки.Вставить("ПолныйПрефиксДокумента");
	НастройкиЗагрузки.Вставить("ЕдиницаИзмерения");
	НастройкиЗагрузки.Вставить("ВидНоменклатурыУслуга");
	НастройкиЗагрузки.Вставить("ВидыОнлайнОплатСоответствие");
	НастройкиЗагрузки.Вставить("СпособыДоставкиСоответствие");
	
	ЗаполнитьЗначенияСвойств(НастройкиЗагрузки, НастройкиОбмена);
	
	ПрефиксСайта = НастройкиОбмена.Префикс;
	ПрефиксСайта = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксСайта, 2, "0", "Слева");
	
	ПрефиксОрганизации ="";
	ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(НастройкиОбмена.Организация, ПрефиксОрганизации);
	ПрефиксОрганизации = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ПрефиксОрганизации, 2, "0", "Слева");
	
	НастройкиЗагрузки.ПолныйПрефиксДокумента = ПрефиксОрганизации + ПрефиксСайта;
	
	ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПолучитьЕдиницуИзмеренияПоУмолчанию();
	НастройкиЗагрузки.ЕдиницаИзмерения = ЕдиницаИзмерения;
	
	НастройкиЗагрузки.ВидНоменклатурыУслуга = Справочники.ВидыНоменклатуры.ЭлементВидНоменклатурыПоУмолчанию(Истина);
	
	НастройкиОбмена.ЗагружатьОнлайнОплаты = НастройкиОбмена.ЗагружатьОнлайнОплаты
		И ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПоПлатежнымКартам");
		
	НастройкиОбмена.ЗагружатьСпособыДоставки = НастройкиОбмена.ЗагружатьСпособыДоставки
		И ПолучитьФункциональнуюОпцию("ИспользоватьДоставкуТранспортнойКомпанией");
		
	Если НастройкиОбмена.ЗагружатьОнлайнОплаты Тогда
		НастройкиЗагрузки.ВидыОнлайнОплатСоответствие =
			РегистрыСведений.СпособыОнлайнОплатыИнтернетМагазина.ТаблицаСоответствияВидовОплат(НастройкиЗагрузки.Организация);
	КонецЕсли;
	
	Если НастройкиОбмена.ЗагружатьСпособыДоставки Тогда
		НастройкиЗагрузки.СпособыДоставкиСоответствие =
			РегистрыСведений.СлужбыДоставкиИнтернетМагазина.ТаблицаСоответствияСлужбДоставки(НастройкиЗагрузки.Организация);
	КонецЕсли;
	
	Возврат НастройкиЗагрузки
	
КонецФункции

Функция ПараметрЗапросаHTTP(ИмяПараметра)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Инициализация"			, "&mode=init");
	СтруктураПараметров.Вставить("ПередачаФайла"			, "&mode=file&filename=");
	СтруктураПараметров.Вставить("ИмпортФайлаСервером"		, "&mode=import&filename=");
	СтруктураПараметров.Вставить("ПолучитьДанные"			, "&mode=query");
	СтруктураПараметров.Вставить("УспешноеЗавершениеИмпорта", "&mode=success");
	Возврат СтруктураПараметров[ИмяПараметра];
	
КонецФункции

Функция РаспаковатьZIPАрхив(СтрокаZIP, ОписаниеОшибки)
	
	СтрокаСодержимого = "";
	
	ИмяФайла = ПолучитьИмяВременногоФайла("zip");

	СтрокаВФайл = Новый ТекстовыйДокумент;
	СтрокаВФайл.УстановитьТекст(СтрокаZIP);
	
	Попытка
		
		СтрокаВФайл.Записать(ИмяФайла);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось загрузить архив с заказами: '")
				+ ИмяФайла));
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		
		Возврат "";
		
	КонецПопытки;
	
	ИмяКаталога = ОбщегоНазначения.СоздатьВременныйКаталог();
	
	Попытка
		
		ЧтениеZIP = Новый ЧтениеZIPФайла(ИмяФайла);
		ЧтениеZIP.ИзвлечьВсе(ИмяКаталога);
		ЧтениеZIP.Закрыть();
		
		РаспакованныеФайлы = НайтиФайлы(ИмяКаталога, "*.xml");
		
		Если РаспакованныеФайлы.Количество() = 1 Тогда
			
			КодировкаXML = КодировкаФайла(РаспакованныеФайлы[0].ПолноеИмя);
			
			СтрокаИзФайла = Новый ТекстовыйДокумент;
			СтрокаИзФайла.Прочитать(РаспакованныеФайлы[0].ПолноеИмя, КодировкаXML);
			СтрокаСодержимого = СтрокаИзФайла.ПолучитьТекст();
			
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		ОбщегоНазначения.УдалитьВременныйКаталог(ИмяКаталога);
		
	Исключение
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(НСтр("ru = 'Не удалось распаковать архив с заказами: '")
				+ ИмяФайла));
				
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		
		ОбщегоНазначения.УдалитьВременныйКаталог(ИмяКаталога);
				
		Возврат "";
		
	КонецПопытки;
	
	Возврат СтрокаСодержимого;
	
КонецФункции

Функция КодировкаФайла(ИмяФайла)

	КодировкаXML = "UTF-8";
	
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ЧтениеXML.Прочитать();
		КодировкаXML = ЧтениеXML.КодировкаXML;
	Исключение
	КонецПопытки;
	ЧтениеXML.Закрыть();
	
	Возврат КодировкаXML;

КонецФункции

Функция ВыполнитьЗапросПолучитьНастройкиСайта(CMSИнтернетМагазина, ПараметрыПодключения, ОписаниеОшибки)
	
	Соединение = СоединениеССервером(ПараметрыПодключения, ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Ошибка при установке соединения с сайтом.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ОтветСервера = "";
	Если НЕ ВыполнитьАвторизациюДляСоединения(ПараметрыПодключения.ПутьНаСервере, Соединение, ОтветСервера, ОписаниеОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КукиИмя				= СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение		= СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов	= "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	Если CMSИнтернетМагазина = Перечисления.CMSИнтернетМагазина.Bitrix Тогда
		Токен = ДобавитьТокенБитрикс(ОтветСервера);
		ПараметрыСкрипта = "?type=sale&mode=info";
		
		СтрокаЗапроса = ПараметрыПодключения.ПутьНаСервере + ПараметрыСкрипта + Токен;
	Иначе
		СтрокаЗапроса = "/admin/exchange/orderSettings/";
	КонецЕсли;
	
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		СтрокаЗапроса,
		ЗаголовкиЗапросов,
		ОписаниеОшибки
	);
	
	Если ОтветСервера = Неопределено Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось загрузить настройки сайта:
			|От сервере не получен ответ на запрос info'"));
		Возврат "";
	КонецЕсли;
	
	СтрокаXML = "";
	
	Если Лев(ОтветСервера, 2) = "PK" Тогда
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервера, ОписаниеОшибки);
	Иначе
		Если Лев(ОтветСервера, 5) = "<?xml" Тогда
			СтрокаXML = ОтветСервера;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрокаXML;
	
КонецФункции

Функция НовыйПараметрыПодключения()
	
	Результат = Новый Структура;
	Результат.Вставить("Логин");
	Результат.Вставить("Пароль");
	Результат.Вставить("ИмяСервера");
	Результат.Вставить("Хост");
	Результат.Вставить("Схема");
	Результат.Вставить("Порт");
	Результат.Вставить("Прокси");
	Результат.Вставить("ПутьНаСервере");
	Результат.Вставить("ЗащищенноеСоединение", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаЗаказа

// Выполняет загрузку заказов.
//
// Параметры:
//	ДанныеЗаказов		- строка для записи xml или ОбъектXDTO
//	СтруктураСтатистики	- Структура
//	Параметры			- Структура, основные параметры
//	ОписаниеОшибки		- Строка
//
// Возвращаемое значение:
//	Булево				- Истина, если успех.
//
Функция ЗагрузитьЗаказы(ДанныеЗаказов, СтатистикаЗагрузки, Параметры, ОписаниеОшибки)
	
	Если ТипЗнч(ДанныеЗаказов) = Тип("ОбъектXDTO") Тогда
		ЗаказыXDTO = ДанныеЗаказов;
	Иначе
		ЗаказыXDTO = ПолучитьЗаказыXDTO(ДанныеЗаказов, Параметры, ОписаниеОшибки);
	КонецЕсли;
	
	Если ЗаказыXDTO = Неопределено Тогда 
		
		Возврат Ложь;
		
	ИначеЕсли НЕ ОбъектXDTOСодержитСвойство(ЗаказыXDTO, "Документ") Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не найдено документов для обработки.'"));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ОписаниеОшибки);
		Возврат Истина;
		
	КонецЕсли;
	
	МассивЗаказовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗаказыXDTO.Документ);
	
	ЗагружаемыеЗаказы = СопоставитьЗагружаемыеЗаказыИОплаты(МассивЗаказовXDTO, Параметры);
	
	Успешно = СоздатьОбновитьЗаказы(ЗагружаемыеЗаказы, СтатистикаЗагрузки, Параметры, ОписаниеОшибки);
	
	Возврат Успешно;
	
КонецФункции

// Создает на основании XML объект XDTO.
//
// Параметры:
//	СтрокаXML - объект чтения XML
//	Параметры - структура
//	ОписаниеОшибки - строка
//
// Возвращаемое значение:
//	ОбъектXDTO.
//
Функция ПолучитьЗаказыXDTO(СтрокаXML, Параметры, ОписаниеОшибки)
	
	ОбъектXML = Новый ЧтениеXML();
	
	Попытка
		
		ОбъектXML.УстановитьСтроку(СтрокаXML);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось разобрать строку XML'");
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ТекстОшибки));
		
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Попытка
		
		КоммерческаяИнформацияXDTO = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать XML'");
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			ОписаниеИсключительнойОшибки(ТекстОшибки));
		
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат КоммерческаяИнформацияXDTO;
	
КонецФункции

// Получает заказы, ранее загруженные с сайта.
//
// Параметры:
//	МассивЗаказовXDTO - массив - данные загружаемых документов
//	Параметры - Структура - см. результат функции НастройкиЗагрузки()
//
// Возвращаемое значение
//	Таблица значений
//
Функция СопоставитьЗагружаемыеЗаказыИОплаты(МассивЗаказовXDTO, Параметры)
	
	ТипНомер = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Метаданные.Документы.СчетНаОплатуПокупателю.ДлинаНомера)); 
	
	ТаблицаЗаказов = Новый ТаблицаЗначений;
	ТаблицаЗаказов.Колонки.Добавить("НомерДокумента",           ТипНомер);
	ТаблицаЗаказов.Колонки.Добавить("НомерЗаказа",              ТипНомер);
	ТаблицаЗаказов.Колонки.Добавить("ДатаЗаказа",               Новый ОписаниеТипов("Дата"));
	ТаблицаЗаказов.Колонки.Добавить("ДатаЗаказаГод",            Новый ОписаниеТипов("Дата"));
	ТаблицаЗаказов.Колонки.Добавить("ПредставлениеЗаказаСайта", Новый ОписаниеТипов("Строка"));
	
	ТаблицаЗаказов.Колонки.Добавить("ДокументXDTO");
	ТаблицаЗаказов.Колонки.Добавить("СчетНаОплатуПокупателю", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
	ТаблицаЗаказов.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	ТаблицаЗаказов.Колонки.Добавить("ДокументСуществует", Новый ОписаниеТипов("Булево"));
	
	Для каждого ДокументXDTO Из МассивЗаказовXDTO Цикл
		ДатаЗаказа = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата);
		Если ДатаЗаказа < Параметры.ДатаНачалаОбмена Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаказа = ТаблицаЗаказов.Добавить();
		ДанныеЗаказа.НомерДокумента = ПолучитьНомерЗаказаССайта(ДокументXDTO.Номер, Параметры);
		ДанныеЗаказа.НомерЗаказа = ДокументXDTO.Номер;
		ДанныеЗаказа.ДатаЗаказа = ДатаЗаказа;
		ДанныеЗаказа.ДатаЗаказаГод = НачалоГода(ДатаЗаказа);
		ДанныеЗаказа.ДокументXDTO = ДокументXDTO;
		ДанныеЗаказа.ПредставлениеЗаказаСайта = СтрШаблон(НСтр("ru = 'Заказ №%1 от %2'"),
															ДанныеЗаказа.НомерЗаказа,
															ДанныеЗаказа.ДатаЗаказа);
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДанныеЗаказов", ТаблицаЗаказов.Скопировать(, "НомерДокумента, НомерЗаказа, ДатаЗаказа, ДатаЗаказаГод"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЗаказов.НомерДокумента КАК НомерДокумента,
	|	ДанныеЗаказов.НомерЗаказа КАК НомерЗаказа,
	|	ДанныеЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	ДанныеЗаказов.ДатаЗаказаГод КАК ДатаЗаказаГод
	|ПОМЕСТИТЬ ДанныеЗаказов
	|ИЗ
	|	&ДанныеЗаказов КАК ДанныеЗаказов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка,
	|	СчетНаОплатуПокупателю.Номер КАК НомерДокумента,
	|	СчетНаОплатуПокупателю.ПометкаУдаления КАК ПометкаУдаления,
	|	НАЧАЛОПЕРИОДА(СчетНаОплатуПокупателю.Дата, ГОД) КАК ДатаДокументаГод
	|ПОМЕСТИТЬ СчетаПокупателю
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Организация = &Организация
	|	И СчетНаОплатуПокупателю.Номер В
	|			(ВЫБРАТЬ
	|				ДанныеЗаказов.НомерДокумента
	|			ИЗ
	|				ДанныеЗаказов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеЗаказов.НомерЗаказа КАК НомерЗаказа,
	|	ДанныеЗаказов.НомерДокумента КАК НомерДокумента,
	|	ДанныеЗаказов.ДатаЗаказа КАК ДатаЗаказа,
	|	СчетаПокупателю.Ссылка КАК СчетНаОплатуПокупателю,
	|	СчетаПокупателю.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ДанныеЗаказов КАК ДанныеЗаказов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаПокупателю КАК СчетаПокупателю
	|		ПО (СчетаПокупателю.НомерДокумента = ДанныеЗаказов.НомерДокумента)
	|			И (СчетаПокупателю.ДатаДокументаГод = ДанныеЗаказов.ДатаЗаказаГод)";
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	НайденныеЗаказы = Запрос.Выполнить().Выбрать();
	
	ТаблицаЗаказов.Индексы.Добавить("НомерЗаказа, ДатаЗаказа");
	
	Пока НайденныеЗаказы.Следующий() Цикл
		Отбор = Новый Структура("НомерЗаказа, ДатаЗаказа", НайденныеЗаказы.НомерЗаказа, НайденныеЗаказы.ДатаЗаказа);
		Заказ = ТаблицаЗаказов.НайтиСтроки(Отбор)[0];
		Заказ.СчетНаОплатуПокупателю   = НайденныеЗаказы.СчетНаОплатуПокупателю;
		Заказ.ПометкаУдаления          = НайденныеЗаказы.ПометкаУдаления;
		Заказ.ДокументСуществует       = Истина;
	КонецЦикла;
	
	Возврат ТаблицаЗаказов;
	
КонецФункции

Функция СведенияОНалогахЗаказа(ДокументXDTO)
	
	СведенияОНалогах = Новый Структура("СтавкаНДС,СуммаВключаетНДС", Неопределено, Ложь);
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Налоги")
			И ДокументXDTO.Налоги <> Неопределено
			И ОбъектXDTOСодержитСвойство(ДокументXDTO.Налоги, "Налог") Тогда
			
			НалогиXDTO = ДокументXDTO.Налоги.Налог;
			МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
			
			Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
						СведенияОНалогах.СтавкаНДС = ПолучитьСтавкуНДСПеречислением(НалогXDTO.Ставка);
					КонецЕсли;
					
					Если ОбъектXDTOСодержитСвойство(НалогXDTO, "УчтеноВСумме") Тогда
						СведенияОНалогах.СуммаВключаетНДС = НалогXDTO.УчтеноВСумме = Истина ИЛИ НРег(НалогXDTO.УчтеноВСумме) = "true";
					КонецЕсли;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
	КонецЕсли;
	
	Возврат СведенияОНалогах;
	
КонецФункции

Процедура ЗаполнитьКонтрагентаВЗаказе(ДокументОбъект, ДокументXDTO, Параметры)
	
	Если ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКонтрагента = ЗаполнитьДанныеКонтрагента(ДокументXDTO);
	
	Контрагент = КонтрагентПоИдентификаторуМагазина(ДанныеКонтрагента.Идентификатор);
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = КонтрагентПоДаннымИнтернетМагазина(ДанныеКонтрагента);
		Если ЗначениеЗаполнено(Контрагент) Тогда
			РегистрыСведений.КонтрагентыИнтернетМагазина.УстановитьСоответствие(ДанныеКонтрагента.Идентификатор, Контрагент);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Если Параметры.СоздаватьНовыхКонтрагентов Тогда
			Контрагент = СоздатьКонтрагента(ДанныеКонтрагента, Параметры.Организация, Параметры.ГруппаКонтрагентов);
			РегистрыСведений.КонтрагентыИнтернетМагазина.УстановитьСоответствие(ДанныеКонтрагента.Идентификатор, Контрагент);
		Иначе
			Параметры.Вставить("ДанныеКонтрагента", ДанныеКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДокументОбъект.Контрагент = Контрагент;
		
		РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
			ДокументОбъект.ДоговорКонтрагента,
			ДокументОбъект.Контрагент,
			ДокументОбъект.Организация,
			Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;
	
	Если Параметры.ЗагружатьОнлайнОплаты
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам")
		И Не ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора",  Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ПараметрыДоговора.Вставить("Организация",  ДокументОбъект.Организация);
		ПараметрыДоговора.Вставить("Владелец",     ДокументОбъект.Контрагент);
		ПараметрыДоговора.Вставить("Наименование", НСтр("ru='Без договора'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
		
		ДокументОбъект.ДоговорКонтрагента =
		РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОСпособеДоставки(ДокументОбъект, СвойстваЗаказа, ПараметрыЗаказа)
	
	Если НЕ ПараметрыЗаказа.ЗагружатьСпособыДоставки Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСлужбыДоставки = "";
	НаименованиеСлужбыДоставки = "";
	Если СвойстваЗаказа.Получить("Способ доставки ИД") <> Неопределено Тогда
		ИдентификаторСлужбыДоставки = СвойстваЗаказа.Получить("Способ доставки ИД");
	ИначеЕсли СвойстваЗаказа.Получить("Метод доставки ИД") <> Неопределено Тогда
		ИдентификаторСлужбыДоставки = СвойстваЗаказа.Получить("Метод доставки ИД");
	КонецЕсли;
	
	Если СвойстваЗаказа.Получить("Способ доставки") <> Неопределено Тогда
		НаименованиеСлужбыДоставки = СвойстваЗаказа.Получить("Способ доставки");
	ИначеЕсли СвойстваЗаказа.Получить("Метод доставки") <> Неопределено Тогда
		НаименованиеСлужбыДоставки = СвойстваЗаказа.Получить("Метод доставки");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСлужбыДоставки) Тогда
		
		СпособДоставкиСопоставленный = ПараметрыЗаказа.СпособыДоставкиСоответствие.Найти(ИдентификаторСлужбыДоставки, "ИдентификаторСлужбыДоставки");
		
	ИначеЕсли ЗначениеЗаполнено(НаименованиеСлужбыДоставки) Тогда
		
		СпособДоставкиСопоставленный = ПараметрыЗаказа.СпособыДоставкиСоответствие.Найти(НаименованиеСлужбыДоставки, "НаименованиеСлужбыДоставки");
		
	КонецЕсли;
	
	Если СпособДоставкиСопоставленный <> Неопределено И ЗначениеЗаполнено(СпособДоставкиСопоставленный.СпособДоставки) Тогда
		
		ДокументОбъект.СпособДоставки = СпособДоставкиСопоставленный.СпособДоставки;
		
	Иначе
		
		ДокументОбъект.СпособДоставки = Справочники.СпособыДоставки.Самовывоз;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетПоДаннымДокументаXDTO(Заказ, СвойстваЗаказа, Параметры)
	
	ДокументXDTO = Заказ.ДокументXDTO;
	
	ВремяСтрока = "";
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Время") Тогда
		ВремяСтрока = ДокументXDTO.Время;
	КонецЕсли;
	
	ДатаДокумента = ПолучитьДатуВремяИзСтроки(ДокументXDTO.Дата, ВремяСтрока);
	
	СведенияОНалогах = СведенияОНалогахЗаказа(ДокументXDTO);
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Параметры.Организация, ДатаДокумента);
	
	Если НЕ ЗначениеЗаполнено(СведенияОНалогах.СтавкаНДС) Тогда
		СведенияОНалогах.СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ДатаДокумента, ПлательщикНДС);
	КонецЕсли;
	
	Если НЕ Заказ.ДокументСуществует Тогда
		
		ДокументОбъект = Документы.СчетНаОплатуПокупателю.СоздатьДокумент();
		
		ДокументОбъект.Номер       = Заказ.НомерДокумента;
		ДокументОбъект.Дата        = ДатаДокумента;
		ДокументОбъект.Организация = Параметры.Организация;
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументОбъект.Заполнить(Параметры);
		
		ДокументОбъект.ОрганизацияПолучатель = Параметры.Организация;
		ДокументОбъект.Склад                 = Параметры.Склад;
		ДокументОбъект.ВалютаДокумента       = ОбработатьВалютуXML(ДокументXDTO.Валюта);
	
		КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.КурсВзаиморасчетов      = КурсНаДату.Курс;
		ДокументОбъект.КратностьВзаиморасчетов = КурсНаДату.Кратность;
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(ДокументОбъект.СтруктурнаяЕдиница,
			Параметры.Организация, ДокументОбъект.ВалютаДокумента);
		
		ДокументОбъект.ДокументБезНДС   = НЕ ПлательщикНДС;
		ДокументОбъект.СуммаВключаетНДС = СведенияОНалогах.СуммаВключаетНДС;
		
	Иначе
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.СчетНаОплатуПокупателю");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Заказ.СчетНаОплатуПокупателю);
		Блокировка.Заблокировать();
		
		ДокументОбъект = Заказ.СчетНаОплатуПокупателю.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
	КонецЕсли;
	
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	ЗаполнитьСведенияОСпособеДоставки(ДокументОбъект, СвойстваЗаказа, Параметры);
	
	ЗаполнитьКонтрагентаВЗаказе(ДокументОбъект, ДокументXDTO, Параметры);
	
	ЗаполнитьТабличнуюЧастьЗаказа(ДокументОбъект, ДокументXDTO, СведенияОНалогах, Параметры);
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "Комментарий") 
		И СвойствоXDTOЗаполнено(ДокументXDTO.Комментарий) Тогда
		ДокументОбъект.Комментарий = СокрЛП(ДокументXDTO.Комментарий);
	КонецЕсли;
	
	Если СвойстваЗаказа.Получить("Комментарий доставки") <> Неопределено Тогда
		Разделитель = ?(ПустаяСтрока(ДокументОбъект.Комментарий),"","; ");
		ДокументОбъект.Комментарий = ДокументОбъект.Комментарий + Разделитель + СвойстваЗаказа.Получить("Комментарий доставки");
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "АдресДоставки") 
		И СвойствоXDTOЗаполнено(ДокументXDTO.АдресДоставки) Тогда
		ДокументОбъект.АдресДоставки = СокрЛП(ДокументXDTO.АдресДоставки);
	ИначеЕсли СвойстваЗаказа.Получить("Адрес доставки") <> Неопределено Тогда
		ДокументОбъект.АдресДоставки = СокрЛП(СвойстваЗаказа.Получить("Адрес доставки"));
	КонецЕсли;
	
	РазрешеноПроведение = Не Параметры.Свойство("ДанныеКонтрагента")
						И Не Параметры.Свойство("ДанныеНоменклатуры");
	
	Если РазрешеноПроведение И ДокументОбъект.ПроверитьЗаполнение() Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЕсли;
	
	ЗаписатьДанныеДляСопоставления(ДокументОбъект.Ссылка, Параметры);
	
	Заказ.СчетНаОплатуПокупателю = ДокументОбъект.Ссылка;
	
КонецПроцедуры

Функция ПолучитьНомерЗаказаССайта(НомерНаСайте, Параметры)
	
	СтрокаДопустимыхСиволов = "1234567890";
	МассивУдаляемыхСимволов = Новый Массив;
	
	НомерНаСайте = СокрЛП(НомерНаСайте);
	Если СтрДлина(НомерНаСайте) > 0 Тогда
		
		Для Сч = 1 по СтрДлина(НомерНаСайте) Цикл
			
			Символ = НРег(Сред(НомерНаСайте, Сч, 1));
			Если Не СтрНайти(СтрокаДопустимыхСиволов, Символ) Тогда
				МассивУдаляемыхСимволов.Добавить(Символ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Символ Из МассивУдаляемыхСимволов Цикл
		НомерНаСайте = СтрЗаменить(НомерНаСайте, Символ, "");
	КонецЦикла;
	
	Возврат Параметры.ПолныйПрефиксДокумента+ "-" + СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерНаСайте, 6, "0", "Слева");
	
КонецФункции

Функция ЗапрещенаЗагрузкаПоСтатусуЗаказа(СтатусЗаказа, ЗапрещенныеСтатусы)
	
	НайденЗапрещенныйСтатус = Ложь;
	
	Если ЗапрещенныеСтатусы.Количество() > 0 Тогда
		
		// Статус Bitrix содержит идентификатор статуса
		ПозицияИд = СтрНайти(СтатусЗаказа,"]");
		СтатусЗаказаБезИд = ?(ПозицияИд = 0, СтатусЗаказа, СокрЛП(Сред(СтатусЗаказа, ПозицияИд+1)));
		Для Каждого Статус из ЗапрещенныеСтатусы Цикл
			Если ВРЕГ(Статус) = ВРЕГ(СтатусЗаказа)
				ИЛИ ВРЕГ(Статус) = ВРЕГ(СтатусЗаказаБезИд) Тогда
				НайденЗапрещенныйСтатус = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НайденЗапрещенныйСтатус;

КонецФункции

Функция ПереданыОбязательныеПоляЗаказа(ДокументXDTO, ОписаниеОшибки)
	
	ПереданыОбязательныеПоляЗаказа = Истина;
	
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "ХозОперация")
		ИЛИ НЕ НРег(ДокументXDTO.ХозОперация) = "заказ товара" Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			СтрШаблон(НСтр("ru = 'Ошибка в заказе № %1. Значение узла <Документ>.<ХозОперация> документа XML (%2). Ожидается ""Заказ товара""'"),
				ДокументXDTO.Номер,
				ДокументXDTO.ХозОперация));
		
		ПереданыОбязательныеПоляЗаказа = Ложь;
		
	КонецЕсли;
		
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Валюта")
		ИЛИ НЕ СвойствоXDTOЗаполнено(ДокументXDTO.Валюта) Тогда
		
		ДобавитьОписаниеОшибки(ОписаниеОшибки,
			СтрШаблон(НСтр("ru = 'Ошибка в заказе № %1. Значение узла <Документ>.<Валюта> документа XML. Валюта должна быть заполнена.'"),
			ДокументXDTO.Номер));
		
		ПереданыОбязательныеПоляЗаказа = Ложь;
		
	КонецЕсли;
	
	Возврат Истина

КонецФункции

Функция ЗаказОтменен(СвойстваЗаказа)
	
	Возврат ВРег(СвойстваЗаказа["Отменен"]) = "ИСТИНА"
					ИЛИ ВРег(СвойстваЗаказа["Отменен"]) = "TRUE";
	
КонецФункции

Функция СоздатьОбновитьЗаказы(ЗаказыКЗагрузке, СтатистикаЗагрузки, Параметры, ОписаниеОшибки)
	
	ЗапрещенныеСтатусы = Параметры.ЗапрещенныеСтатусы.Получить();
	
	Для каждого Заказ Из ЗаказыКЗагрузке Цикл
		
		ДокументXDTO = Заказ.ДокументXDTO;
		
		Если НЕ ПереданыОбязательныеПоляЗаказа(ДокументXDTO, ОписаниеОшибки) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтатистикаЗагрузки.Заказы.Обработано = СтатистикаЗагрузки.Заказы.Обработано + 1;
		
		СвойстваЗаказа = ПрочитатьСвойстваДокумента(ДокументXDTO);
		ЗаказОтменен = ЗаказОтменен(СвойстваЗаказа);
		СтатусЗаказа = СвойстваЗаказа["Статус заказа"];
		Если ЗаказОтменен Тогда
			Если Заказ.ДокументСуществует Тогда
				СтатусыДокументы = РегистрыСведений.СтатусыДокументов.НовыеСтатусыДокумента();
				СтатусыДокументы.Статус = Перечисления.СтатусОплатыСчета.Отменен;
				РегистрыСведений.СтатусыДокументов.УстановитьСтатусыДокумента(Заказ.СчетНаОплатуПокупателю, СтатусыДокументы);
				
				СтатистикаЗагрузки.Заказы.Обновлено.Добавить(Заказ.СчетНаОплатуПокупателю);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
			
		Если Параметры.ИспользоватьОтборПостатусам
				И ЗапрещенаЗагрузкаПоСтатусуЗаказа(СтатусЗаказа, ЗапрещенныеСтатусы) Тогда
				
				Причина = СтрШаблон(НСтр("ru = 'Запрещена загрузка заказов со статусом %1'"), СтатусЗаказа);
				СтатистикаЗагрузки.Заказы.Пропущено.Вставить(Заказ.ПредставлениеЗаказаСайта, Причина);
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,
					Метаданные.Документы.СчетНаОплатуПокупателю,
					,
					Причина);
				
				
			Продолжить;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаполнитьСчетПоДаннымДокументаXDTO(Заказ, СвойстваЗаказа, Параметры);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось записать %1'"), Заказ.ПредставлениеЗаказаСайта);
			
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ОписаниеИсключительнойОшибки(ТекстСообщения));
			
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьОшибкуОбмена(ПодробноеПредставлениеОшибки, Заказ.ПредставлениеЗаказаСайта);
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если НЕ Заказ.ДокументСуществует Тогда
			СтатистикаЗагрузки.Заказы.Создано.Добавить(Заказ.СчетНаОплатуПокупателю);
		Иначе
			СтатистикаЗагрузки.Заказы.Обновлено.Добавить(Заказ.СчетНаОплатуПокупателю);
		КонецЕсли;
		
		Попытка
			ОбновитьСоздатьДополнительныеСведенияЗаказа(Заказ.СчетНаОплатуПокупателю, СвойстваЗаказа, ОписаниеОшибки);
		Исключение
		КонецПопытки;
		
		//Оплата заказа на сайте
		Если Параметры.ЗагружатьОнлайнОплаты
			И ЗначениеЗаполнено(Заказ.СчетНаОплатуПокупателю) Тогда
			
			Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "ПодчиненныеДокументы") Тогда
			
				ПрочитатьПодчиненныеДокументыОплаты(Заказ, СвойстваЗаказа, Параметры.ВидыОнлайнОплатСоответствие, СтатистикаЗагрузки);
				
			Иначе
				
				СоздатьОплатуПоСвойствамЗаказа(Заказ, СвойстваЗаказа, Параметры.ВидыОнлайнОплатСоответствие, СтатистикаЗагрузки);
				
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПрочитатьПодчиненныеДокументыОплаты(Заказ, СвойстваЗаказа, ВидыОнлайнОплатСоответствие, СтатистикаЗагрузки)
	
	ДокументXDTO = Заказ.ДокументXDTO;
	
	МассивПодчиненныхДокументов = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.ПодчиненныеДокументы.ПодчиненныйДокумент);
	
	Для каждого ПодчиненныйДокументXDTO Из МассивПодчиненныхДокументов Цикл
		
		//От сайта принимаем только оплаты с видом "Эквайринговая операция"
		Если НЕ ОбъектXDTOСодержитСвойство(ПодчиненныйДокументXDTO, "ХозОперация")
			ИЛИ НРег(ПодчиненныйДокументXDTO.ХозОперация) <> "эквайринговая операция" Тогда
			Продолжить;
		КонецЕсли;
		
		СвойстваДокументаОплаты = ПрочитатьСвойстваДокумента(ПодчиненныйДокументXDTO);
		
		Если СвойстваДокументаОплаты.Получить("Оплачено") = Неопределено
			ИЛИ СвойстваДокументаОплаты.Получить("Оплачено") = "false"
			ИЛИ Не ЗначениеЗаполнено(ПодчиненныйДокументXDTO.Номер) Тогда
			//оплата не произведена, это пустой шаблон, создавать его в 1С не нужно
			Продолжить;
		КонецЕсли;
		
		СтатистикаЗагрузки.ОнлайнОплаты.Обработано = СтатистикаЗагрузки.ОнлайнОплаты.Обработано + 1;
		
		ОписаниеОшибки = "";
		
		ВидОплаты = ПолучитьВидОплатыПоСвойствамДокумента(СвойстваДокументаОплаты,
			ВидыОнлайнОплатСоответствие,
			ОписаниеОшибки);
			
		Если Не ЗначениеЗаполнено(ВидОплаты) Тогда
			ПредставлениеОплаты = ПредставлениеОплатыПоЗаказу(Заказ);
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать документ: %1'"),ПредставлениеОплаты);
			ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстСообщения);
			
			ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки, ПредставлениеОплаты);
			
			СтатистикаЗагрузки.ОнлайнОплаты.Пропущено.Вставить(ПредставлениеОплаты, ОписаниеОшибки);
			Продолжить;
		КонецЕсли;
		
		СвойстваДокументаОплаты.Вставить("Дата оплаты",                ПодчиненныйДокументXDTO.Дата);
		СвойстваДокументаОплаты.Вставить("Номер платежного документа", ПодчиненныйДокументXDTO.Номер);
		СвойстваДокументаОплаты.Вставить("Сумма",                      ПодчиненныйДокументXDTO.Сумма);
		СвойстваДокументаОплаты.Вставить("Ид",                         ПодчиненныйДокументXDTO.Ид);
		СвойстваДокументаОплаты.Вставить("ВидОплаты",                  ВидОплаты);
		СвойстваДокументаОплаты.Вставить("ПодчиненныйДокумент",        Истина);
		
		НачатьТранзакцию();
		
		Попытка
			
			СоздатьОбновитьДокументОплаты(Заказ, СвойстваДокументаОплаты, СтатистикаЗагрузки);
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОписаниеОшибки = ОписаниеИсключительнойОшибки(ОписаниеОшибки);
			ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
			
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОплатуПоСвойствамЗаказа(Заказ, СвойстваЗаказа, ВидыОнлайнОплатСоответствие, СтатистикаЗагрузки)
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаказа.Получить("Дата оплаты"))
		ИЛИ НЕ ЗначениеЗаполнено(СвойстваЗаказа.Получить("Номер платежного документа"))
		ИЛИ НЕ (ЗначениеЗаполнено(СвойстваЗаказа.Получить("Метод оплаты"))
				ИЛИ ЗначениеЗаполнено(СвойстваЗаказа.Получить("Метод оплаты ИД"))) Тогда
		Возврат;
	КонецЕсли;
	
	СтатистикаЗагрузки.ОнлайнОплаты.Обработано = СтатистикаЗагрузки.ОнлайнОплаты.Обработано + 1;
	
	ОписаниеОшибки = "";
	ВидОплаты = ПолучитьВидОплатыПоСвойствамДокумента(СвойстваЗаказа,
		ВидыОнлайнОплатСоответствие,
		ОписаниеОшибки);
		
	Если Не ЗначениеЗаполнено(ВидОплаты) Тогда
		ПредставлениеОплаты = ПредставлениеОплатыПоЗаказу(Заказ);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось создать документ: %1'"),ПредставлениеОплаты);
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстСообщения);
		
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки, ПредставлениеОплаты);
		
		СтатистикаЗагрузки.ОнлайнОплаты.Пропущено.Вставить(ПредставлениеОплаты, ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ДокументXDTO = Заказ.ДокументXDTO;
	СвойстваЗаказа.Вставить("Сумма",                      ДокументXDTO.Сумма);
	СвойстваЗаказа.Вставить("Ид",                         ДокументXDTO.Ид);
	СвойстваЗаказа.Вставить("ВидОплаты",                  ВидОплаты);
	
	//Загрузка оплат для UMI
	НачатьТранзакцию();
	Попытка
		СоздатьОбновитьДокументОплаты(Заказ, СвойстваЗаказа, СтатистикаЗагрузки);
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьВидОплатыПоСвойствамДокумента(СвойстваДокументаОплаты, ВидыОнлайнОплатСоответствие, ОписаниеОшибки)
	
	ИдентификаторСпособаОплаты = "";
	НаименованиеСпособаОплаты = "";
	Если СвойстваДокументаОплаты.Получить("Метод оплаты ИД") <> Неопределено Тогда
		ИдентификаторСпособаОплаты = СвойстваДокументаОплаты.Получить("Метод оплаты ИД");
	КонецЕсли;
	
	Если СвойстваДокументаОплаты.Получить("Метод оплаты") <> Неопределено Тогда
		НаименованиеСпособаОплаты = СвойстваДокументаОплаты.Получить("Метод оплаты");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеСпособаОплаты)
		ИЛИ ЗначениеЗаполнено(ИдентификаторСпособаОплаты) Тогда
		//Проверим соответствие платежных систем
		НастройкаПлатежнойСистемы = ВидыОнлайнОплатСоответствие.Найти(НаименованиеСпособаОплаты, "НаименованиеСпособаОплаты");
		Если НастройкаПлатежнойСистемы = Неопределено Тогда
			НастройкаПлатежннойСистемы = ВидыОнлайнОплатСоответствие.Найти(ИдентификаторСпособаОплаты, "ИдентификаторСпособаОплаты");
			Если НастройкаПлатежнойСистемы = Неопределено Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В настройках обмена укажите вид онлайн-оплаты для платежной системы ""%1"".'"), 
					НаименованиеСпособаОплаты);
				ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкаПлатежнойСистемы.ВидОплатыПлатежнойКартой;
	
КонецФункции

Функция НайтиОплатыПоСчету(СчетНаОплатуПокупателю, ВидОплаты, НомерЧекаЭТ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОплатаПлатежнойКартой.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартой.Проведен КАК Проведен,
	|	ОплатаПлатежнойКартой.ПометкаУдаления КАК ПометкаУдаления,
	|	ОплатаПлатежнойКартой.НомерЧекаККМ КАК НомерЧекаККМ,
	|	ОплатаПлатежнойКартой.НомерЧекаНПД КАК НомерЧекаНПД
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой КАК ОплатаПлатежнойКартой
	|ГДЕ
	|	ОплатаПлатежнойКартой.ДокументОснование = &ДокументОснование
	|	И ОплатаПлатежнойКартой.ВидОплаты = &ВидОплаты
	|	И ОплатаПлатежнойКартой.НомерЧекаЭТ = &НомерЧекаЭТ
	|	И НЕ ОплатаПлатежнойКартой.ПометкаУдаления";
	Запрос.УстановитьПараметр("ДокументОснование", СчетНаОплатуПокупателю);
	Запрос.УстановитьПараметр("ВидОплаты",         ВидОплаты);
	Запрос.УстановитьПараметр("НомерЧекаЭТ",       НомерЧекаЭТ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура СоздатьОбновитьДокументОплаты(Заказ, СвойстваОплаты, СтатистикаЗагрузки)
	
	ВидОплаты = СвойстваОплаты.Получить("ВидОплаты");
	НомерЧека = СвойстваОплаты.Получить("Номер платежного документа");
	
	ОперацииПоПлатежнымКартам = НайтиОплатыПоСчету(Заказ.СчетНаОплатуПокупателю,
		ВидОплаты,
		НомерЧека);
	
	ЭтоНовыйДокумент = НЕ ЗначениеЗаполнено(ОперацииПоПлатежнымКартам);
	
	Если ЭтоНовыйДокумент И СвойстваОплаты.Получить("Оплачено") = "false" Тогда
		//оплата не оплачена, это пустой шаблон, создавать его в 1С не нужно
		Возврат;
	КонецЕсли;
	
	//Чек уже пробит на фискальном регистраторе
	ЧекПробит = Ложь;
	Для каждого РеквизитыОперации Из ОперацииПоПлатежнымКартам Цикл
		
		ЧекПробит = ЗначениеЗаполнено(РеквизитыОперации.НомерЧекаККМ)
			ИЛИ ЗначениеЗаполнено(РеквизитыОперации.НомерЧекаНПД);
			
		Если ЧекПробит Тогда
			Причина = НСтр("ru = 'Не удалось обновить оплату платежной картой. По документу пробит чек ККМ'");
			СтатистикаЗагрузки.ОнлайнОплаты.Пропущено.Вставить(РеквизитыОперации.Ссылка, Причина);
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,
				Метаданные.Документы.ОплатаПлатежнойКартой,
				РеквизитыОперации.Ссылка,
				Причина);
				
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОперацииПоПлатежнымКартам.Количество() > 1 Тогда
		Для каждого РеквизитыОперации Из ОперацииПоПлатежнымКартам Цикл
			Причина = НСтр("ru = 'С одним заказом связано несколько документов Оплата платежной картой.
				|Необходимо актуализировать данные вручную'");
			СтатистикаЗагрузки.ОнлайнОплаты.Пропущено.Вставить(РеквизитыОперации.Ссылка, Причина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СуммаОплаты = 0;
	ТипЧисло15_3 = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2,ДопустимыйЗнак.Неотрицательный);
	Если ЗначениеЗаполнено(СвойстваОплаты.Получить("Сумма")) Тогда
		СуммаОплаты = ТипЧисло15_3.ПривестиЗначение(СвойстваОплаты.Получить("Сумма"));
		Если СуммаОплаты = 0 Тогда
			
			ТекстОшибки = НСтр("ru = 'В свойствах документа оплаты не задана сумма платежа'");
			
			ПредставлениеОплаты = ПредставлениеОплатыПоЗаказу(Заказ);
			ДобавитьОписаниеОшибки(ТекстОшибки, ПредставлениеОплаты);
			ЗарегистрироватьОшибкуОбмена(ТекстОшибки);
			
			СтатистикаЗагрузки.ОнлайнОплаты.Пропущено.Вставить(ПредставлениеОплаты, ТекстОшибки);
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Если ЭтоНовыйДокумент Тогда
		ДокОперацияПоПлатежнымКартам = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
		ДокОперацияПоПлатежнымКартам.НомерЧекаЭТ = НомерЧека;
		ДокОперацияПоПлатежнымКартам.Дата        = ПолучитьДатуВремяИзСтроки(СвойстваОплаты.Получить("Дата оплаты"));
		ДокОперацияПоПлатежнымКартам.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
		ДокОперацияПоПлатежнымКартам.Заполнить(Заказ.СчетНаОплатуПокупателю);
		ДокОперацияПоПлатежнымКартам.Комментарий = СтрШаблон(НСтр("ru = 'Создан автоматически. %1'"), ПредставлениеОплатыПоЗаказу(Заказ));
	Иначе
		
		ОперацияПоПлатежнымКартам = ОперацииПоПлатежнымКартам[0].Ссылка;
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Документ.ОплатаПлатежнойКартой");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОперацияПоПлатежнымКартам);
			Блокировка.Заблокировать();
		Исключение
			
			ОписаниеОшибки = ОписаниеИсключительнойОшибки();
			ЗарегистрироватьОшибкуОбмена(ОписаниеОшибки, ОперацияПоПлатежнымКартам);
			СтатистикаЗагрузки.ОнлайнОплаты.Пропущено.Вставить(ОперацияПоПлатежнымКартам, ОписаниеОшибки);
			
			Возврат;
		КонецПопытки;
		
		ДокОперацияПоПлатежнымКартам = ОперацияПоПлатежнымКартам.ПолучитьОбъект();
		ДокОперацияПоПлатежнымКартам.ПометкаУдаления = Ложь;
		ДокОперацияПоПлатежнымКартам.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	Если СуммаОплаты <> ДокОперацияПоПлатежнымКартам.СуммаДокумента Тогда
		ТЗРасшифровка = ДокОперацияПоПлатежнымКартам.РасшифровкаПлатежа.Выгрузить(Новый Структура("СчетНаОплату", Заказ.СчетНаОплатуПокупателю));
		СтрокиКУдалению = ДокОперацияПоПлатежнымКартам.РасшифровкаПлатежа.НайтиСтроки(Новый Структура("СчетНаОплату", Заказ.СчетНаОплатуПокупателю));
		
		ПерваяСтрока = ТЗРасшифровка[0];
		ПерваяСтрока.СуммаПлатежа = СуммаОплаты;
		ПерваяСтрока.СуммаВзаиморасчетов = СуммаОплаты;
		Для каждого СтрокаРасшифровки Из СтрокиКУдалению Цикл
			ДокОперацияПоПлатежнымКартам.РасшифровкаПлатежа.Удалить(СтрокаРасшифровки);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ДокОперацияПоПлатежнымКартам.РасшифровкаПлатежа.Добавить(), ПерваяСтрока);
		ДокОперацияПоПлатежнымКартам.СуммаДокумента = СуммаОплаты;
	КонецЕсли;
	
	ДокОперацияПоПлатежнымКартам.ВидОплаты = ВидОплаты;
	ДанныеВидОплаты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидОплаты, "Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
	
	ДокОперацияПоПлатежнымКартам.СчетКасса         = ДанныеВидОплаты.СчетУчетаРасчетов;
	ДокОперацияПоПлатежнымКартам.Эквайер           = ДанныеВидОплаты.Контрагент;
	ДокОперацияПоПлатежнымКартам.ДоговорЭквайринга = ДанныеВидОплаты.ДоговорКонтрагента;
	
	ДокОперацияПоПлатежнымКартам.Ответственный = Пользователи.ТекущийПользователь();
	
	ПолучитьСообщенияПользователю(Истина); // Очистим сообщения, сформированные до вызова платформенной проверки.
	Если ДокОперацияПоПлатежнымКартам.ПроверитьЗаполнение() Тогда
		ДокОперацияПоПлатежнымКартам.Записать(РежимЗаписиДокумента.Проведение);
		
		Если ЭтоНовыйДокумент Тогда
			СтатистикаЗагрузки.ОнлайнОплаты.Создано.Добавить(ДокОперацияПоПлатежнымКартам.Ссылка);
		Иначе
			СтатистикаЗагрузки.ОнлайнОплаты.Обновлено.Добавить(ДокОперацияПоПлатежнымКартам.Ссылка);
		КонецЕсли;
		
		ОбновитьСоздатьДополнительныеСведенияОперацияПоПлатежнымКартам(ДокОперацияПоПлатежнымКартам.Ссылка, СвойстваОплаты, ОписаниеОшибки);
		
	Иначе
		
		ПредставлениеОплаты = ?(ЭтоНовыйДокумент, ДокОперацияПоПлатежнымКартам.Ссылка, ПредставлениеОплатыПоЗаказу(Заказ));
		ТекстОшибки = НСтр("ru = 'Недостаточно данных для заполнения документа'");
		
		СообщенияПроверкиЗаполнения = ПолучитьСообщенияПользователю(Истина);
	
		Для Каждого СообщениеПроверкиЗаполнения Из СообщенияПроверкиЗаполнения Цикл
			
			ДобавитьОписаниеОшибки(ТекстОшибки, СообщениеПроверкиЗаполнения.Текст);
			
		КонецЦикла;
		
		ЗарегистрироватьОшибкуОбмена(ТекстОшибки, ПредставлениеОплаты);
		СтатистикаЗагрузки.ОнлайнОплаты.Пропущено.Вставить(ПредставлениеОплаты, ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеОплатыПоЗаказу(Заказ)
	
	Возврат СтрШаблон(НСтр("ru = 'Онлайн-оплата %1'"), СтрЗаменить(Заказ.ПредставлениеЗаказаСайта, "Заказ", "по заказу"));
	
КонецФункции
// Перезаполняет значения дополнительных сведений заказа покупателя значениями из соответствия СвойстваЗаказа.
// Дополнительные сведения, которые не удалось найти, создаются.
//
// Параметры
//	ЗаказПокупателя - ДокументСсылка.ЗаказПокупателя - заказ для которого создаются/перезаполняются дополнительные сведения
//	СвойстваЗаказа - Соответствие - свойства и значения загружаемого заказа
//	ОписаниеОшибки - информация по ошибкам
//
// Возвращаемого значение
//	Булево - Истина, если в процессе обновления/создания дополнительных сведений не возникло ошибок.
//
Функция ОбновитьСоздатьДополнительныеСведенияЗаказа(ЗаказПокупателя, СвойстваЗаказа, ОписаниеОшибки)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СвойстваЗаказа.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаСвойств = УправлениеСвойствами.ЗначенияСвойств(ЗаказПокупателя, Ложь, Истина);
	ТаблицаСвойств.Колонки.Добавить("СвойствоСтрокой");
	
	Для Каждого СтрокаСвойства Из ТаблицаСвойств Цикл
		СтрокаСвойства.СвойствоСтрокой = Строка(СтрокаСвойства.Свойство);
	КонецЦикла;
	
	МассивСоздатьОбновить = Новый Массив;
	
	Для Каждого СвойствоЗаказа Из СвойстваЗаказа Цикл
		
		СтруктураПоиска = Новый Структура("СвойствоСтрокой, Значение", СвойствоЗаказа.Ключ, СвойствоЗаказа.Значение);
		
		Найдено = ТаблицаСвойств.НайтиСтроки(СтруктураПоиска);
		Если Найдено.Количество() = 0 Тогда
			
			МассивСоздатьОбновить.Добавить(СвойствоЗаказа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСоздатьОбновить.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросПВХ = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка,
		|	ДополнительныеРеквизитыИСведения.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		|	И (НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления)
		|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование");
	
	ЗапросНаборы = Новый Запрос(
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуПокупателю)
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство");
	
	Для Каждого СвойствоЗаказа Из МассивСоздатьОбновить Цикл
		
		СвойствоСтрокой = СвойствоЗаказа.Ключ;
		Значение = СвойствоЗаказа.Значение;
		
		ЗапросПВХ.УстановитьПараметр("Наименование", СвойствоСтрокой);
		
		Свойство = Неопределено;
		ТипЗначенияСвойства = Тип("Строка");
		
		Выборка = ЗапросПВХ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Тип(Выборка.ТипЗначения) = Тип("Строка")
				ИЛИ Тип(Выборка.ТипЗначения) = Тип("Дата")
				ИЛИ Тип(Выборка.ТипЗначения) = Тип("Число")
				Тогда
				
				Свойство = Выборка.Ссылка;
				ТипЗначенияСвойства = Тип(Выборка.ТипЗначения);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Свойство = Неопределено Тогда
			
			СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			СвойствоОбъект.Комментарий = НСтр("ru = 'Создано автоматически при загрузке заказа с сайта'");
			СвойствоОбъект.Наименование = СвойствоСтрокой;
			СвойствоОбъект.Заголовок = СвойствоСтрокой;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
			СвойствоОбъект.Записать();
			Свойство = СвойствоОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗапросНаборы.УстановитьПараметр("Свойство", Свойство);
		
		Если ЗапросНаборы.Выполнить().Пустой() Тогда
			
			ЗаписьНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_СчетНаОплатуПокупателю.ПолучитьОбъект();
			НовСвойство = ЗаписьНабора.ДополнительныеСведения.Добавить();
			НовСвойство.Свойство = Свойство;
			ЗаписьНабора.Записать();
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = ЗаказПокупателя;
		Если ТипЗначенияСвойства = Тип("Строка") Тогда
			НоваяЗапись.Значение = Значение;
		ИначеЕсли ТипЗначенияСвойства = Тип("Дата") Тогда
			ДатаСтрока = Лев(Значение, 10);
			ВремяСтрока = Сред(Значение, 12);
			НоваяЗапись.Значение = ДатаИзСтрокиЛюбогоФормата(Значение);
		ИначеЕсли ТипЗначенияСвойства = Тип("Число") Тогда
			НоваяЗапись.Значение = ПолучитьЧислоИзСтроки(Значение);
		КонецЕсли; 
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьСоздатьДополнительныеСведенияОперацияПоПлатежнымКартам(ОперацияПоПлатежнымКартам, СвойстваЗаказа, ОписаниеОшибки)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СвойстваЗаказа.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОперацияПоПлатежнымКартам) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСоздатьОбновить = Новый Соответствие;
	МассивСоздатьОбновить.Вставить("Дата оплаты", СвойстваЗаказа.Получить("Дата оплаты"));
	МассивСоздатьОбновить.Вставить("Метод оплаты", СвойстваЗаказа.Получить("Метод оплаты"));
	МассивСоздатьОбновить.Вставить("Номер платежного документа", СвойстваЗаказа.Получить("Номер платежного документа"));
	Если ЗначениеЗаполнено(СвойстваЗаказа.Получить("Метод оплаты ИД")) Тогда
		МассивСоздатьОбновить.Вставить("Метод оплаты ИД", СвойстваЗаказа.Получить("Метод оплаты ИД"));
	КонецЕсли;
	
	ЗапросПВХ = Новый Запрос(
		"ВЫБРАТЬ
		|	ДополнительныеРеквизитыИСведения.Ссылка,
		|	ДополнительныеРеквизитыИСведения.ТипЗначения
		|ИЗ
		|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
		|ГДЕ
		|	ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
		|	И (НЕ ДополнительныеРеквизитыИСведения.ПометкаУдаления)
		|	И ДополнительныеРеквизитыИСведения.Наименование = &Наименование");
	
	ЗапросНаборы = Новый Запрос(
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_ОплатаПлатежнойКартой)
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство = &Свойство");
	
	Для Каждого СвойствоЗаказа Из МассивСоздатьОбновить Цикл
		
		СвойствоСтрокой = СвойствоЗаказа.Ключ;
		Значение = СвойствоЗаказа.Значение;
		
		ЗапросПВХ.УстановитьПараметр("Наименование", СвойствоСтрокой);
		
		Свойство = Неопределено;
		
		Выборка = ЗапросПВХ.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
				
				Свойство = Выборка.Ссылка;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Свойство = Неопределено Тогда
			
			СвойствоОбъект = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			СвойствоОбъект.Комментарий = НСтр("ru = 'Создано автоматически при загрузке заказа с сайта'");
			СвойствоОбъект.Наименование = СвойствоСтрокой;
			СвойствоОбъект.Заголовок = СвойствоСтрокой;
			СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
			СвойствоОбъект.ЭтоДополнительноеСведение = Истина;
			СвойствоОбъект.Записать();
			Свойство = СвойствоОбъект.Ссылка;
			
		КонецЕсли;
		
		ЗапросНаборы.УстановитьПараметр("Свойство", Свойство);
		
		Если ЗапросНаборы.Выполнить().Пустой() Тогда
			
			ЗаписьНабора = Справочники.НаборыДополнительныхРеквизитовИСведений.Документ_ОплатаПлатежнойКартой.ПолучитьОбъект();
			НовСвойство = ЗаписьНабора.ДополнительныеСведения.Добавить();
			НовСвойство.Свойство = Свойство;
			ЗаписьНабора.Записать();
			
		КонецЕсли;
		
		НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
		НоваяЗапись.Объект = ОперацияПоПлатежнымКартам;
		НоваяЗапись.Значение = Значение;
		НоваяЗапись.Свойство = Свойство;
		НоваяЗапись.Записать();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьСвойстваДокумента(ДокументXDTO)

	СвойстваЗаказа = Новый Соответствие;
	
	Если ОбъектXDTOСодержитСвойство(ДокументXDTO, "ЗначенияРеквизитов")
		И ДокументXDTO.ЗначенияРеквизитов <> Неопределено
		И ОбъектXDTOСодержитСвойство(ДокументXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
		
		МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.ЗначенияРеквизитов.ЗначениеРеквизита);
		
		Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
			
			Реквизит = ЗначениеРеквизитаXDTO.Наименование;
			Значение = ЗначениеРеквизитаXDTO.Значение;
			
			Если ТипЗнч(Значение) = Тип("Строка") Тогда
				СвойстваЗаказа.Вставить(Реквизит, Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("СписокXDTO")
				И Значение.Количество() > 0 Тогда
				СвойстваЗаказа.Вставить(Реквизит, Значение[0]);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СвойстваЗаказа;
	
КонецФункции

Функция СуммаСкидокВСтрокеЗаказа(ТоварXDTO)
	
	СуммаСкидок = 0;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Скидки")
		
		И ТоварXDTO.Скидки <> Неопределено
		И ОбъектXDTOСодержитСвойство(ТоварXDTO.Скидки, "Скидка") Тогда
		
		МассивСкидокXDTO = ПолучитьМассивОбъектовСпискаXDTO(ТоварXDTO.Скидки.Скидка);
		Для каждого СкидкаXDTO Из МассивСкидокXDTO Цикл
			
			Если НЕ ОбъектXDTOСодержитСвойство(СкидкаXDTO, "УчтеноВСумме") 
				ИЛИ НРег(СкидкаXDTO.УчтеноВСумме = "true") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СуммаСкидок = СуммаСкидок + ПолучитьЧислоИзСтроки(СкидкаXDTO.Сумма);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СуммаСкидок;
КонецФункции

Функция ПолучитьВидНоменклатурыИзТоварXDTO(ТоварXDTO)
	
	ВидНоменклатуры = "";
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЗначенияРеквизитов")
		И ТоварXDTO.ЗначенияРеквизитов <> Неопределено
		И ОбъектXDTOСодержитСвойство(ТоварXDTO.ЗначенияРеквизитов, "ЗначениеРеквизита") Тогда
		
		ЗначенияРеквизитовXDTO = ТоварXDTO.ЗначенияРеквизитов.ЗначениеРеквизита;
		МассивЗначенийРеквизитовXDTO = ПолучитьМассивОбъектовСпискаXDTO(ЗначенияРеквизитовXDTO);
		
		Для каждого ЗначениеРеквизитаXDTO Из МассивЗначенийРеквизитовXDTO Цикл
			
			Если ЗначениеРеквизитаXDTO.Наименование = "ВидНоменклатуры" 
				И СвойствоXDTOЗаполнено(ЗначениеРеквизитаXDTO.Значение) Тогда
				
				ВидНоменклатуры = ЗначениеРеквизитаXDTO.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВидНоменклатуры;
	
КонецФункции

Функция ДанныеНаменклатурыВСтрокеЗаказа(ТоварXDTO, ТаблицаСоответствияНоменклатуры, Параметры)
	
	ДанныеНоменклатуры = ОписаниеДанныхНоменклатуры();
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
		ДанныеНоменклатуры.Идентификатор = ПолучитьИдНоменклатуры(ТоварXDTO.Ид);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Наименование") И СвойствоXDTOЗаполнено(ТоварXDTO.Наименование) Тогда
		ДанныеНоменклатуры.Наименование = ПолучитьНаименованиеНоменклатуры(ТоварXDTO.Наименование);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Артикул") И СвойствоXDTOЗаполнено(ТоварXDTO.Артикул) Тогда
		ДанныеНоменклатуры.Артикул = ТоварXDTO.Артикул;
	КонецЕсли;
	
	ДанныеНоменклатуры.Единица         = ПолучитьДанныеЕдиницыИзмеренияИзТоварXDTO(ТоварXDTO);
	ДанныеНоменклатуры.ВидНоменклатуры = ПолучитьВидНоменклатурыИзТоварXDTO(ТоварXDTO);
	ДанныеНоменклатуры.Услуга          = НРег(ДанныеНоменклатуры.ВидНоменклатуры) = "услуга";
	
	СоответствиеНоменклатуры = ТаблицаСоответствияНоменклатуры.Найти(ДанныеНоменклатуры.Идентификатор, "Идентификатор");
	Если СоответствиеНоменклатуры <> Неопределено Тогда
		
		Возврат СоответствиеНоменклатуры.Номенклатура;
		
	Иначе
		Номенклатура = НайтиНоменклатуруПоАртикулуНаименованию(ДанныеНоменклатуры);
		
		Если НЕ ЗначениеЗаполнено(Номенклатура)
			И Параметры.СоздаватьНовуюНоменклатуру Тогда
			Номенклатура = СоздатьНоменклатуру(ДанныеНоменклатуры, Параметры);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			РегистрыСведений.НоменклатураИнтернетМагазина.УстановитьСоответствие(ДанныеНоменклатуры.Идентификатор, Номенклатура);
			
			СтрокаСоответствия = ТаблицаСоответствияНоменклатуры.Добавить();
			СтрокаСоответствия.Идентификатор = ДанныеНоменклатуры.Идентификатор;
			СтрокаСоответствия.Номенклатура = Номенклатура;
			
			Возврат Номенклатура;
			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	Возврат ДанныеНоменклатуры;
	
КонецФункции

Процедура ЗаполнитьТабличнуюЧастьЗаказа(ДокументОбъект, ДокументXDTO, СведенияОНалогах, Параметры)
	
	Если НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO, "Товары")
		ИЛИ ДокументXDTO.Товары = Неопределено
		ИЛИ НЕ ОбъектXDTOСодержитСвойство(ДокументXDTO.Товары, "Товар") Тогда
		
		Возврат ;
		
	КонецЕсли;
	
	МассивТоваровXDTO = ПолучитьМассивОбъектовСпискаXDTO(ДокументXDTO.Товары.Товар);
	
	МассивИдНоменклатуры = Новый Массив;
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		ИД = "";
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Ид") И СвойствоXDTOЗаполнено(ТоварXDTO.Ид) Тогда
			ИД = ПолучитьИдНоменклатуры(ТоварXDTO.Ид);
		КонецЕсли;
		МассивИдНоменклатуры.Добавить(ИД);
		
	КонецЦикла;
	
	ТаблицаСоответствияНоменклатуры = НоменклатураПоИдентификаторамМагазина(МассивИдНоменклатуры);
	ТаблицаСоответствияНоменклатуры.Индексы.Добавить("Идентификатор");
	
	ТаблицаНесопоставленнойНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНесопоставленнойНоменклатуры.Колонки.Добавить("НомерСтрокиЗаказа", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6)));
	ТаблицаНесопоставленнойНоменклатуры.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(110)));
	ТаблицаНесопоставленнойНоменклатуры.Колонки.Добавить("ДанныеНоменклатуры");
		
	ДокументОбъект.Товары.Очистить();
	СчСтрок = 0;
	
	Для каждого ТоварXDTO Из МассивТоваровXDTO Цикл
		
		Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		Количество = 0;
		ЦенаЗаЕдиницу = 0;
		Сумма = 0;
		СуммаСкидок = 0;
		СтавкаНДС = Неопределено;
		
		ЗаполнитьСодержание = Истина;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Количество") Тогда 
			Количество = ПолучитьЧислоИзСтроки(ТоварXDTO.Количество);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "ЦенаЗаЕдиницу") Тогда
			ЦенаЗаЕдиницу = ПолучитьЧислоИзСтроки(ТоварXDTO.ЦенаЗаЕдиницу);
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Сумма") Тогда
			Сумма = ПолучитьЧислоИзСтроки(ТоварXDTO.Сумма);
		КонецЕсли;
		
		СуммаСкидок = СуммаСкидокВСтрокеЗаказа(ТоварXDTO);
		
		СтавкаНДС = СтавкаНДСПоДаннымXDTO(ТоварXDTO);
		Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтавкаНДС = СведенияОНалогах.СтавкаНДС;
		КонецЕсли;
		
		ДанныеНоменклатуры = ДанныеНаменклатурыВСтрокеЗаказа(ТоварXDTO, ТаблицаСоответствияНоменклатуры, Параметры);
		
		Если ТипЗнч(ДанныеНоменклатуры) = Тип("Структура") Тогда
			НоваяНоменклатура = ТаблицаНесопоставленнойНоменклатуры.Добавить();
			НоваяНоменклатура.НомерСтрокиЗаказа  = СчСтрок;
			НоваяНоменклатура.Идентификатор      = ДанныеНоменклатуры.Идентификатор;
			НоваяНоменклатура.ДанныеНоменклатуры = ДанныеНоменклатуры;
			
			ЗаполнитьСодержание = ДанныеНоменклатуры.Услуга;
			
		Иначе
			
			Номенклатура = ДанныеНоменклатуры;
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Услуга,ВидСтавкиНДС");
			Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
				СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(РеквизитыНоменклатуры.ВидСтавкиНДС, ДокументОбъект.Дата);
			КонецЕсли;
			
			ЗаполнитьСодержание = РеквизитыНоменклатуры.Услуга;
		КонецЕсли;
		
		НоваяСтрока = ДокументОбъект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.Содержание   = ?(ЗаполнитьСодержание, ДанныеНоменклатуры.Наименование, "");
		НоваяСтрока.Количество   = Количество;
		НоваяСтрока.СтавкаНДС    = СтавкаНДС;
		НоваяСтрока.Сумма        = Сумма;
		НоваяСтрока.СуммаСкидки  = СуммаСкидок;
		Если НоваяСтрока.Количество <> 0 Тогда
			НоваяСтрока.Цена = ?(ЦенаЗаЕдиницу > 0, ЦенаЗаЕдиницу, (НоваяСтрока.Сумма - НоваяСтрока.СуммаСкидки) / НоваяСтрока.Количество);
		Иначе
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
		КонецЕсли;
		
		Если НоваяСтрока.Сумма <> 0 Тогда
			НоваяСтрока.ПроцентСкидки =  НоваяСтрока.СуммаСкидки / НоваяСтрока.Сумма * 100;
		КонецЕсли;
		
		ПересчитатьСуммуНДС(НоваяСтрока, ДокументОбъект.СуммаВключаетНДС);
		СчСтрок = СчСтрок + 1;
		
	КонецЦикла;
	
	ДокументОбъект.СуммаДокумента = УчетНДСПереопределяемый.ПолучитьСуммуДокументаСНДС(ДокументОбъект);
	Если ТаблицаНесопоставленнойНоменклатуры.Количество() > 0 Тогда
		Параметры.Вставить("ДанныеНоменклатуры", ТаблицаНесопоставленнойНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуНДС(Строка, СуммаВключаетНДС)
	
	Если Строка.СуммаСкидки > 0 Тогда
		Сумма = Строка.Сумма - Мин(Строка.СуммаСкидки, Строка.Сумма);
	Иначе
		Сумма = Строка.Сумма;
	КонецЕсли;

	Строка.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Сумма, СуммаВключаетНДС,
		УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(Строка.СтавкаНДС));

КонецПроцедуры

Функция ПрочитатьЭлементы(ЧтениеXML, ИмяКорневогоУзла)
	
	МассивЗначений = Новый Массив;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = ИмяКорневогоУзла И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Прервать;
		КонецЕсли;
		
		СтруктураЗначений = Новый Структура;
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя = "Элемент" И ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ИмяЭлемента = ЧтениеXML.Имя;
				ЧтениеXML.Прочитать();
				ЗначениеЭлемента = ЧтениеXML.Значение;
				
				СтруктураЗначений.Вставить(ИмяЭлемента, ЗначениеЭлемента);
			КонецЕсли;

		КонецЦикла;
		
		МассивЗначений.Добавить(СтруктураЗначений);
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

#КонецОбласти

#Область ОбработкаНоменклатуры

Функция НайтиНоменклатуруПоАртикулуНаименованию(ДанныеНоменклатуры)
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.Артикул) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("Артикул", ДанныеНоменклатуры.Артикул);
		Запрос.УстановитьПараметр("Услуга", ДанныеНоменклатуры.Услуга);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеНоменклатуры.Наименование) Тогда
		
		ИмяПоляНаименование = "Наименование";
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.НаименованиеПолное = &НаименованиеПолное
		|	И НЕ Номенклатура.ЭтоГруппа");
		
		Запрос.УстановитьПараметр("НаименованиеПолное", ДанныеНоменклатуры.Наименование);
		Запрос.УстановитьПараметр("Услуга", ДанныеНоменклатуры.Услуга);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 И Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОписаниеДанныхНоменклатуры()
	ДанныеНоменклатуры = новый Структура;
	ДанныеНоменклатуры.Вставить("Ссылка");
	ДанныеНоменклатуры.Вставить("Идентификатор");
	ДанныеНоменклатуры.Вставить("Артикул");
	ДанныеНоменклатуры.Вставить("Наименование");
	ДанныеНоменклатуры.Вставить("Услуга");
	ДанныеНоменклатуры.Вставить("ВидНоменклатуры");
	ДанныеНоменклатуры.Вставить("Единица", Новый Структура("Наименование, Код"));
	ДанныеНоменклатуры.Вставить("СвойстваТовара", Новый Массив);
	
	Возврат ДанныеНоменклатуры;
КонецФункции

Функция ПолучитьИдНоменклатуры(Знач Ид)
	
	ПозицияРазделителя = СтрНайти(Ид, "#");
	Если ПозицияРазделителя > 0 Тогда
		ИдНоменклатуры = Лев(Ид, ПозицияРазделителя - 1);
	Иначе
		ИдНоменклатуры = Ид;
	КонецЕсли;
	
	Возврат ИдНоменклатуры;
	
КонецФункции

Функция ПолучитьНаименованиеНоменклатуры(Знач Наименование)
	
	ПозицияРазделителя = СтрНайти(Наименование, "#");
	Если ПозицияРазделителя > 0 Тогда
		НаименованиеНоменклатуры = Лев(Наименование, ПозицияРазделителя - 1);
	Иначе
		НаименованиеНоменклатуры = Наименование;
	КонецЕсли;
	
	Возврат НаименованиеНоменклатуры;
	
КонецФункции

Функция ПолучитьДанныеЕдиницыИзмеренияИзТоварXDTO(ТоварXDTO)
	
	ЕдиницаПоКлассификатору = Новый Структура("Код, Наименование");
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "БазоваяЕдиница") Тогда
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "Код")
			И СвойствоXDTOЗаполнено(ТоварXDTO.БазоваяЕдиница.Код) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Код", ТоварXDTO.БазоваяЕдиница.Код);
			
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.БазоваяЕдиница, "НаименованиеПолное")
			И СвойствоXDTOЗаполнено(ТоварXDTO.БазоваяЕдиница.НаименованиеПолное) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Наименование", ТоварXDTO.БазоваяЕдиница.НаименованиеПолное);
			
		КонецЕсли;
	ИначеЕсли ОбъектXDTOСодержитСвойство(ТоварXDTO, "Единица") Тогда
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.Единица, "Код")
			И СвойствоXDTOЗаполнено(ТоварXDTO.Единица.Код) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Код", ТоварXDTO.Единица.Код);
			
		КонецЕсли;
		
		Если ОбъектXDTOСодержитСвойство(ТоварXDTO.Единица, "НаименованиеПолное")
			И СвойствоXDTOЗаполнено(ТоварXDTO.Единица.НаименованиеПолное) Тогда
			
			ЕдиницаПоКлассификатору.Вставить("Наименование", ТоварXDTO.Единица.НаименованиеПолное);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕдиницаПоКлассификатору;
	
КонецФункции

Функция СтавкаНДСПоДаннымXDTO(ТоварXDTO)
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "СтавкиНалогов")
		И ТоварXDTO.СтавкиНалогов <> Неопределено
		И ОбъектXDTOСодержитСвойство(ТоварXDTO.СтавкиНалогов, "СтавкаНалога") Тогда
		
		СтавкиНалогов = ТоварXDTO.СтавкиНалогов.СтавкаНалога;
		МассивСтавокXDTO = ПолучитьМассивОбъектовСпискаXDTO(СтавкиНалогов);
		
		Для каждого СтавкаНалога Из МассивСтавокXDTO Цикл
			
			Если НРег(СтавкаНалога.Наименование) = "ндс" Тогда
				
				Возврат ПолучитьСтавкуНДСПеречислением(СтавкаНалога.Ставка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(ТоварXDTO, "Налоги")
		И ТоварXDTO.Налоги <> Неопределено
		И ОбъектXDTOСодержитСвойство(ТоварXDTO.Налоги, "Налог") Тогда
		
		НалогиXDTO = ТоварXDTO.Налоги.Налог;
		МассивНалоговXDTO = ПолучитьМассивОбъектовСпискаXDTO(НалогиXDTO);
		
		Для каждого НалогXDTO Из МассивНалоговXDTO Цикл
			
			Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Наименование") И НРег(НалогXDTO.Наименование) = "ндс" Тогда
				
				Если ОбъектXDTOСодержитСвойство(НалогXDTO, "Ставка") Тогда
					
					Возврат ПолучитьСтавкуНДСПеречислением(НалогXDTO.Ставка);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКонтрагента

Функция КонтрагентПоДаннымИнтернетМагазина(ДанныеКонтрагента)
	
	Контрагент = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) Тогда
		
		ИНН = ДанныеКонтрагента.ИНН;
		КПП = ДанныеКонтрагента.КПП;
		
		Контрагент = ПоискКонтрагентаПоРеквизитам(ИНН, КПП);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеКонтрагента.КонтактнаяИнформация) Тогда
		Контрагент = ПоискКонтрагентаПоКонтактам(ДанныеКонтрагента.КонтактнаяИнформация);
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Функция ПоискКонтрагентаПоКонтактам(КонтактнаяИнформация)
	
	Телефон = "";
	Email = "";
	
	Для Каждого СтрокаИнформации Из КонтактнаяИнформация Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонРабочий")
			ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонВнутренний")
			ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонМобильный")
			ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ТелефонДомашний") Тогда
			
			Телефон = СтрокаИнформации.Представление;
			
		ИначеЕсли ВРег(СтрокаИнформации.Вид) = ВРег("Почта")
			ИЛИ ВРег(СтрокаИнформации.Вид) = ВРег("ЭлектроннаяПочта") Тогда
			
			Email = СтрокаИнформации.Представление;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Телефон) И НЕ ЗначениеЗаполнено(Email) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	(&УсловиеТелефон
	|			ИЛИ &УсловиеEmail)";
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ТипEmail", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Телефон", Телефон);
	Запрос.УстановитьПараметр("Email", Email);
	
	УсловиеТелефон = "КонтрагентыКонтактнаяИнформация.Тип = &ТипТелефон
					| И КонтрагентыКонтактнаяИнформация.Представление = &Телефон";
	
	УсловиеEmail = "КонтрагентыКонтактнаяИнформация.Тип = &ТипEmail
					| И КонтрагентыКонтактнаяИнформация.Представление = &Email";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТелефон", ?(ЗначениеЗаполнено(Телефон), УсловиеТелефон, "Ложь"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеEmail", ?(ЗначениеЗаполнено(Email), УсловиеEmail, "Ложь"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьДанныеКонтрагента(ДокументXDTO)
	
	ДанныеКонтрагента = Новый Структура;
	
	Если ТипЗнч(ДокументXDTO.Контрагенты.Контрагент) = Тип("ОбъектXDTO") Тогда
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент;
	Иначе
		КонтрагентXDTO = ДокументXDTO.Контрагенты.Контрагент[0];
	КонецЕсли;
	
	ИдКонтрагента = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИД")
		И ТипЗнч(КонтрагентXDTO.ИД) = Тип("Строка") Тогда
		ИдКонтрагента = СОКРЛП(КонтрагентXDTO.ИД);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Идентификатор", ИдКонтрагента);
	
	ИНН = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ИНН")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ИНН) Тогда
		ИНН = КонтрагентXDTO.ИНН;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ИНН", ИНН);
	
	КПП = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "КПП")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.КПП) Тогда
		КПП = КонтрагентXDTO.КПП;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("КПП", КПП);
	
	ЮрЛицо = СтрДлина(ИНН) <> 12 И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование");
	
	ДанныеКонтрагента.Вставить("ЮрЛицо", ЮрЛицо);
	
	ОфициальноеНаименование = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОфициальноеНаименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОфициальноеНаименование) Тогда
		ОфициальноеНаименование = КонтрагентXDTO.ОфициальноеНаименование;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ОфициальноеНаименование", ОфициальноеНаименование);
	
	НаименованиеПолное = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ПолноеНаименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ПолноеНаименование) Тогда
		НаименованиеПолное = СокрЛП(КонтрагентXDTO.ПолноеНаименование);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("НаименованиеПолное", НаименованиеПолное);
	
	Наименование = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Наименование")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Наименование) Тогда
		Наименование = КонтрагентXDTO.Наименование;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", Наименование);
	
	ФИО = ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO);
	ДанныеКонтрагента.Вставить("ФИО", ФИО);
	
	ОКПО = "";
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ОКПО")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ОКПО) Тогда
		ОКПО = КонтрагентXDTO.ОКПО;
	КонецЕсли;
	ДанныеКонтрагента.Вставить("ОКПО", ОКПО);
	
	// Банковские счета.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "РасчетныеСчета")
		И КонтрагентXDTO.РасчетныеСчета <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.РасчетныеСчета, "РасчетныйСчет") Тогда
		
		РасчетныеСчетаXDTO = КонтрагентXDTO.РасчетныеСчета.РасчетныйСчет;
		МассивРасчетныхСчетовXDTO = ПолучитьМассивОбъектовСпискаXDTO(РасчетныеСчетаXDTO);
		
		РасчетныеСчета = Новый Массив;
		Для каждого РасчетныйСчетXDTO Из МассивРасчетныхСчетовXDTO Цикл
			
			НомерСчета = СтрЗаменить(РасчетныйСчетXDTO.НомерСчета, " ", "");
			Если ПустаяСтрока(НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетныйСчет = Новый Структура;
			
			РасчетныйСчет.Вставить("НомерСчета", НомерСчета);
			
			БанкXDTO = РасчетныйСчетXDTO.Банк;
			ДанныеБанкаXDTO = ПолучитьДанныеБанкаXDTO(БанкXDTO);
			
			РасчетныйСчет.Вставить("ДанныеБанка", ДанныеБанкаXDTO);
			
			Комментарий = "";
			Если ОбъектXDTOСодержитСвойство(РасчетныйСчетXDTO, "Комментарий")
				И СвойствоXDTOЗаполнено(РасчетныйСчетXDTO.Комментарий) Тогда
				
				Комментарий = РасчетныйСчетXDTO.Комментарий;
				
			КонецЕсли;
			
			РасчетныйСчет.Вставить("Комментарий", Комментарий);
			
			РасчетныеСчета.Добавить(РасчетныйСчет);
			
		КонецЦикла;
		
		ДанныеКонтрагента.Вставить("РасчетныеСчета", РасчетныеСчета);
		
	КонецЕсли;
	
	// Контактная информация.
	
	КонтактнаяИнформация = Новый ТаблицаЗначений;
	КонтактнаяИнформация.Колонки.Добавить("Вид");
	КонтактнаяИнформация.Колонки.Добавить("Представление");
	
	ЗаполнитьКонтактнуюИнформациюКонтрагента(КонтактнаяИнформация, ДанныеКонтрагента, КонтрагентXDTO);
	ДанныеКонтрагента.Вставить("КонтактнаяИнформация", КонтактнаяИнформация);
	
	Возврат ДанныеКонтрагента;

КонецФункции

Функция ПоискКонтрагентаПоРеквизитам(ИНН, КПП)
	
	ВозможенПоискЮрЛица = ЗначениеЗаполнено(ИНН)
		И СтрДлина(ИНН) = 10
		И ЗначениеЗаполнено(КПП);
		
	ВозможенПоискФизЛица = ЗначениеЗаполнено(ИНН)
		И СтрДлина(ИНН) = 12;
		
	
	СтрПоиска = "";
	Если ВозможенПоискЮрЛица Тогда
		
		СтрПоиска = " ГДЕ Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП";
		
	ИначеЕсли ВозможенПоискФизЛица Тогда
		
		СтрПоиска = " ГДЕ Контрагенты.ИНН = &ИНН";
		
	Иначе
		
		Возврат Неопределено;
			
	КонецЕсли;
	
	ШаблонТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты";
	Запрос = Новый Запрос();
	Запрос.Текст = ШаблонТекстЗапроса + СтрПоиска;
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Контрагенты = РезультатЗапроса.Выгрузить();
		КонтрагентСсылка = Контрагенты[0].Контрагент;
		
	КонецЕсли;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

Процедура ЗаполнитьКонтактнуюИнформациюКонтрагента(КонтактнаяИнформация, ДанныеКонтрагента, КонтрагентXDTO)
	
	// Контактная информация.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Адрес")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Адрес.Представление) Тогда
		
		ФактическийАдресПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.Адрес);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ФактическийАдрес",
			ФактическийАдресПредставление,
			КонтактнаяИнформация);
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "ЮридическийАдрес")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.ЮридическийАдрес, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.ЮридическийАдрес.Представление) Тогда
		
		ЮридическийАдресПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.ЮридическийАдрес);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ЮридическийАдрес",
			ЮридическийАдресПредставление,
			КонтактнаяИнформация);
		
	КонецЕсли;
	
	Если НЕ ДанныеКонтрагента.ЮрЛицо И ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "АдресРегистрации")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.АдресРегистрации, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.АдресРегистрации.Представление) Тогда // физ. лицо содержит адрес регистрации
		
		АдресРегистрацииПредставление = УточненноеПредставлениеАдреса(КонтрагентXDTO.АдресРегистрации);
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ЮридическийАдрес",
			АдресРегистрацииПредставление,
			КонтактнаяИнформация);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Телефон")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Телефон, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.Телефон.Представление)Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ТелефонМобильный",
			КонтрагентXDTO.Телефон.Представление,
			КонтактнаяИнформация);
	КонецЕсли;
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "email")
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.email, "Представление")
		И СвойствоXDTOЗаполнено(КонтрагентXDTO.email.Представление) Тогда
		
		ДобавитьСтрокуИнформацииПоКонтрагенту("ЭлектроннаяПочта",
			КонтрагентXDTO.email.Представление,
			КонтактнаяИнформация);
	КонецЕсли;
	
	// Контакты.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Контакты")
		И КонтрагентXDTO.Контакты <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Контакты, "Контакт") Тогда
		
		КонтактыXDTO = КонтрагентXDTO.Контакты.Контакт;
		МассивКонтактовXDTO = ПолучитьМассивОбъектовСпискаXDTO(КонтактыXDTO);
		
		Для каждого КонтактXDTO Из МассивКонтактовXDTO Цикл
			
			Если НЕ СвойствоXDTOЗаполнено(КонтактXDTO.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипКИXDTO = СтрЗаменить(КонтактXDTO.Тип, " ", "");
			
			ДобавитьСтрокуИнформацииПоКонтрагенту(ТипКИXDTO, КонтактXDTO.Значение, КонтактнаяИнформация);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Контактные лица.
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Представители")
		И КонтрагентXDTO.Представители <> Неопределено
		И ОбъектXDTOСодержитСвойство(КонтрагентXDTO.Представители, "Представитель") Тогда
		
		ПредставителиXDTO = КонтрагентXDTO.Представители.Представитель;
		МассивПредставителейXDTO = ПолучитьМассивОбъектовСпискаXDTO(ПредставителиXDTO);
		
		КонтактныеЛица = Новый Массив;
		Для каждого ПредставительXDTO Из МассивПредставителейXDTO Цикл
			
			
			Если ОбъектXDTOСодержитСвойство(ПредставительXDTO, "Контрагент")
				И ОбъектXDTOСодержитСвойство(ПредставительXDTO.Контрагент, "Наименование") Тогда
				
				КонтактныеЛица.Добавить(ПредставительXDTO.Контрагент.Наименование);
				
			КонецЕсли;
		КонецЦикла;
		Если КонтактныеЛица.Количество() > 0 Тогда
			ДанныеКонтрагента.Вставить("КонтактныеЛица", КонтактныеЛица);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет и заполняет строку табличной части "ИнформацияПоКонтрагенту" заказа покупателя.
//
// Параметры
//	Вид - Строка, вид информации
//	Представление - Строка, представление информации
//	ИнформацияПоКонтрагенту - ТабличнаяЧасть документ ЗаказПокупателю.
//
Процедура ДобавитьСтрокуИнформацииПоКонтрагенту(Вид, Представление, КонтактнаяИнформация)
	
	Если ЗначениеЗаполнено(Представление) Тогда
		НоваяСтрока = КонтактнаяИнформация.Добавить();
		НоваяСтрока.Вид = Вид;
		НоваяСтрока.Представление = СокрЛП(Представление);
	КонецЕсли;
	
КонецПроцедуры

Функция УточненноеПредставлениеАдреса(АдресXDTO)
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле")
		И ТипЗнч(АдресXDTO.АдресноеПоле) = Тип("СписокXDTO") Тогда
		
		АдресноеПоле = АдресXDTO.АдресноеПоле;
		Для Каждого ТипАдреса Из АдресноеПоле Цикл
			
			Если НРег(ТипАдреса.Тип) = НРег("Почтовый индекс") Тогда
				ПочтовыйИндекс = ТипАдреса.Значение;
			КонецЕсли;
			
			Если НРег(ТипАдреса.Тип) = НРег("Страна") Тогда
				Страна = ТипАдреса.Значение;
			КонецЕсли;
			
			Если НРег(ТипАдреса.Тип) = НРег("Город") Тогда
				Город = ТипАдреса.Значение;
			КонецЕсли;
			
			ПредставлениеАдреса = ?(ЗначениеЗаполнено(ПочтовыйИндекс), ПочтовыйИндекс+","+ " ","")
				+ ?(ЗначениеЗаполнено(Страна), Страна+"," + " ","")
				+ ?(ЗначениеЗаполнено(Город), Город+","+ " ","");
				
			ПредставлениеАдреса = ПредставлениеАдреса + СокрЛП(АдресXDTO.Представление);
			
		КонецЦикла;
		
	Иначе
		ПредставлениеАдреса = СокрЛП(АдресXDTO.Представление);
	КонецЕсли;
	
	Возврат ПредставлениеАдреса;
	
КонецФункции

Функция ПолучитьИзОбъектаXDTOСтрокуСФИО(КонтрагентXDTO)
	
	ТекущаяСтрока = "";
	Фамилия = "";
	Имя = "";
	Отчество = "";
		
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Фамилия") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Фамилия) Тогда
		ТекущаяСтрока = КонтрагентXDTO.Фамилия;
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Имя") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Имя) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Имя);
	КонецЕсли;
	
	Если ОбъектXDTOСодержитСвойство(КонтрагентXDTO, "Отчество") И СвойствоXDTOЗаполнено(КонтрагентXDTO.Отчество) Тогда
		ТекущаяСтрока = СокрЛП(ТекущаяСтрока + " " + КонтрагентXDTO.Отчество);
	КонецЕсли;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

Процедура ЗаполнитьДанныеСправочниковПодчиненныхКонтрагенту(Контрагент, ДанныеКонтрагента, Организация)
	
	//Банки и расчетные счета.
	
	Если ДанныеКонтрагента.Свойство("РасчетныеСчета")
		И ДанныеКонтрагента.РасчетныеСчета.Количество() > 0 Тогда
		 Для каждого РасчетныйСчет Из ДанныеКонтрагента.РасчетныеСчета Цикл
			
			БИК = РасчетныйСчет.ДанныеБанка.БИК;
			Если НЕ ЗначениеЗаполнено(РасчетныйСчет.ДанныеБанка.БИК)
				ИЛИ НЕ ЗначениеЗаполнено(РасчетныйСчет.НомерСчета) Тогда
				Продолжить;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(РасчетныйСчет, РасчетныйСчет.ДанныеБанка);
			РасчетныйСчет.Вставить("Владелец", Контрагент);
			БанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
			БанковскийСчет.Заполнить(РасчетныйСчет);
			БанковскийСчет.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоДоговорам") Тогда
		ПараметрыДоговора = Новый Структура;
		ПараметрыДоговора.Вставить("ВидДоговора",  Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		ПараметрыДоговора.Вставить("Организация",  Организация);
		ПараметрыДоговора.Вставить("Владелец",     Контрагент);
		ПараметрыДоговора.Вставить("Наименование", НСтр("ru='Без договора'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ПараметрыСоздания = Новый Структура("ЗначенияЗаполнения", ПараметрыДоговора);
		РаботаСДоговорамиКонтрагентовБПВызовСервера.СоздатьОсновнойДоговорКонтрагента(ПараметрыСоздания);
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЮрЛицо
		И ДанныеКонтрагента.Свойство("КонтактныеЛица") Тогда
		
		Для Каждого КонтактноеЛицо из ДанныеКонтрагента.КонтактныеЛица Цикл
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("ОбъектВладелец", Контрагент);
			ДанныеЗаполнения.Вставить("Наименование", КонтактноеЛицо);
			
			КонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
			КонтактноеЛицо.Заполнить(ДанныеЗаполнения);
			КонтактноеЛицо.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьКонтактнуюИнформацию(Объект, ВидКИ, ТипКИ, Представление)
	
	ЗначенияПолей = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКИ);
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидКИ, ТипКИ);
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Функция ОбработатьВалютуXML(КодВалютыСтрока)
	
	Валюта = Справочники.Валюты.НайтиПоНаименованию(КодВалютыСтрока);
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
		
	Возврат Валюта;
	
КонецФункции

Функция ПолучитьДанныеБанкаXDTO(БанкXDTO)
	
	ДанныеБанка = Новый Структура;
	
	БИК = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "БИК") И СвойствоXDTOЗаполнено(БанкXDTO.БИК) Тогда
		БИК = СтрЗаменить(БанкXDTO.БИК, " ", "");
	КонецЕсли;
	
	SWIFT = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "SWIFT") И СвойствоXDTOЗаполнено(БанкXDTO.SWIFT) Тогда
		SWIFT = СтрЗаменить(БанкXDTO.SWIFT, " ", "");
	КонецЕсли;
	
	КоррСчет = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "СчетКорреспондентский") И СвойствоXDTOЗаполнено(БанкXDTO.СчетКорреспондентский) Тогда
		КоррСчет = СтрЗаменить(БанкXDTO.СчетКорреспондентский, " ", "");
	КонецЕсли;
	
	Адрес = "";
	Город = "";
	Если ОбъектXDTOСодержитСвойство(БанкXDTO, "Адрес") И СвойствоXDTOЗаполнено(БанкXDTO.Адрес.Представление) Тогда
		Адрес = СокрЛП(БанкXDTO.Адрес.Представление);
		Город = ПолучитьГородБанкаИзАдресаXDTO(БанкXDTO.Адрес);
	КонецЕсли;
	
	ДанныеБанка.Вставить("БИК", БИК);
	ДанныеБанка.Вставить("СВИФТБИК", SWIFT);
	ДанныеБанка.Вставить("КоррСчет", КоррСчет);
	ДанныеБанка.Вставить("Адрес", Адрес);
	ДанныеБанка.Вставить("Город", Город);
	
	Возврат ДанныеБанка;
	
КонецФункции

Функция ПолучитьГородБанкаИзАдресаXDTO(АдресXDTO)
	
	Город = "";
	
	Если ОбъектXDTOСодержитСвойство(АдресXDTO, "АдресноеПоле")
		И ТипЗнч(АдресXDTO.АдресноеПоле) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из АдресXDTO.АдресноеПоле Цикл
			
			Если ОбъектXDTO.Тип = "Город" Тогда
				
				Город = ОбъектXDTO.Значение;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Город;
	
КонецФункции

Функция СвойствоXDTOЗаполнено(СвойствоXDTO)
	
	СвойствоЗаполнено = Истина;
	
	Если ТипЗнч(СвойствоXDTO) = Тип("ОбъектXDTO")
		ИЛИ ТипЗнч(СвойствоXDTO) = Тип("СписокXDTO")
		ИЛИ НЕ ЗначениеЗаполнено(СвойствоXDTO) Тогда
		
		СвойствоЗаполнено = Ложь;
		
	КонецЕсли;
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

Функция ОбъектXDTOСодержитСвойство(ОбъектXDTO, Свойство)
	
	ЕстьСвойство = Ложь;
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат ЕстьСвойство;
	КонецЕсли;
	
	Попытка
		ЕстьСвойство = ОбъектXDTO.Свойства().Получить(Свойство) <> Неопределено
			И ОбъектXDTO[Свойство] <> Неопределено;
	Исключение
	КонецПопытки;
	
	Возврат ЕстьСвойство;
	
КонецФункции

// Возвращает массив, содержащий объекты XDTO 
//	или объект XDTO, если тип переданного параметра "ОбъектXDTO".
//
// Параметры
//	СписокXDTO - СписокXDTO, ОбъектXDTO - список XDTO, объекты которого нужно получить
//
// Возвращаемое значение
//	Массив - массив свойств объекта XDTO.
//
Функция ПолучитьМассивОбъектовСпискаXDTO(СписокXDTO)
	
	МассивОбъектовXDTO = Новый Массив;
	
	Если ТипЗнч(СписокXDTO) = Тип("СписокXDTO") Тогда
		
		Для каждого ОбъектXDTO Из СписокXDTO Цикл 
			МассивОбъектовXDTO.Добавить(ОбъектXDTO);
		КонецЦикла;
		
	Иначе
		МассивОбъектовXDTO.Добавить(СписокXDTO);
	КонецЕсли;
	
	Возврат МассивОбъектовXDTO;
	
КонецФункции

//Преобразует строку даты вида 2016-03-28 и строку времени 23:59:59 к значению типа Дата("Дата и время")
Функция ПолучитьДатуВремяИзСтроки(ДатаСтрока, ВремяСтрока = "")
	
	ДатаВремя = Дата(1,1,1);
	
	Попытка
		
		Если ТипЗнч(ДатаСтрока) = Тип("Дата")
			И ТипЗнч(ВремяСтрока) = Тип("Дата") Тогда
			
			ДатаВремя = Дата(Формат(ДатаСтрока, "ДФ=dd.MM.yyyy") + " " + Формат(ВремяСтрока, "ДЛФ=T"));
		КонецЕсли;
		
		Если ДатаВремя = Дата(1,1,1) Тогда
			
			Если ЗначениеЗаполнено(ВремяСтрока) Тогда
				Время = СтрЗаменить(ВремяСтрока, ":", "");
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + Время);
			Иначе
				ДатаВремя = Дата(СтрЗаменить(ДатаСтрока, "-", "") + "000000");
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
	КонецПопытки;
	
	Возврат ДатаВремя;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(ЗначениеСтрока)
	
	ЗначениеЧисло = 0;
	
	Попытка
		ЗначениеЧисло = Число(ЗначениеСтрока);
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеЧисло;
	
КонецФункции

// Формирует расширенное описание ошибки.
//
// Параметры:
//	ТекстНачалаСообщения - Строка
//	ТекстОкончанияСообщения - Строка
//
// Возвращаемое значение:
//	Строка - Сформированное описание ошибки.
//
Функция ОписаниеИсключительнойОшибки(ТекстНачалаСообщения = "", ТекстОкончанияСообщения = "")
	
	ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	
	ТекстСообщения = НСтр("ru = 'Произошла ошибка:'")
		+ " " + ТекстНачалаСообщения
		+ ?(ПустаяСтрока(ТекстОкончанияСообщения), "", Символы.ПС + ТекстОкончанияСообщения)
		+ ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", Символы.ПС + ПодробноеПредставлениеОшибки);
		
	Возврат ТекстСообщения;
	
КонецФункции

// К существующему описанию добавляет текст
//
Процедура ДобавитьОписаниеОшибки(Событие, Дополнение)

	Если ПустаяСтрока(Событие) Тогда
		Событие = Дополнение;
	Иначе
		Событие = Событие + Символы.ПС + Дополнение;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьДанныеДляСопоставления(Документ, ПараметрыЗаказа)
	
	НеСопоставленныеДанные = Новый Структура;
	ЕстьНеСопоставленныеОбъекты = Ложь;
	Если ПараметрыЗаказа.Свойство("ДанныеКонтрагента") Тогда
		НеСопоставленныеДанные.Вставить("ДанныеКонтрагента",
			ПараметрыЗаказа.ДанныеКонтрагента);
	КонецЕсли;
	
	Если ПараметрыЗаказа.Свойство("ДанныеСпособаДоставки") Тогда
		НеСопоставленныеДанные.Вставить("ДанныеСпособаДоставки",
			ПараметрыЗаказа.ДанныеСпособаДоставки);
	КонецЕсли;
	
	Если ПараметрыЗаказа.Свойство("ДанныеНоменклатуры")
		И ПараметрыЗаказа.ДанныеНоменклатуры.Количество() > 0 Тогда
		
		НеСопоставленныеДанные.Вставить("ДанныеНоменклатуры",
			ПараметрыЗаказа.ДанныеНоменклатуры);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НеСопоставленныеДанные) Тогда
		НовыеОбъекты = РегистрыСведений.НесопоставленныеОбъектыИнтернетМагазина.СоздатьМенеджерЗаписи();
		НовыеОбъекты.Документ = Документ;
		НовыеОбъекты.ДанныеОбъекта = Новый ХранилищеЗначения(НеСопоставленныеДанные, Новый СжатиеДанных(9));
		НовыеОбъекты.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеДляСопоставления(ДокументСсылка) Экспорт
	НесопоставленныеОбъекты =РегистрыСведений.НесопоставленныеОбъектыИнтернетМагазина.СоздатьНаборЗаписей();
	НесопоставленныеОбъекты.Отбор.Документ.Установить(ДокументСсылка);
	НесопоставленныеОбъекты.Записать();
КонецПроцедуры

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС)
	
	ПредставлениеСтавкиНДС = СтавкаНДС;
	
	Если ВРЕГ(ПредставлениеСтавкиНДС) = "БЕЗ НДС" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли СтрНайти("10.00#10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли СтрНайти("20.00#20#0.2#0,2#0.20#0,20#20%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли СтрНайти("18.00#18#0.18#0,18#0.18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли СтрНайти("10.00/110.00#10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли СтрНайти("18.00/118.00#18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	ИначеЕсли СтрНайти("20.00/120.00#20/120#20% / 120%#20%/120%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20_120;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

Функция ДатаИзСтрокиЛюбогоФормата(СтрДата)
	
	Разделители = "-.,/:";
	
	ДлинаСтроки = СтрДлина(СтрДата);
	
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("");
	
	Для НС = 1 По ДлинаСтроки Цикл
		Сим = Сред(СтрДата, НС, 1);
		Если Найти(Разделители, Сим) > 0 Тогда
			МассивПолей.Добавить("");
		ИначеЕсли (Сим = "T" ИЛИ Сим = " ") И МассивПолей.ВГраница() < 3 Тогда
			МассивПолей.Вставить(3, "");
		ИначеЕсли Найти("0123456789", Сим) > 0 Тогда
			МассивПолей[МассивПолей.ВГраница()] = МассивПолей[МассивПолей.ВГраница()] + Сим;
		КонецЕсли;
	КонецЦикла;
	
	Поле1 = Макс(1, XMLЗначение(Тип("Число"), " " + СокрЛП(МассивПолей[0])));
	Поле2 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 1, "1", СокрЛП(МассивПолей[1]))));
	Поле3 = Макс(1, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 2, "1", СокрЛП(МассивПолей[2]))));
	
	Если СтрДлина(МассивПолей[0]) = 8 ИЛИ СтрДлина(МассивПолей[0]) = 14 Тогда
		
		Возврат Дата(МассивПолей[0]);
		
	ИначеЕсли СтрДлина(МассивПолей[0]) = 4 Тогда
		Год   = Мин(3999, Поле1);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле3);
	ИначеЕсли МассивПолей.ВГраница() > 0
		И СтрДлина(МассивПолей[1]) = 4 Тогда
		Год   = Мин(3999, Поле2);
		Месяц = Мин(12,   Поле1);
		День  = Мин(31,   Поле3);
	Иначе
		Год   = Мин(3999, Поле3);
		Месяц = Мин(12,   Поле2);
		День  = Мин(31,   Поле1);
	КонецЕсли;
	
	Час = Мин(23, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 3, "0", СокрЛП(МассивПолей[3]))));
	Мин = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 4, "0", СокрЛП(МассивПолей[4]))));
	Сек = Мин(59, XMLЗначение(Тип("Число"), " " + ?(МассивПолей.ВГраница() < 5, "0", СокрЛП(МассивПолей[5]))));
	
	Возврат Дата(Год, Месяц, День, Час, Мин, Сек);
	
КонецФункции

Функция ЗарегистрироватьОшибкуОбмена(ТекстОшибки, Данные = Неопределено)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Обработки.ОбменСИнтернетМагазином, Данные, ТекстОшибки);
	
КонецФункции

Функция ПараметрыПодключения(CMSИнтернетМагазина, АдресСайта, Логин, Пароль = "")
	
	ПараметрыПодключения = НовыйПараметрыПодключения();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, ОбщегоНазначенияКлиентСервер.СтруктураURI(АдресСайта));

	Если НЕ ЗначениеЗаполнено(ПараметрыПодключения.ПутьНаСервере) Тогда
		ПараметрыПодключения.ПутьНаСервере = АдресСкриптаОбмена(CMSИнтернетМагазина);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Пароль) Тогда
		ПараметрыПодключения.Пароль = Пароль;
	Иначе
		ПараметрыПодключения.Пароль = ПарольПодключения();
	КонецЕсли;
	
	ПараметрыПодключения.Логин                = Логин;
	ПараметрыПодключения.ЗащищенноеСоединение = (ПараметрыПодключения.Схема = "https"); 
	ПараметрыПодключения.Прокси               = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ПараметрыПодключения.Схема);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ВыполнитьЗапросИнициализацияОбмена(Соединение, ПараметрыПодключения, НастройкиЗагрузки, ОписаниеОшибки)
	
	Токен = "";
	ЗаголовкиЗапросов = "";
	
	ОтветСервера = "";
	Если НЕ ВыполнитьАвторизациюДляСоединения(ПараметрыПодключения.ПутьНаСервере, Соединение, ОтветСервера, ОписаниеОшибки) Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Запрос инициализации обмена.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	КукиИмя             = СтрПолучитьСтроку(ОтветСервера, 2);
	КукиЗначение        = СтрПолучитьСтроку(ОтветСервера, 3);
	ЗаголовкиЗапросов   = "Cookie: " + КукиИмя + "=" + КукиЗначение;
	
	МетодЗапроса = ПараметрыПодключения.ПутьНаСервере + "?type=sale";
	
	//Токен и запрос инициализации
	Если НастройкиЗагрузки.CMSИнтернетМагазина = Перечисления.CMSИнтернетМагазина.Bitrix Тогда
		
		ПараметрВерсияОбмена = "";
		
		Токен = ДобавитьТокенБитрикс(ОтветСервера);
		Если НастройкиЗагрузки.ЗагружатьОнлайнОплаты Тогда
			ПараметрВерсияОбмена = "&cmlVersion=2.10";
		КонецЕсли;
		
		СтрокаЗапроса = МетодЗапроса + ПараметрЗапросаHTTP("Инициализация") + Токен + ПараметрВерсияОбмена;
		
		ОтветСервераОИнициализации = ПолучитьДанныеССервера(
			Соединение,
			СтрокаЗапроса,
			ЗаголовкиЗапросов,
			ОписаниеОшибки);
		
		Если ОтветСервераОИнициализации = Неопределено Тогда 
			ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось провести инициализацию обмена. Загрузка с сайта невозможна.'"));	
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Токен,ЗаголовкиЗапросов,МетодЗапроса", Токен, ЗаголовкиЗапросов, МетодЗапроса);
	
КонецФункции

Функция ВыполнитьЗапросПолучитьДанные(Соединение, ДанныеСеанса, ОписаниеОшибки)
	
	СтрокаXML = "";
	
	СтрокаЗапроса = ДанныеСеанса.МетодЗапроса + ПараметрЗапросаHTTP("ПолучитьДанные") + ДанныеСеанса.Токен;
	
	ОтветСервераПолучитьДанные = ПолучитьДанныеССервера(
		Соединение,
		СтрокаЗапроса,
		ДанныеСеанса.ЗаголовкиЗапросов,
		ОписаниеОшибки);
	
	Если ОтветСервераПолучитьДанные = Неопределено 
			ИЛИ ОписаниеОшибки <> "" Тогда 
		ДобавитьОписаниеОшибки(ОписаниеОшибки, НСтр("ru = 'Не удалось получить ответ от сервера'"));
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервераПолучитьДанные);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(ОтветСервераПолучитьДанные, "PK") Тогда
		СтрокаXML = РаспаковатьZIPАрхив(ОтветСервераПолучитьДанные, ОписаниеОшибки);
	ИначеЕсли СтрНачинаетсяС(ОтветСервераПолучитьДанные, "<?xml")
		ИЛИ СтрНачинаетсяС(ОтветСервераПолучитьДанные, "<КоммерческаяИнформация") Тогда
		СтрокаXML = ОтветСервераПолучитьДанные;
	ИначеЕсли СтрНачинаетсяС(ОтветСервераПолучитьДанные, "failure") Тогда
		ДобавитьОписаниеОшибки(ОписаниеОшибки, ОтветСервераПолучитьДанные);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаXML;
	
КонецФункции

Функция ВыполнитьЗапросЗавершениеЗагрузки(Соединение, ДанныеСеанса, ОписаниеОшибки)
	
	СтрокаЗапроса = ДанныеСеанса.МетодЗапроса + ПараметрЗапросаHTTP("УспешноеЗавершениеИмпорта") + ДанныеСеанса.Токен;
	
	ОтветСервера = ПолучитьДанныеССервера(
		Соединение,
		СтрокаЗапроса,
		ДанныеСеанса.ЗаголовкиЗапросов,
		ОписаниеОшибки);
	
	Если ОтветСервера = Неопределено ИЛИ СтрНачинаетсяС(ОтветСервера, "failure") Тогда 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция НовыйСтатистикаЗагрузки()
	
	СтатистикаЗагрузки = Новый Структура("Заказы, ОнлайнОплаты");
	
	Заказы = Новый Структура;
	Заказы.Вставить("Обработано", 0);
	Заказы.Вставить("Создано"   , Новый Массив);
	Заказы.Вставить("Обновлено" , Новый Массив);
	Заказы.Вставить("Пропущено" , Новый Соответствие); // Ключ - заказ, Значение - причина
	
	ОнлайнОплаты = Новый Структура;
	ОнлайнОплаты.Вставить("Обработано", 0);
	ОнлайнОплаты.Вставить("Создано"   , Новый Массив);
	ОнлайнОплаты.Вставить("Обновлено" , Новый Массив);
	ОнлайнОплаты.Вставить("Пропущено" , Новый Соответствие); // Ключ - оплата, Значение - причина
	
	СтатистикаЗагрузки.Заказы = Заказы;
	СтатистикаЗагрузки.ОнлайнОплаты = ОнлайнОплаты;
	
	Возврат СтатистикаЗагрузки;
	
КонецФункции

Функция ПарольПодключения()
	
	ИдентификаторПодсистемы = ОбменСИнтернетМагазином.ИдентификаторПодсистемы();
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ИдентификаторПодсистемы, "Пароль");
	
КонецФункции

Функция ДобавитьТокенБитрикс(ОтветСервера)
	
	// Ключ сессии обмена (или "Токен")
	Токен = СтрПолучитьСтроку(ОтветСервера, 4);
	Если Токен<>"" Тогда
		Возврат "&" + Токен;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти


