#Область ПрограммныйИнтерфейс

Функция ОткрытьФормуДлительнойОперацииОтправки(Организация,
		Предмет,
		ЭтапыОтправки = Неопределено,
		РезультатОтправки = Неопределено) Экспорт
	
	ПараметрыФормыДлительнойОперации = ДлительныеОперацииОбменаСБанкамиКлиент.
		ПараметрыДлительногоОбмена();
	ПараметрыФормыДлительнойОперации.ПараметрыРежима.ЭтоОбменИзФормыПредмета = Истина;
	ПараметрыФормыДлительнойОперации.Организации = Новый Массив;
	ПараметрыФормыДлительнойОперации.Организации.Добавить(Организация);
	ПараметрыФормыДлительнойОперации.Предмет = Предмет;
	ПараметрыФормыДлительнойОперации.ВыводитьПроценты = Ложь;
	ПараметрыФормыДлительнойОперации.ЗаголовокПредмета = НСтр("ru='Отчет'");
	ПараметрыФормыДлительнойОперации.ЭтапыОбмена = ЭтапыОтправки;
	ПараметрыФормыДлительнойОперации.РезультатОтправки = РезультатОтправки;
	
	ФормаДлительнойОперации =
		ДлительныеОперацииОбменаСБанкамиКлиент.ПоказатьФормуОбмена(
			ПредопределенноеЗначение("Перечисление.СервисыОбменаСБанками.ФинансоваяОтчетность"),
			ПараметрыФормыДлительнойОперации);
			
	Возврат ФормаДлительнойОперации;
	
КонецФункции

Процедура ОткрытьПротокол(Предмет,
		Транзакция = Неопределено,
		Форма = Неопределено,
		УникальныйИдентификатор = Неопределено,
		ПоказыватьГиперссылкуЭтаповОтправки = Истина) Экспорт
	
	Если Транзакция <> Неопределено Тогда
		// Если задана конкретная транзакция открываем протокол на основании неё.
		РезультатПолученияПротокола = УниверсальныйОбменСБанкамиВызовСервера.
			ПротоколОбработкиОтчетностиБанком(Транзакция,
				ФинОтчетностьВБанкиВызовСервера.ТипыДокументовПротокола());
	Иначе
		// Определяем протокол по предмету.
		РезультатПолученияПротокола = УниверсальныйОбменСБанкамиВызовСервера.
			ПротоколОбработкиОтчетностиБанком(Предмет,
				ФинОтчетностьВБанкиВызовСервера.ТипыДокументовПротокола(),
				ФинОтчетностьВБанкиВызовСервера.ТипыТранзакцийПротокола());
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РезультатПолученияПротокола", РезультатПолученияПротокола);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ДополнительныеПараметры.Вставить("ПоказыватьГиперссылкуЭтаповОтправки", ПоказыватьГиперссылкуЭтаповОтправки);
	
	Если НЕ РезультатПолученияПротокола.Выполнено Тогда
		Если РезультатПолученияПротокола.ДанныеНеРасшифрованы Тогда
			Оповещение = Новый ОписаниеОповещения("ОткрытьПротоколПослеВопросаОРасшифровке",
				ФинОтчетностьВБанкиСлужебныйКлиент,
				ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, НСтр("ru='Данные сообщения не расшифрованы. Расшифровать?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФинОтчетностьВБанкиСлужебныйКлиент.ОткрытьПротоколЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПослеЗапускаСистемы() Экспорт
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыРаботыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика = ФинОтчетностьВБанкиКлиентСервер.
		НовыеПараметрыОбработчикаОжиданияВходящихСообщений();
	ФинОтчетностьВБанкиВызовСервера.
		ХранилищеОбщихНастроекСохранить(
			"ПараметрыОбработчикаОжиданияВходящихСообщений", "",
			ПараметрыОбработчика);
	
	ФинОтчетностьВБанкиСлужебныйКлиент.
		ПодключениеОбработчикаОжиданияАвтообмена(Истина, Ложь);
	
КонецПроцедуры

Процедура СохранитьПротокол(Префикс, Банк, Организация, ДанныеПротокола, ДанныеПодписи = Неопределено) Экспорт
	
	Шаблон = НСтр("ru='%1_%2_%3.xml'");
	ИмяФайла = СтрШаблон(Шаблон, Префикс, Банк, Организация);
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла, "");
	
	Файлы = Новый Массив;
	
	Описание = Новый ОписаниеПередаваемогоФайла;
	Описание.Имя =  ИмяФайла;
	Описание.Хранение = ПоместитьВоВременноеХранилище(ДанныеПротокола);
	Файлы.Добавить(Описание);
	
	Если ДанныеПодписи <> Неопределено Тогда
		Описание = Новый ОписаниеПередаваемогоФайла;
		Описание.Имя = ИмяФайла + ".p7s";
		Описание.Хранение = ПоместитьВоВременноеХранилище(ДанныеПодписи);
		Файлы.Добавить(Описание);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"СохранитьПротоколПослеСохранения",
		ФинОтчетностьВБанкиСлужебныйКлиент);
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение,Файлы);
	
КонецПроцедуры

// Оповещаем о шифровании и подписании.
Процедура ОповеститьОШифровании(Организация = Неопределено) Экспорт
	
	ПараметрыСменыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
		НовыеПараметрыСменыЭтапаОбмена();
	ПараметрыСменыЭтапа.Организация = Организация;
	ПараметрыСменыЭтапа.Имя = 
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаПодписаниеШифрованиеСообщений();
		
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОСменеЭтапаОбмена(
		ПараметрыСменыЭтапа);
	
КонецПроцедуры

// Оповещаем об отправке.
Процедура ОповеститьОбОтправке(Организация = Неопределено) Экспорт
	
	ПараметрыСменыЭтапа = ДлительныеОперацииОбменаСБанкамиКлиентСервер.
		НовыеПараметрыСменыЭтапаОбмена();
	ПараметрыСменыЭтапа.Организация = Организация;
	ПараметрыСменыЭтапа.Имя = 
		ДлительныеОперацииОбменаСБанкамиКлиентСервер.ИмяЭтапаОбменаОтправкаСообщений();
		
	ДлительныеОперацииОбменаСБанкамиКлиент.ОповеститьОСменеЭтапаОбмена(
		ПараметрыСменыЭтапа);
	
КонецПроцедуры

// Открывает форму с этапи последнего документооборота по предмету обмена.
//
// Параметры:
//	Предмет - ДокументСсылка.ФинОтчетВБанк - Ссылка на отчет в банк.
//
Процедура ПоказатьФормуСостоянияДокументооборота(Предмет) Экспорт

	Документообороты = УниверсальныйОбменСБанкамиВызовСервера.ДокументооборотыПоПредмету(Предмет);
	Если Документообороты.Количество() > 0 Тогда
		// Отображаем форму последнего документооборота.
		Документооборот = Документообороты[0];
		УниверсальныйОбменСБанкамиКлиент.ПоказатьФормуСостоянияДокументооборота(Документооборот);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Отчет еще не был отправлен'"));
	КонецЕсли;

КонецПроцедуры

// Стандартная функция конструктор для результата, описывающего действие (отправку или подписание) с транзакциями.
//
// Возвращаемое значение:
//   Структура - чем закончилась отработка транзакций взаимодействия с сервисом:
//               * ТипТранзакции - ПеречислениеСсылка - к чему относится транзакция;
//               * НеОтправленныеТранзакции - Массив - с чем возникли проблемы;
//               * КоличествоУспешноОбработано - Число - с чем не возникло проблем
//
Функция ОписаниеТранзакций() Экспорт
	
	ОписаниеТранзакций = Новый Структура;
	ОписаниеТранзакций.Вставить("ТипТранзакции",
		ПредопределенноеЗначение("Перечисление.ТипыТранзакцийОбменаСБанками.ПустаяСсылка"));
	ОписаниеТранзакций.Вставить("НеОтправленныеТранзакции", Новый Массив);
	ОписаниеТранзакций.Вставить("КоличествоУспешноОбработано", 0);
	
	Возврат ОписаниеТранзакций;
	
КонецФункции

// Открывает форму ошибки, содержащую секцию "Подробнее".
//
// Параметры:
//  ОписаниеОшибки - Строка - текст, выводимый в предупреждении.
//  ФормаСОшибками - ФормаКлиентскогоПриложения - владелец для формы с текстом ошибки.
//  Заголовок    - Строка - заголовок предупреждения.
//  ОписаниеТранзакций - Структура - см. ОписаниеТранзакций()
//  ДействиеПослеПредупреждения - ОписаниеОповещения - оповещение о закрытии формы.
//
Процедура ПоказатьОшибку(ОписаниеОшибки, ФормаСОшибками, Заголовок = "", ОписаниеТранзакций = Неопределено,
							ДействиеПослеПредупреждения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	Если Не ПустаяСтрока(Заголовок) Тогда
		
		ПараметрыФормы.Вставить("Заголовок", Заголовок);
		
	КонецЕсли;
	
	Если ОписаниеТранзакций <> Неопределено Тогда
		
		ПараметрыФормы.Вставить("ТипТранзакции",               ОписаниеТранзакций.ТипТранзакции);
		ПараметрыФормы.Вставить("НеОтправленныеТранзакции",    ОписаниеТранзакций.НеОтправленныеТранзакции);
		ПараметрыФормы.Вставить("КоличествоУспешноОбработано", ОписаниеТранзакций.КоличествоУспешноОбработано);
		
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.СообщениеОбОшибкахУниверсальныйОбменСБанками",
		ПараметрыФормы, ФормаСОшибками, , , , ДействиеПослеПредупреждения);
	
КонецПроцедуры

#КонецОбласти