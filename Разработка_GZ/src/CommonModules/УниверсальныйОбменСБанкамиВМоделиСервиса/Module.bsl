
#Область ПрограммныйИнтерфейс

// Регистрирует обработчики поставляемых данных за день и за все время
//
// Параметры: 
//   Обработчики - ТаблицаЗначений - таблица для добавления обработчиков с колонками:
//     * ВидДанных - Строка - код вида данных, обрабатываемый обработчиком.
//     * КодОбработчика - Строка - будет использоваться при восстановлении обработки данных после сбоя.
//     * Обработчик - ОбщийМодуль - модуль, содержащий следующие процедуры:
//          ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//          ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//          ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = "УслугиБанков";
	Обработчик.КодОбработчика = "УслугиБанков";
	Обработчик.Обработчик = УниверсальныйОбменСБанкамиВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, и если да - установить флажок Загружать .
// 
// Параметры:
//   Дескриптор  - ОбъектXDTO Descriptor.
//   Загружать   - булево, возвращаемое
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = "УслугиБанков" Тогда
		// Проверка, что есть хотя бы одно изменение по сравнению с ранее переданными поставляемыми данными, осуществляется
		// путем вычисления хеш-функции от всех текстов передаваемых файлов: если ничего не поменялось, то поставляемые
		// данные не будут отправлены и сюда не попадут.
		// Проверка, что конкретная услуга или банк изменились, осуществляется путем сравнения версии в пришедших данных
		// и в данных информационной базы: если объект не менялся, то далее в ОбработатьНовыеДанные() он не будет перезаписан.
		// Поэтому всегда загружаем новые данные.
		
		// Проверяем версию формата данных.
		Если НЕ ПроверитьВерсиюФормата(Дескриптор) Тогда
			Возврат;
		КонецЕсли;
		
		Загружать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные(), позволяет разобрать данные.
//
// Параметры:
//   Дескриптор  - ОбъектXDTO Дескриптор.
//   ПутьКФайлу  - Строка - полное имя извлеченного файла. Файл будет автоматически удален после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType <> "УслугиБанков"  Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем версию формата данных.
	Если НЕ ПроверитьВерсиюФормата(Дескриптор) Тогда
		Возврат;
	КонецЕсли;
	
	КаталогРаспаковки = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПолучитьИмяВременногоФайла());
	СоздатьКаталог(КаталогРаспаковки);
	
	Попытка
		
		Архиватор = Новый ЧтениеZipФайла(ПутьКФайлу);
		Архиватор.ИзвлечьВсе(КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Архиватор.Закрыть();
		
	Исключение

		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.БанкиУниверсальногоОбмена, ,
			НСтр("ru = 'Не удалось распаковать архив с поставляемыми данными.'"));
		Возврат;
		
	КонецПопытки;
	
	ИмеющиесяФайлы = НайтиФайлы(КаталогРаспаковки, "*");
	
	// Сначала загружаем банки, затем услуги банков.
	ПозицияОбхода = 0;
	КоличествоФайлов = ИмеющиесяФайлы.Количество();
	
	НачатьТранзакцию();
	
	Попытка
		
		// Включаем блокировку справочников, на случай, если загрузка данных запустилась параллельно.
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.БанкиУниверсальногоОбмена");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.УслугиБанков");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ДанныеСервисовОбменаСБанками");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		// Загрузка банков.
		Пока ПозицияОбхода < КоличествоФайлов Цикл
			
			Файл = ИмеющиесяФайлы[ПозицияОбхода];
			Если СтрНачинаетсяС(Файл.Имя, "банк ") Тогда

				УниверсальныйОбменСБанками.ПолучитьИнформациюОБанкеИзФайла(Файл.ПолноеИмя);
				ИмеющиесяФайлы.Удалить(ПозицияОбхода);
				КоличествоФайлов = КоличествоФайлов - 1;

			ИначеЕсли СтрНачинаетсяС(Файл.Имя, "сервис ") Тогда
				
				УниверсальныйОбменСБанками.ПолучитьИнформациюОСервисеИзФайла(Файл.ПолноеИмя);
				ИмеющиесяФайлы.Удалить(ПозицияОбхода);
				КоличествоФайлов = КоличествоФайлов - 1;
				
			Иначе
				
				ПозицияОбхода = ПозицияОбхода + 1;
				
			КонецЕсли;
		
		КонецЦикла;
		
		// Загрузка услуг банков.
		Для каждого Файл Из ИмеющиесяФайлы Цикл
		
			УниверсальныйОбменСБанками.ПолучитьИнформациюОбУслугеБанкаИзФайла(Файл.ПолноеИмя);
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(ИмяСобытияВЖурналеРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
	УдалитьФайлы(КаталогРаспаковки);
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя.
//
// Параметры:
//   Дескриптор  - ОбъектXDTO Дескриптор.
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПроверитьВерсиюФормата(Дескриптор)
	
	// Проверяем версию формата данных.
	ПоддерживаемаяВерсияФормата = "1.0";
	ВерсияФормата = ПоддерживаемаяВерсияФормата;
	
	Для Каждого Характеристика Из УниверсальныйОбменСБанками.ЗначениеВКоллекцию(Дескриптор.Properties.Property) Цикл
		Если Характеристика.Code = "ВерсияФормата" Тогда
			ВерсияФормата = Характеристика.Value;
		КонецЕсли;
	КонецЦикла;
	
	Если ВерсияФормата <> ПоддерживаемаяВерсияФормата Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Функция ИмяСобытияВЖурналеРегистрации()
	
	Возврат НСтр("ru = 'Поставляемые данные. Получение списка услуг банков'");
	
КонецФункции

#КонецОбласти