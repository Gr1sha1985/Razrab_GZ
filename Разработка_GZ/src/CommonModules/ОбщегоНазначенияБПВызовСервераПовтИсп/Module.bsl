#Область СлужебныйПрограммныйИнтерфейс

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ

// Возвращает головную организацию для заданной организации
// Если для организации реквизит ГоловнаяОрганизация не заполнен 
// это значит, что сама организация является головной
//
// Параметры
//  Организация – СправочникСсылка.Организации
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   СправочникСсылка.Организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт

	ГоловнаяОрганизация = БухгалтерскийУчетПереопределяемый.ГоловнаяОрганизация(Организация);
	Если Не ЗначениеЗаполнено(Организация) ИЛИ Не ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		Возврат Организация;
	Иначе
		Возврат ГоловнаяОрганизация; 
	КонецЕсли;

КонецФункции 

Функция ЭтоЮрЛицо(Организация) Экспорт
	
	Возврат Справочники.Организации.ЭтоЮрЛицо(Организация);
	
КонецФункции

Функция ДатаРегистрацииОрганизации(Организация) Экспорт
	
	Возврат Справочники.Организации.ДатаРегистрацииОрганизации(Организация);
	
КонецФункции

Функция ЭтоОбособленноеПодразделение(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат БухгалтерскийУчетПереопределяемый.ОбособленноеПодразделение(Организация);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает список организаций, которые являются обособленными подразделениями
// того же юр.лица, к которому относится переданная организация
//
Функция ПолучитьСписокОбособленныхПодразделений(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ТаблицаГоловнойОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаГоловнойОрганизации КАК ТаблицаГоловнойОрганизации
	|		ПО Организации.ГоловнаяОрганизация = ТаблицаГоловнойОрганизации.ГоловнаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат СписокОП;
	
КонецФункции

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	// Оставлена для совместимости. Следует использовать ВсяОрганизация()
	
	Возврат БухгалтерскийУчетПереопределяемый.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);

КонецФункции 

// Возвращает перечень (фиксированный массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Возврат Новый ФиксированныйМассив(БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	
КонецФункции

// Функция возвращает массив с префиксами организаций в формате БП 2.0
//
Функция ПрефиксыОрганизацийБП20() Экспорт

	Возврат Новый ФиксированныйМассив(ОбщегоНазначенияБПВызовСервера.ПрефиксыОрганизацийБП20());

КонецФункции

Функция ВыводитьПрефиксИБ(Префикс) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Префикс", Префикс);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрефиксыИнформационныхБаз.ПечататьПрефикс
	|ИЗ
	|	РегистрСведений.ПрефиксыИнформационныхБаз КАК ПрефиксыИнформационныхБаз
	|ГДЕ
	|	ПрефиксыИнформационныхБаз.Префикс = &Префикс
	|	И ПрефиксыИнформационныхБаз.ПечататьПрефикс";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

// Функция возвращает фиксированный массив организаций, к данным бухгалтерского учета которых
// у текущего пользователя разрешено требуемое право доступа по RLS.
//
// Функцию можно использовать, если требуется выполнять запросы к данным бухгалтерского учета (регистру Хозрасчетный)
// в привилегированном режиме, но чтобы при этом учитывались настройки доступа по RLS:
// 	1. с помощью текущей функции определяется список доступных организаций
//	2. в текстах запросов к самим данных (регистрам, документам) 
//		устанавливаются отборы по этим организациям
//	3. перед выполнением запроса к данным включается привилегированный режим.
//
// Если аналогичную проверку нужно провести в отношении иных данных, чем регистр Хозрасчетный, следует использовать
// ОрганизацииДанныеКоторыхДоступныПользователю().
//
// Не следует (запрещается) вызывать эти функции из кода, который может выполняться в привилегированном режиме,
// так как это приведет к последующей неверной ее работе вне привилегированного режима:
// может повторно использоваться значение, вычисленное в привилегированном режиме.
//
// Параметры:
//	ПравоНаИзменение - Булево
//		- Истина - если после выполнения запроса данные бухгалтерии предполагается менять
//					и нужно проверить, что у пользователя есть право на изменение;
//		- Ложь - если данные бухгалтерии только отображаются пользователю на чтение,
//					и нужно проверить что у него есть соответствующее право.
// 
Функция ВсеОрганизацииДанныеКоторыхДоступныПоRLS(ПравоНаИзменение) Экспорт
	
	Возврат УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю(
		"РегистрБухгалтерии.Хозрасчетный",
		ПравоНаИзменение);
	
КонецФункции

// Определяет перечень организаций, чтение данных которых разрешено прикладному пользователю
// настройками ограничения доступа на уровне записей.
//
// Функцию можно использовать, если требуется получать данные в привилегированном режиме для предоставления их пользователю - 
// она позволяет ограничить эти данные в соответствии с настройками.
//
// Порядок использования функции описан в ВсеОрганизацииДанныеКоторыхДоступныПоRLS().
// При использовании функции следует иметь в виду, что в общем случае ограничить выбираемые данные
// в соответствии с ОДД по Организации недостаточно:
// 1. в прикладном решении могут использоваться и иные виды доступа, не только Организации
// 2. перед установкой привилегированного режима в вызывающем коде следует проверить наличие прав
//    на чтение запрашиваемой таблицы (регистра, документов) в целом.
//
// Не следует (запрещается) вызывать эту функцию из кода, который может выполняться в привилегированном режиме,
// так как это приведет к последующей неверной ее работе вне привилегированного режима:
// может повторно использоваться значение, вычисленное в привилегированном режиме.
//
// Возвращаемое значение:
//  ФиксированныйМассив - содержит СправочникСсылка.Организации
//
Функция ОрганизацииДанныеКоторыхДоступныПользователю() Экспорт
	
	Запрос = Новый Запрос;

	Если Пользователи.ЭтоПолноправныйПользователь(Неопределено, Ложь, Ложь)
	 Или Не УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		// Ограничений по RLS нет, возвращаем все организации из справочника
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
		Возврат Новый ФиксированныйМассив(МассивОрганизаций);
		
	КонецЕсли;
		
	Если ПараметрыСеанса.ОграничениеДоступаНаУровнеЗаписейУниверсально Тогда
	
		// Используется механизм ограничения доступа БСП 3.0.
		// В этом случае проверка права на запись отдельно не учитывается,
		// т.к. права на добавление/изменение/удаление проверяются в момент записи, а не чтения,
		// поэтому считаем, что если есть право на чтение, то может быть доступен и для записи.

		// Список доступных организаций получаем в обычном, непривилегированном режиме.
		// Выбираем список организаций, по которым можно читать записи регистра.

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|			ГДЕ
		|				ДанныеПервичныхДокументов.Организация = Организации.Ссылка)";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		// Если по организации не введено ни одного документа, то считаем, что ее данные можно читать любому пользователю.
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		|		ПО Организации.Ссылка = ДанныеПервичныхДокументов.Организация
		|ГДЕ
		|	ДанныеПервичныхДокументов.Организация ЕСТЬ NULL";
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОрганизаций,
			РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка"));

	Иначе

		// Запрос взят из шаблона #ПоЗначениям роли ДобавлениеИзменениеДанныхБухгалтерии
		// с теми параметрами, с которыми он применяется для справочника Организации,
		// однако без обращения к ТаблицыГруппДоступа.
		//
		// Обращения к ТаблицыГруппДоступа и Справочник.ИдентификаторыОбъектовМетаданных в шаблоне нужны
		// для проверки права к конкретному объекту метаданных.
		// Такая проверка должна быть выполнена до выполнения этой функции.
		
		Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				Справочник.ГруппыДоступа КАК ГруппыДоступа
		|			ГДЕ
		|				ГруппыДоступа.Ссылка В
		|					(ВЫБРАТЬ
		|						ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|					ИЗ
		|						Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|							ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|							ПО
		|								СоставыГруппПользователей.Пользователь = &Пользователь
		|									И СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|				И ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|									ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений
		|									ПО
		|										Значения.ГруппаДоступа = ГруппыДоступа.Ссылка
		|											И Значения.ЗначениеДоступа = Организации.Ссылка
		|											И ГруппыЗначений.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ = ВЫБОР
		|					КОГДА ИСТИНА В
		|							(ВЫБРАТЬ ПЕРВЫЕ 1
		|								ИСТИНА
		|							ИЗ
		|								РегистрСведений.ЗначенияГруппДоступаПоУмолчанию КАК ЗначенияПоУмолчанию
		|							ГДЕ
		|								ЗначенияПоУмолчанию.ГруппаДоступа = ГруппыДоступа.Ссылка
		|								И ТИПЗНАЧЕНИЯ(ЗначенияПоУмолчанию.ТипЗначенийДоступа) = ТИПЗНАЧЕНИЯ(Организации.Ссылка)
		|								И ЗначенияПоУмолчанию.ВсеРазрешены = ЛОЖЬ)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)";
		
		// Доступ к настройкам RLS выполняется в привилегированном режиме.
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(МассивОрганизаций);
	
КонецФункции

// Определяет фактическое использование функционала оплаты платежными картами.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Проверяемая организация.
//
// Возвращаемое значение:
//	Булево
//
Функция ПрименяетсяОплатаПлатежнымиКартами(Организация) Экспорт

	// Считаем, что если есть вид с такими типом оплаты, то функционал используется.
	//
	// Если в ИБ введены только документы поступления на расчетный счет
	// с видом операции ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам
	// без введенных элементов справочника ВидыОплатОрганизаций,
	// то это интерпретируется как обычное поступлению от покупателя, только с 57 счета
	// и без учета особенностей совмещения спец.режимов.

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.Организация = &Организация
	|	И ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит))";

	УстановитьПривилегированныйРежим(Истина);

	Возврат НЕ Запрос.Выполнить().Пустой()

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ НАСТРОЕК

// Возвращает валюту регламентированного учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту рег. учета. Если валюта рег. учета не заполнена - возвращает пустую ссылку на валюту
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Валюты
//
Функция ПолучитьВалютуРегламентированногоУчета() Экспорт
	
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗНАЧЕНИЯ ДЛЯ ИНИЦИАЛИЗАЦИИ ДОКУМЕНТОВ

Функция ПодразделениеПоУмолчанию(Организация) Экспорт
	
	// Проверим, есть ли выбор: возможно, подразделение у этой организации всего одно 
	// либо пользователю доступно всего одно подразделение
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И НЕ ПодразделенияОрганизаций.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	// Проверим, не выполнил ли пользователь корректную настройку
	
	ПодразделениеЗатрат = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	
	Если ЗначениеЗаполнено(ПодразделениеЗатрат) И ПодразделениеЗатрат.Владелец = Организация Тогда
		Возврат ПодразделениеЗатрат;
	КонецЕсли;
	
	// Нельзя определить подразделение
	
	Возврат БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	
КонецФункции

// Функция возвращает либо текущее переданное подразделение,
// если его владельцем является указанная организация, либо
// подразделение по умолчанию.
//
Функция ПолучитьПодразделениеПриИзмененииСчета(Подразделение, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Возврат ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделениеПриИзмененииСчета(Подразделение, Организация, ПодразделениеПоУмолчанию);

КонецФункции

#Область ОтправкаЗаявокВSmartway

// Smartway. Получение данных партнера с сервиса ИТС.
Функция ДанныеSmartway() Экспорт
	
	Возврат Обработки.ОтправкаЗаявокВSmartway.ДанныеSmartway();
	
КонецФункции

#КонецОбласти

#КонецОбласти
