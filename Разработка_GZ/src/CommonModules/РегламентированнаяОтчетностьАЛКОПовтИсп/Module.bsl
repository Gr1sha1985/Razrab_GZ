////////////////////////////////////////////////////////////////////////////////
//
// Серверные процедуры и функции регламентированных отчетов ФСРАР общего назначения 
// с кешируемым результатом на всремя сеанса.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			
//			* УникальныйНомерФИАС 	- Уникальный идентификатор адреса в системе ФИАС.
//			* ДополнительныеКоды	- пустая структура
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//
//			* ТипДома
//			* ТипКорпуса
//			* ТипКвартиры
//
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт

	СтруктураАдреса = Новый Структура;
	
	ВерсияБСПЧислом = Неопределено;
	ИмяОбщегоМодуляРаботаСАдресами = ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом);

	Если ИмяОбщегоМодуляРаботаСАдресами = "РаботаСАдресами" Тогда
		
		Попытка
			ОбщийМодульРаботаСАдресамиКлиентСервер = ОбщегоНазначения.ОбщийМодуль("РаботаСАдресамиКлиентСервер");
		Исключение

			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Не найден общий модуль "
				+ ИмяОбщегоМодуляРаботаСАдресами + "!'");
			Сообщение.Сообщить();

			Возврат Неопределено;

		КонецПопытки;
		
		СтруктураАдреса = ОбщийМодульРаботаСАдресамиКлиентСервер.ПоляАдреса();
		
	Иначе
		
		СтруктураАдреса = Новый Структура;		
		
		СтруктураАдреса.Вставить("Индекс", "");		
		СтруктураАдреса.Вставить("Регион", "");
		СтруктураАдреса.Вставить("Район", "");
		СтруктураАдреса.Вставить("Город", "");
		СтруктураАдреса.Вставить("НаселенныйПункт", "");
		СтруктураАдреса.Вставить("Улица", "");
			
	КонецЕсли; 
	
	СтруктураАдреса.Вставить("КодСтраны", "643");
	СтруктураАдреса.Вставить("Страна", "РОССИЯ");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Литера", "");
	СтруктураАдреса.Вставить("Квартира", "");
	
	СтруктураАдреса.Вставить("ТипДома", "");
	СтруктураАдреса.Вставить("ТипКорпуса", "");
	СтруктураАдреса.Вставить("ТипКвартиры", "");

	СтруктураАдреса.Вставить("ПредставлениеАдреса", "");
	СтруктураАдреса.Вставить("Представление", "");
	
	ПустойАдресXML = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("XML");
	
	СтруктураАдреса.Вставить("АдресXML", ПустойАдресXML);
	
	ПустойАдресJSON = РегламентированнаяОтчетностьАЛКОКлиентСервер.ПустойАдресXMLилиJSON("JSON");
	
	СтруктураАдреса.Вставить("АдресJSON", ПустойАдресJSON);
	
	СтруктураАдреса.Вставить("ПроверенАдрес", Ложь);
	СтруктураАдреса.Вставить("ДатаПроверки", 0);
	СтруктураАдреса.Вставить("ЕстьXML", Ложь);
	СтруктураАдреса.Вставить("ЕстьJSON", Ложь);
	
	СтруктураАдреса.Вставить("УникальныйНомерФИАС", "");
	

	Попытка
		ОбщийМодульРаботаСАдресами = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляРаботаСАдресами);
	Исключение

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не найден общий модуль "
			+ ИмяОбщегоМодуляРаботаСАдресами + "!'");
		Сообщение.Сообщить();

		Возврат СтруктураАдреса;

	КонецПопытки;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КодыКЛАДР", Истина);
	ДополнительныеПараметры.Вставить("КодыАдреса", Истина);
	ДополнительныеПараметры.Вставить("ПроверитьАдрес", Ложь);
	ДополнительныеПараметры.Вставить("НаименованиеВключаетСокращение", Истина);
	
	СтруктураАдресаСМассивами = ОбщийМодульРаботаСАдресами.СведенияОбАдресе(ПустойАдресJSON, ДополнительныеПараметры);
	
	РегламентированнаяОтчетностьАЛКОКлиентСервер.ОбъединитьСтруктурыИлиСоответствия(
												СтруктураАдреса, СтруктураАдресаСМассивами);
	
	Возврат СтруктураАдреса;

КонецФункции

// Формирует пустую структуру сведений по обособленному подразделению, 
// состоящей из Наименования, КПП и адресной информации.
//
// Параметры:
// 		Нет.
// Возвращаемое значение:
// 		Структура, со свойствами:
//			* Наименование 			- Наимкенование ОП.
//			* КПП					- КПП ОП.
//
//			Адресные поля
//			* КодСтраны
//			* Страна
//			* Индекс
//			* КодРегиона
//			* Регион
//			* Район
//			* Город
//			* НаселенныйПункт
//			* Улица
//			* Дом
//			* Корпус
//			* Литера
//			* Квартира
//
//			* ТипДома
//			* ТипКорпуса
//			* ТипКвартиры
//
//			* ПредставлениеАдреса
//			* АдресXML				- XML представление адреса подсистемы УправлениеКонтактнойИнформацией
//
Функция ПолучитьПустуюСтруктуруСведенийОбОП() Экспорт

	СтруктураПустогоАдреса = ПолучитьПустуюСтруктуруАдреса();	
	СтруктураСведенияОбОП = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПустогоАдреса);
	
	СтруктураСведенияОбОП.Вставить("Наименование", "");
	СтруктураСведенияОбОП.Вставить("КПП", "");

	Возврат СтруктураСведенияОбОП;

КонецФункции

// Возвращает номер версии подсистемы, встроенной в конфигурацию.
//
// Параметры:
//  ИмяПодсистемы  - Строка - имя подсистемы, определенное в конфигурации.
// Возвращаемое значение:
//  Строка - версия подсистемы, например "1.0.1.1".
//
Функция ВерсияПодсистемыКонфигурации(знач ИмяПодсистемы) Экспорт

	Возврат ОбновлениеИнформационнойБазы.ВерсияИБ(ИмяПодсистемы);

КонецФункции

// Возвращает версию подсистемы в виде числового значения.
//
// Параметры
//  ИмяПодсистемы  - Строка - имя подсистемы, определенное в конфигурации. 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюПодсистемыКонфигурацииЧислом(знач ИмяПодсистемы) Экспорт

	Версия = ВерсияПодсистемыКонфигурации(ИмяПодсистемы);

	Возврат ПолучитьВерсиюЧислом(Версия);

КонецФункции

// Возвращает приведенное к числу значение версии подсистемы.
// Параметры
//	 СтрокаВерсии - Строка. Строка версии вида "0.0.0.0".
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюЧислом(знач СтрокаВерсии) Экспорт

	ПервоеЧисло = 0;
	ВтороеЧисло = 0;
	ТретьеЧисло = 0;
	ЧетвертоеЧисло = 0;

	Если ТипЗнч(СтрокаВерсии) = Тип("Строка")
			И ЗначениеЗаполнено(СтрокаВерсии) Тогда

		СтрокаВерсииБезТочек = СтрЗаменить(СтрокаВерсии, ".", "");
		СтрокаВерсииБезТочек = СтрЗаменить(СтрокаВерсииБезТочек, " ", "");

		ПравильнаяСтрокаВерсии = РегламентированнаяОтчетностьАЛКО.ВСтрокеВсеЦифры(СтрокаВерсииБезТочек);

		Если НЕ ПравильнаяСтрокаВерсии Тогда
			Возврат 0;
		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ПервоеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ПервоеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ПервоеЧисло = Число(СтрокаВерсии);
			Иначе
				ПервоеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ВтороеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ВтороеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ВтороеЧисло = Число(СтрокаВерсии);
			Иначе
				ВтороеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ТретьеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ТретьеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ТретьеЧисло = Число(СтрокаВерсии);
			Иначе
				ТретьеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

		ПозТочка = СтрНайти(СтрокаВерсии, ".");
		Если ПозТочка > 1 Тогда

			ЧетвертоеЧисло = Число(Лев(СтрокаВерсии, ПозТочка - 1));
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		ИначеЕсли ПозТочка = 1 Тогда

			ЧетвертоеЧисло = 0;
			Если СтрДлина(СтрокаВерсии) >= ПозТочка + 1 Тогда
				СтрокаВерсии = Сред(СтрокаВерсии, ПозТочка + 1);
			Иначе
				СтрокаВерсии = "";
			КонецЕсли;

		Иначе

		// Нет точки.
			Если СтрДлина(СтрокаВерсии) > 0 Тогда
				ЧетвертоеЧисло = Число(СтрокаВерсии);
			Иначе
				ЧетвертоеЧисло = 0;
			КонецЕсли;
			СтрокаВерсии = "";

		КонецЕсли;

	КонецЕсли;

	ЧислоСтрокаВерсии = ПервоеЧисло * 1000000000 + ВтороеЧисло * 1000000
		+ ТретьеЧисло * 1000 + ЧетвертоеЧисло;

	Возврат ЧислоСтрокаВерсии;

КонецФункции

// Возвращает версию подсистемы "СтандартныеПодсистемы" в виде числового значения.
//
// Параметры
//	 
// Возвращаемое значение:
//   Число.
//
Функция ПолучитьВерсиюБСПЧислом() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ВерсияБСП = СтандартныеПодсистемыСервер.ВерсияБиблиотеки();

	УстановитьПривилегированныйРежим(Ложь);

	ВерсияБСПЧислом = ПолучитьВерсиюЧислом(ВерсияБСП);
	
	Версия = РегламентированнаяОтчетностьАЛКОКлиентСервер.СкопироватьЗначение(ВерсияБСПЧислом);

	Возврат Версия;

КонецФункции

Функция ПолучитьИмяОбщегоМодуляРаботаСАдресами(ВерсияБСПЧислом = Неопределено) Экспорт

	Если ВерсияБСПЧислом = Неопределено Тогда
		ВерсияБСПЧислом = ПолучитьВерсиюБСПЧислом();
	КонецЕсли;

	ЧислоВерсияБСП2_4_1 = ПолучитьВерсиюЧислом("2.4.1");

	СтаршеБСП2_4_1 = (ВерсияБСПЧислом >= ЧислоВерсияБСП2_4_1);

	ИмяОбщегоМодуля = ?(СтаршеБСП2_4_1, "РаботаСАдресами", "УправлениеКонтактнойИнформацией");

	Возврат ИмяОбщегоМодуля;

КонецФункции

Функция ВерсияПлатформы() Экспорт

	СистемнаяИнформация 	= Новый СистемнаяИнформация;
	Возврат СистемнаяИнформация.ВерсияПриложения;

КонецФункции

Функция РежимСовместимости() Экспорт

	Возврат Метаданные.РежимСовместимости;

КонецФункции

// Возвращает сокращения частей адреса.
// Предзначена в первую очередь для сокращения поля "иное" или "другое" в случае заполнения.
// Там возможно все что угодно, поэтому представлены максимум вариантов.
// Также используется для сокращения стандартных значений в ТипДома, ТипКорпуса и ТипКвартиры.
//
// Возвращаемое значение:
//      Соответствие - Список сокращений.
//
Функция СокращенияОбъектовАдресацииАдресаРФ() Экспорт
	
	Результат = Новый Соответствие;
	
	// При заполнении поля ИНОЕ, все помещается в "квартиру".
	Результат.Вставить(НСтр("ru = 'иное'"), НСтр("ru = ''")); 
	Результат.Вставить(НСтр("ru = 'другое'"), НСтр("ru = ''")); 
	Результат.Вставить(НСтр("ru = '№'"), НСтр("ru = ''")); 
	
	Результат.Вставить(НСтр("ru = 'дом'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'домом'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'дому'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'доме'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'домов'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'дома'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'домам'"), НСтр("ru = 'д.'"));
	Результат.Вставить(НСтр("ru = 'домами'"), НСтр("ru = 'д.'"));
	
	Результат.Вставить(НСтр("ru = 'владение'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'владением'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'владения'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'владениям'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'владениями'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'владению'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'владений'"), НСтр("ru = 'вл.'"));
	Результат.Вставить(НСтр("ru = 'владении'"), НСтр("ru = 'вл.'"));
	
	Результат.Вставить(НСтр("ru = 'домовл.'"), НСтр("ru = 'дмвл.'"));	
	Результат.Вставить(НСтр("ru = 'домовладение'"), НСтр("ru = 'домовл.'"));
	Результат.Вставить(НСтр("ru = 'домовладением'"), НСтр("ru = 'домовл.'"));
	Результат.Вставить(НСтр("ru = 'домовладения'"), НСтр("ru = 'домовл.'"));
	Результат.Вставить(НСтр("ru = 'домовладениям'"), НСтр("ru = 'домовл.'"));
	Результат.Вставить(НСтр("ru = 'домовладениями'"), НСтр("ru = 'домовл.'"));
	Результат.Вставить(НСтр("ru = 'домовладений'"), НСтр("ru = 'домовл.'"));
	Результат.Вставить(НСтр("ru = 'домовладении'"), НСтр("ru = 'домовл.'"));
	Результат.Вставить(НСтр("ru = 'домовладению'"), НСтр("ru = 'домовл.'"));
	
	Результат.Вставить(НСтр("ru = 'гараж'"), НСтр("ru = 'гар.'"));
	Результат.Вставить(НСтр("ru = 'гаража'"), НСтр("ru = 'гар.'"));
	Результат.Вставить(НСтр("ru = 'гаражами'"), НСтр("ru = 'гар.'"));
	Результат.Вставить(НСтр("ru = 'гаражом'"), НСтр("ru = 'гар.'"));
	Результат.Вставить(НСтр("ru = 'гаражем'"), НСтр("ru = 'гар.'"));
	Результат.Вставить(НСтр("ru = 'гаражей'"), НСтр("ru = 'гар.'"));
	Результат.Вставить(НСтр("ru = 'гаражу'"), НСтр("ru = 'гар.'"));
	Результат.Вставить(НСтр("ru = 'гараже'"), НСтр("ru = 'гар.'"));
	
	Результат.Вставить(НСтр("ru = 'здание'"), НСтр("ru = 'зд.'"));
	Результат.Вставить(НСтр("ru = 'зданием'"), НСтр("ru = 'зд.'"));
	Результат.Вставить(НСтр("ru = 'зданий'"), НСтр("ru = 'зд.'"));
	Результат.Вставить(НСтр("ru = 'здании'"), НСтр("ru = 'зд.'"));
	Результат.Вставить(НСтр("ru = 'здания'"), НСтр("ru = 'зд.'"));
	Результат.Вставить(НСтр("ru = 'зданиям'"), НСтр("ru = 'зд.'"));
	Результат.Вставить(НСтр("ru = 'зданиями'"), НСтр("ru = 'зд.'"));
	Результат.Вставить(НСтр("ru = 'зданию'"), НСтр("ru = 'зд.'"));
	
	Результат.Вставить(НСтр("ru = 'шахта'"), НСтр("ru = 'шх.'"));
	Результат.Вставить(НСтр("ru = 'шахт'"), НСтр("ru = 'шх.'"));
	Результат.Вставить(НСтр("ru = 'шахту'"), НСтр("ru = 'шх.'"));
	Результат.Вставить(НСтр("ru = 'шахты'"), НСтр("ru = 'шх.'"));
	Результат.Вставить(НСтр("ru = 'шахте'"), НСтр("ru = 'шх.'"));
	Результат.Вставить(НСтр("ru = 'шахтам'"), НСтр("ru = 'шх.'"));
	Результат.Вставить(НСтр("ru = 'шахтами'"), НСтр("ru = 'шх.'"));
	Результат.Вставить(НСтр("ru = 'шахтой'"), НСтр("ru = 'шх.'"));
	
	Результат.Вставить(НСтр("ru = 'земельный'"), НСтр("ru = 'зем.'"));
	Результат.Вставить(НСтр("ru = 'земельные'"), НСтр("ru = 'зем.'"));
	Результат.Вставить(НСтр("ru = 'земельным'"), НСтр("ru = 'зем.'"));
	Результат.Вставить(НСтр("ru = 'земельными'"), НСтр("ru = 'зем.'"));
	Результат.Вставить(НСтр("ru = 'земельного'"), НСтр("ru = 'зем.'"));
	Результат.Вставить(НСтр("ru = 'земельному'"), НСтр("ru = 'зем.'"));
	Результат.Вставить(НСтр("ru = 'земельном'"), НСтр("ru = 'зем.'"));
	Результат.Вставить(НСтр("ru = 'земельных'"), НСтр("ru = 'зем.'"));
	
	Результат.Вставить(НСтр("ru = 'участок'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участки'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участка'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участке'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участку'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участков'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участком'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участкам'"), НСтр("ru = 'уч.'"));
	Результат.Вставить(НСтр("ru = 'участками'"), НСтр("ru = 'уч.'"));
	
	Результат.Вставить(НСтр("ru = 'зем. уч.'"), НСтр("ru = 'з/у'"));
		
	Результат.Вставить(НСтр("ru = 'корп.'"), НСтр("ru = 'к.'"));
	Результат.Вставить(НСтр("ru = 'корпус'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпусы'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпуса'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпусе'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпусам'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпусами'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпусу'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпусов'"), НСтр("ru = 'корп.'"));
	Результат.Вставить(НСтр("ru = 'корпусом'"), НСтр("ru = 'корп.'"));
	
	Результат.Вставить(НСтр("ru = 'строение'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'строением'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'строения'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'строениям'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'строениями'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'строений'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'строении'"), НСтр("ru = 'стр.'"));
	Результат.Вставить(НСтр("ru = 'строению'"), НСтр("ru = 'стр.'"));
	
	Результат.Вставить(НСтр("ru = 'лит.'"), НСтр("ru = 'л.'"));
	Результат.Вставить(НСтр("ru = 'литера'"), НСтр("ru = 'лит.'"));
	Результат.Вставить(НСтр("ru = 'литерами'"), НСтр("ru = 'лит.'"));
	Результат.Вставить(НСтр("ru = 'литер'"), НСтр("ru = 'лит.'"));
	Результат.Вставить(НСтр("ru = 'литерой'"), НСтр("ru = 'лит.'"));
	Результат.Вставить(НСтр("ru = 'литеры'"), НСтр("ru = 'лит.'"));
	Результат.Вставить(НСтр("ru = 'литере'"), НСтр("ru = 'лит.'"));
	
	Результат.Вставить(НСтр("ru = 'сооруж.'"), НСтр("ru = 'с-руж.'"));
	Результат.Вставить(НСтр("ru = 'сооружение'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'сооружением'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'сооружению'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'сооружений'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'сооружении'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'сооружения'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'сооружениям'"), НСтр("ru = 'сооруж.'"));
	Результат.Вставить(НСтр("ru = 'сооружениями'"), НСтр("ru = 'сооруж.'"));
		
	Результат.Вставить(НСтр("ru = 'квартира'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'квартиры'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'квартиру'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'квартирам'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'квартирами'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'квартире'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'квартир'"), НСтр("ru = 'кв.'"));
	Результат.Вставить(НСтр("ru = 'квартирой'"), НСтр("ru = 'кв.'"));
		
	Результат.Вставить(НСтр("ru = 'офис'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офисы'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офису'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офиса'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офисам'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офисами'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офисе'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офисов'"), НСтр("ru = 'оф.'"));
	Результат.Вставить(НСтр("ru = 'офисом'"), НСтр("ru = 'оф.'"));
		
	Результат.Вставить(НСтр("ru = 'помещение'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещения'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещению'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещениям'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещениями'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещении'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещений'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещением'"), НСтр("ru = 'пом.'"));
	Результат.Вставить(НСтр("ru = 'помещ.'"), НСтр("ru = 'пом.'"));
	
	Результат.Вставить(НСтр("ru = 'нежилое'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилой'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилая'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилые'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилыми'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилому'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилом'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилым'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежилого'"), НСтр("ru = 'неж.'"));
	Результат.Вставить(НСтр("ru = 'нежил.'"), НСтр("ru = 'неж.'"));
	
	Результат.Вставить(НСтр("ru = 'жилое'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилой'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилая'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилые'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилыми'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилому'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилом'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилым'"), НСтр("ru = 'жил.'"));
	Результат.Вставить(НСтр("ru = 'жилого'"), НСтр("ru = 'жил.'"));
	
	Результат.Вставить(НСтр("ru = 'ком.'"), НСтр("ru = 'к.'"));
	Результат.Вставить(НСтр("ru = 'комната'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'комнаты'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'комнату'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'комнатам'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'комнатами'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'комнате'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'комнат'"), НСтр("ru = 'ком.'"));
	Результат.Вставить(НСтр("ru = 'комнатой'"), НСтр("ru = 'ком.'"));
	
	Результат.Вставить(НСтр("ru = 'этаж'"), НСтр("ru = 'эт.'"));
	Результат.Вставить(НСтр("ru = 'этажа'"), НСтр("ru = 'эт.'"));
	Результат.Вставить(НСтр("ru = 'этажу'"), НСтр("ru = 'эт.'"));
	Результат.Вставить(НСтр("ru = 'этажам'"), НСтр("ru = 'эт.'"));
	Результат.Вставить(НСтр("ru = 'этажами'"), НСтр("ru = 'эт.'"));
	Результат.Вставить(НСтр("ru = 'этаже'"), НСтр("ru = 'эт.'"));
	Результат.Вставить(НСтр("ru = 'этажей'"), НСтр("ru = 'эт.'"));
	Результат.Вставить(НСтр("ru = 'этажом'"), НСтр("ru = 'эт.'"));
	
	Результат.Вставить(НСтр("ru = 'абонентский'"), НСтр("ru = 'аб.'"));
	Результат.Вставить(НСтр("ru = 'абонентского'"), НСтр("ru = 'аб.'"));
	Результат.Вставить(НСтр("ru = 'абонентским'"), НСтр("ru = 'аб.'"));
	Результат.Вставить(НСтр("ru = 'абонентскими'"), НСтр("ru = 'аб.'"));
	Результат.Вставить(НСтр("ru = 'абонентскому'"), НСтр("ru = 'аб.'"));
	
	Результат.Вставить(НСтр("ru = 'ящик'"), НСтр("ru = 'ящ.'"));
	Результат.Вставить(НСтр("ru = 'ящика'"), НСтр("ru = 'ящ.'"));
	Результат.Вставить(НСтр("ru = 'ящику'"), НСтр("ru = 'ящ.'"));
	Результат.Вставить(НСтр("ru = 'ящикам'"), НСтр("ru = 'ящ.'"));
	Результат.Вставить(НСтр("ru = 'ящиками'"), НСтр("ru = 'ящ.'"));
	Результат.Вставить(НСтр("ru = 'ящике'"), НСтр("ru = 'ящ.'"));
	Результат.Вставить(НСтр("ru = 'ящиков'"), НСтр("ru = 'ящ.'"));
	Результат.Вставить(НСтр("ru = 'ящиком'"), НСтр("ru = 'ящ.'"));
	
	Результат.Вставить(НСтр("ru = 'аб. ящ.'"), НСтр("ru = 'а/я'"));
	Результат.Вставить(НСтр("ru = 'аб./ящ.'"), НСтр("ru = 'а/я'"));
	Результат.Вставить(НСтр("ru = 'аб/ящ.'"), НСтр("ru = 'а/я'"));
	Результат.Вставить(НСтр("ru = 'аб/ящ'"), НСтр("ru = 'а/я'"));
	
	Результат.Вставить(НСтр("ru = 'почтовое'"), НСтр("ru = 'почт.'"));
	Результат.Вставить(НСтр("ru = 'почтового'"), НСтр("ru = 'почт.'"));
	Результат.Вставить(НСтр("ru = 'почтовым'"), НСтр("ru = 'почт.'"));
	Результат.Вставить(НСтр("ru = 'почтовыми'"), НСтр("ru = 'почт.'"));
	Результат.Вставить(НСтр("ru = 'почтовому'"), НСтр("ru = 'почт.'"));
	
	
	Результат.Вставить(НСтр("ru = 'отделение'"), НСтр("ru = 'отд.'"));
	Результат.Вставить(НСтр("ru = 'отделения'"), НСтр("ru = 'отд.'"));
	Результат.Вставить(НСтр("ru = 'отделению'"), НСтр("ru = 'отд.'"));
	Результат.Вставить(НСтр("ru = 'отделениям'"), НСтр("ru = 'отд.'"));
	Результат.Вставить(НСтр("ru = 'отделениями'"), НСтр("ru = 'отд.'"));
	Результат.Вставить(НСтр("ru = 'отделении'"), НСтр("ru = 'отд.'"));
	Результат.Вставить(НСтр("ru = 'отделений'"), НСтр("ru = 'отд.'"));
	Результат.Вставить(НСтр("ru = 'отделением'"), НСтр("ru = 'отд.'"));
	
	Результат.Вставить(НСтр("ru = 'п./отд.'"), НСтр("ru = 'п/о'"));
	Результат.Вставить(НСтр("ru = 'п/отд.'"), НСтр("ru = 'п/о'"));
	Результат.Вставить(НСтр("ru = 'п/отд'"), НСтр("ru = 'п/о'"));
	Результат.Вставить(НСтр("ru = 'почт. отд.'"), НСтр("ru = 'п/о'"));
	Результат.Вставить(НСтр("ru = 'почт./отд.'"), НСтр("ru = 'п/о'"));
	
	Результат.Вставить(НСтр("ru = 'военная часть'"), НСтр("ru = 'в/ч'"));
		
	Возврат Новый ФиксированноеСоответствие(Результат)
	
КонецФункции

Функция СокращенияПоля(ТипПоля) Экспорт

	Если НРег(ТипПоля) = "дом" Тогда	
		Возврат Новый ФиксированнаяСтруктура(СокращенияПоляДом())
	ИначеЕсли НРег(ТипПоля) = "корпус" Тогда
		Возврат Новый ФиксированнаяСтруктура(СокращенияПоляКорпус())
	ИначеЕсли НРег(ТипПоля) = "квартира" Тогда
		Возврат Новый ФиксированнаяСтруктура(СокращенияПоляКвартира())
	КонецЕсли;
	
	// Неверный тип поля
	Возврат Новый ФиксированнаяСтруктура(Новый Структура)
	
КонецФункции

Функция МассивЗначенийПоУмолчаниюТипаАдресногоПоля(ТипАдресногоПоля) Экспорт

	// Фиксированный массив нельзя, значения далее при обработке будут удаляться.
	ЗначениеПоУмолчанию = Новый Массив; 
	КлючТипа = "";
	
	Если НРег(ТипАдресногоПоля) = "корпус" Тогда
		
		КлючТипа = "ТипКорпуса";
		ЗначениеПоУмолчанию.Добавить("Корпус");
		ЗначениеПоУмолчанию.Добавить("Строение");
		ЗначениеПоУмолчанию.Добавить("Сооружение");
		ЗначениеПоУмолчанию.Добавить("Литера")
		// "Корпуса" в структуре адресной информации является массивом,
		// могут указывать вместо корп 2, стр 3 - просто 2, 3, хотя и маловероятно.
		
	ИначеЕсли НРег(ТипАдресногоПоля) = "дом" Тогда	
		КлючТипа = "ТипЗдания";
		ЗначениеПоУмолчанию.Добавить("Дом")
		// "Здание" в структуре адресной информации не является массивом,
		// это структура, поэтому значение по умолчанию одно.
		
	ИначеЕсли НРег(ТипАдресногоПоля) = "квартира" Тогда	
		КлючТипа = "ТипПомещения";
		ЗначениеПоУмолчанию.Добавить("Квартира")
		// "Помещения" в структуре адресной информации является массивом,
		// но указывать без типа что либо кроме квартиры по идее не будут.
	КонецЕсли;

	Возврат Новый ФиксированнаяСтруктура(Новый Структура("КлючТипа, ЗначениеПоУмолчанию", КлючТипа, ЗначениеПоУмолчанию))
	
КонецФункции
 
Функция МассивСтандартныхЗначенийТипаАдресногоПоля(ТипАдресногоПоля) Экспорт

	МассивСтандартныхЗначений = Новый Массив; 
	
	Если НРег(ТипАдресногоПоля) = "корпус" Тогда
		
		МассивСтандартныхЗначений.Добавить("Корпус");
		МассивСтандартныхЗначений.Добавить("Строение");
		МассивСтандартныхЗначений.Добавить("Сооружение");
		МассивСтандартныхЗначений.Добавить("Литера");
		МассивСтандартныхЗначений.Добавить("Литер");
		МассивСтандартныхЗначений.Добавить("Участок")
				
	ИначеЕсли НРег(ТипАдресногоПоля) = "дом" Тогда
		
		МассивСтандартныхЗначений.Добавить("Дом");
		МассивСтандартныхЗначений.Добавить("Домовладение");
		МассивСтандартныхЗначений.Добавить("Владение");
		МассивСтандартныхЗначений.Добавить("Гараж");
		МассивСтандартныхЗначений.Добавить("Здание");
		МассивСтандартныхЗначений.Добавить("Шахта");
		МассивСтандартныхЗначений.Добавить("Зем. участок")
		
	ИначеЕсли НРег(ТипАдресногоПоля) = "квартира" Тогда	
		
		МассивСтандартныхЗначений.Добавить("Квартира");
		МассивСтандартныхЗначений.Добавить("Этаж");
		МассивСтандартныхЗначений.Добавить("Офис");
		МассивСтандартныхЗначений.Добавить("Бокс");
		МассивСтандартныхЗначений.Добавить("Помещение");
		МассивСтандартныхЗначений.Добавить("Комната");
		
		МассивСтандартныхЗначений.Добавить("А/я");
		МассивСтандартныхЗначений.Добавить("В/ч");
		МассивСтандартныхЗначений.Добавить("П/о")
				
	КонецЕсли;

	Возврат Новый ФиксированныйМассив(МассивСтандартныхЗначений)
	
КонецФункции
 
 
#КонецОбласти

#Область Служебные

Функция СокращенияПоляКвартира()
	
	Результат = Новый Структура("СписокСокращений, СписокСоставаБуквСокращений, "
								+ "СоответствиеСокращенийСтандартнымТипам, "
								+ "СоответствиеОдносимвольныхСокращенийСтандартнымТипам",
								Новый Массив, Новый Массив, 
								Новый Соответствие, Новый Соответствие) ;
	// В процедуре вызова сравнивается начало поля ТипЗдания с ключем этого соответствия.
	// Если СтрНайти() = 1 - то ТипЗдания определяется значением соответствия.
	СоотвСокращенийСтандартТипам = Результат.СоответствиеСокращенийСтандартнымТипам;
	
	// Список определяет порядок проверки по сокращениям, 
	// т.е в каком именно порядке проверяются сокращения.
	// Порядок элементов в массиве Списка важен!
	СписокСокращений = Результат.СписокСокращений;
	
	// Список определяет комплекты букв, при наличии которых в сокращении
	// делается вывод о стандартном типе, сокращением которого является сокращение.
	// Порядок элементов в массиве Списка важен!
	СписокСоставаБуквСокращений = Результат.СписокСоставаБуквСокращений;
	
	// Соответствие содержит односимвольные сокращения в ключе и стандартный тип в значении.
	// Для случая, когда сокращение из одной буквы и надо определить какой именно
	// стандартный тип вероятнее всего подходит.
	СоотвОдносимвСокращСтандартнымТипам = Результат.СоответствиеОдносимвольныхСокращенийСтандартнымТипам;
	
	// Квартира,Этаж,Офис,Бокс,Помещение,Комната,А/я,В/ч,П/о
	
	СписокСокращений.Добавить(НСтр("ru = 'ком'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'ком'"), НСтр("ru = 'Комната'") );
	СписокСокращений.Добавить(НСтр("ru = 'км'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'км'"), НСтр("ru = 'Комната'") );
	СписокСокращений.Добавить(НСтр("ru = 'кв'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'кв'"), НСтр("ru = 'Квартира'") );
	
	СписокСокращений.Добавить(НСтр("ru = 'э'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'э'"), НСтр("ru = 'Этаж'") );	
	СписокСокращений.Добавить(НСтр("ru = 'о'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'о'"), НСтр("ru = 'Офис'") );
	СписокСокращений.Добавить(НСтр("ru = 'б'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'б'"), НСтр("ru = 'Бокс'") );
	
	СписокСокращений.Добавить(НСтр("ru = 'пом'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'пом'"), НСтр("ru = 'Помещение'") );
	СписокСокращений.Добавить(НСтр("ru = 'пм'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'пм'"), НСтр("ru = 'Помещение'") ); // пмщ
	
	СписокСокращений.Добавить(НСтр("ru = 'а'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'а'"), НСтр("ru = 'А/я'") );
	СписокСокращений.Добавить(НСтр("ru = 'в'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'в'"), НСтр("ru = 'В/ч'") );
	
	// Второй на очереди проверки - СоответствиеОдносимвольныхСокращенийСтандартнымТипам.	
	// Разделитель в значении "," - без пробелов, в порядке приоритета значений.
	СоотвОдносимвСокращСтандартнымТипам.Вставить(НСтр("ru = 'к'"), НСтр("ru = 'Комната,Квартира'") );
	СоотвОдносимвСокращСтандартнымТипам.Вставить(НСтр("ru = 'п'"), НСтр("ru = 'Помещение'") );
	
	// И последний на очереди проверки - СписокСоставаБуквСокращений в увязке с СоотвСокращенийСтандартТипам.
	// Разделитель в значении "," - без пробелов, в порядке приоритета значений.
	// Разделитель в ключе и в значении списка - "," - без пробелов.
	// В ключе и в значении списка буквы могут повторяться, но должны совпадать в ключе и в списке
	// - тогда при проверке наличия букв для значения списка "с,р,с,л" 
	// будет проверятся наличие двух "с" в сокращении.
	// Порядок элементов в массиве Списка важен!
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'к,т'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'к,т'"), НСтр("ru = 'Комната'") );
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'к,р'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'к,р'"), НСтр("ru = 'Квартира'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,м'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,м'"), НСтр("ru = 'Помещение'") );
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,щ'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,щ'"), НСтр("ru = 'Помещение'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'я'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'я'"), НСтр("ru = 'А/я'") );
		
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,ч'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,ч'"), НСтр("ru = 'П/о'") );
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,т'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,т'"), НСтр("ru = 'П/о'") );
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п, '"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п, '"), НСтр("ru = 'П/о'") );
		
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,/,о'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,/,о'"), НСтр("ru = 'П/о'") );
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,\,о'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,\,о'"), НСтр("ru = 'П/о'") );
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,-,о'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,-,о'"), НСтр("ru = 'П/о'") );
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п,.,о'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п,.,о'"), НСтр("ru = 'П/о'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'п'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'п'"), НСтр("ru = 'Помещение,П/о'") );
		
	Возврат Результат
	
КонецФункции

Функция СокращенияПоляДом()
	
	Результат = Новый Структура("СписокСокращений, СписокСоставаБуквСокращений, "
								+ "СоответствиеСокращенийСтандартнымТипам, "
								+ "СоответствиеОдносимвольныхСокращенийСтандартнымТипам",
								Новый Массив, Новый Массив, 
								Новый Соответствие, Новый Соответствие) ;
	// В процедуре вызова сравнивается начало поля ТипЗдания с ключем этого соответствия.
	// Если СтрНайти() = 1 - то ТипЗдания определяется значением соответствия.
	СоотвСокращенийСтандартТипам = Результат.СоответствиеСокращенийСтандартнымТипам;
	
	// Список определяет порядок проверки по сокращениям, 
	// т.е в каком именно порядке проверяются сокращения.
	// Порядок элементов в массиве Списка важен!
	СписокСокращений = Результат.СписокСокращений;
	
	// Список определяет комплекты букв, при наличии которых в сокращении
	// делается вывод о стандартном типе, сокращением которого является сокращение.
	// Порядок элементов в массиве Списка важен!
	СписокСоставаБуквСокращений = Результат.СписокСоставаБуквСокращений;
	
	// Соответствие содержит односимвольные сокращения в ключе и стандартный тип в значении.
	// Для случая, когда сокращение из одной буквы и надо определить какой именно
	// стандартный тип вероятнее всего подходит.
	СоотвОдносимвСокращСтандартнымТипам = Результат.СоответствиеОдносимвольныхСокращенийСтандартнымТипам;
	
	// дом владение домовладение гараж здание шахта участок
	СписокСокращений.Добавить(НСтр("ru = 'домо'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'домо'"), НСтр("ru = 'Домовладение'") );
	СписокСокращений.Добавить(НСтр("ru = 'домв'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'домв'"), НСтр("ru = 'Домовладение'") );	
	СписокСокращений.Добавить(НСтр("ru = 'дмв'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'дмв'"), НСтр("ru = 'Домовладение'") );
	СписокСокращений.Добавить(НСтр("ru = 'двл'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'двл'"), НСтр("ru = 'Домовладение'") );
	// Если просто Дом - то отработает при проверке стандартных Значений,
	// это проверка выполняется раньше.
	СписокСокращений.Добавить(НСтр("ru = 'дом'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'дом'"), НСтр("ru = 'Домовладение'") );
	
	СписокСокращений.Добавить(НСтр("ru = 'в'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'в'"), НСтр("ru = 'Владение'") );
	
	
	
	СписокСокращений.Добавить(НСтр("ru = 'гар'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'гар'"), НСтр("ru = 'Гараж'") );
	СписокСокращений.Добавить(НСтр("ru = 'г'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'г'"), НСтр("ru = 'Гараж'") );
	
	СписокСокращений.Добавить(НСтр("ru = 'зд'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'зд'"), НСтр("ru = 'Здание'") );
	СписокСокращений.Добавить(НСтр("ru = 'ш'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'ш'"), НСтр("ru = 'Шахта'") );
	
	СписокСокращений.Добавить(НСтр("ru = 'уч'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'уч'"), НСтр("ru = 'Земельный участок'") );
	СписокСокращений.Добавить(НСтр("ru = 'зе'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'зе'"), НСтр("ru = 'Земельный участок'") );
		
	// Второй на очереди проверки - СоответствиеОдносимвольныхСокращенийСтандартнымТипам.	
	// Разделитель в значении "," - без пробелов, в порядке приоритета значений.
	СоотвОдносимвСокращСтандартнымТипам.Вставить(НСтр("ru = 'з'"), НСтр("ru = 'Здание'") );
	СоотвОдносимвСокращСтандартнымТипам.Вставить(НСтр("ru = 'д'"), НСтр("ru = 'Дом'") );
	СоотвОдносимвСокращСтандартнымТипам.Вставить(НСтр("ru = 'в'"), НСтр("ru = 'Владение'") );
	

	// И последний на очереди проверки - СписокСоставаБуквСокращений в увязке с СоотвСокращенийСтандартТипам.
	// Разделитель в значении "," - без пробелов, в порядке приоритета значений.
	// Разделитель в ключе и в значении списка - "," - без пробелов.
	// В ключе и в значении списка буквы могут повторяться, но должны совпадать в ключе и в списке
	// - тогда при проверке наличия букв для значения списка "с,р,с,л" 
	// будет проверятся наличие двух "с" в сокращении.
	// Первая буква в списке так же должна быть первой в сокращении.
	// Порядок элементов в массиве Списка важен!
		
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'з,д'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'з,д'"), НСтр("ru = 'Здание'") );
		
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'з,у'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'з,у'"), НСтр("ru = 'Земельный участок'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'у'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'у'"), НСтр("ru = 'Земельный участок'") );
		
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'з'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'з'"), НСтр("ru = 'Здание'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'в'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'в'"), НСтр("ru = 'Владение'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'д,е'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'д,е'"), НСтр("ru = 'Домовладение'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'д,в'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'д,в'"), НСтр("ru = 'Домовладение'") );
			
	Возврат Результат
	
КонецФункции

Функция СокращенияПоляКорпус()

	Результат = Новый Структура("СписокСокращений, СписокСоставаБуквСокращений, "
								+ "СоответствиеСокращенийСтандартнымТипам, "
								+ "СоответствиеОдносимвольныхСокращенийСтандартнымТипам",
								Новый Массив, Новый Массив, 
								Новый Соответствие, Новый Соответствие) ;
	// В процедуре вызова сравнивается начало поля ТипКорпуса с ключем этого соответствия.
	// Если СтрНайти() = 1 - то ТипКорпуса определяется значением соответствия.
	СоотвСокращенийСтандартТипам = Результат.СоответствиеСокращенийСтандартнымТипам;
	
	// Список определяет порядок проверки по сокращениям, 
	// т.е в каком именно порядке проверяются сокращения.
	// Порядок элементов в массиве Списка важен!
	СписокСокращений = Результат.СписокСокращений;
	
	// Список определяет комплекты букв, при наличии которых в сокращении
	// делается вывод о стандартном типе, сокращением которого является сокращение.
	// Порядок элементов в массиве Списка важен!
	СписокСоставаБуквСокращений = Результат.СписокСоставаБуквСокращений;
	
	// Соответствие содержит односимвольные сокращения в ключе и стандартный тип в значении.
	// Для случая, когда сокращение из одной буквы и надо определить какой именно
	// стандартный тип вероятнее всего подходит.
	СоотвОдносимвСокращСтандартнымТипам = Результат.СоответствиеОдносимвольныхСокращенийСтандартнымТипам;
	
	// СоответствиеСокращенийСтандартнымТипам будет проверятся первым, 
	// в порядке, указанном в СписокСокращений.
	// Разделитель в значении "," - без пробелов, в порядке приоритета значений.
	// корпус
	СписокСокращений.Добавить(НСтр("ru = 'к'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'к'"), НСтр("ru = 'Корпус'") );
	// строение
	СписокСокращений.Добавить(НСтр("ru = 'ст'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'ст'"), НСтр("ru = 'Строение'") ); // стр ст-е
	// сооружение
	СписокСокращений.Добавить(НСтр("ru = 'со'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'со'"), НСтр("ru = 'Сооружение'") ); // соор
	СписокСокращений.Добавить(НСтр("ru = 'срж'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'срж'"), НСтр("ru = 'Сооружение'") );
	// литера
	СписокСокращений.Добавить(НСтр("ru = 'л'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'л'"), НСтр("ru = 'Литера'") );
	
	// участок
	СписокСокращений.Добавить(НСтр("ru = 'у'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'у'"), НСтр("ru = 'Участок'") );
	
	// Второй на очереди проверки - СоответствиеОдносимвольныхСокращенийСтандартнымТипам.
	// Вариант корпуса из одной "к" определится через СоотвСокращенийСтандартТипам. 
	// Тоже самое с "у".
	// Разделитель в значении "," - без пробелов, в порядке приоритета значений.
	СоотвОдносимвСокращСтандартнымТипам.Вставить(НСтр("ru = 'с'"), НСтр("ru = 'Строение,Сооружение'") );
	
	// И последний на очереди проверки - СписокСоставаБуквСокращений в увязке с СоотвСокращенийСтандартТипам.
	// Разделитель в значении "," - без пробелов, в порядке приоритета значений.
	// Разделитель в ключе и в значении списка - "," - без пробелов.
	// В ключе и в значении списка буквы могут повторяться, но должны совпадать в ключе и в списке
	// - тогда при проверке наличия букв для значения списка "с,р,с,л" 
	// будет проверятся наличие двух "с" в сокращении.
	// Порядок элементов в массиве Списка важен!
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'с,ж'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'с,ж'"), НСтр("ru = 'Сооружение'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'с,т'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'с,т'"), НСтр("ru = 'Строение'") );
		
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'с,р'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'с,р'"), НСтр("ru = 'Строение,Сооружение'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'с,н'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'с,н'"), НСтр("ru = 'Строение,Сооружение'") );
	
	СписокСоставаБуквСокращений.Добавить(НСтр("ru = 'с,е'"));
	СоотвСокращенийСтандартТипам.Вставить(НСтр("ru = 'с,е'"), НСтр("ru = 'Строение,Сооружение'") );
		
	Возврат Результат

КонецФункции
	
#КонецОбласти 