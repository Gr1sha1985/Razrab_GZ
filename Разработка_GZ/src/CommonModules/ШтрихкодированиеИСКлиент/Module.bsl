#Область ПрограммныйИнтерфейс

// Выполняет инициализацию и заполнение параметров сканирования по переданному контексту.
// Параметры сканирования необходимы для анализа и обработки штрихкодов маркируемой продукции.
//
// Параметры:
//  Контекст - Неопределено, ДокументСсылка, ФормаКлиентскогоПриложения - Источник данных для формирования параметров сканирования.
//  ФормаВыбора - ФормаКлиентскогоПриложения - Форма
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//
// Возвращаемое значение:
//  См. ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования
Функция ПараметрыСканирования(Контекст = Неопределено, ФормаВыбора = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.БазовыеПараметрыСканирования();
	ШтрихкодированиеИСКлиентСервер.ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст);
	
	ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
	
	ШтрихкодированиеИСКлиентСерверПереопределяемый.ПриЗаполненииПараметровСканирования(ПараметрыСканирования, Контекст, ВидПродукции);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

// Показывает форму ввода штрихкода.
// 
// Параметры:
//  ОписаниеОповещения - ОписаниеОповещения - Оповещение, которое будет выполнено по завершению.
Процедура ПоказатьВводШтрихкода(ОписаниеОповещения) Экспорт
	
	СтандартнаяОбработка = Истина;
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПоказатьВводШтрихкода(ОписаниеОповещения, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Введите штрихкод'"));
	
	ДополнительныеПараметры = Новый Структура(
		"ОповещениеУспешногоВвода, Количество",
		ОписаниеОповещения, Неопределено);
	
	ОткрытьФорму(
		"ОбщаяФорма.ВводШтрихкодаИС",
		ПараметрыОткрытия,,,,,
		Новый ОписаниеОповещения("ПоказатьВводШтрихкодаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// Выполняет обработку штрихкода. Вызывается из формы проверки и подбора маркируемой продукции.
//
// Параметры:
//  ОповещениеЗавершениеОбработки - ОписаниеОповещения - оповещение, которое произойдет при завершении обработки.
//  Форма - ФормаКлиентскогоПриложения - форма, в которой отсканирован штрихкод.
//  ДанныеШтрихкода - Структура - структура с ключами:
//   * Штрихкод - Строка - считанный штрихкод,
//   * Количество - Число - количество упаковок.
//  ПараметрыСканирования - См. ПараметрыСканирования
//  ДанныеРазбора - см. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
//
Процедура ОбработатьДанныеШтрихкода(ОповещениеЗавершениеОбработки, Форма, ДанныеШтрихкода, ПараметрыСканирования = Неопределено, ДанныеРазбора = Неопределено) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ПараметрыСканирования(Форма);
	КонецЕсли;
	
	// Заполнение параметра ДополнительныеВариантыСопоставленияНоменклатуры выполняется только в формах
	// проверки и подбора продукции, в зависимых формах используется ранее заданное сопоставление.
	Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПодобраннаяМаркируемаяПродукция") Тогда
		
		ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Неопределено;
		
		GTIN = Неопределено;
		Если ДанныеРазбора = Неопределено
			И ШтрихкодированиеИСКлиентСервер.ЭтоEANИлиGTIN(ДанныеШтрихкода.Штрихкод) Тогда
			GTIN = ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(ДанныеШтрихкода.Штрихкод);
		ИначеЕсли ДанныеРазбора = Неопределено Тогда
			ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
				ДанныеШтрихкода.Штрихкод, ПараметрыСканирования.ДопустимыеВидыПродукции);
		КонецЕсли;
		Если ДанныеРазбора <> Неопределено Тогда
			ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN);
		КонецЕсли;
		
		Если GTIN <> Неопределено Тогда
			
			ШтрихкодEAN = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN);
			
			ОтборПоGTIN = Новый Структура("GTIN", GTIN);
			СтрокиТаблицыМаркируемойПродукции = Форма.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(ОтборПоGTIN);
			Если СтрокиТаблицыМаркируемойПродукции.Количество() Тогда
				
				Индекс = Новый Соответствие;
				
				ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры = Новый Соответствие;
				ВариантыСопоставления = Новый Массив;
				Для Каждого СтрокаТаблицы Из СтрокиТаблицыМаркируемойПродукции Цикл 
					
					ИндексНоменклатура = Индекс.Получить(СтрокаТаблицы.Номенклатура);
					Если ИндексНоменклатура = Неопределено Тогда
						ИндексНоменклатура = Новый Соответствие;
					КонецЕсли;
					ИндексХарактеристика = ИндексНоменклатура.Получить(СтрокаТаблицы.Характеристика);
					Если ИндексХарактеристика = Неопределено Тогда
						ИндексХарактеристика = Новый Соответствие;
					КонецЕсли;
					
					Если ИндексХарактеристика.Получить(СтрокаТаблицы.Серия) = Неопределено Тогда
						
						ИндексХарактеристика.Вставить(СтрокаТаблицы.Серия, Истина);
						ИндексНоменклатура.Вставить(СтрокаТаблицы.Характеристика, ИндексХарактеристика);
						Индекс.Вставить(СтрокаТаблицы.Номенклатура, ИндексНоменклатура);
						
						ВариантСопоставления = Новый Структура("Номенклатура, Характеристика, Серия");
						ЗаполнитьЗначенияСвойств(ВариантСопоставления, СтрокаТаблицы);
						ВариантыСопоставления.Добавить(ВариантСопоставления);
						
					КонецЕсли;
					
				КонецЦикла;
				
				ПараметрыСканирования.ДополнительныеВариантыСопоставленияНоменклатуры.Вставить(
					ШтрихкодEAN, ВариантыСопоставления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования);
	
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИСВызовСервера.ОбработатьШтрихкод(
		ДанныеШтрихкода, ПараметрыСканирования, Неопределено, Форма.УникальныйИдентификатор);
	
	Если РезультатОбработкиШтрихкода <> Неопределено Тогда
		
		Если ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева
			И РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
			
			Если Форма.СоответствиеШтрихкодовСтрокДерева.Получить(ДанныеШтрихкода.Штрихкод) <> Неопределено Тогда
				РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатОбработкиШтрихкода.ЕстьОшибкиВДеревеУпаковок
			Или Не ПустаяСтрока(РезультатОбработкиШтрихкода.ТекстОшибки)
			Или РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных
			Или ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования) Тогда
			
			ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияОбработкиШтрихкода();
			ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработкиШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ОповещениеЗавершениеОбработки = ОповещениеЗавершениеОбработки;
			ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
			ПараметрыЗавершенияВводаШтрихкода.Форма                         = Форма;
			ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ДанныеШтрихкода;
			ПараметрыЗавершенияВводаШтрихкода.ВызовИзФормыДокумента         = Ложь;
			
			ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
			
		Иначе
			
			ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру для завершения обработки штрихкода.
//
// Параметры:
// Возвращаемое значение:
//  Структура - Описание:
// * ВызовИзФормыДокумента - Булево - Истина, в случае выполнения вызова из формы документа, Ложь - из формы обработки
// проверки и подбора.
// * ДанныеШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода).
// * ПараметрыСканирования - (См. ПараметрыСканирования).
// * ОповещениеЗавершениеОбработки - ОписаниеОповещения - Оповещение, которое необходимо выполнить при завершении обработки.
// * КэшированныеЗначения - Структура - Содержит поля кэшируемых значений.
// * РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
// * Форма - ФормаКлиентскогоПриложения - Форма, для которой выполняется обработка.
Функция ПараметрыЗавершенияОбработкиШтрихкода() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Форма");
	Параметры.Вставить("РезультатОбработкиШтрихкода");
	Параметры.Вставить("КэшированныеЗначения");
	Параметры.Вставить("ПараметрыСканирования");
	Параметры.Вставить("ДанныеШтрихкода");
	Параметры.Вставить("ОповещениеОбработкиШтрихкода");
	Параметры.Вставить("ОповещениеВыполнитьДействие");
	Параметры.Вставить("ОповещениеЗавершениеОбработки");
	Параметры.Вставить("ВызовИзФормыДокумента", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Выполняет завершение обработки штрихкода. На основании ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода
// выполняет необходимые действия.
//
// Параметры:
//  ПараметрыЗавершенияОбработкиШтрихкода - (См. ПараметрыЗавершенияОбработкиШтрихкода).
Процедура ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода) Экспорт
	
	Форма                         = ПараметрыЗавершенияОбработкиШтрихкода.Форма;
	ПараметрыСканирования         = ПараметрыЗавершенияОбработкиШтрихкода.ПараметрыСканирования;
	РезультатОбработкиШтрихкода   = ПараметрыЗавершенияОбработкиШтрихкода.РезультатОбработкиШтрихкода;
	ОповещениеЗавершениеОбработки = ПараметрыЗавершенияОбработкиШтрихкода.ОповещениеЗавершениеОбработки;
	
	ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(
		Форма,
		РезультатОбработкиШтрихкода.ДанныеШтрихкода);
	
	// ТребуетсяСопоставлениеНоменклатуры - для массива штрихкодов вызывается только 1 раз
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры
		Или РезультатОбработкиШтрихкода.ТребуетсяУточнениеКоэффициентовУпаковок Тогда
		
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		Возврат;
		
	КонецЕсли;
	
	// Вызывается только при сканировании 1 штрихкода
	Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
		
		Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
		Возврат;
		
	КонецЕсли;
	
	// Далее, общие обработчики ИС МП для сканера и ТСД
	Если ПрисутствуетПродукцияИСМП(РезультатОбработкиШтрихкода.ВидыПродукции, Истина)
		Или ПрисутствуетПрочаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры
			Или РезультатОбработкиШтрихкода.ТребуетсяУточнениеДанных Тогда
			
			Форма.КодМаркировкиДляУточнения = ПараметрыЗавершенияОбработкиШтрихкода;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ОткрытьФормуУточненияДанных", 0.1, Истина);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнформироватьОНевозможностиДобавления(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(ПараметрыСканирования.ДопустимыеВидыПродукции)
		И ПрисутствуетАлкогольнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		Если МодульОбработки.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрисутствуетПродукцияИСМП(ПараметрыСканирования.ДопустимыеВидыПродукции, Истина)
		И ПрисутствуетПродукцияИСМП(РезультатОбработкиШтрихкода.ВидыПродукции, Истина) Тогда
		
		МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		Если МодульОбработки.ЗавершитьОбработкуВводаШтрихкода(ПараметрыЗавершенияОбработкиШтрихкода, Ложь) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершениеОбработки <> Неопределено Тогда
		Если ПараметрыЗавершенияОбработкиШтрихкода.ВызовИзФормыДокумента Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, РезультатОбработкиШтрихкода);
		Иначе
			ВыполнитьОбработкуОповещения(ОповещениеЗавершениеОбработки, РезультатОбработкиШтрихкода.ДанныеШтрихкода);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет завершение после показа формы ввода штрихкода.
// 
// Параметры:
//  Результат - Произвольный - Результат ввода.
//  ДополнительныеПараметры - Структура - Параметры описания оповещения.
Процедура ПоказатьВводШтрихкодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОповещениеУспешногоВвода = ДополнительныеПараметры.ОповещениеУспешногоВвода;
	Количество = ДополнительныеПараметры.Количество;
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Штрихкод = Результат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.ФорматBase64 Тогда
			Штрихкод = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(Результат.Штрихкод);
		Иначе
			Штрихкод = Результат.Штрихкод;
		КонецЕсли;
	КонецЕсли;
	
	Если Штрихкод = Неопределено Или ПустаяСтрока(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	Если Количество = Неопределено Тогда
		Количество = 1;
	КонецЕсли;
	
	Если СтрДлина(Штрихкод) > 200 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru='Длина штрихкода не должна быть больше 200 символов.'"));
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ОповещениеУспешногоВвода,
		Новый Структура("Штрихкод, Количество", Штрихкод, Количество));
	
КонецПроцедуры

// В случае успешного сопоставления номенклатуры неизвестным штрихкодам выполняет повторную попытку обработки штрихкода.
// 
// Параметры:
//  Результат - Произвольный - результат сопоставления неизветсной номенклатуры штрихкодам формата EAN.
//  ДополнительныеПараметры - Структура - параметры описания оповещения.
Процедура СопоставлениеНоменклатурыШтрихкодамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(
			ДополнительныеПараметры.ПараметрыСканирования.КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПовторнойОбработки, ДополнительныеПараметры.ИсходныеДанные);
	
КонецПроцедуры

#Область РаботаСФормойКодаМаркировки

//Открывает форму ввода кода маркировки.
//
//Параметры:
//   ФормаВладелец - ФормаКлиентскогоПриложения - форма, из которой необходимо выполнить открытие.
//   ПараметрыОткрытия - См. ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыВводаКодаМаркировки.
//   ОповещениеОЗавершении - ОписаниеОповещения, Неопределено - действие после закрытия формы ввода кода маркировки
//
Процедура ОткрытьФормуСчитыванияКодаМаркировки(ФормаВладелец, ПараметрыОткрытия, ОповещениеОЗавершении = Неопределено) Экспорт
	
	Если Не ПараметрыОткрытия.МаркируемаяПродукция Тогда
		
		ПоказатьПредупреждение(
			Неопределено, НСтр("ru = 'Для данной строки не указываются акцизные марки'"));
		
		Возврат;
	КонецЕсли;
	
	Если ОповещениеОЗавершении = Неопределено Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ФормаВладелец);
	КонецЕсли;
	
	Если ПараметрыОткрытия.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		И ПрисутствуетАлкогольнаяПродукция(ПараметрыОткрытия.ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		ОткрытьФорму(
			"Обработка.РаботаСАкцизнымиМаркамиЕГАИС.Форма.ФормаВводаАкцизнойМарки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ПараметрыОткрытия.ВидПродукции)
		И ПрисутствуетТабачнаяПродукция(ПараметрыОткрытия.ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ФормаВводаКодаМаркировки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ПараметрыОткрытия.ВидПродукции)
		И ПрисутствуетПродукцияИСМП(ПараметрыОткрытия.ПараметрыСканирования.ДопустимыеВидыПродукции) Тогда
		
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ФормаВводаКодаМаркировки",
			ПараметрыОткрытия, ФормаВладелец,,,,ОповещениеОЗавершении);
		
	Иначе
		
		ТекстОшибки = ТекстОшибкиНеПоддерживаетсяВидПродукции(
			ПараметрыОткрытия.ПараметрыСканирования, ПараметрыОткрытия.ВидПродукции);
		
		ПараметрыОткрытияФормы = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ТекстОшибки;
		ПараметрыОткрытияФормы.Штрихкод                         = ПараметрыОткрытия.ДанныеШтрихкода.Штрихкод;
		ПараметрыОткрытияФормы.ВидПродукции                     = ПараметрыОткрытия.ВидПродукции;
		ПараметрыОткрытияФормы.Организация                      = ПараметрыОткрытия.ПараметрыСканирования.Организация;
		
		ОткрытьФорму(
			"ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного",
			ПараметрыОткрытияФормы, ФормаВладелец);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойУточненияДанных


// Анализирует результат проверки на необходимость уточнения каких-либо данных у пользователя.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  РезультатОбработкиШтрихкода - (См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода).
//  ПараметрыСканирования - (см. ПараметрыСканирования).
// Возвращаемое значение:
//  Булево - Истина, если требуется уточнить какие-либо данные у пользователя.
Функция ТребуетсяУточнениеДанныхУПользователя(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования) Экспорт
	
	Если РезультатОбработкиШтрихкода.ТребуетсяВыборНоменклатуры Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяСопоставлениеНоменклатуры Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ТребуетсяУточнениеКоэффициентовУпаковок Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПрисутствуетАлкогольнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		Возврат МодульШтрихкодированиеЕГАИСКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода);
		
	КонецЕсли;
	
	Если ПрисутствуетТабачнаяПродукция(РезультатОбработкиШтрихкода.ВидыПродукции)
			Или ПрисутствуетПродукцияИСМП(РезультатОбработкиШтрихкода.ВидыПродукции) Тогда
		
		МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
		Возврат МодульШтрихкодированиеИСМПКлиент.ТребуетсяУточнениеДанныхУПользователя(РезультатОбработкиШтрихкода);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму уточнения данных.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных)
//  ОповещениеПоЗавершениюУточненияДанных - ОписаниеОповещения - Оповещение после закрытия формы.
// Открывает форму уточнения номенклатуры и серии.
// 
// Параметры:
//  ФормаВладелец - ФормаКлиентскогоПриложения - форма владелец.
//  ПараметрыОткрытияФормы - (См. ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных)
//  ОповещениеПоЗавершениюУточненияДанных - ОписаниеОповещения - Оповещение после закрытия формы.
Процедура УточнитьДанныеУПользователя(ФормаВладелец, ПараметрыОткрытияФормы, ОповещениеПоЗавершениюУточненияДанных) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОткрытияФормы.КодМаркировкиДляУточнения) Тогда
		РезультатОбработкиШтрихкода = ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода;
		Если РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки Тогда
			
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя = ПреобразоватьВПараметрыОткрытияФормыВводаКодаМаркировки(
				ПараметрыОткрытияФормы.КодМаркировкиДляУточнения);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец, "Объект")
					И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец.Объект, "Ссылка") Тогда
				ПараметрыОткрытияФормы.Документ = ФормаВладелец.Объект.Ссылка;
			КонецЕсли;
			ПараметрыОткрытияФормы.Операция = "ОткрытьФормуВводаКодаМаркировки";
			
		Иначе
			
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя = ПреобразоватьВПараметрыОткрытияФормыУточнения(
				ПараметрыОткрытияФормы.КодМаркировкиДляУточнения);
			
			ВидУпаковки = ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ВидУпаковки;
			Если ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая") Тогда
				ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияУпаковки";
			Иначе
				ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияДанных";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОткрытияФормы.Операция = "ОткрытьФормуВводаКодаМаркировки" Тогда
		
		ОткрытьФормуСчитыванияКодаМаркировки(
			ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ОповещениеПоЗавершениюУточненияДанных);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "СопоставлениеНоменклатуры" Тогда
		
		ШтрихкодыКСопоставлению = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ШтрихкодыКСопоставлению;
		ИсходныеДанные          = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ИсходныеДанные;
		ПараметрыСканирования   = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ПараметрыСканирования;
		
		ДополнительныеПараметры = Новый Структура(
			"ОповещениеПовторнойОбработки, ИсходныеДанные, ПараметрыСканирования",
			ОповещениеПоЗавершениюУточненияДанных, ИсходныеДанные, ПараметрыСканирования);
			
		ОповещениеОЗавершенииСопоставления = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыШтрихкодамЗавершение", ШтрихкодированиеИСКлиент, ДополнительныеПараметры);
		
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ШтрихкодыКСопоставлению, ФормаВладелец, ОповещениеОЗавершенииСопоставления);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияДанных" Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОткрытияФормы.КодМаркировкиДляУточнения) Тогда
			ДанныеШтрихкода = ПараметрыОткрытияФормы.КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
				ДополнитьПараметрыУточненияИзСпискаВыбораНоменклатуры(ДанныеШтрихкода.СписокНоменклатуры, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя);
			Иначе
				ДополнитьПараметрыУточненияИзСпискаВыбораНоменклатуры(ДанныеШтрихкода.СписокНоменклатуры, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя);
				ДополнитьПараметрыУточненияИзФормыИсточника(ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя);
			КонецЕсли;
		КонецЕсли;
		
		ОткрытьФорму(
			"ОбщаяФорма.ФормаУточненияДанныхИС",
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ФормаВладелец,,,,
			ОповещениеПоЗавершениюУточненияДанных, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "ОткрытьФормуУточненияУпаковки" Тогда
		
		ДополнитьПараметрыУточненияИзФормыИсточника(ФормаВладелец, ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, Истина);
		
		ОткрытьФорму(
			"ОбщаяФорма.УточнениеСоставаУпаковкиИС",
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ФормаВладелец,,,,
			ОповещениеПоЗавершениюУточненияДанных, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ПараметрыОткрытияФормы.Операция = "УточнениеКоэффициентовУпаковок" Тогда	
		
		ИсходныеДанные        = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ИсходныеДанные;
		ПараметрыСканирования = ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя.ПараметрыСканирования;
		
		ДополнительныеПараметры = Новый Структура(
			"ОповещениеПовторнойОбработки, ИсходныеДанные, ПараметрыСканирования",
			ОповещениеПоЗавершениюУточненияДанных, ИсходныеДанные, ПараметрыСканирования);
		
		ОповещениеОЗавершенииСопоставления = Новый ОписаниеОповещения(
			"СопоставлениеНоменклатурыШтрихкодамЗавершение", ШтрихкодированиеИСКлиент, ДополнительныеПараметры);
		
		ОткрытьФорму(
			"ОбщаяФорма.УточнениеКоэффициентовУпаковокИСМП",
			ПараметрыОткрытияФормы.ДанныеДляУточненияСведенийПользователя, ФормаВладелец,,,,
			ОповещениеОЗавершенииСопоставления, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру данных, собранных после уточнения сведений у пользователя.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ПараметрыСканирования - См. ПараметрыСканирования.
// * ИсходныеДанные - Структура
//    * Штрихкод - Строка - Штрихкод.
//    * Количество - Число - Количество.
// * КэшированныеЗначения - Произвольный - кэш обработанных ранее штрихкодов.
// * РезультатВыбора - Произвольный - результат уточнения данных пользователем.
// * РезультатОбработкиШтрихкода - См. ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода.
// * Действие - Строка - Действие, которое необходимо выполнить с данными.
Функция ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий() Экспорт
	
	РезультатУточненияДанных = Новый Структура;
	
	РезультатУточненияДанных.Вставить("Действие");
	РезультатУточненияДанных.Вставить("РезультатОбработкиШтрихкода");
	РезультатУточненияДанных.Вставить("РезультатВыбора");
	РезультатУточненияДанных.Вставить("КэшированныеЗначения");
	РезультатУточненияДанных.Вставить("ИсходныеДанные");
	РезультатУточненияДанных.Вставить("ПараметрыСканирования");
	РезультатУточненияДанных.Вставить("ДанныеШтрихкода");
	
	Возврат РезультатУточненияДанных;
	
КонецФункции

// Выполняет обработку оповещения "ОповещениеВыполнитьДействие" и передает результат уточнения данных у пользователя.
// 
// Параметры:
//  РезультатВыбора - Произвольный - результат уточнения данных у пользователя.
//  ДополнительныеПараметры - Структура - дополнительные параметры описания оповещения.
Процедура УточненияДанныхЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено
		Или РезультатВыбора = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеВыполнитьДействие <> Неопределено Тогда
		
		РезультатУточненияДанных = ИнициализацияРезультатаУточненияДанныхДляВыполненияДальнейшихДействий();
		РезультатУточненияДанных.Действие                    = "ОбработатьУточнениеДанных";
		РезультатУточненияДанных.РезультатОбработкиШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода;
		РезультатУточненияДанных.РезультатВыбора             = РезультатВыбора;
		РезультатУточненияДанных.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		РезультатУточненияДанных.ИсходныеДанные              = ДополнительныеПараметры.ДанныеШтрихкода;
		РезультатУточненияДанных.ПараметрыСканирования       = ДополнительныеПараметры.ПараметрыСканирования;
		РезультатУточненияДанных.ДанныеШтрихкода             = ДополнительныеПараметры.ДанныеШтрихкода;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВыполнитьДействие, РезультатУточненияДанных);
		
	ИначеЕсли ДополнительныеПараметры.ВызовИзФормыДокумента Тогда // Ветка для старого механизма.
		
		Форма = ДополнительныеПараметры.Форма;
		
		Действие = "ОбработатьУточнениеДанных";
		РезультатОбработкиШтрихкода = Форма.Подключаемый_ВыполнитьДействие(
			Действие,
			РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияОбработкиШтрихкода();
		ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкода;
		ПараметрыЗавершенияВводаШтрихкода.КэшированныеЗначения        = ДополнительныеПараметры.КэшированныеЗначения;
		ПараметрыЗавершенияВводаШтрихкода.Форма                       = Форма;
		ДополнительныеПараметры.Свойство("ОповещениеЗавершениеОбработки", ПараметрыЗавершенияВводаШтрихкода.ОповещениеЗавершениеОбработки);
		ДополнительныеПараметры.Свойство("ПараметрыСканирования", ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования);
		
		ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		
	Иначе
		
		ШтрихкодированиеИСВызовСервера.ОбработатьУточнениеДанныхДляФормыПроверкиИПодбора(
			РезультатВыбора,
			ДополнительныеПараметры.РезультатОбработкиШтрихкода,
			ДополнительныеПараметры.ПараметрыСканирования,
			ДополнительныеПараметры.КэшированныеЗначения);
		
		ЗавершитьОбработкуШтрихкода(ДополнительныеПараметры);
		
		Если ДополнительныеПараметры.ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции
			И ТипЗнч(ДополнительныеПараметры.РезультатОбработкиШтрихкода.ДанныеШтрихкода) = Тип("Структура") Тогда
			ДанныеШтрихкода = ДополнительныеПараметры.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
			ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ДополнительныеПараметры.Форма, ДанныеШтрихкода);
		КонецЕсли;
		
		ГрупповаяОбработкаШтрихкодовИСКлиент.ПрименитьСохраненныйВыбор(
			ДополнительныеПараметры.Форма, 
			ДополнительныеПараметры.ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойНевозможностиДобавленияОтсканированного

// Инициализирует параметры открытия формы невозможности добавления отсканированного.
//
// Параметры:
// 	ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
// Возвращаемое значение:
// 	Структура - Описание:
// * АдресДереваУпаковок - Строка - адрес хранилища, где находится дерево упаковок.
// * АлкогольнаяПродукция - СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС - алкогольная продукция.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода.
// * Организация - ОпределяемыйТип.Организация - Организация.
// * ТекстОшибки - Строка - Описание причины невозможности обработки отсканированного штрихкода.
// * Штрихкод - Строка - Штрихкод строкой.
// * ПредставлениеНоменклатуры - Строка - Представление маркируемой продукции.
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид маркируемой продукции.
Функция ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(ВидПродукции = Неопределено) Экспорт
	
	ИнформацияПроблемы = Новый Структура;
	
	ИнформацияПроблемы.Вставить("ВидПродукции", ВидПродукции);
	
	// Информация по маркированному товару.
	ИнформацияПроблемы.Вставить("ПредставлениеНоменклатуры",        Неопределено);
	ИнформацияПроблемы.Вставить("Штрихкод",                         Неопределено);
	ИнформацияПроблемы.Вставить("ТекстОшибки",                      Неопределено);
	ИнформацияПроблемы.Вставить("ПараметрыОшибки",                  Неопределено);
	ИнформацияПроблемы.Вставить("ИмяФормыИсточник",                 Неопределено);
	ИнформацияПроблемы.Вставить("Организация",                      Неопределено);
	ИнформацияПроблемы.Вставить("ТекстОшибкиФорматированнаяСтрока", Неопределено);
	ИнформацияПроблемы.Вставить("ТипШтрихкода",                     Неопределено);
	ИнформацияПроблемы.Вставить("ВидУпаковки",                      Неопределено);
	ИнформацияПроблемы.Вставить("АлкогольнаяПродукция",             Неопределено);
	ИнформацияПроблемы.Вставить("ОбратноеСканирование",             Неопределено);
	
	// Информация по дереву упаковок.
	ИнформацияПроблемы.Вставить("АдресДереваУпаковок", Неопределено);
	
	Возврат ИнформацияПроблемы;
	
КонецФункции

// Открывает форму с описанием ошибки о невозможности обработать отсканированный штрихкод.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой необходимо выполнить обработку штрихкода.
//  ПараметрыОткрытияФормы - (См. ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного).
//
Процедура ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы) Экспорт
	
	Если ПараметрыОткрытияФормы.ВидПродукции = Неопределено Тогда
		
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытияФормы, Форма);
		
	ИначеЕсли ПараметрыОткрытияФормы.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		
		МодульШтрихкодированиеЕГАИСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиент");
		МодульШтрихкодированиеЕГАИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
		
	Иначе
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ПараметрыОткрытияФормы.ВидПродукции) Тогда
				
				МодульШтрихкодированиеМОТПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиент");
				МодульШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
				
			ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ПараметрыОткрытияФормы.ВидПродукции) Тогда
				
				МодульШтрихкодированиеИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиент");
				МодульШтрихкодированиеИСМПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(Форма, ПараметрыОткрытияФормы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает данные из кэша, необходимые для уточнения сведений у пользователя. Открывает форму уточнения сведений.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа.
//  ОписаниеОповещенияОЗавершении - ОписаниеОповещения - оповещение, которое будет выполнено после получения сведений.
Процедура Подключаемый_ОткрытьФормуУточненияДанных(Форма, ОписаниеОповещенияОЗавершении) Экспорт
	
	// Сценарий: есть текущий результат обработки кода маркировки
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КодМаркировкиДляУточнения")
		И ЗначениеЗаполнено(Форма.КодМаркировкиДляУточнения) Тогда
		КодМаркировкиДляУточнения = Форма.КодМаркировкиДляУточнения;
		Форма.КодМаркировкиДляУточнения = Неопределено;
		ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
		ПараметрыОткрытияФормыУточненияДанных.КодМаркировкиДляУточнения = КодМаркировкиДляУточнения;
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УточненияДанныхЗавершение", ЭтотОбъект, КодМаркировкиДляУточнения);
		УточнитьДанныеУПользователя(Форма, ПараметрыОткрытияФормыУточненияДанных, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ДанныеДляУточненияСведений = ШтрихкодированиеИСВызовСервера.ДанныеДляУточненияСведенийПользователя(Форма.КэшМаркируемойПродукции);
	
	Если ПустаяСтрока(ДанныеДляУточненияСведений.Операция) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляУточненияСведенийПользователя = ДанныеДляУточненияСведений.Данные;
	Если ТипЗнч(ДанныеДляУточненияСведений.Данные) = Тип("Соответствие") Тогда
		
		Для Каждого КлючЗначение Из ДанныеДляУточненияСведений.Данные Цикл
			ДанныеДляУточненияСведенийПользователя = КлючЗначение.Значение;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыОткрытияФормыУточненияДанных = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	ПараметрыОткрытияФормыУточненияДанных.Операция = ДанныеДляУточненияСведений.Операция;
	ПараметрыОткрытияФормыУточненияДанных.ДанныеДляУточненияСведенийПользователя = ДанныеДляУточненияСведенийПользователя;
	
	УточнитьДанныеУПользователя(Форма, ПараметрыОткрытияФормыУточненияДанных, ОписаниеОповещенияОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаВидовПродукции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента алкогольной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления алкогольная продукция.
Функция ПрисутствуетАлкогольнаяПродукция(ВидыПродукции) Экспорт
	
	АлкогольнаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная");
	
	Возврат ВидыПродукции.Найти(АлкогольнаяПродукция) <> Неопределено;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента табачной продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления табачная продукция.
Функция ПрисутствуетТабачнаяПродукция(ВидыПродукции) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента продукции ИСМП.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
//  ВключатьТабачнуюПродукцию - Булево - Признак включения табачной продукции
//  ВключатьМолочнуюПродукцию - Булево - Признак вкючения молочной продукции
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления обувная продукция.
Функция ПрисутствуетПродукцияИСМП(ВидыПродукции, ВключатьТабачнуюПродукцию = Ложь, ВключатьМолочнуюПродукцию = Истина) Экспорт
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, ВключатьТабачнуюПродукцию, ВключатьМолочнуюПродукцию) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет проверку в переданном массиве "ВидыПродукции" наличие элемента с пустым видом продукции.
//
// Параметры:
//  ВидыПродукции - Массив из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции ИС.
// Возвращаемое значение:
//  Булево - Истина, если в переданном массиве найден элемент перечисления пустая ссылка.
Функция ПрисутствуетПрочаяПродукция(ВидыПродукции) Экспорт
	
	ПрочаяПродукция = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка");
	
	Возврат ВидыПродукции.Найти(ПрочаяПродукция) <> Неопределено
		Или ВидыПродукции.Количество() = 0;
	
КонецФункции

#КонецОбласти

// Показывает окно оповещения об окончании обработки данных ТСД.
//
// Параметры:
//   ПараметрыУведомления - Структура, Неопределено - параметры уведомления.
Процедура ОповеститьОбОкончанииОбработкиДанныхТСД(ПараметрыУведомления = Неопределено) Экспорт
	
	Если ПараметрыУведомления = Неопределено Тогда
		ТекстЗаголовка   = ЗаголовокОповещенияТСД();
		ТекстУведомления = НСтр("ru = 'Закончена обработка полученных из ТСД данных.'");
	Иначе
		ТекстЗаголовка   = ПараметрыУведомления.Заголовок;
		ТекстУведомления = ПараметрыУведомления.Текст;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		ТекстУведомления,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Показывает окно оповещения о начале обработки данных ТСД.
//
// Параметры:
//	ПараметрыУведомления - Структура, Неопределено - Параметры уведомления.
Процедура ОповеститьОНачалеОбработкиДанныхТСД(ПараметрыУведомления = Неопределено) Экспорт
	
	Если ПараметрыУведомления = Неопределено Тогда
		ТекстЗаголовка   = ЗаголовокОповещенияТСД();
		ТекстУведомления = НСтр("ru = 'Начата обработка полученных из ТСД данных.'");
	Иначе
		ТекстЗаголовка   = ПараметрыУведомления.Заголовок;
		ТекстУведомления = ПараметрыУведомления.Текст;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		ТекстЗаголовка,,
		ТекстУведомления,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Преобразует массив штрихкодов в формат Base64.
// 
// Параметры:
//  ШтрихкодыТСД - Массив из Строка - список штрихкодов.
Процедура ПреобразоватьШтрихкодыТСДВBase64(ШтрихкодыТСД) Экспорт
	
	Для Каждого ЭлементМассива Из ШтрихкодыТСД Цикл
		Если ЭлементМассива.Свойство("ШтрихкодыПреобразованы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементМассива.Свойство("ФорматBase64") Тогда
			ФорматBase64 = ЭлементМассива.ФорматBase64;
		Иначе
			ФорматBase64 = Ложь;
		КонецЕсли;
		
		Если Не ФорматBase64 Тогда
			Если ЗначениеЗаполнено(ЭлементМассива.Штрихкод) Тогда
				ЭлементМассива.Штрихкод = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЭлементМассива.Штрихкод);
			КонецЕсли;
			Если ЭлементМассива.Свойство("ШтрихкодУпаковки") И ЗначениеЗаполнено(ЭлементМассива.ШтрихкодУпаковки) Тогда
				ЭлементМассива.ШтрихкодУпаковки = ШтрихкодированиеИСКлиентСервер.ШтрихкодВBase64(ЭлементМассива.ШтрихкодУпаковки);
			КонецЕсли;
		КонецЕсли;
		
		ЭлементМассива.Вставить("ШтрихкодыПреобразованы");
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует структуру сохраненных данных в документе
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ДанныеВыбора - Структура - данные сохраненного выбора.
// * ЗапомнитьВыбор - Булево - признак сохранения выбора пользователем.
//
Функция ИнициализацияСтруктурыДанныхСохраненногоВыбора() Экспорт
	
	ДанныеВыбора = Новый Структура;
	ДанныеВыбора.Вставить("Номенклатура",                    Неопределено);
	ДанныеВыбора.Вставить("ПредставлениеНоменклатуры",       "");
	ДанныеВыбора.Вставить("Характеристика",                  Неопределено);
	ДанныеВыбора.Вставить("Серия",                           Неопределено);
	ДанныеВыбора.Вставить("КодМаркировки",                   "");
	
	//Коды остатков
	ДанныеВыбора.Вставить("GTIN",                            "");
	
	//Специфика для молочной продукции
	ДанныеВыбора.Вставить("ИдентификаторПроисхожденияВЕТИС", Неопределено);
	ДанныеВыбора.Вставить("ГоденДо",                         '00010101');
	ДанныеВыбора.Вставить("Скоропортящаяся",                 Ложь);
	
	//Специфика для табачной и молочной продукции
	ДанныеВыбора.Вставить("СоставКодаМаркировки",            Неопределено);
	
	//Для уточнения коэффициента групповой упаковки
	ДанныеВыбора.Вставить("Коэффициент",            0);
	
	// Для документов, печатающих коды маркировки
	ДанныеВыбора.Вставить("СразуНаПринтер",         Ложь);
	ДанныеВыбора.Вставить("ШаблонЭтикетки",         Неопределено);
	ДанныеВыбора.Вставить("ШаблонМаркировки",       Неопределено);
	
	// Индивидуально перемаркирова
	ДанныеВыбора.Вставить("ПричинаПеремаркировки",  Неопределено);
	ДанныеВыбора.Вставить("НоваяНоменклатура",      Неопределено);
	ДанныеВыбора.Вставить("НоваяХарактеристика",    Неопределено);
	
	// Для формы проверки и подбора
	ДанныеВыбора.Вставить("ДобавлятьНовуюУпаковку", Ложь);
	ДанныеВыбора.Вставить("ЭтоКодВводаОстатков",    Ложь);
	
	СтруктурыДанных = Новый Структура;
	СтруктурыДанных.Вставить("ЗапомнитьВыбор", Ложь);
	СтруктурыДанных.Вставить("ДанныеВыбора",   ДанныеВыбора);
	
	Возврат СтруктурыДанных;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормойУточненияДанных

//Сценарий: на вход уточнения данных передан частично обработанный код маркировки
//
Функция ПреобразоватьВПараметрыОткрытияФормыУточнения(КодМаркировкиДляУточнения)
	
	ДанныеДляУточнения = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыУточненияДанных();
	ДанныеДляУточнения.ПараметрыСканирования = КодМаркировкиДляУточнения.ПараметрыСканирования;
	
	ДанныеШтрихкода = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(ДанныеДляУточнения, ДанныеШтрихкода);
	ДанныеДляУточнения.КодМаркировки = ДанныеШтрихкода.Штрихкод;
	ДанныеДляУточнения.ШтрихкодEAN = ДанныеШтрихкода.EAN;
	
	Если ДанныеШтрихкода.СписокНоменклатуры.Количество() > 1 Тогда
		Номенклатура = Новый Соответствие;
		Характеристика = Новый Соответствие;
		Для Каждого ЭлементСписка Из ДанныеШтрихкода.СписокНоменклатуры Цикл
			Если ЗначениеЗаполнено(ЭлементСписка.Номенклатура) Тогда
				Номенклатура.Вставить(ЭлементСписка.Номенклатура);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЭлементСписка.Характеристика) Тогда
				Характеристика.Вставить(ЭлементСписка.Характеристика);
			КонецЕсли;
			Если Номенклатура.Количество() > 1 Тогда
				ДанныеДляУточнения.Номенклатура = Новый Массив;
				Для Каждого КлючИЗначение Из Номенклатура Цикл
					ДанныеДляУточнения.Номенклатура.Добавить(КлючИЗначение.Ключ);
				КонецЦикла;
			КонецЕсли;
			Если Характеристика.Количество() > 1 Тогда
				ДанныеДляУточнения.Характеристика = Новый Массив;
				Для Каждого КлючИЗначение Из Характеристика Цикл
					ДанныеДляУточнения.Характеристика.Добавить(КлючИЗначение.Ключ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
		И (ДанныеШтрихкода.КоличествоБлоков = 0 Или ДанныеШтрихкода.Коэффициент <= 2) Тогда
		ДанныеДляУточнения.УточнитьКоэффициент = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.ВидУпаковки)
		И ЗначениеЗаполнено(ДанныеШтрихкода.GTIN)
		И Не ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры Тогда
		ДанныеДляУточнения.УточнитьКоэффициент = Истина;
	КонецЕсли;
	
	Возврат ДанныеДляУточнения;
	
КонецФункции

//Сценарий: интерфейс уточнения данных для неуникальных штрихкодов информационной базы
//
Процедура ДополнитьПараметрыУточненияИзСпискаВыбораНоменклатуры(СписокВыбора, ПараметрыОткрытияФормы)
	
	Если ПараметрыОткрытияФормы.РежимПодбораИзДокумента Тогда
		Возврат;
	ИначеЕсли СписокВыбора.Количество() < 2 Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ПараметрыОткрытияФормы.Номенклатура)<>Тип("Массив")
			И ЗначениеЗаполнено(ПараметрыОткрытияФормы.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		НовыйЭлементВыбора = Новый Структура("Номенклатура,Характеристика,Серия");
		ЗаполнитьЗначенияСвойств(НовыйЭлементВыбора, ЭлементСписка);
		ПараметрыОткрытияФормы.ДанныеДокумента.Добавить(НовыйЭлементВыбора);
	КонецЦикла;
	
КонецПроцедуры

//Сценарий: получаем варианты уточнения данных по коду маркировки (или упаковки)
//  из формы документа (или формы проверки и подбора).
//
Процедура ДополнитьПараметрыУточненияИзФормыИсточника(ФормаВладелец, ПараметрыОткрытияФормы, УточнитьУпаковку = Ложь)
	
	// * Если флаг подбора уже взведен - ничего не меняем
	Если ПараметрыОткрытияФормы.РежимПодбораИзДокумента Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка кодов маркировки остатков
	РаботаСПустойНоменклатурой = ПараметрыОткрытияФормы.ПараметрыСканирования.РазрешенаОбработкаКодовСПустойНоменклатурой;
	
	// Обработка кодов маркировки молочной продукции
	ЕстьВЕТИС = ПараметрыОткрытияФормы.ПараметрыСканирования.Свойство("ЗаполнятьДанныеВЕТИС")
		И ПараметрыОткрытияФормы.ПараметрыСканирования.ЗаполнятьДанныеВЕТИС <> Неопределено;
	ЕстьСрокГодности = ПараметрыОткрытияФормы.ПараметрыСканирования.Свойство("ЗаполнятьСрокГодности")
		И ПараметрыОткрытияФормы.ПараметрыСканирования.ЗаполнятьСрокГодности;
	
	// Форма проверки и подбора ИС МП, МОТП
	Если ФормаВладелец.ИмяФормы = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор"
		Или ФормаВладелец.ИмяФормы = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
		
		Если Не ФормаВладелец.ПодобраннаяМаркируемаяПродукция.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		ПоляДокумента = Новый Структура;
		ПоляПоиска = Новый Структура;
		КолонкиТовары = ФормаВладелец.ПодобраннаяМаркируемаяПродукция[0];
		Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Номенклатура) Тогда
			ПоляДокумента.Вставить("Номенклатура");
			ПоляДокумента.Вставить("Характеристика");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Номенклатура", ПараметрыОткрытияФормы.Номенклатура);
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Характеристика", ПараметрыОткрытияФормы.Характеристика);
		КонецЕсли;
		Если ФормаВладелец.Элементы.ПодобраннаяМаркируемаяПродукцияГруппаСерия.Видимость //есть серии
				И (УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Серия)) Тогда
			ПоляДокумента.Вставить("Серия");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Серия", ПараметрыОткрытияФормы.Серия);
		КонецЕсли;
		
		Если ЕстьВЕТИС Тогда
			Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ЗначениеЗаполнено(ПараметрыОткрытияФормы.ИдентификаторПроисхожденияВЕТИС)) Тогда
				ПоляДокумента.Вставить("ИдентификаторПроисхожденияВЕТИС");
			Иначе
				ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "ИдентификаторПроисхожденияВЕТИС", ПараметрыОткрытияФормы.ИдентификаторПроисхожденияВЕТИС);
			КонецЕсли;
		КонецЕсли;
		Если ЕстьСрокГодности Тогда
			Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.ГоденДо) Тогда
				ПоляДокумента.Вставить("СрокГодности");
			Иначе
				ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "СрокГодности", ПараметрыОткрытияФормы.ГоденДо);
			КонецЕсли;
		КонецЕсли;
		
		// * Включаем режим выбора
		Если ПоляПоиска.Количество() Тогда
			НеЗавершенПодбор = ФормаВладелец.ПодобраннаяМаркируемаяПродукция.НайтиСтроки(ПоляПоиска);
		Иначе
			НеЗавершенПодбор = ФормаВладелец.ПодобраннаяМаркируемаяПродукция;
		КонецЕсли;
		
		Если НеЗавершенПодбор.Количество() И ПоляДокумента.Количество() Тогда
			Для Каждого СтрокаПодбор Из НеЗавершенПодбор Цикл
				Если (СтрокаПодбор.КоличествоПодобрано < СтрокаПодбор.Количество) И
				(ЗначениеЗаполнено(СтрокаПодбор.Номенклатура) Или РаботаСПустойНоменклатурой) Тогда
					ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
					НовыйЭлементВыбора = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПоляДокумента);
					ЗаполнитьЗначенияСвойств(НовыйЭлементВыбора, СтрокаПодбор);
					Если НовыйЭлементВыбора.Свойство("СрокГодности") И СтрокаПодбор.Свойство("ГоденДо") Тогда
						НовыйЭлементВыбора.СрокГодности = СтрокаПодбор.ГоденДо;
					КонецЕсли;
					ПараметрыОткрытияФормы.ДанныеДокумента.Добавить(НовыйЭлементВыбора);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Поведение по-умолчанию (сканирование из формы документа):
	// * Ищем кеш штрихкодов упаковок
	// * Ищем заполненную ТЧ Товары документа
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец, "ДанныеШтрихкодовУпаковокГосИС") Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец, "Объект") Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВладелец.Объект, "Товары") Тогда
		Возврат;
	ИначеЕсли Не ФормаВладелец.Объект.Товары.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТовары = ФормаВладелец.Объект.Товары[0];
	// * Формируем таблицу выбора
	ПоляДокумента = Новый Структура;
	ПоляПоиска = Новый Структура("СтатусПроверкиГосИС", 2);
	Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Номенклатура) Тогда
		ПоляДокумента.Вставить("Номенклатура");
		ПоляДокумента.Вставить("Характеристика");
	Иначе
		ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Номенклатура", ПараметрыОткрытияФормы.Номенклатура);
		ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Характеристика", ПараметрыОткрытияФормы.Характеристика);
	КонецЕсли;
	Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.Серия) Тогда
		ПоляДокумента.Вставить("Серия");
	Иначе
		ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "Серия", ПараметрыОткрытияФормы.Серия);
	КонецЕсли;
	
	Если ЕстьВЕТИС Тогда
		Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ЗначениеЗаполнено(ПараметрыОткрытияФормы.ИдентификаторПроисхожденияВЕТИС)) Тогда
			ПоляДокумента.Вставить("ИдентификаторПроисхожденияВЕТИС");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "ИдентификаторПроисхожденияВЕТИС", ПараметрыОткрытияФормы.ИдентификаторПроисхожденияВЕТИС);
		КонецЕсли;
	КонецЕсли;
	Если ЕстьСрокГодности Тогда
		Если УточнитьУпаковку Или Не ЗначениеЗаполнено(ПараметрыОткрытияФормы.ГоденДо) Тогда
			ПоляДокумента.Вставить("СрокГодности");
		Иначе
			ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, "СрокГодности", ПараметрыОткрытияФормы.ГоденДо);
		КонецЕсли;
	КонецЕсли;
	
	// * Включаем режим выбора
	НеЗавершенПодбор = ФормаВладелец.Объект.Товары.НайтиСтроки(ПоляПоиска);
	
	Если НеЗавершенПодбор.Количество() Тогда
		Для Каждого СтрокаПодбор Из НеЗавершенПодбор Цикл
			Если Не(ЗначениеЗаполнено(СтрокаПодбор.Номенклатура) Или РаботаСПустойНоменклатурой) Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыОткрытияФормы.РежимПодбораИзДокумента = Истина;
			НовыйЭлементВыбора = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПоляДокумента);
			ЗаполнитьЗначенияСвойств(НовыйЭлементВыбора, СтрокаПодбор);
			Если НовыйЭлементВыбора.Свойство("СрокГодности") И СтрокаПодбор.Свойство("ГоденДо") Тогда
				НовыйЭлементВыбора.СрокГодности = СтрокаПодбор.ГоденДо;
			КонецЕсли;
			ПараметрыОткрытияФормы.ДанныеДокумента.Добавить(НовыйЭлементВыбора);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьПоляПоиска(КолонкиТовары, ПоляПоиска, Имя, Значение)
	Если КолонкиТовары.Свойство(Имя) Тогда 
		ПоляПоиска.Вставить(Имя, Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСФормойВводаКодаМаркировки

//Сценарий: на вход уточнения данных передан частично обработанный код маркировки
//
Функция ПреобразоватьВПараметрыОткрытияФормыВводаКодаМаркировки(КодМаркировкиДляУточнения)
	
	ДанныеДляУточнения = ШтрихкодированиеИСКлиентСервер.ПараметрыОткрытияФормыВводаКодаМаркировки();
	ДанныеДляУточнения.ПараметрыСканирования = КодМаркировкиДляУточнения.ПараметрыСканирования;
	ДанныеШтрихкода = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
	ЗаполнитьЗначенияСвойств(ДанныеДляУточнения, ДанныеШтрихкода);
	ДанныеДляУточнения.ДанныеШтрихкода = ДанныеШтрихкода;
	Возврат ДанныеДляУточнения;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатаНекорректногоСканирования

Функция ТекстОшибкиНеПоддерживаетсяВидПродукции(ПараметрыСканирования, ВидПродукции)
	
	Если ПараметрыСканирования.ДопустимыеВидыПродукции.Количество() = 0 Тогда
		ПоддерживаемыеВидыПродукцииСтрокой = НСтр("ru = 'Не определены'");
	Иначе
		ПоддерживаемыеВидыПродукцииСтрокой = СтрСоединить(ПараметрыСканирования.ДопустимыеВидыПродукции, ", ");
	КонецЕсли;
	
	Фрагмент1 = СтрШаблон(НСтр("ru='Вид продукции штрихкода: %1.'"), ВидПродукции);
	Фрагмент2 = СтрШаблон(НСтр("ru='Ожидаемые виды продукции: %1.'"), ПоддерживаемыеВидыПродукцииСтрокой);
	
	ТекстОшибки = Новый ФорматированнаяСтрока(Фрагмент1, Символы.ПС, Фрагмент2);
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ИнформироватьОНевозможностиДобавления(Форма, РезультатОбработкиШтрихкода, ПараметрыСканирования)
	
	Если Не ПараметрыСканирования.ВыводитьСообщенияОбОшибках Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатОбработкиШтрихкода.ОбщаяОшибка
		Или РезультатОбработкиШтрихкода.ОшибкаДопустимостиВидовПродукции
		Или (РезультатОбработкиШтрихкода.ВидыПродукции.Количество() = 0 И ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ТекстОшибки)) Тогда
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытия.Штрихкод            = РезультатОбработкиШтрихкода.Штрихкод;
		ПараметрыОткрытия.АдресДереваУпаковок = РезультатОбработкиШтрихкода.АдресДереваУпаковок;
		ПараметрыОткрытия.Организация         = ПараметрыСканирования.Организация;
		
		Если ТипЗнч(РезультатОбработкиШтрихкода.ТекстОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытия.ТекстОшибкиФорматированнаяСтрока = РезультатОбработкиШтрихкода.ТекстОшибки;
		Иначе
			ПараметрыОткрытия.ТекстОшибки = РезультатОбработкиШтрихкода.ТекстОшибки;
		КонецЕсли;
		ПараметрыОткрытия.ПараметрыОшибки = РезультатОбработкиШтрихкода.ПараметрыОшибки;
		ПараметрыОткрытия.ИмяФормыИсточник = Форма.ИмяФормы;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат Истина;
		
	КонецЕсли;
	
	ВидовПродукции = 0;
	Для Каждого ВидПродукции Из РезультатОбработкиШтрихкода.ВидыПродукции Цикл
		Если ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукции) <> Неопределено Тогда
			ВидовПродукции = ВидовПродукции + 1;
		КонецЕсли;
	КонецЦикла;
	Если ВидовПродукции > 1 И ЗначениеЗаполнено(РезультатОбработкиШтрихкода.ТекстОшибки) Тогда
		
		ДанныеШтрихкода = РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		
		ПараметрыОткрытия = ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		Если ДанныеШтрихкода <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДанныеШтрихкода);
		КонецЕсли;
		Если ТипЗнч(РезультатОбработкиШтрихкода.ТекстОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытия.ТекстОшибкиФорматированнаяСтрока = РезультатОбработкиШтрихкода.ТекстОшибки;
		Иначе
			ПараметрыОткрытия.ТекстОшибки = РезультатОбработкиШтрихкода.ТекстОшибки;
		КонецЕсли;
		ПараметрыОткрытия.Организация = ПараметрыСканирования.Организация;
		ПараметрыОткрытия.ПараметрыОшибки = РезультатОбработкиШтрихкода.ПараметрыОшибки;
		ПараметрыОткрытия.ИмяФормыИсточник = Форма.ИмяФормы;
		ОткрытьФорму("ОбщаяФорма.ИнформацияОНевозможностиДобавленияОтсканированного", ПараметрыОткрытия, Форма);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

// Обновляет отображение адреса данных документа основания на форме.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется обработка штрихкода(ов).
//  ПараметрыСканирования - (см. ПараметрыСканирования).
Процедура ОтразитьИзменениеАдресаДанныхОснованияВФорме(Форма, ПараметрыСканирования)
	
	Если Не ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;

	ФормаСоЗначением = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма;
	ИначеЕсли Форма.ВладелецФормы <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.ВладелецФормы, "АдресДанныхДокументаОснования") Тогда
		ФормаСоЗначением = Форма.ВладелецФормы;
	КонецЕсли;
	
	Если ФормаСоЗначением = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаСоЗначением.АдресДанныхДокументаОснования <> ПараметрыСканирования.АдресДанныхДокументаОснования Тогда
		ФормаСоЗначением.АдресДанныхДокументаОснования = ПараметрыСканирования.АдресДанныхДокументаОснования
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст заголовка оповещения для ТСД.
//
// Параметры:
// Возвращаемое значение:
//  Строка - Текст заголовка.
Функция ЗаголовокОповещенияТСД()
	
	Возврат НСтр("ru = 'Загрузка из ТСД'");
	
КонецФункции

#Область ЗаполнениеПараметровСканирования

// Включает поддержку алкогольной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляАлкогольнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ЕГАИС")
		И (ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная")
		   Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеЕГАИСКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеЕГАИСКлиентСервер");
		МодульШтрихкодированиеЕГАИСКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку табачной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляТабачнойПродукции(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП")
		И (ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции) Или ВидПродукции = Неопределено) Тогда
		
		МодульШтрихкодированиеМОТПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеМОТПКлиентСервер");
		МодульШтрихкодированиеМОТПКлиентСервер.ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает поддержку обувной продукции и заполняет параметры сканирования с учетом ее специфики.
//
// Параметры:
//  Контекст - Неопределено, ФормаКлиентскогоПриложения, ДокументСсылка - Описание
//  ФормаВыбора - ФормаКлиентскогоПриложения - форма выбора.
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции, по которому будут инициализированы параметры сканирования.
//  ПараметрыСканирования - (См. ПараметрыСканирования).
Процедура ЗаполнитьПараметрыСканированияДляПродукцииИСМП(ПараметрыСканирования, Контекст, ВидПродукции, ФормаВыбора)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции)
			Или Не ЗначениеЗаполнено(ВидПродукции) Тогда
			
			МодульШтрихкодированиеИСМПКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ШтрихкодированиеИСМПКлиентСервер");
			МодульШтрихкодированиеИСМПКлиентСервер.ЗаполнитьПараметрыСканирования(Контекст, ВидПродукции, ПараметрыСканирования);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
