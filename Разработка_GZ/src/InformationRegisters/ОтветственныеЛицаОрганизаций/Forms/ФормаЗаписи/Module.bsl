#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустой() Тогда
		
		Запись.Период = НачалоДня(ТекущаяДатаСеанса());
		
		 Если НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Запись.Должность = ОтветственныеЛицаБП.ПодобратьВероятнуюДолжностьОтветственногоЛица(Запись.ОтветственноеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
	Организация              = ОрганизацияСтруктурнойЕдиницы(Запись.СтруктурнаяЕдиница);
	ПодразделениеОрганизации = ПодразделениеСтруктурнойЕдиницы(Запись.СтруктурнаяЕдиница);
	
	Элементы.ОтветственноеЛицо.Видимость = НЕ ЗначениеЗаполнено(Запись.ОтветственноеЛицо);

	Элементы.Организация.Видимость = ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница) И ЗначениеЗаполнено(Организация);
	
	Элементы.ПодразделениеОрганизации.Видимость = ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница)
		И ЗначениеЗаполнено(ПодразделениеОрганизации);
	
	Элементы.СтруктурнаяЕдиница.Видимость = НЕ ЗначениеЗаполнено(Запись.СтруктурнаяЕдиница);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		
		ОтветственныеЛицаОрганизаций	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
		ОтветственныеЛицаОрганизаций.Период				= Запись.ИсходныйКлючЗаписи.Период;
		ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница	= Запись.ИсходныйКлючЗаписи.СтруктурнаяЕдиница;
		ОтветственныеЛицаОрганизаций.ОтветственноеЛицо	= Запись.ИсходныйКлючЗаписи.ОтветственноеЛицо;
		ОтветственныеЛицаОрганизаций.Прочитать();
		
		СтруктураСтаройЗаписи	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо, ФизическоеЛицо, Должность");
		ЗаполнитьЗначенияСвойств(СтруктураСтаройЗаписи, ОтветственныеЛицаОрганизаций);
		ПараметрыЗаписи.Вставить("СтруктураСтаройЗаписи", СтруктураСтаройЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("СтруктураСтаройЗаписи") Тогда
		
		// Если была изменена дата и хотя бы одно из полей, тогда сохраним прежнюю запись	
		Если (НЕ ТекущийОбъект.Период = ПараметрыЗаписи.СтруктураСтаройЗаписи.Период
				И (НЕ ТекущийОбъект.ФизическоеЛицо = ПараметрыЗаписи.СтруктураСтаройЗаписи.ФизическоеЛицо
					ИЛИ НЕ ТекущийОбъект.Должность = ПараметрыЗаписи.СтруктураСтаройЗаписи.Должность)) Тогда
					
			ОтветственныеЛицаОрганизаций	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ОтветственныеЛицаОрганизаций, ТекущийОбъект);
			ЗаполнитьЗначенияСвойств(ОтветственныеЛицаОрганизаций, ПараметрыЗаписи.СтруктураСтаройЗаписи);
			ОтветственныеЛицаОрганизаций.Записать();
			
		КонецЕсли;
	
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ИзменениеОтветственныхЛиц", Организация);
	Оповестить("ИзмененСписокОтветственныхЛиц", Организация);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(Запись.ФизическоеЛицо, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическоеЛицоПриИзменении(Элемент)
	
	Запись.Должность = ПолучитьДолжностьФизЛица(Запись.СтруктурнаяЕдиница, Запись.ФизическоеЛицо, Запись.ОтветственноеЛицо);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ОрганизацияСтруктурнойЕдиницы(СтруктурнаяЕдиница)
	
	Организация	= ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		
		Если ТипЗнч(СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда
			Организация	= БухгалтерскийУчетПереопределяемый.ОрганизацияПодразделения(СтруктурнаяЕдиница, Организация);
		ИначеЕсли ТипЗнч(СтруктурнаяЕдиница) = Тип("СправочникСсылка.Организации") Тогда
			Организация	= СтруктурнаяЕдиница;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодразделениеСтруктурнойЕдиницы(СтруктурнаяЕдиница)
	
	Подразделение	= БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		
		Если ТипЗнч(СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения() Тогда
			Подразделение	= СтруктурнаяЕдиница;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДолжностьФизЛица(СтруктурнаяЕдиница, ФизическоеЛицо, ОтветственноеЛицо)
	
	ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
		ОрганизацияСтруктурнойЕдиницы(СтруктурнаяЕдиница), ФизическоеЛицо, ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) Тогда
		Возврат ДанныеОтветственногоЛица.Должность;
	КонецЕсли;
	
	Возврат ОтветственныеЛицаБП.ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо);
	
КонецФункции

#КонецОбласти


