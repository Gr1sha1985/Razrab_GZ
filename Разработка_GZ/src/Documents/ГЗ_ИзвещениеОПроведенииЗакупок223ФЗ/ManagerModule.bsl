// Создает документ по переданной структуре
//
// Параметры:
//  - ДанныеЗаполнения - Структура - структура свойств документа
//
// Возвращаемое значение:
//  - Ссылка - ссылка на созданный элемент справочника
//
Функция СоздатьДокументИзвещение(ДанныеЗаполнения) Экспорт
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		НайденныйДокумент = Документы.ГЗ_ИзвещениеОПроведенииЗакупок223ФЗ.НайтиПоРеквизиту("registrationNumber",ДанныеЗаполнения.registrationNumber) ;
		
		Если НайденныйДокумент.Пустая() Тогда 
			ДокументГЗ = Документы.ГЗ_ИзвещениеОПроведенииЗакупок223ФЗ.СоздатьДокумент();
		Иначе 	
			ДокументГЗ = НайденныйДокумент.ПолучитьОбъект();
			ДокументГЗ.lot.Очистить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументГЗ,ДанныеЗаполнения);
		ДокументГЗ.lot.Загрузить(ДанныеЗаполнения.lot);
		Попытка
			ДокументГЗ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументГЗ.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	Иначе
		ЗаписьЖурналаРегистрации("ГЗ.ЗагрузкаДанныхИзXML", УровеньЖурналаРегистрации.Ошибка,,,"Пустая структура для заполнения документа");
	КонецЕсли;	
	//Возврат ДокументСсылка;
КонецФункции

Функция ВернутьСтруктуруТабличнойЧастиДокумента() Экспорт 
	ТабличнаяЧастьИзвещения = Новый	 ТаблицаЗначений;
	ТабличнаяЧастьИзвещения.Колонки.Добавить("purchaseObject", ,"purchaseObject");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("purchaseObject_Строкой", ,"purchaseObject_Строкой");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("price", ,"price");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("quantity", ,"quantity");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("sum", ,"sum");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("isMedicalProduct", ,"isMedicalProduct");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("OKEI", ,"OKEI");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("name", ,"name");
	Возврат  ТабличнаяЧастьИзвещения;
КонецФункции
