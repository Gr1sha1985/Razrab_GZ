#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Найдем типовые условия
//	ДополнительныеУсловияПоУмолчанию = Справочники.ДополнительныеУсловия.ПолучитьТиповыеУсловия();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ИндивидуальныйПредприниматель");
		МассивНепроверяемыхРеквизитов.Добавить("ФамилияИП");
		МассивНепроверяемыхРеквизитов.Добавить("ИмяИП");
		МассивНепроверяемыхРеквизитов.Добавить("ИсторияНаименований.ФамилияИП");
		МассивНепроверяемыхРеквизитов.Добавить("ИсторияНаименований.ИмяИП");
		Если НЕ ОбособленноеПодразделение Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ГоловнаяОрганизация");
		КонецЕсли; 
		МассивНепроверяемыхРеквизитов.Добавить("Наименование");//Заполняется автоматически в ПередЗаписью
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ИндивидуальныйПредприниматель");
		МассивНепроверяемыхРеквизитов.Добавить("ГоловнаяОрганизация");
		// Эти реквизиты заполняются перед записью, в частном случае допускаются незаполненные
		МассивНепроверяемыхРеквизитов.Добавить("Наименование");
		МассивНепроверяемыхРеквизитов.Добавить("НаименованиеСокращенное");
	КонецЕсли;
	
	Если ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		МассивНепроверяемыхРеквизитов.Добавить("УчетнаяЗаписьОбмена");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	// Реквизит ГоловнаяОрганизация должен быть заполнен всегда, 
	// даже когда в организации нет обособленных подразделений.
	// В последнем (тривиальном) случае ГоловнаяОрганизация должна указывать на саму организацию - 
	// ссылаться сама на себя.
	// Многие прикладные алгоритмы не рассчитаны на то, что реквизит ГоловнаяОрганизация не будет заполнен.
	// Поэтому обеспечим его заполнение в тривиальном случае.
	
	Если ОбособленноеПодразделение И (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) Тогда
		ОбособленноеПодразделение = Ложь;
	КонецЕсли;
	
	ЕстьОбособленныеПодразделения = Ложь; //БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям()
		//ИЛИ БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций();
	
	Если Не ОбособленноеПодразделение Тогда
		
		Если Не ЭтоНовый() Тогда
			
			Если ГоловнаяОрганизация <> Ссылка Тогда
				ГоловнаяОрганизация = Ссылка;
			КонецЕсли;
			
		Иначе
			
			// Свойство "Ссылка" заведомо не заполнено.
			// Но в ходе обмена ссылка может быть передана.
			
			СсылкаНового = ПолучитьСсылкуНового();
			Если Не СсылкаНового.Пустая() Тогда
				Если ГоловнаяОрганизация <> СсылкаНового Тогда
					ГоловнаяОрганизация = СсылкаНового;
				КонецЕсли;
			Иначе
				УстановитьСсылкуНового(Справочники.Организации.ПолучитьСсылку());
				ГоловнаяОрганизация = ПолучитьСсылкуНового();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("СтарыйИНН", 
		?(ЭтоНовый(), "", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИНН")));
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИНН = СокрП(ИНН);
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И НужноУстановитьИндивидуальногоПредпринимателя() Тогда
		
		УстановитьИндивидуальногоПредпринимателя();
		
	КонецЕсли;
	
	Если ИсторияНаименований.Количество() = 1 Тогда
		// Если запись в истории наименований одна, то считается, что изменений нет
		// и значение наименования нужно определять из данных объекта.
		ИсторияНаименований.Очистить();
	ИначеЕсли ИсторияНаименований.Количество() > 1 Тогда
		// Первая запись в истории должна иметь пустую дату
		ИсторияНаименований.Сортировать("Период");
		ИсторияНаименований[0].Период = '00010101';
		
		// Последняя запись в истории всегда должна соответствовать наименованию в объекте
		Справочники.Организации.УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеСокращенное, НаименованиеПолное, ИсторияНаименований);
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейБП.ПередЗаписьюИсторииКонтактнойИнформацииОбъекта(ЭтотОбъект);
	
	Если РайонныйКоэффициент < 1 
		ИЛИ РайонныйКоэффициент > 3 Тогда
		РайонныйКоэффициент = 1;
	КонецЕсли;
	
	Если ПустаяСтрока(Наименование) Или Наименование = Справочники.Организации.НаименованиеПоУмолчанию() Тогда
		
		Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			НовоеНаименование = ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(НаименованиеСокращенное);
		Иначе
			НовоеНаименование = ОрганизацииФормыКлиентСервер.НаименованиеИндивидуальногоПредпринимателя(ФамилияИП, ИмяИП, ОтчествоИП);
		КонецЕсли;
		
		Если Не ПустаяСтрока(НовоеНаименование) Тогда
			Наименование = НовоеНаименование;
		КонецЕсли;
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = Справочники.Организации.НаименованиеПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Если ПустаяСтрока(НаименованиеСокращенное) Тогда
			НаименованиеСокращенное = ОрганизацииФормыКлиентСервер.СокращенноеНаименованиеИндивидуальногоПредпринимателя(ФамилияИП, ИмяИП, ОтчествоИП);
		КонецЕсли;
		
		Если ПустаяСтрока(НаименованиеПолное) Тогда
			НаименованиеПолное = ОрганизацииФормыКлиентСервер.ПолноеНаименованиеИндивидуальногоПредпринимателя(ФамилияИП, ИмяИП, ОтчествоИП);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоНовый() Тогда
		
		// Запишем старые реквизиты организации
		// В том случае, если у организации меняется регистрация, то нужно будет обновить НаименованиеСлужебное в прежней регистрации
		// Это связано с тем, что, например, несколько подразделений на отдельном балансе и на общем балансе могут ссылаться на одну регистрацию
		// Т.к. НаименованиеСлужебное отражает актуальную привязку к обособленному подразделению организации, понятную пользователю,
		// то у прежней регистрации НаименованиеСлужебное, возможно, не будет верным - понадобится обновить
		
		РеквизитыДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Наименование, НаименованиеПолное, РегистрацияВНалоговомОргане, ОбособленноеПодразделение");
		
		ДополнительныеСвойства.Вставить("НаименованиеДоЗаписи", РеквизитыДоЗаписи.Наименование);
		ДополнительныеСвойства.Вставить("НаименованиеПолноеДоЗаписи", РеквизитыДоЗаписи.НаименованиеПолное);
		ДополнительныеСвойства.Вставить("РегистрацияВНалоговомОрганеДоЗаписи", РеквизитыДоЗаписи.РегистрацияВНалоговомОргане);
		ДополнительныеСвойства.Вставить("ОбособленноеПодразделениеДоЗаписи", РеквизитыДоЗаписи.ОбособленноеПодразделение);
		
	КонецЕсли;
	
	КодыСтатистики = Справочники.Организации.КодыСтатистики(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(КодОКОПФ) Тогда
		КодОКОПФ = КодыСтатистики.КодОКОПФ;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НаименованиеОКОПФ) Тогда // заполняется код и не заполняется наименование при заполнении по ИНН.
		НаименованиеОКОПФ = Справочники.Организации.НаименованиеОКОПФ(КодОКОПФ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КодОКФС) Тогда
		КодОКФС = КодыСтатистики.КодОКФС;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НаименованиеОКФС) Тогда
		НаименованиеОКФС = Справочники.Организации.НаименованиеОКФС(КодОКФС);
	КонецЕсли;
	
	//Если Обработки.ФункциональностьПрограммы.ДоступнаФункциональностьУчетПоНесколькимОрганизациям()
	//	И Не ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям")
	//	И Не Обработки.ФункциональностьПрограммы.УсловиеВыполненоВестиУчетПоОднойОрганизации(ЭтоНовый()) Тогда
	//	
	//	// Если не включена ФО "ВестиУчетПоОрганизациям", в базе может быть только одна организация.
	//	Если СервисЭлектронныхТрудовыхКнижек.ИспользуетсяСервисЭлектронныхТрудовыхКнижек() Тогда
	//		ТекстСообщения = НСтр("ru = 'Возможность ведения учета по нескольким организациям не поддерживается.'");
	//	Иначе
	//		ТекстСообщения = НСтр("ru = 'Возможность ведения учета по нескольким организациям отключена. Чтобы добавить новую организацию, включите флаг ""Учет по нескольким организациям"" в настройках Функциональности (Главное - Функциональность - вкладка Организация).'");
	//	КонецЕсли;
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//			ТекстСообщения,
	//			,
	//			,
	//			,
	//			Отказ);
	//			
	//КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Если НЕ ОбособленноеПодразделение Тогда
		ИНН	                = "";
		ГоловнаяОрганизация	= Неопределено;
	КонецЕсли;
	
	ПрефиксБП20 = "";
	
	ОсновнойБанковскийСчет = Неопределено;
	
	ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	КПП					         = "";
	КодНалоговогоОргана	         = "";
	РегистрацияВНалоговомОргане  = Неопределено;
	НаименованиеНалоговогоОргана = "";
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ДополнительныеСвойства.Свойство("ОрганизацияЗарегистрирована") 
		И НЕ ДополнительныеСвойства.ОрганизацияЗарегистрирована Тогда
		Возврат;
	КонецЕсли;
	
	// Регистр РеквизитыСервисаПроверокКонтролирующимиОрганами не участвует в обменах данными
	// и в загрузке-выгрузке данных в сервисе. Поэтому записи этого регистра нужно создавать
	// и в случае записи в режиме ОбменДанными.Загрузка
	//РеквизитыСервисаПроверок = РеквизитыСервисаПроверокКонтролирующимиОрганами();
	//Справочники.ПроверкиКонтролирующимиОрганами.ЗаписатьРеквизитыСервисаПроверокПриЗаписиОрганизации(
	//	РеквизитыСервисаПроверок);
	
	//Если НЕ Отказ
	//	И Не ПометкаУдаления
	//	И ПолучитьФункциональнуюОпцию("НачалоРаботы")
	//	И НЕ Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации()
	//	И НЕ Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВИнформационнойБазеВключена() Тогда
	//	// Если используется сервис регистрации или включена интеграция с банками, 
	//	// то установка константы "Начало работы" не должна выполняться автоматически.
	//	Константы.НачалоРаботы.Установить(Ложь);
	//КонецЕсли;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПометкаУдаления
		И ЗначениеЗаполнено(ОГРН)
		И ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.РегистрацияНеЗавершена.Установить(Ложь);
		Обработки.РегистрацияОрганизации.ОчиститьСлужебныеДанныеПослеРегистрации();
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	//ПроверитьЗначениеОпцииИспользоватьНесколькоОрганизаций();
	
	Справочники.БанковскиеСчета.ПроверитьУстановитьЗначениеОпцииИспользоватьНесколькоБанковскихСчетовОрганизации(Ссылка);
	
	//Справочники.ПодразделенияОрганизаций.СоздатьОсновноеПодразделение(Ссылка);
	//СоздатьСтавкиНалогаНаИмущество();
	//ЗаписатьУчетнуюПолитикуОбособленногоПодразделения();
	//УчетЗарплаты.СоздатьПараметрыУчетаЗарплаты(Ссылка);
	//ВключитьДляНФОУчетПоСтатьямДДС();
	
	ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина;
	Если ДополнительныеСвойства.Свойство("ТребуетсяСоздатьПоставляемыеВидыНалогов") Тогда
		//ТребуетсяСоздатьПоставляемыеВидыНалогов = ДополнительныеСвойства.ТребуетсяСоздатьПоставляемыеВидыНалогов;
	КонецЕсли;
	
	Справочники.Организации.ОбновитьИспользуемыеВидыОрганизаций(ТребуетсяСоздатьПоставляемыеВидыНалогов);
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		НастройкиУчета.ПриЗаписиНовойОрганизации(Ссылка);
	КонецЕсли;
	
	//РегистрыСведений.АктуальностьКомплектаНулевойОтчетности.УстановитьАктуальность(Ссылка, Ложь);
	
	//// БРО
	//ЭлектронныйДокументооборотСКонтролирующимиОрганами.ПриЗаписиОрганизации(ЭтотОбъект, Отказ);
	//
	//Справочники.ПроверкиКонтролирующимиОрганами.ОбновитьЗадачиБухгалтераПриЗаписиОрганизации(РеквизитыСервисаПроверок);
	//
	//ПерсонализированныеПредложенияСервисов.ПриЗаписиОрганизации(ЭтотОбъект, Отказ);
	//
	//НулеваяОтчетность.ПриЗаписиОрганизации(ЭтотОбъект, Отказ);
	//
	//Если НЕ Отказ И ОбособленноеПодразделение Тогда
	//	ОбновитьПовторноИспользуемыеЗначения();
	//КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	// Очистим ссылки на организацию в служебном регистре сведений "ПубликуемыеНавигационныеСсылки".
	// Необходимо выполнять перед проверкой ОбменДанными.Загрузка,
	// поскольку регистр сведений намеренно не включен ни в один план обмена.
	УдалитьПубликуемыеНавигационныеСсылки();
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьСтавкиНалогаНаИмущество()

	НаборЗаписей = РегистрыСведений.СтавкиНалогаНаИмущество.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запись = НаборЗаписей.Добавить();
	Запись.Период = НачалоГода(ТекущаяДатаСеанса());
	Запись.Организация = Ссылка;
	Запись.НалоговаяСтавка = 2.2;

	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция НужноУстановитьИндивидуальногоПредпринимателя()
	
	Если НЕ ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИННФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИндивидуальныйПредприниматель, "ИНН");
	Если ИННФизическогоЛица <> ИНН Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура УстановитьИндивидуальногоПредпринимателя()
	
	Перем ФизическоеЛицо;
	
	// Возможно, физическое лицо, которое соответствует индивидуальному предпринимателю уже есть в ИБ
	ФизическоеЛицо = Справочники.Организации.ФизическоеЛицо(ФамилияИП, ИмяИП, ОтчествоИП, ИНН);
	Если ФизическоеЛицо = Неопределено Тогда
		// Физическое лицо определить невозможно
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		// Физическое лицо есть в справочнике
		ИндивидуальныйПредприниматель = ФизическоеЛицо;
	Иначе
		// Физическое лицо нужно создать
		ФИО = Новый Структура("Фамилия, Имя, Отчество", ФамилияИП, ИмяИП, ОтчествоИП);
		ДанныеФизическогоЛица = Новый Структура("ИНН", ИНН);
		ФизлицоОбъект = КадровыйУчет.НовоеФизическоеЛицо(ФИО, ДанныеФизическогоЛица);
		ИндивидуальныйПредприниматель = ФизлицоОбъект.Ссылка;
		
		Для Каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
			Если СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
				СтрокаКонтактнойИнформацииФизлица = ФизлицоОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформацииФизлица, СтрокаКонтактнойИнформации);
				СтрокаКонтактнойИнформацииФизлица.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ИначеЕсли СтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
				СтрокаКонтактнойИнформацииФизлица = ФизлицоОбъект.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКонтактнойИнформацииФизлица, СтрокаКонтактнойИнформации);
				СтрокаКонтактнойИнформацииФизлица.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
			КонецЕсли;
		КонецЦикла;
		
		Если ФизлицоОбъект.КонтактнаяИнформация.Количество() > 0 Тогда
			ФизлицоОбъект.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьУчетнуюПолитикуОбособленногоПодразделения()

	Если НЕ ОбособленноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиУчета.ЗаписатьУчетнуюПолитикуОбособленногоПодразделения(Ссылка);
	
КонецПроцедуры

Функция РеквизитыСервисаПроверокКонтролирующимиОрганами()

	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("ИзменилсяИНН", ДополнительныеСвойства.Свойство("СтарыйИНН")
		И ИНН <> ДополнительныеСвойства.СтарыйИНН);
	Если НЕ Реквизиты.ИзменилсяИНН Тогда
		Возврат Реквизиты;
	КонецЕсли;
	
	Реквизиты.Вставить("Ссылка",    Ссылка);
	Реквизиты.Вставить("ИНН",       ИНН);
	Реквизиты.Вставить("СтарыйИНН", ДополнительныеСвойства.СтарыйИНН);
	Реквизиты.Вставить("ЗначениеРазделителя", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	Реквизиты.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	ЭтоЮридическоеЛицо = ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Реквизиты.Вставить("КорректныйИНН", РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
		ИНН, ЭтоЮридическоеЛицо, ""));
	Реквизиты.Вставить("КорректныйСтарыйИНН", РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(
		ДополнительныеСвойства.СтарыйИНН, ЭтоЮридическоеЛицо, ""));
	Возврат Реквизиты;
	
КонецФункции

Процедура ВключитьДляНФОУчетПоСтатьямДДС()
	
	Если НЕ НекредитнаяФинансоваяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Справочники.СтатьиДвиженияДенежныхСредств.УстановитьУчетПоСтатьямДДС(Истина);
	
КонецПроцедуры

Процедура ПроверитьЗначениеОпцииИспользоватьНесколькоОрганизаций()
	
	//Если НЕ ЭтоГруппа
	//	И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
	//	И Справочники.Организации.КоличествоОрганизаций() > 1 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.ИспользоватьНесколькоОрганизаций.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
		
	//КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПубликуемыеНавигационныеСсылки()
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Организация", Ссылка);
	//
	//Запрос.Текст = "
	//|ВЫБРАТЬ
	//|	ПубликуемыеНавигационныеСсылки.Идентификатор КАК Идентификатор
	//|ИЗ
	//|	РегистрСведений.ПубликуемыеНавигационныеСсылки КАК ПубликуемыеНавигационныеСсылки
	//|ГДЕ
	//|	ПубликуемыеНавигационныеСсылки.Организация = &Организация";
	//
	//УстановитьПривилегированныйРежим(Истина);
	//ВыборкаИдентификаторов = Запрос.Выполнить().Выбрать();
	//Пока ВыборкаИдентификаторов.Следующий() Цикл
	//	
	//	МенеджерЗаписи = РегистрыСведений.ПубликуемыеНавигационныеСсылки.СоздатьМенеджерЗаписи();
	//	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаИдентификаторов);
	//	МенеджерЗаписи.Удалить();
	//	
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли