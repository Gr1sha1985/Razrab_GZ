
&НаКлиенте
Перем ЗаполнятьРеквизитыПоИНН;

&НаКлиенте
// Содержит признак того, что было вызвано оповещение в текущей форме.
Перем РассылкаОповещенияИзТекущейФормы;
&НаКлиенте 
Перем ТекущийТекстНомераСчета; // Текст, набранный в поле ввода номера счета

&НаКлиенте
// Имя картинки, которую пользователь выбирает. Например "Логотип", "ПодписьРуководителя" или "ПодписьБухгалтера".
Перем ВыбираемаяКартинка;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОтправкаПочтовыхСообщений.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Установка списка выбора головных организаций
	Элементы.ГоловнаяОрганизация.СписокВыбора.ЗагрузитьЗначения(ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения().ВыгрузитьЗначения());
	
	//ПравоДоступаИсторияРегистрацииПФР = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ИсторияРегистрацийВОрганеПФР);
	
	// Исключим редактируемую организацию из списка головных
	Если Параметры.Ключ.Пустая() Тогда
		ОрганизацияСсылка         = Справочники.Организации.ПолучитьСсылку();
		ЭлементТекущаяОрганизация = Элементы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Объект.Ссылка);
		Если ЭлементТекущаяОрганизация <> Неопределено Тогда
			Элементы.ГоловнаяОрганизация.СписокВыбора.Удалить(ЭлементТекущаяОрганизация);
		КонецЕсли;
		Если ПравоДоступаИсторияРегистрацииПФР Тогда
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
		КонецЕсли;
		ОтобразитьЗаполнениеПоДаннымЕГР = Истина;
	Иначе
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	// Установка списка выбора регионов
	//КодРегионаРегистрации = Формат(РегистрацияВНалоговомОргане.КодРегиона, "ЧЦ=2; ЧН=; ЧВН=");
	//НастройкиУчетаНалогаНаПрибыльФормы.НастроитьЭлементыУказанияРегиона(
	//	ТребуетсяУказаниеРегиона,
	//	Элементы.КодРегионаРегистрации.СписокВыбора,
	//	КодРегионаРегистрации);
	
	//АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
	
	//Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
	//   И Объект.ОбособленноеПодразделение 
	//   И ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда // обособленное подразделение
	//	СтруктураУчетнойПолитики = ОрганизацииФормыВызовСервера.ПараметрыСистемыНалогообложенияПоОрганизации(Объект.ГоловнаяОрганизация);
	//ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда // копируем учетную политику
	//	СтруктураУчетнойПолитики = ОрганизацииФормыВызовСервера.ПараметрыСистемыНалогообложенияПоОрганизации(Параметры.ЗначениеКопирования);
	//Иначе
	//	Параметры.Свойство("СтруктураУчетнойПолитики", СтруктураУчетнойПолитики);
	//КонецЕсли;
	//ИсточникУчетнойПолитики = ?(СтруктураУчетнойПолитики = Неопределено Или Не Параметры.Ключ.Пустая(),
	//							ОрганизацияСсылка, СтруктураУчетнойПолитики);
	//СистемаНалогообложенияПредставление = ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(ИсточникУчетнойПолитики);
	//Элементы.СистемаНалогообложенияПредставление.Видимость = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.УчетнаяПолитика);
	//
	//УплачиватьДобровольныеВзносыВФСС = УплачиватьДобровольныеВзносыВФСС(Объект.Ссылка);
	//
	//ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
	ЦветГиперссылкаТабличнойЧасти 	= ЦветаСтиля.ЦветГиперссылки;
	ЦветНезаполненныйРеквизит 		= ЦветаСтиля.НезаполненныйРеквизит;
	ЦветВыделенияНекорректногоЗначение = ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой;
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылки;
	
	НаименованиеПоУмолчанию = Справочники.Организации.НаименованиеПоУмолчанию();
	
	НаименованиеСокращенноеДоИзменения	= Объект.НаименованиеСокращенное;
	
	НаименованиеСокращенное	= Объект.НаименованиеСокращенное;
	НаименованиеПолное		= Объект.НаименованиеПолное;
	
	//Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
	//	И ПолучитьФункциональнуюОпцию("ВедетсяУчетЗарплатыКадров") Тогда
	//	ИПИспользуетТрудНаемныхРаботников = Истина;
	//КонецЕсли;
	
	ИнициализироватьФорму();
	
	РазместитьКонтактнуюИнформацию();
	
	// Если адрес не заполнен (например, для новой организации),
	// то не показываем кнопку смены адреса до следующего открытия формы
	//Элементы.ПоставитьНаУчетПоНовомуАдресу.Видимость = НЕ ЭтоФизЛицо 
	//	И ОрганизацииФормыКлиентСервер.АдресЗаполен(ЭтотОбъект, "КонтактнаяИнформацияПолеЮрАдресОрганизации");	
	//	
	//УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	//
	//Элементы.КодНалоговогоОрганаПолучателя.Доступность = Объект.КрупнейшийНалогоплательщик;
	
	//// Обработчик подсистемы "Свойства"
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("Объект", Объект);
	//ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	//УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// Установка доступности ссылок в зависимости от доступности данных формы для изменения
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Доступность = НЕ ТолькоПросмотр;	
	Элементы.ЗагрузитьАдресныйКлассификатор.Доступность = НЕ ТолькоПросмотр;	
	Элементы.НадписьСформироватьЗаявлениеНаПодключениеКЭлектронномуДокументообороту.Доступность =
		Пользователи.ЭтоПолноправныйПользователь() ИЛИ РольДоступна("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами");
	
	Элементы.ФормаРегистрацияОрганизации.Видимость = НЕ Параметры.Ключ.Пустая() И НачалоРаботы.ДоступностьРегистрацииВОрганизации();
	Элементы.ИНН.Доступность = УчетНДС.ДоступностьИННВОрганизации();
	
	//МожноРедактироватьФайлы = ПравоДоступа("Редактирование", Метаданные.Справочники.ОрганизацииПрисоединенныеФайлы);
	
	//ПодготовитьЭлементыСКартинкамиЛоготипаИФаксимиле();
	
	//УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Объект.КодНалоговогоОргана, 
	//			ПлатежныеРеквизитыФНСПредставление);
	//
	//УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганФСС, Объект.КодПодчиненностиФСС, 
	//			ПлатежныеРеквизитыФССПредставление);
	//
	//УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганПФР, Объект.КодОрганаПФР, 
	//			ПлатежныеРеквизитыПФРПредставление);
					
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Ссылка));
	
	//ПростойИнтерфейс                   = ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой");
	//ИнтерфейсЭлектронныхТрудовыхКнижек = ПолучитьФункциональнуюОпцию("ИнтерфейсЭлектронныхТрудовыхКнижек");
	
	//Если ПростойИнтерфейс Тогда
	//	
	//	АвтоЗаголовок = Ложь;
	//	Заголовок = НСтр("ru='Настройки'");
	//	
	//КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	//НастройкиУчетаМСФО.НастроитьФормуОбъектаУчета(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("УстановитьТекущийЭлемент")
		И ЗначениеЗаполнено(Параметры.УстановитьТекущийЭлемент) Тогда
		Если Элементы.Найти(Параметры.УстановитьТекущийЭлемент)<> Неопределено Тогда 
			ТекущийЭлемент = Элементы[Параметры.УстановитьТекущийЭлемент];
		КонецЕсли;
	КонецЕсли;
	
	//Если Параметры.АктивироватьПолеПечать Тогда
	//	АктивироватьПолеПечать();
	//КонецЕсли;
	
	//// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	//ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	//ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
	//	ЭтаФорма,
	//	"БП.Справочник.Организации",
	//	"ФормаОрганизации",
	//	НСтр("ru='Новости: Организация'"),
	//	ИдентификаторыСобытийПриОткрытии
	//);
	//// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	//Если НЕ ИнтерфейсЭлектронныхТрудовыхКнижек Тогда
	//	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	//	ЭлектронноеВзаимодействиеБП.КомандыЭДО_ФормаЭлементаПриСоздании(ЭтотОбъект);
	//	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	//Иначе
	//	СервисЭлектронныхТрудовыхКнижек.Организация_ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		ОрганизацияСсылка = Объект.Ссылка;
	КонецЕсли;
	
	//ПроверитьСоответствиеТребованиямИНН(ЭтотОбъект);
	//ПроверитьСоответствиеТребованиямКПП(ЭтотОбъект);
	//
	//ПрочитатьРегистрациюВНалоговомОргане();
	//
	//ПрочитатьРегистрацияВОрганеПФР();
	//
	//ПрочитатьОсновнойБанковскийСчет();
	//
	//НаименованиеТОГС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.НаименованиеТОГС(Объект.КодОрганаФСГС);
	
	ПрочитатьКонтактнуюИнформацию(ТекущийОбъект);
	
	//ОрганизацииФормыДляОтчетностиКлиентСервер.УстановитьВидимостьПодсказкиОКВЭД2(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда 
		ОповеститьВФорме("ОткрытиеФормыНовойОрганизации");
	КонецЕсли;
	
	//ОрганизацииФормыКлиент.ОформитьПредставлениеСистемыНалогообложения(ЭтотОбъект);
	
	//// СтандартныеПодсистемы.Свойства
	//УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.Свойства
	
	//// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	//ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	//// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	//// СтандартныеПодсистемы.УправлениеПечатью
	//ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.УправлениеПечатью
	
	//Если ЕГРНужноОбновитьРеквизитыОрганизации И Не ЕГРПроверкаРегистрацииИзмененийВыполнена Тогда
	//	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьРегистрациюИзмененийВЕГР", 0.1, Истина);
	//КонецЕсли;
	//
	//// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	//ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	//// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Игнорируем собственные оповещения, которые предназначены для других форм.
	Если Источник = ЭтотОбъект ИЛИ РассылкаОповещенияИзТекущейФормы Тогда
		Возврат;
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане" Тогда
		
		Если НЕ ТолькоПросмотр Тогда
			
			Если РегистрацияВНалоговомОргане.Ссылка = Параметр.Ссылка Тогда
				ОбновитьРегистрациюПослеЗаписиВФормеРегистрации(РегистрацияВНалоговомОргане.Ссылка);
				ПроверитьСоответствиеТребованиямКПП(ЭтотОбъект);
				
				УправлениеФормой(ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛиц" Тогда
		
		ОбновитьИнформациюОбОтветственныхЛицах();
		
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Ссылка = Объект.ОсновнойБанковскийСчет Тогда
		
		Если Параметр.Свойство("ОсновнойБанковскийСчет") Тогда
			Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		ПрочитатьОсновнойБанковскийСчет();
		
		УправлениеФормой(ЭтотОбъект);
	
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета"
		  ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		
		Если Не ТолькоПросмотр Тогда
			
			Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
				
				УстановитьОсновнойБанковскийСчет(Параметр.ОсновнойБанковскийСчет);
				
				ОповеститьВФорме("УстановкаОсновногоБанковскогоСчетаВыполнена");
				
				УправлениеФормой(ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		
		Если Параметр = Объект.Ссылка
			Или Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Ссылка) Тогда
			
			УплачиватьДобровольныеВзносыВФСС = УплачиватьДобровольныеВзносыВФСС(Объект.Ссылка);
			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Ссылка));
			СистемаНалогообложенияПредставление = ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(Объект.Ссылка);
			
			УправлениеФормой(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("ВладелецФайла")
			И (Параметр.ВладелецФайла = Объект.Ссылка
				ИЛИ Параметр.ВладелецФайла = РуководительФизЛицо
				ИЛИ Параметр.ВладелецФайла = ГлавныйБухгалтерФизЛицо
				ИЛИ Параметр.ВладелецФайла = Объект.ИндивидуальныйПредприниматель)
			И ЗначениеЗаполнено(ВыбираемаяКартинка) Тогда
			
			Модифицированность = Истина;
			
			ФайлКартинки = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			УстановитьКартинкуВЭлементе(ФайлКартинки, ВыбираемаяКартинка);
			
			Если РуководительФизЛицо = ГлавныйБухгалтерФизЛицо Тогда
				Если ВыбираемаяКартинка = "ПодписьРуководителя" Тогда
					ВыбираемаяКартинка = "ПодписьГлавногоБухгалтера";
				ИначеЕсли ВыбираемаяКартинка = "ПодписьГлавногоБухгалтера" Тогда
					ВыбираемаяКартинка = "ПодписьРуководителя";
				Иначе
					ВыбираемаяКартинка = Неопределено;
				КонецЕсли;
				Если ВыбираемаяКартинка <> Неопределено Тогда
					УстановитьКартинкуВЭлементе(ФайлКартинки, ВыбираемаяКартинка);
				КонецЕсли;
			КонецЕсли;
			
			ВыбираемаяКартинка = Неопределено;
			
			УправлениеФормой(ЭтотОбъект);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" Тогда
		Если Параметр.ИмяРегистра = "ИсторияРегистрацийВНалоговомОргане"
			И Параметр.ВедущийОбъект = Объект.Ссылка Тогда
			
			ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Очистить();
			Для Каждого ЗаписьНабора Из Параметр.НаборЗаписей Цикл
				ЗаписьИстории = ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
			КонецЦикла;
			
			ПослеРедактированияИсторииРегистрацийВНалоговомОргане();
			ПроверитьСоответствиеТребованиямКПП(ЭтотОбъект);
			
			УправлениеФормой(ЭтотОбъект);

		ИначеЕсли Параметр.ИмяРегистра = "ИсторияРегистрацийВОрганеПФР" И ПравоДоступаИсторияРегистрацииПФР Тогда
			РедактированиеПериодическихСведенийКлиент.ОбработкаОповещения(ЭтотОбъект, ОрганизацияСсылка, ИмяСобытия, Параметр, Источник);
			Объект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПредложитьСохранитьИзмененияЕГР" И Параметр = Объект.Ссылка Тогда
		ЕГРНужноОбновитьРеквизитыОрганизации = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьРегистрациюИзмененийВЕГР", 0.1, Истина);
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ВнесениеИзмененийЕГРнеЗавершено" И Параметр = Объект.Ссылка Тогда
		ЕГРВнесениеИзмененийНеЗавершено = Истина;
		ЕГРНужноОбновитьРеквизитыОрганизации = Ложь;
		ЕГРЗавершитьВнесениеИзмененийПриЗаписи = Ложь;
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Ссылка Тогда
			Прочитать();
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	Если ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		ОбновитьВидимостьЭлементовДиректБанк();
		ПоказатьЭлементыДиректБанк(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ФормаОрганизации_АктивироватьПолеПечать" Тогда
		Если Параметр = Объект.Ссылка Тогда
			Если Элементы.ГруппаЛоготипИПечать.Родитель = Элементы.ГруппаЛоготипИПечатьСвернуто Тогда
				АктивироватьПолеПечать();
			Иначе
				ТекущийЭлемент = Элементы.АдресПечать;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ФормаЭлементаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяОбработкиВводаКонтактнойИнформации = "Обработка.ВводКонтактнойИнформации";
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И Лев(ИсточникВыбора.ИмяФормы, СтрДлина(ИмяОбработкиВводаКонтактнойИнформации)) = ИмяОбработкиВводаКонтактнойИнформации Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
			И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
			И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Организации.Форма.РедактированиеИсторииНаименований") Тогда
		
		Если ВыбранноеЗначение.Свойство("Наименование") Тогда
			Объект.Наименование = ВыбранноеЗначение.Наименование;
		КонецЕсли;
		УстановитьНаименованиеПослеРедактированияИстории(ВыбранноеЗначение.ИсторияНаименований);
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.РедактированиеИсторииКонтактнойИнформации") Тогда
		
		УправлениеКонтактнойИнформациейКлиентБП.УстановитьАдресПослеРедактированияИстории(
			ЭтотОбъект,
			ВыбранноеЗначение.ИсторияИзмененийАдреса,
			Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
		
		ПриИзмененииЮрАдресаОрганизации();
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность	= Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовый = Ложь;
	
	Если Параметры.Ключ.Пустая() Тогда
		ЭтоНовый = Истина;
		ТекущийОбъект.УстановитьСсылкуНового(ОрганизацияСсылка);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписьНового", Истина);
	ИначеЕсли ТекущийОбъект.ЮридическоеФизическоеЛицо <> Параметры.Ключ.ЮридическоеФизическоеЛицо Тогда
		ПараметрыЗаписи.Вставить("ИзменениеВидаОрганизации", Истина);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	
	Если ПравоДоступаИсторияРегистрацииПФР Тогда
		ТекущийОбъект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	КонецЕсли;
	
	ТекущийОбъект.НаименованиеНалоговогоОргана = РегистрацияВНалоговомОргане.НаименованиеИФНС;
	
	Если ТекущийОбъект.РегистрацияВНалоговомОргане <> РегистрацияВНалоговомОргане.Ссылка
		ИЛИ НЕ ЗначениеЗаполнено(ТекущийОбъект.РегистрацияВНалоговомОргане) Тогда
		//Если основная регистрация заполнена, а данные для сохранения регистрации есть,
		//то нужно установить ссылку для поля РегистрацияВНалоговомОргане
		//В ПриЗаписи эта ссылка будет использована для сохранения регистрации в налоговом органе
		Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
			
			Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
				ТекущийОбъект.РегистрацияВНалоговомОргане = РегистрацияВНалоговомОргане.Ссылка;
			Иначе
				ТекущийОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИзмененБанковскийСчет Тогда
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)Тогда
			
			НайденныйБанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ТекущийОбъект.Ссылка, 
				БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
				
			Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) Тогда
				// Снимаем блокировку для прежнего банковского счета перед его заменой новым.
				РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйБанковскийСчет) Тогда
				ТекущийОбъект.ОсновнойБанковскийСчет = НайденныйБанковскийСчет;
				ОсновнойБанковскийСчетОбъект = НайденныйБанковскийСчет.ПолучитьОбъект();
				ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
				ИзмененБанковскийСчет = Ложь;
			Иначе
				ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				ОбъектРегистрации = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ОбъектРегистрации.Банк = БанковскийСчет.Банк;
				ОбъектРегистрации.НомерСчета = БанковскийСчет.НомерСчета;
				ОбъектРегистрации.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
			КонецЕсли;
			
		Иначе
			ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена") Тогда
		ПараметрыЗаписи.Вставить("РегистрацияНеЗавершенаПередЗаписью", ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена"));
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПередЗаписью",
		БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	
	ПараметрыЗаписи.Вставить("ИспользоватьНесколькоОрганизацийПередЗаписью", 
		Справочники.Организации.ИспользуетсяНесколькоОрганизаций());
	
	ПараметрыЗаписи.Вставить("ИспользуемыеСистемыНалогообложенияПередЗаписью", 
		РегистрыСведений.НастройкиСистемыНалогообложения.ИспользуемыеСистемыНалогообложения());
		
	ПараметрыЗаписи.Вставить("ИспользуемыеВидыОрганизацийПередЗаписью", 
		Справочники.Организации.ИспользуемыеВидыОрганизаций());
		
	ПараметрыЗаписи.Вставить("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью",
		УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров());
		
	Если Объект.НекредитнаяФинансоваяОрганизация Тогда
		ПараметрыЗаписи.Вставить("ИспользоватьСтатьиДДСПередЗаписью",
			ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"));
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ВедетсяУчетНФОПередЗаписью",
		ПолучитьФункциональнуюОпцию("ВедетсяУчетНФО"));

	ПараметрыЗаписи.Вставить("ЭтоНовый", ЭтоНовый);
		
	Если Справочники.Организации.КоличествоОрганизаций() = 0 Тогда
		// Это первая организация в базе, заполнение поставляемых видов налогов и платежей в бюджет 
		// надо выполнять после установки всех настроек в совокупности: 
		// параметров учета, свойства организации и учетной политики.
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяСоздатьПоставляемыеВидыНалогов", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ);
	
	ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект);
	
	Если ПравоДоступаИсторияРегистрацииПФР Тогда
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(ЭтотОбъект,
			"ИсторияРегистрацийВОрганеПФР",
			ОрганизацияСсылка,
			,
			Новый Структура("ОтключитьПроверкуДатыЗапретаИзменения", ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗаписьНового")));
	КонецЕсли;
	
	ТребуетсяСоздатьПоставляемыеВидыНалогов = Истина;
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ТребуетсяСоздатьПоставляемыеВидыНалогов") Тогда
		ТребуетсяСоздатьПоставляемыеВидыНалогов = ТекущийОбъект.ДополнительныеСвойства.ТребуетсяСоздатьПоставляемыеВидыНалогов;
	КонецЕсли;
	
	Если НЕ ТекущийОбъект.ОбособленноеПодразделение Тогда
		СозданаУчетнаяПолитика = СоздатьУчетнуюПолитику(ТекущийОбъект.Ссылка, СтруктураУчетнойПолитики, ТребуетсяСоздатьПоставляемыеВидыНалогов);
		
		Если НЕ СозданаУчетнаяПолитика И ПараметрыЗаписи.Свойство("ИзменениеВидаОрганизации") Тогда
			СозданаУчетнаяПолитика = ПроверитьУчетнуюПолитику(ТекущийОбъект.Ссылка);
		КонецЕсли; 
	Иначе
		СозданаУчетнаяПолитика = Ложь;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("СозданаУчетнаяПолитика", СозданаУчетнаяПолитика);

	Если ТребуетсяСоздатьПоставляемыеВидыНалогов Тогда
		// Поставляемые виды налогов создаются в событии ПриЗаписи() организации 
		// и подписки для регистра сведений учетной политики. 
	Иначе
		// При записи первой организации обновление поставляемых видов налогов и платежей в бюджет 
		// выполняем после установки всех влияющих настроек: параметров учета, свойств организации и ее учетной политики.
		Справочники.ВидыНалоговИПлатежейВБюджет.СоздатьПоставляемыеЭлементы();
	КонецЕсли;
		
	ОтветственныйПриЗаписиНаСервере(Отказ, ТекущийОбъект);
	
	ФаксимилеПодписиОтветственныхПриЗаписиНаСервере(Отказ);
	
	Если ЕГРЗавершитьВнесениеИзмененийПриЗаписи Тогда
		Если Обработки.РегистрацияОрганизации.ЗавершитьВнесениеИзмененийЕГР(ТекущийОбъект.Ссылка, ЕГРДатаРегистрацииИзменений) Тогда
			ЕГРНужноОбновитьРеквизитыОрганизации = Ложь;
			ЕГРВнесениеИзмененийНеЗавершено = Ложь;
			ЕГРЗавершитьВнесениеИзмененийПриЗаписи = Ложь;
			ПараметрыЗаписи.Вставить("ЗавершеноВнесениеИзмененийЕГР", Истина);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Перем СозданаУчетнаяПолитика;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если Не ПараметрыЗаписи.Свойство("СозданаУчетнаяПолитика", СозданаУчетнаяПолитика) Тогда
		СозданаУчетнаяПолитика = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") И ПараметрыЗаписи.ЭтоНовый Тогда
		// При записи новой организации необходимо обновить кэш повторно используемых значений,
		// т.к. ряд функций кэшируют в нем список организаций.
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	РегистрацияНеЗавершена = ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена");
	
	ПараметрыЗаписи.Вставить("ОсновнаяОрганизацияПослеЗаписи",
		БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
		
	ПараметрыЗаписи.Вставить("РегистрацияНеЗавершенаПослеЗаписи", 
		ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена"));
	
	ПараметрыЗаписи.Вставить("ИспользоватьНесколькоОрганизацийПослеЗаписи", 
		Справочники.Организации.ИспользуетсяНесколькоОрганизаций());

	Если СозданаУчетнаяПолитика Тогда
		ПараметрыЗаписи.Вставить("ИспользуемыеСистемыНалогообложенияПослеЗаписи", 
			РегистрыСведений.НастройкиСистемыНалогообложения.ИспользуемыеСистемыНалогообложения());
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ИспользуемыеВидыОрганизацийПослеЗаписи", 
		Справочники.Организации.ИспользуемыеВидыОрганизаций());
	
	Если Объект.НекредитнаяФинансоваяОрганизация Тогда
		ПараметрыЗаписи.Вставить("ИспользоватьСтатьиДДСПослеЗаписи",
			ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств"));
	КонецЕсли;
		
	ПараметрыЗаписи.Вставить("ВедетсяУчетНФОПослеЗаписи",
		ПолучитьФункциональнуюОпцию("ВедетсяУчетНФО"));
		
	ПрочитатьРегистрациюВНалоговомОргане();
	
	ПрочитатьРегистрацияВОрганеПФР();
	
	ПрочитатьОсновнойБанковскийСчет();
	
	ПрочитатьИнформациюОбответственныхЛицах();
	
	РезультатВыполнения = КалендарьБухгалтера.ЗапуститьЗаполнениеВФоне(УникальныйИдентификатор, ТекущийОбъект.Ссылка, СозданаУчетнаяПолитика);
	ПараметрыЗаписи.Вставить("РезультатВыполненияЗаданияКалендаряБухгалтера", РезультатВыполнения);
	
	ПараметрыЗаписи.Вставить("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи",
		УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Перем РегистрацияНеЗавершенаПередЗаписью, РегистрацияНеЗавершенаПослеЗаписи;
	Перем ИспользоватьНесколькоОрганизацийПередЗаписью, ИспользоватьНесколькоОрганизацийПослеЗаписи;
	Перем ИспользуемыеСистемыНалогообложенияПередЗаписью, ИспользуемыеСистемыНалогообложенияПослеЗаписи;
	Перем ИспользуемыеВидыОрганизацийПередЗаписью, ИспользуемыеВидыОрганизацийПослеЗаписи;
	Перем ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью, ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи;
	Перем ИспользоватьСтатьиДДСПередЗаписью, ИспользоватьСтатьиДДСПослеЗаписи;
	Перем ОсновнаяОрганизацияПередЗаписью, ОсновнаяОрганизацияПослеЗаписи;
	Перем ВедетсяУчетНФОПередЗаписью, ВедетсяУчетНФОПослеЗаписи;
	
	ОрганизацииФормыКлиент.ОформитьПредставлениеСистемыНалогообложения(ЭтотОбъект);
	
	ОбновитьИнтерфейс = Ложь;
	
	Если ПараметрыЗаписи.Свойство("РегистрацияНеЗавершенаПередЗаписью", РегистрацияНеЗавершенаПередЗаписью)
		И ПараметрыЗаписи.Свойство("РегистрацияНеЗавершенаПослеЗаписи", РегистрацияНеЗавершенаПослеЗаписи) Тогда
		
		Если РегистрацияНеЗавершенаПередЗаписью <> РегистрацияНеЗавершенаПослеЗаписи Тогда
			ОбновитьИнтерфейс = Истина;
		КонецЕслИ;
		
		Оповестить("ОткрытШагПомощника_РегистрацияОрганизации", Неопределено, ЭтотОбъект);
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользоватьНесколькоОрганизацийПередЗаписью", ИспользоватьНесколькоОрганизацийПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользоватьНесколькоОрганизацийПослеЗаписи", ИспользоватьНесколькоОрганизацийПослеЗаписи) Тогда
		
		Если ИспользоватьНесколькоОрганизацийПередЗаписью <> ИспользоватьНесколькоОрганизацийПослеЗаписи Тогда
			ОбновитьИнтерфейс = Истина;
		КонецЕслИ;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользуемыеСистемыНалогообложенияПередЗаписью", ИспользуемыеСистемыНалогообложенияПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользуемыеСистемыНалогообложенияПослеЗаписи", ИспользуемыеСистемыНалогообложенияПослеЗаписи) Тогда
		
		Для Каждого КлючИЗначение Из ИспользуемыеСистемыНалогообложенияПередЗаписью Цикл
			СтароеЗначение = КлючИЗначение.Значение;
			НовоеЗначение = Неопределено;
			Если НЕ ИспользуемыеСистемыНалогообложенияПослеЗаписи.Свойство(КлючИЗначение.Ключ, НовоеЗначение)
				ИЛИ СтароеЗначение <> НовоеЗначение Тогда
				ОбновитьИнтерфейс = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользуемыеВидыОрганизацийПередЗаписью", ИспользуемыеВидыОрганизацийПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользуемыеВидыОрганизацийПослеЗаписи", ИспользуемыеВидыОрганизацийПослеЗаписи) Тогда
		
		Для Каждого КлючИЗначение Из ИспользуемыеВидыОрганизацийПередЗаписью Цикл
			СтароеЗначение = КлючИЗначение.Значение;
			НовоеЗначение = Неопределено;
			Если НЕ ИспользуемыеВидыОрганизацийПослеЗаписи.Свойство(КлючИЗначение.Ключ, НовоеЗначение)
				ИЛИ СтароеЗначение <> НовоеЗначение Тогда
				ОбновитьИнтерфейс = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью", ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи", ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи) Тогда
		
		Если ИспользуетсяПодсистемаУчетаЗарплатыИКадровПередЗаписью <> ИспользуетсяПодсистемаУчетаЗарплатыИКадровПослеЗаписи Тогда
			ОбновитьИнтерфейс = Истина;
		КонецЕслИ;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ИспользоватьСтатьиДДСПередЗаписью", ИспользоватьСтатьиДДСПередЗаписью)
		И ПараметрыЗаписи.Свойство("ИспользоватьСтатьиДДСПослеЗаписи", ИспользоватьСтатьиДДСПослеЗаписи) Тогда
		
		Если ИспользоватьСтатьиДДСПередЗаписью <> ИспользоватьСтатьиДДСПослеЗаписи Тогда
			ОбновитьИнтерфейс = Истина;
		КонецЕслИ;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ВедетсяУчетНФОПередЗаписью", ВедетсяУчетНФОПередЗаписью)
		И ПараметрыЗаписи.Свойство("ВедетсяУчетНФОПослеЗаписи", ВедетсяУчетНФОПослеЗаписи) Тогда
		
		Если ВедетсяУчетНФОПередЗаписью <> ВедетсяУчетНФОПослеЗаписи Тогда
			ОбновитьИнтерфейс = Истина;
		КонецЕслИ;
		
	КонецЕсли;

	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонеЦесли;
	
	// Оповестим другие открытые формы о записанных изменениях в данных организации.
	ПараметрыЗаписиОрганизации = Новый Структура();
	Если ПараметрыЗаписи.Свойство("ЭтоНовый") Тогда
		ПараметрыЗаписиОрганизации.Вставить("ЭтоНовый", ПараметрыЗаписи.ЭтоНовый);
	КонецЕсли;
	ОповеститьВФорме("Запись_Организации", ПараметрыЗаписиОрганизации, Объект.Ссылка);
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		ОповеститьВФорме("ИзмененаРегистрацияВНалоговомОргане", Новый Структура("Ссылка", Объект.РегистрацияВНалоговомОргане), ЭтотОбъект);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("РезультатВыполненияЗаданияКалендаряБухгалтера") Тогда
		КалендарьБухгалтераКлиент.ОжидатьЗавершениеЗаполненияВФоне(ПараметрыЗаписи.РезультатВыполненияЗаданияКалендаряБухгалтера);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПередЗаписью", ОсновнаяОрганизацияПередЗаписью)
		И ПараметрыЗаписи.Свойство("ОсновнаяОрганизацияПослеЗаписи", ОсновнаяОрганизацияПослеЗаписи) Тогда
		
		Если ОсновнаяОрганизацияПередЗаписью <> ОсновнаяОрганизацияПослеЗаписи Тогда
			ОповеститьВФорме("ИзменениеОсновнойОрганизации", ОсновнаяОрганизацияПослеЗаписи);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВидОбменаСКонтролирующимиОрганами = ПредопределенноеЗначение("Перечисление.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате") Тогда
		ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ПроверитьПараметрыПодключенияК1СОтчетности(Объект.Ссылка, ЭтотОбъект);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ЗавершеноВнесениеИзмененийЕГР") Тогда
		Оповестить("ЗавершеноВнесениеИзмененийЕГР", Объект.Ссылка);
		Если Не ЭтоФизЛицо Тогда
			ОповеститьОбИзменении(Тип("ДокументСсылка.ФормированиеУставногоКапитала"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СохранениеИзмененийВОрганизации");
	
	БанковскиеСчетаФормыКлиент.ПередЗаписью(БанковскийСчет.НомерСчета, БИКБанка, Объект.Ссылка, Отказ);
	
	// Подготовка к записи факсимиле и логотипа
	Объект.ФайлЛоготип            = ФайлЛоготип;
	Объект.ФайлПечать             = ФайлПечать;
	Объект.ФайлФаксимильнаяПечать = ФайлФаксимильнаяПечать;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка, Отказ);
	
	Если НЕ ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Объект.КодНалоговогоОргана)
			И Не ЗначениеЗаполнено(Объект.КПП) Тогда
			ТекстСообщения = НСтр("ru = 'Поле ""КПП"" не заполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КПП", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетностьПодписываетПредставитель = 1
		И НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните сведения о представителе'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПредставлениеПредставителя",, Отказ);
		
	КонецЕсли;
	
	Если ТребуетсяУказаниеРегиона 
		И ЗначениеЗаполнено(Объект.КодНалоговогоОргана)
		И (НЕ ЗначениеЗаполнено(КодРегионаРегистрации) ИЛИ КодРегионаРегистрации = "00") Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Регион"" в разделе ""Налоговая инспекция"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КодРегионаРегистрации", , Отказ);
	КонецЕсли; 
	
	Если Не ОрганизацииФормыКлиентСервер.ОКВЭДСоответствуетТребованиям(ТекстСообщения, Объект.КодОКВЭД2) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КодОКВЭД2", , Отказ);
	КонецЕсли;
	
	Справочники.БанковскиеСчета.ОбработкаПроверкиЗаполнения(БанковскийСчет, БИКБанка, Истина, Отказ);
	
	// Удаляем из проверяемых реквизитов все, по которым автоматическая проверка не нужна:
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПолейФормы

&НаКлиенте
Процедура ПолеПоискаИННПриИзменении(Элемент)
	
	Если ЗаполнятьРеквизитыПоИНН 
		И ЗначениеЗаполнено(ПолеПоискаИНН)
		И НЕ ЗначениеЗаполнено(Объект.Наименование)
		И НЕ ЗначениеЗаполнено(Объект.НаименованиеПолное)
		И (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресОрганизации)
		ИЛИ КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) Тогда
		
		ЗаполнятьРеквизитыПоИНН = Ложь;
		
		ИННОбъекта = СокрП(ПолеПоискаИНН);
		
		ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(ИННОбъекта, Ложь);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьСистемаНалогообложения", ОрганизацииФормыКлиент, ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	Если Объект.Ссылка.Пустая() Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		
		ПараметрыФормы.Вставить("РежимПовторногоВыбораСистемыНалогообложения", Истина);
		ПараметрыФормы.Вставить("ВидОрганизации",                              ВидОрганизации);
		Если СтруктураУчетнойПолитики <> Неопределено Тогда // мы уже имеем ранее выбиравшиеся параметры
			
			ПараметрыФормы.Вставить("СистемаНалогообложения", СтруктураУчетнойПолитики.СистемаНалогообложения);
		
			ДополнительныеПараметрыУчетнойПолитики = Новый Массив;
			ДополнительныеПараметрыУчетнойПолитики.Добавить("ОбъектНалогообложенияУСН");
			ДополнительныеПараметрыУчетнойПолитики.Добавить("ПлательщикЕНВД");
			ДополнительныеПараметрыУчетнойПолитики.Добавить("ПрименяетсяУСНПатент");
		
			ЗначениеДополнительногоПараметра = Неопределено;
			Для каждого ПараметрУчетнойПолитики Из ДополнительныеПараметрыУчетнойПолитики Цикл
				Если Не СтруктураУчетнойПолитики.Свойство(ПараметрУчетнойПолитики, ЗначениеДополнительногоПараметра) Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыФормы.Вставить(ПараметрУчетнойПолитики, ЗначениеДополнительногоПараметра);
			КонецЦикла; 
			
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Организации.Форма.ФормаВыбораСистемыНалогообложения",
			ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
			
		ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
		ПараметрыОткрытия.Заголовок                   = НСтр("ru = 'Настройки налогов и отчетов'");
		ПараметрыОткрытия.ИмяФормы                    = "ОбщаяФорма.НалогиИОтчеты";
		ПараметрыОткрытия.Владелец                    = ЭтотОбъект;
		ПараметрыОткрытия.Уникальность                = УникальныйИдентификатор;
		ПараметрыОткрытия.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;

		ПараметрыФормы.Вставить("Организация",      Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимНастройки",   Истина);
		ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
		
		ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьИсториюНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСокращенноеПриИзменении(Элемент)
	
	ПриИзмененииСокращенногоНаименования();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)
	
	ПослеИзмененияПолногоНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНаименованиеНажатие(Элемент)
	
	ОткрытьИсториюНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	ГоловнаяОрганизацияПриИзмененииНаСервере();
	ОрганизацииФормыКлиент.ОформитьПредставлениеСистемыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ГоловнаяОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ГоловнаяОрганизация) Тогда
		Объект.ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнаяОрганизация, "ИНН");
	Иначе
		Объект.ИНН = "";
	КонецЕсли;
	
	УстановитьРегистрациюВНалоговомОргане();
	
	СистемаНалогообложенияПредставление = ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(Объект.ГоловнаяОрганизация);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Объект.ИНН = СокрП(Объект.ИНН);
	
	ПроверитьСоответствиеТребованиямИНН(ЭтотОбъект);
	
	Если РегистрацияНеЗавершена Тогда
		ЗаполнитьРегистрационныеДанныеОрганизацииНаСервере();
	КонецЕсли;
	
	УстановитьСвойстваФизическогоЛицаПослеЗаполнения();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	ПриИзмененииКПП();
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеРегистрирующегоОрганаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеРегистрирующегоОрганаРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполнитьНаименованиеРегистрирующегоОрганаПоДаннымЕГРЮЛ();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеПочтовыйАдресОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	Если ЭтоФизЛицо Тогда
		ПараметрыОткрытия.Вставить("Заголовок", ОрганизацииФормыКлиентСервер.ЗаголовокАдресаФизЛица());
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеПочтовыйАдресОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеФактАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеФаксОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеФаксОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеУчредительныйАдресИностраннойОрганизацииПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеУчредительныйАдресИностраннойОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
		
		Если КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПРегистрационныйНомерПФРПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрационныйНомерПФР) Тогда
		КодОрганаПФР = ПолучитьКодОрганаПФР(Объект.ИПРегистрационныйНомерПФР);
		Если НЕ ПустаяСтрока(КодОрганаПФР) Тогда
			Объект.КодОрганаПФР = КодОрганаПФР;
		КонецЕсли;
		КодОрганаПФРПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВОрганеПФРПриИзменении(Элемент)
	
	Объект.РегистрационныйНомерПФР = ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР;
	РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
	КодОрганаПФР = ПолучитьКодОрганаПФР(Объект.РегистрационныйНомерПФР);
	Если НЕ ПустаяСтрока(КодОрганаПФР) Тогда
		Объект.КодОрганаПФР = КодОрганаПФР;
	КонецЕсли;
	КодОрганаПФРПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИПРегистрационныйНомерФССПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
		КодПодчиненностиФСС = ПолучитьКодПодчиненностиФСС(Объект.ИПРегистрационныйНомерФСС);
		Если НЕ ПустаяСтрока(КодПодчиненностиФСС) Тогда
			Объект.КодПодчиненностиФСС = КодПодчиненностиФСС;
		КонецЕсли;
		КодОрганаФССПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерФССПриИзменении(Элемент)
	
	КодПодчиненностиФСС = ПолучитьКодПодчиненностиФСС(Объект.РегистрационныйНомерФСС);
	Если НЕ ПустаяСтрока(КодПодчиненностиФСС) Тогда
		Объект.КодПодчиненностиФСС = КодПодчиненностиФСС;
	КонецЕсли;
	КодОрганаФССПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКОПФ");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКОПФПриИзменении(Элемент)
	
	Объект.НаименованиеОКОПФ = НаименованиеОКОПФ(Объект.КодОКОПФ);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСПриИзменении(Элемент)
	
	Объект.НаименованиеОКФС = НаименованиеОКФС(Объект.КодОКФС);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКФСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКФС");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДПриИзменении(Элемент)
	
	// Исправление возможной опечатки в разделителе
	Объект.КодОКВЭД = СтрЗаменить(Объект.КодОКВЭД, ",", ".");
	
	Объект.НаименованиеОКВЭД = НаименованиеОКВЭД(Объект.КодОКВЭД);
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2ПриИзменении(Элемент)
	
	ОрганизацииФормыДляОтчетностиКлиентСервер.ИзменениеКодаОКВЭД2(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОКВЭД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьКодИзКлассификатора("ОКВЭД2");
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОбработкаВыбораКодОрганаФСГСПолучателя", ЭтотОбъект));
	
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		ДополнительныеПараметры.Вставить("ТекущийКодТОГС", Объект.КодОрганаФСГС);
	Иначе
		ЮридическийАдресЗначениеJSON = ЗначениеJSONКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресОрганизации");
		Если ЗначениеЗаполнено(ЮридическийАдресЗначениеJSON) Тогда
			КодРегиона = КодРегионаПоАдресу(ЮридическийАдресЗначениеJSON);
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				ДополнительныеПараметры.Вставить("КодРегиона", Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН="));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьКодОрганаТОГС(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКПП()
	
	ПроверитьСоответствиеТребованиямКПП(ЭтотОбъект);
	
	Если НЕ КППСоответствуетТребованиям Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Объект.КПП) >= 4 Тогда
		Если ПустаяСтрока(Объект.КодНалоговогоОргана) Тогда
			Объект.КодНалоговогоОргана = Лев(Объект.КПП, 4);
			КодНалоговогоОрганаПриИзмененииНаСервере();
		ИначеЕсли Лев(Объект.КПП, 4) = Объект.КодНалоговогоОргана Тогда
			УстановитьРегистрациюВНалоговомОргане();
		Иначе
			Если ИнтерфейсЭлектронныхТрудовыхКнижек Тогда
				УстановитьКодНалоговогоОргана();
			Иначе
				// Если код налогового органа не соответствует КПП, то спросим пользователя
				ОповещениеЗавершения = Новый ОписаниеОповещения("ПоказатьВопросПриИзмененииКППЗавершение", ЭтотОбъект);
				ОрганизацииФормыКлиент.ПоказатьВопросИзменитьКодНалоговогоОргана(Объект.КПП, Объект.КодНалоговогоОргана, ОповещениеЗавершения);
				// Остальные действия выполняем после ответа на вопрос
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		УстановитьРегистрациюВНалоговомОргане();
	КонецЕсли;
	
	// После изменения регистрации, возможно, требуется вывести пояснение о закрытом КПП
	ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(ЭтотОбъект, ЭтоФизЛицо, Объект.ОбособленноеПодразделение);
	
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КрупнейшийНалогоплательщикПриИзменении(Элемент)
	
	Элементы.КодНалоговогоОрганаПолучателя.Доступность = Объект.КрупнейшийНалогоплательщик;
	
	Если НЕ Объект.КрупнейшийНалогоплательщик Тогда
		Объект.КодНалоговогоОрганаПолучателя = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	КодНалоговогоОрганаПриИзмененииНаСервере();
	ЗаполнитьСписокРегионов(Элементы.КодРегионаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеКодПоОКАТОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаПФРПриИзменении(Элемент)
	
	КодОрганаПФРПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодПодчиненностиФССПриИзменении(Элемент)
	
	КодОрганаФССПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИностраннаяОрганизацияПриИзменении(Элемент)
	
	Если НЕ Объект.ИностраннаяОрганизация Тогда
		Объект.НаименованиеИнострОрганизации    = "";
		Объект.СтранаРегистрации                = Неопределено;
		Объект.СтранаПостоянногоМестонахождения = Неопределено;
		Объект.КодВСтранеРегистрации            = "";
		КонтактнаяИнформацияПолеУчредительныйАдресИностраннойОрганизации = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.СтранаПостоянногоМестонахождения) Тогда
		Объект.СтранаПостоянногоМестонахождения	= Объект.СтранаРегистрации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНаименованиеИФНСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПодписываетПредставительПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если ОтчетностьПодписываетПредставитель = 0 Тогда
		РегистрацияВНалоговомОргане.Представитель                   = Неопределено;
		РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя = "";
		РегистрацияВНалоговомОргане.ДокументПредставителя           = "";
		РегистрацияВНалоговомОргане.Доверенность                    = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура("Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя", ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаПриИзменении(Элемент)
	
	РегистрацияВНалоговомОргане.КодРегиона = КодРегионаРегистрации;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьСписокРегионов(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНаименованиеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НалоговыйОрганУстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеКодПоОКТМОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеТерриториальногоОрганаПФРПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеТерриториальногоОрганаФССПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИнострОрганизацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВНалоговомОрганеНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
		
		ЗаписатьРегистрациюВНалоговомОргане();
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("НаборЗаписей, ВедущийОбъект, ВладелецРегистрацииВНалоговомОргане, ТолькоПросмотр", 
				ИсторияРегистрацийВНалоговомОрганеНаборЗаписей, 
				Объект.Ссылка,
				ВладелецРегистрации(ЭтаФорма),
				ТолькоПросмотр);
	
	ОткрытьФорму("РегистрСведений.ИсторияРегистрацийВНалоговомОргане.Форма.РедактированиеИстории", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСУчета(Команда)
	
	ЗаписатьРегистрациюВНалоговомОргане();
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СнятьСУчетаЗавершение", ЭтотОбъект);
	
	ОрганизацииФормыКлиент.ОткрытьФормуПомощникаСнятияСУчета(
		ЭтотОбъект,
		РегистрацияВНалоговомОргане.Ссылка,
		ОповещениеЗавершения);
			
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьНаУчетПоНовомуАдресу(Команда)
		
	ЗаписатьРегистрациюВНалоговомОргане();
	
	// Обеспечим, чтобы записи истории регистраций и истории адреса,
	// которые редактируются в вызываемой форме, были актуальны (т.е. последними по времени).
	// Для этого передаем в параметры формы даты актуальности истории регистраций и адресов.
	// В открываемой форме обеспечивается запрет на ввод даты новых сведений меньшей или равной указанным.
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АктуальныйПериодИсторииРегистраций",
		ОрганизацииФормыКлиент.АктуальныйПериодИсторииРегистраций(ЭтотОбъект));
	ПараметрыФормы.Вставить("АктуальныйПериодИсторииАдреса", 
		ОрганизацииФормыКлиент.АктуальныйПериодИсторииКонтактнойИнформации(ЭтотОбъект, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации")));
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПоставитьНаУчетПоНовомуАдресуЗавершение", ЭтотОбъект);
	
	ОрганизацииФормыКлиент.ОткрытьФормуПомощникаСменыАдреса(
		ЭтотОбъект,
		"КонтактнаяИнформацияПолеЮрАдресОрганизации",
		ОповещениеЗавершения,
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	
	Элементы.ПодсказкаНомерСчета.Гиперссылка = Ложь;
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		БанковскийСчет, ЭтотОбъект, БИКБанка, ЦветВыделенияНекорректногоЗначение, Истина);
	
	ОбновитьВидимостьЭлементовДиректБанк();
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	
	ПоказатьЭлементыДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НекредитнаяФинансоваяОрганизацияПриИзменении(Элемент)
	
	Если НЕ Объект.НекредитнаяФинансоваяОрганизация Тогда
		Объект.КодОсновногоВидаДеятельностиНФО          = "";
		Объект.НаименованиеОсновногоВидаДеятельностиНФО = "";
		Объект.КодИныхВидовДеятельностиНФО              = "";
		Объект.НаименованиеИныхВидовДеятельностиНФО     = "";
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОсновногоВидаДеятельностиНФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьКодИзКлассификатора("ВидыДеятельностиНФО", , "КодОсновногоВидаДеятельностиНФО");
	
КонецПроцедуры

&НаКлиенте
Процедура КодОсновногоВидаДеятельностиНФОПриИзменении(Элемент)
	
	Объект.НаименованиеОсновногоВидаДеятельностиНФО = НаименованиеПоКлассификатору(
		"ВидыДеятельностиНФО", Объект.КодОсновногоВидаДеятельностиНФО);
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура КодИныхВидовДеятельностиНФОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИмяКлассификатора = "ВидыДеятельностиНФО";
	ИмяРеквизитаКод   = "КодИныхВидовДеятельностиНФО";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",  ИмяКлассификатора);
	ПараметрыФормы.Вставить("ТекущийПериод",   ТекущаяДата());
	ТекущийСписок = СтрРазделить(Объект[ИмяРеквизитаКод], ", ", Ложь);
	ПараметрыФормы.Вставить("ТекущийСписок",   ТекущийСписок);
	ПараметрыФормы.Вставить("Комментарий",     "");
	ПараметрыФормы.Вставить("ВыборСпискаКодов", Истина);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКлассификатора", ИмяКлассификатора);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКод",   ИмяРеквизитаКод);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаНаименование", "Наименование" + Сред(ИмяРеквизитаКод, 4));
	                                                
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьКодИныхВидовДеятельностиНФОЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаМСФОПриИзменении(Элемент)
	
	НастройкиУчетаМСФОКлиент.ПриИзмененииПоляФормы(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕГРСформироватьПакетДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПомощника = РегистрацияОрганизацииКлиентСервер.НовыеПараметрыПомощникаВнесенияИзменений();
		ПараметрыПомощника.Вставить("КонтекстныйВызов", Истина);
		ПараметрыПомощника.Вставить("Организация", Объект.Ссылка);
		РегистрацияОрганизацииКлиент.ОткрытьПомощникВнесенияИзменений(ПараметрыПомощника);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуЛоготип(Команда)
	
	ЗагрузитьКартинку("Логотип");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловЛоготип(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("Логотип");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЛоготип(Команда)
	
	ОчиститьКартинку("Логотип");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуФаксимиле(Команда)
	
	ЗагрузитьКартинку("ФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловФаксимиле(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("ФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФаксимиле(Команда)
	
	ОчиститьКартинку("ФаксимильнаяПечать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПодключениеОткрытьМастер(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(
		Объект.Ссылка, ЭтотОбъект, , , , , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВОрганеПФРИстория(Команда)
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию("ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка, ЭтотОбъект, ТолькоПросмотр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если НЕ ЗаполнятьРеквизитыПоИНН Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбособленноеПодразделение Тогда
		ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(Объект.ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	Если НЕ ЗаполнятьРеквизитыПоИНН Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолеПоискаИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Введите ИНН'"));
		ТекущийЭлемент = Элементы.ПолеПоискаИНН;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(ПолеПоискаИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код инспекции"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодНалоговогоОргана;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыФССПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код подчиненности"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодПодчиненностиФСС;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОбОтделенииФСС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПФРПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код органа ПФР"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодОрганаПФР;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОбОтделенииПФР();

КонецПроцедуры

&НаКлиенте
Процедура РегистрацияОрганизации(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОповещениеПослеПеререгистрации", "Подключаемый_ВыполненаРегистрацияОрганизации");
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.СведенияОЛицензии", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыВПрограмме(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок", Элементы.ВнесениеИзмененийЕГР.Заголовок);
	ПараметрыФормы.Вставить("АдресДанныхПомощника", ЕГРАдресДанныхПомощника);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьРеквизитыВПрограммеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ВводДатыВнесенияИзмененийЕГР",
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьВидимостьЭлементовДиректБанк()
	
	ВидимостьЭлементовДиректБанк = "НеПоказывать";
	Если БанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		ВидимостьЭлементовДиректБанк = ЭлектронноеВзаимодействиеБПВызовСервера.ВидимостьЭлементовДиректБанк(
			Объект.Ссылка, БанковскийСчет.Банк);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеИП()
	
	ФИОЗаполнено = ЗначениеЗаполнено(Объект.ФамилияИП) ИЛИ ЗначениеЗаполнено(Объект.ИмяИП)
		ИЛИ ЗначениеЗаполнено(Объект.ОтчествоИП);
	
	Если ЗначениеЗаполнено(Объект.Наименование) И ФИОЗаполнено Тогда
		НаименованиеИП = СокрЛП(Объект.Наименование);
		Элементы.НаименованиеИП.Гиперссылка = Истина;
		Элементы.НаименованиеИП.ЦветТекста = ЦветаСтиля["ЦветГиперссылки"];
	Иначе
		НаименованиеИП = НСтр("ru='<Не заполнено ФИО>'");
		Элементы.НаименованиеИП.Гиперссылка = Ложь;
		Элементы.НаименованиеИП.ЦветТекста = ЦветаСтиля["НезаполненныйРеквизит"];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоФизЛицо", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.Заполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КПП", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УплачиватьДобровольныеВзносыВФСС(Организация)
	
	УплачиватьДобровольныеВзносыВФСС =  ПолучитьФункциональнуюОпцию("УплачиватьДобровольныеВзносыВФСС", Новый Структура("Организация", Организация));
	
	Возврат УплачиватьДобровольныеВзносыВФСС;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.НадписьПоясненияНекорректногоИНН.Видимость =
		Не Объект.ОбособленноеПодразделение И Не ПустаяСтрока(Форма.НадписьПоясненияНекорректногоИНН);
	
	// Наименование
	Элементы.ИсторияНаименований.Доступность = НЕ ЭтоНовый;
	
	// Регистрирующий орган
	НаименованиеРегистрирующегоОрганаВыводитьПодсказку =
		НЕ ЭтоНовый 
		И НЕ Форма.ТолькоПросмотр
		И НЕ ЗначениеЗаполнено(Объект.НаименованиеРегистрирующегоОргана)
		И ЗначениеЗаполнено(Объект.ИНН)
		И Форма.ИННСоответствуетТребованиям;
	
	Элементы.НаименованиеРегистрирующегоОргана.РасширеннаяПодсказка.Заголовок = 
		?(НаименованиеРегистрирующегоОрганаВыводитьПодсказку,
			Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Этот реквизит можно заполнить по данным ЕГРЮЛ. '")),
				Новый ФорматированнаяСтрока(Нстр("ru = 'Заполнить'"),,,, "#")
			), "");
	
	// Группа Адрес и телефоны
	Элементы.КонтактнаяИнформацияПолеФактАдресОрганизации.Видимость = НЕ Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресОрганизацииСовпадает.Видимость                = Форма.ЮрФактАдресаСовпадают;
	
	Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.Видимость = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресОрганизацииСовпадает.Видимость                = Форма.ЮрПочтовыйАдресаСовпадают;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресОрганизации)
		ИЛИ Форма.КонтактнаяИнформацияПолеФактАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ФактАдресОрганизацииСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ФактАдресОрганизацииСовпадает = Форма.КонтактнаяИнформацияПолеФактАдресОрганизации;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации)
		ИЛИ Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ПочтовыйАдресОрганизацииСовпадает = НСтр("ru = '<не заполнен>'");
	Иначе
		Форма.ПочтовыйАдресОрганизацииСовпадает = Форма.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации;
	КонецЕсли;
	
	ДоступностьКонтактнойИнформации = НЕ Форма.ТолькоПросмотр;
	
	Элементы.ФактАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ЮрФактАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ЮрПочтовыйАдресаСовпадают.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.ПочтовыйАдресОрганизацииСовпадает.Доступность = ДоступностьКонтактнойИнформации;
	Элементы.КонтактнаяИнформацияПолеПочтовыйАдресОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.КонтактнаяИнформацияПолеФаксОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.КонтактнаяИнформацияПолеEmailОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	Элементы.КонтактнаяИнформацияПолеДругаяИнформацияОрганизации.ТолькоПросмотр = Форма.ТолькоПросмотр;
	
	АдресИТелефонУстановитьЗаголовок(Форма);
	
	//// Группа Подписи
	//ПодписиУстановитьЗаголовок(Форма);
	//
	//// Группа Логотип и подпись
	//ИменаКартинок = Новый Структура;
	//ИменаКартинок.Вставить("Логотип",                   НСтр("ru='логотип'"));
	//ИменаКартинок.Вставить("Печать",                    НСтр("ru='печать'"));
	//ИменаКартинок.Вставить("ПодписьРуководителя",       НСтр("ru='подпись'"));
	//ИменаКартинок.Вставить("ПодписьГлавногоБухгалтера", НСтр("ru='подпись'"));
	//ИменаКартинок.Вставить("ФаксимильнаяПечать",        НСтр("ru='факсимильную печать и подпись'"));
	//Для Каждого КлючИЗначение Из ИменаКартинок Цикл
	//	ИмяФайла       = "Файл" + КлючИЗначение.Ключ;
	//	ЭлементФормы   = "ЗагрузитьОчистить" + КлючИЗначение.Ключ;
	//	ОбъектДействия = КлючИЗначение.Значение;
	//	Если Форма[ИмяФайла].Пустая() Тогда
	//		Форма[ЭлементФормы] = СтрШаблон(НСтр("ru='Загрузить %1'"), ОбъектДействия); // Например, "Загрузить логотип"
	//	Иначе
	//		Форма[ЭлементФормы] = СтрШаблон(НСтр("ru='Очистить %1'"),  ОбъектДействия); // Например, "Очистить логотип"
	//	Конецесли;
	//КонецЦикла;
	//
	//Элементы.ДекорацияПредупреждениеФорматФаксимиле.Видимость = 
	//	ЗначениеЗаполнено(Форма.ФайлФаксимильнаяПечать)
	//	И НЕ (ЗначениеЗаполнено(Форма.ФайлПечать)
	//	ИЛИ ЗначениеЗаполнено(Форма.ФайлПодписьРуководителя)
	//	ИЛИ ЗначениеЗаполнено(Форма.ФайлПодписьГлавногоБухгалтера));
	//
	//// Группа Налоговая инспекция
	//КодНалоговогоОрганаУказан = ЗначениеЗаполнено(Объект.КодНалоговогоОргана);
	//
	//Элементы.РегистрацияВНалоговомОрганеНаименование.Доступность = КодНалоговогоОрганаУказан;
	//Элементы.РегистрацияВНалоговомОрганеНаименованиеИФНС.Доступность = КодНалоговогоОрганаУказан;
	//Элементы.ПлатежныеРеквизитыФНСПредставление.Доступность    = КодНалоговогоОрганаУказан;
	//Элементы.РегистрацияВНалоговомОрганеКодПоОКТМО.Доступность = КодНалоговогоОрганаУказан;
	//Элементы.РегистрацияВНалоговомОрганеКодПоОКАТО.Доступность = КодНалоговогоОрганаУказан;
	//Элементы.ГруппаПодписаниеОтчетности.Доступность            = КодНалоговогоОрганаУказан И НЕ Форма.ТолькоПросмотр;
	//Элементы.КодРегионаРегистрации.Доступность 				   = КодНалоговогоОрганаУказан;
	//
	//Элементы.РегистрацияВНалоговомОрганеНаименование.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.РегистрацияВНалоговомОрганеНаименованиеИФНС.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.РегистрацияВНалоговомОрганеКодПоОКТМО.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.РегистрацияВНалоговомОрганеКодПоОКАТО.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//
	//// Группа элементов представителя для предоставления отчетности
	//Элементы.ПредставлениеПредставителя.Видимость = Форма.ОтчетностьПодписываетПредставитель = 1;
	//Элементы.НадписьПредставительНеВыбран.Видимость = Форма.ОтчетностьПодписываетПредставитель = 0;
	//
	//Если НЕ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.Представитель) Тогда
	//	Форма.ПредставлениеПредставителя = НСтр("ru = 'Заполнить'");
	//ИначеЕсли ТипЗнч(Форма.РегистрацияВНалоговомОргане.Представитель) = Тип("СправочникСсылка.ФизическиеЛица")
	//	ИЛИ НЕ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя) Тогда
	//	Форма.ПредставлениеПредставителя = Форма.РегистрацияВНалоговомОргане.Представитель;
	//ИначеЕсли ТипЗнч(Форма.РегистрацияВНалоговомОргане.Представитель) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	Форма.ПредставлениеПредставителя = Форма.РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя + " (" + Форма.РегистрацияВНалоговомОргане.Представитель + ")";
	//КонецЕсли;
	//
	//НалоговыйОрганУстановитьЗаголовок(Форма);
	//
	//// Группа Пенсионный фонд
	//КодОрганаПФРУказан = ЗначениеЗаполнено(Объект.КодОрганаПФР);
	//Элементы.ПлатежныеРеквизитыПФРПредставление.Доступность = КодОрганаПФРУказан;
	//Элементы.НаименованиеТерриториальногоОрганаПФР.Доступность = КодОрганаПФРУказан;
	//
	//Элементы.НаименованиеТерриториальногоОрганаПФР.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//
	//ПенсионныйФондУстановитьЗаголовок(Форма);
	//
	//// Группа Фонд социального страхования
	//ГруппаФССВидимость = Не Форма.ИнтерфейсЭлектронныхТрудовыхКнижек
	//	И (НЕ Форма.ЭтоФизЛицо
	//		ИЛИ Форма.ИПИспользуетТрудНаемныхРаботников
	//		ИЛИ Форма.УплачиватьДобровольныеВзносыВФСС);
	//Элементы.ГруппаФСС.Видимость = ГруппаФССВидимость;
	//КодПодчиненностиФССУказан = ЗначениеЗаполнено(Объект.КодПодчиненностиФСС);
	//Элементы.ПлатежныеРеквизитыФССПредставление.Доступность = КодПодчиненностиФССУказан;
	//Элементы.НаименованиеТерриториальногоОрганаФСС.Доступность = КодПодчиненностиФССУказан;
	//
	//Элементы.НаименованиеТерриториальногоОрганаФСС.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//
	//ФондСоциальногоСтрахованияУстановитьЗаголовок(Форма);
	//
	//// Рег номера за сотрудников
	//ВидимостьФондов = НЕ Форма.ЭтоФизЛицо ИЛИ Форма.ИПИспользуетТрудНаемныхРаботников;
	//Элементы.ГруппаПенсионныйФондКодИИстория.Видимость      = ВидимостьФондов И Форма.ПравоДоступаИсторияРегистрацииПФР;
	//Элементы.РегистрационныйНомерПФРБезИстории.Видимость    = ВидимостьФондов И Не Форма.ПравоДоступаИсторияРегистрацииПФР;
	//Элементы.РегистрационныйНомерТФОМС.Видимость			= ВидимостьФондов;
	//Элементы.РегистрационныйНомерФСС.Видимость				= ВидимостьФондов;
	//
	//// Группа Коды статистики
	//КодыУстановитьЗаголовок(Форма);
	//
	//Элементы.ПодсказкаОКВЭД2.Видимость = ЗначениеЗаполнено(Форма.ПодсказкаОКВЭД2);
	//
	//// Группа Некредитная финансовая организация
	//НекредитнаяФинансоваяОрганизацияУстановитьЗаголовок(Форма);
	//Элементы.КодОсновногоВидаДеятельностиНФО.Доступность          = Объект.НекредитнаяФинансоваяОрганизация;
	//Элементы.НаименованиеОсновногоВидаДеятельностиНФО.Доступность = Объект.НекредитнаяФинансоваяОрганизация;
	//Элементы.КодИныхВидовДеятельностиНФО.Доступность              = Объект.НекредитнаяФинансоваяОрганизация;
	//Элементы.НаименованиеИныхВидовДеятельностиНФО.Доступность     = Объект.НекредитнаяФинансоваяОрганизация;
	//
	//// Группа Крупнейший налогоплательщик
	//КрупнейшийНалогоплательщикУстановитьЗаголовок(Форма);
	//
	//// Группа Иностранная организация
	//Элементы.ГруппаИностраннаяОрганизация.Видимость			= НЕ Форма.ЭтоФизЛицо И Объект.ИностраннаяОрганизация;
	//ИностраннаяОрганизацияУстановитьЗаголовок(Форма);
	//
	//ДоступностьИсторииРегистрацииВНалоговомОргане = МожноСохранитьРегистрацию(Форма) И ЗначениеЗаполнено(Объект.Ссылка);
	//Элементы.ИсторияРегистрацийВНалоговомОрганеКПП.Доступность                  = ДоступностьИсторииРегистрацииВНалоговомОргане;
	//Элементы.ИсторияРегистрацийВНалоговомОрганеКодНалоговогоОргана.Доступность = ДоступностьИсторииРегистрацииВНалоговомОргане;
	//
	//// Группа подписи
	//Элементы.Руководитель.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.РуководительДолжность.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.ГлавныйБухгалтер.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.ГлавныйБухгалтерДолжность.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.Кассир.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//Элементы.КассирДолжность.ТолькоПросмотр = Форма.ТолькоПросмотр;
	//
	//// "Внесение изменений в ЕГРЮЛ/ЕГРИП" показываем только в простом интерфейсе
	//ПредложитьСохранитьИзмененияЕГР = Форма.ЕГРНужноОбновитьРеквизитыОрганизации
	//	И Форма.ЕГРПроверкаРегистрацииИзмененийВыполнена И Не Форма.ЕГРЗавершитьВнесениеИзмененийПриЗаписи;
	//
	//ПоказатьПомощникВнесенияИзмененийЕГР = Не Объект.ОбособленноеПодразделение
	//	И Форма.ПростойИнтерфейс И Форма.ЕГРДоступноВнесениеИзменений;
	//
	//Элементы.ВнесениеИзмененийЕГРФон.Видимость = ЗначениеЗаполнено(Объект.Ссылка)
	//	И Форма.ЕГРДоступноВнесениеИзменений
	//	И (ПоказатьПомощникВнесенияИзмененийЕГР Или ПредложитьСохранитьИзмененияЕГР);
	//
	//Элементы.ГруппаПомощникВнесенияИзмененийЕГР.Видимость = ПоказатьПомощникВнесенияИзмененийЕГР;
	//
	//// Обновление реквизитов организации после внесения изменений в ЕГРЮЛ/ЕГРИП
	//Если Форма.ЕГРНужноОбновитьРеквизитыОрганизации Тогда
	//	Форма.ЕГРСформироватьПакетДокументов = НСтр("ru = 'Показать пакет документов'");
	//ИначеЕсли Форма.ЕГРВнесениеИзмененийНеЗавершено Тогда
	//	Форма.ЕГРСформироватьПакетДокументов = НСтр("ru = 'Продолжить подготовку документов'");
	//Иначе
	//	Форма.ЕГРСформироватьПакетДокументов = НСтр("ru = 'Сформировать пакет документов'");
	//КонецЕсли;
	//
	//Элементы.СохранениеИзмененийЕГР.Видимость = ПредложитьСохранитьИзмененияЕГР;
	//Элементы.ПояснениеИзмененияЕстьВЕГР.Видимость = Форма.ЕГРИзмененияДобавленыВРеестр И ПредложитьСохранитьИзмененияЕГР;
	//Элементы.ПояснениеИзмененийНетВЕГР.Видимость = Не Форма.ЕГРИзмененияДобавленыВРеестр И ПредложитьСохранитьИзмененияЕГР;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АдресИТелефонУстановитьЗаголовок(Форма)
	
	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
	Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеЮрАдресОрганизации) И НЕ Форма.КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		АдресЗаголовок = АдресЗаголовок + ": " + Форма.КонтактнаяИнформацияПолеЮрАдресОрганизации;
		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
			АдресЗаголовок = АдресЗаголовок + НСтр("ru=', тел: '") + Форма.КонтактнаяИнформацияПолеТелефонОрганизации;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
			АдресЗаголовок = АдресЗаголовок + НСтр("ru=': тел: '") + Форма.КонтактнаяИнформацияПолеТелефонОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаКонтактнаяИнформация", АдресЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодписиУстановитьЗаголовок(Форма)
	
	СписокСтрок = Новый Массив;
	Если НЕ Форма.ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Форма.Руководитель) Тогда
			СписокСтрок.Добавить(Форма.Руководитель);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.ГлавныйБухгалтер) Тогда
			СписокСтрок.Добавить(Форма.ГлавныйБухгалтер);
		КонецЕсли;
	КонецЕсли;
	
	Если СписокСтрок.Количество() = 0 Тогда
		ПодписиЗаголовок = НСтр("ru='Подписи'");
	Иначе
		ПодписиЗаголовок = СтрШаблон(НСтр("ru='Подписи: %1'"), СтрСоединить(СписокСтрок, ", "));
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаПодписи", ПодписиЗаголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРегионов(Элемент)
	
	// В списке выбора региона может быть 1 элемент, который был заполнен при открытии формы
	// В этом случае требуется заполнить список выбора полностью
	// Если элементов более 1, то считаем, что список уже заполнен полностью
	Если НЕ ТребуетсяУказаниеРегиона ИЛИ Элемент.СписокВыбора.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	
	СписокРегионов = Новый СписокЗначений;
	ЗаполнитьСписокРегионовСервер(ТребуетсяУказаниеРегиона, СписокРегионов);
	
	// Чтобы избежать дублирования элементов, очищаем список выбора в поле формы
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Регион Из СписокРегионов Цикл
		Элемент.СписокВыбора.Добавить(Регион.Значение, Регион.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокРегионовСервер(ТребуетсяУказаниеРегиона, СписокРегионов)
	НастройкиУчетаНалогаНаПрибыльФормы.НастроитьЭлементыУказанияРегиона(ТребуетсяУказаниеРегиона, СписокРегионов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НалоговыйОрганУстановитьЗаголовок(Форма)
	
	НалоговыйОрганЗаголовок = НСтр("ru='Налоговая инспекция'");
	Если ЗначениеЗаполнено(Форма.Объект.КодНалоговогоОргана) Тогда
		НалоговыйОрганЗаголовок = НалоговыйОрганЗаголовок + ": " + Форма.Объект.КодНалоговогоОргана + " " 
									+ Форма.РегистрацияВНалоговомОргане.Наименование;
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаНалоговыйОрган", НалоговыйОрганЗаголовок);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПенсионныйФондУстановитьЗаголовок(Форма)
	
	ПенсионныйФондЗаголовок = НСтр("ru='Пенсионный фонд'");
	Если Форма.ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Форма.Объект.ИПРегистрационныйНомерПФР) Тогда
			ПенсионныйФондЗаголовок = ПенсионныйФондЗаголовок + ": " + Форма.Объект.ИПРегистрационныйНомерПФР;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерПФР) Тогда
			ПенсионныйФондЗаголовок = ПенсионныйФондЗаголовок + ": " + Форма.Объект.РегистрационныйНомерПФР;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.НаименованиеТерриториальногоОрганаПФР) Тогда
		ОрганПФРЗаголовок = Форма.Объект.НаименованиеТерриториальногоОрганаПФР;
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение - '"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение -'"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение- '"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение-'"), "");
		ОрганПФРЗаголовок = СтрЗаменить(ОрганПФРЗаголовок, НСтр("ru='Государственное учреждение'"), "");
		ПенсионныйФондЗаголовок = ПенсионныйФондЗаголовок + " " + ОрганПФРЗаголовок;
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаПФР", ПенсионныйФондЗаголовок);	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ФондСоциальногоСтрахованияУстановитьЗаголовок(Форма)
	
	ФондСоциальногоСтрахованияЗаголовок = НСтр("ru='Фонд социального страхования'");
	Если Форма.ЭтоФизЛицо И Форма.УплачиватьДобровольныеВзносыВФСС Тогда
		Если ЗначениеЗаполнено(Форма.Объект.ИПРегистрационныйНомерФСС) Тогда
			ФондСоциальногоСтрахованияЗаголовок = ФондСоциальногоСтрахованияЗаголовок + ": " + Форма.Объект.ИПРегистрационныйНомерФСС;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.Объект.РегистрационныйНомерФСС) Тогда
			ФондСоциальногоСтрахованияЗаголовок = ФондСоциальногоСтрахованияЗаголовок + ": " + Форма.Объект.РегистрационныйНомерФСС;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Форма.Объект.НаименованиеТерриториальногоОрганаФСС) Тогда
		ФондСоциальногоСтрахованияЗаголовок = ФондСоциальногоСтрахованияЗаголовок + " " + Форма.Объект.НаименованиеТерриториальногоОрганаФСС;
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаФСС", ФондСоциальногоСтрахованияЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КодыУстановитьЗаголовок(Форма)
	
	КодыЗаголовок = НСтр("ru='Коды статистики'");
	Если ЗначениеЗаполнено(Форма.Объект.КодОКОПФ) ИЛИ ЗначениеЗаполнено(Форма.Объект.КодОКФС)
		ИЛИ ЗначениеЗаполнено(Форма.Объект.КодОКВЭД) ИЛИ ЗначениеЗаполнено(Форма.Объект.КодПоОКПО) Тогда
		КодыЗаголовок = КодыЗаголовок + ": ";
		Если ЗначениеЗаполнено(Форма.Объект.КодОКОПФ) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru='ОКОПФ '") + Форма.Объект.КодОКОПФ;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодОКФС) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru=', ОКФС '")  + Форма.Объект.КодОКФС;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодОКВЭД2) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru=', ОКВЭД '") + Форма.Объект.КодОКВЭД2;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.Объект.КодПоОКПО) Тогда
			КодыЗаголовок = КодыЗаголовок + НСтр("ru=', ОКПО '")  + Форма.Объект.КодПоОКПО;
		КонецЕсли;
		КодыЗаголовок = СтрЗаменить(КодыЗаголовок, ": ,", ":");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаКоды", КодыЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НекредитнаяФинансоваяОрганизацияУстановитьЗаголовок(Форма)
	
	ЗаголовокГруппы = НСтр("ru='Некредитная финансовая организация'") + ": ";
	Если Форма.Объект.НекредитнаяФинансоваяОрганизация Тогда
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru='да'");
		Если ЗначениеЗаполнено(Форма.Объект.КодОсновногоВидаДеятельностиНФО)
			ИЛИ ЗначениеЗаполнено(Форма.Объект.НаименованиеОсновногоВидаДеятельностиНФО) Тогда
		
			ЗаголовокГруппы = ЗаголовокГруппы + ", ";
			Если ЗначениеЗаполнено(Форма.Объект.КодОсновногоВидаДеятельностиНФО) Тогда
				ЗаголовокГруппы = ЗаголовокГруппы + Форма.Объект.КодОсновногоВидаДеятельностиНФО;
				Если ЗначениеЗаполнено(Форма.Объект.НаименованиеОсновногоВидаДеятельностиНФО) Тогда
					ЗаголовокГруппы = ЗаголовокГруппы + " - ";
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(Форма.Объект.НаименованиеОсновногоВидаДеятельностиНФО) Тогда
				ЗаголовокГруппы = ЗаголовокГруппы + Форма.Объект.НаименованиеОсновногоВидаДеятельностиНФО;
			КонецЕсли;
		
		КонецЕсли;
	Иначе
		ЗаголовокГруппы = ЗаголовокГруппы + НСтр("ru='нет'");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаНекредитнаяФинансоваяОрганизация", ЗаголовокГруппы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КрупнейшийНалогоплательщикУстановитьЗаголовок(Форма)
	
	Если НЕ Форма.ЭтоФизЛицо И НЕ Форма.Объект.ОбособленноеПодразделение Тогда
		Если Форма.Объект.КрупнейшийНалогоплательщик Тогда
			КрупнейшийНалогоплательщикЗаголовок = НСтр("ru='Крупнейший налогоплательщик: да'");
		Иначе
			КрупнейшийНалогоплательщикЗаголовок = НСтр("ru='Крупнейший налогоплательщик: нет'");
		КонецЕсли;
		УстановитьЗаголовокГруппы(Форма, "ГруппаКрупнейшийНалогоплательщик", КрупнейшийНалогоплательщикЗаголовок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИностраннаяОрганизацияУстановитьЗаголовок(Форма)
	
	Если НЕ Форма.ЭтоФизЛицо Тогда
		Если ЗначениеЗаполнено(Форма.Объект.НаименованиеИнострОрганизации) Тогда
			ИностраннаяОрганизацияЗаголовок = НСтр("ru='Иностранная организация: '") + Форма.Объект.НаименованиеИнострОрганизации;
		Иначе
			ИностраннаяОрганизацияЗаголовок = НСтр("ru='Иностранная организация'");
		КонецЕсли;
		УстановитьЗаголовокГруппы(Форма, "ГруппаИностраннаяОрганизация", ИностраннаяОрганизацияЗаголовок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполненаРегистрацияОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	ЭтотОбъект.Прочитать();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокГоловныхОрганизацийОбособленногоПодразделения()

	Запрос = Новый Запрос;
	Запрос.Текст	=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = Организации.Ссылка
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	СписокОрганизаций = Новый СписокЗначений;

	Результат	= Запрос.Выполнить();
	Выборка	= Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()
	
	ИсторияЮрАдреса = НСтр("ru = 'История'");
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКомпоновкиКонтактнойИнформации";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = СтатическиеРеквизиты();
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	
	УстановитьДополнительныеСвойстваКонтактнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКонтактнуюИнформацию(ТекущийОбъект)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УстановитьДополнительныеСвойстваКонтактнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДополнительныеСвойстваКонтактнойИнформации()
	
	Если ЭтоФизЛицо Тогда
		ЮрФактАдресаСовпадают = Истина;
	Иначе
		ЮрФактАдресаСовпадают = СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеФактАдресОрганизации);
	КонецЕсли;
	
	ЮрПочтовыйАдресаСовпадают = СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации)
		ИЛИ СокрЛП(?(КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки(),
		"", КонтактнаяИнформацияПолеЮрАдресОрганизации)) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСокращенногоНаименования()
	
	КодыСтатистики = Справочники.Организации.КодыСтатистики(Объект);
	ЗаполнитьЗначенияСвойств(Объект, КодыСтатистики);
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		УстановитьНаименованиеИП();
	КонецЕсли;
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	Справочники.Организации.УстановитьАктуальноеЗначениеИсторииНаименований(Объект.НаименованиеСокращенное, Объект.НаименованиеПолное, Объект.ИсторияНаименований);
	
	НаименованиеСокращенноеДоИзменения = Объект.НаименованиеСокращенное;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияПолногоНаименования()
	
	УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(ЭтотОбъект);
	
	Справочники.Организации.УстановитьАктуальноеЗначениеИсторииНаименований(Объект.НаименованиеСокращенное, Объект.НаименованиеПолное, Объект.ИсторияНаименований);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСписокВыбораВариантаНаименованияДляПечатныхФорм(Форма)
	
	Форма.Элементы.ВариантНаименованияДляПечатныхФорм.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование")).Представление = 
		Форма.Объект.НаименованиеСокращенное;
		
	Форма.Элементы.ВариантНаименованияДляПечатныхФорм.СписокВыбора.НайтиПоЗначению(
		ПредопределенноеЗначение("Перечисление.ВариантыНаименованияДляПечатныхФорм.ПолноеНаименование")).Представление = 
		Форма.Объект.НаименованиеПолное;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИнформациюОбответственныхЛицах()
	
	РуководительКлючЗаписи		= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	ГлавныйБухгалтерКлючЗаписи	= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.Должность) КАК ПРЕДСТАВЛЕНИЕДолжность,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ПРЕДСТАВЛЕНИЕФизическоеЛицо,
	|	(ОтветственныеЛицаОрганизацийСрезПоследних.Должность) КАК Должность,
	|	(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ТОГДА ""Руководитель""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ТОГДА ""ГлавныйБухгалтер""
	|		КОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)
	|			ТОГДА ""Кассир""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяРеквизитаОтветственногоЛица
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И (ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|			ИЛИ ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир))";
	
	
	Отбор	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ПустаяСтрока(Выборка.ИмяРеквизитаОтветственногоЛица) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы	= ЭтотОбъект.Элементы.Найти(Выборка.ИмяРеквизитаОтветственногоЛица);
		Если ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеОтветственногоЛица = "";
		Если ЗначениеЗаполнено(Выборка.ПРЕДСТАВЛЕНИЕФизическоеЛицо) Тогда
			НаименованиеОтветственногоЛица = НаименованиеОтветственногоЛица(
				Выборка.ПРЕДСТАВЛЕНИЕФизическоеЛицо,
				Выборка.ПРЕДСТАВЛЕНИЕДолжность);
		КонецЕсли;
		
		ЭтотОбъект[Выборка.ИмяРеквизитаОтветственногоЛица] = НаименованиеОтветственногоЛица;
		ЭтотОбъект[Выборка.ИмяРеквизитаОтветственногоЛица+"Должность"] = Выборка.Должность;
		ЭтотОбъект[Выборка.ИмяРеквизитаОтветственногоЛица+"ФизЛицо"] = Выборка.ФизическоеЛицо;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтотОбъект[Выборка.ИмяРеквизитаОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	ПрочитатьИнформациюОбответственныхЛицах();
	ПодготовитьЭлементыСКартинкамиЛоготипаИФаксимиле();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодИзКлассификатора(ИмяКлассификатора, Комментарий = "", Знач ИмяРеквизитаКод = "")
 
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта",      "Справочник");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "Организации");
	ПараметрыФормы.Вставить("НазваниеМакета",  ИмяКлассификатора);
	ПараметрыФормы.Вставить("ТекущийПериод",   ТекущаяДата());
	ИмяРеквизитаКод = ?(НЕ ЗначениеЗаполнено(ИмяРеквизитаКод), "Код" + ИмяКлассификатора, ИмяРеквизитаКод);
	ПараметрыФормы.Вставить("ТекущийКод",      Объект[ИмяРеквизитаКод]);
	ПараметрыФормы.Вставить("Комментарий",     Комментарий);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяКлассификатора", ИмяКлассификатора);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаКод",   ИмяРеквизитаКод);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаНаименование", "Наименование" + Сред(ИмяРеквизитаКод, 4));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьКодИзКлассификатораЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодИзКлассификатораЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	ВыбранныйКод = РезультатЗакрытия;	
	
	Если ВыбранныйКод <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект[ДопПараметры.ИмяРеквизитаКод] = ВыбранныйКод;
		
		Объект[ДопПараметры.ИмяРеквизитаНаименование] = НаименованиеПоКлассификатору(
			ДопПараметры.ИмяКлассификатора, ВыбранныйКод);
			
		Если ДопПараметры.ИмяРеквизитаКод = "КодОКВЭД2" Тогда
			ПодсказкаОКВЭД2 = "";
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКодИныхВидовДеятельностиНФОЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	ВыбранныеКоды = РезультатЗакрытия;
	
	Если ВыбранныеКоды <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект[ДопПараметры.ИмяРеквизитаКод] = СтрСоединить(ВыбранныеКоды, ", ");
		
		ВыбранныеНаименования = Новый Массив;
		Для каждого ВыбранныйКод Из ВыбранныеКоды Цикл
			ВыбранныеНаименования.Добавить(НаименованиеПоКлассификатору(ДопПараметры.ИмяКлассификатора, ВыбранныйКод));
		КонецЦикла;
		
		Объект[ДопПараметры.ИмяРеквизитаНаименование] = СтрСоединить(ВыбранныеНаименования, ", ");
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьРеквизитыНалоговойИнспекцииПоКоду(ТекстВопроса, СведенияОНалоговомОргане)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение", ЭтотОбъект, СведенияОНалоговомОргане);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение(РезультатыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатыЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Если ЭтоФизЛицо ИЛИ НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
			
			// Обновляем регистрацию в налоговом органе на форме
			
			Объект.КодНалоговогоОргана = ДополнительныеПараметры.КодНалоговогоОргана;
			УстановитьРегистрациюВНалоговомОргане();
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
			РегистрацияВНалоговомОргане.КодПоОКАТО = ДополнительныеПараметры.КодПоОКАТО;
			РегистрацияВНалоговомОргане.КодПоОКТМО = ДополнительныеПараметры.КодПоОКТМО;
			
		Иначе
			
			// Смена КПП выполняется через помощник.
			
			// Обеспечим, чтобы записи истории регистраций и истории адреса,
			// которые редактируются в вызываемой форме, были актуальны (т.е. последними по времени).
			// Для этого передаем в параметры формы даты актуальности истории регистраций и адресов.
			// В открываемой форме обеспечивается запрет на ввод даты новых сведений меньшей или равной указанным.
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АктуальныйПериодИсторииРегистраций",
				ОрганизацииФормыКлиент.АктуальныйПериодИсторииРегистраций(ЭтотОбъект));
			ПараметрыФормы.Вставить("АктуальныйПериодИсторииАдреса", 
				ОрганизацииФормыКлиент.АктуальныйПериодИсторииКонтактнойИнформации(ЭтотОбъект, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации")));
			ПараметрыФормы.Вставить("КодНалоговогоОргана", ДополнительныеПараметры.КодНалоговогоОргана);
			
			ОповещениеЗавершения = Новый ОписаниеОповещения("ПоставитьНаУчетПоНовомуАдресуЗавершение", ЭтотОбъект);
			
			ОрганизацииФормыКлиент.ОткрытьФормуПомощникаСменыАдреса(
				ЭтотОбъект,
				"КонтактнаяИнформацияПолеЮрАдресОрганизации",
				ОповещениеЗавершения,
				ПараметрыФормы);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события завершения работы помощника регистрации по новому адресу.
// Вызывается из УправлениеКонтактнойИнформациейКлиентБП.ПоставитьНаУчетПоНовомуАдресуЗавершение()
// для выполнения специфичных для формы процедур.
//
&НаКлиенте
Процедура ПоставитьНаУчетПоНовомуАдресуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
			
	ИмяЭлементаАдреса = "КонтактнаяИнформацияПолеЮрАдресОрганизации";
	
	Если СокрЛП(Результат.НовыйАдрес) <> СокрЛП(ЭтотОбъект[ИмяЭлементаАдреса]) Тогда
		
		ДанныеСтрокиКИ = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(
			ЭтотОбъект,
			ИмяЭлементаАдреса);
			
		// На форме механизмом БСП должен быть создан реквизит для хранения полей адреса.
		// Если реквизит не найден, то вызовем ошибку.
		Если ДанныеСтрокиКИ = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не найден реквизит формы для хранения адреса:
							|%1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Элементы[ИмяЭлементаАдреса]);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
		
		// Добавляем запись в историю контактной информации.
		// Если ранее в историю не добавляли запись, то она пустая, т.е. там нет и прежнего адреса - 
		// в этом случае добавим туда также запись с прежним адресом в качестве первоначального значения.
		// Актуальность новой записи обеспечивается при вызове формы постановки на учет (см. код вызова ОрганизацииФормыКлиент.ОткрытьФормуПомощникаСменыАдреса()). 
		Если Объект.ИсторияКонтактнойИнформации.Количество() = 0 И ЗначениеЗаполнено(ЭтотОбъект[ИмяЭлементаАдреса]) Тогда
			НоваяЗапись = Объект.ИсторияКонтактнойИнформации.Добавить();
			// Период = '0001-01-01'
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ДанныеСтрокиКИ, "Вид, Значение, Представление");
		КонецЕсли;
		
		НоваяЗапись = Объект.ИсторияКонтактнойИнформации.Добавить();
		НоваяЗапись.Период = Результат.ДатаПостановкиНаУчет;
		ЗаполнитьЗначенияСвойств(НоваяЗапись,  Результат.ДанныеАдреса, "Вид, Значение, Представление");
				
		// Обновляем представление адреса в указанном реквизите
		ЭтотОбъект[ИмяЭлементаАдреса] = Результат.НовыйАдрес;
					
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиКИ, Результат.ДанныеАдреса, "Значение, Представление");
		
		// Скопируем юр. адрес в фактический адрес и почтовый адрес
		Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеФактАдресОрганизации) Тогда
			СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеФактАдресОрганизации", ИмяЭлементаАдреса);
		КонецЕсли;
		
		Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации) Тогда
			СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", ИмяЭлементаАдреса);
		КонецЕсли;
					
	КонецЕсли;	
	
	// Обновляем КПП и код налогового органа, а также добавляем пустую запись в историю регистраций
	// Процедура УстановитьРегистрациюВНалоговомОргане() сделает все оставшееся:
	//	- обновит текущую регистрацию организации
	//	- заполнит добавленную запись истории регистраций, т.к. она является актуальной (см. ПоставитьНаУчетПоНовомуАдресу())
	//  - обновит реквизит формы РегистрацияВНалоговомОргане и связанные реквизиты
	Объект.КПП = Результат.НовыйКПП;
	Объект.КодНалоговогоОргана = Результат.НовыйКодНалоговогоОргана;
	
	НоваяЗапись = ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Добавить();
	НоваяЗапись.Период = Результат.ДатаПостановкиНаУчет;	
	
	УстановитьРегистрациюВНалоговомОргане();
	ПроверитьСоответствиеТребованиямКПП(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);	
	
КонецПроцедуры	

&НаКлиенте
Процедура СнятьСУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		РегистрацияВНалоговомОргане.ДатаСнятияСУчета = Результат;
		// Выведем пояснение о снятии с учета
		ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(ЭтотОбъект, ЭтоФизЛицо, Объект.ОбособленноеПодразделение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЮрАдресаОрганизации()
	
	ДействияПослеИзменения = ПриИзмененииЮрАдресаОрганизацииНаСервере();
	ПослеИзмененияКонтактнойИнформацииНаКлиенте(ДействияПослеИзменения);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииЮрАдресаОрганизацииНаСервере()
	
	ДействияПослеИзменения = Новый Структура;
	
	Если ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеФактАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеФактАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	Если ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(КонтактнаяИнформацияПолеПочтовыйАдресОрганизации) Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	КонецЕсли;
	
	ДанныеСтрокиКИ = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(
		ЭтотОбъект,
		"КонтактнаяИнформацияПолеЮрАдресОрганизации");
	
	Если ДанныеСтрокиКИ <> Неопределено Тогда
		
		ЗначениеАдресаJSON = ДанныеСтрокиКИ.Значение;
		
		УстановитьКодРосстатаПоАдресу(ЗначениеАдресаJSON);
		
		СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON);
		
		Если СведенияОНалоговомОргане <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
				
				Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
					
					ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду = Новый Структура;
					ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду.Вставить("СведенияОНалоговомОргане", СведенияОНалоговомОргане);
					ДействияПослеИзменения.Вставить("ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду", ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду);
					
				ИначеЕсли СведенияОНалоговомОргане.КодНалоговогоОргана = Объект.КодНалоговогоОргана Тогда
					
					//Налоговая инспекция не изменилась
					Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КодПоОКАТО) Тогда
						РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОргане.КодПоОКАТО;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КодПоОКТМО) Тогда
						РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОргане.КодПоОКТМО;
					КонецЕсли;
					
				Иначе
					
					Если НЕ ИнтерфейсЭлектронныхТрудовыхКнижек Тогда
						
						ВопросПроИзменениеНалоговойИнспекции = Новый Структура;
						Если ЭтоФизЛицо ИЛИ НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
							ТекстВопроса = НСтр("ru = 'Выбранный адрес обслуживается налоговой инспекцией с кодом %1.
														|Заменить налоговую инспекцию?'");
						Иначе
							ТекстВопроса = НСтр("ru = 'Выбранный адрес обслуживается налоговой инспекцией с кодом %1.
														|Отразить в программе снятие с учета по прежнему КПП 
														|и постановку на учет по новому КПП?'");
						КонецЕсли;
						
						ВопросПроИзменениеНалоговойИнспекции.Вставить("ТекстВопроса",
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СведенияОНалоговомОргане.КодНалоговогоОргана));
						ВопросПроИзменениеНалоговойИнспекции.Вставить("СведенияОНалоговомОргане", СведенияОНалоговомОргане);
						
						ДействияПослеИзменения.Вставить("ВопросПроИзменениеНалоговойИнспекции", ВопросПроИзменениеНалоговойИнспекции);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДействияПослеИзменения;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииФактАдресаОрганизации()
	
	ЮрФактАдресаСовпадают = СокрЛП(КонтактнаяИнформацияПолеЮрАдресОрганизации) = СокрЛП(КонтактнаяИнформацияПолеФактАдресОрганизации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьПолеКонтактнойИнформации(Форма, ИмяПриемника, ИмяИсточника)
	
	Форма.Модифицированность = Истина;
	Форма[ИмяПриемника] = Форма[ИмяИсточника];
	
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита = ИмяИсточника;
	ДанныеИсточника = Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита = ИмяПриемника;
	ДанныеПриемника = Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПриемника[0].Значение = ДанныеИсточника[0].Значение;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьУчетнуюПолитику(Ссылка, Знач ДанныеЗаполнения, ТребуетсяСоздатьПоставляемыеВидыНалогов)
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Организация", Ссылка);
	
	НаборЗаписей = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НастройкиУчета.УстановкаПараметровУчетнойПолитикиПоУмолчанию(ДанныеЗаполнения, ТребуетсяСоздатьПоставляемыеВидыНалогов);
	
	// Часть учетной политики - список прямых расходов для целей исчисления налога на прибыль
	Если ДанныеЗаполнения.ПлательщикНалогаНаПрибыль Тогда
		РегистрыСведений.МетодыОпределенияПрямыхРасходовПроизводстваВНУ.Настроить(
			Ссылка,
			НачалоГода(ДанныеЗаполнения.Период),
			Ложь, // Не копировать записи предыдущего периода
			Ложь);// Не перезаписывать записи, если они уже есть
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьУчетнуюПолитику(Ссылка)
	
	ДанныеЗаполнения = Новый Структура;

	НаборЗаписей = РегистрыСведений.НастройкиСистемыНалогообложения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("Организация", Ссылка);
	ДанныеЗаполнения.Вставить("СистемаНалогообложения", Перечисления.СистемыНалогообложения.Общая);
	ДанныеЗаполнения.Вставить("ПлательщикНДС", Истина);
	ДанныеЗаполнения.Вставить("ПлательщикНалогаНаПрибыль", Истина);
	
	ЗаписиИзменены = Ложь;
	
	Для каждого СтрокаНабораЗаписей Из НаборЗаписей Цикл
	
		Если СтрокаНабораЗаписей.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок 
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			
			СтрокаНабораЗаписей.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
			РегистрыСведений.НастройкиСистемыНалогообложения.УстановкаНастроекПоУмолчанию(СтрокаНабораЗаписей, ДанныеЗаполнения);
			
			ЗаписиИзменены = Истина;
			
		КонецЕсли;
	
	КонецЦикла; 

	Если ЗаписиИзменены Тогда
	
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
		НаборЗаписей.Записать();
	
	КонецЕсли; 
	
	Возврат ЗаписиИзменены;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();

КонецФункции

&НаСервере
Функция ПослеИзмененияКонтактнойИнформацииНаСервере(Результат)
	
	ДействияПослеИзменения = Неопределено;
	
	Если Результат.Свойство("ИмяРеквизита") Тогда
		
		Если Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
			
			ДействияПослеИзменения = ПриИзмененииЮрАдресаОрганизацииНаСервере();
			
			УправлениеКонтактнойИнформациейБП.УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(
				ЭтотОбъект,
				Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
			
		ИначеЕсли Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресОрганизации" Тогда
			
			ПриИзмененииФактАдресаОрганизации();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат ДействияПослеИзменения;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформацииНаКлиенте(ДействияПослеИзменения)
	
	Если Не ЗначениеЗаполнено(ДействияПослеИзменения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДействияПослеИзменения.Свойство("ВопросПроИзменениеНалоговойИнспекции") Тогда
		
		ВопросЗаполнитьРеквизитыНалоговойИнспекцииПоКоду(ДействияПослеИзменения.ВопросПроИзменениеНалоговойИнспекции.ТекстВопроса,
			ДействияПослеИзменения.ВопросПроИзменениеНалоговойИнспекции.СведенияОНалоговомОргане);
		
	ИначеЕсли ДействияПослеИзменения.Свойство("ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду") Тогда
		
		ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение(КодВозвратаДиалога.Да,
			ДействияПослеИзменения.ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду.СведенияОНалоговомОргане);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСокращенногоНаименования()
	
	Если ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ ОрганизацииФормыКлиентСервер.ПолноеНаименованиеСоответствуетСокращенномуНаименованию(НаименованиеСокращенноеДоИзменения, Объект.НаименованиеПолное) Тогда
		Объект.НаименованиеПолное = ОрганизацииФормыКлиентСервер.ПолноеНаименованиеПоСокращенномуНаименованию(Объект.НаименованиеСокращенное);
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Наименование) 
		ИЛИ Объект.Наименование = НаименованиеПоУмолчанию
		ИЛИ ОрганизацииФормыКлиентСервер.НаименованиеСоответствуетСокращенномуНаименованию(НаименованиеСокращенноеДоИзменения, Объект.Наименование) Тогда
		Объект.Наименование = ОрганизацииФормыКлиентСервер.НаименованиеПоСокращенномуНаименованию(Объект.НаименованиеСокращенное);
	КонецЕсли;
	
	ПослеИзмененияСокращенногоНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении()
	
	Если ОрганизацииФормыКлиент.ФИОПриИзменении(Объект) Тогда
		ПослеИзмененияСокращенногоНаименования();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФизлицоПриСозданииНаСервере()
	
	Если Объект.ИндивидуальныйПредприниматель.Пустая() Тогда
		
		КодыСтатистики = Справочники.Организации.КодыСтатистики(Объект);
		ЗаполнитьЗначенияСвойств(Объект, КодыСтатистики);
		
	КонецЕсли;
	
	УстановитьНаименованиеИП();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()

	ЭтоФизЛицо = (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЭтоОбособленноеПодразделение = (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		И Объект.ОбособленноеПодразделение;
	
	//РегистрацияНеЗавершена = ПолучитьФункциональнуюОпцию("РегистрацияНеЗавершена");
	
	//ЕГРДоступноВнесениеИзменений = Обработки.РегистрацияОрганизации.ДоступноВнесениеИзмененийЕГР(ЭтоФизЛицо, Объект.НаименованиеОКОПФ);
	//
	//Если ЕГРДоступноВнесениеИзменений Тогда
	//	СостояниеВнесенияИзмененийЕГР = Обработки.РегистрацияОрганизации.СостояниеВнесенияИзмененийЕГР(Объект.Ссылка);
	//	ЕГРНужноОбновитьРеквизитыОрганизации = СостояниеВнесенияИзмененийЕГР.Документы;
	//	ЕГРВнесениеИзмененийНеЗавершено = СостояниеВнесенияИзмененийЕГР.Заявление;
	//КонецЕсли;
	
	ПроверитьСоответствиеТребованиямИНН(ЭтотОбъект);
	ПроверитьСоответствиеТребованиямКПП(ЭтотОбъект);
	
	Если ЭтоФизЛицо Тогда
		ФизлицоПриСозданииНаСервере();
	КонецЕсли;
	
	Элементы.ГруппаГоловнаяОрганизация.Видимость                  = ЭтоОбособленноеПодразделение;
	Элементы.ФамилияИП.Видимость                                  = ЭтоФизЛицо;
	Элементы.ИмяИП.Видимость                                      = ЭтоФизЛицо;
	Элементы.ОтчествоИП.Видимость                                 = ЭтоФизЛицо;
	Элементы.НаименованиеИП.Видимость                             = ЭтоФизЛицо;
	Элементы.Наименование.Видимость                               = НЕ ЭтоФизЛицо;
	Элементы.ГруппаНаименование.Видимость                         = НЕ ЭтоФизЛицо;
	Элементы.ИНН.Видимость                                        = НЕ ЭтоОбособленноеПодразделение;
	Элементы.ГруппаКПП.Видимость                                  = НЕ ЭтоФизЛицо;
	Элементы.ГруппаСвидетельствоОРегистрацииИП.Видимость          = ЭтоФизЛицо;
	Элементы.НаименованиеРегистрирующегоОргана.Видимость          = НЕ ЭтоФизЛицо;
	Элементы.ГруппаФактАдресОрганизации.Видимость                 = НЕ ЭтоФизЛицо;
	Элементы.ГруппаПодписиЮрЛицо.Видимость                        = НЕ ЭтоФизЛицо;
	Элементы.ДекорацияОтветственныеОтчеты.Видимость               = НЕ ЭтоФизЛицо;
	Элементы.ДополнительныйКодФСС.Видимость                       = ЭтоОбособленноеПодразделение;
	Элементы.ИПРегистрационныйНомерТФОМС.Видимость                = ЭтоФизЛицо;
	Элементы.ИностраннаяОрганизация.Видимость                     = НЕ ЭтоФизЛицо;
	Элементы.ИПРегистрационныйНомерПФР.Видимость                  = ЭтоФизЛицо;
	Элементы.ИПРегистрационныйНомерФСС.Видимость                  = ЭтоФизЛицо;
	Элементы.ГруппаИностраннаяОрганизация.Видимость               = НЕ ЭтоФизЛицо И Объект.ИностраннаяОрганизация;
	Элементы.ЗаполнитьРеквизитыПоИНН.Видимость                    = НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость                = ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.ВидеоурокЗаполнениеРеквизитов.Видимость              = ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.ГруппаПодписьГлавногоБухгалтера.Видимость            = НЕ ЭтоФизЛицо;
	
	ВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям");
	//НеВестиУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("НеВестиУчетПоОрганизациям");
	
	Элементы.Префикс.Видимость = ВестиУчетПоОрганизациям;
	//Элементы.ПрефиксОднойОрганизации.Видимость = НеВестиУчетПоОрганизациям;
			
	Элементы.ЦифровойИндексОбособленногоПодразделения.Видимость	= ЭтоОбособленноеПодразделение;
	
	Если ЭтоФизЛицо Тогда
		Элементы.КодПоОКПО.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(10));
	ИначеЕсли НЕ ЭтоОбособленноеПодразделение Тогда
		Элементы.КодПоОКПО.ОграничениеТипа = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(8));
	КонецЕсли;
	
	Если ПравоДоступаИсторияРегистрацииПФР Тогда
		ЭлементРегистрационныйНомерПФР = Элементы.РегистрационныйНомерПФР;
	Иначе
		ЭлементРегистрационныйНомерПФР = Элементы.РегистрационныйНомерПФРБезИстории;
	КонецЕсли;

	ОрганизацииФормыКлиентСервер.НастроитьСвойстваЭлементаДатаРегистрации(
		Элементы.ДатаРегистрации, ЭтоФизЛицо);

	ОрганизацииФормыКлиентСервер.НастроитьСвойстваЭлементаЮрАдресОрганизации(
		Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации, ЭтоФизЛицо);
	
	Если ЭтоОбособленноеПодразделение Тогда
		
		ВидОрганизации = "ОбособленноеПодразделение";
		ВидОрганизацииПредставление	= НСтр("ru = 'Обособленное подразделение'");
		
		Элементы.НаименованиеСокращенное.Подсказка = "";
		Элементы.НаименованиеПолное.Подсказка      = "";
		Элементы.Наименование.Подсказка            = "";
		
		Элементы.ЗаполнитьРеквизитыПоИНН.Видимость = Ложь;
		Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость = Ложь;
		
	ИначеЕсли ЭтоФизЛицо Тогда
		
		ВидОрганизации = "ИндивидуальныйПредприниматель";
		ВидОрганизацииПредставление	= НСтр("ru = 'Индивидуальный предприниматель'");
		
		Элементы.АдресПодписьРуководителя.Заголовок = НСтр("ru='
			|Подпись'"); 
		Элементы.АдресПодписьРуководителя.ТекстНевыбраннойКартинки = НСтр("ru='Загрузить подпись'"); 
		
		Элементы.Префикс.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Префикс включается в состав номера документа. В случае ведения учета по нескольким организациям позволяет нумеровать документы по каждой организации в отдельности.
			|Состоит из 2 символов (букв, цифр).
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/docs/fillingentrepreneur/#entprefix"));
		Элементы.ПрефиксОднойОрганизации.РасширеннаяПодсказка.Заголовок = Элементы.Префикс.РасширеннаяПодсказка.Заголовок;
		
		Элементы.ИНН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Идентификационный номер налогоплательщика (ИНН) из ""Свидетельства о постановке на учет физического лица в налоговом органе"".
			|Состоит из 12 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entinn"));
		
		Элементы.ОГРН.Заголовок	= НСтр("ru = 'ОГРНИП'");
		Элементы.ОГРН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Основной государственный регистрационный номер (ОГРНИП) присваивается при государственной регистрации и указывается в ""Свидетельстве о государственной регистрации индивидуального предпринимателя"".
			|Состоит из 15 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entogrn"));
		
		Элементы.СвидетельствоСерияНомер.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Серия и номер указаны в правом нижнем углу бланка ""Свидетельства о государственной регистрации индивидуального предпринимателя"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#entcertnum"));
		Элементы.СвидетельствоДатаВыдачи.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Дата указана в ""Свидетельстве о государственной регистрации индивидуального предпринимателя"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#entissuedate"));
			
		Элементы.СистемаНалогообложенияПредставление.ВысотаЗаголовка = 2;
		
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru = 'Почтовый адрес совпадает с адресом места жительства'");
			
		Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.Заголовок			= НСтр("ru = 'Телефон (служебный)'");
		
		Элементы.ВариантНаименованияДляПечатныхФорм.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Наименование (полное или сокращенное), которое выводится в первичных документах и отчетах.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entprintname"));
						
		Элементы.РегистрацияВНалоговомОрганеКодПоОКТМО.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору территорий муниципальных образований (ОКТМО) используется с 2014 года в регламентированной отчетности и платежах в бюджет.
			|Определяется по адресу регистрации. Может быть уточнен в налоговой инспекции.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entoktmo"));
			
		Элементы.РегистрацияВНалоговомОрганеКодПоОКАТО.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору административно-территориального деления объектов (ОКАТО) использовался до 2014 года в отчетности в контролирующие органы и платежах в бюджет.
			|Определяется по адресу регистрации. Может быть уточнен в налоговой инспеции.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entokato"));
			
		ЭлементРегистрационныйНомерПФР .РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Регистрационный номер из ""Уведомления о регистрации в территориальном органе Пенсионного фонда Российской Федерации страхователя, производящего выплаты физическим лицам"".
			|Состоит из 12 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entpfrnum"));
		
		Элементы.КодОрганаПФР.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код территориального органа ПФР, как правило, совпадает с первыми цифрами Регистрационного номера. Может быть уточнен в ПФР.
			|Состоит из 6 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entpfrdep"));
			
		Элементы.РегистрационныйНомерФСС.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Регистрационный номер страхователя из ""Извещения о регистрации в качестве страхователя""
			|Состоит из 10 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entfssnum"));
			
		Элементы.КодПодчиненностиФСС.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код подчиненности из ""Извещения о регистрации в качестве страхователя"".
			|Состоит из 5 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entpfrdep"));
			
		Элементы.КодОКОПФ.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору организационно-правовых форм (ОКОПФ) из ""Информационного письма об учете в Статрегистре Росстата"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entokopf"));
			
		Элементы.КодОКФС.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору форм собственности (ОКФС) из ""Информационного письма об учете в Статрегистре Росстата"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entokfs"));
			
		Элементы.КодОКВЭД.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору видов экономической деятельности (ОКВЭД), редакция 1.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entokved"));
			
		Элементы.КодПоОКПО.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору предприятий и организаций (ОКПО) из ""Информационного письма об учете в Статрегистре Росстата"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entokpo"));
			
		Элементы.КодОрганаФСГСПолучателя.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код органа Росстата, которому подотчетен индивидуальный предприниматель. Требуется для сдачи отчетности в электронном виде. Определяется автоматически, в зависимости от адреса регистрации. Может быть уточнен в территориальном органе Росстата.
			|Состоит из 4 или 6 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingentrepreneur#entstatdep"));
			
	Иначе
		
		ВидОрганизации = "ЮридическоеЛицо";
		ВидОрганизацииПредставление = НСтр("ru='Юридическое лицо'");
		Элементы.ОГРН.Маска = "9999999999999";
		ЭлементРегистрационныйНомерПФР.Заголовок		= НСтр("ru='Регистрационный номер'");
		Элементы.РегистрационныйНомерФСС.Заголовок		= НСтр("ru='Регистрационный номер'");
		Элементы.РегистрационныйНомерТФОМС.Заголовок	= НСтр("ru='Регистрационный номер'");
		
		Элементы.АдресПодписьРуководителя.Заголовок = НСтр("ru='Подпись
			|руководителя'");
		Элементы.АдресПодписьРуководителя.ТекстНевыбраннойКартинки = НСтр("ru='Загрузить 
			|подпись руководителя'"); 
			
		Элементы.НаименованиеСокращенное.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Сокращенное наименование как в учредительных документах, в частности, Уставе.
			|Пример: ООО ""Ромашка"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgshortname"));
		Элементы.НаименованиеПолное.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Полное наименование как в учредительных документах, в частности, Уставе и в ""Свидетельстве о государственной регистрации"".
			|Пример: Общество с ограниченной ответственностью ""Ромашка"".
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgfullname"));
		Элементы.Наименование.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Любое наименование, удобное для повседневной работы. Выводится в документах, журналах, справочниках.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgworkname"));
			
		Элементы.Префикс.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Префикс включается в состав номера документа. В случае ведения учета по нескольким организациям позволяет нумеровать документы по каждой организации в отдельности.
			|Состоит из 2 символов (букв, цифр).
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgprefix"));
		Элементы.ПрефиксОднойОрганизации.РасширеннаяПодсказка.Заголовок = Элементы.Префикс.РасширеннаяПодсказка.Заголовок;
			
		Элементы.ИНН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Идентификационный номер налогоплательщика (ИНН) из ""Свидетельства о постановке на учет российской организации в налоговом органе по месту ее нахождения"".
			|Состоит из 10 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orginn"));
		Элементы.КПП.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Код причины постановки на учет (КПП) из ""Свидетельства о постановке на учет российской организации в налоговом органе по месту ее нахождения"".
			|Состоит из 9 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgkpp"));
			
		Элементы.ОГРН.Заголовок	= НСтр("ru = 'ОГРН'");
		Элементы.ОГРН.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Основной государственный регистрационный номер (ОГРН) присваивается при государственной регистрации и указывается в ""Свидетельстве о государственной регистрации юридического лица"".
			|Состоит из 13 цифр.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgogrn"));
		
		Элементы.СистемаНалогообложенияПредставление.ВысотаЗаголовка = 0;
			
		Элементы.ЮрПочтовыйАдресаСовпадают.Заголовок = НСтр("ru = 'Почтовый адрес совпадает с юридическим адресом'");
		
		Элементы.КонтактнаяИнформацияПолеТелефонОрганизации.Заголовок = НСтр("ru = 'Контактный телефон'");
		
		Элементы.ВариантНаименованияДляПечатныхФорм.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Наименование (полное или сокращенное), которое выводится в первичных документах и отчетах.
			|'")),
			Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgprinname"));
			
		//Элементы.РегистрацияВНалоговомОрганеКодПоОКТМО.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору территорий муниципальных образований (ОКТМО) используется с 2014 года в регламентированной отчетности и платежах в бюджет.
		//	|Определяется по адресу регистрации. Может быть уточнен в налоговой инспекции.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgoktmo"));
		//	
		//Элементы.РегистрацияВНалоговомОрганеКодПоОКАТО.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору административно-территориального деления объектов (ОКАТО) использовался до 2014 года в отчетности в контролирующие органы и платежах в бюджет.
		//	|Определяется по адресу регистрации. Может быть уточнен в налоговой инспеции.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgokato"));
			
		//ЭлементРегистрационныйНомерПФР.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Регистрационный номер из ""Уведомления о регистрации юридического лица в территориальном органе Пенсионного фонда Российской Федерации по месту нахождения на территории Российской Федерации"".
		//	|Состоит из 12 цифр.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgpfrnum"));
		//	
		//Элементы.КодОрганаПФР.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код территориального органа ПФР, как правило, совпадает с первыми цифрами Регистрационного номера. Может быть уточнен в ПФР.
		//	|Состоит из 6 цифр.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgpfrdep"));
		//
		//Элементы.РегистрационныйНомерФСС.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Регистрационный номер страхователя из ""Извещения о регистрации в качестве страхователя""
		//	|Состоит из 10 цифр.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgfssnum"));
		//
		//Элементы.КодПодчиненностиФСС.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код подчиненности из ""Извещения о регистрации в качестве страхователя"".
		//	|Состоит из 5 цифр.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgfssdep"));
		//
		//Элементы.КодОКОПФ.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору организационно-правовых форм (ОКОПФ) из ""Информационного письма об учете в Статрегистре Росстата"".
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgokopf"));
		//	
		//Элементы.КодОКФС.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору форм собственности (ОКФС) из ""Информационного письма об учете в Статрегистре Росстата"".
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgokfs"));
		//	
		//Элементы.КодОКВЭД.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору видов экономической деятельности (ОКВЭД), редакция 1.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgokved"));
		//	
		//Элементы.КодПоОКПО.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код по Общероссийскому классификатору предприятий и организаций (ОКПО) из ""Информационного письма об учете в Статрегистре Росстата"".
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgokpo"));
		//	
		//Элементы.КодОрганаФСГСПолучателя.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
		//	Новый ФорматированнаяСтрока(НСтр("ru='Код органа Росстата, которому подотчетна организация. Требуется для сдачи отчетности в электронном виде. Определяется автоматически, в зависимости от адреса регистрации. Может быть уточнен в территориальном органе Росстата.
		//	|Состоит из 4 или 6 цифр.
		//	|'")),
		//	Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, "http://its.1c.ru/bmk/bp30/fillingorganisation#orgstatdep"));
		
	КонецЕсли;
	
	Элементы.ДекорацияТекстРекламы.Заголовок = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(НСтр("ru='Обменивайтесь с банком напрямую!'"), Новый Шрифт(, 14)),
		Символы.ПС + Символы.ПС,
		Новый ФорматированнаяСтрока(НСтр("ru='Подключите сервис 1С:ДиректБанк'"),,,,"ПодключитьДиректБанк"),
		" ",
		Новый ФорматированнаяСтрока(НСтр("ru='для отправки платежных документов и получения выписок напрямую из 1С:Предприятия, без использования клиент-банка.'")),
		" ",
		Новый ФорматированнаяСтрока(НСтр("ru='Подробнее'"),,,, " https://portal.1c.ru/applications/44"));
	
	Если ЭтоФизЛицо ИЛИ ЭтоОбособленноеПодразделение Тогда
		Элементы.КрупнейшийНалогоплательщик.Видимость = Ложь;
		Элементы.КодНалоговогоОрганаПолучателя.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ОтчетностьПодписываетРуководитель.СписокВыбора[0].Представление = ?(ЭтоФизЛицо,
		НСтр("ru='Индивидуальный предприниматель'"),
		НСтр("ru='Руководитель'"));
	
	ПрочитатьИнформациюОбответственныхЛицах();
	
	//Элементы.ГруппаКассир.Видимость = ПолучитьФункциональнуюОпцию("ИспользуетсяКассоваяКнига")
	//	Или (СтруктураУчетнойПолитики <> Неопределено И Не СтруктураУчетнойПолитики.ПрименяетсяНалогНаПрофессиональныйДоход);
	
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(ЭтотОбъект, Истина);
		ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
		ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
			БанковскийСчет.НомерСчета, БИКБанка, Истина, ЦветВыделенияНекорректногоЗначение);
		ПоказатьЭлементыДиректБанк(ЭтаФорма);
	Иначе
		Элементы.ГруппаОсновнойБанковскийСчет.Видимость = Ложь;
	КонецЕсли;
	
	// Внесение изменений в ЕГРЮЛ/ЕГРИП
	Если ЭтоФизЛицо Тогда
		Элементы.ВнесениеИзмененийЕГР.Заголовок = НСтр("ru = 'Внесение изменений в ЕГРИП'");
		Элементы.ОписаниеИзмененийЕГР.Заголовок = 
			НСтр("ru = 'Изменение видов деятельности (кодов ОКВЭД) необходимо зарегистрировать в Едином государственном реестре индивидуальных предпринимателей.'");
		Элементы.НадписьИзмененияЕстьВЕГР.Заголовок = НСтр("ru = 'Онлайн проверка показала, что в ЕГРИП уже содержатся новые реквизиты'");
	Иначе
		Элементы.ВнесениеИзмененийЕГР.Заголовок = НСтр("ru = 'Внесение изменений в ЕГРЮЛ'");
		Элементы.ОписаниеИзмененийЕГР.Заголовок = 
			НСтр("ru = 'Изменение руководителя, адреса организации, состава участников, видов деятельности (кодов ОКВЭД) необходимо зарегистрировать в Едином государственном реестре юридических лиц.'");
		Элементы.НадписьИзмененияЕстьВЕГР.Заголовок = НСтр("ru = 'Онлайн проверка показала, что в ЕГРЮЛ уже содержатся новые реквизиты'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияРуководительНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие("Руководитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтветственныеОтчетыНажатие(Элемент)
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Руководитель");
	
	Отбор	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияИсторияПодписиНажатиеЗавершение", ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",	Отбор);
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
		
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.Форма.ФормаПрочегоСпискаОтветственных", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияГлавныйБухгалтерНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие("ГлавныйБухгалтер");
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительФИОПриИзменении(Элемент)
	
	ИзмененРуководитель = Истина;
	
	Если ЗначениеЗаполнено(РуководительФизЛицо) тогда
		
		РуководительДолжность= ПрочитатьДолжность(Объект.Ссылка,РуководительФизЛицо,"Руководитель");
		
	КонецЕсли;
	
	Руководитель = НаименованиеОтветственногоЛица(РуководительФизЛицо, РуководительДолжность);
	ПодписиУстановитьЗаголовок(ЭтотОбъект);
	УстановитьФаксимилеПодписи(РуководительФизЛицо, "ПодписьРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьПриИзменении(Элемент)
	
	ИзмененРуководитель = Истина;
	
	Руководитель = НаименованиеОтветственногоЛица(РуководительФизЛицо, РуководительДолжность);
	ПодписиУстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерФИОПриИзменении(Элемент)
		
	ИзмененГлавныйБухгалтер = Истина;
	
	Если ЗначениеЗаполнено(ГлавныйБухгалтерФизЛицо) тогда
		
		ГлавныйБухгалтерДолжность= ПрочитатьДолжность(Объект.Ссылка,ГлавныйБухгалтерФизЛицо,"ГлавныйБухгалтер");
		
	КонецЕсли;
	
	ГлавныйБухгалтер = НаименованиеОтветственногоЛица(ГлавныйБухгалтерФизЛицо, ГлавныйБухгалтерДолжность);
	ПодписиУстановитьЗаголовок(ЭтотОбъект);
	УстановитьФаксимилеПодписи(ГлавныйБухгалтерФизЛицо, "ПодписьГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьПриИзменении(Элемент)
	
	ИзмененГлавныйБухгалтер = Истина;
	
	ГлавныйБухгалтер = НаименованиеОтветственногоЛица(ГлавныйБухгалтерФизЛицо, ГлавныйБухгалтерДолжность);
	ПодписиУстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирФИОПриИзменении(Элемент)
	
	ИзмененКассир = истина;
	
	Если ЗначениеЗаполнено(КассирФизЛицо) тогда
		
		КассирДолжность= ПрочитатьДолжность(Объект.Ссылка,КассирФизЛицо,"Кассир");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассирДолжностьПриИзменении(Элемент)
	
	ИзмененКассир = истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКассирИсторияНажатие(Элемент)
	
	ПоказатьИсториюОтветственныхЛицНажатие("Кассир");
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавныйБухгалтерДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирДолжностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#Область ЛоготипИФаксимиле

&НаКлиенте
// Процедура отвечает за обработку нажатия на картинки формы (логотип/факсим. печать)
//
Процедура ОбработатьНажатиеКартинки(СтандартнаяОбработка, ИмяЭлементаСКартинкой)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтотОбъект["Файл"+ИмяЭлементаСКартинкой]) Тогда
		
		ДанныеФайла = ПолучитьДанныеФайла(ЭтотОбъект["Файл"+ИмяЭлементаСКартинкой], УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	ИначеЕсли МожноРедактироватьФайлы Тогда
		
		Если Элементы["Адрес" + ИмяЭлементаСКартинкой].ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
		
		ЗагрузитьКартинку(ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает навигационую ссылку файла
//
Функция ПолучитьКартинку(ФайлКартинки, УникальныйИдентификатор)
	
	ДанныеКартинки = РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	ПроверитьРазмерКартинки(ДанныеКартинки);
	Возврат ДанныеКартинки.СсылкаНаДвоичныеДанныеФайла;
	
КонецФункции

&НаКлиенте
// Процедура отвечает за отображение/обновление соответствующей картинки
//
Процедура УстановитьКартинкуНаФорме(АктивныйАдрес, РеквизитОбъекта)
	
	Если ЗначениеЗаполнено(РеквизитОбъекта) Тогда
		АктивныйАдрес = ПолучитьКартинку(РеквизитОбъекта, УникальныйИдентификатор);
	Иначе
		АктивныйАдрес = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьЛоготипНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("Логотип", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьФаксимилеНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("ФаксимильнаяПечать", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуВЭлементе(ФайлКартинки, ИмяЭлементаСКартинкой)
	
	Модифицированность = Истина;
	ИмяФайла = "Файл" + ИмяЭлементаСКартинкой;
	ИмяАдресаКартинки = "Адрес" + ИмяЭлементаСКартинкой;
	ЭтотОбъект[ИмяФайла] = ФайлКартинки;
	УстановитьКартинкуНаФорме(ЭтотОбъект[ИмяАдресаКартинки], ФайлКартинки);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(ИмяЭлементаСКартинкой)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ИмяЭлементаСКартинкой = "ПодписьРуководителя" Тогда
			Если ЭтоФизЛицо Тогда
				ВладелецКартинки = Объект.ИндивидуальныйПредприниматель;
			Иначе
				ВладелецКартинки = РуководительФизЛицо;
			КонецЕсли;
		ИначеЕсли ИмяЭлементаСКартинкой = "ПодписьГлавногоБухгалтера" Тогда
			ВладелецКартинки = ГлавныйБухгалтерФизЛицо;
		Иначе
			ВладелецКартинки = Объект.Ссылка;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",      ВладелецКартинки);
		ПараметрыФормы.Вставить("РежимВыбора",        Истина);
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
		
		ДополнительныеПараметры = Новый Структура("ИмяЭлементаСКартинкой", ИмяЭлементаСКартинкой);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, Элементы["Адрес"+ИмяЭлементаСКартинкой], , , , ОписаниеОповещения);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Элемент справочника еще не записан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(ВыбраннаяКартинка, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяКартинка) Тогда
		
		УстановитьКартинкуВЭлементе(ВыбраннаяКартинка, ДополнительныеПараметры.ИмяЭлементаСКартинкой);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокРеквизитаКартинки(ИмяЭлементаСКартинкой)
	ЭлементКартинки = Элементы[ИмяЭлементаСКартинкой];
	Если ЗначениеЗаполнено(ЭлементКартинки.Заголовок) Тогда
		Возврат ЭлементКартинки.Заголовок;
	КонецЕсли;
	
	ПутьКДанным = ЭлементКартинки.ПутьКДанным;
	Реквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = ПутьКДанным Тогда
			Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
				Возврат СокрЛП(Реквизит.Заголовок);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИмяЭлементаСКартинкой;
КонецФункции

&НаСервере
Процедура УстановитьФаксимилеПодписи(ОтветственноеЛицо, ИмяЭлементаСКартинкой)
	
	ИмяФайла = "Файл" + ИмяЭлементаСКартинкой;
	ИмяАдресаКартинки = "Адрес" + ИмяЭлементаСКартинкой;
	ТекущийФайл = УправлениеПечатьюБП.ПрисоединенныйФайлФаксимилеФизическогоЛица(ОтветственноеЛицо);
	Если НЕ ТекущийФайл.Пустая() Тогда
		ЭтотОбъект[ИмяАдресаКартинки] = РаботаСФайлами.ДанныеФайла(ТекущийФайл, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
		ЭтотОбъект[ИмяФайла]          = ТекущийФайл;
	Иначе
		ЭтотОбъект[ИмяАдресаКартинки] = "";
		ЭтотОбъект[ИмяФайла]          = "";
	КонецЕсли;
	
	ПодготовитьЭлементыСКартинкамиЛоготипаИФаксимиле();
	
КонецПроцедуры

// Переносит реквизиты печати и подписей в раскрытую группу, активирует поле "Печать".
//
&НаСервере
Процедура АктивироватьПолеПечать()
	Элементы.Переместить(Элементы.ГруппаЛоготипИПечать, Элементы.ГруппаЛоготипИПечатьРазвернуто);
	ТекущийЭлемент = Элементы.АдресПечать;
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформация

&НаКлиенте
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	// По методике встраивания БСП эта процедура должна быть серверной.
	// Однако, нам нужен результат и на клиенте - для того, что бы задать вопрос про изменение налоговой инспекции.
	// Поэтому процедура сделана клиентской и штатный код БСП из нее перенесен в ПослеИзмененияКонтактнойИнформацииНаСервере
	
	ДействияПослеИзменения = ПослеИзмененияКонтактнойИнформацииНаСервере(Результат);
	ПослеИзмененияКонтактнойИнформацииНаКлиенте(ДействияПослеИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Функция СтатическиеРеквизиты()
	
	СтатическиеРеквизиты = Новый Массив();
	
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации);
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации);
	
	Возврат СтатическиеРеквизиты;

КонецФункции

#КонецОбласти

#Область ДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ПрочитатьНаборЗаписейПериодическихСведений(ИмяРегистра, ВедущийОбъект) Экспорт
	
	РедактированиеПериодическихСведений.ПрочитатьНаборЗаписей(ЭтотОбъект, ИмяРегистра, ВедущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРегистрацияВОрганеПФР()
	
	ПравоДоступаИсторияРегистрацииПФР = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ИсторияРегистрацийВОрганеПФР);
	
	Если ПравоДоступаИсторияРегистрацииПФР Тогда
		
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(ЭтотОбъект, "ИсторияРегистрацийВОрганеПФР", ОрганизацияСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КодНалоговогоОрганаПриИзмененииНаСервере()
	
	УстановитьРегистрациюВНалоговомОргане();
	
	Если ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
		Ошибка = "";
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(Ошибка);
		Если ЗначениеЗаполнено(Ошибка) Тогда
			// Определить реквизиты налогового органа по данным веб-сервиса не удалось
			// Нужно определить платежные реквизиты по данным информационной базы
			УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, Объект.КодНалоговогоОргана, 
					ПлатежныеРеквизитыФНСПредставление);
		КонецЕсли;
	Иначе
		ПлатежныеРеквизитыФНСПредставление  = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(Неопределено);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КодОрганаПФРПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		ОписаниеОшибки = "";
		ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганПФР, Объект.КодОрганаПФР, 
						ПлатежныеРеквизитыПФРПредставление);
		КонецЕсли;
	Иначе
		Объект.НаименованиеТерриториальногоОрганаПФР = "";
		ПлатежныеРеквизитыПФРПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(Неопределено);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура КодОрганаФССПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		ОписаниеОшибки = "";
		ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки);
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.ОрганФСС, Объект.КодПодчиненностиФСС, 
						ПлатежныеРеквизитыФССПредставление);
		КонецЕсли;
	Иначе
		Объект.НаименованиеТерриториальногоОрганаФСС = "";
		ПлатежныеРеквизитыФССПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(Неопределено);
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОповещений

&НаКлиенте
// При вызове стандартного метода Оповестить() платформы оповещение
// приходит и в текущую форму в том числе, т.е. вызывается ее ОбработкаОповещения().
// При этом собственное оповещение обработатывать не надо, т.к. в форме и так все данные
// актуальные, можно не тратить время на их обновление.
// Но в ОбработкаОповещения() не всегда можно идентифицировать собственное оповещение,
// т.к. в ряде случае Параметр и Источник заполняются согласно формату оповещений 
// БЗКБ и по ним нельзя понять, что это оповещение самой текущей формы. 
// Поэтому перед отсылкой оповещения устанавливаем переменную РассылкаОповещенияИзТекущейФормы,
// которая проверяется в ОбработкаОповещения(), а после окончания оповещения сбрасываем ее.
//
Процедура ОповеститьВФорме(ИмяСобытия, Параметр = Неопределено, Источник = Неопределено)

	РассылкаОповещенияИзТекущейФормы = Истина;
	Оповестить(ИмяСобытия, Параметр, Источник);
	РассылкаОповещенияИзТекущейФормы = Ложь;

КонецПроцедуры

#КонецОбласти

#Область РегистрацияВНалоговомОргане

&НаКлиентеНаСервереБезКонтекста
Функция ВладелецРегистрации(Форма)
	
	Объект            = Форма.Объект;
	ОрганизацияСсылка = Форма.ОрганизацияСсылка;
	Возврат ?(Объект.ОбособленноеПодразделение, Объект.ГоловнаяОрганизация, ОрганизацияСсылка);
	
КонецФункции

&НаСервере
Процедура УстановитьРегистрациюВНалоговомОргане()
	
	ВладелецРегистрации = ВладелецРегистрации(ЭтаФорма);
	
	Если Объект.КПП = РегистрацияВНалоговомОргане.КПП
		И Объект.КодНалоговогоОргана = РегистрацияВНалоговомОргане.Код
		И ВладелецРегистрации = РегистрацияВНалоговомОргане.Владелец Тогда
		//регистрация в налоговом органе подходит, не нужно ничего изменять
		Возврат;
	КонецЕсли;
	
	СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ВладелецРегистрации, Объект.КПП, Объект.КодНалоговогоОргана);
	
	Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, Объект.КодНалоговогоОргана, СуществующаяРегистрация);
	Иначе
		РегистрацииВНалоговомОрганеФорма.УстановитьНовуюРегистрацию(ЭтотОбъект, ВладелецРегистрации, Объект.КПП, Объект.КодНалоговогоОргана);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ = Ложь)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрацияВНалоговомОргане) Тогда
		
		Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
			
			РегистрацииВНалоговомОрганеФорма.ЗаписатьРегистрациюВНалоговомОргане(ЭтотОбъект, ТекущийОбъект, ВладелецРегистрации(ЭтаФорма));
			
			ЗаписьНового = ТекущийОбъект.ДополнительныеСвойства.Свойство("ЗаписьНового");
			
			РегистрацииВНалоговомОрганеФорма.ЗаписатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(ЭтотОбъект, ОрганизацияСсылка, ЗаписьНового);
			
			ПодчиненныеСтруктурныеЕдиницы = Справочники.ПодразделенияОрганизаций.ПодчиненныеСтруктурныеЕдиницы(ТекущийОбъект.Ссылка);
			РегистрыСведений.ИсторияРегистрацийВНалоговомОргане.ОбновитьПодчиненныеСтруктурныеЕдиницы(ПодчиненныеСтруктурныеЕдиницы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРегистрациюВНалоговомОргане()
	
	РегистрацииВНалоговомОрганеФорма.ПрочитатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(ЭтотОбъект, Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане)
		И ОбщегоНазначения.СсылкаСуществует(Объект.РегистрацияВНалоговомОргане) Тогда
		
		РегистрацияВНалоговомОрганеОбъект = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияВНалоговомОрганеОбъект, "РегистрацияВНалоговомОргане");
		ОтчетностьПодписываетПредставитель = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель), 1, 0);
		КодРегионаРегистрации = РегистрацияВНалоговомОргане.КодРегиона;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.КодНалоговогоОргана)
		ИЛИ ЗначениеЗаполнено(Объект.КПП) Тогда
		
		УстановитьРегистрациюВНалоговомОргане();
		
	КонецЕсли;
	
	// Заполним список выбора регионов установленным значением, если в списке не более 1 элемента.
	// В ином случае список выбора уже содержит все регионы.
	Если Элементы.КодРегионаРегистрации.СписокВыбора.Количество() < 2 Тогда
		
		НастройкиУчетаНалогаНаПрибыльФормы.НастроитьЭлементыУказанияРегиона(
			ТребуетсяУказаниеРегиона,
			Элементы.КодРегионаРегистрации.СписокВыбора,
			КодРегионаРегистрации);
			
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрациюВНалоговомОргане()
	
	Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
		
		РегистрацииВНалоговомОрганеФорма.ЗаписатьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект, ВладелецРегистрации(ЭтаФорма));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МожноСохранитьРегистрацию(Форма)
	
	Возврат ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.Код)
			И (Форма.ЭтоФизЛицо ИЛИ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.КПП));
	
КонецФункции

&НаСервере
Процедура ОбновитьРегистрациюПослеЗаписиВФормеРегистрации(НоваяРегистрация)
	
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяРегистрация, "КПП, Код");
	Если Объект.КПП <> РеквизитыРегистрации.КПП
		ИЛИ Объект.КодНалоговогоОргана <> РеквизитыРегистрации.Код Тогда
		
		// Была изменена регистрация в налоговом органе, при этом у нее изменились ключевые реквизиты
		// При записи регистрации в налоговом органе был перезаписан и элемент справочника организации.
		// Необходимо его перечитать для обновления данных
		
		Прочитать();
		
	Иначе
		
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, Объект.КодНалоговогоОргана, НоваяРегистрация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеРедактированияИсторииРегистрацийВНалоговомОргане()
	
	Если ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Количество() > 0 Тогда
		
		АктуальнаяЗапись = РегистрацииВНалоговомОрганеФорма.АктуальнаяЗаписьИстории(ЭтотОбъект);
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, Объект.КодНалоговогоОргана, АктуальнаяЗапись.РегистрацияВНалоговомОргане);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПриИзмененииКППЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		УстановитьКодНалоговогоОргана();
	Иначе
		// Устанавливаем регистрацию по прежнему коду
		УстановитьРегистрациюВНалоговомОргане();
	КонецЕсли;
	
	// После изменения регистрации, возможно, требуется вывести пояснение о закрытом КПП
	ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(ЭтотОбъект, ЭтоФизЛицо, Объект.ОбособленноеПодразделение);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКодНалоговогоОргана()

	Объект.КодНалоговогоОргана = Лев(Объект.КПП, 4);
	КодНалоговогоОрганаПриИзмененииНаСервере();
	ЗаполнитьСписокРегионов(Элементы.КодРегионаРегистрации);

КонецПроцедуры

#КонецОбласти

#Область ИсторияНаименований

&НаКлиенте
Процедура ОткрытьИсториюНаименований()
	
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущееНаименованиеСокращенное", Объект.НаименованиеСокращенное);
	ПараметрыФормы.Вставить("ТекущееНаименованиеПолное",      Объект.НаименованиеПолное);
	ПараметрыФормы.Вставить("ТекущаяФамилияИП",               Объект.ФамилияИП);
	ПараметрыФормы.Вставить("ТекущееИмяИП",                   Объект.ИмяИП);
	ПараметрыФормы.Вставить("ТекущееОтчествоИП",              Объект.ОтчествоИП);
	ПараметрыФормы.Вставить("ИсторияНаименований",            Объект.ИсторияНаименований);
	ПараметрыФормы.Вставить("ТолькоПросмотр",                 ТолькоПросмотр);
	ПараметрыФормы.Вставить("Наименование",                   Объект.Наименование);
	ПараметрыФормы.Вставить("ЮридическоеФизическоеЛицо",      Объект.ЮридическоеФизическоеЛицо);
	
	ОткрытьФорму("Справочник.Организации.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеПослеРедактированияИстории(НаборЗаписей)

	ОрганизацииФормыКлиентСервер.УстановитьНаименованиеПослеРедактированияИстории(ЭтотОбъект, Объект, НаборЗаписей);
	
	ПослеИзмененияСокращенногоНаименования();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции()
	
	ОписаниеОшибки = "";
	ПерезаполнятьСведения = Истина;
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки, ПерезаполнятьСведения);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуИнтернетПоддержки(ОписаниеОшибки, "ВыполнитьЗаполнениеСведенийОНалоговойИнспекции");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииФСС()
	
	ОписаниеОшибки = "";
	ПерезаполнятьСведения = Истина;
	ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки, ПерезаполнятьСведения);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуИнтернетПоддержки(ОписаниеОшибки, "ВыполнитьЗаполнениеСведенийОбОтделенииФСС");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОбОтделенииПФР()
	
	ОписаниеОшибки = "";
	ПерезаполнятьСведения = Истина;
	ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки, ПерезаполнятьСведения);
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ОбработатьОшибкуИнтернетПоддержки(ОписаниеОшибки, "ВыполнитьЗаполнениеСведенийОбОтделенииПФР");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(ИННОбъекта, ПроверитьПодключение = Истина)

	ДанныеЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, НЕ ЭтоФизЛицо, Объект.Ссылка);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ОписаниеОшибки) Тогда
		ОбработатьОшибкуИнтернетПоддержки(ДанныеЗаполнения.ОписаниеОшибки, "ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте", ИННОбъекта);
	ИначеЕсли Параметры.Ключ.Пустая() Тогда
		ПерезаполнитьРеквизитыНаСервере(ДанныеЗаполнения.АдресРеквизитовОрганизации);
		УстановитьСвойстваФизическогоЛицаПослеЗаполнения();
	Иначе
		ПерезаполнитьРеквизитыНаКлиенте(ДанныеЗаполнения);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеРегистрирующегоОрганаПоДаннымЕГРЮЛ()
	
	ДанныеЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(Объект.ИНН, НЕ ЭтоФизЛицо, Объект.Ссылка);
	Если НЕ ПустаяСтрока(ДанныеЗаполнения.ОписаниеОшибки) Тогда
		ОбработатьОшибкуИнтернетПоддержки(ДанныеЗаполнения.ОписаниеОшибки, "ЗаполнитьНаименованиеРегистрирующегоОрганаПоДаннымЕГРЮЛ");
		Возврат;
	КонецЕсли;
	
	Объект.НаименованиеРегистрирующегоОргана = ПолучитьНаименованиеРегистрирующегоОргана(
		ДанныеЗаполнения.АдресРеквизитовОрганизации);
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФизЛицоДолжностьРуководителя(РеквизитыФизЛица);
	
	РуководительФизЛицо = ОтветственныеЛицаБП.ПолучитьСоздатьФизЛицо(РеквизитыФизЛица);
	Если ЗначениеЗаполнено(РуководительФизЛицо) Тогда
		РуководительДолжность = ОтветственныеЛицаБП.ПолучитьСоздатьДолжность(РеквизитыФизЛица.Должность);
		ИзмененРуководитель = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЗначениеАдресаJSON, ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(ЗначениеАдресаJSON) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON);
	
	Если СведенияОНалоговомОрганеПоАдресу <> Неопределено Тогда
	
		Объект.КодНалоговогоОргана = СведенияОНалоговомОрганеПоАдресу.КодНалоговогоОргана;
		
		УстановитьРегистрациюВНалоговомОргане();
		
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
		
		РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОрганеПоАдресу.КодПоОКАТО;
		РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОрганеПоАдресу.КодПоОКТМО;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "", ПерезаполнятьСведения = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОргана) Тогда
		Возврат;
	КонецЕсли;
	
	КодРегионаРегистрации = ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(Объект.КодНалоговогоОргана);
	РегистрацияВНалоговомОргане.КодРегиона = КодРегионаРегистрации;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(Объект.КодНалоговогоОргана);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка)
		ИЛИ ПерезаполнятьСведения Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыФНСПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыНалоговогоОргана);
	
	РегистрацияВНалоговомОргане.Наименование     = РеквизитыНалоговогоОргана.Наименование;
	РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
	
	// Если заполнен адрес, заполним и реквизиты ОКТМО и ОКАТО
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации";
	ДанныеИсточника = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		ЗначениеАдресаJSON = ДанныеИсточника[0].Значение;
		
		СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON);
		Если СведенияОНалоговомОргане <> Неопределено Тогда
			РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОргане.КодПоОКАТО;
			РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОргане.КодПоОКТМО;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииФСС(ОписаниеОшибки = "", ПерезаполнятьСведения = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтделенияФСС = ДанныеГосударственныхОрганов.РеквизитыОтделенияФССПоКоду(Объект.КодПодчиненностиФСС);
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияФСС.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияФСС.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияФСС.Ссылка)
		ИЛИ ПерезаполнятьСведения Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияФСС);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыФССПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияФСС);
	
	Объект.НаименованиеТерриториальногоОрганаФСС = РеквизитыОтделенияФСС.Наименование;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОтделенииПФР(ОписаниеОшибки = "", ПерезаполнятьСведения = Ложь)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаПФР) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыОтделенияПФР = ДанныеГосударственныхОрганов.РеквизитыОтделенияПФРПоКоду(Лев(Объект.КодОрганаПФР, 3));
	
	Если ЗначениеЗаполнено(РеквизитыОтделенияПФР.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыОтделенияПФР.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыОтделенияПФР.Ссылка)
		ИЛИ ПерезаполнятьСведения Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыОтделенияПФР);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыПФРПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыОтделенияПФР);
	
КонецПроцедуры

&НаСервере
Функция СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON)
	
	Если НЕ ЗначениеЗаполнено(ЗначениеАдресаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(ЗначениеАдресаJSON, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = ?(ЭтоФизЛицо, Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСФЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0"),
												Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0"));
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, Представление, ЗначениеJSON)
	
	ДанныеСтроки = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(
		ЭтотОбъект, ИмяРеквизита);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		ДанныеСтроки.Представление = Представление;
		ДанныеСтроки.Значение = ЗначениеJSON;
		ЭтотОбъект[ИмяРеквизита] = Представление;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеОтветственногоЛица(ФамилияИмяОтчество, Должность)
	
	ПредставлениеНаименования = Новый Массив;
	ПредставлениеНаименования.Добавить(ФамилияИмяОтчество);
	Если ЗначениеЗаполнено(ФамилияИмяОтчество) И ЗначениеЗаполнено(Должность) Тогда
		ПредставлениеНаименования.Добавить(СтрШаблон(НСтр("ru = '(%1)'"), Должность));
	КонецЕсли;
		
	Возврат СтрСоединить(ПредставлениеНаименования, " ");
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОшибкуИнтернетПоддержки(ОписаниеОшибки, ВызовПослеПодключения, ИННОбъекта = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВызовПослеПодключения" , ВызовПослеПодключения);
	ДополнительныеПараметры.Вставить("ИННОбъекта" , ИННОбъекта);
	
	ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
		"ОбработатьОшибкуИнтернетПоддержкиЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	ДополнительныеПараметрыОбработкиОшибки =
		РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
	ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов организации'");
	ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "organizaciya";
	ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
	
	РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
		ОписаниеОшибки,
		ОбработчикЗавершенияОбработкиОшибки,
		ДополнительныеПараметрыОбработкиОшибки);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкуИнтернетПоддержкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		
		Если ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
			
			Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте" Тогда
				
				ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте(ДополнительныеПараметры.ИННОбъекта);
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьНаименованиеРегистрирующегоОрганаПоДаннымЕГРЮЛ" Тогда
				
				ЗаполнитьНаименованиеРегистрирующегоОрганаПоДаннымЕГРЮЛ();
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ВыполнитьЗаполнениеСведенийОНалоговойИнспекции" Тогда
				
				ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ВыполнитьЗаполнениеСведенийОбОтделенииФСС" Тогда
				
				ВыполнитьЗаполнениеСведенийОбОтделенииФСС()
				
			ИначеЕсли ДополнительныеПараметры.ВызовПослеПодключения = "ВыполнитьЗаполнениеСведенийОбОтделенииПФР" Тогда
				
				ВыполнитьЗаполнениеСведенийОбОтделенииПФР()
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФНСПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодНалоговогоОргана);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", РегистрацияВНалоговомОргане.НаименованиеИФНС);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ПлатежныеРеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФССПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодПодчиненностиФСС);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", Объект.НаименованиеТерриториальногоОрганаФСС);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФСС", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ПлатежныеРеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыПФРПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", Объект.КодОрганаПФР);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", Объект.НаименованиеТерриториальногоОрганаПФР);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовПФР", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ПлатежныеРеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Истина Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			ДопПараметры.КодГосударственногоОргана,
			ПлатежныеРеквизитыФНСПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФСС(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Истина Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			ДопПараметры.КодГосударственногоОргана,
			ПлатежныеРеквизитыФССПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовПФР(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Истина Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			ДопПараметры.КодГосударственногоОргана,
			ПлатежныеРеквизитыПФРПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПлатежныхРеквизитов(Вид, Код, ПлатежныеРеквизитыПредставление)
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Код) Тогда
		ГосударственныйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Вид, Код);
	Иначе
		ГосударственныйОрган = Неопределено;
	КонецЕсли;
	
	ПлатежныеРеквизитыПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьЗаполнениеРеквизитовПоИНН()

	ЗаполнятьРеквизитыПоИНН = Истина;

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьСвойстваФизическогоЛицаПослеЗаполнения()
	
	Если ЭтоФизЛицо Тогда
		Объект.КПП = "";
		Объект.Наименование = ОрганизацииФормыКлиентСервер.НаименованиеИндивидуальногоПредпринимателя(
			Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП);
		ПослеИзмененияСокращенногоНаименования();
	ИначеЕсли ИННСоответствуетТребованиям И ПустаяСтрока(Объект.КПП) Тогда
		Объект.КПП = Лев(Объект.ИНН, 4) + "01001";
		ПриИзмененииКПП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКодОрганаПФР(РегНомерПФР)
	
	Результат = Лев(СокрЛ(РегНомерПФР), 7);	
	
	Если СтрДлина(СокрЛП(Результат)) < 7 Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКодПодчиненностиФСС(РегНомерФСС)
	
	КодПричиныРегистрации = "1"; // Юридическое лицо.
	
	Если КодПричиныРегистрации = "ОбособленноеПодразделение" Тогда
		Результат = "2";
	ИначеЕсли КодПричиныРегистрации = "ИндивидуальныйПредприниматель" Тогда
		Результат = "3";
	КонецЕсли;
	
	Результат = Лев(СокрЛ(РегНомерФСС), 4) + КодПричиныРегистрации;
	
	Если СтрДлина(СокрЛП(Результат)) < 4 Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти

#Область ОсновнойБанковскийСчет

&НаКлиенте
Функция ЗаблокироватьБанковскийСчетПриРедактировании()
	
	Если НЕ БанковскийСчет.Ссылка.Пустая() И НЕ БанковскийСчетЗаблокирован Тогда
		Если НЕ ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(БанковскийСчет.Ссылка, БанковскийСчет.ВерсияДанных, УникальныйИдентификатор) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удается внести изменения в реквизиты основного банковского счета. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьОсновнойБанковскийСчет();
			Возврат Ложь;
		Иначе
			БанковскийСчетЗаблокирован = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(Ссылка, ВерсияДанных, УникальныйИдентификатор)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Ссылка, ВерсияДанных, УникальныйИдентификатор);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазблокироватьБанковскийСчетПриРедактированииНаСервере(Ссылка, ИдентификаторФормы)
	
	РазблокироватьДанныеДляРедактирования(Ссылка, ИдентификаторФормы);
	
КонецФункции

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.БанковскиеСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетОбъект = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчета) Тогда
		ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОсновнойБанковскийСчетОбъект = Неопределено;
	КонецЕсли;
	
	Если ОсновнойБанковскийСчетОбъект <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
		ИзмененБанковскийСчет = Ложь;
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(БанковскийСчет.Банк);
		БИКБанка = РеквизитыБанка.Код;
		НаименованиеБанка = РеквизитыБанка.Наименование;
		ДеятельностьБанкаПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтаФорма, БанковскийСчет);
	
	ОбновитьВидимостьЭлементовДиректБанк();
	ПоказатьЭлементыДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойБанковскийСчет(ОсновнойБанковскийСчет)
	
	Прочитать();
				
	// Если основным назначен другой банковский счет, то разблокируем предыдущий основной
	Если Объект.ОсновнойБанковскийСчет <> ОсновнойБанковскийСчет
	   И БанковскийСчетЗаблокирован Тогда
	   
		РазблокироватьБанковскийСчетПриРедактированииНаСервере(Объект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
		БанковскийСчетЗаблокирован = Ложь;

	КонецЕсли;
	
	Объект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	Если Не Модифицированность Тогда
		Записать();
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) И ИзмененБанковскийСчет Тогда
		
		ОбъектРегистрации = РеквизитФормыВЗначение("БанковскийСчет");
		
		Если ОбъектРегистрации.Ссылка.Пустая() Тогда
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
			ОбъектРегистрации.Заполнить(Новый Структура("Владелец", ТекущийОбъект.Ссылка));
		КонецЕсли;
		
		ОбъектРегистрации.Валютный = (ОбъектРегистрации.ВалютаденежныхСредств <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		ОбъектРегистрации.Наименование = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(ОбъектРегистрации, НаименованиеБанка);
		ОбъектРегистрации.Записать();
		
		ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
		
		ИзмененБанковскийСчет = Ложь;
		
		Если БанковскийСчетЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеОКВЭД(Знач КодОКВЭД)

	ОКВЭД = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД");
	
	Возврат ОКВЭД.Получить(КодОКВЭД);

КонецФункции

&НаСервереБезКонтекста
Функция НаименованиеОКФС(Знач КодОКФС)

	Возврат Справочники.Организации.НаименованиеОКФС(КодОКФС);

КонецФункции

&НаСервереБезКонтекста
Функция НаименованиеОКОПФ(Знач КодОКОПФ)

	Возврат Справочники.Организации.НаименованиеОКОПФ(КодОКОПФ);

КонецФункции

&НаСервереБезКонтекста
Функция НаименованиеПоКлассификатору(Знач ИмяКлассификатора, Знач КодПоКлассификатору)

	Классификатор = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор(ИмяКлассификатора);
	
	Возврат Классификатор.Получить(КодПоКлассификатору);

КонецФункции

&НаСервере
Процедура УстановитьКодРосстатаПоАдресу(Адрес)
	
	Если НЕ ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		
		КодРегиона = КодРегионаПоАдресу(Адрес);
		
		Если ЗначениеЗаполнено(КодРегиона) Тогда
			СписокОтделений = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.ОтделенияРосстатаРегиона(Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН="));
			Если СписокОтделений.Количество()=1 Тогда
				Объект.КодОрганаФСГС = СписокОтделений[0].КодТОГС;
				НаименованиеТОГС     = СписокОтделений[0].НаименованиеТОГС;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодРегионаПоАдресу(Адрес)
	
	Возврат УправлениеКонтактнойИнформациейБП.КодРегионаПоАдресу(Адрес);
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСведенийОбОтветственныхЛицах

&НаКлиенте
Процедура ПоказатьИсториюОтветственныхЛицНажатие(Роль)

	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций."+Роль);
	
	Отбор	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияИсторияПодписиНажатиеЗавершение", ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",	Отбор);
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
		
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.Форма.ФормаИстории", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияПодписиНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	ПрочитатьИнформациюОбответственныхЛицах();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьДолжность(Знач Организация, Знач ФизическоеЛицо, Знач Роль)
	
	ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций[Роль];
	
	Возврат ОтветственныеЛицаБП.ДолжностьОтветственногоЛица(Организация, ФизическоеЛицо, ОтветственноеЛицо);
	
КонецФункции

&НаСервере
Процедура ОтветственныйПриЗаписиНаСервере(Отказ, ТекущийОбъект)
	
	МассивИзмененныхРеквизитов = Новый Массив;
	
	Если ИзмененРуководитель Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		СтруктураРеквизитов.Вставить("ФизическоеЛицо", РуководительФизЛицо);
		СтруктураРеквизитов.Вставить("Должность", РуководительДолжность);
		СтруктураРеквизитов.Вставить("СрокПолномочий", РуководительСрокПолномочий);
		СтруктураРеквизитов.Вставить("Период", РуководительКлючЗаписи.Период);
		
		МассивИзмененныхРеквизитов.Добавить(СтруктураРеквизитов);
		
	КонецЕсли;
	
	Если ИзмененГлавныйБухгалтер Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		СтруктураРеквизитов.Вставить("ФизическоеЛицо", ГлавныйБухгалтерФизЛицо);
		СтруктураРеквизитов.Вставить("Должность", ГлавныйБухгалтерДолжность);
		СтруктураРеквизитов.Вставить("Период", ГлавныйБухгалтерКлючЗаписи.Период);
		
		МассивИзмененныхРеквизитов.Добавить(СтруктураРеквизитов);
		
	КонецЕсли;
	
	Если ИзмененКассир Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
		СтруктураРеквизитов.Вставить("ФизическоеЛицо", КассирФизЛицо);
		СтруктураРеквизитов.Вставить("Должность", КассирДолжность);
		СтруктураРеквизитов.Вставить("Период", КассирКлючЗаписи.Период);
		
		МассивИзмененныхРеквизитов.Добавить(СтруктураРеквизитов);
		
	КонецЕсли;
	
	Для Каждого РеквизитыПодписи Из МассивИзмененныхРеквизитов Цикл
		
		РегистрыСведений.ОтветственныеЛицаОрганизаций.ЗаписатьНаборЗаписейИсторииОтветственныеЛицаОрганизаций(ТекущийОбъект.Ссылка, РеквизитыПодписи);
		
	КонецЦикла;
	
	ИзмененКассир = Ложь;
	ИзмененГлавныйБухгалтер = Ложь;
	ИзмененРуководитель = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ФаксимилеПодписиОтветственныхПриЗаписиНаСервере(Отказ)
	
	Попытка
		
		Если ЭтоФизЛицо Тогда
			Если ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель) Тогда
				ПредставлениеОтветственногоЛица = НСтр("ru = 'предпринимателя'");
				ФаксимилеПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ИндивидуальныйПредприниматель, "ФаксимилеПодписи");
				Если ФаксимилеПодписи <> ФайлПодписьРуководителя Тогда
					ЗаблокироватьДанныеДляРедактирования(Объект.ИндивидуальныйПредприниматель, , УникальныйИдентификатор);
					ОтветственноеЛицоОбъект = Объект.ИндивидуальныйПредприниматель.ПолучитьОбъект();
					ОтветственноеЛицоОбъект.ФаксимилеПодписи = ФайлПодписьРуководителя;
					ОтветственноеЛицоОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(РуководительФизЛицо) Тогда
				ФаксимилеПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РуководительФизЛицо, "ФаксимилеПодписи");
				Если ФаксимилеПодписи <> ФайлПодписьРуководителя Тогда
					ПредставлениеОтветственногоЛица = НСтр("ru = 'руководителя'");
					ЗаблокироватьДанныеДляРедактирования(РуководительФизЛицо, , УникальныйИдентификатор);
					ОтветственноеЛицоОбъект = РуководительФизЛицо.ПолучитьОбъект();
					ОтветственноеЛицоОбъект.ФаксимилеПодписи = ФайлПодписьРуководителя;
					ОтветственноеЛицоОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ГлавныйБухгалтерФизЛицо) Тогда
				ФаксимилеПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлавныйБухгалтерФизЛицо, "ФаксимилеПодписи");
				Если ФаксимилеПодписи <> ФайлПодписьГлавногоБухгалтера Тогда
					ПредставлениеОтветственногоЛица = НСтр("ru = 'главного бухгалтера'");
					ЗаблокироватьДанныеДляРедактирования(ГлавныйБухгалтерФизЛицо, , УникальныйИдентификатор);
					ОтветственноеЛицоОбъект = ГлавныйБухгалтерФизЛицо.ПолучитьОбъект();
					ОтветственноеЛицоОбъект.ФаксимилеПодписи = ФайлПодписьГлавногоБухгалтера;
					ОтветственноеЛицоОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ТекстСообщения =
			СтрШаблон(НСтр("ru = 'Не удалось записать подпись %1. Возможно, уже открыта форма с его личными данными.'"),
				ПредставлениеОтветственногоЛица);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИННКПП

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответствиеТребованиямИНН(Форма)
	
	Объект = Форма.Объект;
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Объект.ИНН, НЕ Форма.ЭтоФизЛицо);
	
	Форма.ИННСоответствуетТребованиям = РезультатПроверки.СоответствуетТребованиям;
	
	Если ЗначениеЗаполнено(РезультатПроверки.ОписаниеОшибки) Тогда
		Форма.НадписьПоясненияНекорректногоИНН =
			Новый ФорматированнаяСтрока(РезультатПроверки.ОписаниеОшибки, , Форма.ЦветВыделенияНекорректногоЗначение);
	Иначе
		Форма.НадписьПоясненияНекорректногоИНН = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьСоответствиеТребованиямКПП(Форма)
	
	Объект = Форма.Объект;
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(
		Объект.КПП, 
		НЕ Форма.ЭтоФизЛицо, 
		Объект.ОбособленноеПодразделение,
		Ложь);
	
	Форма.КППСоответствуетТребованиям = РезультатПроверки.СоответствуетТребованиям;
	
	Если ЗначениеЗаполнено(РезультатПроверки.ОписаниеОшибки) Тогда
		Форма.НадписьПоясненияНекорректногоКПП =
			Новый ФорматированнаяСтрока(РезультатПроверки.ОписаниеОшибки, , Форма.ЦветВыделенияНекорректногоЗначение);
	Иначе
		Форма.НадписьПоясненияНекорректногоКПП = "";
	КонецЕсли;
	
	ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(Форма, Форма.ЭтоФизЛицо, Объект.ОбособленноеПодразделение);
	
КонецПроцедуры

#КонецОбласти 

#Область ЗаполнениеСведенийОбОрганизации

&НаКлиенте
Процедура ПерезаполнитьРеквизитыНаКлиенте(ДанныеЗаполнения)
	
	ТекстВопроса = СтрШаблон(
		НСтр("ru='Заполнить по ИНН %1 %2?'"), 
		?(ДанныеЗаполнения.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"), НСтр("ru='юридического лица'"), НСтр("ru='предпринимателя'")),
		ДанныеЗаполнения.НаименованиеОрганизации);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерезаполнитьРеквизитыЗавершение", ЭтотОбъект, ДанныеЗаполнения.АдресРеквизитовОрганизации);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДокументыПоОрганизации(Организация)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Организация = &Организация";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

&НаКлиенте
Процедура ПерезаполнитьРеквизитыЗавершение(Ответ, АдресРеквизитовОрганизации) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПерезаполнитьРеквизитыНаСервере(АдресРеквизитовОрганизации);
		УстановитьСвойстваФизическогоЛицаПослеЗаполнения();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОрганизации()

	// Очистим реквизиты которых у ИП быть не может
	Если Объект.ЮридическоеФизическоеЛицо =Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Объект.КПП = "";
		
		Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
		
		КодыСтатистики = Справочники.Организации.КодыСтатистики(Объект);
		ЗаполнитьЗначенияСвойств(Объект, КодыСтатистики);
		
		УстановитьНаименованиеИП();
		
	Иначе
		
		Объект.ИндивидуальныйПредприниматель = Справочники.ФизическиеЛица.ПустаяСсылка();
		Объект.ФамилияИП  = "";
		Объект.ИмяИП      = "";
		Объект.ОтчествоИП = "";
		ИсторияНаименований = Объект.ИсторияНаименований.Выгрузить();
		ИсторияНаименований.ЗаполнитьЗначения("", "ФамилияИП, ИмяИП, ОтчествоИП");
		Объект.ИсторияНаименований.Загрузить(ИсторияНаименований);
		// Для несовместимой для ЮрЛица учетной политики "Патентная" изменим учетную политику на "УСН Доходы"
			
		Если СтруктураУчетнойПолитики = Неопределено Тогда
			СтруктураУчетнойПолитики = ОрганизацииФормыВызовСервера.ПараметрыСистемыНалогообложенияПоОрганизации(ОрганизацияСсылка);
		КонецЕсли;
		
		Если СтруктураУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок 
			И СтруктураУчетнойПолитики.ПрименяетсяУСНПатент = Истина Тогда
			
			СтруктураУчетнойПолитики = РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(ВидОрганизации, "УпрощеннаяДоходы", Ложь);
			
			СистемаНалогообложенияПредставление = ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(СтруктураУчетнойПолитики);
			
		КонецЕслИ;
	КонецЕсли;
	
	Объект.КонтактнаяИнформация.Очистить();
	
	ИнициализироватьФорму();
	
	ПрочитатьКонтактнуюИнформацию(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьРеквизитыНаСервере(АдресРеквизитовОрганизации)
	
	Реквизиты = ПолучитьИзВременногоХранилища(АдресРеквизитовОрганизации);
	ЗаполнитьПоРеквизитамНаСервере(Реквизиты);
	УдалитьИзВременногоХранилища(АдресРеквизитовОрганизации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо, Знач Ссылка)
	
	ДанныеЗаполнения = Новый Структура("ОписаниеОшибки", "");
	
	ИННОбъекта = СокрП(ИННОбъекта);
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			СведенияОбОрганизации = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИННОбъекта);
			Если ЗначениеЗаполнено(СведенияОбОрганизации.ЕГРЮЛ) Тогда
				РеквизитыОрганизации = СведенияОбОрганизации.ЕГРЮЛ;
			Иначе
				РеквизитыОрганизации = Новый Структура;
				ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
				РеквизитыОрганизации.Вставить("ОписаниеОшибки", СтрШаблон(ШаблонОписанияОшибки, ИННОбъекта));
			КонецЕсли;
			РеквизитыОрганизации.Вставить("ИНН", ИННОбъекта);
			Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
				Если ЗначениеЗаполнено(РеквизитыОрганизации.Руководители) Тогда
					ЗаполнитьЗначенияСвойств(Руководитель, РеквизитыОрганизации.Руководители[0]);
				Иначе
					Руководитель = Неопределено;
				КонецЕсли;
				РеквизитыОрганизации.Вставить("Руководитель", Руководитель);
				РеквизитыОрганизации.Вставить("КодОКВЭД",
					?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности), РеквизитыОрганизации.ВидДеятельности.Код, Неопределено));
				РеквизитыОрганизации.Вставить("ЭтоОКВЭД2",  
					?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности) И РеквизитыОрганизации.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
			КонецЕсли;
		Иначе
			РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
			РеквизитыОрганизации.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности), РеквизитыОрганизации.ВидДеятельности.Код, Неопределено));
			РеквизитыОрганизации.Вставить("ЭтоОКВЭД2",  
				?(ЗначениеЗаполнено(РеквизитыОрганизации.ВидДеятельности) И РеквизитыОрганизации.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
		
		РеквизитыОрганизации.Вставить("ЮридическоеФизическоеЛицо", 
			?(РезультатПроверки.ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
		
		Если ЗначениеЗаполнено(РеквизитыОрганизации.ОписаниеОшибки) Тогда
			
			ДанныеЗаполнения.ОписаниеОшибки = РеквизитыОрганизации.ОписаниеОшибки;
			
		ИначеЕсли РезультатПроверки.ЭтоЮрЛицо <> ЭтоЮрЛицо И ЕстьДокументыПоОрганизации(Ссылка) Тогда
			
			ДанныеЗаполнения.ОписаниеОшибки = НСтр("ru = 'Невозможно заполнить по ИНН. Существуют документы по организации.'");
			
		Иначе
			
			ДанныеЗаполнения.Вставить("НаименованиеОрганизации", РеквизитыОрганизации.Наименование);
			ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", РеквизитыОрганизации.ЮридическоеФизическоеЛицо);
			ДанныеЗаполнения.Вставить("АдресРеквизитовОрганизации", ПоместитьВоВременноеХранилище(РеквизитыОрганизации, Новый УникальныйИдентификатор));
			
		КонецЕсли;
		
	Иначе
		
		ДанныеЗаполнения.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоРеквизитамНаСервере(Реквизиты)
	
	Если НЕ Объект.ЮридическоеФизическоеЛицо = Реквизиты.ЮридическоеФизическоеЛицо Тогда
		Объект.ЮридическоеФизическоеЛицо = Реквизиты.ЮридическоеФизическоеЛицо;
		ПриИзмененииВидаОрганизации();
	КонецЕсли;
	
	Объект.ИНН = Реквизиты.ИНН;
	
	ПроверитьСоответствиеТребованиямИНН(ЭтотОбъект);
	
	Объект.Наименование            = Реквизиты.Наименование;
	Объект.НаименованиеПолное      = Реквизиты.НаименованиеПолное;
	Объект.НаименованиеСокращенное = Реквизиты.НаименованиеСокращенное;
	
	ПослеИзмененияСокращенногоНаименования();
	
	ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюНаименований(Объект, Реквизиты);
	
	СвязанныеДанные = Новый Структура();
	
	Если Реквизиты.Свойство("КодОКВЭД") И ЗначениеЗаполнено(Реквизиты.КодОКВЭД) Тогда
		Если Реквизиты.ЭтоОКВЭД2 Тогда
			Объект.КодОКВЭД2 = Реквизиты.КодОКВЭД;
			ОрганизацииФормыДляОтчетностиКлиентСервер.ИзменениеКодаОКВЭД2(ЭтотОбъект);
		Иначе
			Объект.КодОКВЭД = Реквизиты.КодОКВЭД;
			Объект.НаименованиеОКВЭД = НаименованиеОКВЭД(Реквизиты.КодОКВЭД);;
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизиты.Свойство("ПравоваяФорма") Тогда
		
		КодыСтатистики = Справочники.Организации.КодыСтатистикиПоОрганизационноПравовойФорме(Реквизиты.ПравоваяФорма);
		ЗаполнитьЗначенияСвойств(Объект, КодыСтатистики);
		
	КонецЕсли;
	
	// Контактная информация
	
	Если Реквизиты.Свойство("ЮридическийАдрес")
		И ЗначениеЗаполнено(Реквизиты.ЮридическийАдрес) Тогда
		
		ПредставлениеАдреса = Реквизиты.ЮридическийАдрес.Представление;
		ЗначениеАдресаJSON = Реквизиты.ЮридическийАдрес.КонтактнаяИнформация;
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресОрганизации", ПредставлениеАдреса, ЗначениеАдресаJSON);
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресОрганизации", ПредставлениеАдреса, ЗначениеАдресаJSON);
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресОрганизации", ПредставлениеАдреса, ЗначениеАдресаJSON);
		
		УстановитьКодРосстатаПоАдресу(ЗначениеАдресаJSON);
		
		ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюАдресов(Объект, Реквизиты);
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("Телефон")
		И ЗначениеЗаполнено(Реквизиты.Телефон) Тогда
		
		ПредставлениеТелефона = Реквизиты.Телефон.Представление;
		ЗначениеJSON = Реквизиты.Телефон.КонтактнаяИнформация;
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеТелефонОрганизации", ПредставлениеТелефона, ЗначениеJSON);
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("Руководитель")
		И ЗначениеЗаполнено(Реквизиты.Руководитель) Тогда
		
		ФамилияИмяОтчество = СтрШаблон(НСтр("ru = '%1 %2 %3'"),

				Реквизиты.Руководитель.Фамилия, Реквизиты.Руководитель.Имя, Реквизиты.Руководитель.Отчество);
		Руководитель = НаименованиеОтветственногоЛица(ФамилияИмяОтчество, Реквизиты.Руководитель.Должность);
		ЗаполнитьФизЛицоДолжностьРуководителя(Реквизиты.Руководитель);
		
	КонецЕсли;
	
	ЗаполнитьРегистрационныеДанныеОрганизации(Объект, Реквизиты);
	
	Если ЭтоФизЛицо Тогда
		
		Объект.ФамилияИП  = Реквизиты.Фамилия;
		Объект.ИмяИП      = Реквизиты.Имя;
		Объект.ОтчествоИП = Реквизиты.Отчество;
		
		ИПИспользуетТрудНаемныхРаботников = ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС)
			ИЛИ ЗначениеЗаполнено(Объект.КодПодчиненностиФСС) 
			ИЛИ ЗначениеЗаполнено(Объект.НаименованиеТерриториальногоОрганаФСС);
			
	КонецЕсли;
	
	ПодготовитьЭлементыСКартинкамиЛоготипаИФаксимиле();
	
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущийТекстНомераСчета = СтрЗаменить(Текст, " ", "");
	Если Не БанковскиеПравила.ЭтоРублевыйСчет(ТекущийТекстНомераСчета) Тогда
		ВидимостьЭлементовДиректБанк = "НеПоказывать";
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПодсказкуНомераСчета", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(ВыбранноеЗначение);
	ВыбранноеЗначение = РеквизитыБанка.Ссылка;
	
	ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
	Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		БИКБанка = "";
		НаименованиеБанка = "";
		ДеятельностьБанкаПрекращена = Ложь;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		Элементы.ПодсказкаНомерСчета.Гиперссылка = Ложь;
		БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
			БанковскийСчет, ЭтаФорма, БИКБанка, ЦветВыделенияНекорректногоЗначение, Истина);
	КонецЕсли;
	
	ОбновитьВидимостьЭлементовДиректБанк();
	ПоказатьЭлементыДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПодсказкуНомераСчета()
	
	Элементы.ПодсказкаНомерСчета.Гиперссылка = Ложь;
	Если Не БанковскиеПравила.ПроверитьДлинуНомераСчета(ТекущийТекстНомераСчета) Тогда
		ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиент.ПодсказкаВводаПоляНомерСчета(ТекущийТекстНомераСчета, БИКБанка);
	Иначе
		ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
			ТекущийТекстНомераСчета, БИКБанка, Истина, ЦветВыделенияНекорректногоЗначение);
	КонецЕсли;
	ПоказатьЭлементыДиректБанк(ЭтотОбъект, ТекущийТекстНомераСчета);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБЗКБ

&НаКлиенте
Процедура ВидеоурокЗаполнениеРеквизитов(Команда)
	
	НачалоРаботыКлиент.ВидеоурокЗаполнениеРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПолучателяПриИзменении(Элемент)
	
	НаименованиеТОГС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.НаименованиеТОГС(Объект.КодОрганаФСГС);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКодОрганаФСГСПолучателя(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.КодОрганаФСГС = ВыбранноеЗначение.КодТОГС;
		НаименованиеТОГС     = ВыбранноеЗначение.НаименованиеТОГС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыБанкаНаФорме(Форма, РеквизитыБанка)
	
	Если ЗначениеЗаполнено(РеквизитыБанка.Ссылка) Тогда
		
		Форма.БИКБанка = РеквизитыБанка.Код;
		Форма.НаименованиеБанка = РеквизитыБанка.Наименование;
		Форма.ДеятельностьБанкаПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьЭлементыСКартинкамиЛоготипаИФаксимиле()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивИменКартинок = Новый Массив;
	МассивИменКартинок.Добавить("Логотип");
	МассивИменКартинок.Добавить("Печать");
	МассивИменКартинок.Добавить("ФаксимильнаяПечать");
	МассивИменКартинок.Добавить("ПодписьРуководителя");
	МассивИменКартинок.Добавить("ПодписьГлавногоБухгалтера");
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("ЗагрузитьОчистить");
	МассивИменЭлементов.Добавить("ЗагрузитьКартинку");
	МассивИменЭлементов.Добавить("ВыбратьИзПрисоединенныхФайлов");
	МассивИменЭлементов.Добавить("Очистить");
	
	Для Каждого ИмяКартинки Из МассивИменКартинок Цикл
		
		ИмяФайла          = "Файл" + ИмяКартинки;
		ИмяАдресаКартинки = "Адрес" + ИмяКартинки;
		
		Если ИмяКартинки = "ПодписьРуководителя" Тогда
			ТекущийФайл = УправлениеПечатьюБП.ПрисоединенныйФайлФаксимилеФизическогоЛица(РуководительФизЛицо);
			Если ЭтоФизЛицо Тогда
				ТекущийФайл = УправлениеПечатьюБП.ПрисоединенныйФайлФаксимилеФизическогоЛица(Объект.ИндивидуальныйПредприниматель);
				МожноРедактироватьФайлыКартинки = МожноРедактироватьФайлы
			Иначе
				ТекущийФайл = УправлениеПечатьюБП.ПрисоединенныйФайлФаксимилеФизическогоЛица(РуководительФизЛицо);
				МожноРедактироватьФайлыКартинки = МожноРедактироватьФайлы И ЗначениеЗаполнено(РуководительФизЛицо);
			КонецЕсли;
		ИначеЕсли ИмяКартинки = "ПодписьГлавногоБухгалтера" Тогда
			ТекущийФайл = УправлениеПечатьюБП.ПрисоединенныйФайлФаксимилеФизическогоЛица(ГлавныйБухгалтерФизЛицо);
			МожноРедактироватьФайлыКартинки = МожноРедактироватьФайлы И ЗначениеЗаполнено(ГлавныйБухгалтерФизЛицо);
		Иначе
			ТекущийФайл = Объект[ИмяФайла];
			МожноРедактироватьФайлыКартинки = МожноРедактироватьФайлы;
		КонецЕсли;
		
		Если НЕ ТекущийФайл.Пустая() Тогда
			Попытка
				ЭтотОбъект[ИмяАдресаКартинки] = РаботаСФайлами.ДанныеФайла(ТекущийФайл, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
				ЭтотОбъект[ИмяФайла]          = ТекущийФайл;
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Организация'"), УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Организации, Объект.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка получения картинки для ""%1"". Подробности в журнале регистрации.'"),
						ЗаголовокРеквизитаКартинки(ИмяАдресаКартинки)),
					Объект.Ссылка);
				Элементы[ИмяАдресаКартинки].ТекстНевыбраннойКартинки = НСтр("ru = 'Ошибка получения файла'");
			КонецПопытки;
		Конецесли;
		Для Каждого ИмяЭлемента Из МассивИменЭлементов Цикл
			Элементы[ИмяЭлемента + ИмяКартинки].Доступность = МожноРедактироватьФайлыКартинки;
		КонецЦикла;
		
		Элементы[ИмяАдресаКартинки].ТолькоПросмотр = НЕ МожноРедактироватьФайлыКартинки;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловПечать(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("Печать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуПечать(Команда)
	
	ЗагрузитьКартинку("Печать");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПечать(Команда)
	
	ОчиститьКартинку("Печать");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловПодписьРуководителя(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("ПодписьРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуПодписьРуководителя(Команда)
	
	ЗагрузитьКартинку("ПодписьРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодписьРуководителя(Команда)
	
	ОчиститьКартинку("ПодписьРуководителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзПрисоединенныхФайловПодписьГлавногоБухгалтера(Команда)
	
	ВыбратьКартинкуИзПрисоединенныхФайлов("ПодписьГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинкуПодписьГлавногоБухгалтера(Команда)
	
	ЗагрузитьКартинку("ПодписьГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПодписьГлавногоБухгалтера(Команда)
	
	ОчиститьКартинку("ПодписьГлавногоБухгалтера");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьКартинку(ИмяКартинки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект["Адрес" + ИмяКартинки]) Тогда
		ЗагрузитьКартинку(ИмяКартинки);
	Иначе
		ОчиститьКартинку(ИмяКартинки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКартинку(ИмяЭлементаСКартинкой)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыбираемаяКартинка = ИмяЭлементаСКартинкой;
	
	Если ИмяЭлементаСКартинкой = "Печать"
		ИЛИ ИмяЭлементаСКартинкой = "ПодписьРуководителя"
		ИЛИ ИмяЭлементаСКартинкой = "ПодписьГлавногоБухгалтера" Тогда
		
		Фильтр = НСтр("ru = 'Формат PNG(*.png*)|*.png'");
		
	Иначе
	
		Фильтр = НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
			+ "|Все файлы(*.*)|*.*"
			+ "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
			+ "|Формат GIF(*.gif*)|*.gif"
			+ "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
			+ "|Формат PNG(*.png*)|*.png"
			+ "|Формат TIFF(*.tif)|*.tif"
			+ "|Формат icon(*.ico)|*.ico"
			+ "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
	
	КонецЕсли;
	
	Если ИмяЭлементаСКартинкой = "ПодписьРуководителя" Тогда
		Если ЭтоФизЛицо Тогда
			ВладелецКартинки = Объект.ИндивидуальныйПредприниматель;
		Иначе
			ВладелецКартинки = РуководительФизЛицо;
		КонецЕсли;
	ИначеЕсли ИмяЭлементаСКартинкой = "ПодписьГлавногоБухгалтера" Тогда
		ВладелецКартинки = ГлавныйБухгалтерФизЛицо;
	Иначе
		ВладелецКартинки = Объект.Ссылка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВладелецКартинки)
		ИЛИ ВладелецКартинки = Объект.Ссылка Тогда
		РаботаСФайламиКлиент.ДобавитьФайлы(ВладелецКартинки, УникальныйИдентификатор, Фильтр);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьРазмерКартинки(ДанныеКартинки)
	
	УправлениеПечатьюБП.ДопустимыйРазмерКартинки(ДанныеКартинки.Размер, ДанныеКартинки.ИмяФайла, ДанныеКартинки.Владелец, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьПечатьНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("Печать", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьПодписьРуководителяНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("ПодписьРуководителя", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОчиститьПодписьГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	
	ЗагрузитьОчиститьКартинку("ПодписьГлавногоБухгалтера", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКартинку(ИмяЭлементаСКартинкой)

	Модифицированность = Истина;
	
	ИмяФайла = "Файл" + ИмяЭлементаСКартинкой;
	ИмяАдресаКартинки = "Адрес" + ИмяЭлементаСКартинкой;
	ЭтотОбъект[ИмяФайла] = Неопределено;
	
	УстановитьКартинкуНаФорме(ЭтотОбъект[ИмяАдресаКартинки], ЭтотОбъект[ИмяФайла]);
	Если РуководительФизЛицо = ГлавныйБухгалтерФизЛицо Тогда
		Если ИмяЭлементаСКартинкой = "ПодписьРуководителя" Тогда
			ИмяЭлементаСКартинкой = "ПодписьГлавногоБухгалтера";
		ИначеЕсли ИмяЭлементаСКартинкой = "ПодписьГлавногоБухгалтера" Тогда
			ИмяЭлементаСКартинкой = "ПодписьРуководителя";
		Иначе
			ИмяЭлементаСКартинкой = Неопределено;
		КонецЕсли;
		Если ИмяЭлементаСКартинкой <> Неопределено Тогда
			ИмяФайла = "Файл" + ИмяЭлементаСКартинкой;
			ИмяАдресаКартинки = "Адрес" + ИмяЭлементаСКартинкой;
			ЭтотОбъект[ИмяФайла] = Неопределено;
			УстановитьКартинкуНаФорме(ЭтотОбъект[ИмяАдресаКартинки], ЭтотОбъект[ИмяФайла]);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЛоготипНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "Логотип");
КонецПроцедуры

&НаКлиенте
Процедура АдресПечатьНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "Печать");
КонецПроцедуры

&НаКлиенте
Процедура АдресПодписьРуководителяНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ПодписьРуководителя");
КонецПроцедуры

&НаКлиенте
Процедура АдресФаксимильнаяПечатьНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ФаксимильнаяПечать");
КонецПроцедуры

&НаКлиенте
Процедура АдресПодписьГлавногоБухгалтераНажатие(Элемент, СтандартнаяОбработка)
	ОбработатьНажатиеКартинки(СтандартнаяОбработка, "ПодписьГлавногоБухгалтера");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстРекламыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПодключитьДиректБанк" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПомощник = Истина;
		Если Модифицированность Тогда
			
			ОткрытьПомощник = Записать();
			
		КонецЕсли;
		Если ОткрытьПомощник Тогда
			
			ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
				Объект.Ссылка, БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
				
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодсказкаНомерСчетаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПомощник = Истина;
	Если Модифицированность Тогда
		
		ОткрытьПомощник = Записать();
		
	КонецЕсли;
	Если ОткрытьПомощник Тогда
		
		ОбменСБанкамиКлиент.ОткрытьСоздатьНастройкуОбмена(
			Объект.Ссылка, БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСкрытьРекламуДиректБанкНажатие(Элемент)
	
	ЭлектронноеВзаимодействиеБПВызовСервера.СохранитьНастройкуВидимостиРекламыДиректБанк(БанковскийСчет.Банк, Ложь);
	ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
	ПоказатьЭлементыДиректБанк(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьЭлементыДиректБанк(Форма, ТекущийТекстНомераСчета = "")
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	ВидимостьБаннера     = Ложь;
	ВидимостьГиперссылки = Ложь;
	Если (ЗначениеЗаполнено(Форма.БанковскийСчет.НомерСчета) ИЛИ ЗначениеЗаполнено(ТекущийТекстНомераСчета))
		И (СтрДлина(Форма.ПодсказкаНомерСчета) = 0 // номер счета корректен
		ИЛИ Элементы.ПодсказкаНомерСчета.Гиперссылка) Тогда
		
		ВидимостьБаннера     = Форма.ВидимостьЭлементовДиректБанк = "ПоказатьБаннер";
		ВидимостьГиперссылки = Форма.ВидимостьЭлементовДиректБанк = "ПоказатьГиперссылку";
		
	КонецЕсли;
	
	Если Элементы.ГруппаРекламаДиректБанк.Видимость <> ВидимостьБаннера Тогда
		
		Элементы.ГруппаРекламаДиректБанк.Видимость = ВидимостьБаннера;
		
		// При изменении видимости элементов в веб-клиенте происходит сброс данных редактируемого поля
		Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И ЗначениеЗаполнено(ТекущийТекстНомераСчета) Тогда
			Форма.БанковскийСчет.НомерСчета = ТекущийТекстНомераСчета;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьГиперссылки Тогда
		
		Элементы.ПодсказкаНомерСчета.Гиперссылка = Истина;
		ТекстГиперссылки = НСтр("ru = 'Подключить 1С:ДиректБанк'");
		Форма.ПодсказкаНомерСчета = Новый ФорматированнаяСтрока(
			ТекстГиперссылки,, Форма.ЦветГиперссылки,, "ДиректБанкПомощникПодключения");
		
	ИначеЕсли Элементы.ПодсказкаНомерСчета.Гиперссылка Тогда
		
		Элементы.ПодсказкаНомерСчета.Гиперссылка = Ложь;
		Форма.ПодсказкаНомерСчета = Новый ФорматированнаяСтрока("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиентБП.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


&НаСервере
Функция ЗначениеJSONКонтактнойИнформации(ИмяЭлемента)
	
	ДанныеСтроки = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(
		ЭтотОбъект, ИмяЭлемента);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Возврат ДанныеСтроки.Значение;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРегистрационныеДанныеОрганизацииНаСервере()
	
	ДанныеЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(Объект.ИНН, НЕ ЭтоФизЛицо, Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ОписаниеОшибки) Тогда
		Реквизиты = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресРеквизитовОрганизации);
		ЗаполнитьРегистрационныеДанныеОрганизации(Объект, Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрационныеДанныеОрганизации(Объект, Реквизиты)
	
	Реквизиты.Свойство("КПП", Объект.КПП);
	
	Объект.ОГРН            = Реквизиты.РегистрационныйНомер;
	Объект.ДатаРегистрации = Реквизиты.ДатаРегистрации;
	
	// Определяем юридический адрес
	ЮридическийАдресЗначениеJSON = ЗначениеJSONКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресОрганизации");
	
	//Устанавливаем сведения о налоговой инспекции
	//В том случае, если указан юридический адрес, получаем код налоговой инспекции по адресу
	//и заполняем реквизиты инспеции по коду
	//В том случае, если юридического адреса нет - заполняем данные о налоговой инспекции
	//из кода в ЕГРЮЛ/ЕГРИП
	Если ЗначениеЗаполнено(ЮридическийАдресЗначениеJSON) Тогда
		ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(ЮридическийАдресЗначениеJSON);
		Если НЕ ЗначениеЗаполнено(Объект.КодНалоговогоОргана)
			И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане)
			И ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане.Код) Тогда
			
			Объект.КодНалоговогоОргана = Реквизиты.РегистрацияВНалоговомОргане.Код;
			УстановитьРегистрациюВНалоговомОргане();
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.РегистрацияВНалоговомОргане) Тогда
		
		Объект.КодНалоговогоОргана = Реквизиты.РегистрацияВНалоговомОргане.Код;
		
		УстановитьРегистрациюВНалоговомОргане();
		
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("РегистрацияВПенсионномФонде")
		И ЗначениеЗаполнено(Реквизиты.РегистрацияВПенсионномФонде) Тогда
		Объект.КодОрганаПФР = Реквизиты.РегистрацияВПенсионномФонде.КодОрганаПФР;
		Объект.НаименованиеТерриториальногоОрганаПФР = Реквизиты.РегистрацияВПенсионномФонде.НаименованиеОрганаПФР;
		Если ЭтоФизЛицо Тогда
			Объект.ИПРегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;	
		Иначе
			Объект.РегистрационныйНомерПФР = Реквизиты.РегистрацияВПенсионномФонде.РегистрационныйНомерПФР;
			ИсторияРегистрацийВОрганеПФР.РегистрационныйНомерПФР = Объект.РегистрационныйНомерПФР;
		КонецЕсли;
		
		ЗаполнитьСведенияОбОтделенииПФР();
		
	КонецЕсли;
	
	Если Реквизиты.Свойство("РегистрацияВФСС")
		И ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС) Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.РегистрацияВФСС.КодПодчиненности) Тогда
			СимволПричиныРегистрации = ?(Объект.ОбособленноеПодразделение, "2", ?(ЭтоФизЛицо, "3", "1"));
			Объект.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодОрганаФСС + СимволПричиныРегистрации;
		Иначе
			Объект.КодПодчиненностиФСС = Реквизиты.РегистрацияВФСС.КодПодчиненности;
		КонецЕсли;
		Объект.НаименованиеТерриториальногоОрганаФСС = Реквизиты.РегистрацияВФСС.НаименованиеОрганаФСС;
		Объект.РегистрационныйНомерФСС = Реквизиты.РегистрацияВФСС.РегистрационныйНомерФСС;
		
		ЗаполнитьСведенияОбОтделенииФСС();
		
	КонецЕсли;
	
	Если ЭтоФизЛицо Тогда
		
		Если Реквизиты.Свойство("СвидетельствоОРегистрации")
			И ЗначениеЗаполнено(Реквизиты.СвидетельствоОРегистрации) Тогда
			
			Объект.СвидетельствоСерияНомер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 №%2'"), 
									Реквизиты.СвидетельствоОРегистрации.Серия, Реквизиты.СвидетельствоОРегистрации.Номер);
			Объект.СвидетельствоДатаВыдачи = Реквизиты.СвидетельствоОРегистрации.Дата;
			
		КонецЕсли;
		
		Объект.НаименованиеРегистрирующегоОргана = "";
		
	Иначе // Это юридическое лицо.
		
		Если Реквизиты.Свойство("РегистрирующийОрган")
			И ТипЗнч(Реквизиты.РегистрирующийОрган) = Тип("Структура")
			И Реквизиты.РегистрирующийОрган.Свойство("Наименование") Тогда
			Объект.НаименованиеРегистрирующегоОргана = Реквизиты.РегистрирующийОрган.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ВнесениеИзмененийЕГР

&НаКлиенте
Процедура Подключаемый_ПроверитьРегистрациюИзмененийВЕГР()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПроверитьРегистрациюИзмененийВЕГРНаСервере(Объект.Ссылка, УникальныйИдентификатор);
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуПроверкиРегистрацииИзмененийВЕГР(ДлительнаяОперация);
	Иначе
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("Подключаемый_ПослеПроверкиРегистрацииИзмененийВЕГР", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьРегистрациюИзмененийВЕГРНаСервере(Организация, ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Внесение изменений в ЕГР: Подготовка данных для обновления реквизитов организации'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ПодготовитьДанныеДляЗавершенияРегистрацииИзмененийЕГРВФоне",
		Организация,
		ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеПроверкиРегистрацииИзмененийВЕГР(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуПроверкиРегистрацииИзмененийВЕГР(ДлительнаяОперация);
	Иначе
		ОжиданиеОтвета = Ложь;
		ПослеПроверкиРегистрацииИзмененийВЕГРНаСервере(ДлительнаяОперация.АдресРезультата, ОжиданиеОтвета);
		Если ОжиданиеОтвета Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьРегистрациюИзмененийВЕГР", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеПроверкиРегистрацииИзмененийВЕГРНаСервере(АдресРезультата, ОжиданиеОтвета)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОжиданиеОтвета = Результат.ОжиданиеОтвета;
	Если ОжиданиеОтвета Тогда
		Возврат;
	КонецЕсли;
	
	// Если нет сохраненных данных помощника, то не предлагаем обновить реквизиты.
	Если Не ЗначениеЗаполнено(Результат.ДанныеПомощникаЗаполнения) Тогда
		ЕГРНужноОбновитьРеквизитыОрганизации = Ложь;
		ЕГРВнесениеИзмененийНеЗавершено = Ложь;
		Возврат;
	КонецЕсли;
	
	ЕГРПроверкаРегистрацииИзмененийВыполнена = Истина;
	
	ЕГРИзмененияДобавленыВРеестр = Результат.ИзмененияВнесеныВЕГР;
	ЕГРАдресДанныхПомощника = ПоместитьВоВременноеХранилище(Результат.ДанныеПомощникаЗаполнения, УникальныйИдентификатор);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуПроверкиРегистрацииИзмененийВЕГР(ДлительнаяОперация)
	
	Текст = НСтр("ru = 'Ошибка при проверке регистрации изменений в ЕГР:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыВПрограммеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Дата") Тогда
		Возврат;
	КонецЕсли;
	
	ЕГРДатаРегистрацииИзменений = Результат;
	ОбновитьРеквизитыВПрограммеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыВПрограммеНаСервере()
	
	Перем Изменено;
	
	Если Не ЭтоАдресВременногоХранилища(ЕГРАдресДанныхПомощника) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомощникаЗаполнения = ПолучитьИзВременногоХранилища(ЕГРАдресДанныхПомощника);
	
	Если ТипЗнч(ДанныеПомощникаЗаполнения) <> Тип("Структура") Или ДанныеПомощникаЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеПомощникаЗаполнения.Свойство("Изменено", Изменено) Тогда
		Возврат;
	КонецЕсли;
	
	// Сохраним историю наименования
	Если Изменено.СокращенноеНаименование Или Изменено.ПолноеНаименование Тогда
		ИсторияНаименований = Объект.ИсторияНаименований.Выгрузить();
		Если ИсторияНаименований.Количество() = 0 Тогда
			// Нет истории, нужно сохранить старое наименование.
			НоваяСтрока = ИсторияНаименований.Добавить();
			НоваяСтрока.НаименованиеСокращенное = Объект.НаименованиеСокращенное;
			НоваяСтрока.НаименованиеПолное = Объект.НаименованиеПолное;
		КонецЕсли;
		
		// Добавляем в историю новое наименование.
		НоваяСтрока = ИсторияНаименований.Добавить();
		НоваяСтрока.Период = ЕГРДатаРегистрацииИзменений;
		НоваяСтрока.НаименованиеСокращенное = ?(ДанныеПомощникаЗаполнения.Свойство("НаименованиеСокращенноеНовое"),
			ДанныеПомощникаЗаполнения.НаименованиеСокращенноеНовое, Объект.НаименованиеСокращенное);
		НоваяСтрока.НаименованиеПолное = ?(ДанныеПомощникаЗаполнения.Свойство("НаименованиеПолноеНовое"),
			ДанныеПомощникаЗаполнения.НаименованиеПолноеНовое, Объект.НаименованиеПолное);
		
		УстановитьНаименованиеПослеРедактированияИстории(ИсторияНаименований);
	КонецЕсли;
	
	Если Изменено.ЮридическийАдрес Или Изменено.Местоположение Тогда
		Если Объект.ИсторияКонтактнойИнформации.Количество() = 0 Тогда
			// Нет истории, нужно сохранить старый адрес.
			ДобавитьИсториюИзмененияЮридическогоАдреса(Дата(1, 1, 1));
		КонецЕсли;
		
		НовыйАдресПредставление = ДанныеПомощникаЗаполнения.ЮридическийАдресНовый;
		НовыйАдресЗначениеJSON = ДанныеПомощникаЗаполнения.ЮридическийАдресНовыйЗначениеJSON;
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресОрганизации", НовыйАдресПредставление, НовыйАдресЗначениеJSON);
		
		ДобавитьИсториюИзмененияЮридическогоАдреса(ЕГРДатаРегистрацииИзменений);
		
		УстановитьКодРосстатаПоАдресу(НовыйАдресЗначениеJSON);
		
		// Если изменилось местоположение, то нужно добавить запись в историю регистраций в налоговом органе.
		Если Изменено.Местоположение Тогда
			НоваяИнспекция = ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Добавить();
			НоваяИнспекция.Период = ЕГРДатаРегистрацииИзменений;
			
			ЗаполнитьСведенияОНалоговойИнспекцииПоАдресу(НовыйАдресЗначениеJSON);
		КонецЕсли;
	КонецЕсли;
	
	Если Изменено.Руководитель Тогда
		РуководительФизЛицо = ДанныеПомощникаЗаполнения.ДанныеНовогоРуководителя.Ссылка;
		РуководительДолжность = ДанныеПомощникаЗаполнения.ДанныеОДолжностиНовогоРуководителя.Должность;
		РуководительСрокПолномочий = ДанныеПомощникаЗаполнения.ДанныеОДолжностиНовогоРуководителя.СрокПолномочий;
		
		ЗначенияКлюча = Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
		ЗаполнитьЗначенияСвойств(ЗначенияКлюча, РуководительКлючЗаписи);
		ЗначенияКлюча.Период = ЕГРДатаРегистрацииИзменений;
		РуководительКлючЗаписи = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(ЗначенияКлюча);
		
		ИзмененРуководитель = Истина;
		
		Руководитель = НаименованиеОтветственногоЛица(РуководительФизЛицо, РуководительДолжность);
		ПодписиУстановитьЗаголовок(ЭтотОбъект);
	КонецЕсли;
	
	Если Изменено.ОсновнойВидДеятельности Тогда
		Объект.КодОКВЭД2 = ДанныеПомощникаЗаполнения.КодОКВЭД2Новый;
		ОрганизацииФормыДляОтчетностиКлиентСервер.ИзменениеКодаОКВЭД2(ЭтотОбъект);
	КонецЕсли;
	
	Если Изменено.ВидыДеятельности Тогда
		Объект.ДополнительныеКодыОКВЭД2 = ДанныеПомощникаЗаполнения.ДополнительныеКодыОКВЭД2Новые;
	КонецЕсли;
	
	ЕГРЗавершитьВнесениеИзмененийПриЗаписи = Истина;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИсториюИзмененияЮридическогоАдреса(Период)
	
	Отбор  = Новый Структура("ИмяРеквизита", "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Представление = ДанныеСтроки.Представление;
		ЗначениеJSON = ДанныеСтроки.Значение;
		
	КонецЕсли;
	
	НоваяСтрока = Объект.ИсторияКонтактнойИнформации.Добавить();
	НоваяСтрока.Период = Период;
	НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	НоваяСтрока.Представление = Представление;
	НоваяСтрока.Значение = ЗначениеJSON;
	
	Объект.ИсторияКонтактнойИнформации.Сортировать("Период");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЭДО

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеРегистрирующегоОргана(Знач АдресВременногоХранилища)
	
	НаименованиеРегистрирующегоОргана = "";
	
	Реквизиты = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если Реквизиты.Свойство("РегистрирующийОрган") И Реквизиты.РегистрирующийОрган.Свойство("Наименование") Тогда
		НаименованиеРегистрирующегоОргана = Реквизиты.РегистрирующийОрган.Наименование;
	КонецЕсли;
	
	Возврат НаименованиеРегистрирующегоОргана;	
	
КонецФункции

#КонецОбласти

ЗаполнятьРеквизитыПоИНН = Истина;
РассылкаОповещенияИзТекущейФормы = Ложь;
