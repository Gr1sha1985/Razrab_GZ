#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СрокОплатыПокупателей = Константы.СрокОплатыПокупателей.Получить();
	СрокОплатыПоставщикам = Константы.СрокОплатыПоставщикам.Получить();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ДоговорСРезидентомТаможенногоСоюза = УчетНДС.КонтрагентРезидентТаможенногоСоюза(Объект.Владелец);
	
	Параметры.Свойство("СозданИзФормыДокумента", СозданИзФормыДокумента);
	
	Если Параметры.Свойство("ОткрытИзПлатежки") Тогда
		Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	КонецЕсли;
	
	Если Параметры.ПараметрыВыбора.Свойство("Организация") И ЗначениеЗаполнено(Параметры.ПараметрыВыбора.Организация) Тогда
		Параметры.ПараметрыВыбора.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(
			Параметры.ПараметрыВыбора.Организация);
	КонецЕсли;

	Если НЕ Параметры.Ключ.Пустая() Тогда
		Справочники.ДоговорыКонтрагентов.УстановитьДоступныеВидыДоговора(Параметры.ЗначенияЗаполнения);
	КонецЕсли;
	ОграничитьВыборРеквизитов(Параметры.ЗначенияЗаполнения);
	
	ОплатаВРублях = Объект.РасчетыВУсловныхЕдиницах;

	ЗаполнитьСписокСпособовРасчетаКомиссионногоВознаграждения(ЭтотОбъект);
	ЗаполнитьСписокВидовСрокаОплаты();
	
	НаименованиеПоУмолчанию  = ПечатьДоговоровКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов();
	РеквизитыДоговораСтрокой = ПечатьДоговоровКлиентСервер.РеквизитыДоговораСтрокой(Объект.Номер, Объект.Дата);
	Элементы.НаименованиеДляСчетаФактурыНалоговогоАгента.Видимость = ПолучитьФункциональнуюОпцию("ИсполняютсяОбязанностиНалоговогоАгентаПоНДС")
		Или БухгалтерскийУчетПереопределяемый.ИспользуетсяОбратноеНачислениеНДС();
	Элементы.ТипЦен.Видимость = ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры);
	
	РаздельныйУчетНДС = УчетНДСРаздельный.ЕстьУчетнаяПолитикаСРаздельнымУчетомНДС();
	
	ПредусмотреноОбеспечениеОбязательств = ЗначениеЗаполнено(Объект.ВидОбеспеченияОбязательствИПлатежей);
	ОбеспечениеПредоставил = Объект.ОбеспечениеПредоставил;
	ОбеспечениеПолучил     = Объект.ОбеспечениеПолучил;
	ОбеспечениеВыданоЗа    = Объект.ОбеспечениеВыданоЗа;
	УстановитьСпискиЭлементовОбеспеченияОбязательств();
	УстановитьВидСрокаОплаты();
	ЗапомнитьВерсиюДанныхФайлаДоговора();
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормой(ЭтотОбъект);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Справочник.ДоговорыКонтрагентов",
		"ФормаЭлемента",
		НСтр("ru='Новости: Договор'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	// На форме размещены 4 реквизита, чьи представления склоняются по падежам.
	// Основным режимом работы со склонениями Руководитель и ДолжностьРуководителя является их изменение в форме элемента
	// соответствующего справочника. Но возможен переход к их склонениям и из текущей формы.
	// Работа с реквизитами РуководительКонтрагента и ДолжностьРуководителяКонтрагента ведётся с данной форме
	// с использованием подсистемы БСП "СклонениеПредставленийОбъектов". Данные склонений реквизитов хранятся в реквизитах
	// СклоненияРуководительКонтрагента и СклоненияДолжностьРуководителяКонтрагента. Имя реквизита формы, с которым сейчас
	// ведётся работа с использованием подсистемы БСП, хранится в переменной ТекущийРеквизитСклонения. Данные из текущего
	// реквизита синхронизируются с реквизитом формы Склонения, относящимся к подсистеме БСП.
	
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.РуководительКонтрагента); // создание реквизитов формы
	
	Попытка
	
		ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
		Если ЗначениеЗаполнено(Объект.ДолжностьРуководителяКонтрагента) Тогда

			ЭтотОбъект.СклоненияДолжностьРуководителяКонтрагента = ПросклонятьПредставлениеПоВсемПадежам(
				Объект.ДолжностьРуководителяКонтрагента, ПараметрыСклонения);

		Иначе
			ЭтотОбъект.СклоненияДолжностьРуководителяКонтрагента = СклонениеПредставленийОбъектовКлиентСервер.СтруктураСклонения();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.РуководительКонтрагента) Тогда

			Если ЭтотОбъект.Склонения = Неопределено Тогда // не было заполнено при создании реквизитов формы
				
				ПараметрыСклонения.ЭтоФИО = Истина;
				ПараметрыСклонения.Пол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(Объект.ПолРуководителяКонтрагента);
				ЭтотОбъект.СклоненияРуководительКонтрагента = ПросклонятьПредставлениеПоВсемПадежам(
					Объект.РуководительКонтрагента, ПараметрыСклонения);

			Иначе // было заполнено стандартным образом

				ЭтотОбъект.СклоненияРуководительКонтрагента = ЭтотОбъект.Склонения;
				
			КонецЕсли;

		Иначе
			ЭтотОбъект.СклоненияРуководительКонтрагента = СклонениеПредставленийОбъектовКлиентСервер.СтруктураСклонения();
		КонецЕсли;
		
		ТекущийРеквизитСклонения = "СклоненияРуководительКонтрагента";
		ЭтотОбъект.Склонения = ЭтотОбъект[ТекущийРеквизитСклонения];
	
	Исключение
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось произвести склонение ФИО и/или должности руководителя контрагента в договоре: %1 по причине:
			|%2'"),
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Склонение ФИО и/или должности руководителя контрагента'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ДоговорыКонтрагентов,
			Объект.Ссылка,
			ТекстСообщения);
		
	КонецПопытки;
	
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

	НастройкиУчетаМСФО.НастроитьФормуОбъектаУчета(ЭтотОбъект, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ДоговорыКонтрагентов_СозданиеФайлаДоговора" 
		И Параметр.ДоговорКонтрагента = Объект.Ссылка Тогда 
		// Для текущего договора был добавлен присоединенный файл с текстом договора.
		// Сохраним ссылку на него в текущем объекте.
		ОбработкаОповещенияСозданиеФайлаДоговора(Параметр.ФайлДоговора);
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		ОбработкаОповещенияПроверитьИзменениеФайлаДоговора();
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПриЗаписиНаСервереСклоненийРеквизитов(ТекущийОбъект);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ДоговорыКонтрагентов", ПараметрыЗаписи, Объект.Ссылка);
	
	Если СозданИзФормыДокумента Тогда
		ОповеститьОВыборе(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	СформироватьНаименованиеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СформироватьНаименованиеДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда

		ВладелецПриИзмененииНаСервере();
		// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
		ОповещениеОРезультатеСклонения = Новый ОписаниеОповещения(
			"ДолжностьРуководителяКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
		СклонениеПредставленийОбъектовКлиент.НачатьСклонение(
			ЭтотОбъект, Объект.ДолжностьРуководителяКонтрагента, ПараметрыСклонения, Истина, ОповещениеОРезультатеСклонения);

		ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
		ПараметрыСклонения.ЭтоФИО = Истина;
		ПараметрыСклонения.Пол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(Объект.ПолРуководителяКонтрагента);
		ОповещениеОРезультатеСклонения = Новый ОписаниеОповещения(
			"РуководительКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
		СклонениеПредставленийОбъектовКлиент.НачатьСклонение(
			ЭтотОбъект, Объект.РуководительКонтрагента, ПараметрыСклонения, Истина, ОповещениеОРезультатеСклонения);
		// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоговораПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора)
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее")) Тогда
		Объект.ТипЦен = Неопределено;
		Объект.СпособРасчетаКомиссионногоВознаграждения = Неопределено;
		Объект.ПроцентКомиссионногоВознаграждения = 0;
		Объект.УстановленСрокОплаты = Ложь;
		ВидСрокаОплаты = ИмяНеназначенногоСрокаОплаты();
		Объект.СрокОплаты = 0;
		Объект.ДатаОплаты = Дата(1, 1, 1);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора)
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"))
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"))
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"))
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"))
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией")) Тогда
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
		ОплатаВРублях = 0;
	КонецЕсли;
	
	ЭтоДоговорПриобретения = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	
	Если НЕ ЭтоДоговорПриобретения Тогда
		Объект.УчетАгентскогоНДС       = Ложь;
		Объект.НДСПоСтавкам4и2         = Ложь;
		Объект.ВидАгентскогоДоговора   = Неопределено;
		Если Объект.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
			Объект.КодРаздел7ДекларацииНДС   = Неопределено;
			Раздел7ДекларацииНДСНаименование = "";
		КонецЕсли;
	Иначе
		Объект.КодРаздел7ДекларацииНДС   = Неопределено;
		Раздел7ДекларацииНДСНаименование = "";
		Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")
			И Не ИсполняютсяОбязанностиНалоговогоАгентаПоНДС Тогда
			
			Объект.УчетАгентскогоНДС     = Ложь;
			Объект.ВидАгентскогоДоговора = Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.УчетАгентскогоНДС
			И (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом")) Тогда
		Объект.ВидАгентскогоДоговора = ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.Нерезидент");
	КонецЕсли;
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку") Тогда
		Если НЕ УсловиеОплатаВВалютеПередано Тогда
			Объект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией") Тогда
		Объект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ЗаполнитьСписокСпособовРасчетаКомиссионногоВознаграждения(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.СпособРасчетаКомиссионногоВознаграждения) Тогда
		Если Элементы.СпособРасчетаКомиссионногоВознаграждения.СписокВыбора.НайтиПоЗначению(Объект.СпособРасчетаКомиссионногоВознаграждения) = Неопределено Тогда
			Объект.СпособРасчетаКомиссионногоВознаграждения = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
		
		Объект.ПлатежныйАгент = Ложь;
		
		ПлатежныйАгентПриИзменении(Элементы.ПлатежныйАгент);
	КонецЕсли;
	
	ЭтоДоговорКомиссии     = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
		
	Если ЭтоДоговорКомиссии 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидДоговора) Тогда
		Объект.ГосударственныйКонтракт = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку") Тогда
		Объект.СчетаФактурыОтИмениОрганизации = Ложь;
	КонецЕсли;
	
	СпособЗаполненияСтавкиНДСПоУмолчанию();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ВалютаВзаиморасчетовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаВПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Объект.РасчетыВУсловныхЕдиницах = ОплатаВРублях;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСрокаОплатыПриИзменении(Элемент)
	
	Объект.УстановленСрокОплаты = ВидСрокаОплаты <> ИмяНеназначенногоСрокаОплаты();
	Если Объект.УстановленСрокОплаты Тогда
		СтандартныйСрокОплаты = 0;
		Если (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"))
				ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
				ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку")) Тогда
			СтандартныйСрокОплаты = СрокОплатыПокупателей;
		ИначеЕсли (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"))
				ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"))
				ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку")) Тогда
			СтандартныйСрокОплаты = СрокОплатыПоставщикам;
		КонецЕсли;
		Если ВидСрокаОплаты = ИмяСрокаОплатыВДнях() Тогда
			Объект.СрокОплаты = СтандартныйСрокОплаты;
			Объект.ДатаОплаты = Дата(1, 1, 1);
		Иначе
			ДлинаСуток = 86400;
			Объект.ДатаОплаты = ОбщегоНазначенияКлиент.ДатаСеанса() + СтандартныйСрокОплаты * ДлинаСуток;
			Объект.СрокОплаты = 0;
		КонецЕсли;
	Иначе
		Объект.ДатаОплаты = Дата(1, 1, 1);
		Объект.СрокОплаты = 0;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетАгентскогоНДСПриИзменении(Элемент)
	
	Если Объект.УчетАгентскогоНДС Тогда
		Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") 
			ИЛИ ЭтоДоговорИностранца Тогда
			Объект.ВидАгентскогоДоговора = ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.Нерезидент");
		Иначе
			Объект.ВидАгентскогоДоговора = ?(
				ИсполняютсяОбязанностиНалоговогоАгентаПоНДС,
				ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.Аренда"),
				ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров"));
		КонецЕсли;
	Иначе
		Объект.ВидАгентскогоДоговора = Неопределено;
	КонецЕсли;
	
	СпособЗаполненияСтавкиНДСПоУмолчанию();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеУслугиПриИзменении(Элемент)
	
	// Очистим поля связанные с настройкой по налоговому агенту.
	Объект.УчетАгентскогоНДС = Ложь;
	Объект.ВидАгентскогоДоговора = Неопределено;
	Объект.НаименованиеДляСчетаФактурыНаАванс = ""; // используется для счетов-фактур налогового агента
	
	Если ЭлектронныеУслугиИностранца Тогда
		ПорядокУплатыНДСПоЭлектроннымУслугам = 1; // НДС платит иностранец
		Объект.ЭлектронныеУслуги = Истина;
	Иначе
		Объект.ЭлектронныеУслуги = Ложь;
	КонецЕсли;
	
	СпособЗаполненияСтавкиНДСПоУмолчанию();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокУплатыНДСПоЭлектроннымУслугамПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Объект.ЭлектронныеУслуги = ПорядокУплатыНДСПоЭлектроннымУслугам = 1; // НДС платит иностранец
	Если ПорядокУплатыНДСПоЭлектроннымУслугам = 2 Тогда // НДС платит организация как налоговый агент
		Объект.УчетАгентскогоНДС = Истина;
		Объект.ВидАгентскогоДоговора = ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги");
	Иначе
		// Очистим поля связанные с настройкой по налоговому агенту.
		Объект.УчетАгентскогоНДС = Ложь;
		Объект.ВидАгентскогоДоговора = Неопределено;
		Объект.НаименованиеДляСчетаФактурыНаАванс = ""; // используется для счетов-фактур налогового агента
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетАгентскогоНДСПокупателемПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРегистрацииСчетовФактурНаАвансПоДоговоруПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидАгентскогоДоговораПриИзменении(Элемент)
	
	Если Объект.ВидАгентскогоДоговора = 
		ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров") Тогда 
		
		Если Объект.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета
			И НЕ Объект.РасчетыВУсловныхЕдиницах Тогда
			Объект.РасчетыВУсловныхЕдиницах = Истина;
			ОплатаВРублях = 1; 
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетаФактурыОтИмениОрганизацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Список = ПолучитьСписокКонтактныхЛиц(Объект.Владелец);
	
	ОповещениеВыбора = Новый ОписаниеОповещения("РуководительКонтрагентаНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОповещениеВыбора, Список, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура РуководительКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииПредставленияРуководителяКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяКонтрагентаПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ЭтотОбъект[ТекущийРеквизитСклонения] = ЭтотОбъект.Склонения;
	ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = ЭтотОбъект.ИзмененоПредставление;
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ОповещениеОРезультатеСклонения = Новый ОписаниеОповещения(
		"ДолжностьРуководителяКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	СклонениеПредставленийОбъектовКлиент.НачатьСклонение(
		ЭтотОбъект, Объект.ДолжностьРуководителяКонтрагента, ПараметрыСклонения, Истина, ОповещениеОРезультатеСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДоговораОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ФайлДоговора", Объект.ФайлДоговора);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаРедактированияТекстаДоговора", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДоговораСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		// Выполняем запись договора перед открытием формы редактирования файла с текстом договора,
		// аналогично тому как происходит при нажатии на кнопку Печать.
		Записать();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	Если ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		// Открываем существующий файл договора вместо создания нового.
		ПараметрыФормы.Вставить("ФайлДоговора", Объект.ФайлДоговора);
	Иначе
		ПараметрыФормы.Вставить("ОбъектПечати", Объект.Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаРедактированияТекстаДоговора", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЭтоГосударственныйКонтрактПриИзменении(Элемент)
	
	Если НЕ ЭтоГосударственныйКонтракт Тогда
		Объект.ГосударственныйКонтракт = Неопределено;
	КонецЕсли;
	
	Элементы.ГосударственныйКонтракт.Доступность = ЭтоГосударственныйКонтракт;
	
КонецПроцедуры

&НаКлиенте
Процедура ПризнакАгентаПриИзменении(Элемент)
	ОчиститьПризнакиАгента();
	
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныйАгентПриИзменении(Элемент)
	
	ОчиститьПризнакиАгента();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаМСФОПриИзменении(Элемент)
	
	НастройкиУчетаМСФОКлиент.ПриИзмененииПоляФормы(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредусмотреноОбеспечениеОбязательствПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Если НЕ ПредусмотреноОбеспечениеОбязательств Тогда
		Объект.ВидОбеспеченияОбязательствИПлатежей = Неопределено;
		Объект.ОбеспечениеПредоставил              = Неопределено;
		Объект.ОбеспечениеПолучил                  = Неопределено;
		Объект.ОбеспечениеВыданоЗа                 = Неопределено;
		
		ОбеспечениеПредоставил = "";
		ОбеспечениеПолучил     = "";
		ОбеспечениеВыданоЗа    = "";
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеСторонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура("ИмяЭлемента", Элемент.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораКонтрагентаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", , ЭтотОбъект, , , , ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		Объект[Элемент.Имя] = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОплатыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДоговораПриИзменении(Элемент)
	
	ЗапомнитьВерсиюДанныхФайлаДоговора();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	ВалютаРегламентированногоУчета = Форма.ВалютаРегламентированногоУчета;

	ЭтоДоговорКомиссии     = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
		
	ЭтоДоговорСКомиссионером = Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером");
	
	ЭтоДоговорПриобретения = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
		
	ЭтоДоговорРеализации   = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СТранспортнойКомпанией"));;
	
	ЭтоДоговорФакторинга = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией"));
	
	ЭтоДоговорСПоставщиком            = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
	ЭтоДоговорСКомиссионеромНаЗакупку = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку"));
	
	ЭтоПрочийДоговор = Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее");
	
	ЭтоПлательщикНДС = Форма.ЭтоПлательщикНДС;
	
	ВидимостьКомиссионногоВознаграждения = (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"))
		ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку"));
	
	//Группа "Расчеты"
	
	Элементы.ОплатаВРублях.Видимость = (ЭтоДоговорРеализации И Объект.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку")
			ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"))
		И (Объект.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета)
		И ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов)
		И Объект.ВидАгентскогоДоговора <> ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров");
		
	ЗначениеВыбора = Элементы.ОплатаВРублях.СписокВыбора.НайтиПоЗначению(0);
	ЗначениеВыбора.Представление = Объект.ВалютаВзаиморасчетов;
	
	Если Объект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ТекстЗаголовкаРасчеты = НСтр("ru= 'Расчеты'");
	ИначеЕсли Объект.РасчетыВУсловныхЕдиницах Тогда
		ТекстЗаголовкаРасчеты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Расчеты: %1 (оплата в руб.)'"), Объект.ВалютаВзаиморасчетов);
	Иначе
		ТекстЗаголовкаРасчеты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru= 'Расчеты: %1'"), Объект.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаРасчеты", ТекстЗаголовкаРасчеты);
	
	Элементы.СрокОплаты.Заголовок = СформироватьЗаголовокСрокаОплаты(Объект.СрокОплаты);
	
	Если Элементы.ОплатаВРублях.Видимость Тогда
		Элементы.ОплатаВРублях.ТолькоПросмотр = Форма.УсловиеОплатаВВалютеПередано;
	КонецЕсли;
	
	Элементы.ГруппаВалютаВзаиморасчетов.Видимость = НЕ ЭтоДоговорФакторинга;
	
	Элементы.ГруппаСрокОплаты.Видимость = Объект.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее");
	
	Элементы.СрокОплаты.Видимость = Форма.ВидСрокаОплаты = ИмяСрокаОплатыВДнях();
	Элементы.ДатаОплаты.Видимость = Форма.ВидСрокаОплаты = ИмяСрокаОплатыДатой();

	
	Элементы.ГруппаБухгалтерскийУчет.Видимость = Форма.ОтражатьАвансыВыданныеКакАктивы 
		И (ЭтоДоговорСПоставщиком ИЛИ ЭтоДоговорСКомиссионеромНаЗакупку);
	
	// Группа "Комиссионное вознаграждение"
	
	Элементы.ГруппаКомиссионноеВознаграждение.Видимость = ВидимостьКомиссионногоВознаграждения;
	
	// Группа "НДС"
	Элементы.ГруппаЗаполнениеДокументов.Видимость  = Истина;
	Элементы.СпособВыставленияДокументов.Видимость = Не ЭтоДоговорКомиссии;
	
	Если ЭтоДоговорРеализации Тогда
		Элементы.ГруппаНалоговыйАгентОрганизация.Видимость = Ложь;
		Элементы.ГруппаЭлектронныеУслуги.Видимость         = Ложь;
		Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда 
			Элементы.ГруппаНалоговыйАгентПокупатель.Видимость = Истина;
		Иначе
			Элементы.ГруппаНалоговыйАгентПокупатель.Видимость = Ложь;
		КонецЕсли;
		Элементы.ГруппаНДССАвансов.Видимость = ЭтоПлательщикНДС;
		Элементы.СпособЗаполненияСтавкиНДС.Видимость   = ЭтоДоговорСКомиссионером;
		Элементы.НДСПоСтавкам4и2.Видимость             = ЭтоДоговорСКомиссионером;
		Элементы.СпособВыставленияДокументов.Заголовок = НСтр("ru='Документ реализации'");
			
		Если Объект.УчетАгентскогоНДСПокупателем Тогда 
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС: Покупатель выступает в качестве налогового агента по уплате НДС'");
		ИначеЕсли ЭтоПлательщикНДС Тогда
			Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку")
				И Объект.СчетаФактурыОтИмениОрганизации Тогда 
				ТекстЗаголовкаНДС = НСтр("ru = 'НДС: Счета-фактуры перевыставляются от имени организации'");
			ИначеЕсли ЗначениеЗаполнено(Объект.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору) Тогда
				ТекстЗаголовкаНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'НДС: %1'"), Строка(Объект.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору));
			Иначе 
				ТекстЗаголовкаНДС = НСтр("ru = 'НДС: Регистрировать счета-фактуры на аванс в порядке, соответствующем учетной политике'");
			КонецЕсли;
		Иначе
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС'");
		КонецЕсли;
		
		Элементы.КодДекларацияРаздел7.Видимость = 
			ЭтоПлательщикНДС 
			И Форма.РаздельныйУчетНДС 
			И НЕ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку");
		Элементы.ГруппаПеревыставлениеСФ.Видимость = 
			Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку");
	ИначеЕсли ЭтоПрочийДоговор Тогда
		Элементы.ГруппаНалоговыйАгентОрганизация.Видимость = Ложь;
		Элементы.ГруппаЭлектронныеУслуги.Видимость         = Ложь;
		Элементы.ГруппаНалоговыйАгентПокупатель.Видимость  = Ложь;
		Элементы.ГруппаНДССАвансов.Видимость               = Ложь;
		
		Элементы.ГруппаЗаполнениеДокументов.Видимость      = Ложь;
		
		Элементы.КодДекларацияРаздел7.Видимость            = Ложь;
		Элементы.ГруппаПеревыставлениеСФ.Видимость         = Ложь;
	Иначе
		Элементы.ГруппаНалоговыйАгентОрганизация.Видимость = НЕ ЭтоДоговорФакторинга И Форма.ИсполняютсяОбязанностиНалоговогоАгентаПоНДС;
		Элементы.ГруппаЭлектронныеУслуги.Видимость         = Форма.ЭтоДоговорИностранца И Форма.ВедетсяУчетУслугИностранныхИнтернетКомпаний;
		Элементы.ГруппаНалоговыйАгентПокупатель.Видимость  = Ложь;
		Элементы.ГруппаНДССАвансов.Видимость               = Ложь;
		Элементы.КодДекларацияРаздел7.Видимость            = Ложь;
		
		Элементы.НДСПоСтавкам4и2.Видимость                 = Истина;
		Элементы.СпособЗаполненияСтавкиНДС.Видимость       = Истина;
		Элементы.СпособВыставленияДокументов.Заголовок     = НСтр("ru='Документ поступления'");
		
		// Установим параметры выбора вида агентского договора в зависимости от страны регистрации контрагента.
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ИностранныйКонтрагент", Форма.ЭтоДоговорИностранца);
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрВыбора);
		Элементы.ВидАгентскогоДоговора.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		Элементы.ГруппаНалоговыйАгентОрганизация.Доступность = ЭтоДоговорПриобретения 
			И Объект.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку");
			
		// Установим "виртуальные" флажки и переключатели по электронным услугам.
		Если Объект.ЭлектронныеУслуги 
			ИЛИ Объект.УчетАгентскогоНДС 
			И Объект.ВидАгентскогоДоговора = ПредопределенноеЗначение("Перечисление.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги") Тогда 
			Форма.ЭлектронныеУслугиИностранца = Истина;
			Если Объект.ЭлектронныеУслуги Тогда 
				Форма.ПорядокУплатыНДСПоЭлектроннымУслугам = 1;
			Иначе
				Форма.ПорядокУплатыНДСПоЭлектроннымУслугам = 2;
			КонецЕсли;
		Иначе
			Форма.ЭлектронныеУслугиИностранца = Ложь;
		КонецЕсли;
		
		Элементы.УчетАгентскогоНДС.Видимость = НЕ Форма.ЭлектронныеУслугиИностранца;
		Элементы.ВидАгентскогоДоговора.Видимость = НЕ Форма.ЭлектронныеУслугиИностранца;
		Элементы.ГруппаПорядокУплатыНДСПоЭлектроннымУслугам.Видимость = 
			Форма.ЭлектронныеУслугиИностранца И Форма.ИсполняютсяОбязанностиНалоговогоАгентаПоНДС;
		
		ДоступенВыборВидаАгентскогоДоговора = ЭтоДоговорПриобретения
			И Объект.УчетАгентскогоНДС
			И НЕ ЭтоДоговорКомиссии
			И Форма.ИсполняютсяОбязанностиНалоговогоАгентаПоНДС
			И НЕ Форма.ЭтоДоговорИностранца;
		Элементы.ВидАгентскогоДоговора.Доступность = Объект.УчетАгентскогоНДС;
		Элементы.ВидАгентскогоДоговора.ТолькоПросмотр = Не ДоступенВыборВидаАгентскогоДоговора;
		Элементы.ВидАгентскогоДоговора.КнопкаВыпадающегоСписка = ДоступенВыборВидаАгентскогоДоговора;
		
		Элементы.НаименованиеДляСчетаФактурыНалоговогоАгента.Доступность = Объект.УчетАгентскогоНДС;
		
		Если Объект.ЭлектронныеУслуги Тогда
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС: Приобретение электронных услуг'");
		ИначеЕсли Объект.УчетАгентскогоНДС Тогда
			ТекстЗаголовкаНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'НДС: Налоговый агент по уплате НДС - %1'"), Строка(Объект.ВидАгентскогоДоговора));
		ИначеЕсли Форма.ДоговорСРезидентомТаможенногоСоюза И НЕ Объект.УчетАгентскогоНДС Тогда
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС: Организация не выступает в качестве налогового агента по уплате НДС'");
		ИначеЕсли Объект.СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры") Тогда
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС: ставка в документах из карточки номенклатуры'");
		ИначеЕсли Объект.СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС") Тогда
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС: ставка в документах ""без НДС""'");
		ИначеЕсли Объект.СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.Автоматически") Тогда
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС: ставка в документах определяется автоматически'");
		Иначе
			ТекстЗаголовкаНДС = НСтр("ru = 'НДС'");
		КонецЕсли;
		Элементы.ГруппаПеревыставлениеСФ.Видимость = Ложь;
		
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаНДС", ТекстЗаголовкаНДС);
	
	//Группа "Государственный контракт"
	Если ЭтоДоговорКомиссии Тогда 
		Элементы.ГруппаГосударственныйКонтракт.Видимость = Ложь;
	Иначе
		Элементы.ГруппаГосударственныйКонтракт.Видимость = Истина;
		Форма.ЭтоГосударственныйКонтракт = ЗначениеЗаполнено(Объект.ГосударственныйКонтракт);
		Элементы.ГосударственныйКонтракт.Доступность = Форма.ЭтоГосударственныйКонтракт;
	КонецЕсли;
	
	//Группа "Платежный агент"
	Элементы.ГруппаПлатежныйАгент.Видимость               = ВидимостьКомиссионногоВознаграждения;
	
	Элементы.ПризнакАгента.Доступность                    = Объект.ПлатежныйАгент;
	
	ЭтоПлатежныйАгент  = Объект.ПлатежныйАгент 
		И (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент") 
			ИЛИ (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент")));
	ЭтоБанковскийАгент = Объект.ПлатежныйАгент 
		И (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент") 
			ИЛИ (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент")));
	
	Элементы.ТелефонПоставщика.Видимость                = ЭтоПлатежныйАгент ИЛИ ЭтоБанковскийАгент;
	Элементы.НаименованиеОператораПеревода.Видимость    = ЭтоБанковскийАгент;
	Элементы.ИННОператораПеревода.Видимость             = ЭтоБанковскийАгент;
	Элементы.АдресОператораПеревода.Видимость           = ЭтоБанковскийАгент;
	Элементы.ТелефонОператораПеревода.Видимость         = ЭтоБанковскийАгент;
	Элементы.ТелефонОператораПоПриемуПлатежей.Видимость = ЭтоПлатежныйАгент;
	Элементы.ТелефонПлатежногоАгента.Видимость          = ЭтоПлатежныйАгент ИЛИ ЭтоБанковскийАгент;
	Элементы.ОперацияПлатежногоАгента.Видимость         = ЭтоБанковскийАгент;
	
	Элементы.СпособЗаполненияСтавкиНДС.Доступность = 
		НЕ (ЭтоДоговорРеализации ИЛИ Объект.УчетАгентскогоНДС ИЛИ Форма.ДоговорСРезидентомТаможенногоСоюза)
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером");
	
	Элементы.НДСПоСтавкам4и2.Доступность = ?(Объект.СпособЗаполненияСтавкиНДС =
		 ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.ИзКарточкиНоменклатуры"), Истина, Ложь);
	
	// Группа "Обеспечения обязательств"
	Элементы.ВидОбеспеченияОбязательствИПлатежей.Видимость = Форма.ПредусмотреноОбеспечениеОбязательств;
	Элементы.ОбеспечениеПредоставил.Видимость              = Форма.ПредусмотреноОбеспечениеОбязательств;
	Элементы.ОбеспечениеПолучил.Видимость                  = Форма.ПредусмотреноОбеспечениеОбязательств;
	Элементы.ОбеспечениеВыданоЗа.Видимость                 = Форма.ПредусмотреноОбеспечениеОбязательств;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокСпособовРасчетаКомиссионногоВознаграждения(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	ЭтоКомиссияПоЗакупке = Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку");

	СписокСпособов = ОбщегоНазначенияБПКлиентСервер.СформироватьСписокСпособовРасчетаКомиссионногоВознаграждения(ЭтоКомиссияПоЗакупке);
	СписокВыбора = Элементы.СпособРасчетаКомиссионногоВознаграждения.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из СписокСпособов Цикл
		СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименованиеДоговора()
	
	ТекстНаименования = Объект.Наименование;
	
	НовыеРеквизитыДоговораСтрокой = ПечатьДоговоровКлиентСервер.РеквизитыДоговораСтрокой(Объект.Номер, Объект.Дата);
	
	Если ПустаяСтрока(ТекстНаименования) Или ТекстНаименования = НаименованиеПоУмолчанию Тогда // См. ПечатьДоговоровКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов()
		ТекстНаименования = НовыеРеквизитыДоговораСтрокой;
	ИначеЕсли СтрНайти(ТекстНаименования, РеквизитыДоговораСтрокой) > 0 
		И СтрНайти(ТекстНаименования, НовыеРеквизитыДоговораСтрокой) = 0 Тогда
		ТекстНаименования = СтрЗаменить(ТекстНаименования, РеквизитыДоговораСтрокой, НовыеРеквизитыДоговораСтрокой);
	КонецЕсли;
	
	РеквизитыДоговораСтрокой = НовыеРеквизитыДоговораСтрокой;
	
	Объект.Наименование = ТекстНаименования;
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьВыборРеквизитов(ЗначенияЗаполнения)

	Если ЗначенияЗаполнения.Свойство("Организация") Тогда
		Если ТипЗнч(ЗначенияЗаполнения.Организация) = Тип("СправочникСсылка.Организации") Тогда
			Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(ЗначенияЗаполнения.Организация);
		КонецЕсли;
	КонецЕсли;

	Если ЗначенияЗаполнения.Свойство("Владелец") Тогда
		Если ТипЗнч(ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			Элементы.Владелец.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияЗаполнения.Свойство("ВалютаВзаиморасчетов") Тогда
		Если ТипЗнч(ЗначенияЗаполнения.ВалютаВзаиморасчетов) = Тип("СправочникСсылка.Валюты") Тогда
			Элементы.ВалютаВзаиморасчетов.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Проверим, передавались ли ограничения по валюте
	Если Параметры.ЗначенияЗаполнения.Свойство("Валютный") Тогда
		
		МассивРазрешенныхВалют = 
			Справочники.ДоговорыКонтрагентов.ПодготовитьСписокРазрешенныхВалют(
				ВалютаРегламентированногоУчета, Параметры.ЗначенияЗаполнения.Валютный);
		
		Элементы.ВалютаВзаиморасчетов.ПараметрыВыбора = Новый ФиксированныйМассив(МассивРазрешенныхВалют);
		
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ОплатаВВалюте") Тогда
		УсловиеОплатаВВалютеПередано = Истина;
	КонецЕсли;
	
	Если ЗначенияЗаполнения.Свойство("ВидДоговора") Тогда
		МассивВидовДоговоров = Новый Массив;
		Если ТипЗнч(ЗначенияЗаполнения.ВидДоговора) = Тип("Массив") Тогда
			МассивВидовДоговоров = ЗначенияЗаполнения.ВидДоговора;
		ИначеЕсли ТипЗнч(ЗначенияЗаполнения.ВидДоговора) = Тип("ФиксированныйМассив") Тогда
			МассивВидовДоговоров = Новый Массив(ЗначенияЗаполнения.ВидДоговора);
		КонецЕсли;
		ОдинВидДоговора = МассивВидовДоговоров.Количество() <= 1;
		Если ОдинВидДоговора Тогда
			Элементы.ВидДоговора.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ВидДоговора.РежимВыбораИзСписка = Истина;
			Элементы.ВидДоговора.СписокВыбора.ЗагрузитьЗначения(МассивВидовДоговоров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияСозданиеФайлаДоговора(ФайлДоговора)
	
	Если ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		// В договоре уже указан какой-то файл договора, не меняем его.
		Возврат;
	КонецЕсли;

	Объект.ФайлДоговора = ФайлДоговора;
	ЗапомнитьВерсиюДанныхФайлаДоговора();
	
	Если НЕ Модифицированность Тогда
		// Пользователь договор не менял, записываем его самостоятельно.
		Записать();
	КонецЕсли;	
	
	// Сообщим форме редактирования текста договора, что мы запомнили ссылку на файл, 
	// и сам объект справочника ДоговорыКонтрагентов изменять не требуется,
	// чтобы при интерактивной работе пользователя не возникало сообщений об изменении
	// объекта в другом сеансе из-за записи изменений элемента справочника.
	Оповестить("ДоговорыКонтрагентов_СозданиеФайлаОбработаноОсновнойФормойДоговора", Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияПроверитьИзменениеФайлаДоговора()

	// Возможно пользователь с помощью интерактивных механизмов БСП пометил на удаление присоединенный файл договора,
	// тогда необходимо очистить ссылку на него в самом договоре.
	Если НЕ ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		// Файла с текстом договора нет.
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность Тогда
		// Карточку договора пользователь не менял, поэтому процедуры-обработчики событий 
		// для справочника присоединенных файлов самостоятельно смогут обновить текущий договор при необходимости.
		Возврат;
	КонецЕсли;
	
	ПроверитьИзменениеФайлаДоговора();

КонецПроцедуры

&НаСервере
Процедура ПроверитьИзменениеФайлаДоговора()
	
	// Т.к. БСП при рассылке оповещения не передает параметра со ссылкой на сам файл,
	// проверяем сначала сохраненную при открытию ВерсиюДанныхФайлаДоговора,
	// чтобы менять договор только тогда, когда поменялся именно его файл.
	Если НЕ ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсияДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФайлДоговора, "ВерсияДанных");
	Если ТекущаяВерсияДанных = ВерсияДанныхФайлаДоговора Тогда
		// Версия не изменилась, значит "наш" файл не менялся, ничего не делаем.
		Возврат;
	КонецЕсли;
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ВызыватьИсключение = Ложь;
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;

	ДанныеФайлаДоговора = РаботаСФайлами.ДанныеФайла(Объект.ФайлДоговора, ПараметрыДанныхФайла);
	
	Если ДанныеФайлаДоговора = Неопределено Тогда
		// Не смогли получить данные файла, возможно, он был удален пользователем.
		Объект.ФайлДоговора = Неопределено;
	Иначе
		Если ДанныеФайлаДоговора.ПометкаУдаления Тогда
			Объект.ФайлДоговора = Неопределено;
		КонецЕсли;
		
		// Удалим полученные двоичные данные файла, чтобы не занимали память.
		Если ЭтоАдресВременногоХранилища(ДанныеФайлаДоговора.СсылкаНаДвоичныеДанныеФайла) Тогда
			УдалитьИзВременногоХранилища(ДанныеФайлаДоговора.СсылкаНаДвоичныеДанныеФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		// Запомним, что изменили данные в договоре.
		Модифицированность        = Истина;
		ВерсияДанныхФайлаДоговора = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗапомнитьВерсиюДанныхФайлаДоговора()
	
	Если ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		ВерсияДанныхФайлаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФайлДоговора, "ВерсияДанных");
	Иначе
		ВерсияДанныхФайлаДоговора = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	Справочники.ДоговорыКонтрагентов.ЗаполнитьРуководителяКонтрагента(Объект);
	УстановитьСпискиЭлементовОбеспеченияОбязательств();
		// Очистим признаки налогового агента и электронных услуг.
	Объект.УчетАгентскогоНДС     = Ложь;
	Объект.ВидАгентскогоДоговора = Неопределено;
	Объект.ЭлектронныеУслуги     = Ложь;
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Справочники.ДоговорыКонтрагентов.ЗаполнитьРуководителяОрганизации(Объект);
	УстановитьСпискиЭлементовОбеспеченияОбязательств();
	
	УстановитьФункциональныеОпцииФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ЭтоПлательщикНДС                            = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ТекущаяДатаСеанса());
	ИсполняютсяОбязанностиНалоговогоАгентаПоНДС = ПолучитьФункциональнуюОпцию("ИсполняютсяОбязанностиНалоговогоАгентаПоНДС");
	ОбратноеНачислениеНДС                       = ПолучитьФункциональнуюОпцию("ОбратноеНачислениеНДС");
	ВедетсяУчетУслугИностранныхИнтернетКомпаний = ПолучитьФункциональнуюОпцию("ВедетсяУчетУслугИностранныхИнтернетКомпаний");
	ОтражатьАвансыВыданныеКакАктивы             = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета() 
														И ОтражатьАвансыВыданныеКакАктивы(Объект.Организация);

	
	// Для отображения релевантных настроек НДС необходимо различать договоры с российскими и иностранными организациями.
	СтранаРегистрацииКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "СтранаРегистрации");
	ЭтоДоговорИностранца = ЗначениеЗаполнено(СтранаРегистрацииКонтрагента)
		И СтранаРегистрацииКонтрагента <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКонтактныхЛиц(Знач Контрагент)
	
	Возврат Справочники.КонтактныеЛица.СписокКонтактныхЛиц(Контрагент, Ложь);

КонецФункции

&НаКлиенте
Процедура РуководительКонтрагентаНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФИОДолжность = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатВыбора.Представление, ", ");
	Если МассивФИОДолжность.Количество() > 0 Тогда
		Объект.РуководительКонтрагента = МассивФИОДолжность[0];
	КонецЕсли;
	Если МассивФИОДолжность.Количество() > 1 Тогда
		Объект.ДолжностьРуководителяКонтрагента = МассивФИОДолжность[1];
	КонецЕсли;
	ПриИзмененииПредставленияРуководителяКонтрагента();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РуководительКонтрагентаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСоСклоняемымиРеквизитами = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"); // любой договор
	
	ЭтотОбъект.СклоненияРуководительКонтрагента = Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	ЭтотОбъект.ИзмененоПредставлениеРуководительКонтрагента = Истина;
	Если ТекущийРеквизитСклонения = "СклоненияРуководительКонтрагента" Тогда
		ЭтотОбъект.Склонения = ЭтотОбъект.Склонения;
		ЭтотОбъект.ИзмененоПредставление = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяКонтрагентаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСоСклоняемымиРеквизитами = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"); // любой договор
	
	ЭтотОбъект.СклоненияДолжностьРуководителяКонтрагента = Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	ЭтотОбъект.ИзмененоПредставлениеДолжностьРуководителяКонтрагента = Истина;
	Если ТекущийРеквизитСклонения = "СклоненияДолжностьРуководителяКонтрагента" Тогда
		ЭтотОбъект.Склонения = ЭтотОбъект.Склонения;
		ЭтотОбъект.ИзмененоПредставление = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииНаСервере()
	
	Если Объект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		Объект.РасчетыВУсловныхЕдиницах = Ложь;
		ОплатаВРублях = 0;
	Иначе
		
		Если Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем")
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером"))
			ИЛИ (Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"))
			ИЛИ ДокументОформляетсяВУсловныхЕдиницах() Тогда
			Объект.РасчетыВУсловныхЕдиницах = Истина;
			ОплатаВРублях = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ДокументОформляетсяВУсловныхЕдиницах()
	
	// Для этих видов договоров оплата в У.Е. не поддерживается.
	МассивВидовДоговоровБезУЕ = Новый Массив;
	МассивВидовДоговоровБезУЕ.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	МассивВидовДоговоровБезУЕ.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	МассивВидовДоговоровБезУЕ.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	МассивВидовДоговоровБезУЕ.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Если МассивВидовДоговоровБезУЕ.Найти(Объект.ВидДоговора) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УсловиеОплатаВВалютеПередано И НЕ Объект.ОплатаВВалюте;
	
КонецФункции

&НаКлиенте
Процедура СпособЗаполненияСтавкиНДСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияСтавкиНДСПоУмолчанию()
	
	ЗаполнятьСтавкуНДСБезНДС = Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем")
		ИЛИ Объект.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку");
	
	Если ЗаполнятьСтавкуНДСБезНДС Тогда
		Объект.СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.БезНДС");
	Иначе
		Объект.СпособЗаполненияСтавкиНДС = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияСтавкиНДС.Автоматически");
	КонецЕсли;
	
	Если Объект.НДСПоСтавкам4и2 и ЗаполнятьСтавкуНДСБезНДС Тогда
		Объект.НДСПоСтавкам4и2 = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПризнакиАгента()
	Если НЕ Объект.ПлатежныйАгент Тогда
		Объект.ПризнакАгента = Неопределено;
		Объект.ТелефонПоставщика             = "";
		Объект.ТелефонПлатежногоАгента       = "";
	КонецЕсли; 
	
	ЭтоПлатежныйАгент  = (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент")) ИЛИ (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент"));
	ЭтоБанковскийАгент = (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент")) ИЛИ (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"));
	
	Если НЕ ЭтоБанковскийАгент Тогда
		Объект.НаименованиеОператораПеревода = "";
		Объект.ИННОператораПеревода          = "";
		Объект.АдресОператораПеревода        = "";
		Объект.ТелефонОператораПеревода      = "";
	КонецЕсли;
	
	Если НЕ ЭтоПлатежныйАгент Тогда
		Объект.ТелефонОператораПоПриемуПлатежей = "";
		Объект.ОперацияПлатежногоАгента         = "";
	КонецЕсли; 
КонецПроцедуры 

&НаСервере
Процедура УстановитьСпискиЭлементовОбеспеченияОбязательств()
	
	СписокВыбора = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СписокВыбора.Добавить(Объект.Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда
		СписокВыбора.Добавить(Объект.Владелец);
	КонецЕсли;
	
	СписокВыбора.Добавить(НСтр("ru='Выбрать...'"));
	
	Элементы.ОбеспечениеПредоставил.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Элементы.ОбеспечениеПолучил.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	Элементы.ОбеспечениеВыданоЗа.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораКонтрагентаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЭтотОбъект[ДополнительныеПараметры.ИмяЭлемента] = Результат;
		Объект[ДополнительныеПараметры.ИмяЭлемента] = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовСрокаОплаты()
	
	Элементы.ВидСрокаОплаты.СписокВыбора.Добавить(
		ИмяНеназначенногоСрокаОплаты(), НСтр("ru = 'не установлен'"));
	Элементы.ВидСрокаОплаты.СписокВыбора.Добавить(
		ИмяСрокаОплатыВДнях(), НСтр("ru = 'в течение'"));
	Элементы.ВидСрокаОплаты.СписокВыбора.Добавить(
		ИмяСрокаОплатыДатой(), НСтр("ru = 'не позднее'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидСрокаОплаты()
	
	Если Не Объект.УстановленСрокОплаты Тогда
		ВидСрокаОплаты = ИмяНеназначенногоСрокаОплаты();
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаОплаты) Тогда
		ВидСрокаОплаты = ИмяСрокаОплатыДатой();
	Иначе
		ВидСрокаОплаты = ИмяСрокаОплатыВДнях();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяНеназначенногоСрокаОплаты()
	
	Возврат "НеУстановлен";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСрокаОплатыВДнях()
	
	Возврат "ВДнях";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСрокаОплатыДатой()
	
	Возврат "Датой";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокСрокаОплаты(КоличествоДней)
	
	Возврат ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
		НСтр("ru = 'дня'"), НСтр("ru = 'дней'"), НСтр("ru = 'дней'"), КоличествоДней);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтражатьАвансыВыданныеКакАктивы(Организация)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетнаяПолитика.СпособОтраженияАвансовВыданных КАК СпособОтраженияАвансовВыданных
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.Организация = &Организация
	|	И УчетнаяПолитика.СпособОтраженияАвансовВыданных = ЗНАЧЕНИЕ(Перечисление.СпособОтраженияАвансовВыданных.РазделятьПоВидамАктивов)";

	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ПредусмотреноОбеспечениеОбязательств Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВидОбеспеченияОбязательствИПлатежей) Тогда
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение",
				НСтр("ru='Вид обеспечения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ВидОбеспеченияОбязательствИПлатежей", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов

&НаСервереБезКонтекста
Функция РеквизитыСклоненияРуководителя(Руководитель)
	
	РеквизитыСклонения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Руководитель, "ФИО,Пол");
	
	РеквизитыСклонения.Пол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(РеквизитыСклонения.Пол);
	
	РеквизитыСклонения.Вставить("ТолькоПросмотр", Не ПравоНаРедактирование(Истина));
	
	Возврат РеквизитыСклонения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПравоНаРедактирование(ЭтоФИО)
	
	ПроверяемыйСправочник = ?(ЭтоФИО, Метаданные.Справочники.ФизическиеЛица, Метаданные.Справочники.Должности);
	Возврат ПравоДоступа("Редактирование", ПроверяемыйСправочник);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьВРегистрСклонения(ОбъектСоСклоняемымиРеквизитами, Представление, СтруктураСклонения)
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ХешПредставления = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Представление);
	НаборЗаписейСклонения = РегистрыСведений.СклоненияПредставленийОбъектов.СоздатьНаборЗаписей();
	
	НаборЗаписейСклонения.Отбор.ХешПредставления.Установить(ХешПредставления);
	Если Не ЗначениеЗаполнено(ОбъектСоСклоняемымиРеквизитами) Тогда
		// Может быть несколько склонений представлений, относимых к одному пустому значению.
		НаборЗаписейСклонения.Отбор.Объект.Установить(ОбъектСоСклоняемымиРеквизитами);
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейСклонения.Добавить();
	НоваяСтрока.Объект           = ОбъектСоСклоняемымиРеквизитами;
	НоваяСтрока.ХешПредставления = ХешПредставления;
	Для каждого Падеж Из СтруктураСклонения Цикл
		НоваяСтрока[Падеж.Ключ + "Падеж"] = Падеж.Значение;
	КонецЦикла; 
	НаборЗаписейСклонения.Записать();
	
КонецПроцедуры

// Завершение процедуры ПоказатьСклонение.
// Вызывается для реквизитов, чьи склонения привязаны к объектам вне договора: ФИО и должности руководителя организации.
//
&НаКлиенте
Процедура ОткрытьФормуСклоненияЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт

	Если РезультатРедактирования <> Неопределено
	   И РезультатРедактирования.Именительный = ДополнительныеПараметры.Представление
	   И Не ДополнительныеПараметры.Свойство("ЗапретРедактирования") Тогда
	   
		СтруктураСклонения = Новый ФиксированнаяСтруктура(РезультатРедактирования);
		Если ТекущийРеквизитСклонения = "СклоненияДолжностьРуководителяКонтрагента"
		 Или ТекущийРеквизитСклонения = "СклоненияРуководительКонтрагента" Тогда // только получаем результат
		 
			ЭтотОбъект[ТекущийРеквизитСклонения] = СтруктураСклонения;
			ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = Истина;
			Модифицированность = Истина;
		 
	 	Иначе // получаем результат и фиксируем в регистре

			ЗаписатьВРегистрСклонения(
				Объект[ТекущийРеквизитСклонения],
				ДополнительныеПараметры.Представление,
				СтруктураСклонения);
				
		КонецЕсли;
		
	КонецЕсли;	
	
	// Закончили редактирование объекта склонения внешнего по отношению к данной форме.
	// Возвращаемся к редактированию склонений реквизита формы.
	ТекущийРеквизитСклонения         = "СклоненияРуководительКонтрагента";
	ЭтотОбъект.Склонения             = ЭтотОбъект[ТекущийРеквизитСклонения];
	ЭтотОбъект.ИзмененоПредставление = ЭтотОбъект.ИзмененоПредставлениеРуководительКонтрагента;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПредставленияРуководителяКонтрагента()
	
	ЭтотОбъект[ТекущийРеквизитСклонения] = ЭтотОбъект.Склонения;
	ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = ЭтотОбъект.ИзмененоПредставление;
	
	// Пытаемся определить пол.
	ПредполагаемыйПол = СотрудникиКлиентСервер.ОпределитьПолПоОтчеству(СокрП(Объект.РуководительКонтрагента));
	Если ЗначениеЗаполнено(ПредполагаемыйПол) Тогда
		Объект.ПолРуководителяКонтрагента = ПредполагаемыйПол;
	КонецЕсли;
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	ПараметрыСклонения.Пол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(Объект.ПолРуководителяКонтрагента);
	ОповещениеОРезультатеСклонения = Новый ОписаниеОповещения(
		"РуководительКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	СклонениеПредставленийОбъектовКлиент.НачатьСклонение(
		ЭтотОбъект, Объект.РуководительКонтрагента, ПараметрыСклонения, Истина, ОповещениеОРезультатеСклонения);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервереСклоненийРеквизитов(ТекущийОбъект)
	
	Попытка
	
		ЭтотОбъект[ТекущийРеквизитСклонения] = ЭтотОбъект.Склонения;
		ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = ЭтотОбъект.ИзмененоПредставление;
		ОбъектСоСклоняемымиРеквизитами = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // любой договор
		
		Если ЭтотОбъект.ИзмененоПредставлениеДолжностьРуководителяКонтрагента
		   И ТипЗнч(ЭтотОбъект.СклоненияДолжностьРуководителяКонтрагента) = Тип("ФиксированнаяСтруктура") Тогда

			ЗаписатьВРегистрСклонения(
				ОбъектСоСклоняемымиРеквизитами,
				ТекущийОбъект.ДолжностьРуководителяКонтрагента,
				ЭтотОбъект.СклоненияДолжностьРуководителяКонтрагента);
			ЭтотОбъект.ИзмененоПредставлениеДолжностьРуководителяКонтрагента = Ложь;

		КонецЕсли;
		
		Если ЭтотОбъект.ИзмененоПредставлениеРуководительКонтрагента
		   И ТипЗнч(ЭтотОбъект.СклоненияРуководительКонтрагента) = Тип("ФиксированнаяСтруктура") Тогда

			ЗаписатьВРегистрСклонения(
				ОбъектСоСклоняемымиРеквизитами,
				ТекущийОбъект.РуководительКонтрагента,
				ЭтотОбъект.СклоненияРуководительКонтрагента);
			ЭтотОбъект.ИзмененоПредставлениеРуководительКонтрагента = Ложь;

		КонецЕсли;

		ЭтотОбъект.Склонения = ЭтотОбъект[ТекущийРеквизитСклонения];
		ЭтотОбъект.ИзмененоПредставление = Ложь;
	
	Исключение
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось произвести склонение ФИО и/или должности руководителя контрагента в договоре: %1 по причине:
			|%2'"),
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Склонение ФИО и/или должности руководителя контрагента'"),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ДоговорыКонтрагентов,
			Объект.Ссылка,
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Обработчик команды "Склонения" формы объекта склонения.
//
// Параметры:
//  Представление   - Строка - Строка для склонения.
//  ЗапретРедактирования - Булево - форма склонений открывается в режиме ТолькоПросмотр.
//  ПараметрыСклонения - Структура - см. СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения() 
//
&НаКлиенте
Процедура ПоказатьСклонение(Представление, ЗапретРедактирования, ПараметрыСклонения)
	
	СтруктураСклонения = ПросклонятьПредставлениеПоВсемПадежам(Представление, ПараметрыСклонения);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Представление", Представление);
	Если ЗапретРедактирования Тогда
		ДополнительныеПараметры.Вставить("ЗапретРедактирования", Истина);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуСклоненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склонения",             СтруктураСклонения);
	СтруктураПараметров.Вставить("Представление",         Представление);
	СтруктураПараметров.Вставить("ПараметрыСклонения",    ПараметрыСклонения);
	СтруктураПараметров.Вставить("ИзмененоПредставление", Ложь);
	
	Если ЗапретРедактирования Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.Склонения", СтруктураПараметров, ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПросклонятьПредставлениеПоВсемПадежам(Знач Представление, Знач ПараметрыСклонения)
	
	Возврат СклонениеПредставленийОбъектов.ДанныеСклонения(Представление, ПараметрыСклонения, Истина);
	
КонецФункции

// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтотОбъект,
		Команда
	);

КонецПроцедуры

// СтандартныеПодсистемы.СклонениеПредставленийОбъектов

&НаКлиенте
Процедура ПоказатьСклоненияРуководительКонтрагента(Команда)
	
	ЭтотОбъект[ТекущийРеквизитСклонения] = ЭтотОбъект.Склонения;
	ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = ЭтотОбъект.ИзмененоПредставление;
	
	ТекущийРеквизитСклонения         = "СклоненияРуководительКонтрагента";
	ЭтотОбъект.Склонения             = ЭтотОбъект[ТекущийРеквизитСклонения];
	ЭтотОбъект.ИзмененоПредставление = ЭтотОбъект.ИзмененоПредставлениеРуководительКонтрагента;
	Если ЭтотОбъект.ИзмененоПредставление Тогда
		ЗаписатьВРегистрСклонения(
			ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"),
			Объект.РуководительКонтрагента,
			ЭтотОбъект.Склонения);
	КонецЕсли;
	
	ЗапретРедактирования = Не ПравоНаРедактирование(Ложь);
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	ПараметрыСклонения.Пол = ПечатьДоговоровКлиентСервер.ПорядковыйНомерПола(Объект.ПолРуководителяКонтрагента);
	ПоказатьСклонение(Объект.РуководительКонтрагента, ЗапретРедактирования, ПараметрыСклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияДолжностьРуководителяКонтрагента(Команда)
	
	ЭтотОбъект[ТекущийРеквизитСклонения] = ЭтотОбъект.Склонения;
	ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = ЭтотОбъект.ИзмененоПредставление;
	
	ТекущийРеквизитСклонения         = "СклоненияДолжностьРуководителяКонтрагента";
	ЭтотОбъект.Склонения             = ЭтотОбъект[ТекущийРеквизитСклонения];
	ЭтотОбъект.ИзмененоПредставление = ЭтотОбъект.ИзмененоПредставлениеДолжностьРуководителяКонтрагента;
	Если ЭтотОбъект.ИзмененоПредставление Тогда
		ЗаписатьВРегистрСклонения(
			ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"),
			Объект.ДолжностьРуководителяКонтрагента,
			ЭтотОбъект.Склонения);
	КонецЕсли;
	
	ЗапретРедактирования = Не ПравоНаРедактирование(Ложь);
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПоказатьСклонение(Объект.ДолжностьРуководителяКонтрагента, ЗапретРедактирования, ПараметрыСклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияРуководитель(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Руководитель) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ТекущийРеквизитСклонения] = ЭтотОбъект.Склонения;
	ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = ЭтотОбъект.ИзмененоПредставление;
	ТекущийРеквизитСклонения = "Руководитель";
	
	РеквизитыСклонения = РеквизитыСклоненияРуководителя(Объект.Руководитель);
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	ПараметрыСклонения.Пол    = РеквизитыСклонения.Пол;
	
	ПоказатьСклонение(РеквизитыСклонения.ФИО, РеквизитыСклонения.ТолькоПросмотр, ПараметрыСклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСклоненияДолжностьРуководителя(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДолжностьРуководителя) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ТекущийРеквизитСклонения] = ЭтотОбъект.Склонения;
	ЭтотОбъект["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = ЭтотОбъект.ИзмененоПредставление;
	ТекущийРеквизитСклонения = "ДолжностьРуководителя";
	
	ПредставлениеОбъекта = Строка(Объект.ДолжностьРуководителя);
	ЗапретРедактирования = Не ПравоНаРедактирование(Ложь);
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();

	ПоказатьСклонение(ПредставлениеОбъекта, ЗапретРедактирования, ПараметрыСклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

#КонецОбласти
