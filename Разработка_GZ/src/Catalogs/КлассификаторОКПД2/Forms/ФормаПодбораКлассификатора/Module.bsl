
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторЗагруженногоРаздела = -1;
	
	ЗаполнитьКодыРазделов();
	
	ОтобразитьТекущийРаздел();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыРазделы

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	Если НЕ ОтобразитьНайденные Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьТекущийРаздел", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКлассификатора

&НаКлиенте
Процедура КлассификаторВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗавершитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПоиска

&НаКлиенте
Процедура КлассификаторПоискВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗавершитьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторПоискПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.КлассификаторПоиск.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторРаздела = ТекущиеДанные.ИдентификаторРаздела;
		Элементы.Разделы.ТекущаяСтрока = ИдентификаторРаздела;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьЭлемент(Команда)
	
	ЗавершитьВыбор();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОтобразитьНайденные();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьКодыРазделов()
	
	Разделы.Загрузить(Справочники.КлассификаторОКПД2.ТаблицаРазделов());
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОтобразитьТекущийРаздел()
	
	ОтобразитьТекущийРаздел();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьТекущийРаздел()
	
	Если Разделы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущегоРаздела = Элементы.Разделы.ТекущаяСтрока;
	Если ИдентификаторТекущегоРаздела = Неопределено Тогда
		ИдентификаторТекущегоРаздела = Разделы[0].ПолучитьИдентификатор();
		Элементы.Разделы.ТекущаяСтрока = ИдентификаторТекущегоРаздела;
	КонецЕсли;
	
	Если ИдентификаторТекущегоРаздела = ИдентификаторЗагруженногоРаздела Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗагруженногоРаздела = ИдентификаторТекущегоРаздела;
	
	ТекущийРаздел = Разделы.НайтиПоИдентификатору(ИдентификаторТекущегоРаздела);
	
	Если ЗначениеЗаполнено(ТекущийРаздел.АдресВременногоХранилища) Тогда
		
		ТаблицаЭлементов = ПолучитьИзВременногоХранилища(ТекущийРаздел.АдресВременногоХранилища);
		
	Иначе
		ТаблицаЭлементов = ТаблицаКлассификатора(ТекущийРаздел, Ложь);
		
		ТекущийРаздел.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаЭлементов, УникальныйИдентификатор);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаЭлементов, "Классификатор");
	
КонецПроцедуры

&НаСервере
Функция ТаблицаКлассификатора(Раздел, ДобавитьДанныеПоиска)
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаМакета) Тогда
		ТекстКлассификатора = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаМакета);
	Иначе
		ТекстКлассификатора = Справочники.КлассификаторОКПД2.ТекстКлассификатора();
		АдресВременногоХранилищаМакета = ПоместитьВоВременноеХранилище(ТекстКлассификатора, УникальныйИдентификатор);
	КонецЕсли;
	
	КодыГруппРаздела = КодыГруппРаздела(Раздел);
	
	Возврат Справочники.КлассификаторОКПД2.ТаблицаКлассификатора(ТекстКлассификатора, КодыГруппРаздела, ДобавитьДанныеПоиска);
	
КонецФункции

&НаСервере
Функция КодыГруппРаздела(Раздел)
	
	КодыГруппРаздела = Новый Соответствие;
	
	Если Раздел <> Неопределено Тогда
		ДополнитьКодыГруппРаздела(КодыГруппРаздела, Раздел);
	Иначе
		// Раздел не заполнен - загружаем все коды
		Для Каждого СтрокаРаздела Из Разделы Цикл
			ДополнитьКодыГруппРаздела(КодыГруппРаздела, СтрокаРаздела);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КодыГруппРаздела;
	
КонецФункции

&НаСервере
Процедура ДополнитьКодыГруппРаздела(КодыГруппРаздела, Раздел)
	
	МассивКодовГрупп = СтрРазделить(Раздел.КодыГрупп, ",");
	
	Для Каждого КодГруппы Из МассивКодовГрупп Цикл
		КодыГруппРаздела.Вставить(КодГруппы, Раздел.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНайденные()
	
	ОтобразитьНайденные = ЗначениеЗаполнено(СтрокаПоиска);
	
	Если ОтобразитьНайденные Тогда
		
		Если ЗначениеЗаполнено(АдресХранилищаКлассификатораПоиска) Тогда
			ТаблицаПоиска = ПолучитьИзВременногоХранилища(АдресХранилищаКлассификатораПоиска);
		Иначе
			ТаблицаПоиска = ТаблицаКлассификатора(Неопределено, Истина);
			АдресХранилищаКлассификатораПоиска = ПоместитьВоВременноеХранилище(ТаблицаПоиска, УникальныйИдентификатор);
		КонецЕсли;
		
		КлассификаторСОтбором = Справочники.КлассификаторОКПД2.НайтиВКлассификаторе(СтрокаПоиска, ТаблицаПоиска);
		
		ОтображаемыеРазделы = КлассификаторСОтбором.Скопировать();
		ОтображаемыеРазделы.Свернуть("ИдентификаторРаздела");
		
		// Наложим фильтр на разделы - нужно показывать только отображаемые
		Для Каждого СтрокаРаздела Из Разделы Цикл
			СтрокаРаздела.ВключенВОтбор = Ложь;
		КонецЦикла;
		
		Для Каждого ОтображаемыйРаздел Из ОтображаемыеРазделы Цикл
			Разделы.НайтиПоИдентификатору(ОтображаемыйРаздел.ИдентификаторРаздела).ВключенВОтбор = Истина;
		КонецЦикла;
		
		КлассификаторПоиск.Загрузить(КлассификаторСОтбором);
		
	КонецЕсли;
	
	Элементы.КлассификаторПоиск.Видимость = ОтобразитьНайденные;
	Элементы.Классификатор.Видимость      = НЕ ОтобразитьНайденные;
	
	Если ОтобразитьНайденные Тогда
		Элементы.Разделы.ОтборСтрок = Новый ФиксированнаяСтруктура("ВключенВОтбор", Истина);
	Иначе
		Элементы.Разделы.ОтборСтрок = Неопределено;
		
		ТекущаяСтрока = Элементы.КлассификаторПоиск.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущийКод = КлассификаторПоиск.НайтиПоИдентификатору(ТекущаяСтрока).Код;
		КонецЕсли;
		
		ОтобразитьТекущийРаздел();
		Если ЗначениеЗаполнено(ТекущийКод) Тогда
			ПерейтиКСтрокеСКодом(ТекущийКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСтрокеСКодом(Код)
	
	Строки = Классификатор.НайтиСтроки(Новый Структура("Код", Код));
	Если Строки.Количество() > 0 Тогда
		Элементы.Классификатор.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыбор()
	
	РезультатВыбора = Неопределено;
	
	Если ОтобразитьНайденные Тогда
		ТекущийСписок = Элементы.КлассификаторПоиск;
	Иначе
		ТекущийСписок = Элементы.Классификатор;
	КонецЕсли;
	
	ТекущаяСтрока = ТекущийСписок.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		РезультатВыбора = Новый Структура("Код, Наименование", ТекущаяСтрока.Код, ТекущаяСтрока.Наименование);
	КонецЕсли;
	
	Если РезультатВыбора <> Неопределено Тогда
		Закрыть(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти