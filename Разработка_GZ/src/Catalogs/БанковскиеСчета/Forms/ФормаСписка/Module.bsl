&НаКлиенте
Перем УстановкаОсновногоБанковскогоСчетаВыполнена;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Отбор.Свойство("Владелец") Тогда
		
		Владелец = Параметры.Отбор.Владелец;
		
	КонецЕсли;
	
	Элементы.Владелец.Видимость = ЗначениеЗаполнено(Владелец);
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Элементы.Владелец.Заголовок = НСтр("ru = 'Контрагент'");
			ДоступноИспользоватьОсновным = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты);
			
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			
			Элементы.Владелец.Видимость = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
			Элементы.Владелец.Заголовок = НСтр("ru = 'Организация'");
			ДоступноИспользоватьОсновным = ПравоДоступа("Редактирование", Метаданные.Справочники.Организации);
			
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			Элементы.Владелец.Заголовок = НСтр("ru = 'Физическое лицо'");
			ДоступноИспользоватьОсновным = ПравоДоступа("Редактирование", Метаданные.Справочники.ФизическиеЛица);
			
		КонецЕсли;
		
		ОсновнойБанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Владелец, "ОсновнойБанковскийСчет");
	КонецЕсли;
	
	ЭтоИнтерфейсИнтеграцииСБанком = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	
	Элементы.ФормаИспользоватьОсновным.Видимость = ЗначениеЗаполнено(Владелец)
		И ДоступноИспользоватьОсновным И Не ЭтоИнтерфейсИнтеграцииСБанком;
	
	Элементы.Основной.Видимость = ЗначениеЗаполнено(Владелец) И Не ЭтоИнтерфейсИнтеграцииСБанком;
	Элементы.СтатусСчета.Видимость = Справочники.НастройкиИнтеграцииСБанками.ИнтеграцияВИнформационнойБазеВключена();
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.БанковскиеСчета);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	УстановитьПараметрыСписка(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаВыполнена" Тогда
		
		УстановкаОсновногоБанковскогоСчетаВыполнена = Истина;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		
		Если ЗначениеЗаполнено(Владелец) И Владелец = Параметр.КонтрагентОрганизация Тогда
			
			Если УстановкаОсновногоБанковскогоСчетаВыполнена = Истина Тогда
				
				ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
				УстановитьПараметрыСписка(ЭтотОбъект);
				
				УправлениеФормойКлиент();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаОбмена" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" Тогда
		
		Если Параметр.Свойство("ОсновнойБанковскийСчет")
			И ЗначениеЗаполнено(Владелец) И Владелец = Параметр.Владелец Тогда
			ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		УстановитьПараметрыСписка(ЭтотОбъект);
		УправлениеФормойКлиент();
		
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УправлениеФормойКлиент();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Свойство("Ссылка") И ЗначениеЗаполнено(ТекущиеДанные.Ссылка)
			И ТекущиеДанные.Свойство("Основной") И ТекущиеДанные.Основной
			И (ТекущиеДанные.Свойство("ПометкаУдаления") И ТекущиеДанные.ПометкаУдаления
				Или ТекущиеДанные.Свойство("ДатаЗакрытия") И ЗначениеЗаполнено(ТекущиеДанные.ДатаЗакрытия)) Тогда
			ПараметрОповещения = Новый Структура("Ссылка, Владелец, ОсновнойБанковскийСчет",
				ТекущиеДанные.Ссылка,
				ТекущиеДанные.Владелец,
				ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка"));
			Оповестить("ИзмененБанковскийСчет", ПараметрОповещения);
		Иначе
			УправлениеФормойКлиент();
		КонецЕсли;
	КонецЕсли;
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	БИКБанков = Новый Массив;
	Для каждого ЭлементСписка Из Строки Цикл
		БИКБанков.Добавить(ЭлементСписка.Значение.Данные.БИК);
	КонецЦикла;
	
	Результат = НадежностьБанков.ИнформацияОКритичныхСобытиях(БИКБанков);
	Если НЕ Результат.Используется Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Строки Цикл
		ЕстьСобытие = Результат.События[ЭлементСписка.Значение.Данные.БИК] <> Неопределено;
		Если ЕстьСобытие Тогда
			ЭлементСписка.Значение.Оформление["Наименование"].УстановитьЗначениеПараметра(
				"ЦветТекста",
				ЦветаСтиля.КритичноеСобытиеНадежностьБанковЦветТекста);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьОсновным(Команда)
	
	Если Элементы.Список.ТекущиеДанные = Неопределено
		Или Не Элементы.Список.ТекущиеДанные.Свойство("Ссылка")
		Или Не Элементы.Список.ТекущиеДанные.Свойство("Владелец") Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Список.ТекущиеДанные.Ссылка = ОсновнойБанковскийСчет Тогда
		ОсновнойБанковскийСчет = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Иначе
		ОсновнойБанковскийСчет = Элементы.Список.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	УстановитьПараметрыСписка(ЭтотОбъект);
	
	УстановкаОсновногоБанковскогоСчетаВыполнена = Ложь;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КонтрагентОрганизация",  Элементы.Список.ТекущиеДанные.Владелец);
	СтруктураПараметров.Вставить("ОсновнойБанковскийСчет", ОсновнойБанковскийСчет);
	
	Оповестить("УстановкаОсновногоБанковскогоСчета", СтруктураПараметров);
	
	// Если форма владельца закрыта, то запишем основной банковский счет самостоятельно.
	Если Не УстановкаОсновногоБанковскогоСчетаВыполнена Тогда
		УстановитьОсновнойБанковскийСчет(СтруктураПараметров);
	КонецЕсли;
	
	УправлениеФормойКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура УстановитьОсновнойБанковскийСчет(СтруктураПараметров)
	
	Справочники.БанковскиеСчета.УстановитьОсновнойБанковскийСчет(
		СтруктураПараметров.КонтрагентОрганизация,
		СтруктураПараметров.ОсновнойБанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойКлиент()
	
	Если ОсновнойБанковскийСчет = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ДоступноИспользоватьОсновным И ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Свойство("Ссылка") Тогда
			Элементы.ФормаИспользоватьОсновным.Пометка = ТекущиеДанные.Ссылка = ОсновнойБанковскийСчет;
		КонецЕсли;
		
		Если ТекущиеДанные.Свойство("ПометкаУдаления") И ТекущиеДанные.ПометкаУдаления Тогда
			Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
		ИначеЕсли ТекущиеДанные.Свойство("ДатаЗакрытия") И ЗначениеЗаполнено(ТекущиеДанные.ДатаЗакрытия) Тогда
			Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
		Иначе
			Элементы.ФормаИспользоватьОсновным.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ФормаИспользоватьОсновным.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыСчетов()
	
	СтатусыСчетов = Новый Структура;
	СтатусыСчетов.Вставить("СчетВРежимеИнтеграции", 0);
	СтатусыСчетов.Вставить("СчетБезИнтеграции", 1);
	
	Возврат СтатусыСчетов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыСписка(Форма)
	
	Список = Форма.Список;
	
	СтатусыСчетов = СтатусыСчетов();
	Список.Параметры.УстановитьЗначениеПараметра("СтатусСчетВРежимеИнтеграции", СтатусыСчетов.СчетВРежимеИнтеграции);
	Список.Параметры.УстановитьЗначениеПараметра("СтатусСчетБезИнтеграции", СтатусыСчетов.СчетБезИнтеграции);
	
	Если ЗначениеЗаполнено(Форма.ОсновнойБанковскийСчет) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнойБанковскийСчет", Форма.ОсновнойБанковскийСчет);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ОсновнойБанковскийСчет", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Список.УсловноеОформление.Элементы.Очистить();
	Элемент = Список.УсловноеОформление.Элементы.Добавить();
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаЗакрытия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
