#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция БанковскиеСчетаОрганизации(ВладелецСчета, ВалютаСчета) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Основной
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной УБЫВ,
	|	Представление";
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ВладелецСчета", ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта",        ВалютаСчета);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Владелец) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции

Функция КоличествоБанковскихСчетовОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Выборка.Количество;
	Иначе
		Количество = 0;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Процедура ПроверитьУстановитьЗначениеОпцииИспользоватьНесколькоБанковскихСчетовОрганизации(Организация, ПометкаУдаления = Ложь) Экспорт
	
	ДолжныИспользоваться = ПометкаУдаления ИЛИ КоличествоБанковскихСчетовОрганизации(Организация) > 1;
	Если ДолжныИспользоваться Тогда
		ВключитьИспользованиеНесколькоБанковскихСчетов(Организация);
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуетсяНесколькоБанковскихСчетовОрганизации(Организация) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоБанковскихСчетовОрганизации",
		Новый Структура("Организация", Организация));
	
КонецФункции

Процедура УстановитьОсновнойБанковскийСчет(Владелец, БанковскийСчет) Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации")
		И НЕ ПравоДоступа("Изменение", Метаданные.Справочники.Организации) Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентОрганизацияОбъект = Владелец.ПолучитьОбъект();
	
	УстановитьОсновнойБанковскийСчет = Истина;
	
	Попытка
		КонтрагентОрганизацияОбъект.Заблокировать();
	Исключение
		// в случае блокировки - не выполнять изменение объекта
		УстановитьОсновнойБанковскийСчет = Ложь;
		// записать предупреждение в журнал регистрации
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось заблокировать объект.'", Метаданные.ОсновнойЯзык.КодЯзыка),
			УровеньЖурналаРегистрации.Предупреждение,, КонтрагентОрганизацияОбъект, ОписаниеОшибки());
	КонецПопытки;
	
	Если УстановитьОсновнойБанковскийСчет Тогда
		КонтрагентОрганизацияОбъект.ОсновнойБанковскийСчет = БанковскийСчет;
		КонтрагентОрганизацияОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПодразделениеПоУмолчанию(Организация, БанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ПодразделениеПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ПодразделениеОрганизации");
		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Возврат ПодразделениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	ТипПодразделения = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипПодразделения();
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если Не ЗначениеЗаполнено(ПодразделениеПоУмолчанию) 
		Или ТипЗнч(ПодразделениеПоУмолчанию) <> ТипПодразделения Тогда
		Возврат Новый(ТипПодразделения);
	КонецЕсли;
	
	ОрганизацияПодразделения = БухгалтерскийУчетПереопределяемый.ОрганизацияПодразделения(ПодразделениеПоУмолчанию);
	Если ОрганизацияПодразделения <> Организация Тогда
		Возврат Новый(ТипПодразделения);
	КонецЕсли;
	
	Возврат ПодразделениеПоУмолчанию;
	
КонецФункции

Функция БанковскийСчетПоРеквизитам(Владелец, Банк, НомерСчета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Банк = &Банк
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	ТипСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(БанковскиеПравила.МаксимальнаяДлинаМеждународногоНомераСчета());
	ПриведенныйНомерСчета = ТипСтрока.ПривестиЗначение(НомерСчета);
	Запрос.УстановитьПараметр("НомерСчета", ПриведенныйНомерСчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Получает ссылку на элемент справочника с переданными свойствами.
// Если элемент с таким набором свойств отсутствует в справочнике,
// он автоматически создается.
//
// Параметры:
//  - Владелец - Ссылка - ссылка на элемент-владелец
//  - НомерСчета - Строка - номер банковского счета
//  - БИК        - Строка - БИК банка
//  - ДанныеЗаполнения - Структура - дополнительные данные для заполнения нового элемента справочника
//
// Возвращаемое значение:
//  - Ссылка - ссылка на элемент справочника
//
Функция ПолучитьЭлемент(Знач Владелец, Знач НомерСчета, Знач БИК, ДанныеЗаполнения = Неопределено) Экспорт
	
	Результат = ПустаяСсылка();
	
	// Поиск существующего банковского счета по номеру и БИК
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",   Владелец);
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("БИК",        БИК);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.НомерСчета = &НомерСчета
	|	И БанковскиеСчета.Банк.Код = &БИК
	|	И БанковскиеСчета.Банк.КоррСчет = &КоррСчет";
	
	КоррСчет = "";
	Если ЗначениеЗаполнено(ДанныеЗаполнения)
		И ДанныеЗаполнения.Свойство("КоррСчетБанка", КоррСчет)
		И ПлатежиВБюджетКлиентСервер.РеквизитЗаполнен(КоррСчет)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоррСчет) Тогда
		КоррСчет = СокрЛП(СтрЗаменить(КоррСчет, "00000000000000000000", ""));
		Запрос.УстановитьПараметр("Коррсчет", КоррСчет);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И БанковскиеСчета.Банк.КоррСчет = &КоррСчет", "");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Если Результат.Пустая() Тогда
		
		ДанныеБанковскогоСчета = Новый Структура;
		ДанныеБанковскогоСчета.Вставить("Владелец",   Владелец);
		ДанныеБанковскогоСчета.Вставить("НомерСчета", НомерСчета);
		ДанныеБанковскогоСчета.Вставить("БИК",        БИК);
		ДанныеБанковскогоСчета.Вставить("КоррСчетБанка", КоррСчет);
		
		Если ДанныеЗаполнения <> Неопределено Тогда
			Если ДанныеЗаполнения.Свойство("НаименованиеБанка") Тогда
				ДанныеБанковскогоСчета.Вставить("НаименованиеБанка", ДанныеЗаполнения.НаименованиеБанка);
			ИначеЕсли ДанныеЗаполнения.Свойство("Банк") И ТипЗнч(ДанныеЗаполнения.Банк) = Тип("Строка") Тогда
				ДанныеБанковскогоСчета.Вставить("НаименованиеБанка", ДанныеЗаполнения.Банк);
			КонецЕсли;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = СоздатьЭлемент();
		БанковскийСчетКонтрагента.Заполнить(ДанныеБанковскогоСчета);
		БанковскийСчетКонтрагента.Записать();
		
		Результат = БанковскийСчетКонтрагента.Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция БанковскийСчетПоГосОбронЗаказу(Владелец, ГосКонтракт, Валюта = Неопределено) Экспорт
	
	Если Валюта = Неопределено Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	БанковскийСчет = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",    Владелец);
	Запрос.УстановитьПараметр("ГосКонтракт", ГосКонтракт);
	Запрос.УстановитьПараметр("Валюта",      Валюта);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Владелец
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|	И БанковскиеСчета.ГосударственныйКонтракт = &ГосКонтракт
	|	И НЕ БанковскиеСчета.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		БанковскийСчет = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат БанковскийСчет;
	
КонецФункции

// Возвращает реквизиты банковского счета - номер счета, БИК банка, вид счета, дата открытия и закрытия счета.
//
// Параметры:
//   БанковскийСчет - СправочникСсылка.БанковскиеСчета - ссылка на счет.
//
// Возвращаемое значение:
//   - Структура - реквизиты счета.
//   - Неопределено - если счет не найден.
//
Функция РеквизитыСчета(БанковскийСчет) Экспорт
	
	Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК БИКБанка,
	|	БанковскиеСчета.Банк.Наименование КАК НаименованиеБанка,
	|	БанковскиеСчета.ВидСчета КАК ВидСчета,
	|	БанковскиеСчета.ДатаОткрытия КАК ДатаОткрытия,
	|	БанковскиеСчета.ДатаЗакрытия КАК ДатаЗакрытия
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчет";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() > 0 Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

Процедура ВключитьИспользованиеНесколькоБанковскихСчетов(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запись = РегистрыСведений.ИспользоватьНесколькоБанковскихСчетовОрганизации.СоздатьМенеджерЗаписи();
	Запись.Организация  = Организация;
	Запись.Используется = Истина;
	Запись.Записать();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК БанковскиеСчета
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК ОбособленныеПодразделения 
	|	ПО ОбособленныеПодразделения.ГоловнаяОрганизация = БанковскиеСчета.Владелец.ГоловнаяОрганизация
	|;
	|РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(ОбособленныеПодразделения.Ссылка)
	|ИЛИ ( ЗначениеРазрешено(БанковскиеСчета.Владелец ТОЛЬКО Справочник.ФизическиеЛица)
	|          И ЧтениеСпискаРазрешено(БанковскиеСчета.Владелец ТОЛЬКО Справочник.ФизическиеЛица) )
	|ИЛИ ЧтениеСпискаРазрешено(БанковскиеСчета.Владелец ТОЛЬКО Справочник.Контрагенты)
	|
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(БанковскиеСчета.Владелец)
	|  И ИзменениеСпискаРазрешено(БанковскиеСчета.Владелец)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ПубликацияДанных

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор справочника Банковские счета.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "bank_accounts";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если НЕ Параметры.Отбор.Свойство("Владелец") Или НЕ ЗначениеЗаполнено(Параметры.Отбор.Владелец) Тогда
		
		Если НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
			
			Параметры.Отбор.Вставить("Владелец",
				БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

#Область ПубликацияДанных

Функция ПубликуемыеДанные(Организация) Экспорт
	
	ПубликуемыеДанные = Новый Структура;
	ДанныеСчетов = Новый Массив;
	
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ТаблицаБанковскихСчетов = БанковскиеСчетаОрганизации(Организация, ВалютаРеглУчета);
	БанковскиеСчета = ТаблицаБанковскихСчетов.ВыгрузитьКолонку("Ссылка");
	РеквизитыСчетов = РеквизитыБанковскихСчетов(БанковскиеСчета);
	Для Каждого РеквизитыСчета Из РеквизитыСчетов Цикл
		ДанныеСчета = Новый Структура;
		Для Каждого ПравилоПубликации Из ПравилаПубликацииБанковскогоСчета() Цикл
			ОпубликоватьЗначениеПоПравилу(РеквизитыСчета, ПравилоПубликации, ДанныеСчета);
		КонецЦикла;
		
		ДанныеСчетов.Добавить(ДанныеСчета);
	КонецЦикла;
	
	ПубликуемыеДанные.Вставить(ПубликуемыйИдентификатор(), ДанныеСчетов);
	
	Возврат ПубликуемыеДанные;
	
КонецФункции

Функция РеквизитыБанковскихСчетов(БанковскиеСчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("БанковскиеСчета", БанковскиеСчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК БанкКод,
	|	БанковскиеСчета.ДатаОткрытия КАК ДатаОткрытия,
	|	БанковскиеСчета.ДатаЗакрытия КАК ДатаЗакрытия
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Ссылка В(&БанковскиеСчета)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОпубликоватьЗначениеПоПравилу(ИсходныеДанные, ПравилоПубликации, ПубликуемыеДанные)
	
	ПубликуемоеЗначение = ИсходныеДанные[ПравилоПубликации.Идентификатор1С];
	Если ТипЗнч(ПубликуемоеЗначение) = Тип("Дата") Тогда
		Если ЗначениеЗаполнено(ПубликуемоеЗначение) Тогда
			ПубликуемоеЗначение = XMLСтрока(ПубликуемоеЗначение);
		Иначе
			ПубликуемоеЗначение = "";
		КонецЕсли;
	КонецЕсли;
	ПубликуемыеДанные.Вставить(ПравилоПубликации.ПубликуемыйИдентификатор, ПубликуемоеЗначение);
	
КонецПроцедуры

Функция ПравилаПубликацииБанковскогоСчета()
	
	Правила = НовыеПравилаПубликации();
	
	ДобавитьПравилоПубликации(Правила, "БанкКод",      "bank");
	ДобавитьПравилоПубликации(Правила, "НомерСчета",   "account");
	ДобавитьПравилоПубликации(Правила, "ДатаОткрытия", "opening_date");
	ДобавитьПравилоПубликации(Правила, "ДатаЗакрытия", "closing_date");
	
	Возврат Правила;
	
КонецФункции

Функция НовыеПравилаПубликации()
	
	Правила = Новый ТаблицаЗначений;
	
	ОписаниеТипаСтрока = ОбщегоНазначения.ОписаниеТипаСтрока(0);
	
	Правила.Колонки.Добавить("Идентификатор1С",          ОписаниеТипаСтрока);
	Правила.Колонки.Добавить("ПубликуемыйИдентификатор", ОписаниеТипаСтрока);
	
	Возврат Правила;
	
КонецФункции

Процедура ДобавитьПравилоПубликации(Правила, Идентификатор1С, ПубликуемыйИдентификатор)
	
	НовоеПравило = Правила.Добавить();
	
	НовоеПравило.Идентификатор1С          = Идентификатор1С;
	НовоеПравило.ПубликуемыйИдентификатор = ПубликуемыйИдентификатор;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиОбновления

// Выполняет проверки на корректность заполнения номера счета и БИК.
//
// Параметры:
//  БанковскийСчет   - ДанныеФормыСтруктура - банковский счет, который требуется проверить.
//  КодБанка         - Строка - БИК банка, проверяемого счета.
//  ЯвляетсяБанкомРФ - Булево, признак российского банка.
//  Отказ            - Булево - см. описание параметра Отказ в процедуре ОбработкаПроверкиЗаполнения.
//
Процедура ОбработкаПроверкиЗаполнения(БанковскийСчет, КодБанка, ЯвляетсяБанкомРФ, Отказ) Экспорт
	
	ТекстСообщения = "";
	
	Если Не ЗначениеЗаполнено(БанковскийСчет.Банк)
		И ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.Банк",, Отказ);
		
	ИначеЕсли ЗначениеЗаполнено(БанковскийСчет.Банк)
		И Не ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.НомерСчета",, Отказ);
		
	КонецЕсли;
	
	Если БанковскиеСчетаФормыКлиентСервер.НомерСчетаКорректен(БанковскийСчет.НомерСчета, КодБанка, ЯвляетсяБанкомРФ, ТекстСообщения) Тогда
		
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета)
			И ЗначениеЗаполнено(БанковскийСчет.Банк)
			И Не ЗначениеЗаполнено(БанковскийСчет.ВалютаДенежныхСредств) Тогда
			
			Если ЯвляетсяБанкомРФ Тогда
				Если НЕ БанковскиеПравила.ЭтоРублевыйСчет(БанковскийСчет.НомерСчета) Тогда
					ТекстСообщения = Нстр("ru = 'Валюта счета неизвестна. Проверьте номер счета'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.НомерСчета",, Отказ);
				КонецЕсли;
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Валюта счета'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.ВалютаДенежныхСредств",, Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность",
			НСтр("ru = 'Номер счета'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "БанковскийСчет.НомерСчета",, Отказ);
		
	КонецЕсли;
	
	// Если есть ошибка, то запишем информацию о проблеме с расчетным счетом в журнал регистрации.
	Если Отказ И НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Не удалось записать банковский счет'"),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Справочники.БанковскиеСчета,
			,
			ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
