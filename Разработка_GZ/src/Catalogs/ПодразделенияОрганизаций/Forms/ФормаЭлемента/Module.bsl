#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Обработчик подсистемы "Контактная информация"
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = СтатическиеРеквизиты();
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	РазрешеноИзменениеРегистрацииВНалоговомОргане = 
		ПравоДоступа("Редактирование", Метаданные.Справочники.РегистрацииВНалоговомОргане)
		И ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане);
	
	Если Не РазрешеноИзменениеРегистрацииВНалоговомОргане Тогда
		Элементы.КПП.ТолькоПросмотр                                              = Истина;
		Элементы.ОбособленноеПодразделение.ТолькоПросмотр                        = Истина;
		Элементы.ОбособленноеПодразделениеДляНебольшихОрганизаций.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда 
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, РегистрацияВНалоговомОргане.Код, 
				ПлатежныеРеквизитыФНСПредставление);
				
	// Установка списка выбора регионов
	КодРегионаРегистрации = Формат(РегистрацияВНалоговомОргане.КодРегиона, "ЧЦ=2; ЧН=; ЧВН=");
	НастройкиУчетаНалогаНаПрибыльФормы.НастроитьЭлементыУказанияРегиона(
		ТребуетсяУказаниеРегиона,
		Элементы.КодРегионаРегистрации.СписокВыбора,
		КодРегионаРегистрации);
		
	// ИП также может вводить обособленные подразделения для расчета зарплаты.
	// Определим, является ли владелец подразделения физ. лицом.
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ЮридическоеФизическоеЛицо");
	ЭтоФизЛицо = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	// Если адрес не заполнен (например, для нового подразделения),
	// то не показываем кнопку смены адреса до следующего открытия формы
	Элементы.ПоставитьНаУчетПоНовомуАдресу.Видимость = НЕ ЭтоФизЛицо 
		И ОрганизацииФормыКлиентСервер.АдресЗаполен(ЭтотОбъект, "КонтактнаяИнформацияПолеФактическийАдресПодразделенияОрганизаций");
		
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПроверитьСоответствиеТребованиямКПП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Не ВестиУчетЗатратПоПодразделениям Тогда
	
		Оповестить("Запись_Подразделения", , Объект.Ссылка);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане)
		И МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
		Оповестить("ИзмененаРегистрацияВНалоговомОргане", Новый Структура("Ссылка", Объект.РегистрацияВНалоговомОргане), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.РегистрацияВНалоговомОргане) Тогда
		//Если основная регистрация заполнена, а данные для сохранения регистрации есть,
		//то нужно установить ссылку для поля РегистрацияВНалоговомОргане
		//В ПриЗаписи эта ссылка будет использована для сохранения регистрации в налоговом органе
		Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
			
			ТекущийОбъект.РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПолучитьСсылку();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, Отказ);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьДанныеРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ);
	
	ОтветственныйПриЗаписиНаСервере(Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПрочитатьРегистрациюВНалоговомОргане();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
		Объект.РегистрацияВНалоговомОргане = НовыйОбъект;
		РегистрацияВНалоговомОрганеПриИзменении("");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененаРегистрацияВНалоговомОргане" Тогда
		Если НЕ ТолькоПросмотр Тогда
			Если РегистрацияВНалоговомОргане.Ссылка = Параметр.Ссылка Тогда
				ОбновитьРегистрациюПослеЗаписиВФормеРегистрации(РегистрацияВНалоговомОргане.Ссылка);
				ПроверитьСоответствиеТребованиямКПП();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеОтветственныхЛиц" Тогда
		ОбновитьИнформациюОбответственныхЛицах();
	ИначеЕсли ИмяСобытия = "ОтредактированаИстория" Тогда
		Если Параметр.ИмяРегистра = "ИсторияРегистрацийВНалоговомОргане"
			И Параметр.ВедущийОбъект = Объект.Ссылка Тогда
			
			ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Очистить();
			Для Каждого ЗаписьНабора Из Параметр.НаборЗаписей Цикл
				ЗаписьИстории = ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
			КонецЦикла;
			
			ПослеРедактированияИсторииРегистрацийВНалоговомОргане();
			ПроверитьСоответствиеТребованиямКПП();
			
		КонецЕсли;
	Иначе
		// Подсистема "Свойства"
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ИмяОбработкиВводаКонтактнойИнформации = "Обработка.ВводКонтактнойИнформации";
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И Лев(ИсточникВыбора.ИмяФормы, СтрДлина(ИмяОбработкиВводаКонтактнойИнформации)) = ИмяОбработкиВводаКонтактнойИнформации Тогда
		
		Возврат;
		
	ИначеЕсли ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
			И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
			И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Объект.ОбособленноеПодразделение 
		И ВладелецЯвляетсяЮрлицом
		И Не ЗначениеЗаполнено(Объект.КПП) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""КПП"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.КПП", , Отказ);
	КонецЕсли;
	
	Если ОтчетностьПодписываетПредставитель = 1
		И НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		
		ТекстСообщения = НСтр("ru = 'Заполните сведения о представителе'"); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПредставлениеПредставителя",, Отказ);
		
	КонецЕсли;
	
	Если Объект.ОбособленноеПодразделение Тогда
		Если ПостановкаНаУчетВРосстате = 1 И НЕ ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите код территориального органа Росстата'"); 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КодОрганаФСГСПолучателя",, Отказ);
		КонецЕсли;
		
		ВладелецКодПоОКПО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "КодПоОКПО");
		Если ЗначениеЗаполнено(Объект.КодПоОКПО) Тогда
			Если СтрДлина(ВладелецКодПоОКПО) = 8 И СтрДлина(Объект.КодПоОКПО) = 14 Тогда
				Если Лев(Объект.КодПоОКПО, 8) <> Лев(ВладелецКодПоОКПО, 8) Тогда
					ТекстСообщения = НСтр("ru = 'Код ОКПО подразделения не соответствует коду ОКПО организации'"); 
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "КодПоОКПО");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.ОбособленноеПодразделение Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодНалоговогоОргана");
	КонецЕсли;
	
	Если ТребуетсяУказаниеРегиона
		И Объект.ОбособленноеПодразделение
		И ЗначениеЗаполнено(КодНалоговогоОргана)
		И (НЕ ЗначениеЗаполнено(КодРегионаРегистрации) ИЛИ КодРегионаРегистрации = "00") Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Регион"" в разделе ""Налоговая инспекция"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КодРегионаРегистрации", , Отказ);
	КонецЕсли; 
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РодительПриИзменении(Элемент)
	
	РодительПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура РодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Запрещаем в подчинение обособленному подразделению передавать необособленные.
	ОбработкаИзмененияРодителя(ВыбранноеЗначение, СтандартнаяОбработка);
	СтандартнаяОбработка = НЕ СтандартнаяОбработка;

КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	ВладелецПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	// ИП также может вводить обособленные подразделения для расчета зарплаты.
	// Определим, является ли владелец подразделения физ. лицом.
	ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ЮридическоеФизическоеЛицо");
	ЭтоФизЛицо = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Если Объект.ОбособленноеПодразделение Тогда
		УстановитьРегистрациюВНалоговомОргане();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	ОбособленноеПодразделениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленноеПодразделениеДляНебольшихОрганизацийПриИзменении(Элемент)
	
	ОбособленноеПодразделениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	ПриИзмененииКПП();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРегистрацийВНалоговомОрганеНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
		
		ЗаписатьРегистрациюВНалоговомОргане();
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("НаборЗаписей, ВедущийОбъект, ВладелецРегистрацииВНалоговомОргане", 
					ИсторияРегистрацийВНалоговомОрганеНаборЗаписей, 
					Объект.Ссылка,
					ВладелецРегистрации());
	
	ОткрытьФорму("РегистрСведений.ИсторияРегистрацийВНалоговомОргане.Форма.РедактированиеИстории", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСУчета(Команда)
	
	ЗаписатьРегистрациюВНалоговомОргане();
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("СнятьСУчетаЗавершение", ЭтотОбъект);
	
	ОрганизацииФормыКлиент.ОткрытьФормуПомощникаСнятияСУчета(
		ЭтотОбъект,
		РегистрацияВНалоговомОргане.Ссылка,
		ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьНаУчетПоНовомуАдресу(Команда)
	
	ЗаписатьРегистрациюВНалоговомОргане();
	
	// Обеспечим, чтобы запись истории регистраций,
	// которая редактируется в вызываемой форме, была актуальна (т.е. последней по времени).
	// Для этого передаем в параметры формы дату актуальности истории регистраций.
	// В открываемой форме обеспечивается запрет на ввод даты новых сведений меньшей или равной указанной.
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АктуальныйПериодИсторииРегистраций",
		ОрганизацииФормыКлиент.АктуальныйПериодИсторииРегистраций(ЭтотОбъект));
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ПоставитьНаУчетПоНовомуАдресуЗавершение", ЭтотОбъект);
	
	ОрганизацииФормыКлиент.ОткрытьФормуПомощникаСменыАдреса(
		ЭтотОбъект,
		"КонтактнаяИнформацияПолеФактическийАдресПодразделенияОрганизаций",
		ОповещениеЗавершения,
		ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеФактАдресПодразделенияНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаПриИзменении(Элемент)
	
	РегистрацияВНалоговомОргане.КодРегиона = КодРегионаРегистрации;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьСписокРегионов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНаименованиеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НалоговыйОрганУстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеНаименованиеИФНСПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеРеквизитыФНСПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
	ПараметрыФормы.Вставить("КодГосударственногоОргана", КодНалоговогоОргана);
	ПараметрыФормы.Вставить("НаименованиеГосударственногоОргана", РегистрацияВНалоговомОргане.НаименованиеИФНС);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ПлатежныеРеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеКодПоОКТМОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеКодПоОКАТОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КодПоОКПОПриИзменении(Элемент)
	
	КодыСтатистикиУстановитьЗаголовок(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПолучателяПриИзменении(Элемент)
	
	КодыСтатистикиУстановитьЗаголовок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодОрганаФСГСПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", Новый ОписаниеОповещения("ОбработкаВыбораКодОрганаФСГСПолучателя", ЭтотОбъект));
	
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		ДополнительныеПараметры.Вставить("ТекущийКодТОГС", Объект.КодОрганаФСГС);
	Иначе
		
		ИмяЭлементаАдреса = "КонтактнаяИнформацияПолеФактическийАдресПодразделенияОрганизаций";
		ДанныеСтрокиКИ = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(
			ЭтотОбъект,
			ИмяЭлементаАдреса);
		
		Если ДанныеСтрокиКИ <> Неопределено Тогда
			ЗначениеАдресаJSON = ДанныеСтрокиКИ.Значение;
			КодРегиона = КодРегионаПоАдресу(ЗначениеАдресаJSON);
			Если ЗначениеЗаполнено(КодРегиона) Тогда
				ДополнительныеПараметры.Вставить("КодРегиона", Формат(КодРегиона, "ЧЦ=2; ЧН=; ЧВН="));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ВыбратьКодОрганаТОГС(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановкаНаУчетВРосстатеПриИзменении(Элемент)
	
	Если ПостановкаНаУчетВРосстате = 0 Тогда
		Объект.КодОрганаФСГС = "";
	КонецЕсли;
	УправлениеРеквизитамиКодыСтатистики(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетностьПодписываетПредставительПриИзменении(Элемент)
	
	Модифицированность = Истина;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура("Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя", ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	РегистрацияВНалоговомОрганеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	КодНалоговогоОрганаПриИзмененииНаСервере();
	ЗаполнитьСписокРегионов(Элементы.КодРегионаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура КассирФИОПриИзменении(Элемент)
	
	ИзмененКассир = Истина;
	
	ЭтотОбъект.Модифицированность = истина;
	
	Если ЗначениеЗаполнено(КассирФизЛицо) тогда
		КассирДолжность = ПолучитьДолжностьНасервере(Объект.Владелец, КассирФизЛицо,"Кассир");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассирДолжностьПриИзменении(Элемент)
	
	ИзмененКассир = Истина;
	
	ЭтотОбъект.Модифицированность = истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаИстория(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Перед просмотром истории необходимо записать элемент. Записать?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередПросмотромИсторииЗаписатьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПараметрыФормы = новый Структура;
		ПараметрыФормы.Вставить("Отбор", новый Структура("СтруктурнаяЕдиница",Объект.Ссылка));
		ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаСписка",ПараметрыФормы,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговогоОрганаПоКоду(Команда)
	
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""Код инспекции"" не заполнено'"));
		ТекущийЭлемент = Элементы.КодНалоговогоОргана;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеСведенийОНалоговойИнспекции();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияНажатие(Элемент)
	
	Перем ОтветственноеЛицо;
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтветственноеЛицо	= ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.Кассир");
	
	Отбор	= Новый Структура("СтруктурнаяЕдиница,ОтветственноеЛицо",
		Объект.Ссылка,
		ОтветственноеЛицо);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияИсторияПодписиНажатиеЗавершение", ЭтотОбъект);
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",	Отбор);
	ПараметрыФормы.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
		
	ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.Форма.ФормаИстории", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЗаполнитьДобавленныеРеквизитыФормы();
	
	Если Объект.ОбособленноеПодразделение Тогда
		ОбновитьИнформациюОбответственныхЛицах();
	КонецЕсли;
	
	Элементы.Владелец.Видимость = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	Элементы.ГруппаКПП.Видимость = ВладелецЯвляетсяЮрлицом;
	
	ПрочитатьРегистрациюВНалоговомОргане();
	
	УстановитьВидимостьГрупп();
	
	ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеРеквизитыФормы(ИндексСтрокиТаблицы = Неопределено)

	ВладелецЯвляетсяЮрлицом = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ЮридическоеФизическоеЛицо") 
								= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
								
	Если НЕ Параметры.Ключ.Пустая() Тогда
		ЕстьПодчиненныеЭлементы = ПолучитьНаличиеПодчиненныхЭлементов(Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбОтветственныхЛицах()
	
	КассирКлючЗаписи			= РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч();
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос	= Новый Запрос;
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница",	Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Период КАК Период,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	""Кассир"" КАК ПредставлениеОтветственногоЛица,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо) КАК ПредставлениеФизическоеЛицо,
	|	ПРЕДСТАВЛЕНИЕ(ОтветственныеЛицаОрганизацийСрезПоследних.Должность) КАК ПредставлениеДолжность,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|	И ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Кассир)";
	
	
	Отбор	= Новый Структура("Период, СтруктурнаяЕдиница, ОтветственноеЛицо");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭлементФормы	= ЭтотОбъект.Элементы.Найти(Выборка.ПредставлениеОтветственногоЛица);

		Если  ЭлементФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица] = НаименованиеОтветственногоЛица(Выборка.ПредставлениеФизическоеЛицо, Выборка.ПредставлениеДолжность);
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица+"Должность"]	= Выборка.Должность;
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица+"ФизЛицо"]	= Выборка.ФизическоеЛицо;
					
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		ЭтотОбъект[Выборка.ПредставлениеОтветственногоЛица + "КлючЗаписи"]	= РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьКлючЗаписи(Отбор);
		
	КонецЦикла;
	
	ПодписиУстановитьЗаголовок(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаличиеПодчиненныхЭлементов(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Родитель,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)
	|	И ПодразделенияОрганизаций.ОбособленноеПодразделение = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ОбособленноеПодразделение Тогда
		ДоступностьОП = ?(ЗначениеЗаполнено(Объект.Родитель), НЕ ЭтоОбособленноеПодразделение(Объект.Родитель), Истина);
	Иначе
		ДоступностьОП = ?(Объект.Ссылка.Пустая(), Истина, НЕ ПолучитьНаличиеПодчиненныхЭлементов(Объект.Ссылка));
	КонецЕсли;
	Элементы.ОбособленноеПодразделение.Доступность                        = ДоступностьОП;
	Элементы.ОбособленноеПодразделениеДляНебольшихОрганизаций.Доступность = ДоступностьОП;
	
	// Группа Налоговая инспекция
	КодНалоговогоОрганаУказан = ЗначениеЗаполнено(Форма.КодНалоговогоОргана);
	
	Элементы.РегистрацияВНалоговомОрганеНаименование.Доступность = КодНалоговогоОрганаУказан;
	Элементы.РегистрацияВНалоговомОрганеНаименованиеИФНС.Доступность = КодНалоговогоОрганаУказан;
	Элементы.ПлатежныеРеквизитыФНСПредставление.Доступность    = КодНалоговогоОрганаУказан;
	Элементы.РегистрацияВНалоговомОрганеКодПоОКТМО.Доступность = КодНалоговогоОрганаУказан;
	Элементы.РегистрацияВНалоговомОрганеКодПоОКАТО.Доступность = КодНалоговогоОрганаУказан;
	Элементы.ГруппаПодписаниеОтчетности.Доступность            = КодНалоговогоОрганаУказан;
	Элементы.КодРегионаРегистрации.Доступность 				   = КодНалоговогоОрганаУказан;
	
	// Группа элементов представителя для предоставления отчетности
	ОтчетностьПодписываетПредставитель 				= (Форма.ОтчетностьПодписываетПредставитель = 1);
	Элементы.ПредставлениеПредставителя.Видимость 	= ОтчетностьПодписываетПредставитель;
	Элементы.НадписьПредставительНеВыбран.Видимость = НЕ ОтчетностьПодписываетПредставитель;
	
	Если НЕ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.Представитель) Тогда
		Форма.ПредставлениеПредставителя = НСтр("ru = 'Заполнить'");
	ИначеЕсли ТипЗнч(Форма.РегистрацияВНалоговомОргане.Представитель) = Тип("СправочникСсылка.ФизическиеЛица")
		ИЛИ НЕ ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя) Тогда
		Форма.ПредставлениеПредставителя = Форма.РегистрацияВНалоговомОргане.Представитель;
	ИначеЕсли ТипЗнч(Форма.РегистрацияВНалоговомОргане.Представитель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Форма.ПредставлениеПредставителя = Форма.РегистрацияВНалоговомОргане.УполномоченноеЛицоПредставителя + " (" + Форма.РегистрацияВНалоговомОргане.Представитель + ")";
	КонецЕсли;
	
	НалоговыйОрганУстановитьЗаголовок(Форма);
	АдресИТелефонУстановитьЗаголовок(Форма);
	ПодписиУстановитьЗаголовок(Форма);
	
	ДоступностьИсторииРегистрацииВНалоговомОргане = Форма.Объект.ОбособленноеПодразделение И ЗначениеЗаполнено(Объект.Ссылка);
	Элементы.ИсторияРегистрацийВНалоговомОрганеКПП.Доступность                  = ДоступностьИсторииРегистрацииВНалоговомОргане;
	Элементы.ИсторияРегистрацийВНалоговомОрганеКодНалоговогоОргана.Доступность  = ДоступностьИсторииРегистрацииВНалоговомОргане;
	
	УправлениеРеквизитамиКодыСтатистики(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРегионов(Элемент)
	
	// В списке выбора региона может быть 1 элемент, который был заполнен при открытии формы
	// В этом случае требуется заполнить список выбора полностью
	// Если элементов более 1, то считаем, что список уже заполнен полностью
	Если НЕ ТребуетсяУказаниеРегиона ИЛИ Элемент.СписокВыбора.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;	
	
	СписокРегионов = Новый СписокЗначений;
	ЗаполнитьСписокРегионовСервер(ТребуетсяУказаниеРегиона, СписокРегионов);
	
	// Чтобы избежать дублирования элементов, очищаем список выбора в поле формы
	Элемент.СписокВыбора.Очистить();
	
	Для каждого Регион Из СписокРегионов Цикл
		Элемент.СписокВыбора.Добавить(Регион.Значение, Регион.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокРегионовСервер(ТребуетсяУказаниеРегиона, СписокРегионов)
	НастройкиУчетаНалогаНаПрибыльФормы.НастроитьЭлементыУказанияРегиона(ТребуетсяУказаниеРегиона, СписокРегионов);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НалоговыйОрганУстановитьЗаголовок(Форма)
	
	НалоговыйОрганЗаголовок = НСтр("ru='Налоговая инспекция'");
	Если ЗначениеЗаполнено(Форма.КодНалоговогоОргана) Тогда
		НалоговыйОрганЗаголовок = НалоговыйОрганЗаголовок + ": " + Форма.КодНалоговогоОргана + " " 
									+ Форма.РегистрацияВНалоговомОргане.Наименование;
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаНалоговыйОрган", НалоговыйОрганЗаголовок);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура КодыСтатистикиУстановитьЗаголовок(Форма, ПолучитьНаименованиеТОГС = Истина)
	
	Объект = Форма.Объект;
	Если ПолучитьНаименованиеТОГС 
		И Форма.ПостановкаНаУчетВРосстате = 1 Тогда
		Форма.НаименованиеТОГС = ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервера.НаименованиеТОГС(Объект.КодОрганаФСГС);
	КонецЕсли;
	
	КодыСтатистики = НСтр("ru='Коды статистики'");
	Если ЗначениеЗаполнено(Объект.КодПоОКПО)
		ИЛИ ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		КодыСтатистики = КодыСтатистики + ": ";
		Если ЗначениеЗаполнено(Объект.КодПоОКПО) Тогда
			КодыСтатистики = КодыСтатистики + НСтр("ru=', ОКПО '")  + Объект.КодПоОКПО;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
			КодыСтатистики = КодыСтатистики + НСтр("ru=', Код ТОГС '") + Объект.КодОрганаФСГС;
		КонецЕсли;
			
		КодыСтатистики = СтрЗаменить(КодыСтатистики, ": ,", ":");
	КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаКодыСтатистики", КодыСтатистики);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередПросмотромИсторииЗаписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ПараметрыФормы = новый Структура;
			ПараметрыФормы.Вставить("Отбор", новый Структура("СтруктурнаяЕдиница",Объект.Ссылка));
			ОткрытьФорму("РегистрСведений.ОтветственныеЛицаОрганизаций.ФормаСписка",ПараметрыФормы,ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеРеквизитамиКодыСтатистики(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(Объект.КодОрганаФСГС) Тогда
		Форма.ПостановкаНаУчетВРосстате = 1;
	КонецЕсли;
	
	КодОрганаФСГСДоступность = Форма.ПостановкаНаУчетВРосстате = 1;
	
	Элементы.КодОрганаФСГСПолучателя.Доступность               = КодОрганаФСГСДоступность;
	Элементы.КодОрганаФСГСПолучателя.АвтоОтметкаНезаполненного = КодОрганаФСГСДоступность;
	Элементы.НаименованиеТОГС.Видимость                        = КодОрганаФСГСДоступность;
	
	КодыСтатистикиУстановитьЗаголовок(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораКодОрганаФСГСПолучателя(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Объект.КодОрганаФСГС = ВыбранноеЗначение.КодТОГС;
		КодыСтатистикиУстановитьЗаголовок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РодительПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Родитель) Тогда
		РеквизитыРодителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Родитель, "РегистрацияВНалоговомОргане,Префикс,КодПоОКПО,КодОрганаФСГС");
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыРодителя);
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, КодНалоговогоОргана, Объект.РегистрацияВНалоговомОргане);
	Иначе
		Объект.РегистрацияВНалоговомОргане = "";
		Объект.Префикс                     = "";
		Объект.КодПоОКПО                   = "";
		Объект.КодОрганаФСГС               = "";
	КонецЕсли;
	Если Объект.ОбособленноеПодразделение Тогда
		РегистрацияВНалоговомОрганеПриИзмененииСервер();
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияРодителя(РодительПодразделения, Отказ = Ложь) Экспорт
	
	Отказ = Ложь;
	
	Если Объект.ОбособленноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(РодительПодразделения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОбособленноеПодразделение(РодительПодразделения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Указанное подразделение является обособленным.
																	|В группу обособленных подразделений может входить только обособленное подразделение.'"),,"Объект.Родитель",, Отказ);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РегистрацияВНалоговомОрганеПриИзмененииСервер()
	
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.РегистрацияВНалоговомОргане,"КПП");
	
	Если ВладелецЯвляетсяЮрлицом Тогда
		Объект.КПП = РеквизитыРегистрации.КПП;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоОбособленноеПодразделение(Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОбособленноеПодразделение");
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьГрупп()
	
	УчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	РасчетЗарплатыПоПодразделениям = БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций();
	
	Элементы.ГруппаОбособленноеПодразделение.Видимость = УчетПоПодразделениям;
	Элементы.ГруппаОбособленноеПодразделениеДляНебольшихОрганизаций.Видимость = РасчетЗарплатыПоПодразделениям
		И НЕ УчетПоПодразделениям;
	
	Элементы.ГруппаОсновныеСведения.Видимость     = Объект.ОбособленноеПодразделение 
		И (УчетПоПодразделениям ИЛИ РасчетЗарплатыПоПодразделениям);
	Элементы.ГруппаНалоговыйОрган.Видимость       = Объект.ОбособленноеПодразделение 
		И (УчетПоПодразделениям ИЛИ РасчетЗарплатыПоПодразделениям);
	Элементы.ГруппаКодыСтатистики.Видимость       = Объект.ОбособленноеПодразделение И УчетПоПодразделениям;
	Элементы.ГруппаПодписи.Видимость              = Объект.ОбособленноеПодразделение И УчетПоПодразделениям;
	Элементы.ГруппаКонтактнаяИнформация.Видимость = Объект.ОбособленноеПодразделение И УчетПоПодразделениям;
	Элементы.ГруппаПодписаниеОтчетности.Видимость = Объект.ОбособленноеПодразделение И УчетПоПодразделениям;
	Элементы.Префикс.Видимость                    = Объект.ОбособленноеПодразделение И УчетПоПодразделениям;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКПП()
	
	ПроверитьСоответствиеТребованиямКПП();
	
	Если НЕ КППСоответствуетТребованиям Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(Объект.КПП) >= 4 Тогда 
		Если ПустаяСтрока(КодНалоговогоОргана) Тогда
			КодНалоговогоОргана = Лев(Объект.КПП, 4);
			КодНалоговогоОрганаПриИзмененииНаСервере();
		ИначеЕсли Лев(Объект.КПП, 4) = КодНалоговогоОргана Тогда
			УстановитьРегистрациюВНалоговомОргане();
		Иначе
			// Если код налогового органа не соответствует КПП, то спросим пользователя
			ОповещениеЗавершения = Новый ОписаниеОповещения("ПоказатьВопросПриИзмененииКППЗавершение", ЭтотОбъект);
		    ОрганизацииФормыКлиент.ПоказатьВопросИзменитьКодНалоговогоОргана(Объект.КПП, КодНалоговогоОргана, ОповещениеЗавершения);
			// Остальные действия выполняем после ответа на вопрос
			Возврат;
		КонецЕсли;
	Иначе
		УстановитьРегистрациюВНалоговомОргане();
	КонецЕсли;
	
	// После изменения регистрации, возможно, требуется вывести пояснение о закрытом КПП
	ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьСУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		РегистрацияВНалоговомОргане.ДатаСнятияСУчета = Результат;
		// Выведем пояснение о снятии с учета
		ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьНаУчетПоНовомуАдресуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;	
			
	ИмяЭлементаАдреса = "КонтактнаяИнформацияПолеФактическийАдресПодразделенияОрганизаций";
	
	Если СокрЛП(Результат.НовыйАдрес) <> СокрЛП(ЭтотОбъект[ИмяЭлементаАдреса]) Тогда
		
		ДанныеСтрокиКИ = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(
			ЭтотОбъект,
			ИмяЭлементаАдреса);
			
		// На форме механизмом БСП должен быть создан реквизит для хранения полей адреса.
		// Если реквизит не найден, то вызовем ошибку.
		Если ДанныеСтрокиКИ = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Не найден реквизит формы для хранения адреса:
							|%1'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Элементы[ИмяЭлементаАдреса]);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;	
		
		// Обновляем представление адреса в указанном реквизите
		ЭтотОбъект[ИмяЭлементаАдреса] = Результат.НовыйАдрес;
		
		ЗаполнитьЗначенияСвойств(ДанныеСтрокиКИ, Результат.ДанныеАдреса, "Значение, Представление");
		
	КонецЕсли;
	
	// Обновляем КПП и код налогового органа, а также добавляем пустую запись в историю регистраций
	// Процедура УстановитьРегистрациюВНалоговомОргане() сделает все оставшееся:
	//	- обновит текущую регистрацию организации
	//	- заполнит добавленную запись истории регистраций, т.к. она является актуальной (см. ПоставитьНаУчетПоНовомуАдресу())
	//  - обновит реквизит формы РегистрацияВНалоговомОргане и связанные реквизиты
	Объект.КПП = Результат.НовыйКПП;
	КодНалоговогоОргана = Результат.НовыйКодНалоговогоОргана;
	
	НоваяЗапись = ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Добавить();
	НоваяЗапись.Период = Результат.ДатаПостановкиНаУчет;	
	
	УстановитьРегистрациюВНалоговомОргане();
	ПроверитьСоответствиеТребованиямКПП();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеТребованиямКПП()
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(
		Объект.КПП, 
		Истина, 
		Истина,
		Ложь);
	
	КППСоответствуетТребованиям = РезультатПроверки.СоответствуетТребованиям;
	
	Если ЗначениеЗаполнено(РезультатПроверки.ОписаниеОшибки) Тогда
		ЦветВыделенияНекорректногоЗначения = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветВыделенияКонтрагентаСОшибкой");
		НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(РезультатПроверки.ОписаниеОшибки, , ЦветВыделенияНекорректногоЗначения);
	Иначе
		НадписьПоясненияНекорректногоКПП = "";
	КонецЕсли;
	
	ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбособленноеПодразделениеПриИзмененииСервер()
	
	//проверка на установку флага у необособленного подразделения
	Если НЕ Параметры.Ключ.Пустая() Тогда
		Если Объект.ОбособленноеПодразделение Тогда
			Если ПолучитьНаличиеПодчиненныхЭлементов(Объект.Ссылка) Тогда
				Объект.ОбособленноеПодразделение = Ложь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьГрупп();
	
	Если Объект.ОбособленноеПодразделение Тогда
		ОбновитьИнформациюОбответственныхЛицах();
		РегистрацияВНалоговомОрганеПриИзмененииСервер();
		Объект.Префикс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Родитель,"Префикс");
	Иначе
		Объект.КПП 				  = "";
		КодНалоговогоОргана		  = "";
		НаименованиеИФНС		  = "";
		Объект.НаименованиеПолное = "";
		Объект.Префикс            = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АдресИТелефонУстановитьЗаголовок(Форма)
	
	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
	
	ОписаниеРеквизитовКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	АдресЗаполнен = Ложь;
	Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций"));
	ФактическиеАдреса = ОписаниеРеквизитовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если ФактическиеАдреса.Количество() > 0 
		И ЗначениеЗаполнено(ФактическиеАдреса[0].Представление) Тогда
		
		АдресЗаголовок = АдресЗаголовок + ": " + ФактическиеАдреса[0].Представление;
		АдресЗаполнен = Истина;
	КонецЕсли;
	
	Отбор = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПодразделенияОрганизаций"));
	Телефоны = ОписаниеРеквизитовКонтактнойИнформации.НайтиСтроки(Отбор);
	Если Телефоны.Количество() > 0 
		И ЗначениеЗаполнено(Телефоны[0].Представление) Тогда
		
		Если АдресЗаполнен Тогда
			АдресЗаголовок = АдресЗаголовок + НСтр("ru=', тел: '");
		Иначе
			АдресЗаголовок = АдресЗаголовок + ": ";
		КонецЕсли;
		
		АдресЗаголовок = АдресЗаголовок + Телефоны[0].Представление;
		
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаКонтактнаяИнформация", АдресЗаголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодписиУстановитьЗаголовок(Форма)
	
	ПодписиЗаголовок = НСтр("ru='Подписи'");
	Если ЗначениеЗаполнено(Форма.КассирКлючЗаписи) 
			 Тогда
		ПодписиЗаголовок = ПодписиЗаголовок + ": ";
		Если ЗначениеЗаполнено(Форма.Кассир)  Тогда
			ПодписиЗаголовок = ПодписиЗаголовок + Форма.Кассир;
		КонецЕсли;
			КонецЕсли;
	УстановитьЗаголовокГруппы(Форма, "ГруппаПодписи", ПодписиЗаголовок);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодРегионаПоАдресу(Адрес)
	
	Возврат УправлениеКонтактнойИнформациейБП.КодРегионаПоАдресу(Адрес);
	
КонецФункции

#Область РегистрацияВНалоговомОргане

&НаСервере
Функция ВладелецРегистрации()
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ГоловнаяОрганизация");
	
КонецФункции

&НаСервере
Процедура УстановитьРегистрациюВНалоговомОргане()
	
	ВладелецРегистрации = ВладелецРегистрации();
	
	Если Объект.КПП = РегистрацияВНалоговомОргане.КПП
		И КодНалоговогоОргана = РегистрацияВНалоговомОргане.Код
		И ВладелецРегистрации = РегистрацияВНалоговомОргане.Владелец Тогда
		//регистрация в налоговом органе подходит, не нужно ничего изменять
		Возврат;
	КонецЕсли;
	
	СуществующаяРегистрация = Справочники.РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане(ВладелецРегистрации, Объект.КПП, КодНалоговогоОргана);
	
	Если ЗначениеЗаполнено(СуществующаяРегистрация) Тогда
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, КодНалоговогоОргана, СуществующаяРегистрация);
	Иначе
		РегистрацииВНалоговомОрганеФорма.УстановитьНовуюРегистрацию(ЭтотОбъект, ВладелецРегистрации, Объект.КПП, КодНалоговогоОргана);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеРегистрацииВНалоговомОргане(ТекущийОбъект, Отказ = Ложь)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.РегистрацияВНалоговомОргане) Тогда
		
		Если НЕ ТекущийОбъект.ОбособленноеПодразделение Тогда
			ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Очистить();
		КонецЕсли;
		
		Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
			
			РегистрацииВНалоговомОрганеФорма.ЗаписатьРегистрациюВНалоговомОргане(ЭтотОбъект, ТекущийОбъект, ВладелецРегистрации());
			
			РегистрацииВНалоговомОрганеФорма.ЗаписатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(ЭтотОбъект, ТекущийОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРегистрациюВНалоговомОргане()
	
	РегистрацииВНалоговомОрганеФорма.ПрочитатьНаборЗаписейИсторииРегистрацийВНалоговомОргане(ЭтотОбъект, Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		
		РегистрацияВНалоговомОрганеОбъект = Объект.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияВНалоговомОрганеОбъект, "РегистрацияВНалоговомОргане");
		ОтчетностьПодписываетПредставитель = ?(ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель), 1, 0);
		КодНалоговогоОргана = РегистрацияВНалоговомОргане.Код;
		КодРегионаРегистрации = РегистрацияВНалоговомОргане.КодРегиона;
		
		// Заполним список регионов установленным значением, если в списке не более 1 элемента.
		// В ином случае список уже содержит все регионы.
		Если Элементы.КодРегионаРегистрации.СписокВыбора.Количество() < 2 Тогда
			
			НастройкиУчетаНалогаНаПрибыльФормы.НастроитьЭлементыУказанияРегиона(
				ТребуетсяУказаниеРегиона,
				Элементы.КодРегионаРегистрации.СписокВыбора,
				КодРегионаРегистрации);
				
			КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрациюВНалоговомОргане()
	
	Если МожноСохранитьРегистрацию(ЭтотОбъект) Тогда
		
		РегистрацииВНалоговомОрганеФорма.ЗаписатьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект, ВладелецРегистрации());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МожноСохранитьРегистрацию(Форма)
	
	Возврат Форма.РазрешеноИзменениеРегистрацииВНалоговомОргане
			И Форма.Объект.ОбособленноеПодразделение 
			И ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.Код)
			И (ЗначениеЗаполнено(Форма.РегистрацияВНалоговомОргане.КПП) 
				ИЛИ НЕ Форма.ВладелецЯвляетсяЮрлицом);
	
КонецФункции

&НаСервере
Процедура ОбновитьРегистрациюПослеЗаписиВФормеРегистрации(НоваяРегистрация)
	
	РеквизитыРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяРегистрация, "КПП, Код");
	Если Объект.КПП <> РеквизитыРегистрации.КПП Тогда
		
		// Была изменена регистрация в налоговом органе, при этом у нее изменились ключевые реквизиты
		// При записи регистрации в налоговом органе был перезаписан и элемент справочника организации.
		// Необходимо его перечитать для обновления данных
		
		Прочитать();
		
	Иначе
		
		КодНалоговогоОргана = РеквизитыРегистрации.Код;
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, КодНалоговогоОргана, НоваяРегистрация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеРедактированияИсторииРегистрацийВНалоговомОргане()
	
	Если Объект.ОбособленноеПодразделение
		И ИсторияРегистрацийВНалоговомОрганеНаборЗаписей.Количество() > 0 Тогда
		
		АктуальнаяЗапись = РегистрацииВНалоговомОрганеФорма.АктуальнаяЗаписьИстории(ЭтотОбъект);
		РегистрацииВНалоговомОрганеФорма.ОбновитьРегистрациюВНалоговомОргане(ЭтотОбъект, Объект.КПП, КодНалоговогоОргана, АктуальнаяЗапись.РегистрацияВНалоговомОргане);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросПриИзмененииКППЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		КодНалоговогоОргана = Лев(Объект.КПП, 4);
		КодНалоговогоОрганаПриИзмененииНаСервере();
		ЗаполнитьСписокРегионов(Элементы.КодРегионаРегистрации);
	Иначе
		// Устанавливаем регистрацию по прежнему коду
		УстановитьРегистрациюВНалоговомОргане();
	КонецЕсли;	
	
	// После изменения регистрации, возможно, требуется вывести пояснение о закрытом КПП
	ОрганизацииФормыКлиентСервер.НастроитьПояснениеКПП(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСведенийОНалоговойИнспекции

&НаСервере
Процедура КодНалоговогоОрганаПриИзмененииНаСервере()
	
	УстановитьРегистрациюВНалоговомОргане();
	
	Если ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Ошибка = "";
		ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(Ошибка);
		Если ЗначениеЗаполнено(Ошибка) Тогда
			// Определить реквизиты налогового органа по данным веб-сервиса не удалось
			// Нужно определить платежные реквизиты по данным информационной базы
			УстановитьПредставлениеПлатежныхРеквизитов(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, КодНалоговогоОргана, 
					ПлатежныеРеквизитыФНСПредставление);
		КонецЕсли;
	Иначе
		ПлатежныеРеквизитыФНСПредставление  = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(Неопределено);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеПлатежныхРеквизитов(Вид, Код, ПлатежныеРеквизитыПредставление)
	
	Если ЗначениеЗаполнено(Код) Тогда
		ГосударственныйОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Вид, Код);
	Иначе
		ГосударственныйОрган = Неопределено;
	КонецЕсли;
	
	ПлатежныеРеквизитыПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(ГосударственныйОрган);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "")
	
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Возврат;
	КонецЕсли;
	
	КодРегионаРегистрации = ДанныеГосударственныхОрганов.КодРегионаПоКодуНалоговогоОргана(КодНалоговогоОргана);
	РегистрацияВНалоговомОргане.КодРегиона = КодРегионаРегистрации;
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОргана);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ПлатежныеРеквизитыФНСПредставление = ДанныеГосударственныхОрганов.ПредставлениеПлатежныхРеквизитовГосударственногоОргана(РеквизитыНалоговогоОргана);
	
	РегистрацияВНалоговомОргане.Наименование     = РеквизитыНалоговогоОргана.Наименование;
	РегистрацияВНалоговомОргане.НаименованиеИФНС = РеквизитыНалоговогоОргана.ПолноеНаименование;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции()
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического заполнения реквизитов контрагентов
				|необходимо подключиться к Интернет-поддержке пользователей.
				|Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду");
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		ИначеЕсли ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен" Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ИдентификаторМестаВызова", "podrazdelenie");
			ОткрытьФорму("ОбщаяФорма.Сервис1СКонтрагентНеПодключен", ПараметрыФормы, ЭтотОбъект);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
			
			Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда
				
				ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = Истина Тогда
		
		УстановитьПредставлениеПлатежныхРеквизитов(
			ДопПараметры.ВидГосударственногоОргана,
			ДопПараметры.КодГосударственногоОргана,
			ПлатежныеРеквизитыФНСПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьРеквизитыНалоговойИнспекцииПоКоду(ТекстВопроса, СведенияОНалоговомОргане)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение", ЭтотОбъект, СведенияОНалоговомОргане);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение(РезультатыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатыЗакрытия = КодВозвратаДиалога.Да Тогда
		
		Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
			
			// Обновляем регистрацию в налоговом органе на форме
			
			КодНалоговогоОргана = ДополнительныеПараметры.КодНалоговогоОргана;
			УстановитьРегистрациюВНалоговомОргане();
			ЗаполнитьСведенияОНалоговойИнспекцииПоКоду();
			РегистрацияВНалоговомОргане.КодПоОКАТО = ДополнительныеПараметры.КодПоОКАТО;
			РегистрацияВНалоговомОргане.КодПоОКТМО = ДополнительныеПараметры.КодПоОКТМО;
			
		Иначе
		
			// Смена КПП выполняется через помощник.
				
			// Обеспечим, чтобы запись истории регистраций,
			// которая редактируется в вызываемой форме, была актуальна (т.е. последней по времени).
			// Для этого передаем в параметры формы дату актуальности истории регистраций.
			// В открываемой форме обеспечивается запрет на ввод даты новых сведений меньшей или равной указанной.
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АктуальныйПериодИсторииРегистраций",
				ОрганизацииФормыКлиент.АктуальныйПериодИсторииРегистраций(ЭтотОбъект));
			ПараметрыФормы.Вставить("КодНалоговогоОргана", ДополнительныеПараметры.КодНалоговогоОргана);
			
			ОповещениеЗавершения = Новый ОписаниеОповещения("ПоставитьНаУчетПоНовомуАдресуЗавершение", ЭтотОбъект);
			
			ОрганизацииФормыКлиент.ОткрытьФормуПомощникаСменыАдреса(
				ЭтотОбъект,
				"КонтактнаяИнформацияПолеФактическийАдресПодразделенияОрганизаций",
				ОповещениеЗавершения,
				ПараметрыФормы);
			
		КонецЕсли;	
						
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON)

	Если НЕ ЗначениеЗаполнено(ЗначениеАдресаJSON) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(ЗначениеАдресаJSON, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция НаименованиеОтветственногоЛица(ФамилияИмяОтчество, Должность)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), ФамилияИмяОтчество, Должность);
	
КонецФункции

&НаСервере
Процедура ОтветственныйПриЗаписиНаСервере(Отказ, ТекущийОбъект)
	
	Если ИзмененКассир Тогда
		
		РеквизитыПодписи = Новый Структура;
		
		РеквизитыПодписи.Вставить("ОтветственноеЛицо",	Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
		РеквизитыПодписи.Вставить("ФизическоеЛицо",	КассирФизЛицо);
		РеквизитыПодписи.Вставить("Должность",КассирДолжность);
		РеквизитыПодписи.Вставить("Период",	КассирКлючЗаписи.Период);
		
		РегистрыСведений.ОтветственныеЛицаОрганизаций.ЗаписатьНаборЗаписейИсторииОтветственныеЛицаОрганизаций(ТекущийОбъект.Ссылка, РеквизитыПодписи);
		
	КонецЕсли;
	
	ИзмененКассир = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИсторияПодписиНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		ОбновитьИнформациюОбОтветственныхЛицах();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДолжностьНасервере(Организация, ФизическоеЛицо,Роль)
	
	ДанныеОтветственногоЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Организация, ФизическоеЛицо, ТекущаяДатаСеанса());
	Должность = ДанныеОтветственногоЛица.Должность;
	
	Если ЗначениеЗаполнено(ДанныеОтветственногоЛица.Должность) Тогда
		Возврат ДанныеОтветственногоЛица.Должность;
	КонецЕсли;
	
	ОтветственноеЛицо =  ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций."+Роль);
	
	Возврат ОтветственныеЛицаБП.ПодобратьВероятнуюДолжностьОтветственногоЛица(ОтветственноеЛицо);
	
КонецФункции

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	// По методике встраивания БСП эта процедура должна быть серверная.
	// Однако, нам нужен результат и на клиенте - для того, что бы задать вопрос про изменение налоговой инспекции.
	// Поэтому процедура сделана клиентской и штатный код БСП из нее перенесен в ПослеИзмененияКонтактнойИнформацииНаСервере
	
	ДействияПослеИзменения = ПослеИзмененияКонтактнойИнформацииНаСервере(Результат);
	ПослеИзмененияКонтактнойИнформацииНаКлиенте(ДействияПослеИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервере
Функция ПриИзмененииФактАдресаПодразделенияНаСервере()
	
	ДействияПослеИзменения = Новый Структура;
	
	ИмяЭлементаАдреса = "КонтактнаяИнформацияПолеФактическийАдресПодразделенияОрганизаций";
	ДанныеСтрокиКИ = УправлениеКонтактнойИнформациейБПКлиентСервер.ЗначениеКонтактнойИнформацииФормы(
		ЭтотОбъект,
		ИмяЭлементаАдреса);
	
	Если ДанныеСтрокиКИ <> Неопределено Тогда
		
		ЗначениеАдресаJSON = ДанныеСтрокиКИ.Значение;
		
		СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначениеАдресаJSON);
		
		Если СведенияОНалоговомОргане <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
				
				Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
					
					ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду = Новый Структура;
					ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду.Вставить("СведенияОНалоговомОргане", СведенияОНалоговомОргане);
					ДействияПослеИзменения.Вставить("ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду", ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду);
					
				ИначеЕсли СведенияОНалоговомОргане.КодНалоговогоОргана = КодНалоговогоОргана Тогда
					
					//Налоговая инспекция не изменилась
					Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КодПоОКАТО) Тогда
						РегистрацияВНалоговомОргане.КодПоОКАТО = СведенияОНалоговомОргане.КодПоОКАТО;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.КодПоОКТМО) Тогда
						РегистрацияВНалоговомОргане.КодПоОКТМО = СведенияОНалоговомОргане.КодПоОКТМО;
					КонецЕсли;
					
				Иначе
					
					ВопросПроИзменениеНалоговойИнспекции = Новый Структура;
					Если НЕ ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Ссылка) Тогда
						ТекстВопроса = НСтр("ru = 'Выбранный адрес обслуживается налоговой инспекцией с кодом %1.
													|Заменить налоговую инспекцию?'");
					Иначе
						ТекстВопроса = НСтр("ru = 'Выбранный адрес обслуживается налоговой инспекцией с кодом %1.
													|Отразить в программе снятие с учета по прежнему КПП 
													|и постановку на учет по новому КПП?'");
					КонецЕсли;
					
					ВопросПроИзменениеНалоговойИнспекции.Вставить("ТекстВопроса",
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СведенияОНалоговомОргане.КодНалоговогоОргана));
					ВопросПроИзменениеНалоговойИнспекции.Вставить("СведенияОНалоговомОргане", СведенияОНалоговомОргане);
					
					ДействияПослеИзменения.Вставить("ВопросПроИзменениеНалоговойИнспекции", ВопросПроИзменениеНалоговойИнспекции);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДействияПослеИзменения;
	
КонецФункции

&НаСервере
Функция ПослеИзмененияКонтактнойИнформацииНаСервере(Результат)
	
	ДействияПослеИзменения = Неопределено;
	
	Если Результат.Свойство("ИмяРеквизита")
		И Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеФактическийАдресПодразделенияОрганизаций" Тогда
		
		ДействияПослеИзменения = ПриИзмененииФактАдресаПодразделенияНаСервере();
		
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат ДействияПослеИзменения;
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияКонтактнойИнформацииНаКлиенте(ДействияПослеИзменения)
	
	Если Не ЗначениеЗаполнено(ДействияПослеИзменения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДействияПослеИзменения.Свойство("ВопросПроИзменениеНалоговойИнспекции") Тогда
		
		ВопросЗаполнитьРеквизитыНалоговойИнспекцииПоКоду(ДействияПослеИзменения.ВопросПроИзменениеНалоговойИнспекции.ТекстВопроса,
			ДействияПослеИзменения.ВопросПроИзменениеНалоговойИнспекции.СведенияОНалоговомОргане);
		
	ИначеЕсли ДействияПослеИзменения.Свойство("ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду") Тогда
		
		ЗаполнитьРеквизитыНалоговойИнспекцииПоКодуЗавершение(КодВозвратаДиалога.Да,
			ДействияПослеИзменения.ЗаполнитьРеквизитыНалоговойИнспекцииПоКоду.СведенияОНалоговомОргане);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтатическиеРеквизиты()
	
	СтатическиеРеквизиты = Новый Массив();
	
	СтатическиеРеквизиты.Добавить(Справочники.ВидыКонтактнойИнформации.ФактическийАдресПодразделенияОрганизаций);
	
	Возврат СтатическиеРеквизиты;

КонецФункции

#КонецОбласти
