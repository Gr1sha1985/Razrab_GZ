#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Список.Параметры.УстановитьЗначениеПараметра(
		"ПредставлениеОбособленногоПодразделения", НСтр("ru='Обособленное подразделение'"));
		
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокКонтрагентов(Список);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Контрагенты);
	Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = МожноРедактировать;
	
	ЕстьПравоИзменениеПоступлениеТоваровУслуг = ПравоДоступа("Изменение", Метаданные.Документы.ПоступлениеТоваровУслуг);
	ЕстьПравоИзменениеРеализацияТоваровУслуг  = ПравоДоступа("Изменение", Метаданные.Документы.РеализацияТоваровУслуг);
	ЕстьПравоИзменениеСчетНаОплату            = ПравоДоступа("Изменение", Метаданные.Документы.СчетНаОплатуПокупателю);
	ЕстьПравоИзменениеАктСверкиВзаиморасчетов = ПравоДоступа("Изменение", Метаданные.Документы.АктСверкиВзаиморасчетов);
	ЕстьПравоИзменениеНачислениеПеней         = ПравоДоступа("Изменение", Метаданные.Документы.НачислениеПеней);
	
	Элементы.СоздатьДокументСчетПокупателю.Видимость          = ЕстьПравоИзменениеСчетНаОплату;
	Элементы.СоздатьДокументАкт.Видимость                     = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьДокументНакладная.Видимость               = ЕстьПравоИзменениеРеализацияТоваровУслуг;
	Элементы.СоздатьДокументАктПоступление.Видимость          = ЕстьПравоИзменениеПоступлениеТоваровУслуг;
	Элементы.СоздатьДокументНакладнаяПоступление.Видимость    = ЕстьПравоИзменениеПоступлениеТоваровУслуг;
	Элементы.СоздатьДокументАктСверкиВзаиморасчетов.Видимость = ЕстьПравоИзменениеАктСверкиВзаиморасчетов;
	Элементы.СоздатьДокументНачислениеПеней.Видимость         = ЕстьПравоИзменениеНачислениеПеней;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Справочник.Контрагенты",
		"ФормаСпискаПростойИнтерфейс",
		НСтр("ru='Новости: Контрагенты'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Элементы.Подменю1СПАРКРиски.Видимость = СПАРКРиски.ИспользованиеРазрешено();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	Элементы.ГруппаВидеоролики.Видимость = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("ФормаКонтрагенты"), 
		ВРег("Видеоролики"), 
		Истина);
	
	ПомеченныеНаУдалениеСервер.СкрытьПомеченныеНаУдаление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	СобытияТребующиеОбновленияСписка = Новый Массив;
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПоступлениеТоваровУслуг");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_РеализацияТоваровУслуг");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_СчетПокупателю");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПриходныйКассовыйОрдер");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_РасходныйКассовыйОрдер");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_ПоступлениеНаРасчетныйСчет");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_СписаниеСРасчетногоСчета");
	СобытияТребующиеОбновленияСписка.Добавить("Запись_НачислениеПеней");
	
	Если СобытияТребующиеОбновленияСписка.Найти(ИмяСобытия) <> Неопределено Тогда
		ОбновитьСвойстваТекущегоКонтрагента();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьОтчетОбщаяКоманда(Команда)

	ПараметрыОтчета = Новый Структура;
	
	Если Команда.Имя = "ОтчетАнализНеоплаченныхСчетовПокупателями" Тогда
		ИмяФормыОтчета = "Отчет.АнализНеоплаченныхСчетовПокупателям.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетАнализНеоплаченныхСчетовПоставщиков" Тогда
		ИмяФормыОтчета = "Отчет.АнализНеоплаченныхСчетовПоставщиков.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетДинамикаЗадолженностиПокупателей" Тогда
		ИмяФормыОтчета = "Отчет.ДинамикаЗадолженностиПокупателей.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетДинамикаЗадолженностиПоставщикам" Тогда
		ИмяФормыОтчета = "Отчет.ДинамикаЗадолженностиПоставщикам.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПокупателей" Тогда
		ИмяФормыОтчета = "Отчет.ЗадолженностьПокупателей.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПокупателейПоСрокамДолга" Тогда
		ИмяФормыОтчета = "Отчет.ЗадолженностьПокупателейПоСрокамДолга.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПоставщикамПоСрокамДолга" Тогда
		ИмяФормыОтчета = "Отчет.ЗадолженностьПоставщикамПоСрокамДолга.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетЗадолженностьПоставщикам" Тогда
		ИмяФормыОтчета = "Отчет.ЗадолженностьПоставщикам.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетОборотныеСредства" Тогда
		ИмяФормыОтчета = "Отчет.ОборотныеСредства.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетРасчетыСПокупателямиИПоставщиками" Тогда
		ИмяФормыОтчета = "Отчет.РасчетыСПокупателямиИПоставщиками.ФормаОбъекта";
	ИначеЕсли Команда.Имя = "ОтчетПродажиПоКонтрагентамПоОплате" Тогда
		
		ПараметрыОтчета.Вставить("КлючВарианта", "ПродажиПоКонтрагентамПоОплате");
		Уникальность = "Отчет.Продажи/КлючВарианта." + ПараметрыОтчета.КлючВарианта;
	
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
		
		ИмяФормыОтчета = "Отчет.Продажи.Форма";
		
	ИначеЕсли Команда.Имя = "ОтчетыПродажиПоКонтрагентам" Тогда
		
		ПараметрыОтчета.Вставить("КлючВарианта", "ПродажиПоКонтрагентам");
		Уникальность = "Отчет.Продажи/КлючВарианта." + ПараметрыОтчета.КлючВарианта;
	
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
	
		ИмяФормыОтчета = "Отчет.Продажи.Форма";
	
	ИначеЕсли Команда.Имя = "ОтчетыСравнениеПродажПоКонтрагентам" Тогда
		
		ПараметрыОтчета.Вставить("КлючВарианта", "СравнениеПродажПоКонтрагентам");
		Уникальность = СтрШаблон("Отчет.СравнениеПродаж/КлючВарианта.%1", ПараметрыОтчета.КлючВарианта);
		
		ПараметрыОтчета.Вставить("КлючПараметровПечати",        Уникальность);
		ПараметрыОтчета.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
		
		ИмяФормыОтчета = "Отчет.СравнениеПродаж.Форма";
		
	КонецЕсли;
	
	ФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыОтчета, ЭтотОбъект);
	ФормаОтчета.ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", 
		БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), 
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(ФормаОтчета.Элементы.Результат, "ФормированиеОтчета");
	ФормаОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументОбщаяКоманда(Команда)
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	ЗначенияЗаполнения = Новый Структура();
	Если ТекущиеДанные <> Неопределено И НЕ ТекущиеДанные.ЭтоГруппа Тогда
		ЗначенияЗаполнения.Вставить("Контрагент", ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ИмяФормыДокумента = "";
	Если Команда.Имя = "СоздатьДокументАкт" Тогда
		ИмяФормыДокумента = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаУслуги";
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Услуги"));
	ИначеЕсли Команда.Имя = "СоздатьДокументНакладная" Тогда
		ИмяФормыДокумента = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокументаТовары";
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийРеализацияТоваров.Товары"));
	ИначеЕсли Команда.Имя = "СоздатьДокументСчетПокупателю" Тогда
		ИмяФормыДокумента = "Документ.СчетНаОплатуПокупателю.Форма.ФормаДокумента";
	ИначеЕсли Команда.Имя = "СоздатьДокументАктПоступление" Тогда
		ИмяФормыДокумента = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаУслуги";
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Услуги"));
	ИначеЕсли Команда.Имя = "СоздатьДокументНакладнаяПоступление" Тогда
		ИмяФормыДокумента = "Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокументаТовары";
		ЗначенияЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Товары"));
	ИначеЕсли Команда.Имя = "СоздатьДокументАктСверкиВзаиморасчетов" Тогда
		ИмяФормыДокумента = "Документ.АктСверкиВзаиморасчетов.Форма.ФормаДокумента";
	ИначеЕсли Команда.Имя = "СоздатьДокументНачислениеПеней" Тогда
		ИмяФормыДокумента = "Документ.НачислениеПеней.Форма.ФормаДокумента";
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	Если ИмяФормыДокумента <> "" Тогда
		ОткрытьФорму(ИмяФормыДокумента, ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура ИндексыСПАРК(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.ИндексыСПАРКРиски.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияМониторингаСПАРК(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.СобытияМониторингаСПАРКРиски.Форма", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СкрытьВидеороликиНажатие(Элемент)
	
	Элементы.ГруппаВидеоролики.Видимость = Ложь;
	СохранитьОтключениеВидимостиВидеороликов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	
	ПомеченныеНаУдалениеКлиент.ПриИзмененииСписка(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьСвойстваТекущегоКонтрагента", 0.2, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Группа Тогда
		КлючеваяОперация = "СозданиеФормыКонтрагенты";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Если НЕ Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		КлючеваяОперация = "ОткрытиеФормыКонтрагенты";
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокПередЗагрузкойПользовательскихНастроекНаСервере(Элемент, Настройки, ИспользуютсяСтандартныеНастройки)
	
	ПомеченныеНаУдалениеСервер.УдалитьОтборПометкаУдаления(Настройки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервереБезКонтекста
Функция СвойстваКонтрагента(Знач Контрагент)
	
	Результат = Справочники.Контрагенты.ЗадолженностьПоКонтрагенту(Контрагент);
	Результат.Вставить("Телефон", 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,
			Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ИНН некорректный

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИНН");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ИННВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// ИНН дублируется

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИНН");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ИННВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьДубли", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// КПП некорректный

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КППВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// КПП дублируется

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КППВведенКорректно", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.ЕстьДубли", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой);


	// Контрагента нет в реестре

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ИНН");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КПП");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Состояние", ВидСравненияКомпоновкиДанных.НеРавно, Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветКонтрагентаОтсутствущегоВРеестре);


	// Контрагент прекратил деятельность

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "Список");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.КонтрагентНеСуществует", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Список.Состояние", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветКонтрагентаПрекратившегоДеятельность);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвойстваТекущегоКонтрагента()
	
	ТекущиеДанные = ОбщегоНазначенияБПКлиент.ТекущиеДанныеДинамическогоСписка(Элементы.Список);
	
	Если ТекущиеДанные = Неопределено
	 ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		
		КонтрагентТелефон           = "";
		КонтрагентМыДолжны          = "";
		КонтрагентНамДолжны         = "";
		КонтрагентНеоплаченныеСчета = "";
		
	Иначе
		
		СвойстваКонтрагента = СвойстваКонтрагента(ТекущиеДанные.Ссылка);
		
		КонтрагентТелефон = СвойстваКонтрагента.Телефон;
		
		КонтрагентМыДолжны = Формат(СвойстваКонтрагента.МыДолжны, "ЧН=0") + " " + ВалютаРегламентированногоУчета;
		
		КонтрагентНамДолжны = Формат(СвойстваКонтрагента.НамДолжны, "ЧН=0") + " " + ВалютаРегламентированногоУчета;
		
		КонтрагентНеоплаченныеСчета = ?(СвойстваКонтрагента.НеоплаченныеСчетаКоличество = 0, "0 ",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 на %2'"),
				СвойстваКонтрагента.НеоплаченныеСчетаКоличество,
				Формат(СвойстваКонтрагента.НеоплаченныеСчетаСумма, "ЧН=0"))) + " " + ВалютаРегламентированногоУчета;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтключениеВидимостиВидеороликов()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("ФормаКонтрагенты"), ВРег("Видеоролики"), Ложь);
	
КонецПроцедуры

#КонецОбласти
