
// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;
// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами

&НаКлиенте 
Перем ТекущийТекстНомераСчета; // Текст, набранный в поле ввода номера счета

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//// СтандартныеПодсистемы.ПодключаемыеКоманды
	//ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	//
	//
	//// СтандартныеПодсистемы.ВерсионированиеОбъектов
	//ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	//
	//// Обработчик подсистемы "Свойства"
	//ДополнительныеПараметры = Новый Структура;
	//ДополнительныеПараметры.Вставить("Объект", Объект);
	//ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	//УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	//
	//Если НЕ ЗначениеЗаполнено(БанковскийСчет.ВалютаДенежныхСредств) Тогда
	//	БанковскийСчет.ВалютаДенежныхСредств = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	//КонецЕсли;
	//
	//РазместитьКонтактнуюИнформацию();
	//
	//Если Параметры.Ключ.Пустая() Тогда
	//	
	//	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	//	ЗаполнитьРеквизитыПоТекстуЗаполнения(Параметры.ТекстЗаполнения);
	//	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	//	ПодготовитьФормуНаСервере();
	//	
	//КонецЕсли;
	//
	//ОграничитьВыборРеквизитов(Параметры.ЗначенияЗаполнения);
	//
	//// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	//ПроверкаКонтрагентов.ПриСозданииНаСервереКонтрагент(ЭтотОбъект, Параметры);
	//// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами  
	//
	//УправлениеФормой(ЭтаФорма);
	//
	//// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	//ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	//ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
	//	ЭтаФорма,
	//	"БП.Справочник.Контрагенты",
	//	"ФормаЭлемента",
	//	НСтр("ru='Новости: Контрагент'"),
	//	ИдентификаторыСобытийПриОткрытии
	//);
	//// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

	//НастройкиУчетаМСФО.НастроитьФормуОбъектаУчета(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	//
	//// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	//ЭлектронноеВзаимодействиеБП.КомандыЭДО_ФормаЭлементаПриСоздании(ЭтотОбъект);
	//// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов", 0.1, Истина);
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПриОткрытииКонтрагент(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	Если ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	НадежностьБанковКлиент.ПодключитьОбработчикПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьИННОбособленногоПодразделения(ТекущийОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ИзмененБанковскийСчет Тогда
		Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) И ЗначениеЗаполнено(БанковскийСчет.Банк)Тогда
			
			НайденныйБанковскийСчет = Справочники.БанковскиеСчета.БанковскийСчетПоРеквизитам(ТекущийОбъект.Ссылка, 
				БанковскийСчет.Банк, БанковскийСчет.НомерСчета);
				
			Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) Тогда
				// Снимаем блокировку для прежнего банковского счета перед его заменой новым.
				РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НайденныйБанковскийСчет) Тогда
				ТекущийОбъект.ОсновнойБанковскийСчет = НайденныйБанковскийСчет;
				ОсновнойБанковскийСчетОбъект = НайденныйБанковскийСчет.ПолучитьОбъект();
				ОсновнойБанковскийСчетОбъект.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
			Иначе
				ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьСсылку();
				ОбъектРегистрации = Справочники.БанковскиеСчета.СоздатьЭлемент();
				ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
				ОбъектРегистрации.Банк = БанковскийСчет.Банк;
				ОбъектРегистрации.НомерСчета = БанковскийСчет.НомерСчета;
				ОбъектРегистрации.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств;
				ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
			КонецЕсли;
			
		Иначе
			ТекущийОбъект.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеКонтактногоЛица <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеКонтактногоЛица", ДанныеКонтактногоЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереКонтрагент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ДанныеКонтактногоЛица")
		И НЕ ТекущийОбъект.Модифицированность() Тогда
		
		ДанныеКонтактногоЛица        = Неопределено;
		ПредставлениеКонтактногоЛица = Неопределено;
		
	КонецЕсли;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	УправлениеФормой(ЭтотОбъект);
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПараметрыЗаписи.Вставить("ВключитьМониторингСобытий1СПАРКРиски", Истина);
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагенты" Тогда
		
		Если Объект.Ссылка = Источник Тогда
			// Собственную запись специально не обрабатываем
			Возврат;
		КонецЕсли;
		
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка И Источник = Объект.ГоловнойКонтрагент Тогда
			
			ГоловнойКонтрагентПриИзмененииНаСервере();
			Модифицированность = Истина;
			
			ЗапуститьПроверкуКонтрагента();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		
		АдресныйКлассификаторПуст = АдресныйКлассификаторПуст();
		
		Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
		
	ИначеЕсли ИмяСобытия = "ЗаписанЭлементБанк" Тогда
		
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Банки")
			И ЗначениеЗаполнено(Параметр)
			И БанковскийСчет.Банк <> Параметр Тогда
			
			БанковскийСчет.Банк = Параметр;
			ИзмененБанковскийСчет = Истина;
			
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "ИзмененБанковскийСчет" И Параметр.Ссылка = Объект.ОсновнойБанковскийСчет Тогда
		
		Если Параметр.Свойство("ОсновнойБанковскийСчет") Тогда
			Объект.ОсновнойБанковскийСчет = Параметр.ОсновнойБанковскийСчет;
		КонецЕсли;
		
		ПрочитатьОсновнойБанковскийСчет();
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоБанковскогоСчета" 
		  ИЛИ ИмяСобытия = "УстановкаОсновногоБанковскогоСчетаПриЗаписи" Тогда
		
		Если Объект.Ссылка = Параметр.КонтрагентОрганизация Тогда
			
			УстановитьОсновнойБанковскийСчет(Параметр.ОсновнойБанковскийСчет);

			Оповестить("УстановкаОсновногоБанковскогоСчетаВыполнена");
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоКонтактногоЛица" Тогда
		
		Если Объект.Ссылка = Параметр.Контрагент Тогда
			
			Объект.ОсновноеКонтактноеЛицо = Параметр.ОсновноеКонтактноеЛицо;
			
			Если НЕ Модифицированность Тогда
				Записать();
			КонецЕсли;
			
			Оповестить("УстановкаОсновногоКонтактногоЛицаВыполнена");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Объект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ЭлектронноеВзаимодействиеБПКлиент.КомандыЭДО_ФормаЭлементаОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
			
			Объект.ОсновнойБанковскийСчет = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(НовыйОбъект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	
		Если НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			Объект.ОсновноеКонтактноеЛицо = НовыйОбъект;
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ПрочитатьОсновнойБанковскийСчет();
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ПропуститьПроверку") 
		И ПараметрыЗаписи.ПропуститьПроверку Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
	Если ЗначениеЗаполнено(Объект.ИНН) И Объект.ИННВведенКорректно И (Объект.КППВведенКорректно ИЛИ ЭтоФизЛицо) Тогда
		
		КоличествоЭлементовДублей = ВыполнитьПоискДублейСервер(Объект.ИНН, Объект.КПП, Объект.Ссылка);
		
		ЕстьДубли = КоличествоЭлементовДублей > 0; 
		
		Если ЕстьДубли Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Уже есть элементы с таким %1. Записать?'");
			Если ЭтоФизЛицо Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НСтр("ru = 'ИНН'"));
			Иначе
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, НСтр("ru = 'ИНН и КПП'"));
			КонецЕсли;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
			
			Оповещение = Новый ОписаниеОповещения("ВопросЗаписатьЭлементСНеуникальнымИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			
		КонецЕсли;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиент.ПередЗаписью(БанковскийСчет.НомерСчета, БИКБанка, Объект.Ссылка, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	СостояниеКонтрагентаИзменилось = Ложь;
	Оповестить("Запись_Контрагенты", , Объект.Ссылка);
	
	// проверяет подключение контрагента к сервису 1С-ЭДО
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда
		
		ПроверитьКонтрагентаВ1СЭДОСервер(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Справочники.БанковскиеСчета.ОбработкаПроверкиЗаполнения(БанковскийСчет, БИКБанка, ЯвляетсяБанкомРФ, Отказ);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП") Тогда
		
		УстановитьКПППослеРедактированияИстории(ВыбранноеЗначение.ИсторияКПП);
		
		ЗапуститьПроверкуКонтрагента();
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований") Тогда
		
		УстановитьНаименованиеПослеРедактированияИстории(ВыбранноеЗначение.ИсторияНаименований);
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.РедактированиеИсторииКонтактнойИнформации") Тогда
		
		УправлениеКонтактнойИнформациейКлиентБП.УстановитьАдресПослеРедактированияИстории(
			ЭтотОбъект,
			ВыбранноеЗначение.ИсторияИзмененийАдреса,
			Элементы.КонтактнаяИнформацияПолеЮрАдресКонтрагента);
		
		ПриИзмененииЮрАдресаКонтрагента(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеПоискаИНННаименованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПолеПоискаИНННаименование)
		И НЕ ЗначениеЗаполнено(Объект.ИНН) 
		И НЕ ЗначениеЗаполнено(Объект.Наименование) 
		И (НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
		ИЛИ КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) Тогда
		
		ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
		ОтключитьЗаполнениеПоИНН = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)

	Если ФормироватьНаименованиеПолноеАвтоматически Тогда
		Объект.НаименованиеПолное = Объект.Наименование;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидПриИзменении(Элемент)
	
	ВидПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеПриИзменении(Элемент)

	НаименованиеПолноеПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Список = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.НаименованиеПолное) Тогда
		Список.Добавить(Объект.НаименованиеПолное);
	КонецЕсли;
	Для каждого НаименованиеАвтозаполнения Из НаименованияАвтозаполнения Цикл
		ТекНаименование = НаименованиеАвтозаполнения.Значение;
		Если ЗначениеЗаполнено(ТекНаименование)	
			И Список.НайтиПоЗначению(ТекНаименование) = Неопределено Тогда
			Список.Добавить(ТекНаименование);
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.Наименование)
		И Список.НайтиПоЗначению(Объект.Наименование) = Неопределено Тогда
		Список.Добавить(Объект.Наименование);
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("НаименованиеПолноеНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, Список, Элементы.НаименованиеПолное);

КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииПриИзменении(Элемент)
	
	СтранаРегистрацииПриИзмененииНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.СтранаМираОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоловнойКонтрагентПриИзменении(Элемент)
	
	ГоловнойКонтрагентПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресКонтрагентаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ФаксКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailКонтрагентыПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеДругаяИнформацияКонтрагентыПриИзменении(Элемент)
	
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрФактАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрФактАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрПочтовыйАдресаСовпадаютПриИзменении(Элемент)
	
	Если ЮрПочтовыйАдресаСовпадают Тогда
		СкопироватьПолеКонтактнойИнформации(ЭтотОбъект, "КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
		
		Если КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = "";
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЮрАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеЮрАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ПочтовыйАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ФактАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, КонтактнаяИнформацияПолеФактАдресКонтрагента);
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Объект.ИНН = СокрП(Объект.ИНН);
	
	ИННПриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиенте
Процедура КПППриИзменении(Элемент)
	
	КПППриИзмененииНаСервере();
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПояснениеПроверкиДублейФНСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВидГосударственногоОрганаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененБанковскийСчет = Истина;
	
	БанковскийСчет.НомерСчета = СтрЗаменить(БанковскийСчет.НомерСчета," ","");
	
	БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
		БанковскийСчет, ЭтотОбъект, БИКБанка, ЦветВыделенияНекорректногоЗначение, ЯвляетсяБанкомРФ);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	
	ВидимостьРеквизитовБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЮрАдресаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеКонтактнойИнформациейКлиентБП.ИсторияИзмененийАдресаНажатие(
		ЭтотОбъект,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаМСФОПриИзменении(Элемент)
	
	НастройкиУчетаМСФОКлиент.ПриИзмененииПоляФормы(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГР(Команда)
	
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованию(Команда)
	
	Если ЗначениеЗаполнено(Объект.ИНН) 
		ИЛИ (ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
		И КонтактнаяИнформацияПолеЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ДопПараметры = Новый Структура("ЗаполнениеПоИНН", Ложь);
		ДопПараметры.Вставить("СтрокаПоиска", Объект.Наименование);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИНН(Команда)
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ОбособленноеПодразделение Тогда
		ПоказатьПредупреждение(, НСтр("ru='Реквизиты обособленных подразделений заполняются вручную.'"));
		Возврат;
	ИначеЕсли Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		ПоказатьПредупреждение(, НСтр("ru='Автоматически заполняются только реквизиты российских контрагентов.'"));
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ИНН) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Поле ""ИНН"" не заполнено'"));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	ИначеЕсли НЕ ОшибокПоИННнет Тогда
		ПоказатьПредупреждение(, Строка(РезультатПроверкиИНН));
		ТекущийЭлемент = Элементы.ИНН;
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	ОтключитьЗаполнениеПоИНН = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьЗаполнениеПоИНН", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьАдресныйКлассификатор(Команда)
	
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	
	ЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзЭлектроннойПочты(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВариантЗагрузкиЭД", ПредопределенноеЗначение("Перечисление.ВариантыЗагрузкиЭД.Карточка"));
	ДополнительныеПараметры.Вставить("Контрагент"       , Объект.Ссылка);
	ДополнительныеПараметры.Вставить("ГлубинаПоиска"    , 7);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПрямойОбменЭД.Форма.Форма", ДополнительныеПараметры, ЭтаФорма, , , ,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзФайла(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗагрузкаКарточкиКонтрагентаИзФайла");
	
	РасширениеФайла = "*.xml";
	ЗаголовокФормыВыбораФайла = НСтр("ru='Выберите карточку организации'");
	
	ОповещениеОЗавершенииЗагрузки = Новый ОписаниеОповещения("ЗагрузитьКарточкуКонтрагентаXMLИзФайлаЗавершение", ЭтотОбъект);
	РаботаСФайламиБПКлиент.ЗагрузитьФайл(ОповещениеОЗавершенииЗагрузки,
		УникальныйИдентификатор,
		РасширениеФайла,
		ЗаголовокФормыВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКонтрагента(Команда)
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентаПоКнопке(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьКонтрагентаВ1СЭДОСервер(СсылкаНаКонтрагента)

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	//ОбменСКонтрагентами.ПроверитьКонтрагентаВ1СЭДОПриСозданииНаСервере(СсылкаНаКонтрагента);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ЦветВыделенияНекорректногоЗначение = ЦветаСтиля.ЦветВыделенияКонтрагентаСОшибкой;
	
	ОграничениеВидаКонтрагента = Неопределено;
	
	Если Параметры.Свойство("ЗначенияЗаполнения") 
		И Параметры.ЗначенияЗаполнения.Свойство("ЮридическоеФизическоеЛицо", ОграничениеВидаКонтрагента) Тогда
	
		Если ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
			
			СписокВыбораВида = Элементы.Вид.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
				ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
			ИначеЕсли ОграничениеВидаКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ОграничениеВидаКонтрагента) = Тип("ФиксированныйМассив") Тогда
			
			СписокВыбораВида = Элементы.Вид.СписокВыбора;
			СписокВыбораВида.Очистить();
			
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ФизическоеЛицо", "Физическое лицо");
				Если ОграничениеВидаКонтрагента.Количество() = 1 Тогда
					ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ОграничениеВидаКонтрагента.Найти(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо) <> Неопределено Тогда
				СписокВыбораВида.Добавить("ЮридическоеЛицо", "Юридическое лицо");
				СписокВыбораВида.Добавить("ОбособленноеПодразделение", "Обособленное подразделение");
				СписокВыбораВида.Добавить("ГосударственныйОрган", "Государственный орган");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Вид = "ФизическоеЛицо";
	ИначеЕсли Объект.ОбособленноеПодразделение Тогда
		Вид = "ОбособленноеПодразделение";
	ИначеЕсли Объект.ГосударственныйОрган Тогда
		Вид = "ГосударственныйОрган";
	Иначе
		Вид = "ЮридическоеЛицо";
	КонецЕсли;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	АдресныйКлассификаторПуст = НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();
	
	ИспользоватьРазделениеПоОбластямДанных = ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	Элементы.ГруппаЗагрузкаАдресногоКлассификатора.Видимость = НЕ ИспользоватьРазделениеПоОбластямДанных И АдресныйКлассификаторПуст;
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	Элементы.ФормаЗаполнитьИзЭлектроннойПочты.Видимость = ПравоДоступа("Использование", Метаданные.Обработки.ПрямойОбменЭД);
	
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
		БанковскийСчет.НомерСчета, БИКБанка, ЯвляетсяБанкомРФ, ЦветВыделенияНекорректногоЗначение);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект, 
		БИКБанка, 
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	УстановитьВидимостьЭлементов();
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено;
	Если ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРиски.ПриСозданииНаСервере(
			ЭтотОбъект,
			Объект,
			?(Параметры.Ключ.Пустая(), Объект.ИНН, Объект.Ссылка),
			СПАРКРискиКлиентСерверБП.ВидКонтрагентаСПАРКРиски(Объект.ЮридическоеФизическоеЛицо),
			ПараметрыПроцедуры);
	Иначе
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	
	// Группа Адреса, телефоны
	Элементы.КонтактнаяИнформацияПолеФактАдресКонтрагента.Видимость = НЕ Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресКонтрагентаСовпадает.Видимость                = Форма.ЮрФактАдресаСовпадают;
	Элементы.ФактАдресПереходНаКарту.Видимость                      = НЕ Форма.ЮрФактАдресаСовпадают;
	
	Элементы.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента.Видимость = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресКонтрагентаСовпадает.Видимость                = Форма.ЮрПочтовыйАдресаСовпадают;
	Элементы.ПочтовыйАдресПереходНаКарту.Видимость                      = НЕ Форма.ЮрПочтовыйАдресаСовпадают;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ФактАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
			Элементы.ФактАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Форма.ФактАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента;
		Элементы.ФактАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
			Форма.ПочтовыйАдресКонтрагентаСовпадает = НСтр("ru = '<не заполнен>'");
			Элементы.ПочтовыйАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Форма.ПочтовыйАдресКонтрагентаСовпадает = Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента;
		Элементы.ПочтовыйАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента)
		ИЛИ Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		Элементы.ЮрАдресПереходНаКарту.Доступность = Ложь;
	Иначе
		Элементы.ЮрАдресПереходНаКарту.Доступность = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидГосударственногоОргана) Тогда
		
		Если Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код инспекции'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганПФР") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3));
		ИначеЕсли Объект.ВидГосударственногоОргана = ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.ОрганФСС") Тогда
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код отделения'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
		Иначе
			Элементы.КодГосударственногоОргана.Заголовок = НСтр("ru = 'Код'");
			Элементы.КодГосударственногоОргана.ОграничениеТипа = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
		КонецЕсли;
		
	КонецЕсли;
	
	АдресЗаголовок = НСтр("ru='Адрес и телефон'");
	Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) И НЕ Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		АдресЗаголовок = АдресЗаголовок + ": " + Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента;
		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=', тел: %1'"), Форма.КонтактнаяИнформацияПолеТелефонКонтрагента);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Форма.КонтактнаяИнформацияПолеТелефонКонтрагента) Тогда
			АдресЗаголовок = АдресЗаголовок + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=': тел: %1'"), Форма.КонтактнаяИнформацияПолеТелефонКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Форма.Элементы.ГруппаКонтактнаяИнформация.ЗаголовокСвернутогоОтображения = АдресЗаголовок;
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(Форма, Форма.БанковскийСчет);
	
	БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(Форма, Форма.ЯвляетсяБанкомРФ);
	
	ВидимостьРеквизитовБанковскогоСчета(Форма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КодГосударственногоОргана.Имя);
	
	ГруппаОтбораКодГосударственногоОргана = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораКодГосударственногоОргана.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГосударственныйОрган");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидГосударственногоОргана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыГосударственныхОрганов.Прочий;
	
	ОтборЭлемента = ГруппаОтбораКодГосударственногоОргана.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.КодГосударственногоОргана");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.Банк.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.Банк",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.НомерСчета.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ЭлементУО.Отбор,
		"БанковскийСчет.НомерСчета",
		ВидСравненияКомпоновкиДанных.Заполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	
КонецПроцедуры

&НаСервере
Процедура ГоловнойКонтрагентПриИзмененииНаСервере()
	
	УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Ложь;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура РазместитьКонтактнуюИнформацию()
	
	ИсторияЮрАдреса = НСтр("ru = 'История'");
	
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив;
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКомпоновкиКонтактнойИнформации";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВиды;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	ЮрФактАдресаСовпадают		= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеФактАдресКонтрагента);
	ЮрПочтовыйАдресаСовпадают	= СокрЛП(КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента)
		ИЛИ СокрЛП(?(КонтактнаяИнформацияПолеЮрАдресКонтрагента = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки(),
		"", КонтактнаяИнформацияПолеЮрАдресКонтрагента)) = СокрЛП(КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииЮрАдресаКонтрагента(Форма)

	Если Форма.ЮрФактАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеФактАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	Если Форма.ЮрПочтовыйАдресаСовпадают ИЛИ ПустаяСтрока(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента) Тогда
		СкопироватьПолеКонтактнойИнформации(Форма, "КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", "КонтактнаяИнформацияПолеЮрАдресКонтрагента");
	КонецЕсли;
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииФактАдресаКонтрагента(Форма)
	
	Форма.ЮрФактАдресаСовпадают = СокрЛП(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(Форма.КонтактнаяИнформацияПолеФактАдресКонтрагента);
	Форма.ЮрПочтовыйАдресаСовпадают = СокрЛП(Форма.КонтактнаяИнформацияПолеЮрАдресКонтрагента) = СокрЛП(Форма.КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьПолеКонтактнойИнформации(Форма, ИмяПриемника, ИмяИсточника)
	
	Форма.Модифицированность = Истина;
	Форма[ИмяПриемника] = Форма[ИмяИсточника];
	
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Отбор.ИмяРеквизита = ИмяИсточника;
	ДанныеИсточника = Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отбор.ИмяРеквизита = ИмяПриемника;
	ДанныеПриемника = Форма[ИмяОписания].НайтиСтроки(Отбор);
	Если ДанныеПриемника.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеИсточника[0].Тип = ДанныеПриемника[0].Тип Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПриемника[0].Значение = ДанныеИсточника[0].Значение;
	ДанныеПриемника[0].Представление = ДанныеИсточника[0].Представление;
	ДанныеПриемника[0].Комментарий = ДанныеИсточника[0].Комментарий;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АдресныйКлассификаторПуст()

	Возврат НЕ АдресныйКлассификатор.АдресныйКлассификаторЗагружен();

КонецФункции

&НаКлиенте
Процедура ОбработатьЗакрытиеФормыСпискаДублей(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ПроверитьДубли(ЭтаФорма);
	
	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект);
	
	// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСитуациюВыбораДубля(Элемент)
		
	ПараметрыПередачи = Новый Структура;
	
	ПараметрыПередачи.Вставить("ИНН", Объект.ИНН);
	ПараметрыПередачи.Вставить("КПП", Объект.КПП);
	ПараметрыПередачи.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ЧтоВыполнитьПослеЗакрытия = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСпискаДублей", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбораДублей", 
				  ПараметрыПередачи, 
				  Элемент,
				  ,
				  ,
				  ,
				  ЧтоВыполнитьПослеЗакрытия);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьДубли(Форма)
	
	Если Не Форма.ТолькоПросмотр Тогда
		Объект = Форма.Объект;
		
		ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		
		Если ЗначениеЗаполнено(Объект.ИНН) И Объект.ИННВведенКорректно И (Объект.КППВведенКорректно ИЛИ ЭтоФизЛицо) Тогда 
			
			КоличествоЭлементовДублей = ВыполнитьПоискДублейСервер(Объект.ИНН, Объект.КПП, Объект.Ссылка);
			
			Форма.ЕстьДубли = НЕ КоличествоЭлементовДублей = 0;
			
			Если НЕ Форма.ЕстьДубли Тогда
				
				Объект.РасширенноеПредставлениеИНН = Объект.ИНН;
				Объект.РасширенноеПредставлениеКПП = Объект.КПП;
				
			КонецЕсли;
			
			Форма.РезультатПроверкиНаДубли = ОписаниеРезультатаПроверкиДублей(Форма, КоличествоЭлементовДублей);
			
		Иначе
			Форма.ЕстьДубли = Ложь;
			Форма.РезультатПроверкиНаДубли = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеРезультатаПроверкиДублей(Форма, Знач КоличествоЭлементовДублей)
	
	Объект = Форма.Объект;
	
	// Если контрагент еще не записан, то не учитываем его при подсчете
	Если НЕ Объект.Ссылка.Пустая() Тогда
		КоличествоЭлементовДублей = КоличествоЭлементовДублей + 1;
	КонецЕсли;
	
	Если Форма.ЕстьДубли Тогда
		
		ЭтоФизЛицо = Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		
		СтруктураПараметровСообщенияОДублях = Новый Структура;
		СтруктураПараметровСообщенияОДублях.Вставить("ИННиКПП", ?(ЭтоФизЛицо, НСтр("ru = 'ИНН'"), НСтр("ru = 'ИНН и КПП'")));
		
		Если КоличествоЭлементовДублей = 1 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", НСтр("ru = 'один'"));
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагент'"));
		ИначеЕсли КоличествоЭлементовДублей < 5 Тогда
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагента'"));
		Иначе
			СтруктураПараметровСообщенияОДублях.Вставить("КоличествоЭлементовДублей", КоличествоЭлементовДублей);
			СтруктураПараметровСообщенияОДублях.Вставить("СклонениеКонтрагентов", НСтр("ru = 'контрагентов'"));
		КонецЕсли;
		
		ТекстНадписиОДублях = НСтр("ru = 'С таким [ИННиКПП] есть [КоличествоЭлементовДублей] [СклонениеКонтрагентов]'");
		
		ТекстНадписиОДублях = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстНадписиОДублях, СтруктураПараметровСообщенияОДублях);
		
		Возврат Новый ФорматированнаяСтрока(ТекстНадписиОДублях, ,Форма.ЦветВыделенияНекорректногоЗначение, ,"ПоказатьДубли");
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП)
	
	ЭтотОбъект.НадписьПоясненияНекорректногоИНН = "";
	ЭтотОбъект.НадписьПоясненияНекорректногоКПП = "";
	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	ТекстПредставленияИННКПП = НСтр("ru = '%1
									|%2'");
	
	Если ПроверитьИНН Тогда
		
		РезультатПроверки  = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Объект.ИНН, ЭтоЮрЛицо);
		ОшибокПоИННнет = РезультатПроверки.СоответствуетТребованиям;
		ТекстОшибкиИНН     = РезультатПроверки.ОписаниеОшибки;
		
		Если НЕ ТолькоПросмотр Тогда
			Объект.ИННВведенКорректно          = ПустаяСтрока(ТекстОшибкиИНН) И ОшибокПоИННнет;
			Объект.РасширенноеПредставлениеИНН = СтрШаблон(ТекстПредставленияИННКПП, Объект.ИНН, ТекстОшибкиИНН);
		КонецЕсли; 
		
		РезультатПроверкиИНН = Новый ФорматированнаяСтрока(ТекстОшибкиИНН,, ЦветВыделенияНекорректногоЗначение);
	
	КонецЕсли;
	
	Если ПроверитьКПП Тогда
		
		РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(Объект.КПП, ЭтоЮрЛицо, Объект.ОбособленноеПодразделение);
		
		Если НЕ ТолькоПросмотр Тогда
			Объект.КППВведенКорректно = РезультатПроверки.СоответствуетТребованиям;
			Объект.РасширенноеПредставлениеКПП = СтрШаблон(ТекстПредставленияИННКПП, Объект.КПП, РезультатПроверки.ОписаниеОшибки);
		КонецЕсли;
		
		РезультатПроверкиКПП = Новый ФорматированнаяСтрока(РезультатПроверки.ОписаниеОшибки,, ЦветВыделенияНекорректногоЗначение);
	
	КонецЕсли;
	
	ПроверитьДубли(ЭтотОбъект);
	
	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект);
	
	ПроверкаКонтрагентовПоИННКППВозможна = (Объект.СтранаРегистрации = Справочники.СтраныМира.Россия) 
		И Объект.ИННВведенКорректно 
		И (Объект.КППВведенКорректно ИЛИ НЕ ЭтоЮрЛицо);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПоискДублейСервер(Знач ИНН, Знач КПП, Знач Ссылка)
	
	Возврат Справочники.Контрагенты.ПроверитьДублиСправочникаКонтрагентыПоИННКПП(СокрЛП(ИНН), СокрЛП(КПП), Ссылка).Количество();
	
КонецФункции

&НаКлиенте
Процедура НаименованиеПолноеНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.НаименованиеПолное = Результат.Значение;
		Модифицированность = Истина;
		ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
			ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаписатьЭлементСНеуникальнымИННЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ПараметрыЗаписи = ДополнительныеПараметры.ПараметрыЗаписи;
		ПараметрыЗаписи.Вставить("ПропуститьПроверку", Истина);
		Если Записать(ПараметрыЗаписи) И ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверкиНаДубли = ОписаниеРезультатаПроверкиДублей(ЭтотОбъект, ДополнительныеПараметры.КоличествоЭлементовДублей);
	
	ОбщегоНазначенияБПКлиентСервер.ОтобразитьРезультатПроверкиКонтрагентовВФорме(ЭтотОбъект);
	
		// Устанавливаем текст заголовка
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(ИмяРеквизита)
	
	Если ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресКонтрагента" Тогда
		
		ПриИзмененииЮрАдресаКонтрагента(ЭтотОбъект);
		
		УправлениеКонтактнойИнформациейБП.УстановитьАктуальноеЗначениеИсторииИзмененийАдреса(
			ЭтотОбъект,
			Элементы.КонтактнаяИнформацияПолеЮрАдресКонтрагента);
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяРеквизита = "КонтактнаяИнформацияПолеФактАдресКонтрагента" Тогда
		
		ПриИзмененииФактАдресаКонтрагента(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть()

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И (СтрДлина(СтрокаИНН) = 10 ИЛИ СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
КонецФункции

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ЗапуститьПроверкуКонтрагента()
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		
		// Переопределение свойств ЭтоИностранныйКонтрагент и ЮридическоеФизическоеЛицо.
		ДополнитьРеквизитыФормыКонтрагент(ЭтотОбъект);
		
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
		ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтаФорма);
		// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНаСсылку(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ПоказатьДубли" Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьСитуациюВыбораДубля(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	КонтрагентЗарегистрированВРФ = (Объект.СтранаРегистрации = Справочники.СтраныМира.Россия);
	КонтрагентФизическоеЛицо = (Объект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	
	Элементы.НаименованиеПолное.Заголовок = ?(КонтрагентФизическоеЛицо, НСтр("ru = 'ФИО'"), НСтр("ru = 'Полное наименование'"));
	Элементы.ГоловнойКонтрагент.Видимость             = Объект.ОбособленноеПодразделение;
	Элементы.ИНН.ТолькоПросмотр                       = Объект.ОбособленноеПодразделение;
	Элементы.ДокументУдостоверяющийЛичность.Видимость = КонтрагентФизическоеЛицо;
	Элементы.ГруппаЗаполнениеПоДаннымЕГР.Видимость    = ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.КнопкаЗаполнитьРеквизитыПоИНН.Видимость  = КонтрагентЗарегистрированВРФ
		И НЕ Объект.ОбособленноеПодразделение
		И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	Элементы.ГруппаКПП.Видимость                      = ДоступенКПП(ЭтотОбъект);
	Элементы.НалоговыйНомер.Видимость                 = НЕ КонтрагентЗарегистрированВРФ;
	Элементы.ИНН.ОграничениеТипа                      = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Элементы.КодПоОКПО.Видимость                      = КонтрагентЗарегистрированВРФ;
	Элементы.СтранаРегистрации.Видимость              = НЕ Объект.ГосударственныйОрган;
	Элементы.ГруппаРегистрацияКакИП.Видимость         = КонтрагентФизическоеЛицо;
	Элементы.ГруппаГосударственныйОрган.Видимость     = Объект.ГосударственныйОрган;
	
	Элементы.КнопкаЗаполнитьРеквизитыПоНаименованию.Видимость = КонтрагентЗарегистрированВРФ
		И НЕ КонтрагентФизическоеЛицо 
		И НЕ Объект.ОбособленноеПодразделение
		И НЕ ОтобразитьЗаполнениеПоДаннымЕГР;
	
	// ОГРН, ОГРНИП или регистрационный номер для иностранного контрагента
	Если НЕ КонтрагентЗарегистрированВРФ Тогда
		Элементы.РегистрационныйНомер.Заголовок = НСтр("ru = 'Рег. номер'");
		Элементы.РегистрационныйНомер.Подсказка = 
			НСтр("ru = 'Регистрационный номер, присвоенный иностранной организации в стране регистрации (инкорпорации)'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.РегистрационныйНомер.ПодсказкаВвода       = НСтр("ru = 'Регистрационный номер в стране регистрации'");
		Элементы.РегистрационныйНомер.Ширина               = 0;
		Элементы.РегистрационныйНомер.Маска                = "";
		Элементы.ИНН.Подсказка = НСтр("ru = 'Идентификационный номер налогоплательщика, присваивается иностранной организации 
			|при первой постановке на учет в налоговом органе Российской Федерации'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Элементы.ИНН.ПодсказкаВвода       = НСтр("ru = 'Введите ИНН'");
		Элементы.Банк.ПодсказкаВвода      = НСтр("ru = 'Введите БИК, SWIFT или наименование банка'");
	ИначеЕсли КонтрагентФизическоеЛицо Тогда
		Элементы.РегистрационныйНомер.Заголовок = НСтр("ru = 'ОГРНИП'");
		Элементы.РегистрационныйНомер.Подсказка = 
			НСтр("ru = 'Основной государственный регистрационный номер индивидуального 
						|предпринимателя, указан в Свидетельстве о государственной 
						|регистрации физического лица в качестве ИП'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода       = "";
		Элементы.РегистрационныйНомер.Ширина               = 17;
		Элементы.РегистрационныйНомер.Маска                = "999999999999999";
		Элементы.ИНН.Подсказка            = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.ИНН.ПодсказкаВвода       = НСтр("ru = 'Введите ИНН'");
		Элементы.Банк.ПодсказкаВвода      = НСтр("ru = 'Введите БИК или наименование банка'");
	Иначе
		// Юридическое лицо
		Элементы.РегистрационныйНомер.Заголовок = НСтр("ru = 'ОГРН'");
		Элементы.РегистрационныйНомер.Подсказка = 
			НСтр("ru = 'Основной государственный регистрационный номер юридического лица'");
		Элементы.РегистрационныйНомер.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Элементы.РегистрационныйНомер.ПодсказкаВвода = "";
		Элементы.РегистрационныйНомер.Маска          = "9999999999999";
		Элементы.РегистрационныйНомер.Ширина         = 17;
		Элементы.ИНН.Подсказка            = НСтр("ru = 'Идентификационный номер налогоплательщика'");
		Элементы.ИНН.ОтображениеПодсказки = ОтображениеПодсказки.Авто;
		Если Объект.ОбособленноеПодразделение Тогда
			Элементы.ИНН.ПодсказкаВвода = НСтр("ru = 'ИНН головного контрагента'");
		Иначе
			Элементы.ИНН.ПодсказкаВвода = НСтр("ru = 'Введите ИНН'");
		КонецЕсли;
		
		Элементы.Банк.ПодсказкаВвода    = НСтр("ru = 'Введите БИК или наименование банка'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИННПриИзмененииНаСервере()
	ПроверитьИННКППДубли(Истина, Ложь);
	
	УстановитьВидимостьЭлементов();
КонецПроцедуры

&НаСервере
Процедура КПППриИзмененииНаСервере()
	
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииКПП(Объект.КПП , Объект.ИсторияКПП);
	
	ПроверитьИНН = Ложь;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
КонецПроцедуры

&НаСервере
Процедура СтранаРегистрацииПриИзмененииНаСервере()
	
	Если Объект.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Объект.КПП = "";
	Иначе
		Объект.РегистрационныйНомер = "";
	КонецЕсли;
	
	УстановитьИННОбособленногоПодразделения(Объект);
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ВидПриИзмененииНаСервере()
	
	ПриИзмененииВидаКонтрагента();
	
	ПроверитьИНН = Истина;
	ПроверитьКПП = Истина;
	
	ПроверитьИННКППДубли(ПроверитьИНН, ПроверитьКПП);
	
	УстановитьВидимостьЭлементов();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРеквизитыНаСервере(ДополнительныеПараметры.АдресРеквизитовКонтрагента, ДополнительныеПараметры.ПроверитьИНН);
		
		Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
			// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
			ЗапуститьПроверкуКонтрагента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ПроверитьИНН = Ложь)
	
	Если ОтобразитьЗаполнениеПоДаннымЕГР Тогда
		// Если нужно проверить ИНН, то берем из объекта (используется для заполнению по наименованию)
		Если ПроверитьИНН Тогда
			ИННОбъекта = СокрП(Объект.ИНН);
		Иначе
			ИННОбъекта = СокрП(ПолеПоискаИНННаименование);
			// Запустим проверку после заполнения
			ПроверитьИНН = Истина;
		КонецЕсли;
		
		Объект.ОбособленноеПодразделение = Ложь;
		
	Иначе
		ИННОбъекта = СокрП(Объект.ИНН);
	КонецЕсли;
	
	ЭтоЮрЛицо = (Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	ДанныеДляЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ОписаниеОшибки) Тогда
		
		ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
			"ВыполнитьЗаполнениеРеквизитовПоИННЗавершение",
			ЭтотОбъект,
			ИННОбъекта);
		ДополнительныеПараметрыОбработкиОшибки =
			РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
		ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов контрагентов'");
		ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "kontragent";
		ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
		
		РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
			ДанныеДляЗаполнения.ОписаниеОшибки,
			ОбработчикЗавершенияОбработкиОшибки,
			ДополнительныеПараметрыОбработкиОшибки);
		
	ИначеЕсли ДанныеДляЗаполнения.Свойство("ЮридическоеФизическоеЛицо") 
		И ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо 
		И НЕ Параметры.Ключ.Пустая() Тогда
		
		ЭтоЮрЛицо = (ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru='Заполнить по ИНН %1 %2?'"), 
			?(ЭтоЮрЛицо, НСтр("ru = 'юридического лица'"), НСтр("ru = 'предпринимателя'")),
			ДанныеДляЗаполнения.НаименованиеКонтрагента);
			
		ДополнительныеПараметры = Новый Структура("АдресРеквизитовКонтрагента, ПроверитьИНН", ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН);
			
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ДанныеДляЗаполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
		ЗаполнитьРеквизитыНаСервере(ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН)
	КонецЕсли;
	
	Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
		// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
		ЗапуститьПроверкуКонтрагента();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИННЗавершение(Результат, СтрокаИНН) Экспорт
	
	Если Результат.ПовторитьДействие Тогда
		Объект.ИНН = СтрокаИНН;
		ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементКонтактнойИнформации(ИмяРеквизита, СтруктураДанных)
	
	Если СтруктураДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	Строки = ЭтотОбъект.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтруктураДанных);
	ДанныеСтроки.Значение = СтруктураДанных.КонтактнаяИнформация;
	ЭтотОбъект[ИмяРеквизита] = СтруктураДанных.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДопПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьЗаполнениеПоИНН()
	
	ОтключитьЗаполнениеПоИНН = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоТекстуЗаполнения(ТекстЗаполнения)

	ОтобразитьЗаполнениеПоДаннымЕГР = ПустаяСтрока(ТекстЗаполнения) И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	
	Если ПустаяСтрока(ТекстЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоИНН(ТекстЗаполнения) Тогда
		
		ЭтоЮрЛицо = (СтрДлина(ТекстЗаполнения) = 10);
	
		Объект.Наименование = "";
		Объект.ИНН = ТекстЗаполнения;
		Объект.ЮридическоеФизическоеЛицо = ?(ЭтоЮрЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Объект.ОбособленноеПодразделение = Ложь;
		
		РезультатВыполнения = ДанныеЕдиныхГосРеестровПоИНН(Объект.ИНН, ЭтоЮрЛицо);
		
		Если РезультатВыполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
			ЗаполнитьРеквизитыНаСервере(РезультатВыполнения.АдресРеквизитовКонтрагента, Истина);
		КонецЕсли; 
		
	Иначе
		Объект.НаименованиеПолное = ТекстЗаполнения;
	КонецЕсли;
	
	ТекстЗаполнения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте()
	
	ПолеПоискаИНННаименование = СокрЛП(ПолеПоискаИНННаименование);
	
	Если ПустаяСтрока(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Введите ИНН или Наименование'"),, "ПолеПоискаИНННаименование");
		Возврат;
	КонецЕсли;
	
	Если ОтключитьЗаполнениеПоИНН <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоИНН = ЭтоИНН(ПолеПоискаИНННаименование);
	Если ЗаполнениеПоИНН Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН();
	ИначеЕсли ЗначениеЗаполнено(Объект.Наименование) 
		ИЛИ (ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
		И КонтактнаяИнформацияПолеЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) Тогда
		ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("СтрокаПоиска", ПолеПоискаИНННаименование);
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ПолеПоискаИНННаименование);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ДопПараметры.СтрокаПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(Наименование)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", Наименование);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента", 
		ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт

	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИНН = Результат;
	ВыполнитьЗаполнениеРеквизитовПоИНН(Истина);
	
	ТекущийЭлемент = Элементы.Наименование;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьРеквизитыФормыКонтрагент(Форма) Экспорт
	
	Если Форма.ПроверкаКонтрагентовПоИННКППВозможна Тогда
		
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоИностранныйКонтрагент =
			ЗначениеЗаполнено(Форма.Объект.СтранаРегистрации)
			И Форма.Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
			
		Форма.РеквизитыПроверкиКонтрагентов.ЭтоЮридическоеЛицо =
			Форма.Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗагрузитьКарточкуКонтрагентаXMLИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат.ПользовательОтказалсяОтЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Результат.ФайлЗагружен Тогда
		ПоказатьПредупреждение(, Результат.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(Результат.АдресФайла);
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруРеквизитовИзФайлаКарточкиXMLНаСервере(АдресФайлаXML)
	
	АдресаФайловXML = Новый Массив;
	АдресаФайловXML.Добавить(АдресФайлаXML);
	
	СтруктураРеквизитов = Справочники.Контрагенты.РазобратьКарточкиКонтрагентовXML(АдресаФайловXML);
	Если ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
		ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов[0].ДанныеКарточки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыИзКарточкиXMLПоЭлектроннойПочтеЗавершение(СтруктураРеквизитов,
	ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураРеквизитов) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов);
	
	ЗапуститьПроверкуКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗаполнениеРеквизитовКонтрагента(СтруктураРеквизитов)
	
	ЭтоЮрЛицо = СтруктураРеквизитов.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
	Объект.СтранаРегистрации = Справочники.СтраныМира.Россия;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов);
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.ЮридическийАдрес) И
			ЗначениеЗаполнено(СтруктураРеквизитов.ФактическийАдрес) Тогда
		АдресаСовпадают = ОбщегоНазначения.ДанныеСовпадают(СтруктураРеквизитов.ЮридическийАдрес.Представление,
			СтруктураРеквизитов.ФактическийАдрес.Представление);
	Иначе
		АдресаСовпадают = Ложь;
	КонецЕсли;
	
	Если ЭтоЮрЛицо Тогда
		Вид = "ЮридическоеЛицо";
		КПППриИзмененииНаСервере();
	Иначе
		Вид = "ФизическоеЛицо";
	КонецЕсли;
	
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
	
	Если АдресаСовпадают Тогда
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
	Иначе
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", СтруктураРеквизитов.ФактическийАдрес);
		ЮрФактАдресаСовпадают = Ложь;
	КонецЕсли;
	
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", СтруктураРеквизитов.ЮридическийАдрес);
	ЮрПочтовыйАдресаСовпадают = Истина;
	
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеТелефонКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
		"", СтруктураРеквизитов.Телефон));
	ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеEmailКонтрагента", Новый Структура("КонтактнаяИнформация, Представление",
		"", СтруктураРеквизитов.АдресЭлектроннойПочты));
		
	Если ЗначениеЗаполнено(СтруктураРеквизитов.НомерСчета) Тогда
		Банки = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", СтруктураРеквизитов.БИК);
		Если Банки.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='БИК %1 банка контрагента не найден в классификаторе банков РФ'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураРеквизитов.БИК);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			БанковскийСчет.Банк = Банки[0].Ссылка;
			НаименованиеБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет.Банк, "Наименование");
			БанковскийСчет.НомерСчета = СтруктураРеквизитов.НомерСчета;
			ЯвляетсяБанкомРФ = Истина;
			ИзмененБанковскийСчет = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Руководитель) Тогда
		
		ФИОРуководителя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураРеквизитов.Руководитель, " ");
		ДанныеКонтактногоЛица = Новый Структура("Фамилия, Имя, Отчество, Должность",
			?(ФИОРуководителя.Количество() >= 1, ФИОРуководителя[0], Неопределено),
			?(ФИОРуководителя.Количество() >= 2, ФИОРуководителя[1], Неопределено),
			?(ФИОРуководителя.Количество() >= 3, ФИОРуководителя[2], Неопределено),
			СтруктураРеквизитов.ДолжностьРуководителя);
		
	КонецЕсли;
	
	ИННПриИзмененииНаСервере();
	
	ОтобразитьЗаполнениеПоДаннымЕГР = Ложь;
	
	УстановитьВидимостьЭлементов();
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

#Область СПАРК

&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()
	
	Если ПоказатьИнформациюСпарк(ЭтотОбъект) Тогда
		ПараметрыОтображения = Новый Структура("ВариантОтображения", "Многострочный");
		СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
			ЭтотОбъект.ИндексыСПАРКРиски,
			Объект,
			Объект.ИНН, // Искать по ИНН
			СПАРКРискиКлиентСерверБП.ВидКонтрагентаСПАРКРиски(Объект.ЮридическоеФизическоеЛицо),
			ЭтотОбъект,
			ПараметрыОтображения,
			Истина);
	Иначе
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()
	
	ОбновитьОтображениеИндексыСПАРК();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьИнформациюСпарк(Форма)

	Объект = Форма.Объект;
	ПоказатьИнформацию =Не Объект.ГосударственныйОрган
		И Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
		
	Возврат ПоказатьИнформацию

КонецФункции

&НаСервере
Процедура ОграничитьВыборРеквизитов(ЗначенияЗаполнения)
	
	Если ЗначенияЗаполнения.Свойство("ГосударственныйОрган") Тогда
		Элементы.Вид.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыЭДО

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО()
	
	ОбменСКонтрагентамиКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыПодсистемыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьИзменение(ЭтотОбъект, Элемент);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьОчистку(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачатьВыбор(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКонтактнуюИнформацию(Результат)
	
	Если Результат.Свойство("ИмяРеквизита") Тогда
		ПослеИзмененияКонтактнойИнформации(Результат.ИмяРеквизита);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьОбновлениеКонтактнойИнформации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьКонтактнуюИнформацию(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ПроцедурыПодсистемыСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВСправочнике(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ИсторияКПП

&НаСервере
Процедура УстановитьКПППослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияКПП.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияКПП.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	Объект.КПП = НаборЗаписей[НаборЗаписей.Количество()-1].КПП;
	КПППриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступенКПП(Форма)
	
	КонтрагентФизическоеЛицо = Форма.Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	
	Возврат НЕ КонтрагентФизическоеЛицо;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьИННОбособленногоПодразделения(Объект)
	
	Если НЕ Объект.ОбособленноеПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		ИННГоловногоКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГоловнойКонтрагент, "ИНН");
		Если Объект.ИНН <> ИННГоловногоКонтрагента Тогда
			Объект.ИНН = ИННГоловногоКонтрагента;
		КонецЕсли;
	Иначе
		Объект.ИНН = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияКППНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущийКПП, ИсторияКПП, ТолькоПросмотр", 
					Объект.КПП, Объект.ИсторияКПП, ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииКПП", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОсновнойБанковскийСчет

&НаКлиенте
Функция ЗаблокироватьБанковскийСчетПриРедактировании()
	
	Если НЕ БанковскийСчет.Ссылка.Пустая() И НЕ БанковскийСчетЗаблокирован Тогда
		Если НЕ ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(БанковскийСчет.Ссылка, БанковскийСчет.ВерсияДанных, УникальныйИдентификатор) Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не удается внести изменения в реквизиты основного банковского счета. Возможно данные редактируются другим пользователем.'"));
			ПрочитатьОсновнойБанковскийСчет();
			Возврат Ложь;
		Иначе
			БанковскийСчетЗаблокирован = Истина;
			Возврат Истина;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаблокироватьБанковскийСчетПриРедактированииНаСервере(Ссылка, ВерсияДанных, УникальныйИдентификатор)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Ссылка, ВерсияДанных, УникальныйИдентификатор);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОсновнойБанковскийСчет()
	
	Если ЗначениеЗаполнено(Объект.ОсновнойБанковскийСчет) Тогда
		ОсновнойБанковскийСчетОбъект = Объект.ОсновнойБанковскийСчет.ПолучитьОбъект();
	ИначеЕсли ПравоДоступа("Добавление", Метаданные.Справочники.БанковскиеСчета) Тогда
		ОсновнойБанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
	Иначе
		ОсновнойБанковскийСчетОбъект = Неопределено;
	КонецЕсли;
	
	Если ОсновнойБанковскийСчетОбъект <> Неопределено Тогда
		ЗначениеВРеквизитФормы(ОсновнойБанковскийСчетОбъект, "БанковскийСчет");
		ИзмененБанковскийСчет = Ложь;
		РеквизитыБанка = БанковскиеСчетаВызовСервера.ПолучитьРеквизитыБанкаИзСправочника(БанковскийСчет.Банк);
		ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОсновнойБанковскийСчет(ОсновнойБанковскийСчет)
	
	Прочитать();
			
	Объект.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
	
	ПрочитатьОсновнойБанковскийСчет();
	
	Если НЕ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОсновнойБанковскийСчет(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ОсновнойБанковскийСчет) И ИзмененБанковскийСчет Тогда
		
		ОбъектРегистрации = РеквизитФормыВЗначение("БанковскийСчет");
		
		Если НЕ ЗначениеЗаполнено(ОбъектРегистрации.Ссылка) Тогда
			ОбъектРегистрации.УстановитьСсылкуНового(ТекущийОбъект.ОсновнойБанковскийСчет);
			ОбъектРегистрации.Заполнить(Новый Структура("Владелец", ТекущийОбъект.Ссылка));
		КонецЕсли;
		
		ОбъектРегистрации.Валютный = (ОбъектРегистрации.ВалютаденежныхСредств <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		ОбъектРегистрации.Наименование = БанковскиеСчетаФормыКлиентСервер.НаименованиеБанковскогоСчета(ОбъектРегистрации, НаименованиеБанка);
		ОбъектРегистрации.Записать();
		
		ЗначениеВРеквизитФормы(ОбъектРегистрации, "БанковскийСчет");
		
		ИзмененБанковскийСчет = Ложь;
		
		Если БанковскийСчетЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(ТекущийОбъект.ОсновнойБанковскийСчет, УникальныйИдентификатор);
			БанковскийСчетЗаблокирован = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеПолноеПриИзмененииНаСервере()
	
	Справочники.Контрагенты.УстановитьАктуальноеЗначениеИсторииНаименований(Объект.НаименованиеПолное , Объект.ИсторияНаименований);
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущийТекстНомераСчета = СтрЗаменить(Текст," ","");
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПодсказкуНомераСчета", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
	Если Не ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
		БИКБанка = "";
		НаименованиеБанка = "";
		ДеятельностьБанкаПрекращена = Ложь;
		ЯвляетсяБанкомРФ = Ложь;
	КонецЕсли;
	
	БанковскиеСчетаФормыКлиентСервер.ИзменитьДлинуНомераСчета(ЭтотОбъект, ЯвляетсяБанкомРФ);
	БанковскийСчет.НомерСчета = Элементы.НомерСчета.ОграничениеТипа.ПривестиЗначение(БанковскийСчет.НомерСчета);
	
	БанковскиеСчетаФормыКлиентСервер.УстановитьЗаголовокГруппыРеквизитовСчета(ЭтотОбъект, БанковскийСчет);
	
	ПодсказкаБанк = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляБанка(ДеятельностьБанкаПрекращена);
	
	НадежностьБанковКлиентСервер.ПолучитьИнформациюНадежностьБанков(ЭтотОбъект,
		БИКБанка,
		ПоказыватьИнформациюНадежностьБанков(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(БанковскийСчет.НомерСчета) Тогда
		
		БанковскиеСчетаФормыКлиент.УстановитьВалютуПодсказкуСчета(
			БанковскийСчет, ЭтотОбъект, БИКБанка, ЦветВыделенияНекорректногоЗначение, ЯвляетсяБанкомРФ);
		
	КонецЕсли;
	
	ВидимостьРеквизитовБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ЗаблокироватьБанковскийСчетПриРедактировании() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Банки")
		Или ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		РеквизитыБанка = БанковскиеСчетаФормыКлиент.ПолучитьДанныеБанка(ВыбранноеЗначение);
		ВыбранноеЗначение = РеквизитыБанка.Ссылка;
		
		ОбновитьРеквизитыБанкаНаФорме(ЭтотОбъект, РеквизитыБанка);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ЗначенияЗаполнения") Тогда
		ОткрытьФорму("Справочник.Банки.ФормаОбъекта", ВыбранноеЗначение.ЗначенияЗаполнения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
			ПараметрыЗаполнения = Новый Структура("Страна", Объект.СтранаРегистрации);
		Иначе
			ПараметрыЗаполнения = Новый Структура("Страна, СВИФТБИК", Объект.СтранаРегистрации, Элемент.ТекстРедактирования);
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("БанкНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Справочник.Банки.ФормаВыбора", ПараметрыЗаполнения, ЭтотОбъект,,,, Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка, ПараметрыПолученияДанных,
		Объект.СтранаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	БанковскиеСчетаФормыКлиент.БанкОкончаниеВводаТекста(Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка,
		Объект.СтранаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		БанковскийСчет.Банк = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПодсказкуНомераСчета()
	
	Если ЯвляетсяБанкомРФ Тогда
		
		Если Не БанковскиеПравила.ПроверитьДлинуНомераСчета(ТекущийТекстНомераСчета) Тогда
			ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиент.ПодсказкаВводаПоляНомерСчета(ТекущийТекстНомераСчета, БИКБанка);
		Иначе
			ПодсказкаНомерСчета = БанковскиеСчетаФормыКлиентСервер.ПодсказкаПоляНомерСчета(
				ТекущийТекстНомераСчета, БИКБанка, ЯвляетсяБанкомРФ, ЦветВыделенияНекорректногоЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	ВидимостьРеквизитовБанковскогоСчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьРеквизитыБанкаНаФорме(Форма, РеквизитыБанка)
	
	Если ЗначениеЗаполнено(РеквизитыБанка.Ссылка) Тогда
		
		Если РеквизитыБанка.ЯвляетсяБанкомРФ Тогда 
			Форма.БИКБанка = РеквизитыБанка.Код;
		Иначе
			Форма.БИКБанка = РеквизитыБанка.СВИФТБИК;
		КонецЕсли;
		
		Форма.НаименованиеБанка = РеквизитыБанка.Наименование;
		Форма.ДеятельностьБанкаПрекращена = РеквизитыБанка.ДеятельностьПрекращена;
		Форма.ЯвляетсяБанкомРФ = РеквизитыБанка.ЯвляетсяБанкомРФ;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьРеквизитовБанковскогоСчета(Форма)
	
	Форма.Элементы.ВалютаДенежныхСредств.Видимость = Не Форма.ЯвляетсяБанкомРФ И ЗначениеЗаполнено(Форма.БанковскийСчет.Банк);
	Форма.Элементы.ПодсказкаБанк.Видимость = ЗначениеЗаполнено(Форма.ПодсказкаБанк);
	Форма.Элементы.ПодсказкаНомерСчета.Видимость = ЗначениеЗаполнено(Форма.ПодсказкаНомерСчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ИзмененБанковскийСчет = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьИнформациюНадежностьБанков(Форма)
	
	Если Форма.ДеятельностьБанкаПрекращена 
		ИЛИ НЕ ЗначениеЗаполнено(Форма.БИКБанка) 
		ИЛИ НЕ Форма.ЯвляетсяБанкомРФ Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьИнформациюНадежностьБанков()
	
	НадежностьБанковКлиент.ПоказатьИнформациюНадежностьБанков(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияНаименований

&НаКлиенте
Процедура ИсторияНаименованиеПолноеНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ТекущееНаименованиеПолное, ИсторияНаименований, ТолькоПросмотр", 
					Объект.НаименованиеПолное, Объект.ИсторияНаименований, ТолькоПросмотр);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.РедактированиеИсторииНаименований", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеПослеРедактированияИстории(НаборЗаписей)
	
	Модифицированность = Истина;
	
	НаборЗаписей.Сортировать("Период");
	
	Объект.ИсторияНаименований.Очистить();
	Если НаборЗаписей.Количество() > 1 Тогда
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			ЗаписьИстории = Объект.ИсторияНаименований.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьИстории, ЗаписьНабора);
		КонецЦикла;
	КонецЕсли;
	
	Объект.НаименованиеПолное = НаборЗаписей[НаборЗаписей.Количество()-1].НаименованиеПолное;
	
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаКонтрагента()
	Если Вид = "ФизическоеЛицо" Тогда
		Объект.ЮридическоеФизическоеЛицо  = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Объект.ИНН                        = ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
		Объект.КПП                        = "";
		Объект.ОбособленноеПодразделение  = Ложь;
		Объект.ГосударственныйОрган       = Ложь;
		Объект.ВидГосударственногоОргана  = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		Объект.КодГосударственногоОргана  = "";
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	ИначеЕсли Вид = "ОбособленноеПодразделение" Тогда
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ИНН                              = "";
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Истина;
		Объект.ГосударственныйОрган             = Ложь;
		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		Объект.КодГосударственногоОргана        = "";
		Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Неопределено;
		КонецЕсли;
	ИначеЕсли Вид = "ГосударственныйОрган" Тогда
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Ложь;
		Объект.СтранаРегистрации                = Справочники.СтраныМира.Россия;
		Объект.ГосударственныйОрган             = Истина;
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	Иначе
		Объект.ЮридическоеФизическоеЛицо        = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Объект.ИНН                              = ?(Объект.СтранаРегистрации = Справочники.СтраныМира.Россия, "", Объект.ИНН);
		Объект.КПП                              = "";
		Объект.ДокументУдостоверяющийЛичность   = "";
		Объект.ОбособленноеПодразделение        = Ложь;
		Объект.ГосударственныйОрган             = Ложь;
		Объект.ВидГосударственногоОргана        = Перечисления.ВидыГосударственныхОрганов.ПустаяСсылка();
		Объект.КодГосударственногоОргана        = "";
		Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН)
	
	Если РеквизитыКонтрагента.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо Тогда
		
		Вид = ?(РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо", "ЮридическоеЛицо");
		ПриИзмененииВидаКонтрагента();
	
	КонецЕсли; 
	
	ЭтоЮрЛицо = (РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента);
	Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
	ФормироватьНаименованиеПолноеАвтоматически = ПустаяСтрока(Объект.НаименованиеПолное)
		ИЛИ (Объект.НаименованиеПолное = Объект.Наименование);
	
	НаименованияАвтозаполнения.Очистить();
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеПолное);
	НаименованияАвтозаполнения.Добавить(РеквизитыКонтрагента.НаименованиеСокращенное);
	
	ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюНаименований(Объект, РеквизитыКонтрагента); // заполнение истории наименований по данным ЕГРН
	
	Если ЭтоЮрЛицо Тогда
		
		// Заполнение адресов
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеЮрАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеФактАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрФактАдресаСовпадают = Истина;
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеПочтовыйАдресКонтрагента", РеквизитыКонтрагента.ЮридическийАдрес);
		ЮрПочтовыйАдресаСовпадают = Истина;
		
		// Заполнение телефона
		
		ЗаполнитьЭлементКонтактнойИнформации("КонтактнаяИнформацияПолеТелефонКонтрагента", РеквизитыКонтрагента.Телефон);
		
		// Заполнение контактного лица 
		
		Если РеквизитыКонтрагента.Руководитель <> Неопределено 
			И НЕ ЗначениеЗаполнено(Объект.ОсновноеКонтактноеЛицо) Тогда
			
			ДанныеКонтактногоЛица = РеквизитыКонтрагента.Руководитель;
			ПредставлениеКонтактногоЛица = ДанныеКонтактногоЛица.Фамилия
				+ " " + ДанныеКонтактногоЛица.Имя
				+ " " + ДанныеКонтактногоЛица.Отчество
				+ ", " + ДанныеКонтактногоЛица.Должность;
			
		КонецЕсли;
		
		Если ДоступенКПП(ЭтотОбъект) Тогда
			ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюКПП(Объект, РеквизитыКонтрагента); // заполнение истории КПП по данным ЕГРН
		КонецЕсли;
		
		ИнтернетПоддержкаПользователейБП.ЗаполнитьИсториюАдресов(Объект, РеквизитыКонтрагента); // заполнение истории юр. адресов по данным ЕГРН
		
	Иначе
		
		Объект.КПП = "";
		СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
		Если СвидетельствоОРегистрации <> Неопределено Тогда
			Объект.СвидетельствоСерияНомер = Строка(СвидетельствоОРегистрации.Серия) + " " + СвидетельствоОРегистрации.Номер;
			Объект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Проверим дубли
	ПроверитьИННКППДубли(ПроверитьИНН, Истина);
	
	УстановитьВидимостьЭлементов();
	УправлениеФормой(ЭтотОбъект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыНаСервере(АдресРеквизитовКонтрагента, ПроверитьИНН)
	
	РеквизитыКонтрагента = ПолучитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
	
	Если Объект.ЮридическоеФизическоеЛицо <> РеквизитыКонтрагента.ЮридическоеФизическоеЛицо Тогда
	
		Вид = ?(РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо", "ФизическоеЛицо");
		ВидПриИзмененииНаСервере();
		
	КонецЕсли; 
	
	ЗаполнитьРеквизитыКонтрагента(РеквизитыКонтрагента, ПроверитьИНН);
	
	// ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ИнициализироватьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// Переопределение свойств ЭтоИностранныйКонтрагент и ЮридическоеФизическоеЛицо.
	ДополнитьРеквизитыФормыКонтрагент(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.РаботаСКонтрагентами
	
	УдалитьИзВременногоХранилища(АдресРеквизитовКонтрагента);
 	РеквизитыКонтрагента = Неопределено;
	
	ФормироватьНаименованиеПолноеАвтоматически = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо)
	ДанныеЗаполнения = Новый Структура("ОписаниеОшибки", "");
	
	ИННОбъекта = СокрП(ИННОбъекта);
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда
		
		Если РезультатПроверки.ЭтоЮрЛицо Тогда
			СведенияОКонтрагенте = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИННОбъекта);
			Если ЗначениеЗаполнено(СведенияОКонтрагенте.ЕГРЮЛ) Тогда
				РеквизитыКонтрагента = СведенияОКонтрагенте.ЕГРЮЛ;
			Иначе
				РеквизитыКонтрагента = Новый Структура;
				ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
				РеквизитыКонтрагента.Вставить("ОписаниеОшибки", СтрШаблон(ШаблонОписанияОшибки, ИННОбъекта));
			КонецЕсли;
			РеквизитыКонтрагента.Вставить("ИНН", ИННОбъекта);
			Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
			Если Не ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
				Если ЗначениеЗаполнено(РеквизитыКонтрагента.Руководители) Тогда
					ЗаполнитьЗначенияСвойств(Руководитель, РеквизитыКонтрагента.Руководители[0]);
				Иначе
					Руководитель = Неопределено;
				КонецЕсли;
				РеквизитыКонтрагента.Вставить("Руководитель", Руководитель);
				РеквизитыКонтрагента.Вставить("КодОКВЭД",
					?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности), РеквизитыКонтрагента.ВидДеятельности.Код, Неопределено));
				РеквизитыКонтрагента.Вставить("ЭтоОКВЭД2",  
					?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности) И РеквизитыКонтрагента.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
			КонецЕсли;
		Иначе
			РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИННОбъекта);
			РеквизитыКонтрагента.Вставить("КодОКВЭД",
				?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности), РеквизитыКонтрагента.ВидДеятельности.Код, Неопределено));
			РеквизитыКонтрагента.Вставить("ЭтоОКВЭД2",  
				?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности) И РеквизитыКонтрагента.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		КонецЕсли;
		
		ДобавитьЗаписьВЖурналОбИспользованииСервиса(ИННОбъекта);
		
		РеквизитыКонтрагента.Вставить("ЮридическоеФизическоеЛицо", 
			?(РезультатПроверки.ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
		
		Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
			ДанныеЗаполнения.ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		Иначе
			ДанныеЗаполнения.Вставить("НаименованиеКонтрагента", РеквизитыКонтрагента.Наименование);
			ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", РеквизитыКонтрагента.ЮридическоеФизическоеЛицо);
			ДанныеЗаполнения.Вставить("АдресРеквизитовКонтрагента", ПоместитьВоВременноеХранилище(РеквизитыКонтрагента, Новый УникальныйИдентификатор));
		КонецЕсли;
	Иначе
		ДанныеЗаполнения.ОписаниеОшибки = РезультатПроверки.ОписаниеОшибки;
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаписьВЖурналОбИспользованииСервиса(ИННОбъекта)
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение контрагента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Контрагенты, ,
		СтрШаблон(НСтр("ru = 'Выполнено заполнение реквизитов контрагента по ИНН %1'"), ИННОбъекта));
	
КонецПроцедуры

#КонецОбласти
