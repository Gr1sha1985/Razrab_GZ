//#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Создает контрагента по переданной структуре
//
// Параметры:
//  - ДанныеЗаполнения - Структура - структура свойств контрагента
//
// Возвращаемое значение:
//  - Ссылка - ссылка на созданный элемент справочника
//
Функция СоздатьКонтрагента(ДанныеЗаполнения) Экспорт
	
	СуществующийКонтрагент = РаботаСКонтрагентамиБП.НайтиКонтрагентаПоИНН_КПП(ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(СуществующийКонтрагент) Тогда
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Иначе
		Контрагент = СуществующийКонтрагент.ПолучитьОбъект();
		Контрагент.Заблокировать();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Контрагент, ДанныеЗаполнения);
	
	Контрагент.Заполнить(ДанныеЗаполнения);

	КодРегиона = Лев(ДанныеЗаполнения.ИНН, 2);
	Контрагент.ГЗ_Регион = Справочники.ГЗ_Регионы.НайтиПоКоду(КодРегиона);
		
	Если Контрагент.ЭтоНовый() Тогда
		Контрагент.Записать();
	КонецЕсли;
	
	КонтрагентСсылка = Контрагент.Ссылка;
	
	// Банковский счет
	Если ДанныеЗаполнения.Свойство("НомерСчета") 
		И ДанныеЗаполнения.Свойство("БИК") 
		И ЗначениеЗаполнено(ДанныеЗаполнения.НомерСчета)
		И ЗначениеЗаполнено(ДанныеЗаполнения.БИК) Тогда
		Контрагент.ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПолучитьЭлемент(
			КонтрагентСсылка, ДанныеЗаполнения.НомерСчета, ДанныеЗаполнения.БИК, ДанныеЗаполнения);
	КонецЕсли;
	
	// Руководитель
	Если ДанныеЗаполнения.Свойство("Руководитель") 
		И ДанныеЗаполнения.Свойство("ДолжностьРуководителя")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Руководитель)
		И ЗначениеЗаполнено(ДанныеЗаполнения.ДолжностьРуководителя) Тогда
		ЧастиИмени = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеЗаполнения.Руководитель);
		ДанныеКонтактногоЛица = Новый Структура;
		ДанныеКонтактногоЛица.Вставить("Должность", ДанныеЗаполнения.ДолжностьРуководителя);
		ДанныеКонтактногоЛица.Вставить("Фамилия",   ЧастиИмени.Фамилия);
		ДанныеКонтактногоЛица.Вставить("Имя",       ЧастиИмени.Имя);
		ДанныеКонтактногоЛица.Вставить("Отчество",  ЧастиИмени.Отчество);
		Контрагент.ОсновноеКонтактноеЛицо = Справочники.КонтактныеЛица.ПолучитьЭлемент(КонтрагентСсылка, ДанныеКонтактногоЛица);
	КонецЕсли;
	
	Контрагент.Записать();
	Контрагент = Неопределено;
	
	Возврат КонтрагентСсылка;
	
КонецФункции

//// Создает налоговую инспекцию по переданным данным заполнения.
////
//// Параметры:
////   ДанныеЗаполнения - Структура - структура свойств контрагента с дополнительными полями:
////      * Организация - СправочникСсылка.Организации - организация, обслуживаемая в налоговой инспекции.
////          Имеет смысл указывать, если не передано свойство "КодНалоговогоОргана".
////      * АдресОрганизации - Строка - представление или значение JSON юридического адреса организации.
////          Имеет смысл указывать, если не передано свойство "КодНалоговогоОргана".
////
//Функция НайтиСоздатьНалоговуюИнспекцию(ДанныеЗаполнения) Экспорт
//	
//	НалоговаяИнспекцияСсылка = ПустаяСсылка();
//	
//	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ИНН) Тогда
//		Возврат НалоговаяИнспекцияСсылка;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
//	|	Контрагенты.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.ИНН = &ИНН
//	|	И Контрагенты.КПП = &КПП
//	|	И НЕ Контрагенты.ПометкаУдаления";
//	
//	Запрос.УстановитьПараметр("ИНН", ДанныеЗаполнения.ИНН);
//	Запрос.УстановитьПараметр("КПП", ДанныеЗаполнения.КПП);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		НалоговаяИнспекцияСсылка = Выборка.Ссылка;
//	Иначе
//		Если Не ДанныеЗаполнения.Свойство("КодНалоговогоОргана") Тогда
//			СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ДанныеЗаполнения.Организация, ДанныеЗаполнения.АдресОрганизации);
//			ДанныеЗаполнения.Вставить("КодНалоговогоОргана", СведенияОНалоговомОргане.КодНалоговогоОргана);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(ДанныеЗаполнения.КодНалоговогоОргана) Тогда
//			РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(ДанныеЗаполнения.КодНалоговогоОргана);
//			
//			Если РеквизитыНалоговогоОргана.ИНН = ДанныеЗаполнения.ИНН
//				И РеквизитыНалоговогоОргана.КПП = ДанныеЗаполнения.КПП Тогда // Код НО определили верно.
//				Если Не ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
//					ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
//				КонецЕсли;
//				
//				НалоговаяИнспекцияСсылка = РеквизитыНалоговогоОргана.Ссылка;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	
//	// Если все предыдущие варианты поиска не увенчались успехом, создадим контрагента по имеющимся данным.
//	Если Не ЗначениеЗаполнено(НалоговаяИнспекцияСсылка) Тогда
//		ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
//		
//		НалоговаяИнспекция = СоздатьЭлемент();
//		НалоговаяИнспекция.Заполнить(ДанныеЗаполнения);
//		НалоговаяИнспекция.Записать();
//		
//		НалоговаяИнспекцияСсылка = НалоговаяИнспекция.Ссылка;
//	КонецЕсли;
//	
//	Возврат НалоговаяИнспекцияСсылка;
//	
//КонецФункции

//Функция СведенияОНалоговомОрганеПоАдресу(Организация, АдресОрганизации)
//	
//	Сведения = Новый Структура();
//	Сведения.Вставить("КодНалоговогоОргана", "");
//	Сведения.Вставить("КодПоОКТМО", "");
//	Сведения.Вставить("КодПоОКАТО", "");
//	
//	Если Не ЗначениеЗаполнено(АдресОрганизации) Тогда
//		Возврат Сведения;
//	КонецЕсли;
//	
//	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВJSON(АдресОрганизации) Тогда
//		АдресJSON = АдресОрганизации;
//	Иначе
//		АдресJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
//			АдресОрганизации, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
//	КонецЕсли;
//	
//	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(АдресJSON, "Сервис1С");
//	
//	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
//		КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
//	Иначе
//		КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСФЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
//		
//		Сведения.КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу;
//		Сведения.КодПоОКТМО = Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0");
//		Сведения.КодПоОКАТО = Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0");
//		
//	КонецЕсли;
//	
//	Возврат Сведения;
//	
//КонецФункции

//#Область СведенияОКонтрагенте

//Функция СведенияОКонтрагенте(Контрагент, ДатаСведений) Экспорт
//	
//	СписокСведений = "Наименование, ЮридическоеФизическоеЛицо, ИНН, КПП";
//	СведенияОКонтрагенте = Новый Структура(СписокСведений);
//	
//	Если ЗначениеЗаполнено(Контрагент) Тогда
//		
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, 
//				"Наименование, НаименованиеПолное, ЮридическоеФизическоеЛицо, ИНН, КПП, СтранаРегистрации");
//		
//		СведенияОКонтрагенте.ЮридическоеФизическоеЛицо = Реквизиты.ЮридическоеФизическоеЛицо;
//		СведенияОКонтрагенте.Наименование = ?(ЗначениеЗаполнено(Реквизиты.НаименованиеПолное), Реквизиты.НаименованиеПолное, Реквизиты.Наименование);
//		СведенияОКонтрагенте.ИНН          = Реквизиты.ИНН;
//		
//		Если Реквизиты.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
//			
//			СведенияОКонтрагенте.КПП = КППНаДату(Контрагент, ДатаСведений);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Возврат СведенияОКонтрагенте;
//	
//КонецФункции

//Функция КППНаДату(Контрагент, ДатаСведений) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(Контрагент)
//		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
//		Возврат "";
//	КонецЕсли;
//	
//	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
//		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
//	КонецЕсли;
//	
//	Запрос = Новый Запрос();
//	Запрос.Параметры.Вставить("Контрагент", Контрагент);
//	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	МАКСИМУМ(ИсторияКППКонтрагентов.Период) КАК Период,
//	|	ИсторияКППКонтрагентов.Ссылка КАК Ссылка
//	|ПОМЕСТИТЬ ЗначенияКПП
//	|ИЗ
//	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
//	|ГДЕ
//	|	ИсторияКППКонтрагентов.Ссылка = &Контрагент
//	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ИсторияКППКонтрагентов.Ссылка
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ИсторияКППКонтрагентов.КПП КАК КПП
//	|ИЗ
//	|	ЗначенияКПП КАК ЗначенияКПП
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
//	|		ПО ЗначенияКПП.Ссылка = ИсторияКППКонтрагентов.Ссылка
//	|			И ЗначенияКПП.Период = ИсторияКППКонтрагентов.Период";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		Возврат Выборка.КПП;
//	Иначе
//		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
//	КонецЕсли;
//	
//КонецФункции

//Процедура УстановитьАктуальноеЗначениеИсторииКПП(КПП, ИсторияКПП) Экспорт
//	
//	КоличествоЗаписей = ИсторияКПП.Количество();
//	
//	Если КоличествоЗаписей > 0 Тогда
//		
//		ИсторияКПП.Сортировать("Период");
//		АктуальнаяЗаписьИстории = ИсторияКПП[КоличествоЗаписей - 1];
//		АктуальнаяЗаписьИстории.КПП = КПП;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура УстановитьАктуальноеЗначениеИсторииКонтактнойИнформации(КонтактнаяИнформация, ИсторияКонтактнойИнформации) Экспорт
//	
//	КоличествоЗаписей = ИсторияКонтактнойИнформации.Количество();
//	
//	Если КоличествоЗаписей > 0 Тогда
//		
//		ИсторияКонтактнойИнформации.Сортировать("Период");
//		АктуальнаяЗаписьИстории = ИсторияКонтактнойИнформации[КоличествоЗаписей - 1];
//		ЗаписьКонтактнойИнформации = КонтактнаяИнформация.Найти(АктуальнаяЗаписьИстории.Вид, "Вид");
//		Если ЗаписьКонтактнойИнформации <> Неопределено Тогда
//			ЗаполнитьЗначенияСвойств(АктуальнаяЗаписьИстории, ЗаписьКонтактнойИнформации, "Представление,ЗначенияПолей,Значение");
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ЭтоИностраннаяОрганизация(Контрагент) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
//		Возврат Ложь;
//	КонецЕсли;

//	ИменаРеквизитовКонтрагента = "ИНН, ЮридическоеФизическоеЛицо, СтранаРегистрации";
//	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, ИменаРеквизитовКонтрагента);
//	
//	Возврат РеквизитыКонтрагента.СтранаРегистрации <> Справочники.СтраныМира.Россия
//		И РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо
//		И НЕ ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН);

//КонецФункции

//Функция ЭтоФизическоеЛицо(Контрагент) Экспорт
//	
//	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	ИменаРеквизитовКонтрагента = "ИНН, ЮридическоеФизическоеЛицо";
//	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, ИменаРеквизитовКонтрагента);
//	
//	Возврат РеквизитыКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
//		И НЕ ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН);

//КонецФункции

//#КонецОбласти

//#Область ПроцедурыИФункцииПечати

//// Заполняет список команд печати.
//// 
//// Параметры:
////   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
////
//Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
//	
//	// Печать конвертов
//	КомандаПечати = КомандыПечати.Добавить();
//	КомандаПечати.Идентификатор = "Конверт";
//	КомандаПечати.Представление = НСтр("ru = 'Конверт'");
//	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиКонверта";
//	КомандаПечати.СписокФорм    = "ФормаЭлемента,ФормаСписка";
//	
//КонецПроцедуры

//Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
//	
//	Если ПараметрыПечати.Свойство("ФорматКонверта")
//		И ПараметрыПечати.Свойство("ИмяМакета")
//		И УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ПараметрыПечати.ИмяМакета) Тогда
//		ТабличныйДокумент = ПечатьКонверта(МассивОбъектов, ОбъектыПечати, ПараметрыПечати);
//		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
//			КоллекцияПечатныхФорм,
//			ПараметрыПечати.ИмяМакета,
//			"Конверт", 
//			ТабличныйДокумент, ,
//			"ОбщийМакет." + ПараметрыПечати.ИмяМакета);
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти

//#Область ПечатьКонвертов

//// Возвращает контейнер для заполнения в конверте сведений о получателе.
//// 
//// Возвращаемое значение:
////   - Структура
////       * Представление - Строка - Представление получателя.
////       * Индекс - Строка - Индекс получателя.
////       * Адрес - Строка - Адрес получателя, части адреса должны быть разделены запятыми.
////                          Например, "ул.Новая, дом 1, корпус 1, кв. 1, г.Москва, Россия".
////
//Функция НовыйСведенияОПолучателеКонверта() Экспорт
//	
//	СведенияОУчастникеПереписки = Новый Структура();
//	СведенияОУчастникеПереписки.Вставить("Представление", "");
//	СведенияОУчастникеПереписки.Вставить("Индекс",     "");
//	СведенияОУчастникеПереписки.Вставить("Адрес",      "");
//	Возврат СведенияОУчастникеПереписки;
//	
//КонецФункции

//// Возвращает контейнер для заполнения в конверте сведений об отправителе.
//// 
//// Возвращаемое значение:
////   - Структура
////       * Представление - Строка - Представление отправителя.
////       * Индекс - Строка - Индекс отправителя.
////       * Адрес - Строка - Адрес отправителя, части адреса должны быть разделены запятыми.
////                          Например, "ул.Новая, дом 1, корпус 1, кв. 1, г.Москва, Россия".
////       * ПечататьЛоготип - Булево - Нужно ли выводить логотип на конверт.
////       * Логотип - ДвоичныеДанные - Двоичные данные картинки логотипа.
////
//Функция НовыйСведенияОбОтправителеКонверта() Экспорт
//	
//	СведенияОУчастникеПереписки = Новый Структура();
//	СведенияОУчастникеПереписки.Вставить("Представление", "");
//	СведенияОУчастникеПереписки.Вставить("Индекс", "");
//	СведенияОУчастникеПереписки.Вставить("Адрес", "");
//	СведенияОУчастникеПереписки.Вставить("ПечататьЛоготип", Ложь);
//	СведенияОУчастникеПереписки.Вставить("Логотип", Неопределено);
//	Возврат СведенияОУчастникеПереписки;
//	
//КонецФункции

//Функция ПечатьКонверта(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
//	
//	Результат = Новый ТабличныйДокумент;
//	
//	ПараметрыВыводаВМакет = ПараметрыВыводаВМакет(ПараметрыПечати);
//	УстановитьПараметрыПечатиКонверта(Результат, ПараметрыВыводаВМакет);
//	
//	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет." + ПараметрыПечати.ИмяМакета);
//	
//	ДанныеДляПечатиКонвертов = ДанныеДляПечатиКонвертов(МассивОбъектов, ПараметрыПечати);
//	
//	ПервыйКонверт = Истина;
//	Для Каждого ДанныеПечатиКонверта Из ДанныеДляПечатиКонвертов Цикл
//		
//		Если ПервыйКонверт Тогда
//			ПервыйКонверт = Ложь;
//		Иначе
//			Результат.ВывестиГоризонтальныйРазделительСтраниц();
//		КонецЕсли;
//		
//		НомерСтрокиНачало = Результат.ВысотаТаблицы + 1;
//		
//		Если ЗначениеЗаполнено(Макет.Области.Найти("Заголовок")) Тогда
//			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
//			ЗаполнитьЗаголовокКонверта(ОбластьЗаголовок, ДанныеПечатиКонверта, ПараметрыВыводаВМакет);
//			Результат.Вывести(ОбластьЗаголовок);
//		КонецЕсли;
//		
//		Если ЗначениеЗаполнено(Макет.Области.Найти("Индекс")) Тогда
//			ОбластьИндекс = Макет.ПолучитьОбласть("Индекс");
//			ЗаполнитьКодовыйШтамп(ОбластьИндекс, ДанныеПечатиКонверта.СведенияОПолучателеКонверта);
//			Результат.Вывести(ОбластьИндекс);
//		КонецЕсли;
//		
//		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(Результат,
//			НомерСтрокиНачало, ОбъектыПечати, ДанныеПечатиКонверта.ОбъектПечати);
//		
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ДанныеДляПечатиКонвертов(МассивОбъектов, ПараметрыПечати)
//	
//	ДанныеДляПечатиКонвертов = Новый ТаблицаЗначений;
//	ДанныеДляПечатиКонвертов.Колонки.Добавить("ОбъектПечати");
//	ДанныеДляПечатиКонвертов.Колонки.Добавить("СведенияОПолучателеКонверта");
//	ДанныеДляПечатиКонвертов.Колонки.Добавить("СведенияОбОтправителеКонверта");
//	
//	Если ПараметрыПечати.Свойство("СведенияОПолучателеКонверта")
//		И ЗначениеЗаполнено(ПараметрыПечати.СведенияОПолучателеКонверта) Тогда
//		
//		ЗаполнитьДанныеДляПечатиКонвертаПоСведениюОПолучателе(
//			ДанныеДляПечатиКонвертов, ПараметрыПечати.СведенияОПолучателеКонверта, ПараметрыПечати)
//		
//	ИначеЕсли МассивОбъектов.Количество() > 0 Тогда
//		
//		ЗаполнитьДанныеДляПечатиКонвертовПоМассивуОбъектов(ДанныеДляПечатиКонвертов, МассивОбъектов, ПараметрыПечати);
//		
//	КонецЕсли;
//	
//	Возврат ДанныеДляПечатиКонвертов;
//	
//КонецФункции

//Процедура ЗаполнитьДанныеДляПечатиКонвертаПоСведениюОПолучателе(ДанныеДляПечатиКонвертов, СведенияОПолучателеКонверта, ПараметрыПечати)
//	
//	СтрокаОбъектаПечати = ДанныеДляПечатиКонвертов.Добавить();
//	СтрокаОбъектаПечати.СведенияОПолучателеКонверта = СведенияОПолучателеКонверта;
//	СтрокаОбъектаПечати.СведенияОбОтправителеКонверта = СведенияОбОрганизацииДляКонверта(
//		ПараметрыПечати.Организация, ПараметрыПечати.ПечататьЛоготип);
//	
//КонецПроцедуры

//Процедура ЗаполнитьДанныеДляПечатиКонвертовПоМассивуОбъектов(ДанныеДляПечатиКонвертов, МассивОбъектов, ПараметрыПечати)
//	
//	УчастникиПерепискиДляКонвертов = УчастникиПерепискиДляКонвертов(МассивОбъектов, ПараметрыПечати);
//	
//	Если НЕ ЗначениеЗаполнено(УчастникиПерепискиДляКонвертов) Тогда
//		Возврат;
//	КонецЕсли;
//	
//	СведенияОбОрганизациях = Новый Соответствие;
//	СведенияОКонтрагентах  = Новый Соответствие;
//	
//	Для Каждого УчастникиПерепискиКонверта Из УчастникиПерепискиДляКонвертов Цикл
//		СтрокаОбъектаПечати = ДанныеДляПечатиКонвертов.Добавить();
//		СтрокаОбъектаПечати.ОбъектПечати = УчастникиПерепискиКонверта.ОбъектПечати;
//		
//		СведенияОПолучателеКонверта = СведенияОКонтрагентах.Получить(УчастникиПерепискиКонверта.Получатель);
//		Если СведенияОПолучателеКонверта = Неопределено Тогда
//			СведенияОПолучателеКонверта = СведенияОКонтрагентеДляКонверта(
//				УчастникиПерепискиКонверта.Получатель, ПараметрыПечати.ВидАдресаКонтрагента);
//			СведенияОКонтрагентах.Вставить(УчастникиПерепискиКонверта.Получатель, СведенияОПолучателеКонверта);
//		КонецЕсли;
//		СтрокаОбъектаПечати.СведенияОПолучателеКонверта = СведенияОПолучателеКонверта;
//		
//		СведенияОбОтправителеКонверта = СведенияОбОрганизациях.Получить(УчастникиПерепискиКонверта.Отправитель);
//		Если СведенияОбОтправителеКонверта = Неопределено Тогда
//			СведенияОбОтправителеКонверта = СведенияОбОрганизацииДляКонверта(
//				УчастникиПерепискиКонверта.Отправитель, ПараметрыПечати.ПечататьЛоготип);
//			СведенияОбОрганизациях.Вставить(УчастникиПерепискиКонверта.Отправитель, СведенияОбОтправителеКонверта);
//		КонецЕсли;
//		СтрокаОбъектаПечати.СведенияОбОтправителеКонверта = СведенияОбОтправителеКонверта;
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция УчастникиПерепискиДляКонвертов(МассивОбъектов, ПараметрыПечати)
//	
//	ОбъектПечати = МассивОбъектов[0];
//	МетаданныеОбъектаПечати = ОбъектПечати.Метаданные();
//	
//	Запрос = Новый Запрос;
//	Если ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.Контрагенты") Тогда
//		
//		Запрос.Текст = ТекстЗапросаПечатьКонвертовИзКонтрагентов();
//		Запрос.УстановитьПараметр("Организация", ПараметрыПечати.Организация);
//		
//	ИначеЕсли ТипЗнч(ОбъектПечати) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
//		
//		Запрос.Текст = ТекстЗапросаПечатьКонвертовИзДоговоровКонтрагентов();
//		
//	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъектаПечати)
//		И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОбъектаПечати) Тогда
//		
//		Запрос.Текст = ТекстЗапросаПечатьКонвертов(МетаданныеОбъектаПечати);
//		
//	Иначе
//		
//		Возврат Неопределено;
//		
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("ОбъектыПечати", МассивОбъектов);
//	Возврат Запрос.Выполнить().Выгрузить();
//	
//КонецФункции

//Функция СведенияОКонтрагентеДляКонверта(Контрагент, ВидАдреса)
//	
//	СведенияОКонтрагенте = НовыйСведенияОПолучателеКонверта();
//	СведенияОКонтрагенте.Представление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "НаименованиеПолное");
//	
//	ПочтовыеАдреса = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
//		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент), , ВидАдреса);
//	
//	Если ПочтовыеАдреса.Количество() > 0 Тогда
//		АдресJSON = ПочтовыеАдреса[0].Значение;
//		СведенияОСтранеАдреса = УправлениеКонтактнойИнформацией.СтранаАдресаКонтактнойИнформации(АдресJSON);
//		Если СведенияОСтранеАдреса.Ссылка = Справочники.СтраныМира.Россия Тогда
//			СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(АдресJSON);
//			СведенияОКонтрагенте.Индекс = ПредставлениеИндекса(СведенияОбАдресе);
//			СведенияОКонтрагенте.Адрес = ПредставлениеПочтовогоАдреса(СведенияОбАдресе);
//		Иначе
//			СведенияОКонтрагенте.Адрес = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(АдресJSON, ВидАдреса);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СведенияОКонтрагенте;
//	
//КонецФункции

//Функция СведенияОбОрганизацииДляКонверта(Организация, ПечататьЛоготип)
//	
//	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
//		"ЮридическоеФизическоеЛицо, ФамилияИП, ИмяИП, ОтчествоИП, НаименованиеСокращенное");
//	
//	СведенияОбОрганизации = НовыйСведенияОбОтправителеКонверта();
//	СведенияОбОрганизации.Представление = ?(РеквизитыОрганизации.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо,
//		СокрЛП(СтрШаблон("%1 %2 %3", РеквизитыОрганизации.ФамилияИП, РеквизитыОрганизации.ИмяИП, РеквизитыОрганизации.ОтчествоИП)),
//		РеквизитыОрганизации.НаименованиеСокращенное);
//	
//	ПочтовыеАдресаОрганизации = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
//		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация), , Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
//	Если ПочтовыеАдресаОрганизации.Количество() > 0 Тогда
//		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ПочтовыеАдресаОрганизации[0].Значение);
//		СведенияОбОрганизации.Индекс = ПредставлениеИндекса(СведенияОбАдресе);
//		СведенияОбОрганизации.Адрес = ПредставлениеПочтовогоАдреса(СведенияОбАдресе);
//	КонецЕсли;
//	
//	Если ПечататьЛоготип Тогда
//		ДвоичныеДанныеКартинки = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(
//			Организация, "ФайлЛоготип");
//		Если ЗначениеЗаполнено(ДвоичныеДанныеКартинки) Тогда
//			СведенияОбОрганизации.ПечататьЛоготип = Истина;
//			СведенияОбОрганизации.Логотип = ДвоичныеДанныеКартинки;
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СведенияОбОрганизации;
//	
//КонецФункции

//Функция ТекстЗапросаПечатьКонвертовИзКонтрагентов()
//	
//	Результат =
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка КАК Получатель,
//	|	Контрагенты.Ссылка КАК ОбъектПечати,
//	|	Организации.Ссылка КАК Отправитель
//	|ИЗ
//	|	Справочник.Организации КАК Организации
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
//	|		ПО (Контрагенты.Ссылка В (&ОбъектыПечати))
//	|			И (Организации.Ссылка = &Организация)
//	|ГДЕ
//	|	НЕ Контрагенты.Ссылка ЕСТЬ NULL ";
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ТекстЗапросаПечатьКонвертовИзДоговоровКонтрагентов()
//	
//	Результат =
//	"ВЫБРАТЬ
//	|	ДоговорыКонтрагентов.Владелец КАК Получатель,
//	|	ДоговорыКонтрагентов.Ссылка КАК ОбъектПечати,
//	|	ДоговорыКонтрагентов.Организация.Ссылка КАК Отправитель
//	|ИЗ
//	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
//	|ГДЕ
//	|	ДоговорыКонтрагентов.Ссылка В(&ОбъектыПечати)";
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ТекстЗапросаПечатьКонвертов(МетаданныеОбъектаПечати)
//	
//	Результат =
//	"ВЫБРАТЬ
//	|	Таблица.Контрагент КАК Получатель,
//	|	Таблица.Ссылка КАК ОбъектПечати,
//	|	Таблица.Организация КАК Отправитель
//	|ИЗ
//	|	" + МетаданныеОбъектаПечати.ПолноеИмя() + " КАК Таблица
//	|ГДЕ
//	|	Таблица.Ссылка В (&ОбъектыПечати)";
//	
//	Возврат Результат;
//	
//КонецФункции

//Процедура ЗаполнитьЗаголовокКонверта(ОбластьЗаголовок, ДанныеОбъектаПечати, ПараметрыВыводаВМакет)
//	
//	Если ЗначениеЗаполнено(ДанныеОбъектаПечати.СведенияОПолучателеКонверта) Тогда
//		ЗаполнитьПолучателяКонверта(ОбластьЗаголовок, ДанныеОбъектаПечати.СведенияОПолучателеКонверта, ПараметрыВыводаВМакет);
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДанныеОбъектаПечати.СведенияОбОтправителеКонверта) Тогда
//		ЗаполнитьОтправителяКонверта(ОбластьЗаголовок, ДанныеОбъектаПечати.СведенияОбОтправителеКонверта, ПараметрыВыводаВМакет);
//	КонецЕсли;
//	
//КонецПроцедуры

//Функция ПараметрыВыводаВМакет(ПараметрыПечати)
//	
//	Если ПараметрыПечати.ФорматКонверта = Перечисления.ФорматыПочтовыхКонвертов.C4 Тогда
//		РазмерСтраницы = "Envelope C4";
//		ДлинаПервойСтроки = 50;
//		ДлинаВторойСтроки = 56;
//	ИначеЕсли ПараметрыПечати.ФорматКонверта = Перечисления.ФорматыПочтовыхКонвертов.C5 Тогда
//		РазмерСтраницы = "Envelope C5";
//		ДлинаПервойСтроки = 35;
//		ДлинаВторойСтроки = 46;
//	Иначе
//		РазмерСтраницы = "Envelope DL";
//		ДлинаПервойСтроки = 55;
//		ДлинаВторойСтроки = 65;
//	КонецЕсли;
//	
//	ПараметрыВыводаВМакет = Новый Структура;
//	ПараметрыВыводаВМакет.Вставить("РазмерСтраницы"   , РазмерСтраницы);
//	ПараметрыВыводаВМакет.Вставить("ДлинаПервойСтроки", ДлинаПервойСтроки);
//	ПараметрыВыводаВМакет.Вставить("ДлинаВторойСтроки", ДлинаВторойСтроки);
//	Возврат ПараметрыВыводаВМакет;
//	
//КонецФункции

//Процедура УстановитьПараметрыПечатиКонверта(ТабличныйДокумент, ПараметрыВыводаВМакет)
//	
//	ТабличныйДокумент.КлючПараметровПечати    = "ПАРАМЕТРЫ_ПЕЧАТИ_Конверт";
//	ТабличныйДокумент.ПолеСверху              = 5;
//	ТабличныйДокумент.ПолеСнизу               = 5;
//	ТабличныйДокумент.ПолеСправа              = 5;
//	ТабличныйДокумент.ПолеСлева               = 5;
//	ТабличныйДокумент.РазмерСтраницы          = ПараметрыВыводаВМакет.РазмерСтраницы;
//	ТабличныйДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;
//	ТабличныйДокумент.АвтоМасштаб             = Истина;
//	
//КонецПроцедуры

//Процедура ЗаполнитьПолучателяКонверта(ОбластьЗаголовок, СведенияОПолучателеКонверта, ПараметрыВыводаВМакет)
//	
//	ЧастиПредставлениеПолучателя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
//		СведенияОПолучателеКонверта.Представление, " ");
//	ЗаполнитьСекциюКонверта(ОбластьЗаголовок, "Кому", ЧастиПредставлениеПолучателя, ПараметрыВыводаВМакет);
//	
//	ЧастиАдреса = ЧастиАдресаДляВыводаВМакет(СведенияОПолучателеКонверта.Адрес);
//	ЗаполнитьСекциюКонверта(ОбластьЗаголовок, "Куда", ЧастиАдреса, ПараметрыВыводаВМакет);
//	
//КонецПроцедуры

//Процедура ЗаполнитьОтправителяКонверта(ОбластьЗаголовок, СведенияОбОтправителеКонверта, ПараметрыВыводаВМакет)
//	
//	ЧастиПредставленияОтправителя = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(
//		СведенияОбОтправителеКонверта.Представление, " ");
//	ЗаполнитьСекциюКонверта(ОбластьЗаголовок, "ОтКого", ЧастиПредставленияОтправителя, ПараметрыВыводаВМакет);
//	
//	ЧастиАдреса = ЧастиАдресаДляВыводаВМакет(СведенияОбОтправителеКонверта.Адрес);
//	ЗаполнитьСекциюКонверта(ОбластьЗаголовок, "Откуда", ЧастиАдреса, ПараметрыВыводаВМакет);
//	
//	ОбластьЗаголовок.Параметры.ИндексОткуда = СведенияОбОтправителеКонверта.Индекс;
//	
//	Если СведенияОбОтправителеКонверта.ПечататьЛоготип Тогда
//		ЗаполнитьЛоготип(ОбластьЗаголовок, СведенияОбОтправителеКонверта.Логотип);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ЗаполнитьКодовыйШтамп(ОбластьИндекс, СведенияОПолучателеКонверта)
//	
//	Если ЗначениеЗаполнено(СведенияОПолучателеКонверта) Тогда
//		ИндексПолучателя = СведенияОПолучателеКонверта.Индекс;
//	Иначе
//		ИндексПолучателя = Неопределено;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ИндексПолучателя) И СтрДлина(ИндексПолучателя) = 6 Тогда
//		Для Каждого Рисунок Из ОбластьИндекс.Рисунки Цикл
//			Если СтрНачинаетсяС(Рисунок.Имя, "Индекс") Тогда
//				ПозицияИндекса = Прав(Рисунок.Имя, 1);
//				ЦифраИндекса = Сред(ИндексПолучателя, ПозицияИндекса, 1);
//				Если Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ЦифраИндекса) Тогда
//					Продолжить;
//				КонецЕсли;
//				Рисунок.Картинка = БиблиотекаКартинок["ИндексЦифра" + ЦифраИндекса];
//			Иначе
//				Продолжить;
//			КонецЕсли;
//		КонецЦикла;
//		ИндексКуда = Новый Структура("ИндексКуда", ИндексПолучателя);
//		ОбластьИндекс.Параметры.Заполнить(ИндексКуда);
//	Иначе
//		Для Каждого Рисунок Из ОбластьИндекс.Рисунки Цикл
//			Если СтрНачинаетсяС(Рисунок.Имя, "Индекс") Тогда
//				Рисунок.Картинка = БиблиотекаКартинок.ИндексЦифраПустая;
//			КонецЕсли;
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ЗаполнитьСекциюКонверта(Макет, ИмяСекции, Данные, ПараметрыВыводаВМакет)
//	
//	Если ИмяСекции = "ОтКого" Тогда
//		ВысотаСекции = 1;
//	ИначеЕсли ИмяСекции = "Кому" Тогда
//		ВысотаСекции = 2;
//	ИначеЕсли ИмяСекции = "Откуда" И ПараметрыВыводаВМакет.РазмерСтраницы = "Envelope DL" Тогда
//		ВысотаСекции = 2;
//	Иначе
//		ВысотаСекции = 3;
//	КонецЕсли;
//	
//	КоличествоВыведенныхВСекциюЭлементов = 0;
//	ВГраницаМассиваДанных = Данные.ВГраница();
//	Для НомерСекции = 1 По ВысотаСекции Цикл
//		
//		ИмяПараметра = ИмяСекции + НомерСекции;
//		Если НомерСекции = 1 Тогда
//			ДлинаСекции = ПараметрыВыводаВМакет.ДлинаПервойСтроки;
//		Иначе
//			ДлинаСекции = ПараметрыВыводаВМакет.ДлинаВторойСтроки;
//		КонецЕсли;
//		
//		ЭлементыПараметра = Новый Массив;
//		Пока КоличествоВыведенныхВСекциюЭлементов <= ВГраницаМассиваДанных 
//			И СтрДлина(Данные[КоличествоВыведенныхВСекциюЭлементов]) <= ДлинаСекции Цикл
//			
//			ЭлементыПараметра.Добавить(Данные[КоличествоВыведенныхВСекциюЭлементов]);
//			ДлинаСекции = ДлинаСекции - СтрДлина(Данные[КоличествоВыведенныхВСекциюЭлементов]);
//			КоличествоВыведенныхВСекциюЭлементов = КоличествоВыведенныхВСекциюЭлементов + 1;
//			
//		КонецЦикла;
//		ФинализироватьСекцию(ИмяПараметра, ЭлементыПараметра, Макет);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьЛоготип(ОбластьЗаголовок, Логотип)
//	
//	Для Каждого Рисунок Из ОбластьЗаголовок.Рисунки Цикл
//		Если Рисунок.Имя = "ЗонаИллюстраций" Тогда
//			ОбластьЗаголовок.Рисунки.ЗонаИллюстраций.Картинка = Новый Картинка(Логотип);
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ФинализироватьСекцию(ИмяПараметра, ЭлементыПараметра, Макет)
//	
//	ДанныеСекции = СтрСоединить(ЭлементыПараметра, " ");
//	ДанныеСекции = СтрЗаменить(ДанныеСекции, "  ", " ");
//	
//	ЗначениеПараметра = Новый Структура(ИмяПараметра, ДанныеСекции);
//	Макет.Параметры.Заполнить(ЗначениеПараметра);
//	
//КонецПроцедуры

//Функция ЧастиАдресаДляВыводаВМакет(Адрес)
//	
//	ЧастиАдреса = СтрРазделить(Адрес, ",");
//	Для НомерЧастиАдреса = 0 По ЧастиАдреса.Количество() - 2 Цикл
//		ЧастиАдреса[НомерЧастиАдреса] =СокрЛП(ЧастиАдреса[НомерЧастиАдреса]) + "," + " ";
//	КонецЦикла;
//	Возврат ЧастиАдреса;
//	
//КонецФункции

//Функция ПредставлениеПочтовогоАдреса(Адрес)
//	
//	Если Адрес.Свойство("ТипАдреса") И ВРег(Адрес.ТипАдреса) = ВРег("ВСвободнойФорме") Тогда
//		Возврат Адрес.Представление;
//	КонецЕсли;
//	
//	Результат = Новый Массив;
//	ВыводитьСокращениеРегиона = Истина;
//	
//	Если Адрес.Свойство("Улица") И ЗначениеЗаполнено(Адрес.Улица) Тогда
//		
//		Если Адрес.Свойство("УлицаСокращение") И ЗначениеЗаполнено(Адрес.УлицаСокращение) Тогда
//			Если Адрес.УлицаСокращение = "ул" Тогда
//				ПредставлениеУлицы = Адрес.УлицаСокращение + ". " + Адрес.Улица;
//			Иначе
//				ПредставлениеУлицы = Адрес.Улица + " " + Адрес.УлицаСокращение + ".";
//			КонецЕсли;
//		Иначе
//			ПредставлениеУлицы = Адрес.Улица;
//		КонецЕсли;
//		
//		Результат.Добавить(ПредставлениеУлицы);
//	КонецЕсли;
//	
//	Если Адрес.Свойство("ДополнительнаяТерритория") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерритория) Тогда
//		
//		Если Адрес.Свойство("ДополнительнаяТерриторияСокращение") И ЗначениеЗаполнено(Адрес.ДополнительнаяТерриторияСокращение) Тогда
//			ПредставлениеДопТерритории = Адрес.ДополнительнаяТерриторияСокращение + ". " + Адрес.ДополнительнаяТерритория;
//		Иначе
//			ПредставлениеДопТерритории = Адрес.ДополнительнаяТерритория;
//		КонецЕсли;
//		Результат.Добавить(ПредставлениеДопТерритории);
//		
//		Если Адрес.Свойство("ЭлементДополнительнойТерритории") И ЗначениеЗаполнено(Адрес.ЭлементДополнительнойТерритории) Тогда
//			
//			Если Адрес.Свойство("ЭлементДополнительнойТерриторииСокращение") И ЗначениеЗаполнено(Адрес.ЭлементДополнительнойТерриторииСокращение) Тогда
//				
//				Если Адрес.ЭлементДополнительнойТерриторииСокращение = "ул" Тогда
//					ПредставлениеУлицы = Адрес.ЭлементДополнительнойТерриторииСокращение + ". " + Адрес.ЭлементДополнительнойТерритории;
//				Иначе
//					ПредставлениеУлицы = Адрес.ЭлементДополнительнойТерритории + " " + Адрес.ЭлементДополнительнойТерриторииСокращение;
//				КонецЕсли;
//			Иначе
//				ПредставлениеУлицы = Адрес.ЭлементДополнительнойТерриторииСокращение;
//			КонецЕсли;
//			
//			Результат.Добавить(ПредставлениеУлицы);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Здание") И ЗначениеЗаполнено(Адрес.Здание.ТипЗдания) И ЗначениеЗаполнено(Адрес.Здание.Номер) Тогда
//		ПредставлениеЗдания = НРег(Адрес.Здание.ТипЗдания) + " " + Адрес.Здание.Номер;
//		Результат.Добавить(ПредставлениеЗдания);
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Корпуса") И ЗначениеЗаполнено(Адрес.Корпуса) Тогда
//		ПредставлениеКорпусов = Новый Массив;
//		Для Каждого Корпус Из Адрес.Корпуса Цикл
//			ПредставлениеКорпусов.Добавить(НРег(Корпус.ТипКорпуса) + " " + Корпус.Номер);
//		КонецЦикла;
//		Результат.Добавить(СтрСоединить(ПредставлениеКорпусов, ", "));
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Помещения") И ЗначениеЗаполнено(Адрес.Помещения) Тогда
//		ПредставлениеПомещений = Новый Массив;
//		Для Каждого Помещение Из Адрес.Помещения Цикл
//			Если НРег(Помещение.ТипПомещения) = "а/я" Или НРег(Помещение.ТипПомещения) = "в/ч" Тогда
//				// Абонентский ящик - первый элемент адреса. Остальные элементы коллекции не имеют значения.
//				Результат.Вставить(0, НРег(Помещение.ТипПомещения) + " " + Помещение.Номер);
//				Прервать;
//			КонецЕсли;
//			ПредставлениеПомещений.Добавить(НРег(Помещение.ТипПомещения) + " " + Помещение.Номер);
//		КонецЦикла;
//		
//		Если ЗначениеЗаполнено(ПредставлениеПомещений) Тогда
//			Результат.Добавить(СтрСоединить(ПредставлениеПомещений, ", "));
//		КонецЕсли;
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Город") И ЗначениеЗаполнено(Адрес.Город) Тогда
//		Если Адрес.Свойство("ГородСокращение") И ЗначениеЗаполнено(Адрес.ГородСокращение) Тогда
//			ПредставлениеГорода = НРег(Адрес.ГородСокращение) + ". " + Адрес.Город;
//		Иначе
//			ПредставлениеГорода = Адрес.Город;
//		КонецЕсли;
//		Результат.Добавить(ПредставлениеГорода);
//		ВыводитьСокращениеРегиона = Ложь;
//	КонецЕсли;
//	
//	Если Адрес.Свойство("ВнутригородскойРайон") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайон) Тогда
//		Если Адрес.Свойство("ВнутригородскойРайонСокращение") И ЗначениеЗаполнено(Адрес.ВнутригородскойРайонСокращение) Тогда
//			ПредставлениеВнутригородскогоРайона = НРег(Адрес.ВнутригородскойРайонСокращение) + ". " + Адрес.ВнутригородскойРайон;
//		Иначе
//			ПредставлениеВнутригородскогоРайона = Адрес.ВнутригородскойРайон;
//		КонецЕсли;
//		Результат.Добавить(ПредставлениеВнутригородскогоРайона);
//	КонецЕсли;
//	
//	Если Адрес.Свойство("НаселенныйПункт") И ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
//		Если Адрес.Свойство("НаселенныйПунктСокращение") И ЗначениеЗаполнено(Адрес.НаселенныйПунктСокращение) Тогда
//			ПредставлениеНаселенногоПункта = НРег(Адрес.НаселенныйПунктСокращение) + ". " + Адрес.НаселенныйПункт;
//		Иначе
//			ПредставлениеНаселенногоПункта = Адрес.НаселенныйПункт;
//		КонецЕсли;
//		Результат.Добавить(ПредставлениеНаселенногоПункта);
//		ВыводитьСокращениеРегиона = Ложь;
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Район") И ЗначениеЗаполнено(Адрес.Район) Тогда
//		Если Адрес.Свойство("РайонСокращение") И ЗначениеЗаполнено(Адрес.РайонСокращение) Тогда
//			ПредставлениеРайона = Адрес.Район + " " + НРег(Адрес.РайонСокращение) + ".";
//		Иначе
//			ПредставлениеРайона = Адрес.Район;
//		КонецЕсли;
//		Результат.Добавить(ПредставлениеРайона);
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Округ") И ЗначениеЗаполнено(Адрес.Округ) Тогда
//		Если Адрес.Свойство("ОкругСокращение") И ЗначениеЗаполнено(Адрес.ОкругСокращение) Тогда
//			ПредставлениеОкруга = Адрес.Округ + " " + НРег(Адрес.ОкругСокращение) + ".";
//		Иначе
//			ПредставлениеОкруга = Адрес.Округ + " " + НРег(Адрес.ОкругСокращение) + ".";
//		КонецЕсли;
//		Результат.Добавить(ПредставлениеОкруга);
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Регион") И ЗначениеЗаполнено(Адрес.Регион) Тогда
//		
//		Если Адрес.КодРегиона = "77"           // Москва
//			Или Адрес.КодРегиона = "78"        // Санкт-Петербург
//			Или Адрес.КодРегиона = "92"        // Севастополь
//			Или Адрес.КодРегиона = "99" Тогда  // Байконур
//			
//			// У города федерального значения префикс "г. " не пишется если речь идет о нас.пункте в составе города федерального значения.
//			ПредставлениеРегиона = ?(ВыводитьСокращениеРегиона, "г. ", "") + Адрес.Регион;
//		ИначеЕсли Адрес.КодРегиона = "21" Тогда // Чувашская республика - Чувашия
//			ПредставлениеРегиона = НСтр("ru = 'Чувашская Республика - Чувашия'");
//		Иначе
//			Если Адрес.Свойство("РегионСокращение") И ЗначениеЗаполнено(Адрес.РегионСокращение) Тогда
//				ПредставлениеРегиона = Адрес.Регион + " " + НРег(Адрес.РегионСокращение) + ".";
//			Иначе
//				ПредставлениеРегиона = Адрес.Регион;
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		Результат.Добавить(ПредставлениеРегиона);
//		
//	КонецЕсли;
//	
//	Если Адрес.Свойство("Страна") И ЗначениеЗаполнено(Адрес.Страна) Тогда
//		Результат.Добавить(ТРег(Адрес.Страна));
//	КонецЕсли;
//	
//	Возврат СтрСоединить(Результат, "," + " ");
//	
//КонецФункции

//Функция ПредставлениеИндекса(Адрес)
//	
//	Если Адрес.Свойство("ТипАдреса") И ВРег(Адрес.ТипАдреса) = ВРег("ВСвободнойФорме") Тогда
//		Возврат ИндексИзПредставления(Адрес.Представление);
//	КонецЕсли;
//	
//	Возврат Адрес.Индекс;
//	
//КонецФункции

//Функция ИндексИзПредставления(ПредставлениеАдреса)
//	
//	ЧастиАдреса = СтрРазделить(ПредставлениеАдреса, ",");
//	Для Каждого ЧастьАдреса Из ЧастиАдреса Цикл
//		Если СтрДлина(СокрЛП(ЧастьАдреса)) = 6
//			И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(ЧастьАдреса)) Тогда
//			Возврат СокрЛП(ЧастьАдреса);
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат "";
//	
//КонецФункции

//#КонецОбласти

//#Область ОбработчикиОбновления

////Процедура обновления справочника контрагенты
//Процедура ОбновлениеСправочникаКонтрагентыПриВключенииКонтроляКорректностиИННиКПП() Экспорт
//	
//	ТаблицаДублейКонтрагентов = Новый ТаблицаЗначений;
//	
//	ТаблицаДублейКонтрагентов.Колонки.Добавить("Ссылка");
//	ТаблицаДублейКонтрагентов.Колонки.Добавить("ИНН");
//	ТаблицаДублейКонтрагентов.Колонки.Добавить("КПП");
//	ТаблицаДублейКонтрагентов.Колонки.Добавить("ЭтоЮрЛицо");
//	ТаблицаДублейКонтрагентов.Колонки.Добавить("Ключ");
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка,
//	|	Контрагенты.ИНН,
//	|	Контрагенты.КПП,
//	|	Контрагенты.ЮридическоеФизическоеЛицо,
//	|	Контрагенты.ИННВведенКорректно,
//	|	Контрагенты.КППВведенКорректно,
//	|	Контрагенты.РасширенноеПредставлениеИНН,
//	|	Контрагенты.РасширенноеПредставлениеКПП,
//	|	Контрагенты.ОбособленноеПодразделение,
//	|	Контрагенты.СтранаРегистрации
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	НЕ Контрагенты.ЭтоГруппа";
//	
//	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
//	
//	Пока ВыборкаРезультата.Следующий() Цикл
//		
//		Ссылка = ВыборкаРезультата.Ссылка;
//		
//		СправочникОбъект = ВыборкаРезультата.Ссылка.ПолучитьОбъект();
//		
//		ЭтоЮрЛицо = (ВыборкаРезультата.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
//		
//		РезультатПроверкиИНН = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ВыборкаРезультата.ИНН, ЭтоЮрЛицо);
//		РезультатПроверкиКПП = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямКПП(ВыборкаРезультата.КПП, ЭтоЮрЛицо, ВыборкаРезультата.ОбособленноеПодразделение);
//		
//		СправочникОбъект.ИННВВеденКорректно = РезультатПроверкиИНН.СоответствуетТребованиям И (РезультатПроверкиИНН.ЭтоЮрЛицо = ЭтоЮрЛицо);
//		СправочникОбъект.КППВведенКорректно = РезультатПроверкиКПП.СоответствуетТребованиям;
//		
//		Если СправочникОбъект.ИННВВеденКорректно 
//			И (СправочникОбъект.КППВведенКорректно ИЛИ НЕ ЭтоЮрЛицо ИЛИ СправочникОбъект.СтранаРегистрации <> Справочники.СтраныМира.Россия) Тогда
//			
//			НоваяСтрока = ТаблицаДублейКонтрагентов.Добавить();
//			
//			НоваяСтрока.Ссылка = Ссылка;
//			
//			Если НЕ ЭтоЮрЛицо Тогда
//				НоваяСтрока.Ключ = СокрЛП(ВыборкаРезультата.ИНН);
//			Иначе
//				НоваяСтрока.Ключ = СокрЛП(ВыборкаРезультата.ИНН) + СокрЛП(ВыборкаРезультата.КПП);
//			КонецЕсли;
//			
//			НоваяСтрока.ИНН = ВыборкаРезультата.ИНН;
//			НоваяСтрока.КПП = ВыборкаРезультата.КПП;
//			
//			НоваяСтрока.ЭтоЮрЛицо = ЭтоЮрЛицо;
//			
//		КонецЕсли;
//		
//		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
//		
//	КонецЦикла;
//	
//	ТаблицаДублейКонтрагентов.Индексы.Добавить("Ключ");
//	
//	ОтборДляПоиска = Новый Структура("Ключ");
//	
//	Пока ТаблицаДублейКонтрагентов.Количество() > 0 Цикл
//		
//		ОтборДляПоиска.Ключ = ТаблицаДублейКонтрагентов[0].Ключ;
//		
//		МассивНайденныхСтрок = ТаблицаДублейКонтрагентов.НайтиСтроки(ОтборДляПоиска);
//		
//		НужноПисатьВРегистрДублей = МассивНайденныхстрок.Количество() > 1;
//		
//		Для Каждого ЭлементМассива Из МассивНайденныхстрок Цикл 
//				
//			Если НужноПисатьВРегистрДублей Тогда
//				
//				ИНН = ЭлементМассива.ИНН;
//				КПП = ЭлементМассива.КПП;
//				
//				СправочникОбъект = ЭлементМассива.Ссылка.ПолучитьОбъект();
//				
//				СправочникОбъект.РасширенноеПредставлениеИНН = ИНН;
//				
//				СправочникОбъект.РасширенноеПредставлениеКПП = КПП;
//				
//				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
//				
//				ВыполнитьДвиженияПоРегиструДублей(ЭлементМассива.Ссылка, ЭлементМассива.ИНН, ЭлементМассива.КПП, Ложь);
//				
//			КонецЕсли;
//			
//			ТаблицаДублейКонтрагентов.Удалить(ЭлементМассива);
//			
//		КонецЦикла;	
//		
//	КонецЦикла;	
//	
//КонецПроцедуры	

//Процедура ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам(Параметры) Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1000
//	|	Контрагенты.Ссылка КАК Контрагент,
//	|	ПлатежноеПоручение.КодБК КАК КодБК,
//	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, """") КАК КодНалоговогоОргана,
//	|	Организации.КодПодчиненностиФСС,
//	|	Организации.КодОрганаПФР,
//	|	МАКСИМУМ(ПлатежноеПоручение.Дата) КАК Дата
//	|ИЗ
//	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
//	|		ПО ПлатежноеПоручение.Контрагент = Контрагенты.Ссылка
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
//	|		ПО ПлатежноеПоручение.Организация = Организации.Ссылка
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
//	|		ПО ПлатежноеПоручение.КодОКАТО = РегистрацииВНалоговомОргане.КодПоОКТМО
//	|			И (Организации.ГоловнаяОрганизация = РегистрацииВНалоговомОргане.Владелец)
//	|ГДЕ
//	|	ПлатежноеПоручение.ПеречислениеВБюджет = ИСТИНА
//	|	И Контрагенты.ГосударственныйОрган = ЛОЖЬ
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	Контрагенты.Ссылка,
//	|	ПлатежноеПоручение.КодБК,
//	|	ЕСТЬNULL(РегистрацииВНалоговомОргане.Код, """"),
//	|	Организации.КодПодчиненностиФСС,
//	|	Организации.КодОрганаПФР
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	Дата УБЫВ
//	|ИТОГИ ПО
//	|	Контрагент";
//	
//	ПроблемныхОбъектов = 0;
//	ОбъектовОбработано = 0;
//	
//	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Попытка
//			
//			Контрагент = Выборка.Контрагент.ПолучитьОбъект();
//			Контрагент.ГосударственныйОрган = Истина;
//			ВыборкаКонтрагента = Выборка.Выбрать();
//			Пока ВыборкаКонтрагента.Следующий() Цикл
//				
//				Если НЕ ЗначениеЗаполнено(Контрагент.ВидГосударственногоОргана) Тогда
//					Контрагент.ВидГосударственногоОргана = ВидГосударственногоОрганаПоКБК(ВыборкаКонтрагента.КодБК);
//				КонецЕсли;
//				
//				Если Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.Прочий Тогда
//					Прервать;
//				КонецЕсли;
//				
//				Если Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганПФР
//					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодОрганаПФР) Тогда
//					
//					Контрагент.КодГосударственногоОргана = Лев(ВыборкаКонтрагента.КодОрганаПФР, 3);
//					
//				ИначеЕсли Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.ОрганФСС 
//					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодПодчиненностиФСС) Тогда
//					
//					Контрагент.КодГосударственногоОргана = Лев(ВыборкаКонтрагента.КодПодчиненностиФСС, 4);
//					
//				ИначеЕсли Контрагент.ВидГосударственногоОргана = Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган
//					И ЗначениеЗаполнено(ВыборкаКонтрагента.КодНалоговогоОргана) Тогда
//					Контрагент.КодГосударственногоОргана = ВыборкаКонтрагента.КодНалоговогоОргана;
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//			Если Контрагент.ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.Прочий
//				И НЕ ЗначениеЗаполнено(Контрагент.КодГосударственногоОргана) Тогда
//				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Не возможно заполнить код государственного органа у контрагента ""%1"". Код государственного органа необходимо заполнить вручную'"),
//					Выборка.Контрагент);
//				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,, 
//					Выборка.Контрагент, ТекстСообщения);
//			КонецЕсли;
//			
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Контрагент);
//			
//			ОбъектовОбработано = ОбъектовОбработано + 1;
//			
//		Исключение
//			
//			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
//			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//			
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Не удалось заполнить данные государственного органа ""%1"" по причине:
//					|%2'"), 
//					Выборка.Контрагент,
//					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
//				Выборка.Контрагент, ТекстСообщения);
//			
//		КонецПопытки;
//	
//	КонецЦикла;
//	
//	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
//	
//		Параметры.ОбработкаЗавершена = Истина;
//	
//	Иначе
//		
//		Параметры.ОбработкаЗавершена = Ложь;

//		Если ОбъектовОбработано = 0 Тогда
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Процедуре Контрагенты.ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам
//					|не удалось заполнить данные государственных органов в %1 контрагентах.'"), 
//					ПроблемныхОбъектов);
//			ВызватьИсключение ТекстСообщения;
//		Иначе
//			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
//				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Процедура Контрагенты.ЗаполнитьПризнакПринадлежностьКонтрагентаГосударственнымОрганам
//						|обработала очередную порцию записей в справочнике Контрагенты: %1 элементов'"), 
//						ОбъектовОбработано));
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ЗаполнитьНалоговыйНомерИностранногоКонтрагента() Экспорт
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
//	|	И Контрагенты.СтранаРегистрации <> ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
//	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ
//	|	И Контрагенты.НалоговыйНомер = """"
//	|	И Контрагенты.ИНН <> """"";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
//		КонтрагентОбъект.НалоговыйНомер = КонтрагентОбъект.ИНН;
//		КонтрагентОбъект.ИНН = "";
//		КонтрагентОбъект.ИННВведенКорректно = "";
//		КонтрагентОбъект.РасширенноеПредставлениеИНН = "";
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Процедура ЗаполнитьПустуюСтрануРегистрации() Экспорт
//	
//	Запрос = Новый Запрос();
//	Запрос.Текст =
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
//	|	И Контрагенты.ЭтоГруппа = ЛОЖЬ";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
//		КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
//		Если ЗначениеЗаполнено(КонтрагентОбъект.НалоговыйНомер)
//			И НЕ ЗначениеЗаполнено(КонтрагентОбъект.ИНН) Тогда
//			КонтрагентОбъект.ИНН = КонтрагентОбъект.НалоговыйНомер;
//			КонтрагентОбъект.ИННВведенКорректно = Истина;
//			КонтрагентОбъект.РасширенноеПредставлениеИНН = КонтрагентОбъект.ИНН;
//			КонтрагентОбъект.НалоговыйНомер    = "";
//		КонецЕсли;
//		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(КонтрагентОбъект);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция НаименованияНаДату(Контрагент, ДатаСведений) Экспорт
//	
//	НаименованияКонтрагента = Новый Структура("СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм", "", "", "");
//	
//	Если НЕ ЗначениеЗаполнено(Контрагент)
//		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
//		Возврат НаименованияКонтрагента;
//	КонецЕсли;
//	
//	Если ЗначениеЗаполнено(ДатаСведений) Тогда
//		Запрос = Новый Запрос();
//		Запрос.Параметры.Вставить("Контрагент", Контрагент);
//		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	МАКСИМУМ(ИсторияНаименованийКонтрагентов.Период) КАК Период,
//		|	ИсторияНаименованийКонтрагентов.Ссылка КАК Ссылка
//		|ПОМЕСТИТЬ ЗначенияНаименований
//		|ИЗ
//		|	Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
//		|ГДЕ
//		|	ИсторияНаименованийКонтрагентов.Ссылка = &Контрагент
//		|	И ИсторияНаименованийКонтрагентов.Период <= &ДатаСведений
//		|
//		|СГРУППИРОВАТЬ ПО
//		|	ИсторияНаименованийКонтрагентов.Ссылка
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ИсторияНаименованийКонтрагентов.Ссылка.Наименование КАК Наименование,
//		|	ИсторияНаименованийКонтрагентов.НаименованиеПолное КАК НаименованиеПолное
//		|ИЗ
//		|	ЗначенияНаименований КАК ЗначенияНаименований
//		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ИсторияНаименований КАК ИсторияНаименованийКонтрагентов
//		|		ПО ЗначенияНаименований.Ссылка = ИсторияНаименованийКонтрагентов.Ссылка
//		|			И ЗначенияНаименований.Период = ИсторияНаименованийКонтрагентов.Период";
//		
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			НаименованияКонтрагента.СокращенноеНаименование     = Выборка.Наименование;
//			НаименованияКонтрагента.ПолноеНаименование          = Выборка.НаименованиеПолное;
//			НаименованияКонтрагента.НаименованиеДляПечатныхФорм = Выборка.НаименованиеПолное;
//			Возврат НаименованияКонтрагента;
//		КонецЕсли;
//	КонецЕсли;
//	
//	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "Наименование, НаименованиеПолное");
//	НаименованияКонтрагента.СокращенноеНаименование     = ЗначенияРеквизитов.Наименование;
//	НаименованияКонтрагента.ПолноеНаименование          = ЗначенияРеквизитов.НаименованиеПолное;
//	НаименованияКонтрагента.НаименованиеДляПечатныхФорм = ЗначенияРеквизитов.НаименованиеПолное;
//	Возврат НаименованияКонтрагента;
//	
//КонецФункции

//Процедура УстановитьАктуальноеЗначениеИсторииНаименований(НаименованиеПолное, ИсторияНаименований) Экспорт
//	
//	КоличествоЗаписей = ИсторияНаименований.Количество();
//	
//	Если КоличествоЗаписей > 0 Тогда
//		
//		ИсторияНаименований.Сортировать("Период");
//		АктуальнаяЗаписьИстории = ИсторияНаименований[КоличествоЗаписей - 1];
//		АктуальнаяЗаписьИстории.НаименованиеПолное = НаименованиеПолное;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ЗаполнитьОсновныеДоговораКонтрагентов(Параметры) Экспорт

//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1000
//	|	ДоговорыКонтрагентов.Организация,
//	|	Контрагенты.Ссылка КАК Контрагент,
//	|	ДоговорыКонтрагентов.ВидДоговора,
//	|	Контрагенты.УдалитьОсновнойДоговорКонтрагента КАК Договор
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
//	|		ПО Контрагенты.УдалитьОсновнойДоговорКонтрагента = ДоговорыКонтрагентов.Ссылка
//	|ГДЕ
//	|	Контрагенты.УдалитьОсновнойДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)";
//	
//	ПроблемныхОбъектов = 0;
//	ОбъектовОбработано = 0;
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		// Запишем договоры контрагентов в регистр "ОсновныеДоговорыКонтрагента"
//		НаборЗаписей = РегистрыСведений.ОсновныеДоговорыКонтрагента.СоздатьНаборЗаписей();
//		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
//		НаборЗаписей.Отбор.Контрагент.Установить(Выборка.Контрагент);
//		НаборЗаписей.Отбор.ВидДоговора.Установить(Выборка.ВидДоговора);
//		НаборЗаписей.Прочитать();
//		Если НаборЗаписей.Количество() = 0 Тогда
//			Запись = НаборЗаписей.Добавить();
//			ЗаполнитьЗначенияСвойств(Запись, Выборка);
//			Попытка
//				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
//			Исключение
//				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Не удалось установить основной договор контрагента ""%1"" по причине:
//						|%2'"), 
//					Выборка.Контрагент,
//					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
//					Выборка.Контрагент, ТекстСообщения);
//			КонецПопытки
//		КонецЕсли;
//		
//		Попытка
//			// Очистим реквизит ОсновнойДоговорКонтрагента
//			Контрагент = Выборка.Контрагент.ПолучитьОбъект();
//			Контрагент.УдалитьОсновнойДоговорКонтрагента = Неопределено;
//			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Контрагент);
//			ОбъектовОбработано = ОбъектовОбработано + 1;
//		Исключение
//			// Если не удалось обработать какого-либо контрагента, повторяем попытку снова.
//			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Не удалось очистить неиспользуемый реквизит ""Основной договор контрагента"" в контрагенте ""%1"" по причине:
//					|%2'"), 
//					Выборка.Контрагент,
//					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
//				Выборка.Контрагент, ТекстСообщения);
//		КонецПопытки;
//	КонецЦикла;
//	
//	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
//		Параметры.ОбработкаЗавершена = Истина;
//	Иначе
//		Параметры.ОбработкаЗавершена = Ложь;
//		Если ОбъектовОбработано = 0 Тогда
//			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//				НСтр("ru = 'Процедуре Контрагенты.ЗаполнитьОсновныеДоговораКонтрагентов
//					|не удалось очистить неиспользуемый реквизит ""Основной договор контрагента"" в %1 контрагентах.'"), 
//					ПроблемныхОбъектов);
//			ВызватьИсключение ТекстСообщения;
//		Иначе
//			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
//				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
//					НСтр("ru = 'Процедура Контрагенты.ЗаполнитьОсновныеДоговораКонтрагентов
//						|обработала очередную порцию записей в справочнике Контрагенты: %1 элементов'"), 
//						ОбъектовОбработано));
//		КонецЕсли;
//	КонецЕсли;

//КонецПроцедуры

//Функция ЗадолженностьПоКонтрагенту(Контрагент) Экспорт
//	
//	Результат = Новый Структура;
//	Результат.Вставить("НамДолжны", 0);
//	Результат.Вставить("МыДолжны", 0);
//	Результат.Вставить("НеоплаченныеСчетаСумма", 0);
//	Результат.Вставить("НеоплаченныеСчетаКоличество", 0);
//	
//	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
//		Возврат Результат;
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетНаОплатуПокупателю.Ссылка) КАК НеоплаченныеСчетаКоличество,
//	|	СУММА(ВЫБОР
//	|			КОГДА ЕСТЬNULL(Валюты.Кратность, 0) = 0
//	|				ТОГДА СчетНаОплатуПокупателю.СуммаДокумента
//	|			ИНАЧЕ СчетНаОплатуПокупателю.СуммаДокумента * Валюты.Курс / Валюты.Кратность
//	|		КОНЕЦ) КАК НеоплаченныеСчетаСумма
//	|ИЗ
//	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
//	|		ПО (СтатусыДокументов.Документ = СчетНаОплатуПокупателю.Ссылка)
//	|			И (СтатусыДокументов.Организация = СчетНаОплатуПокупателю.Организация)
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, ) КАК Валюты
//	|		ПО СчетНаОплатуПокупателю.ВалютаДокумента = Валюты.Валюта
//	|ГДЕ
//	|	СчетНаОплатуПокупателю.Контрагент = &Контрагент
//	|	И СчетНаОплатуПокупателю.Проведен
//	|	И ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.ПустаяСсылка)) В (&СтатусыНеоплаченныхСчетов)
//	|	И СчетНаОплатуПокупателю.Организация В(&СписокОрганизаций)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	СчетНаОплатуПокупателю.Контрагент
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ВЫБОР
//	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовСПокупателями)
//	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК НамДолжны,
//	|	ВЫБОР
//	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокСчетовСПоставщиками)
//	|			ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК МыДолжны,
//	|	ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов) КАК Договор
//	|ПОМЕСТИТЬ Остатки
//	|ИЗ
//	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
//	|			,
//	|			Счет В (&СписокСчетов),
//	|			&СубконтоКонтрагентДоговор,
//	|			Организация В (&СписокОрганизаций)
//	|				И Субконто1 = &Контрагент) КАК ХозрасчетныйОстатки
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	Договор
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЕСТЬNULL(СУММА(ВЫБОР
//	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПокупателей)
//	|					ТОГДА Остатки.НамДолжны
//	|				ИНАЧЕ 0
//	|			КОНЕЦ), 0) КАК НамДолжны,
//	|	ЕСТЬNULL(СУММА(ВЫБОР
//	|				КОГДА Остатки.Договор.ВидДоговора В (&ВидыДоговоровПоставщиков)
//	|					ТОГДА Остатки.МыДолжны
//	|				ИНАЧЕ 0
//	|			КОНЕЦ), 0) КАК МыДолжны
//	|ИЗ
//	|	Остатки КАК Остатки";
//	
//	СубконтоКонтрагентДоговор = Новый СписокЗначений;
//	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
//	СубконтоКонтрагентДоговор.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
//	
//	СтатусыНеоплаченныхСчетов = Новый Массив;
//	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.ПустаяСсылка());
//	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.НеОплачен);
//	СтатусыНеоплаченныхСчетов.Добавить(Перечисления.СтатусОплатыСчета.ОплаченЧастично);
//	
//	СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
//	Запрос.УстановитьПараметр("Контрагент", Контрагент);
//	Запрос.УстановитьПараметр("СубконтоКонтрагентДоговор", СубконтоКонтрагентДоговор);
//	Запрос.УстановитьПараметр("СписокСчетовСПокупателями", МониторРуководителя.СчетаРасчетовСКонтрагентами(1));
//	Запрос.УстановитьПараметр("СписокСчетовСПоставщиками", МониторРуководителя.СчетаРасчетовСКонтрагентами(2));
//	СписокСчетов = МониторРуководителя.СчетаРасчетовСКонтрагентами(1);
//	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокСчетов, МониторРуководителя.СчетаРасчетовСКонтрагентами(2), Истина);
//	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
//	Запрос.УстановитьПараметр("ВидыДоговоровПокупателей", БухгалтерскиеОтчеты.ВидыДоговоровПокупателей());
//	Запрос.УстановитьПараметр("ВидыДоговоровПоставщиков", БухгалтерскиеОтчеты.ВидыДоговоровПоставщиков());
//	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
//	Запрос.УстановитьПараметр("СтатусыНеоплаченныхСчетов", СтатусыНеоплаченныхСчетов);
//	
//	УстановитьПривилегированныйРежим(Истина);
//	
//	РезультатЗапроса = Запрос.ВыполнитьПакет();
//	
//	УстановитьПривилегированныйРежим(Ложь);
//	
//	Если НЕ РезультатЗапроса[0].Пустой() Тогда
//		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[0].Выгрузить()[0]);
//	КонецЕсли;
//	
//	Если НЕ РезультатЗапроса[2].Пустой() Тогда
//		ЗаполнитьЗначенияСвойств(Результат, РезультатЗапроса[2].Выгрузить()[0]);
//	КонецЕсли;
//		
//	Возврат Результат;
//	
//КонецФункции

//Процедура ЗаполнитьСтрануРегистрацииВКонтрагентах() Экспорт
//	
//	Запрос = Новый Запрос;
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Контрагенты.Ссылка КАК Контрагент,
//	|	Контрагенты.ИНН КАК ИНН,
//	|	Контрагенты.КПП КАК КПП,
//	|	ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) КАК СтранаРегистрации,
//	|	"""" КАК РегистрационныйНомерВСтранеРегистрации,
//	|	"""" КАК КодНалогоплательщикаВСтранеРегистрации
//	|ИЗ
//	|	Справочник.Контрагенты КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
//	УчетОбособленныхПодразделений.УстановитьТекстЗапросаЗаполнитьСтрануРегистрацииВКонтрагентах(Запрос.Текст);
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	
//	Пока Выборка.Следующий() Цикл
//		
//		Контрагент = Выборка.Контрагент.ПолучитьОбъект();
//		Если ЗначениеЗаполнено(Выборка.СтранаРегистрации) Тогда
//			УчетОбособленныхПодразделений.ЗаполнитьСтрануРегистрацииКонтрагента(Контрагент, Выборка);
//		Иначе
//			Контрагент.СтранаРегистрации = Справочники.СтраныМира.Россия;
//		КонецЕсли;
//		
//		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Контрагент);
//		
//	КонецЦикла;
//	
//КонецПроцедуры

//Функция СтранаРегистрацииПоКоду(КодСтраныМираАльфа2) Экспорт
//	
//	СтранаРегистрации = Справочники.СтраныМира.Россия;
//	
//	// Программный интерфейс справочника СтраныМира рассчитан только на коды по ОКСМ.
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("КодАльфа2", КодСтраныМираАльфа2);
//	Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	СтраныМира.Ссылка КАК Ссылка
//	|ИЗ
//	|	Справочник.СтраныМира КАК СтраныМира
//	|ГДЕ
//	|	СтраныМира.КодАльфа2 = &КодАльфа2";
//	
//	Выборка = Запрос.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		СтранаРегистрации = Выборка.Ссылка;
//	Иначе
//		ВсеСтраны = РаботаСАдресами.ТаблицаКлассификатора();
//		ОписаниеСтраны = ВсеСтраны.Найти(КодСтраныМираАльфа2, "КодАльфа2");
//		Если ОписаниеСтраны <> Неопределено Тогда
//			СтранаРегистрации = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(ОписаниеСтраны.Код);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Возврат СтранаРегистрации;
//	
//КонецФункции

//// Обработчик обновления на версию 3.0.72.26.
//// Перезаполняет служебный реквизит "ВидДляСписка" в табличной части "КонтактнаяИнформация".
//// Обрабатываются только те элементы справочника, у которых реквизит "ВидДляСписка"
//// был заполнен одинаковым значением в нескольких строках табличной части.
////
//Процедура ОбновитьКонтактнуюИнформациюДляСписков(Параметры) Экспорт
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("ПустойВидКонтактнойИнформации", Справочники.ВидыКонтактнойИнформации.ПустаяСсылка());
//	
//	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1000
//	|	Контрагенты.Ссылка КАК Контрагент,
//	|	Контрагенты.ВидДляСписка КАК ВидДляСписка,
//	|	КОЛИЧЕСТВО(Контрагенты.Ссылка) КАК Счетчик
//	|ПОМЕСТИТЬ ВТ_ДублиКонтактнойИнформации
//	|ИЗ
//	|	Справочник.Контрагенты.КонтактнаяИнформация КАК Контрагенты
//	|ГДЕ
//	|	Контрагенты.ВидДляСписка <> &ПустойВидКонтактнойИнформации
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	Контрагенты.Ссылка,
//	|	Контрагенты.ВидДляСписка
//	|
//	|ИМЕЮЩИЕ
//	|	КОЛИЧЕСТВО(Контрагенты.Ссылка) > 1
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗЛИЧНЫЕ
//	|	ВТ_ДублиКонтактнойИнформации.Контрагент КАК Контрагент
//	|ИЗ
//	|	ВТ_ДублиКонтактнойИнформации КАК ВТ_ДублиКонтактнойИнформации";
//	
//	Результат = Запрос.Выполнить();
//	
//	Если Результат.Пустой() Тогда
//		Параметры.ОбработкаЗавершена = Истина;
//		Возврат;
//	КонецЕсли;
//	
//	ОбъектовОбработано = 0;
//	ПроблемныхОбъектов = 0;
//	
//	Выборка = Результат.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		
//		ОбъектовОбработано = ОбъектовОбработано + 1;
//		
//		НачатьТранзакцию();
//		
//		// Блокируем объект от изменения другими сеансами.
//		Блокировка = Новый БлокировкаДанных;
//		ЭлементБлокировки = Блокировка.Добавить("Справочник.Контрагенты");
//		ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Контрагент);
//		Блокировка.Заблокировать();
//		
//		КонтрагентОбъект = Выборка.Контрагент.ПолучитьОбъект();
//		
//		// Если объект ранее был удален, пропускаем его.
//		Если КонтрагентОбъект = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		Попытка
//			УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформациюДляСписков(КонтрагентОбъект);
//			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонтрагентОбъект);
//			ЗафиксироватьТранзакцию();
//		Исключение
//			// Если не удалось обработать какой-либо элемент, повторяем попытку снова.
//			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
//			ОтменитьТранзакцию();
//			
//			ТекстСообщения = СтрШаблон(
//				НСтр("ru = 'Процедуре Справочники.Контрагенты.ОбновитьКонтактнуюИнформациюДляСписков() не удалось обработать контрагента по причине:
//					|%1'"),
//					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
//			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
//				УровеньЖурналаРегистрации.Предупреждение,
//				Метаданные.Справочники.Контрагенты,
//				Выборка.Контрагент,
//				ТекстСообщения);
//		КонецПопытки;
//		
//	КонецЦикла;
//	
//	Если ПроблемныхОбъектов > 0 Тогда
//		ТекстСообщения = СтрШаблон(
//			НСтр("ru = 'Процедуре Справочники.Контрагенты.ОбновитьКонтактнуюИнформациюДляСписков() не удалось обработать контрагентов: в %1 из %2 возникли ошибки'"),
//				ПроблемныхОбъектов,
//				ОбъектовОбработано);
//		ВызватьИсключение ТекстСообщения;
//	Иначе
//		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
//			УровеньЖурналаРегистрации.Информация,
//			Метаданные.Справочники.Контрагенты,,
//			СтрШаблон(НСтр("ru = 'Процедура Справочники.Контрагенты.ОбновитьКонтактнуюИнформациюДляСписков() обработала очередную порцию контрагентов: %1 элементов'"), ОбъектовОбработано));
//	КонецЕсли;
//	
//КонецПроцедуры

//#КонецОбласти


//#КонецЕсли