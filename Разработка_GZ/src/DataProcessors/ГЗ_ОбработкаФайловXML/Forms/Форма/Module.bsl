
&НаСервере
Процедура ОбработатьФайлXMLНаСервере()
	ГЗ_РегламентныеЗадания44ФЗ.ГЗ_44ФЗ_ОбработатьФайлыXML();
	//  НайденныеФайлыXML = НайтиФайлы("C:\temp" , "*.xml");
  //  Для Каждого НайденныйФайл из НайденныеФайлыXML Цикл
  //  	 ЧтениеXML = Новый ЧтениеXML();
  //   	 ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
  //  	 		 
  //  	 СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
  //
  //  	 //СтруктураПрочитанныхДанных1 = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ЧтениеXML);
  //  	 ПлощадкаETP = ПолучитьПлощадкуETP(СтруктураПрочитанныхДанных.fcsNotificationEF.ETP);
  //  	 СпособЗакупки = ПолучитьСпособЗакупки(СтруктураПрочитанныхДанных.fcsNotificationEF.placingWay);
  //  	 Контрагент = Справочники.Контрагенты.СоздатьКонтрагента(СформироватьСтруктуруДанныхПоКонтрагенту(СтруктураПрочитанныхДанных.fcsNotificationEF.purchaseResponsible.responsibleOrg, СтруктураПрочитанныхДанных.fcsNotificationEF.purchaseResponsible.responsibleInfo));
  //  	 docPublishDate = СтруктураПрочитанныхДанных.fcsNotificationEF.docPublishDate;
  //  	 href = СтруктураПрочитанныхДанных.fcsNotificationEF.href;
  //  	 id = СтруктураПрочитанныхДанных.fcsNotificationEF.id;
  //  	 purchaseNumber = СтруктураПрочитанныхДанных.fcsNotificationEF.purchaseNumber;
  //  	 purchaseObjectInfo = СтруктураПрочитанныхДанных.fcsNotificationEF.purchaseObjectInfo;
  //  	 schemeVersion = СтруктураПрочитанныхДанных.fcsNotificationEF.schemeVersion;
  //  	 bidding_date = СтруктураПрочитанныхДанных.fcsNotificationEF.procedureInfo.bidding.date;
  //  	 collectiing_endDate = СтруктураПрочитанныхДанных.fcsNotificationEF.procedureInfo.collecting.endDate;
  //  	 collectiing_order = СтруктураПрочитанныхДанных.fcsNotificationEF.procedureInfo.collecting.order;
  //  	 collectiing_place = СтруктураПрочитанныхДанных.fcsNotificationEF.procedureInfo.collecting.place;
  //  	 collectiing_startDate = СтруктураПрочитанныхДанных.fcsNotificationEF.procedureInfo.collecting.startDate;
  //  	 scoring_date = СтруктураПрочитанныхДанных.fcsNotificationEF.procedureInfo.scoring.date;
  //  	 printForm = СтруктураПрочитанныхДанных.fcsNotificationEF.printForm.url;
  //  	 
  //  	 //
  //  	 //КонтактноеЛицо = ПолучитьКонтактноеЛицо(СтруктураПрочитанныхДанных.fcsNotificationEF.purchaseResponsible.responsibleInfo, Контрагент);
  //  	 
  //   КонецЦикла;
  //   
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайлXML(Команда)
	ОбработатьФайлXMLНаСервере();
КонецПроцедуры

&НаСервере
Функция СформироватьСтруктуруДанныхПоКонтрагенту(СтруктураДанныхКонтрагент, СтруктураДанныхКонтактноеЛицо)
	
	   СтрДанныхКонтрагент = Новый Структура("ИНН, КПП,regNum,consRegistryNum,fullName,ЮридическийАдрес,ФактическийАдрес");
	   
	   СтрДанныхКонтрагент.Вставить("ИНН", СтруктураДанныхКонтрагент.INN);
	   СтрДанныхКонтрагент.Вставить("КПП", СтруктураДанныхКонтрагент.KPP);
	   СтрДанныхКонтрагент.Вставить("regNum", СтруктураДанныхКонтрагент.regNum);
	   СтрДанныхКонтрагент.Вставить("consRegistryNum", СтруктураДанныхКонтрагент.consRegistryNum);
	   СтрДанныхКонтрагент.Вставить("fullName", СтруктураДанныхКонтрагент.fullName);
	   СтрДанныхКонтрагент.Вставить("Наименование", СтруктураДанныхКонтрагент.fullName);
	   СтрДанныхКонтрагент.Вставить("НаименованиеПолное", СтруктураДанныхКонтрагент.fullName);
	   СтрДанныхКонтрагент.Вставить("ЮридическийАдрес",СтруктураДанныхКонтрагент.postAddress);
	   СтрДанныхКонтрагент.Вставить("ФактическийАдрес",СтруктураДанныхКонтрагент.factAddress);	   
	   Возврат СтрДанныхКонтрагент;
	
КонецФункции
   
Функция ПолучитьСтруктуруРеквизитовКонтрагента()
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Наименование");
	СтруктураВозврата.Вставить("НаименованиеПолное");
	СтруктураВозврата.Вставить("ИНН");
	СтруктураВозврата.Вставить("КПП");
	СтруктураВозврата.Вставить("КодПоОКПО");
	СтруктураВозврата.Вставить("Банк");
	СтруктураВозврата.Вставить("БИК");
	СтруктураВозврата.Вставить("НомерСчета");
	СтруктураВозврата.Вставить("КоррСчет");
	СтруктураВозврата.Вставить("БанкДляРасчетов");
	СтруктураВозврата.Вставить("БанкДляРасчетовБИК");
	СтруктураВозврата.Вставить("БанкДляРасчетовКоррСчет");
	СтруктураВозврата.Вставить("ДолжностьРуководителя");
	СтруктураВозврата.Вставить("Руководитель");
	СтруктураВозврата.Вставить("ЮридическоеФизическоеЛицо");
	СтруктураВозврата.Вставить("СвидетельствоДатаВыдачи");
	СтруктураВозврата.Вставить("СвидетельствоСерияНомер");
	СтруктураВозврата.Вставить("ЮридическийАдрес");
	СтруктураВозврата.Вставить("ФактическийАдрес");
	СтруктураВозврата.Вставить("АдресРегистрации");
	СтруктураВозврата.Вставить("РеквизитыАдресРегистрации");
	СтруктураВозврата.Вставить("Телефон");
	СтруктураВозврата.Вставить("АдресЭлектроннойПочты");
	
	Возврат СтруктураВозврата;
	
КонецФункции
   
 &НаСервере
Функция ПолучитьПлощадкуETP (СтруктураДанных)
		СпрПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.НайтиПоРеквизиту("GZcode", СтруктураДанных.code);
		Если СпрПлощадка.Пустая() Тогда 
			Площадка = СоздатьНовуюПлощадку(СтруктураДанных);
		Иначе
			Площадка = СпрПлощадка;
		КонецЕсли;
	
		Возврат   Площадка;
КонецФункции

&НаСервере
Функция СоздатьНовуюПлощадку(СтруктураДанных)
		
	НоваяПлощадка = Справочники.ГЗ_ETP_ЭлектроннаяТорговаяПлощадка.СоздатьЭлемент();
	НоваяПлощадка.url= СтруктураДанных.url;
	НоваяПлощадка.Наименование = СтруктураДанных.name;
	НоваяПлощадка.GZcode = СтруктураДанных.code;
	НоваяПлощадка.ГЗ_НаименованиеПолное = СтруктураДанных.name;
	НоваяПлощадка.Записать();
	
	Возврат НоваяПлощадка.Ссылка;
КонецФункции
 
&НаСервере
Функция ПолучитьСпособЗакупки (СтруктураДанных)
		СпрСпособЗакупки = Справочники.ГЗ_placingWay_ПодспособОпределенияПоставщика.НайтиПоРеквизиту("GZcode", СтруктураДанных.code);
		Если СпрСпособЗакупки.Пустая() Тогда 
			СпособЗакупки = СоздатьНовыйСпособЗакупки(СтруктураДанных);
		Иначе
			СпособЗакупки = СпрСпособЗакупки;
		КонецЕсли;
	
		Возврат  СпособЗакупки;
КонецФункции

&НаСервере
Функция СоздатьНовыйСпособЗакупки(СтруктураДанных)
		
	НовыйСпособЗакупки = Справочники.ГЗ_placingWay_ПодспособОпределенияПоставщика.СоздатьЭлемент();
	НовыйСпособЗакупки.Наименование = СтруктураДанных.name;
	НовыйСпособЗакупки.GZcode = СтруктураДанных.code;
	НовыйСпособЗакупки.Записать();
	
	Возврат НовыйСпособЗакупки.Ссылка;
КонецФункции

&НаСервере
Процедура ПолучитьСхемуXDTOНаСервере()
Схемы = Новый Массив;
Схемы.Добавить("с:\temp\purchase.xsd");
Схемы.Добавить("с:\temp\Types.xsd");
Пакеты = Новый Массив;
Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("URI пакета 1"));
Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("URI пакета 2"));
МояФабрика = СоздатьФабрикуXDTO(Схемы, Пакеты);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСхемуXDTO(Команда)
	ПолучитьСхемуXDTOНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтобразитьТекущийРаздел()
	
	Если Разделы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторТекущегоРаздела = Элементы.Разделы.ТекущаяСтрока;
	Если ИдентификаторТекущегоРаздела = Неопределено Тогда
		ИдентификаторТекущегоРаздела = Разделы[0].ПолучитьИдентификатор();
		Элементы.Разделы.ТекущаяСтрока = ИдентификаторТекущегоРаздела;
	КонецЕсли;
	
	Если ИдентификаторТекущегоРаздела = ИдентификаторЗагруженногоРаздела Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗагруженногоРаздела = ИдентификаторТекущегоРаздела;
	
	ТекущийРаздел = Разделы.НайтиПоИдентификатору(ИдентификаторТекущегоРаздела);
	
	Если ЗначениеЗаполнено(ТекущийРаздел.АдресВременногоХранилища) Тогда
		
		ТаблицаЭлементов = ПолучитьИзВременногоХранилища(ТекущийРаздел.АдресВременногоХранилища);
		
	Иначе
		ТаблицаЭлементов = ТаблицаКлассификатора(ТекущийРаздел, Ложь);
		
		ТекущийРаздел.АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ТаблицаЭлементов, УникальныйИдентификатор);
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ТаблицаЭлементов, "Классификатор");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьКодыРазделов();
	
	ОтобразитьТекущийРаздел();

КонецПроцедуры

&НаСервере
Функция ЗаполнитьКодыРазделов()
	
	Разделы.Загрузить(Справочники.КлассификаторОКПД2.ТаблицаРазделов());
	
КонецФункции

&НаСервере
Функция ТаблицаКлассификатора(Раздел, ДобавитьДанныеПоиска)
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаМакета) Тогда
		ТекстКлассификатора = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаМакета);
	Иначе
		ТекстКлассификатора = Справочники.КлассификаторОКПД2.ТекстКлассификатора();
		АдресВременногоХранилищаМакета = ПоместитьВоВременноеХранилище(ТекстКлассификатора, УникальныйИдентификатор);
	КонецЕсли;
	
	КодыГруппРаздела = КодыГруппРаздела(Раздел);
	
	Возврат Справочники.КлассификаторОКПД2.ТаблицаКлассификатора(ТекстКлассификатора, КодыГруппРаздела, ДобавитьДанныеПоиска);
	
КонецФункции

&НаСервере
Функция КодыГруппРаздела(Раздел)
	
	КодыГруппРаздела = Новый Соответствие;
	
	Если Раздел <> Неопределено Тогда
		ДополнитьКодыГруппРаздела(КодыГруппРаздела, Раздел);
	Иначе
		// Раздел не заполнен - загружаем все коды
		Для Каждого СтрокаРаздела Из Разделы Цикл
			ДополнитьКодыГруппРаздела(КодыГруппРаздела, СтрокаРаздела);
		КонецЦикла;
	КонецЕсли;
	
	Возврат КодыГруппРаздела;
	
КонецФункции

&НаСервере
Процедура ДополнитьКодыГруппРаздела(КодыГруппРаздела, Раздел)
	
	МассивКодовГрупп = СтрРазделить(Раздел.КодыГрупп, ",");
	
	Для Каждого КодГруппы Из МассивКодовГрупп Цикл
		КодыГруппРаздела.Вставить(КодГруппы, Раздел.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНайденные()
	
	ОтобразитьНайденные = ЗначениеЗаполнено(СтрокаПоиска);
	
	Если ОтобразитьНайденные Тогда
		
		Если ЗначениеЗаполнено(АдресХранилищаКлассификатораПоиска) Тогда
			ТаблицаПоиска = ПолучитьИзВременногоХранилища(АдресХранилищаКлассификатораПоиска);
		Иначе
			ТаблицаПоиска = ТаблицаКлассификатора(Неопределено, Истина);
			АдресХранилищаКлассификатораПоиска = ПоместитьВоВременноеХранилище(ТаблицаПоиска, УникальныйИдентификатор);
		КонецЕсли;
		
		КлассификаторСОтбором = Справочники.КлассификаторОКПД2.НайтиВКлассификаторе(СтрокаПоиска, ТаблицаПоиска);
		
		ОтображаемыеРазделы = КлассификаторСОтбором.Скопировать();
		ОтображаемыеРазделы.Свернуть("ИдентификаторРаздела");
		
		// Наложим фильтр на разделы - нужно показывать только отображаемые
		Для Каждого СтрокаРаздела Из Разделы Цикл
			СтрокаРаздела.ВключенВОтбор = Ложь;
		КонецЦикла;
		
		Для Каждого ОтображаемыйРаздел Из ОтображаемыеРазделы Цикл
			Разделы.НайтиПоИдентификатору(ОтображаемыйРаздел.ИдентификаторРаздела).ВключенВОтбор = Истина;
		КонецЦикла;
		
		КлассификаторПоиск.Загрузить(КлассификаторСОтбором);
		
	КонецЕсли;
	
	Элементы.КлассификаторПоиск.Видимость = ОтобразитьНайденные;
	Элементы.Классификатор.Видимость      = НЕ ОтобразитьНайденные;
	
	Если ОтобразитьНайденные Тогда
		Элементы.Разделы.ОтборСтрок = Новый ФиксированнаяСтруктура("ВключенВОтбор", Истина);
	Иначе
		Элементы.Разделы.ОтборСтрок = Неопределено;
		
		ТекущаяСтрока = Элементы.КлассификаторПоиск.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущийКод = КлассификаторПоиск.НайтиПоИдентификатору(ТекущаяСтрока).Код;
		КонецЕсли;
		
		ОтобразитьТекущийРаздел();
		Если ЗначениеЗаполнено(ТекущийКод) Тогда
			ПерейтиКСтрокеСКодом(ТекущийКод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСтрокеСКодом(Код)
	
	Строки = Классификатор.НайтиСтроки(Новый Структура("Код", Код));
	Если Строки.Количество() > 0 Тогда
		Элементы.Классификатор.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	 Если НЕ ОтобразитьНайденные Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьТекущийРаздел", 0.1, Истина);
	КонецЕсли;
	
	Для Каждого СтрокаКлассификатора Из Классификатор Цикл 
		      ДобавитьЭлементКлассификатора(СтрокаКлассификатора.Код, СтрокаКлассификатора.Наименование);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтобразитьТекущийРаздел()
	
	ОтобразитьТекущийРаздел();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура  ДобавитьЭлементКлассификатора(Код, Наименование)
	
	Если НЕ ЗначениеЗаполнено(Код) Тогда
		//Возврат Справочники.КлассификаторОКПД2.ПустаяСсылка();
		Сообщить("Такой код уже имеется: " + Код);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Код", Код);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КлассификаторОКПД2.Ссылка
	|ИЗ
	|	Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|ГДЕ
	|	КлассификаторОКПД2.Код = &Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		//Возврат Выборка.Ссылка;
	Иначе
		НовыйЭлемент = Справочники.КлассификаторОКПД2.СоздатьЭлемент();
		НовыйЭлемент.Код = Код;
		НовыйЭлемент.Наименование = Наименование;
		НовыйЭлемент.НаименованиеПолное = Наименование;
		НовыйЭлемент.Записать();
		//Возврат НовыйЭлемент.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКТРУ(Команда)
	ЗагрузитьКТРУНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьКТРУНаСервере()
	//НайденныеФайлыZIP = НайтиФайлы("C:\temp\Справочники\КТРУ\nsiKTRU", "*.zip",Истина);
	//
	//Для Каждого НайденныйФайлZIP Из НайденныеФайлыZIP Цикл
	//	Архив = Новый ЧтениеZipФайла;
	//	Архив.Извлечь(НайденныйФайлZIP.ПолноеИмя, "C:\temp\Справочники\КТРУ\XML"); 
	//КонецЦикла;
	//
	НайденныеФайлыXML = НайтиФайлы("C:\temp\Справочники\КТРУ\XML", "*.xml",Истина);
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
		СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		Для Каждого СтрокаКТРУ Из СтруктураПрочитанныхДанных.nsiKTRUs.position Цикл
			Попытка
				СтруктураДанных = СтрокаКТРУ.data;
				
				Если Справочники.ГЗ_КлассификацияПоКТРУ.НайтиПоРеквизиту("GZ_code", СтруктураДанных.code).Пустая() Тогда 
					НовыйКТРУ = Справочники.ГЗ_КлассификацияПоКТРУ.СоздатьЭлемент();			
					НовыйКТРУ.GZ_code = СтруктураДанных.code;
					НовыйКТРУ.OKPD2 = Справочники.КлассификаторОКПД2.НайтиПоКоду(СтруктураДанных.OKPD2.code);
					НовыйКТРУ.actual = ?(СтруктураДанных.actual = "true", Истина, Ложь);
					
					Если СтруктураДанных.свойства().получить("name") <> Неопределено Тогда 
						НовыйКТРУ.ГЗ_НаименованиеПолное = СтруктураДанных.name;
						НовыйКТРУ.Наименование = СтруктураДанных.name;
					КонецЕсли;
					
					Если СтруктураДанных.свойства().получить("versionId") <> Неопределено Тогда 
						НовыйКТРУ.versionId = СтруктураДанных.versionId;
					КонецЕсли;
					
					Если СтруктураДанных.свойства().получить("versionNumber") <> Неопределено Тогда 
						НовыйКТРУ.versionNumber = СтруктураДанных.versionNumber;
					КонецЕсли;
					
					Если СтруктураДанных.свойства().получить("isTemplate") <> Неопределено Тогда 
						НовыйКТРУ.ПозицияЯвляетсяУкрупненной = СтруктураДанных.isTemplate;
					КонецЕсли;
					
					Если СтруктураДанных.свойства().получить("nsiDescription") <> Неопределено Тогда 
						НовыйКТРУ.Описание = СтруктураДанных.nsiDescription;
					КонецЕсли;
					
					НовыйКТРУ.ДатаПубликацииВКТРУ = XMLЗначение(Тип("Дата"),СтруктураДанных.publishDate);
					
					НовыйКТРУ.Записать();
					
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации("ЗагрузкаСправочникаКТРУ", УровеньЖурналаРегистрации.Ошибка,,,"Загрузка в справочник КТРУ не выполнена, имя файла : "+ НайденныйФайл.ПолноеИмя,); 
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры


Функция ПреобразоватьДатуXMLВДату (ДатаXML)
	   ГодМесяцДата = Лев(ДатаXML, 10);
	   МассивРеквизитов = СтрРазделить(ГодМесяцДата, "-", Ложь);
	   СобратьДату = Дата(МассивРеквизитов[0] + МассивРеквизитов[1] +МассивРеквизитов[2]);
	   Возврат СобратьДату;	   
КонецФункции

&НаСервере
Процедура ГЗ_ПолучитьФайлыZIPСFTP44ФЗНаСервере()
	ГЗ_РегламентныеЗадания44ФЗ.ГЗ_44ФЗ_ЗагрузитьФайлыZIPсFTP();
КонецПроцедуры

&НаКлиенте
Процедура ГЗ_ПолучитьФайлыZIPСFTP44ФЗ(Команда)
	ГЗ_ПолучитьФайлыZIPСFTP44ФЗНаСервере();
КонецПроцедуры

&НаСервере
Процедура ГЗ_РаспаковатьФайлыZIPПо44ФЗНаСервере()
	ГЗ_РегламентныеЗадания44ФЗ.ГЗ_44ФЗ_РаспаковатьФайлыZIP();
КонецПроцедуры

&НаКлиенте
Процедура ГЗ_РаспаковатьФайлыZIPПо44ФЗ(Команда)
	ГЗ_РаспаковатьФайлыZIPПо44ФЗНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработатьФайлФЗ223НаСервере()
	ГЗ_РегламентныеЗадания223ФЗ.ГЗ_223ФЗ_ОбработатьФайлыXML();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайлФЗ223(Команда)
	ОбработатьФайлФЗ223НаСервере();
КонецПроцедуры

&НаСервере
Процедура ГЗ_223ФЗ_ОбработатьФайлыXMLНаСервере()
	ГЗ_РегламентныеЗадания223ФЗ.ГЗ_223ФЗ_ОбработатьФайлыXML();
КонецПроцедуры

&НаКлиенте
Процедура ГЗ_223ФЗ_ОбработатьФайлыXML(Команда)
	ГЗ_223ФЗ_ОбработатьФайлыXMLНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхКонтрактаНаСервере()
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Договоры.Получить();
	ПутьДляОбработанныхФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ_Договоры.Получить();
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	ТаблицаЗначенийСвойств = Новый ТаблицаЗначений;
	ТаблицаЗначенийСвойств.Колонки.Добавить("НаименованиеПроцедуры");

	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
				
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
				
		СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML); 
		
		Если СтруктураПрочитанныхДанных.Свойства().Получить("cpContractSign")<>Неопределено Тогда 
			   СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_cpContractSign(СтруктураПрочитанныхДанных.cpContractSign);
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("contract")<>Неопределено Тогда 
			   СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_contract(СтруктураПрочитанныхДанных.contract);
	    Иначе
			   НоваяСтрока = ТаблицаЗначенийСвойств.Добавить();
			   НоваяСтрока.НаименованиеПроцедуры = СтруктураПрочитанныхДанных.свойства()[0].Имя;
			   ТаблицаЗначенийСвойств.Свернуть("НаименованиеПроцедуры");
			   ЧтениеXML.Закрыть();
			   ПереместитьФайл(НайденныйФайл.ПолноеИмя, "D:\44FZ\contract\xml_необработанные"+"\"+НайденныйФайл.Имя);  
		Продолжить;

        КонецЕсли;
		
		СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
		
		Документы.ГЗ_ПроектКонтрактаПо44ФЗ.СоздатьДокументПроектКонтактаПо44ФЗ(СтруктураРеквизитовДляДокумента); 
			
		ЧтениеXML.Закрыть();
		ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
      
	КонецЦикла;
	    ТаблицаЗначенийСвойств.Свернуть("НаименованиеПроцедуры");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхКонтракта(Команда)
	ЗагрузкаДанныхКонтрактаНаСервере();
КонецПроцедуры


 //Структура простых обязательных реквизитов первого уровня
Функция СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_cpContractSign (xdto_пакет) Экспорт 
	
	СтруктураДанныхДляКонтракта = Новый Структура;
	
	//    foundationInfo.purchaseNumber - поиск извещения	
	
	НомерИзвещения = ?(xdto_пакет.foundationInfo.Свойства().Получить("purchaseNumber")<>Неопределено,xdto_пакет.foundationInfo.purchaseNumber,"");
	
	СтруктураДанныхДляКонтракта.Вставить("purchaseNumber", НомерИзвещения);
	
	Если НомерИзвещения <> "" Тогда 
		НайденныйДокумент = Документы.ГЗ_ИзвещениеОПроведенииЗакупок.НайтиПоРеквизиту("purchaseNumber", НомерИзвещения);
		Если НайденныйДокумент.Пустая() Тогда 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
			СтруктураДанныхДляКонтракта.Вставить("Организация",Справочники.Организации.ОрганизацияПоУмолчанию());
			
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаДоговоровПо44ФЗ", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Номер извещения не определен!!!");
	
		Иначе 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", НайденныйДокумент);
			СтруктураДанныхДляКонтракта.Вставить("Организация", НайденныйДокумент.Организация);			
		КонецЕсли;
	ИначеЕсли xdto_пакет.Свойства().Получить("customer") <> Неопределено Тогда 
		
		СтруктураДанныхДляКонтракта.Вставить("Организация", ГЗ_РаботаСXML.СоздатьОрганизацию44ФЗ(xdto_пакет.customer)); 
		СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
	
	КонецЕсли;
	
	СтруктураДанныхДляКонтракта.Вставить("docRegNumber",xdto_пакет.commonInfo.docNumber);	
	
	СтруктураДанныхДляКонтракта.Вставить("url_ПодписанногоДоговора",xdto_пакет.contractProjectFilesInfo.contractProjectFileInfo.url);

	СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.contractInfo.subject);
	СтруктураДанныхДляКонтракта.Вставить("СуммаКонтракта",xdto_пакет.contractInfo.price);
	СтруктураДанныхДляКонтракта.Вставить("Дата",XMLЗначение(Тип("Дата"),xdto_пакет.commonInfo.signDate));

	
	РеквизитыКонтрагента = Новый Структура;
	РеквизитыКонтрагента.Вставить("ИНН", xdto_пакет.participantInfo.legalEntityRFInfo.INN);
	РеквизитыКонтрагента.Вставить("КПП", xdto_пакет.participantInfo.legalEntityRFInfo.KPP);
	РеквизитыКонтрагента.Вставить("Наименование", xdto_пакет.participantInfo.legalEntityRFInfo.fullName);
	
	СтруктураДанныхДляКонтракта.Вставить("Контрагент",Справочники.Контрагенты.СоздатьКонтрагента(РеквизитыКонтрагента));
		
	Возврат СтруктураДанныхДляКонтракта;
	 
	 
КонецФункции

 //Структура простых обязательных реквизитов первого уровня
Функция СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту_contract (xdto_пакет) Экспорт 
	
	СтруктураДанныхДляКонтракта = Новый Структура;
	
	//    xdto_пакет.foundation.fcsOrder.order.notificationNumber - поиск извещения	
	НомерИзвещения = "";
	
	Если xdto_пакет.Свойства().Получить("foundation") <> Неопределено Тогда   //.fcsOrder.order.notificationNumber
		Если xdto_пакет.foundation.Свойства().Получить("fcsOrder") <> Неопределено Тогда
			Если xdto_пакет.foundation.fcsOrder.Свойства().Получить("order") <> Неопределено Тогда
				Если xdto_пакет.foundation.fcsOrder.order.Свойства().Получить("notificationNumber") <> Неопределено Тогда
					 НомерИзвещения = xdto_пакет.foundation.fcsOrder.order.notificationNumber;
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	//НомерИзвещения = ?(xdto_пакет.Свойства().Получить("regNum")<>Неопределено,xdto_пакет.regNum,"");
	СтруктураДанныхДляКонтракта.Вставить("purchaseNumber", НомерИзвещения); 
	
	Если НомерИзвещения <> "" Тогда 
		НайденныйДокумент = Документы.ГЗ_ИзвещениеОПроведенииЗакупок.НайтиПоРеквизиту("purchaseNumber", НомерИзвещения);
		Если НайденныйДокумент.Пустая() Тогда
			Если xdto_пакет.Свойства().Получить("customer") <> Неопределено Тогда 
		    	СтруктураДанныхДляКонтракта.Вставить("Организация", ГЗ_РаботаСXML.СоздатьОрганизацию44ФЗ(xdto_пакет.customer));
			Иначе
				СтруктураДанныхДляКонтракта.Вставить("Организация",Справочники.Организации.ОрганизацияПоУмолчанию());
			КонецЕсли;

			СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
		Иначе 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", НайденныйДокумент);
			СтруктураДанныхДляКонтракта.Вставить("Организация", НайденныйДокумент.Организация);			
		КонецЕсли;
	ИначеЕсли xdto_пакет.Свойства().Получить("customer") <> Неопределено Тогда 
		
		СтруктураДанныхДляКонтракта.Вставить("Организация", ГЗ_РаботаСXML.СоздатьОрганизацию44ФЗ(xdto_пакет.customer)); 
		СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
	КонецЕсли;	
	
	СтруктураДанныхДляКонтракта.Вставить("url_ПодписанногоДоговора",xdto_пакет.href);
	
	
	Если xdto_пакет.printForm.Свойства().Получить("docRegNumber")<> Неопределено Тогда 
		СтруктураДанныхДляКонтракта.Вставить("docRegNumber",xdto_пакет.printForm.docRegNumber);	
	ИначеЕсли xdto_пакет.Свойства().Получить("regNum")<> Неопределено Тогда  	
		СтруктураДанныхДляКонтракта.Вставить("docRegNumber",xdto_пакет.regNum);
	КонецЕсли;
	
	Если xdto_пакет.Свойства().Получить("contractSubject")<> Неопределено Тогда			
		
		СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.contractSubject);
		
	ИначеЕсли xdto_пакет.Свойства().Получить("products")<> Неопределено Тогда
		Если xdto_пакет.products.Свойства().Получить("product")<> Неопределено Тогда
			Если ТипЗнч(xdto_пакет.products.product) = Тип("ОбъектXDTO") Тогда 
				Если xdto_пакет.products.product.Свойства().Получить("name")<> Неопределено Тогда
					СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.products.product.name);
				КонецЕсли;
			ИначеЕсли ТипЗнч(xdto_пакет.products.product) = Тип("СписокXDTO") Тогда	
				СтруктураДанныхДляКонтракта.Вставить("ОбъектДоговора",xdto_пакет.products.product[0].name);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	
	Если xdto_пакет.priceInfo.Свойства().Получить("price")<> Неопределено Тогда 
	
		СтруктураДанныхДляКонтракта.Вставить("СуммаКонтракта",xdto_пакет.priceInfo.price);    //xdto_пакет.priceInfo.rightToConcludeContractPriceInfo 
	ИначеЕсли xdto_пакет.priceInfo.Свойства().Получить("rightToConcludeContractPriceInfo")<> Неопределено Тогда
		СтруктураДанныхДляКонтракта.Вставить("СуммаКонтракта",xdto_пакет.priceInfo.rightToConcludeContractPriceInfo.price);
	КонецЕсли;
	Если xdto_пакет.свойства().Получить("placementDate") <> Неопределено Тогда 
		СтруктураДанныхДляКонтракта.Вставить("Дата",XMLЗначение(Тип("Дата"),xdto_пакет.placementDate));
	Иначе 
		СтруктураДанныхДляКонтракта.Вставить("Дата",ТекущаяДата());
	КонецЕсли;	
попытка	
	xdto_контрагент = Неопределено;
	
	Если xdto_пакет.Свойства().Получить("suppliersInfo")<> Неопределено Тогда 	
		Если xdto_пакет.suppliersInfo.Свойства().Получить("supplierInfo")<> Неопределено Тогда 
			 Если ТипЗнч(xdto_пакет.suppliersInfo.supplierInfo) = Тип("ОбъектXDTO") Тогда
							Если xdto_пакет.suppliersInfo.supplierInfo.Свойства().Получить("legalEntityRF")<> Неопределено Тогда 
								Если xdto_пакет.suppliersInfo.supplierInfo.legalEntityRF.Свойства().Получить("EGRULInfo")<> Неопределено Тогда  
									xdto_контрагент = xdto_пакет.suppliersInfo.supplierInfo.legalEntityRF.EGRULInfo;
								КонецЕсли; 
							КонецЕсли;  
						ИначеЕсли ТипЗнч(xdto_пакет.suppliersInfo.supplierInfo) = Тип("СписокXDTO") Тогда
							Если xdto_пакет.suppliersInfo.supplierInfo[0].Свойства().Получить("legalEntityRF")<> Неопределено Тогда 	
								xdto_контрагент = xdto_пакет.suppliersInfo.supplierInfo[0].legalEntityRF.EGRULInfo;
							ИначеЕсли  xdto_пакет.suppliersInfo.supplierInfo[0].Свойства().Получить("individualPersonRFIndEntr")<> Неопределено Тогда 
								xdto_контрагент = xdto_пакет.suppliersInfo.supplierInfo[0].individualPersonRFIndEntr.EGRIPInfo;
							КонецЕсли;	
				КонецЕсли;
						
		КонецЕсли;
	ИначеЕсли xdto_пакет.Свойства().Получить("suppliers")<> Неопределено Тогда  	
		Если xdto_пакет.suppliers.Свойства().Получить("supplier")<> Неопределено Тогда 
			Если ТипЗнч(xdto_пакет.suppliers.supplier) = Тип("ОбъектXDTO") Тогда 
				Если xdto_пакет.suppliers.supplier.Свойства().Получить("legalEntityRF")<> Неопределено Тогда 
					xdto_контрагент = xdto_пакет.suppliers.supplier.legalEntityRF;
				КонецЕсли;
			ИначеЕсли ТипЗнч(xdto_пакет.suppliers.supplier) = Тип("СписокXDTO") Тогда
				  Если xdto_пакет.suppliers.supplier[0].свойства().получить("legalEntityRF")<> Неопределено Тогда 
				  		xdto_контрагент = xdto_пакет.suppliers.supplier[0].legalEntityRF;
				 
						
				КонецЕсли;		
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	
	
	Если xdto_контрагент<> Неопределено Тогда 		  
		РеквизитыКонтрагента = Новый Структура;
		РеквизитыКонтрагента.Вставить("ИНН", xdto_контрагент.INN);
		РеквизитыКонтрагента.Вставить("КПП", ?(xdto_контрагент.Свойства().Получить("KPP")<> Неопределено,xdto_контрагент.KPP, ""));
		РеквизитыКонтрагента.Вставить("Наименование", xdto_контрагент.fullName);
		
		СтруктураДанныхДляКонтракта.Вставить("Контрагент",Справочники.Контрагенты.СоздатьКонтрагента(РеквизитыКонтрагента));
	Иначе
		ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаДоговоровПо44ФЗ", 
		УровеньЖурналаРегистрации.Ошибка, , ,
		"Контрагент не определен ");	
	КонецЕсли;
Исключение
КонецПопытки;	
	Возврат СтруктураДанныхДляКонтракта;
	
	
КонецФункции

&НаСервере
Процедура ЗагрузитьВсеДокументыЗа2021НаСервере()
	АдресСайта = "ftp.zakupki.gov.ru" ;
	Порт = 21;
	Логин = "free";
	Пароль = "free";
	ИмяКаталога = "/fcs_regions";///<регион>/*Notice*/daily";
	
	ГодПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) ;
	МесяцПоиска = Строка(формат(Месяц(ТекущаяДата()),"ЧГ=0"));
	ДеньПоиска =  Строка(формат(День(ТекущаяДата()),"ЧГ=0"));
	
	ЧастьИмениФайлаДляПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) + ?(СтрДлина(МесяцПоиска)=1, "0"+МесяцПоиска, МесяцПоиска)+?(СтрДлина(ДеньПоиска)=1, "0"+ДеньПоиска, ДеньПоиска);
	
	ГодСтрока = СтрЗаменить(Строка(Год(ТекущаяДата())),Символы.НПП,"");
	МесяцСтрока = Формат(Строка(Месяц(ТекущаяДата())),"ЧГ=0");
	ДеньСтрока = Формат(Строка(День(ТекущаяДата())-1),"ЧГ=0");
	
	СтрокаПоискаТекущаяДата = ГодСтрока + ?(СтрДлина(МесяцСтрока)=1, "0"+МесяцСтрока, МесяцСтрока) + ?(СтрДлина(ДеньСтрока)=1, "0"+ДеньСтрока, ДеньСтрока);	
	
	НачалоПериодаОбработкиФайлов = ТекущаяДата()-(60*60*30*Константы.GZ_КоличествоДнейЗагрузкиФайловXML.Получить()); //регламентное на 06-00, обрабатываются файлы после 00-01 вчерашнего числа
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль,,Истина,900,,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	КаталогиПапокОбластей = FTPСоединение.НайтиФайлы(ИмяКаталога+"/*");	
	
	Для Каждого КаталогФТП Из КаталогиПапокОбластей Цикл
		Если КаталогФТП.Расширение = "" Тогда 
			СписокПапокВКаталогеОбласти = FTPСоединение.НайтиФайлы(КаталогФТП.ПолноеИмя+"/*");
			Для Каждого ПапкаИзКаталога Из СписокПапокВКаталогеОбласти Цикл
				Если Найти(ПапкаИзКаталога.Имя, "notifications") > 0 Тогда
					
					ПоискИзвещенийДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя,"*"+"20210*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);	
					
					Для Каждого ФайлИзМассива Из ПоискИзвещенийДляЗагрузки Цикл 	
						Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
							Попытка
								FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ.Получить() + ФайлИзМассива.Имя);
							Исключение
								ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
								УровеньЖурналаРегистрации.Ошибка, , ,
								"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли Найти(ПапкаИзКаталога.Имя, "contracts") > 0 Тогда
					
					ПоискКонтрактовДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя,"*"+"20210*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);
					
					Для Каждого ФайлИзМассива Из ПоискКонтрактовДляЗагрузки Цикл 	
						Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
							Попытка
								FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Договоры.Получить() + ФайлИзМассива.Имя);
							Исключение
								ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
								УровеньЖурналаРегистрации.Ошибка, , ,
								"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВсеДокументыЗа2021НаСервере223ФЗ()
	АдресСайта = "ftp.zakupki.gov.ru" ;
	Порт = 21;
	Логин = "fz223free";
	Пароль = "fz223free";
	ИмяКаталога = "/out/published";///<регион>/*Notice*/daily";
	ГодПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) ;
	МесяцПоиска = Строка(формат(Месяц(ТекущаяДата()),"ЧГ=0"));
	ДеньПоиска =  Строка(формат(День(ТекущаяДата()),"ЧГ=0")-1);
	
	ЧастьИмениФайлаДляПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) + ?(СтрДлина(МесяцПоиска)=1, "0"+МесяцПоиска, МесяцПоиска)+?(СтрДлина(ДеньПоиска)=1, "0"+ДеньПоиска, ДеньПоиска);
	
	ГодСтрока = СтрЗаменить(Строка(Год(ТекущаяДата())),Символы.НПП,"");
	МесяцСтрока = Формат(Строка(Месяц(ТекущаяДата())),"ЧГ=0");
	ДеньСтрока = Формат(Строка(День(ТекущаяДата())-1),"ЧГ=0");
	
	СтрокаПоискаТекущаяДата = ГодСтрока + ?(СтрДлина(МесяцСтрока)=1, "0"+МесяцСтрока, МесяцСтрока) + ?(СтрДлина(ДеньСтрока)=1, "0"+ДеньСтрока, ДеньСтрока);	
	
	
	НачалоПериодаОбработкиФайлов = ТекущаяДата()-(60*60*30)*2; //регламентное на 06-00, обрабатываются файлы после 00-01 вчерашнего числа
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль,,Истина,900,,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	КаталогиПапокОбластей = FTPСоединение.НайтиФайлы(ИмяКаталога+"/*");	
	
	ГодДляПоиска   = Формат(Год(ТекущаяДата()), "ЧГ=0");
	МесяцДляПоиска = Формат(Месяц(ТекущаяДата()), "ЧГ=0");
	ДеньДляПоиска  = Формат(День(ТекущаяДата()-86400), "ЧГ=0");
	
	
	Для Каждого КаталогФТП Из КаталогиПапокОбластей Цикл
		Если КаталогФТП.Расширение = "" Тогда 
			СписокПапокВКаталогеОбласти =FTPСоединение.НайтиФайлы(КаталогФТП.ПолноеИмя+"/"+"*"+"Notice"+"*");
			Для Каждого ПапкаИзКаталога Из СписокПапокВКаталогеОбласти Цикл
				ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя,"*"+ "20210"+ "*", Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);
				Для Каждого ФайлИзМассива Из ПоискФайловДляЗагрузки Цикл
					Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
						Попытка
							FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо223ФЗ.Получить() + ФайлИзМассива.Имя);
						Исключение
							ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
							УровеньЖурналаРегистрации.Ошибка, , ,
							"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
						КонецПопытки;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;				
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсеДокументыЗа2021(Команда)
	ЗагрузитьВсеДокументыЗа2021НаСервере();
	ЗагрузитьВсеДокументыЗа2021НаСервере223ФЗ();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегионыНаСервере()

ОбработатьКонтрагентов();
ОбработатьОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРегионы(Команда)
	ЗаполнитьРегионыНаСервере();
КонецПроцедуры

Процедура ОбработатьКонтрагентов()

			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ГЗ_Регион = &ГЗ_Регион";
	
	Запрос.УстановитьПараметр("ГЗ_Регион", Справочники.ГЗ_Регионы.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектСправочник = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектСправочник.ГЗ_Регион = Справочники.ГЗ_Регионы.НайтиПоКоду(Лев(ОбъектСправочник.ИНН, 2));
		ОбъектСправочник.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Процедура ОбработатьОрганизации()

			//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГЗ_Регион = &ГЗ_Регион";
	
	Запрос.УстановитьПараметр("ГЗ_Регион", Справочники.ГЗ_Регионы.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектСправочник = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектСправочник.ГЗ_Регион = Справочники.ГЗ_Регионы.НайтиПоКоду(Лев(ОбъектСправочник.ИНН, 2));
		ОбъектСправочник.Записать();
	КонецЦикла;
	
	//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА

КонецПроцедуры

Функция ЗначениеСвойстваXDTO(ОбъектXDTO, Имя)

	ВариантИмени = СтрЗаменить(Имя, "-", "_");
	
	Значение = Неопределено;
	
	ИмяПоиска = Неопределено;
	
	Если ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		
		Свойства = ОбъектXDTO.Свойства();
		
		Для Каждого Свойство Из Свойства Цикл
			
			Если Свойство.Имя = Имя Тогда 
				
				ИмяПоиска = Имя;
				
				Прервать;
				
			ИначеЕсли Свойство.Имя = ВариантИмени Тогда
				
				ИмяПоиска = ВариантИмени;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИмяПоиска <> Неопределено Тогда 
			
			Если ТипЗнч(ОбъектXDTO[ИмяПоиска]) = Тип("СписокXDTO") Тогда
				
				Значение = ОбъектXDTO.ПолучитьСписок(ИмяПоиска);
				
			Иначе
				
				Значение = ОбъектXDTO.ПолучитьXDTO(ИмяПоиска);
				
			КонецЕсли;
						
			Если ТипЗнч(Значение) = Тип("ЗначениеXDTO") Тогда
				
				Значение = Значение.Значение;
			
			КонецЕсли;
						
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ЗначениеXDTO") Тогда
		
		Значение = ОбъектXDTO.Значение;
		
	КонецЕсли;

	
	Возврат Значение;

КонецФункции

&НаСервере
Процедура ТестЧтениеXMLНаСервере()
	ПутьКФайлам = "D:\XML\contract\in\";
	ПутьДляОбработанныхФайлов = "D:\XML\contract\out\";
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
		
		
		//ЧтениеXML = Новый ЧтениеXML(); 
		//ЧтениеXML.УстановитьСтроку(СтрокаXML); 
		
		Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		
		//ИерархияДанных = ИерархияТиповXDTO(Данные,,20);
		ЧтениеXML.Закрыть();
		
		//Платеж = ЗначениеСвойстваXDTO(Данные.contract.scanDocuments.attachment.cryptoSigns, "signature");
		//
		//Если Платеж <> Неопределено Тогда
		//	
		//	Ошибка = ЗначениеСвойстваXDTO(Платеж, "message");  // Ошибка = "Техническая ошибка"
		//	
		//	Сообщить(Ошибка);
		//	
		//КонецЕсли;
		
		//СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТестЧтениеXML(Команда)
	ТестЧтениеXMLНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбработатьПротоколыПо44ФЗНаСервере()
	ГЗ_ВыполнитьОбработкуПротоколовПо44ФЗ();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПротоколыПо44ФЗ(Команда)
	ОбработатьПротоколыПо44ФЗНаСервере();
КонецПроцедуры

Процедура ГЗ_ВыполнитьОбработкуПротоколовПо44ФЗ() Экспорт
 		ГЗ_44ФЗ_ЗагрузитьФайлыПротоколовZIPсFTP();
		ГЗ_44ФЗ_РаспаковатьФайлыПротоколов();
		ГЗ_44ФЗ_ОбработатьФайлыXMLПротоколов();
КонецПроцедуры

Процедура ГЗ_44ФЗ_ЗагрузитьФайлыПротоколовZIPсFTP() Экспорт 
	АдресСайта = "ftp.zakupki.gov.ru" ;
	Порт = 21;
	Логин = "free";
	Пароль = "free";
	ИмяКаталога = "/fcs_regions";///<регион>/*Notice*/daily";
	
	ГодПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) ;
	МесяцПоиска = Строка(формат(Месяц(ТекущаяДата()),"ЧГ=0"));
	ДеньПоиска =  Строка(формат(День(ТекущаяДата()),"ЧГ=0"));
	
	ЧастьИмениФайлаДляПоиска = Строка(формат(Год(ТекущаяДата()),"ЧГ=0")) + ?(СтрДлина(МесяцПоиска)=1, "0"+МесяцПоиска, МесяцПоиска)+?(СтрДлина(ДеньПоиска)=1, "0"+ДеньПоиска, ДеньПоиска);
	
	ГодСтрока = СтрЗаменить(Строка(Год(ТекущаяДата())),Символы.НПП,"");
	МесяцСтрока = Формат(Строка(Месяц(ТекущаяДата())),"ЧГ=0");
	ДеньСтрока = Формат(Строка(День(ТекущаяДата())-1),"ЧГ=0");
	
	СтрокаПоискаТекущаяДата = ГодСтрока + ?(СтрДлина(МесяцСтрока)=1, "0"+МесяцСтрока, МесяцСтрока) + ?(СтрДлина(ДеньСтрока)=1, "0"+ДеньСтрока, ДеньСтрока);	
	
	НачалоПериодаОбработкиФайлов = ТекущаяДата()-(60*60*30*Константы.GZ_КоличествоДнейЗагрузкиФайловXML.Получить()); //регламентное на 06-00, обрабатываются файлы после 00-01 вчерашнего числа
	
	FTPСоединение = Новый FTPСоединение(АдресСайта,,Логин,Пароль,,Истина,900,,УровеньИспользованияЗащищенногоСоединенияFTP.НеИспользовать);
	FTPСоединение.УстановитьТекущийКаталог(ИмяКаталога);
	
	КаталогиПапокОбластей = FTPСоединение.НайтиФайлы(ИмяКаталога+"/*");	
	
	Для Каждого КаталогФТП Из КаталогиПапокОбластей Цикл
		Если КаталогФТП.Расширение = "" Тогда 
			СписокПапокВКаталогеОбласти = FTPСоединение.НайтиФайлы(КаталогФТП.ПолноеИмя+"/*");
			Для Каждого ПапкаИзКаталога Из СписокПапокВКаталогеОбласти Цикл
				Если Найти(ПапкаИзКаталога.Имя, "protocols") > 0 Тогда
					Если День(ТекущаяДата()) = 1 Тогда
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/prevMonth/","*" , Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);	
					Иначе
						ПоискФайловДляЗагрузки = FTPСоединение.НайтиФайлы(ПапкаИзКаталога.ПолноеИмя +"/currMonth/","*" , Истина);//ЧастьИмениФайлаДляПоиска+"00_001*",Истина);
					КонецЕсли;
					Для Каждого ФайлИзМассива Из ПоискФайловДляЗагрузки Цикл 	
						Если Найти(ФайлИзМассива.ПолноеИмя, ГодСтрока) > 0 И ФайлИзМассива.Этофайл() И  ФайлИзМассива.размер() > 1000 И ФайлИзМассива.ПолучитьВремяИзменения()>НачалоПериодаОбработкиФайлов Тогда 
							Попытка
								FTPСоединение.Получить(ФайлИзМассива.ПолноеИмя, Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Протоколы.Получить() + ФайлИзМассива.Имя);
							Исключение
								ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
								УровеньЖурналаРегистрации.Ошибка, , ,
								"Получение файла завершилось с ошибкой. Имя файла: "+ФайлИзМассива.ПолноеИмя);
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;				
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ГЗ_44ФЗ_РаспаковатьФайлыПротоколов() Экспорт
	НайдФайлы = НайтиФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Протоколы.Получить(), "*.zip", Истина);
	Для Каждого ФайлЗип Из НайдФайлы Цикл 
		
		Попытка
			ЧтениеЗипФалов = Новый ЧтениеZipФайла(ФайлЗип.ПолноеИмя);
			ЧтениеЗипФалов.ИзвлечьВсе(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Протоколы.Получить());	
			
		Исключение
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.УралтестПоисковаяСистемаЗакупкиПостановкаЗадачПоДокументам", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Получение файла завершилось с ошибкой. Имя файла: "+ФайлЗип.ПолноеИмя);
		КонецПопытки;
	КонецЦикла;
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловZIPПо44ФЗ_Протоколы.Получить(), "*.zip");
	УдалитьФайлы(Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Протоколы.Получить(), "*.sig");
КонецПроцедуры

Процедура ГЗ_44ФЗ_ОбработатьФайлыXMLПротоколов() Экспорт
	
	ПутьКФайлам = Константы.ГЗ_КаталогХраненияФайловXMLПо44ФЗ_Протоколы.Получить();//"D:\XML\contract\in\";
	ПутьДляОбработанныхФайлов = Константы.ГЗ_КаталогХраненияОбработанныхФайловXMLПо44ФЗ_Протоколы.Получить();//"D:\XML\contract\out\";
	
	НайденныеФайлыXML = НайтиФайлы(ПутьКФайлам, "*.xml");
	
	//Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
	//	
	//	ЧтениеXML = Новый ЧтениеXML();
	//	ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
	//	
	//	СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	//	XDTOДанные = ?(СтруктураПрочитанныхДанных.Свойства().Получить("cpContractSign")<>Неопределено,СтруктураПрочитанныхДанных.cpContractSign, Неопределено); 
	//	Если  XDTOДанные<> Неопределено Тогда 
	//		СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоКонтракту(XDTOДанные);
	//	
	//		Документы.ГЗ_ПроектКонтрактаПо44ФЗ.СоздатьДокументПроектКонтактаПо44ФЗ(СтруктураРеквизитовДляДокумента); 
	//		
	//		ЧтениеXML.Закрыть();
	//		ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
	//	Иначе
	//		ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаДоговоровПо44ФЗ", 
	//		УровеньЖурналаРегистрации.Ошибка, , ,
	//		"Получение файла завершилось с ошибкой. Имя файла: "+НайденныйФайл.ПолноеИмя);
	//
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
	Для Каждого НайденныйФайл Из НайденныеФайлыXML Цикл
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(НайденныйФайл.ПолноеИмя, ,);
		
		СтруктураПрочитанныхДанных = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML); 
		
		Если СтруктураПрочитанныхДанных.Свойства().Получить("fcsPlacementResult")<>Неопределено Тогда 
			
			 СтруктураРеквизитовДляДокумента = СформироватьСтруктуруОбязательныхРеквизитовПоПротоколу(СтруктураПрочитанныхДанных.fcsPlacementResult);
			   
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEF3")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZT2020FinalPart")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEFInvalidation")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEFSingleApp")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOK1")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOK2")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOK3")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZK2020FinalPart")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolCancel")<>Неопределено Тогда  //Отмена протокола
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolDeviation")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEvasion")<>Неопределено Тогда 
			Продолжить;
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEF1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolEF2")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOU1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOU2")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOU3")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOUSingleApp")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKOUSinglePart")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKSinglePart")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZP2")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("fcsProtocolDeviation")<>Неопределено Тогда 
			Продолжить;		
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("pprf615ProtocolEF1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEOKSingleApp")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZP1")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolCancel")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epProtocolEZP1Extract")<>Неопределено Тогда 
			Продолжить;	
		ИначеЕсли СтруктураПрочитанныхДанных.Свойства().Получить("epNoticeApplicationsAbsence")<>Неопределено Тогда 
			Продолжить;                                                                                                //fcsProtocolEF3  //fcsProtocolEFInvalidation  //fcsProtocolEFSingleApp //epProtocolEOK1   //epProtocolEOK2  //epProtocolEOK3
		Иначе                                                                                                          //epProtocolEZK2020FinalPart  //fcsProtocolCancel  //fcsProtocolDeviation  //fcsProtocolEvasion    //fcsProtocolEF1 //fcsProtocolEF2
			                                                                                                           //epProtocolEOKOU1  //epProtocolEOKOU2  //epProtocolEOKOU3 //epProtocolEOKOUSingleApp
        КонецЕсли;                                                                                                    //epProtocolEOKOUSinglePart   //epProtocolEOKSinglePart  //epProtocolEZP2   //pprf615ProtocolEF1  //epProtocolEOKSingleApp
		                                                                                                             //epProtocolEZP1   //epProtocolEZP1Extract   //epProtocolCancel   //epProtocolEZT2020FinalPart
		СтруктураРеквизитовДляДокумента.Вставить("ИмяФайла",НайденныйФайл.Имя);
		
		Документы.ГЗ_Протокол44ФЗ.СоздатьДокументПротоколПо44ФЗ(СтруктураРеквизитовДляДокумента); 
			
		ЧтениеXML.Закрыть();
		ПереместитьФайл(НайденныйФайл.ПолноеИмя, ПутьДляОбработанныхФайлов+"\"+НайденныйФайл.Имя);
      
	КонецЦикла;


КонецПроцедуры
 
Функция СформироватьСтруктуруОбязательныхРеквизитовПоПротоколу (xdto_пакет) Экспорт 
	
	СтруктураДанныхДляКонтракта = Новый Структура;
	
	//    foundationInfo.purchaseNumber - поиск извещения	
	
	НомерИзвещения = ?(xdto_пакет.Свойства().Получить("purchaseNumber")<>Неопределено,xdto_пакет.purchaseNumber,"");
	
	СтруктураДанныхДляКонтракта.Вставить("purchaseNumber", НомерИзвещения);
	
	Если НомерИзвещения <> "" Тогда 
		НайденныйДокумент = Документы.ГЗ_ИзвещениеОПроведенииЗакупок.НайтиПоРеквизиту("purchaseNumber", НомерИзвещения);
		Если НайденныйДокумент.Пустая() Тогда 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", Документы.ГЗ_ИзвещениеОПроведенииЗакупок.ПустаяСсылка());
			СтруктураДанныхДляКонтракта.Вставить("Организация",Справочники.Организации.ОрганизацияПоУмолчанию());
			
			ЗаписьЖурналаРегистрации("РегламентноеЗадание.ЗагрузкаПротоколовПо44ФЗ", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Номер извещения не определен!!!");
			
		Иначе 
			СтруктураДанныхДляКонтракта.Вставить("Извещение", НайденныйДокумент);
			СтруктураДанныхДляКонтракта.Вставить("Организация", НайденныйДокумент.Организация);			
		КонецЕсли;	
	КонецЕсли;
	
	СтруктураДанныхДляКонтракта.Вставить("createDate",XMLЗначение(Тип("Дата"),xdto_пакет.createDate));	
	
	СтруктураДанныхДляКонтракта.Вставить("foundationProtocolNumber",xdto_пакет.foundationProtocolNumber);
	
	СтруктураДанныхДляКонтракта.Вставить("lotNumber",xdto_пакет.lotNumber);
	СтруктураДанныхДляКонтракта.Вставить("procedurelFailed",XMLЗначение(Тип("Булево"),xdto_пакет.procedurelFailed));
	СтруктураДанныхДляКонтракта.Вставить("Дата",XMLЗначение(Тип("Дата"),xdto_пакет.createDate));
	СтруктураДанныхДляКонтракта.Вставить("protocolNumber",?(xdto_пакет.Свойства().Получить("protocolNumber")<> Неопределено, xdto_пакет.protocolNumber, ""));
	СтруктураДанныхДляКонтракта.Вставить("foundationProtocolNumber", xdto_пакет.foundationProtocolNumber);
	
	
	Если xdto_пакет.Свойства().Получить("abandonedReason") <> Неопределено Тогда
		
		РеквизитыabandonedReason = Новый Структура;
		РеквизитыabandonedReason.Вставить("code", xdto_пакет.abandonedReason.code);
		РеквизитыabandonedReason.Вставить("objectName", ?(xdto_пакет.abandonedReason.Свойства().Получить("objectName")<> Неопределено,xdto_пакет.abandonedReason.objectName, ""));
		
		РеквизитыabandonedReason.Вставить("name", ?(xdto_пакет.abandonedReason.Свойства().Получить("name")<> Неопределено,xdto_пакет.abandonedReason.name, ""));
		Если xdto_пакет.abandonedReason.Свойства().Получить("type")<> Неопределено Тогда 
			Если xdto_пакет.abandonedReason.type = "OR" Тогда 
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.OR);
			ИначеЕсли xdto_пакет.abandonedReason.type = "NR" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.NR);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "NS" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.NS);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "NV" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.NV);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "O" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.O);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "OV" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.OV);
				
			ИначеЕсли xdto_пакет.abandonedReason.type = "OV2" Тогда
				РеквизитыabandonedReason.Вставить("type", Перечисления.ГЗ_ТипОснования.OV2);
			Иначе
				
			КонецЕсли;	
		КонецЕсли;
		
		СтруктураДанныхДляКонтракта.Вставить("abandonedReason",Справочники.ГЗ_ОснованиеПризнаниеПроцедурыНесостоявшейся.СоздатьОснованиеПризнанияПроцедуры(РеквизитыabandonedReason));
		
	КонецЕсли;	
	
	Если xdto_пакет.Свойства().Получить("result") <> Неопределено Тогда 	
		СтруктураДанныхДляКонтракта.Вставить("result",?(xdto_пакет.result = "CC", Истина, Ложь));
	КонецЕсли;	
	
	Если xdto_пакет.Свойства().Получить("applications")<> Неопределено Тогда 
		Если xdto_пакет.applications.Свойства().Получить("application")<> Неопределено Тогда
			
			ТабличнаяЧастьapplication = ВернутьСтруктуруТабличнойЧастиДокумента();
			
			Если ТипЗнч(xdto_пакет.applications.application) = Тип("ОбъектXDTO") Тогда 
				
				НоваяСтрокаТЧ = ТабличнаяЧастьapplication.Добавить();
				НоваяСтрокаТЧ.journalNumber = xdto_пакет.applications.application.journalNumber; 
				НоваяСтрокаТЧ.appRating = ?(xdto_пакет.applications.application.Свойства().Получить("appRating")<> Неопределено,xdto_пакет.applications.application.appRating, ""); 
				Если xdto_пакет.applications.application.Свойства().Получить("result")<> Неопределено Тогда 
					НоваяСтрокаТЧ.result = ?(xdto_пакет.applications.application.result="CC", Истина, Ложь);
				КонецЕсли;	
				НоваяСтрокаТЧ.price = ?(xdto_пакет.applications.application.Свойства().Получить("price")<> Неопределено,xdto_пакет.applications.application.price, 0);
				
			ИначеЕсли ТипЗнч(xdto_пакет.applications.application) = Тип("СписокXDTO") Тогда
				
				Для Каждого СтрокаПакетаXDTO Из xdto_пакет.applications.application Цикл
					НоваяСтрокаТЧ = ТабличнаяЧастьapplication.Добавить();
					НоваяСтрокаТЧ.journalNumber = СтрокаПакетаXDTO.journalNumber; 
					НоваяСтрокаТЧ.appRating = ?(СтрокаПакетаXDTO.Свойства().Получить("appRating")<> Неопределено,СтрокаПакетаXDTO.appRating, ""); 
					Если СтрокаПакетаXDTO.Свойства().Получить("result")<> Неопределено Тогда 
						НоваяСтрокаТЧ.result = ?(СтрокаПакетаXDTO.result="CC", Истина, Ложь);
					КонецЕсли;	
					НоваяСтрокаТЧ.price = ?(СтрокаПакетаXDTO.Свойства().Получить("price")<> Неопределено,СтрокаПакетаXDTO.price, 0);
					
				КонецЦикла;
			КонецЕсли;
			СтруктураДанныхДляКонтракта.Вставить("application",ТабличнаяЧастьapplication);  
		КонецЕсли;	
	КонецЕсли;
	
	
	
	
	Возврат СтруктураДанныхДляКонтракта;
 КонецФункции
 
Функция ВернутьСтруктуруТабличнойЧастиДокумента() Экспорт 
	ТабличнаяЧастьИзвещения = Новый	 ТаблицаЗначений;
	ТабличнаяЧастьИзвещения.Колонки.Добавить("journalNumber", ,"journalNumber");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("appRating", ,"appRating");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("price", ,"price");
	ТабличнаяЧастьИзвещения.Колонки.Добавить("result", ,"result");

	Возврат  ТабличнаяЧастьИзвещения;
КонецФункции

&НаСервере
Процедура ОбработатьXMLПротоколыНаСервере()
	ГЗ_44ФЗ_ОбработатьФайлыXMLПротоколов();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьXMLПротоколы(Команда)
	ОбработатьXMLПротоколыНаСервере();
КонецПроцедуры


// Возвращает иерархию/дерево типов свойств для ТипОбъектаXDTO
// Упрощает создание Объектов XDTO. 
// Создание объектов XDTO без использования Иерархии свойств:
//////////////////////////////////////////////////////////////////////////////
//  ТипДата = Фабрика.Пакеты.Получить("urn://egisso-ru/msg/10.06.S/1.0.6").КорневыеСвойства.Получить("data").Тип;
//  data = Фабрика.Создать(ТипДата);
//  ТипПакет =ТипДата.Свойства.Получить("package").Тип;
//  data.package = Фабрика.Создать(ТипПакет);
//  data.package.packageId  = XMLСтрока(новый УникальныйИдентификатор);
//  ТипЭлемент = ТипПакет.Свойства.Получить("elements").Тип;
//  data.package.elements =  Фабрика.Создать(ТипЭлемент);
//  ТипФакт = ТипЭлемент.Свойства.Получить("fact").Тип;
//  data.package.elements.fact =  Фабрика.Создать(ТипФакт);
/////////////////////////////////////////////////////////////////////////////
// Создание объектов  XDTO с помощью Иерархии свойств:
/////////////////////////////////////////////////////////////////////////////
//	КорневойТип = Фабрика.Пакеты.Получить("urn://egisso-ru/msg/10.06.S/1.0.6").КорневыеСвойства.Получить("data").Тип;
//	ИерархияТипов = Новый Структура("data", ИерархияТиповXDTO(КорневойТип, 20));
//	data = Фабрика.Создать(ИерархияТипов.data.Тип);
//	data.package = Фабрика.Создать(ИерархияТипов.data.Package.Тип);
//	data.package.packageId  = XMLСтрока(новый УникальныйИдентификатор);
//	data.package.elements = Фабрика.Создать(ИерархияТипов.data.package.elements.Тип);
/////////////////////////////////////////////////////////////////////////////
// Параметры:
//  Тип -      ТипОбъектаXDTO
//  ПределРекурсии  - Число - Максимальная вложенность вызовов этой рекурсивной функции
//  Глубина  - Число -  Служебный - не заполнять. Счетчик вложенности.
//
// Возвращаемое значение:
//  Структура - Содержит Тип (ТипОбъектаXDTO) и перечень иерархий структур, соответствующий набору свойства переданного типа
//
// Пример:
//   КорневойТип = Фабрика.Пакеты.Получить("urn://egisso-ru/msg/10.06.S/1.0.6").КорневыеСвойства.Получить("data").Тип;
//   ИерархияТипов = Новый Структура("data", ИерархияТиповXDTO(КорневойТип, 20));
//   data = Фабрика.Создать(ИерархияТипов.data.Тип);
//   data.package = Фабрика.Создать(ИерархияТипов.data.Package.Тип);
Функция ИерархияТиповXDTO(Тип, ПределРекурсии = Неопределено,  Глубина = 1) Экспорт
     Если ПределРекурсии <> Неопределено Тогда
          Если Глубина > ПределРекурсии тогда
               ВызватьИсключение "Превышен предел на глубину рекурсии: Глубина = " + Глубина + "; Предел = " + ПределРекурсии;
          КонецЕсли;
     КонецЕсли;
     Результат = Новый Структура("Тип", Тип);
     Если ТипЗнч(Тип) = Тип("ТипОбъектаXDTO") Тогда
          Для каждого Свойство из Тип.Свойства Цикл
               Результат.Вставить(Свойство.ЛокальноеИмя, ИерархияТиповXDTO(Свойство.Тип, ПределРекурсии, Глубина + 1));
          КонецЦикла;
     КонецЕсли;
     Возврат Результат;
КонецФункции

// Преобразует текст формата XML в таблицу значений,
// при этом колонки таблицы формируются на основе описания в XML.
//
// Параметры:
//  ТекстXML     - текст в формате XML.
//
// Схема XML:
//<?xml version="1.0" encoding="utf-8"?>
//<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
//  <xs:element name="Items">
//	<xs:complexType>
//	  <xs:sequence>
//		<xs:element maxOccurs="unbounded" name="Item">
//		  <xs:complexType>
//			<xs:attribute name="Code" type="xs:integer" use="required" />
//			<xs:attribute name="Name" type="xs:string" use="required" />
//			<xs:attribute name="Socr" type="xs:string" use="required" />
//			<xs:attribute name="Index" type="xs:string" use="required" />
//		  </xs:complexType>
//		</xs:element>
//	  </xs:sequence>
//	  <xs:attribute name="Description" type="xs:string" use="required" />
//	  <xs:attribute name="Columns" type="xs:string" use="required" />
//	</xs:complexType>
//  </xs:element>
//</xs:schema>
//
// Примеры XML-файлов см. в демонстрационной конфигурации.
// 
// Пример использования:
//   КлассификаторТаблица = ПрочитатьXMLВТаблицу(РегистрыСведений.АдресныйКлассификатор.
//       ПолучитьМакет("КлассификаторАдресныхОбъектовРоссии").ПолучитьТекст());
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПрочитатьXMLВТаблицу(ТекстXML) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	
	// Прочитаем первый узел и проверим его
	Если Не Чтение.Прочитать() Тогда
		ВызватьИсключение("Пустой XML");
	ИначеЕсли Чтение.Имя <> "Items" Тогда
		ВызватьИсключение("Ошибка в структуре XML");
	КонецЕсли;
	
	// Получим описание таблицы и создадим ее
	ИмяТаблицы = Чтение.ПолучитьАтрибут("Description");
	ИменаКолонок = СтрЗаменить(Чтение.ПолучитьАтрибут("Columns"), ",", Символы.ПС);
	Колонок = СтрЧислоСтрок(ИменаКолонок);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	Для Сч = 1 По Колонок Цикл
		ТаблицаЗначений.Колонки.Добавить(СтрПолучитьСтроку(ИменаКолонок, Сч), Новый ОписаниеТипов("Строка"));
	КонецЦикла;
	
	// Заполним значения в таблице
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
			Продолжить;
		ИначеЕсли Чтение.Имя <> "Item" Тогда
			ВызватьИсключение("Ошибка в структуре XML");
		КонецЕсли;
		
		новСтр = ТаблицаЗначений.Добавить();
		Для Сч = 1 По Колонок Цикл
			ИмяКолонки = СтрПолучитьСтроку(ИменаКолонок, Сч);
			новСтр[Сч-1] = Чтение.ПолучитьАтрибут(ИмяКолонки);
		КонецЦикла;
		
	КонецЦикла;
	
	// Заполним результат
	Результат = Новый Структура;
	Результат.Вставить("ИмяТаблицы", ИмяТаблицы);
	Результат.Вставить("Данные", ТаблицаЗначений);
	
	Возврат Результат;
	
КонецФункции // ПрочитатьXMLВТаблицу()

&НаСервере
Процедура ОбработатьИзвещенияСНезаполненнымиОКПД2НаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГЗ_ИзвещениеОПроведенииЗакупок.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ГЗ_ИзвещениеОПроведенииЗакупок КАК ГЗ_ИзвещениеОПроведенииЗакупок
		|ГДЕ
		|	ГЗ_ИзвещениеОПроведенииЗакупок.purchaseObjects.purchaseObject_Строкой <> """"
		|	И ГЗ_ИзвещениеОПроведенииЗакупок.purchaseObjects.purchaseObject = &purchaseObject
		|
		|СГРУППИРОВАТЬ ПО
		|	ГЗ_ИзвещениеОПроведенииЗакупок.Ссылка";
	
	Запрос.УстановитьПараметр("purchaseObject", Справочники.КлассификаторОКПД2.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектДокумент = ВыборкаДетальныеЗаписи.Ссылка.Получитьобъект();
		Для Каждого СтрокаТЧ Из ОбъектДокумент.purchaseObjects Цикл
			Если  СтрокаТч.purchaseObject = Справочники.КлассификаторОКПД2.ПустаяСсылка() Тогда 
				КодОКПД2 = СтрРазделить(СтрокаТч.purchaseObject_Строкой, "-",Истина)[0];
				
				Если СтрРазделить(КодОКПД2, ".").Количество() = 4 Тогда
					МассивКодов = СтрРазделить(КодОКПД2, ".");
					Код_1_Уровня = Справочники.КлассификаторОКПД2.НайтиПоКоду(МассивКодов[0],Истина);
					Код_2_Уровня = Справочники.КлассификаторОКПД2.НайтиПоКоду(МассивКодов[0] + "." +МассивКодов[1],Истина);
					Код_3_Уровня = Справочники.КлассификаторОКПД2.НайтиПоКоду(МассивКодов[0] + "." +МассивКодов[1] + "."+МассивКодов[2],Истина); 
					Код_4_Уровня = Справочники.КлассификаторОКПД2.НайтиПоКоду(КодОКПД2,Истина);
					
					Если Код_4_Уровня<> Справочники.КлассификаторОКПД2.ПустаяСсылка() Тогда 
						НайденныйОКПД2 = Код_4_Уровня;
					ИначеЕсли Код_3_Уровня<> Справочники.КлассификаторОКПД2.ПустаяСсылка() Тогда 
						НайденныйОКПД2 = Код_3_Уровня;
	
					ИначеЕсли Код_2_Уровня<> Справочники.КлассификаторОКПД2.ПустаяСсылка() Тогда 
						НайденныйОКПД2 = Код_2_Уровня;
					ИначеЕсли Код_1_Уровня<> Справочники.КлассификаторОКПД2.ПустаяСсылка() Тогда 
						НайденныйОКПД2 = Код_1_Уровня;
					Иначе
						НайденныйОКПД2 = Справочники.КлассификаторОКПД2.ПустаяСсылка();
					КонецЕсли;
				СтрокаТч.purchaseObject = НайденныйОКПД2;
				КонецЕсли; 
			КонецЕсли;	
		КонецЦикла;
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзвещенияСНезаполненнымиОКПД2(Команда)
	ОбработатьИзвещенияСНезаполненнымиОКПД2НаСервере();
КонецПроцедуры

&НаСервере
Процедура Боты_ПолучитьВсехБотовНаСервере()
	
	ГЗ_РаботаСБотомиРассылок.ОтправитьСообщениеПользователюТелеграмм("125541d6-4707-44da-b2a6-307b98db77a6","fdb10b67-d1e4-44fb-94aa-22ac7c9fbea0", "Привет пользователь", Новый ТаблицаЗначений);
	
	//Сообщение = СистемаВзаимодействия.СоздатьСообщение(новый ИдентификаторОбсужденияСистемыВзаимодействия("fdb10b67-d1e4-44fb-94aa-22ac7c9fbea0"));
	//Сообщение.Получатели.Добавить(новый ИдентификаторПользователяСистемыВзаимодействия("125541d6-4707-44da-b2a6-307b98db77a6"));
	//Сообщение.Автор = Новый ИдентификаторПользователяСистемыВзаимодействия("125541d6-4707-44da-b2a6-307b98db77a6");
	//
	//Сообщение.Текст = "Тестовое сообщение от бота GZ";
	//
	//Попытка
	//	Сообщение.Записать();
	//Исключение
	//	
	//КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Боты_ПолучитьВсехБотов(Команда)
	Боты_ПолучитьВсехБотовНаСервере();
КонецПроцедуры
























